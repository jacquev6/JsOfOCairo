//# 1 "tests_in_browser.bc.runtime.js"
// Generated by js_of_ocaml 3.2.1
(function(a){"use strict";var
bO=" : flags Open_text and Open_binary are not compatible",K=254,f=255,ca=224,b$="}",co="Invalid_argument",Y=65536,b3=",",az='"',e=16777215,b_=1027,a5=16711680,a6=250,al=1024,aB=65599,b2="jsError",b1=864e5,cn=512,b0="End_of_file",ad=65280,bN="lexing: empty token",bZ="Failure",b9="Marshal.data_size: bad object",bY=",\n",a1="\n",a8="]",bM="Stack_overflow",b="",p=128,a4="^",cm="0000",bX="Bigarray.blit: dimension mismatch",cl=1026,x="0",w=248,bL="Not_found",ci="Sys_blocked_io",cj="fd ",ck="p",F=1023,b8="Match_failure",aY=2224400062,bK="static/",bW="Division_by_zero",ak=1e3,a0=1900,bV="Sys_error",aA=".",aj="+",o=65535,ch="Marshal.to_buffer: buffer overflow",bT=1073741823,bU=": ",cg=251,bS=57343,a3=127,N="int_of_string",bR="Illegal seek",J=" ",a7="e",bH="Undefined_recursive_module",bI=0.001,bJ="\\u",b7=")",cf=" : flags Open_rdonly and Open_wronly are not compatible",Z=256,ce="([^/]*)",ay=":",O="-",n=4294967296,b6="nan",aZ=240,bQ=2048,b5=56320,cd=" : file already exists",bG=32752,b4="Assert_failure",t="/",bP="0x",cc="Out_of_memory",z=32768,cb="index out of bounds",a2="null";"use strict";var
bq=0;function
$(a){return a.l}function
k(a,b){switch(a.t&6){default:if(b>=a.c.length)return 0;case
0:return a.c.charCodeAt(b);case
4:return a.c[b]}}function
cK(a,b){var
c=a[1]+b[1],d=a[2]+b[2]+(c>>24),g=a[3]+b[3]+(d>>24);return[f,c&e,d&e,g&o]}var
ag=Math.pow(2,-24);function
cP(a,b){var
c=a[1]*b[1],d=(c*ag|0)+a[2]*b[1]+a[1]*b[2],g=(d*ag|0)+a[3]*b[1]+a[2]*b[2]+a[1]*b[3];return[f,c&e,d&e,g&o]}function
P(a){var
b=-a[1],c=-a[2]+(b>>24),d=-a[3]+(c>>24);return[f,b&e,c&e,d&o]}function
aq(a){return[f,a&e,a>>24&e,a>>31&o]}function
aR(d){var
c=d.length,b=new
Array(c);for(var
a=0;a<c;a++)b[a]=d[a];return b}function
cQ(a,b){var
c=a[1]-b[1],d=a[2]-b[2]+(c>>24),g=a[3]-b[3]+(d>>24);return[f,c&e,d&e,g&o]}function
aJ(a,b){if(a[3]>b[3])return 1;if(a[3]<b[3])return-1;if(a[2]>b[2])return 1;if(a[2]<b[2])return-1;if(a[1]>b[1])return 1;if(a[1]<b[1])return-1;return 0}function
bj(a){a[3]=a[3]<<1|a[2]>>23;a[2]=(a[2]<<1|a[1]>>23)&e;a[1]=a[1]<<1&e}function
cO(a){a[1]=(a[1]>>>1|a[2]<<23)&e;a[2]=(a[2]>>>1|a[3]<<23)&e;a[3]=a[3]>>>1}function
ar(e,g){var
c=0,b=aR(e),a=aR(g),d=[f,0,0,0];while(aJ(b,a)>0){c++;bj(a)}while(c>=0){c--;bj(d);if(aJ(b,a)>=0){d[1]++;b=cQ(b,a)}cO(a)}return[0,d,b]}function
aK(a,b){return aJ(a,b)<0}function
br(c){var
a=0,e=$(c),b=10,d=1;if(e>0)switch(k(c,a)){case
45:a++;d=-1;break;case
43:a++;d=1;break}if(a+1<e&&k(c,a)==48)switch(k(c,a+1)){case
120:case
88:b=16;a+=2;break;case
111:case
79:b=8;a+=2;break;case
98:case
66:b=2;a+=2;break}return[a,d,b]}function
bs(b,a){throw[0,b,a]}function
ab(c,a){if(a.repeat)return a.repeat(c);var
d=b,e=0;if(c==0)return d;for(;;){if(c&1)d+=a;c>>=1;if(c==0)return d;a+=a;e++;if(e==9)a.slice(0,1)}}function
ai(d,e,c){var
b=new
Array(c);for(var
a=0;a<c;a++)b[a]=d[e+a];return b}function
aW(c,d,a){var
e=String.fromCharCode;if(d==0&&a<=4096&&a==c.length)return e.apply(null,c);var
f=b;for(;0<a;d+=al,a-=al)f+=e.apply(null,ai(c,d,Math.min(a,al)));return f}function
l(a){if(a.t==2)a.c+=ab(a.l-a.c.length,"\0");else
a.c=aW(a.c,0,a.c.length);a.t=0}function
bl(a){if(a.length<24){for(var
b=0;b<a.length;b++)if(a.charCodeAt(b)>a3)return false;return true}else
return!/[^\x00-\x7f]/.test(a)}function
c7(f){for(var
k=b,d=b,h,g,i,a,c=0,j=f.length;c<j;c++){g=f.charCodeAt(c);if(g<p){for(var
e=c+1;e<j&&(g=f.charCodeAt(e))<p;e++);if(e-c>cn){d.substr(0,1);k+=d;d=b;k+=f.slice(c,e)}else
d+=f.slice(c,e);if(e==j)break;c=e}a=1;if(++c<j&&((i=f.charCodeAt(c))&-64)==p){h=i+(g<<6);if(g<ca){a=h-12416;if(a<p)a=1}else{a=2;if(++c<j&&((i=f.charCodeAt(c))&-64)==p){h=i+(h<<6);if(g<aZ){a=h-925824;if(a<bQ||a>=55295&&a<57344)a=2}else{a=3;if(++c<j&&((i=f.charCodeAt(c))&-64)==p&&g<245){a=i-63447168+(h<<6);if(a<Y||a>1114111)a=3}}}}}if(a<4){c-=a;d+="\ufffd"}else
if(a>o)d+=String.fromCharCode(55232+(a>>10),b5+(a&F));else
d+=String.fromCharCode(a);if(d.length>al){d.substr(0,1);k+=d;d=b}}return k+d}function
c5(a){switch(a.t){case
9:return a.c;default:l(a);case
0:if(bl(a.c)){a.t=9;return a.c}a.t=8;case
8:return c7(a.c)}}function
q(c,a,b){this.t=c;this.c=a;this.l=b}q.prototype.toString=function(){return c5(this)};function
h(a){return new
q(0,a,a.length)}function
aV(b,a){bs(b,h(a))}var
g=[0];function
d(a){aV(g.Failure,a)}function
at(a){if(a>=48&&a<=57)return a-48;if(a>=65&&a<=90)return a-55;if(a>=97&&a<=122)return a-87;return-1}function
fm(i){var
h=br(i),g=h[0],m=h[1],j=h[2],l=aq(j),n=ar([f,e,268435455,o],l)[1],c=k(i,g),a=at(c);if(a<0||a>=j)d(N);var
b=aq(a);for(;;){g++;c=k(i,g);if(c==95)continue;a=at(c);if(a<0||a>=j)break;if(aK(n,b))d(N);a=aq(a);b=cK(cP(l,b),a);if(aK(b,a))d(N)}if(g!=$(i))d(N);if(h[2]==10&&aK([f,0,0,z],b))d(N);if(m<0)b=P(b);return b}function
aG(a){return(a[3]|a[2]|a[1])==0}function
cR(a){return a[1]|a[2]<<24}function
cN(a){return a[3]<<16<0}function
Q(a){if((a.t&6)!=0)l(a);return a.c}function
i(a){aV(g.Invalid_argument,a)}function
aS(d){d=Q(d);var
e=d.length;if(e>31)i("format_int: format too long");var
a={justify:aj,signstyle:O,filler:J,alternate:false,base:0,signedconv:false,width:0,uppercase:false,sign:1,prec:-1,conv:"f"};for(var
c=0;c<e;c++){var
b=d.charAt(c);switch(b){case"-":a.justify=O;break;case"+":case" ":a.signstyle=b;break;case"0":a.filler=x;break;case"#":a.alternate=true;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":a.width=0;while(b=d.charCodeAt(c)-48,b>=0&&b<=9){a.width=a.width*10+b;c++}c--;break;case".":a.prec=0;c++;while(b=d.charCodeAt(c)-48,b>=0&&b<=9){a.prec=a.prec*10+b;c++}c--;case"d":case"i":a.signedconv=true;case"u":a.base=10;break;case"x":a.base=16;break;case"X":a.base=16;a.uppercase=true;break;case"o":a.base=8;break;case"e":case"f":case"g":a.signedconv=true;a.conv=b;break;case"E":case"F":case"G":a.signedconv=true;a.uppercase=true;a.conv=b.toLowerCase();break}}return a}function
aE(a,f){if(a.uppercase)f=f.toUpperCase();var
e=f.length;if(a.signedconv&&(a.sign<0||a.signstyle!=O))e++;if(a.alternate){if(a.base==8)e+=1;if(a.base==16)e+=2}var
c=b;if(a.justify==aj&&a.filler==J)for(var
d=e;d<a.width;d++)c+=J;if(a.signedconv)if(a.sign<0)c+=O;else
if(a.signstyle!=O)c+=a.signstyle;if(a.alternate&&a.base==8)c+=x;if(a.alternate&&a.base==16)c+=bP;if(a.justify==aj&&a.filler==x)for(var
d=e;d<a.width;d++)c+=x;c+=f;if(a.justify==O)for(var
d=e;d<a.width;d++)c+=J;return h(c)}function
fi(h,d){var
a=aS(h);if(a.signedconv&&cN(d)){a.sign=-1;d=P(d)}var
c=b,i=aq(a.base),g="0123456789abcdef";do{var
f=ar(d,i);d=f[1];c=g.charAt(cR(f[2]))+c}while(!aG(d));if(a.prec>=0){a.filler=J;var
e=a.prec-c.length;if(e>0)c=ab(e,x)+c}return aE(a,c)}function
eD(a){var
c=Math.exp(a),b=c-1;return Math.abs(a)>1?b:b==0?a:a*b/Math.log(c)}if(a.process&&a.process.cwd)var
W=a.process.cwd().replace(/\\/g,t);else
var
W="/static";if(W.slice(-1)!==t)W+=t;function
aM(a){a=a
instanceof
q?a.toString():a;if(a.charCodeAt(0)!=47)a=W+a;var
e=a.split(t),c=[];for(var
d=0;d<e.length;d++)switch(e[d]){case"..":if(c.length>1)c.pop();break;case".":break;case"":if(c.length==0)c.push(b);break;default:c.push(e[d]);break}c.orig=a;return c}function
s(a){aV(g.Sys_error,a)}function
au(a){a=a
instanceof
q?a.toString():a;s(a+": No such file or directory")}function
ac(a){return new
q(4,a,a.length)}function
v(){i(cb)}function
af(a,b){switch(a.t&6){default:if(b>=a.c.length)return 0;case
0:return a.c.charCodeAt(b);case
4:return a.c[b]}}function
bd(b,a){if(a>>>0>=b.l)v();return af(b,a)}function
B(a){if(a<0)i("Bytes.create");return new
q(a?2:9,b,a)}function
aO(a){return a.l}function
ao(c){if(a.Uint8Array)var
d=new(a.Uint8Array)(c.l);else
var
d=new
Array(c.l);var
f=c.c,e=f.length,b=0;for(;b<e;b++)d[b]=f.charCodeAt(b);for(e=c.l;b<e;b++)d[b]=0;c.c=d;c.t=4;return d}function
U(d,e,b,f,c){if(c==0)return 0;if(f==0&&(c>=b.l||b.t==2&&c>=b.c.length)){b.c=d.t==4?aW(d.c,e,c):e==0&&d.c.length==c?d.c:d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else
if(b.t==2&&f==b.c.length){b.c+=d.t==4?aW(d.c,e,c):e==0&&d.c.length==c?d.c:d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else{if(b.t!=4)ao(b);var
g=d.c,h=b.c;if(d.t==4)if(f<=e)for(var
a=0;a<c;a++)h[f+a]=g[e+a];else
for(var
a=c-1;a>=0;a--)h[f+a]=g[e+a];else{var
i=Math.min(c,g.length-e);for(var
a=0;a<i;a++)h[f+a]=g.charCodeAt(e+a);for(;a<c;a++)h[f+a]=0}}return 0}function
a$(){}function
r(a){this.data=a}r.prototype=new
a$();r.prototype.truncate=function(a){var
b=this.data;this.data=B(a|0);U(b,0,this.data,0,a)};r.prototype.length=function(){return aO(this.data)};r.prototype.write=function(b,d,g,a){var
c=this.length();if(b+a>=c){var
e=B(b+a),f=this.data;this.data=e;U(f,0,this.data,0,c)}U(d,g,this.data,b,a);return 0};r.prototype.read=function(c,a,d,b){var
e=this.length();U(this.data,c,a,d,b);return 0};r.prototype.read_one=function(a){return bd(this.data,a)};r.prototype.close=function(){};r.prototype.constructor=r;function
u(b,a){this.content={};this.root=b;this.lookupFun=a}u.prototype.nm=function(a){return this.root+a};u.prototype.lookup=function(a){if(!this.content[a]&&this.lookupFun){var
b=this.lookupFun(h(this.root),h(a));if(b!=0)this.content[a]=new
r(b[1])}};u.prototype.exists=function(a){if(a==b)return 1;var
d=a+t,e=new
RegExp(a4+d);for(var
c
in
this.content)if(c.match(e))return 1;this.lookup(a);return this.content[a]?1:0};u.prototype.readdir=function(d){var
g=d==b?b:d+t,h=new
RegExp(a4+g+ce),e={},c=[];for(var
f
in
this.content){var
a=f.match(h);if(a&&!e[a[1]]){e[a[1]]=true;c.push(a[1])}}return c};u.prototype.is_dir=function(a){var
e=a==b?b:a+t,f=new
RegExp(a4+e+ce),g=[];for(var
d
in
this.content){var
c=d.match(f);if(c)return 1}return 0};u.prototype.unlink=function(a){var
b=this.content[a]?true:false;delete
this.content[a];return b};u.prototype.open=function(a,b){if(b.rdonly&&b.wronly)s(this.nm(a)+cf);if(b.text&&b.binary)s(this.nm(a)+bO);this.lookup(a);if(this.content[a]){if(this.is_dir(a))s(this.nm(a)+" : is a directory");if(b.create&&b.excl)s(this.nm(a)+cd);var
c=this.content[a];if(b.truncate)c.truncate();return c}else
if(b.create){this.content[a]=new
r(B(0));return this.content[a]}else
au(this.nm(a))};u.prototype.register=function(b,a){if(this.content[b])s(this.nm(b)+cd);if(a
instanceof
q)this.content[b]=new
r(a);else
if(a
instanceof
Array)this.content[b]=new
r(ac(a));else
if(a.toString){var
c=h(a.toString());this.content[b]=new
r(c)}};u.prototype.constructor=u;function
am(a){if(a.t!=4)ao(a);return a.c}function
bf(a,c,b){b&=f;if(a.t!=4){if(c==a.c.length){a.c+=String.fromCharCode(b);if(c+1==a.l)a.t=0;return 0}ao(a)}a.c[c]=b;return 0}function
be(b,a,c){if(a>>>0>=b.l)v();return bf(b,a,c)}var
a_=a.Buffer;function
H(a){this.fs=require("fs");this.fd=a}H.prototype=new
a$();H.prototype.truncate=function(a){this.fs.ftruncateSync(this.fd,a|0)};H.prototype.length=function(){return this.fs.fstatSync(this.fd).size};H.prototype.write=function(g,c,d,f){var
b=am(c);if(!(b
instanceof
a.Uint8Array))b=new(a.Uint8Array)(b);var
e=new
a_(b);this.fs.writeSync(this.fd,e,d,f,g);return 0};H.prototype.read=function(h,e,d,g){var
b=am(e);if(!(b
instanceof
a.Uint8Array))b=new(a.Uint8Array)(b);var
f=new
a_(b);this.fs.readSync(this.fd,f,d,g,h);for(var
c=0;c<g;c++)be(e,d+c,f[d+c]);return 0};H.prototype.read_one=function(d){var
c=new(a.Uint8Array)(1),b=new
a_(c);this.fs.readSync(this.fd,b,0,1,d);return b[0]};H.prototype.close=function(){this.fs.closeSync(this.fd)};H.prototype.constructor=H;function
G(a){this.fs=require("fs");this.root=a}G.prototype.nm=function(a){return this.root+a};G.prototype.exists=function(a){return this.fs.existsSync(this.nm(a))?1:0};G.prototype.readdir=function(a){return this.fs.readdirSync(this.nm(a))};G.prototype.is_dir=function(a){return this.fs.statSync(this.nm(a)).isDirectory()?1:0};G.prototype.unlink=function(a){var
b=this.fs.existsSync(this.nm(a))?1:0;this.fs.unlinkSync(this.nm(a));return b};G.prototype.open=function(f,c){var
a=require("constants"),b=0;for(var
e
in
c)switch(e){case"rdonly":b|=a.O_RDONLY;break;case"wronly":b|=a.O_WRONLY;break;case"append":b|=a.O_WRONLY|a.O_APPEND;break;case"create":b|=a.O_CREAT;break;case"truncate":b|=a.O_TRUNC;break;case"excl":b|=a.O_EXCL;break;case"binary":b|=a.O_BINARY;break;case"text":b|=a.O_TEXT;break;case"nonblock":b|=a.O_NONBLOCK;break}var
d=this.fs.openSync(this.nm(f),b);return new
H(d)};G.prototype.rename=function(b,a){this.fs.renameSync(this.nm(b),this.nm(a))};G.prototype.constructor=G;var
aa=W.match(/[^\/]*\//)[0];function
df(){return typeof
a.process!=="undefined"&&typeof
a.process.versions!=="undefined"&&typeof
a.process.versions.node!=="undefined"}var
E=[];if(df())E.push({path:aa,device:new
G(aa)});else
E.push({path:aa,device:new
u(aa)});E.push({path:aa+bK,device:new
u(aa+bK)});function
I(b){var
f=aM(b),b=f.join(t),e=b+t,c;for(var
d=0;d<E.length;d++){var
a=E[d];if(e.search(a.path)==0&&(!c||c.path.length<a.path.length))c={path:a.path,device:a.device,rest:b.substring(a.path.length,b.length)}}return c}function
hz(c){var
a=I(c),b=a.device.is_dir(a.rest);return b?1:0}function
dj(c,d){var
a=c[d],b=0;if(a&4294901760){b+=16;a>>>=16}if(a&ad){b+=8;a>>>=8}if(a&aZ){b+=4;a>>>=4}if(a&12){b+=2;a>>>=2}if(a&2){b+=1;a>>>=1}if(a&1)b+=1;return 32-b}function
c1(b,a){if(a>>>0>=b.l)v();return k(b,a)}function
ae(a,b,c){return a.set1(b,c)}function
cr(f,e,b,c,d){for(var
a=0;a<d;a++)ae(b,c+a,c1(f,e+a));return 0}var
d$=cr;function
gd(a,d){var
a=a+1|0,b=new
Array(a);b[0]=0;for(var
c=1;c<a;c++)b[c]=d;return b}function
dd(c,d,f,e){var
b=e==1?0:1;for(var
a=0;a<f;a++){c[d+a]-=b;if(c[d+a]>=0){b=0;break}else{c[d+a]+=n;b=1}}return b==1?0:1}function
bF(c,d,g,h,i,e,f){var
b=f==1?0:1;for(var
a=0;a<e;a++){c[d+a]-=h[i+a]+b;if(c[d+a]>=0)b=0;else{c[d+a]+=n;b=1}}return dd(c,d+e,g-e,b==1?0:1)}function
aw(b){var
c=a;if(c.process&&c.process.stdout&&c.process.stdout.write)c.process.stderr.write(b);else{if(b.charCodeAt(b.length-1)==10)b=b.substr(0,b.length-1);var
d=c.console;d&&d.error&&d.error(b)}}function
c8(f){for(var
g=b,c=g,a,i,d=0,h=f.length;d<h;d++){a=f.charCodeAt(d);if(a<p){for(var
e=d+1;e<h&&(a=f.charCodeAt(e))<p;e++);if(e-d>cn){c.substr(0,1);g+=c;c=b;g+=f.slice(d,e)}else
c+=f.slice(d,e);if(e==h)break;d=e}if(a<bQ){c+=String.fromCharCode(192|a>>6);c+=String.fromCharCode(p|a&63)}else
if(a<55296||a>=bS)c+=String.fromCharCode(ca|a>>12,p|a>>6&63,p|a&63);else
if(a>=56319||d+1==h||(i=f.charCodeAt(d+1))<b5||i>bS)c+="\xef\xbf\xbd";else{d++;a=(a<<10)+i-56613888;c+=String.fromCharCode(aZ|a>>18,p|a>>12&63,p|a>>6&63,p|a&63)}if(c.length>al){c.substr(0,1);g+=c;c=b}}return g+c}function
X(a){var
b=9;if(!bl(a))b=8,a=c8(a);return new
q(b,a,a.length)}function
aT(a){throw a}function
cZ(){aT(g.Not_found)}function
hy(d){var
b=a,c=d.toString();if(b.process&&b.process.env&&b.process.env[c]!=undefined)return X(b.process.env[c]);cZ()}function
bE(b,d,i,c,e,f){if(f==0){c[e]=0;return 0}var
g=0;for(var
a=i-1;a>=0;a--){var
h=b[d+a];b[d+a]=h>>>f|g;if(b[d+a]<0)b[d+a]+=n;g=h<<32-f}c[e]=g;if(c[e]<0)c[e]+=n;return 0}var
hV=Math.log2&&Math.log2(1.12355820928894744e+307)==1020;function
bA(a){if(hV)return Math.floor(Math.log2(a));var
b=0;if(a==0)return-Infinity;if(a>=1)while(a>=2){a/=2;b++}else
while(a<1){a*=2;b--}return b}function
bi(a){if(!isFinite(a)){if(isNaN(a))return[f,1,0,bG];return a>0?[f,0,0,bG]:[f,0,0,65520]}var
g=a==0&&1/a==-Infinity?z:a>=0?0:z;if(g)a=-a;var
b=bA(a)+F;if(b<=0){b=0;a/=Math.pow(2,-cl)}else{a/=Math.pow(2,b-b_);if(a<16){a*=2;b-=1}if(b==0)a/=2}var
d=Math.pow(2,24),c=a|0;a=(a-c)*d;var
e=a|0;a=(a-e)*d;var
h=a|0;c=c&15|g|b<<4;return[f,h,e,c]}function
aI(a){return[a[3]>>8,a[3]&f,a[2]>>16,a[2]>>8&f,a[2]&f,a[1]>>16,a[1]>>8&f,a[1]&f]}var
ah=function(){function
h(){this.chunk=[]}h.prototype={chunk_idx:20,block_len:0,obj_counter:0,size_32:0,size_64:0,write:function(b,c){for(var
a=b-8;a>=0;a-=8)this.chunk[this.chunk_idx++]=c>>a&f},write_code:function(c,b,d){this.chunk[this.chunk_idx++]=b;for(var
a=c-8;a>=0;a-=8)this.chunk[this.chunk_idx++]=d>>a&f},finalize:function(){this.block_len=this.chunk_idx-20;this.chunk_idx=0;this.write(32,aY);this.write(32,this.block_len);this.write(32,this.obj_counter);this.write(32,this.size_32);this.write(32,this.size_64);return this.chunk}};return function(a){var
b=new
h(),g=[];function
e(a){if(a
instanceof
Array&&a[0]===(a[0]|0)){if(a[0]==f){b.write(8,18);for(var
c=0;c<3;c++)b.write(8,"_j\0".charCodeAt(c));var
h=aI(a);for(var
c=0;c<8;c++)b.write(8,h[c]);b.size_32+=4;b.size_64+=3;return}if(a[0]==cg)d("output_value: abstract value (Abstract)");if(a[0]<16&&a.length-1<8)b.write(8,p+a[0]+(a.length-1<<4));else
b.write_code(32,8,a.length-1<<10|a[0]);b.size_32+=a.length;b.size_64+=a.length;if(a.length>1)g.push(a,1)}else
if(a
instanceof
q){var
e=$(a);if(e<32)b.write(8,32+e);else
if(e<Z)b.write_code(8,9,e);else
b.write_code(32,10,e);for(var
c=0;c<e;c++)b.write(8,k(a,c));b.size_32+=1+((e+4)/4|0);b.size_64+=1+((e+8)/8|0)}else
if(a!=(a|0)){var
i=typeof
a;d("output_value: abstract value ("+i+b7)}else
if(a>=0&&a<64)b.write(8,64+a);else
if(a>=-(1<<7)&&a<1<<7)b.write_code(8,0,a);else
if(a>=-(1<<15)&&a<1<<15)b.write_code(16,1,a);else
b.write_code(32,2,a)}e(a);while(g.length>0){var
c=g.pop(),a=g.pop();if(c+1<a.length)g.push(a,c+1);e(a[c])}b.finalize();return b.chunk}}();function
aD(b){var
d=b.length,c=1;for(var
a=0;a<d;a++){if(b[a]<0)i("Bigarray.create: negative dimension");c=c*b[a]}return c}var
an;function
cv(){if(!an){var
b=a;an=[[b.Float32Array,b.Float64Array,b.Int8Array,b.Uint8Array,b.Int16Array,b.Uint16Array,b.Int32Array,b.Int32Array,b.Int32Array,b.Int32Array,b.Float32Array,b.Float64Array,b.Uint8Array],[0,0,0,0,0,0,0,1,0,0,2,2,0]]}}function
M(a){return ai(a,1,a.length-1)}function
L(){i(cb)}function
T(b,h,d,m,j,g){var
c=g.length,t=aD(g);function
E(b){var
d=0;if(c!=b.length)i("Bigarray.get/set: bad number of dimensions");for(var
a=0;a<c;a++){if(b[a]<0||b[a]>=g[a])L();d=d*g[a]+b[a]}return d}function
F(b){var
d=0;if(c!=b.length)i("Bigarray.get/set: wrong number of indices");for(var
a=c-1;a>=0;a--){if(b[a]<1||b[a]>g[a])L();d=d*g[a]+(b[a]-1)}return d}var
k=j==0?E:F,a=g[0];function
D(a){var
c=k(a),d=b[c];return d}function
C(g){var
d=k(g),c=b[d],a=h[d];return[f,c&e,c>>>24&f|(a&o)<<8,a>>>16&o]}function
B(d){var
a=k(d),e=b[a],c=h[a];return[K,e,c]}var
n=d==1?C:d==2?B:D;function
z(c){if(c<0||c>=a)L();return b[c]}function
A(c){if(c<1||c>a)L();return b[c-1]}function
y(a){return n([a])}var
x=d==0?j==0?z:A:y;function
s(a,c){b[a]=c}function
r(c,a){b[c]=a[1]|(a[2]&f)<<24;h[c]=a[2]>>>8&o|a[3]<<16}function
q(a,c){b[a]=c[1];h[a]=c[2]}function
P(a,c){var
b=k(a);return s(b,c)}function
O(a,b){return r(k(a),b)}function
N(a,b){return q(k(a),b)}var
p=d==1?O:d==2?N:P;function
J(c,d){if(c<0||c>=a)L();b[c]=d}function
M(c,d){if(c<1||c>a)L();b[c-1]=d}function
I(a,b){p([a],b)}var
H=d==0?j==0?J:M:I;function
l(a){if(a<0||a>=c)i("Bigarray.dim");return g[a]}function
w(c){if(d==0)for(var
a=0;a<b.length;a++)s(a,c);if(d==1)for(var
a=0;a<b.length;a++)r(a,c);if(d==2)for(var
a=0;a<b.length;a++)q(a,c)}function
u(a){if(c!=a.num_dims)i(bX);for(var
e=0;e<c;e++)if(g[e]!=a.nth_dim(e))i(bX);b.set(a.data);if(d!=0)h.set(a.data2)}function
R(f,k){var
l,e=1;if(j==0){for(var
a=1;a<c;a++)e=e*g[a];l=0}else{for(var
a=0;a<c-1;a++)e=e*g[a];l=c-1;f=f-1}if(f<0||k<0||f+k>g[l])i("Bigarray.sub: bad sub-array");var
o=b.subarray(f*e,(f+k)*e),p=d==0?null:h.subarray(f*e,(f+k)*e),n=[];for(var
a=0;a<c;a++)n[a]=g[a];n[l]=k;return T(o,p,d,m,j,n)}function
Q(o){var
e=o.length,f=[],n=[],l;if(e>=c)i("Bigarray.slice: too many indices");if(j==0){for(var
a=0;a<e;a++)f[a]=o[a];for(;a<c;a++)f[a]=0;l=k(f);n=g.slice(e)}else{for(var
a=0;a<e;a++)f[c-e+a]=o[a];for(var
a=0;a<c-e;a++)f[a]=1;l=k(f);n=g.slice(0,e)}var
p=aD(n),q=b.subarray(l,l+p),r=d==0?null:h.subarray(l,l+p);return T(q,r,d,m,j,n)}function
G(g){var
c=[],f=g.length;if(f<1)i("Bigarray.reshape: bad number of dimensions");var
e=1;for(var
a=0;a<f;a++){c[a]=g[a];if(c[a]<0)i("Bigarray.reshape: negative dimension");e=e*c[a]}if(e!=t)i("Bigarray.reshape: size mismatch");return T(b,h,d,m,j,c)}function
v(d,g){if(j!=d.layout)return d.layout-j;if(c!=d.num_dims)return d.num_dims-c;for(var
a=0;a<c;a++)if(l(a)!=d.nth_dim(a))return l(a)<d.nth_dim(a)?-1:1;switch(m){case
0:case
1:case
10:case
11:var
e,f;for(var
a=0;a<b.length;a++){e=b[a];f=d.data[a];if(e<f)return-1;if(e>f)return 1;if(e!=f)if(e!=f){if(!g)return NaN;if(e==e)return 1;if(f==f)return-1}if(h){e=h[a];f=d.data2[a];if(e<f)return-1;if(e>f)return 1;if(e!=f)if(e!=f){if(!g)return NaN;if(e==e)return 1;if(f==f)return-1}}}break;case
2:case
3:case
4:case
5:case
6:case
8:case
9:case
12:for(var
a=0;a<b.length;a++){if(b[a]<d.data[a])return-1;if(b[a]>d.data[a])return 1}break;case
7:for(var
a=0;a<b.length;a++){if(h[a]<d.data2[a])return-1;if(h[a]>d.data2[a])return 1;if(b[a]<d.data[a])return-1;if(b[a]>d.data[a])return 1}break}return 0}return{data:b,data2:h,data_type:d,num_dims:c,nth_dim:l,kind:m,layout:j,size:t,sub:R,slice:Q,blit:u,fill:w,reshape:G,get:n,get1:x,set:p,set1:H,compare:v}}function
cu(a,j,h){cv();var
e=M(h),f=aD(e),b=an[0][a];if(!b)i("Bigarray.create: unsupported kind");var
g=new
b(f),d=an[1][a],c=null;if(d!=0)c=new
b(f);return T(g,c,d,a,j,e)}function
cq(b,a){return cu(12,0,[0,a])}function
dw(d,e){var
b=ah(d),c=cq(0,b.length);for(var
a=0;a<b.length;a++)ae(c,a,b[a]);return c}function
hF(e,c){var
a=I(e),b=I(c);if(a.device!=b.device)d("caml_sys_rename: cannot move file between two filesystem");if(!a.device.rename)d("caml_sys_rename: no implemented");a.device.rename(a.rest,b.rest)}function
gW(a){a=a
instanceof
q?a.toString():a;s(a+": Not a directory")}function
hD(e){var
d=I(e),b=d.device.readdir(d.rest),c=new
Array(b.length+1);c[0]=0;for(var
a=0;a<b.length;a++)c[a+1]=h(b[a]);return c}var
c=new
Array();function
gy(b,d){var
a=c[b];if(a.refill!=null)s(bR);a.offset=d;return 0}function
bm(e){var
a=c[e];if(!a.opened)s("Cannot flush a closed channel");if(!a.buffer||a.buffer==b)return 0;if(a.fd&&g.fds[a.fd]&&g.fds[a.fd].output){var
d=g.fds[a.fd].output;switch(d.length){case
2:d(e,a.buffer);break;default:d(a.buffer)}}a.buffer=b;return 0}function
cX(h,e,i,g){var
a=c[h];if(!a.opened)s("Cannot output to a closed channel");var
d;if(i==0&&aO(e)==g)d=e;else{d=B(g);U(e,i,d,0,g)}var
b=Q(d),f=b.lastIndexOf(a1);if(f<0)a.buffer+=b;else{a.buffer+=b.substr(0,f+1);bm(h);a.buffer+=b.substr(f+1)}return 0}function
aP(b,a,d,c){return cX(b,a,d,c)}function
gr(b,a){var
c=h(String.fromCharCode(a));aP(b,c,0,1);return 0}function
aQ(a){var
c=a.refill(),b=aO(c);if(b==0)a.refill=null;a.file.write(a.file.length(),c,0,b);return b}function
bn(b){var
a=c[b];if(a.refill==null)return;if(a.file.length()!=a.offset)return;aQ(a)}function
aU(){aT(g.End_of_file)}function
gl(b){var
a=c[b];bn(b);if(a.offset>=a.file.length())aU();var
d=a.file.read_one(a.offset);a.offset++;return d}function
hr(){return 0}function
gM(a){return+(a
instanceof
Array)}function
cM(a){var
c=(a[3]&32767)>>4;if(c==2047)return(a[1]|a[2]|a[3]&15)==0?a[3]&z?-Infinity:Infinity:NaN;var
d=Math.pow(2,-24),b=(a[1]*d+a[2])*d+(a[3]&15);if(c>0){b+=16;b*=Math.pow(2,c-b_)}else
b*=Math.pow(2,-cl);if(a[3]&z)b=-b;return b}function
ap(a){return[f,a[7]|a[6]<<8|a[5]<<16,a[4]|a[3]<<8|a[2]<<16,a[1]|a[0]<<8]}function
_(a){return cM(ap(a))}function
ga(a){return Math.LOG10E*Math.log(a)}var
bu=0;function
gj(a){bu=a;return 0}function
el(a){if(isFinite(a)){if(Math.abs(a)>=2.22507385850720138e-308)return 0;if(a!=0)return 1;return 2}return isNaN(a)?4:3}function
fW(a){var
a=a.toString();if(!a.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))aw('caml_js_var: "'+a+'" is not a valid JavaScript variable. continuing ..');return eval(a)}function
gn(d){var
b=c[d];bn(d);var
a=b.offset,e=b.file.length();if(a>=e)return 0;while(true){if(a>=e)return-(a-b.offset);if(b.file.read_one(a)==10)return a-b.offset+1;a++}}function
bv(e,f){var
a=c[e],d=h(f),b=$(d);a.file.write(a.offset,d,0,b);a.offset+=b;return 0}function
eU(){return 0}function
fu(a){return+(a>31&&a<a3)}function
cx(a,b){a.t&6&&l(a);b.t&6&&l(b);return a.c<=b.c?1:0}function
d4(a,b){var
c=a.get1(b),d=a.get1(b+1)<<8,e=a.get1(b+2)<<16,g=a.get1(b+3),h=a.get1(b+4)<<8,i=a.get1(b+5)<<16,j=a.get1(b+6),k=a.get1(b+7)<<8;return[f,c|d|e,g|h|i,j|k]}function
cL(a,b){var
c=a[3]<<16,d=b[3]<<16;if(c>d)return 1;if(c<d)return-1;if(a[2]>b[2])return 1;if(a[2]<b[2])return-1;if(a[1]>b[1])return 1;if(a[1]<b[1])return-1;return 0}function
cS(a,b){if(a<b)return-1;if(a==b)return 0;return 1}function
c0(a,b){a.t&6&&l(a);b.t&6&&l(b);return a.c<b.c?-1:a.c>b.c?1:0}function
V(a,b,h){var
d=[];for(;;){if(!(h&&a===b))if(a
instanceof
q)if(b
instanceof
q){if(a!==b){var
c=c0(a,b);if(c!=0)return c}}else
return 1;else
if(a
instanceof
Array&&a[0]===(a[0]|0)){var
e=a[0];if(e===K)e=0;if(e===a6){a=a[1];continue}else
if(b
instanceof
Array&&b[0]===(b[0]|0)){var
f=b[0];if(f===K)f=0;if(f===a6){b=b[1];continue}else
if(e!=f)return e<f?-1:1;else
switch(e){case
248:var
c=cS(a[2],b[2]);if(c!=0)return c;break;case
251:i("equal: abstract value");case
255:var
c=cL(a,b);if(c!=0)return c;break;default:if(a.length!=b.length)return a.length<b.length?-1:1;if(a.length>1)d.push(a,b,1)}}else
return 1}else
if(b
instanceof
q||b
instanceof
Array&&b[0]===(b[0]|0))return-1;else
if(typeof
a!="number"&&a&&a.compare){var
j=a.compare(b,h);if(j!=0)return j}else
if(typeof
a=="function")i("compare: functional value");else{if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!h)return NaN;if(a==a)return 1;if(b==b)return-1}}if(d.length==0)return 0;var
g=d.pop();b=d.pop();a=d.pop();if(g+1<a.length)d.push(a,b,g+1);a=a[g];b=b[g]}}function
eB(a,b){return+(V(a,b,false)==0)}function
dW(a,b){return a.num_dims}function
m(a,b){return a.get1(b)}function
bb(c,f,g,d,e){for(var
a=0;a<e;a++){var
b=m(c,f+a);be(g,d+a,b)}return 0}function
bg(c,b){var
a=I(c);if(!a.device.register)d("cannot register file");a.device.register(a.rest,b);return 0}function
cD(){var
c=a.caml_fs_tmp;if(c)for(var
b=0;b<c.length;b++)bg(c[b].name,c[b].content);a.caml_create_file=bg;return 0}if(!Math.imul)Math.imul=function(b,a){a|=0;return((b>>16)*a<<16)+(b&o)*a|0};var
as=Math.imul;function
D(b,a){a=as(a,3432918353|0);a=a<<15|a>>>32-15;a=as(a,461845907);b^=a;b=b<<13|b>>>32-13;return(b+(b<<2)|0)+(3864292196|0)|0}function
bh(d,b){var
e=b.length,a,c;for(a=0;a+4<=e;a+=4){c=b[a]|b[a+1]<<8|b[a+2]<<16|b[a+3]<<24;d=D(d,c)}c=0;switch(e&3){case
3:c=b[a+2]<<16;case
2:c|=b[a+1]<<8;case
1:c|=b[a];d=D(d,c)}d^=e;return d}function
bt(a){return a}var
bp={};function
bo(a){return bp[a]}function
hM(b){if(b
instanceof
Array)return b;if(a.RangeError&&b
instanceof
a.RangeError&&b.message&&b.message.match(/maximum call stack/i))return bt(g.Stack_overflow);if(a.InternalError&&b
instanceof
a.InternalError&&b.message&&b.message.match(/too much recursion/i))return bt(g.Stack_overflow);if(b
instanceof
a.Error&&bo(b2))return[0,bo(b2),b];return[0,g.Failure,X(String(b))]}function
eG(){return 0}function
hC(){var
a=new
Date()^4294967295*Math.random();return[0,a]}function
f$(c){var
b=0;for(var
a=c.length-1;a>=0;a--){var
d=c[a];b=[0,d,b]}return b}function
dP(a,b,c){return a.get([b,c])}function
g7(){return 0}function
h9(a){return a}function
dm(){return new
Date().getTime()/ak}function
d5(a,b,c){a.set1(b,c&f);a.set1(b+1,c>>>8&f);return 0}function
dk(c,e){var
d=c.length,b=new
Array(d+1),a=0;for(;a<d;a++)b[a]=c[a];b[a]=e;return b}function
A(b,a){if(b.fun)return A(b.fun,a);var
c=b.length,d=a.length,e=c-d;if(e==0)return b.apply(null,a);else
if(e<0)return A(b.apply(null,ai(a,0,c)),ai(a,c,d-c));else
return function(c){return A(b,dk(a,c))}}function
cT(a){return function(){return arguments.length>0?A(a,arguments):A(a,[undefined])}}function
fX(a){return function(){return cT(a)(arguments)}}function
hk(b){var
a=I(b);if(a.device.exists(a.rest)){W=a.rest?a.path+a.rest+t:a.path;return 0}else
au(b)}function
eQ(){return[K,0,0,0]}function
bC(c,d,b){for(var
a=b-1;a>=0;a--)if(c[d+a]!=0)return a+1;return 1}function
db(b,d,h,c,e,i){var
f=bC(b,d,h),g=bC(c,e,i);if(f>g)return 1;if(f<g)return-1;for(var
a=h-1;a>=0;a--){if(b[d+a]>c[e+a])return 1;if(b[d+a]<c[e+a])return-1}return 0}function
dl(c,d,b){for(var
a=0;a<b;a++)c[d+a]=0;return 0}function
fw(b,a){delete
b[a];return 0}function
f_(){var
b=0;for(var
a=0;a<E.length;a++){var
c=b;b=[0,h(E[a].path),c]}return b}function
fs(g){var
i=br(g),c=i[0],j=i[1],e=i[2],h=$(g),l=-1>>>0,f=c<h?k(g,c):0,b=at(f);if(b<0||b>=e)d(N);var
a=b;for(c++;c<h;c++){f=k(g,c);if(f==95)continue;b=at(f);if(b<0||b>=e)break;a=e*a+b;if(a>l)d(N)}if(c!=h)d(N);a=j*a;if(e==10&&(a|0)!=a)d(N);return a|0}var
ge={PREFIX_SMALL_BLOCK:p,PREFIX_SMALL_INT:64,PREFIX_SMALL_STRING:32,CODE_INT8:0,CODE_INT16:1,CODE_INT32:2,CODE_INT64:3,CODE_SHARED8:4,CODE_SHARED16:5,CODE_SHARED32:6,CODE_BLOCK32:8,CODE_BLOCK64:19,CODE_STRING8:9,CODE_STRING32:10,CODE_DOUBLE_BIG:11,CODE_DOUBLE_LITTLE:12,CODE_DOUBLE_ARRAY8_BIG:13,CODE_DOUBLE_ARRAY8_LITTLE:14,CODE_DOUBLE_ARRAY32_BIG:15,CODE_DOUBLE_ARRAY32_LITTLE:7,CODE_CODEPOINTER:16,CODE_INFIXPOINTER:17,CODE_CUSTOM:18};function
fx(a,b){return+(a==b)}function
cI(d,b){var
e=b.length,a,c;for(a=0;a+4<=e;a+=4){c=b.charCodeAt(a)|b.charCodeAt(a+1)<<8|b.charCodeAt(a+2)<<16|b.charCodeAt(a+3)<<24;d=D(d,c)}c=0;switch(e&3){case
3:c=b.charCodeAt(a+2)<<16;case
2:c|=b.charCodeAt(a+1)<<8;case
1:c|=b.charCodeAt(a);d=D(d,c)}d^=e;return d}function
e4(a,b){return+(V(a,b,false)>0)}function
dI(b,a){a.blit(b);return 0}function
aF(c,i){var
q=c.read32u(),o=c.read32u(),l=c.read32u(),r=c.read32u(),s=c.read32u(),m=[],e=l>0?[]:null,k=0;function
h(){var
l=c.read8u();if(l>=64)if(l>=p){var
q=l&15,o=l>>4&7,a=[q];if(o==0)return a;if(e)e[k++]=a;m.push(a,o);return a}else
return l&63;else
if(l>=32){var
j=l&31,a=c.readstr(j);if(e)e[k++]=a;return a}else
switch(l){case
0:return c.read8s();case
1:return c.read16s();case
2:return c.read32s();case
3:d("input_value: integer too large");break;case
4:var
n=c.read8u();return e[k-n];case
5:var
n=c.read16u();return e[k-n];case
6:var
n=c.read32u();return e[k-n];case
8:var
s=c.read32u(),q=s&f,o=s>>10,a=[q];if(o==0)return a;if(e)e[k++]=a;m.push(a,o);return a;case
19:d("input_value: data block too large");break;case
9:var
j=c.read8u(),a=c.readstr(j);if(e)e[k++]=a;return a;case
10:var
j=c.read32u(),a=c.readstr(j);if(e)e[k++]=a;return a;case
12:var
h=new
Array(8);for(var
g=0;g<8;g++)h[7-g]=c.read8u();var
a=_(h);if(e)e[k++]=a;return a;case
11:var
h=new
Array(8);for(var
g=0;g<8;g++)h[g]=c.read8u();var
a=_(h);if(e)e[k++]=a;return a;case
14:var
j=c.read8u(),a=new
Array(j+1);a[0]=K;var
h=new
Array(8);if(e)e[k++]=a;for(var
g=1;g<=j;g++){for(var
i=0;i<8;i++)h[7-i]=c.read8u();a[g]=_(h)}return a;case
13:var
j=c.read8u(),a=new
Array(j+1);a[0]=K;var
h=new
Array(8);if(e)e[k++]=a;for(var
g=1;g<=j;g++){for(var
i=0;i<8;i++)h[i]=c.read8u();a[g]=_(h)}return a;case
7:var
j=c.read32u(),a=new
Array(j+1);a[0]=K;if(e)e[k++]=a;var
h=new
Array(8);for(var
g=1;g<=j;g++){for(var
i=0;i<8;i++)h[7-i]=c.read8u();a[g]=_(h)}return a;case
15:var
j=c.read32u(),a=new
Array(j+1);a[0]=K;var
h=new
Array(8);for(var
g=1;g<=j;g++){for(var
i=0;i<8;i++)h[i]=c.read8u();a[g]=_(h)}return a;case
16:case
17:d("input_value: code pointer");break;case
18:var
r,t=b;while((r=c.read8u())!=0)t+=String.fromCharCode(r);switch(t){case"_j":var
h=new
Array(8);for(var
i=0;i<8;i++)h[i]=c.read8u();var
a=ap(h);if(e)e[k++]=a;return a;case"_i":var
a=c.read32s();if(e)e[k++]=a;return a;case"_n":switch(c.read8u()){case
1:var
a=c.read32s();if(e)e[k++]=a;return a;case
2:d("input_value: native integer value too large");default:d("input_value: ill-formed native integer")}default:d("input_value: unknown custom block identifier")}default:d("input_value: ill-formed message")}}var
n=h();while(m.length>0){var
j=m.pop(),a=m.pop(),g=a.length;if(g<j)m.push(a,j);a[g]=h()}if(typeof
i!="number")i[0]=c.i;return n}function
bz(e,b,a){var
d=e*Y+(b>>>16),f=Math.floor(d/a)*Y,g=d%a*Y,c=g+(b&o);return[f+Math.floor(c/a),c%a]}function
de(h,k,i,l,d,e,c,g,j){var
b=d[e+c-1];for(var
a=c-2;a>=0;a--){var
f=bz(b,d[e+a],g[j]);h[k+a]=f[0];b=f[1]}i[l]=b;return 0}function
bD(b,d,i,c,e,f){if(f==0){c[e]=0;return 0}var
g=0;for(var
a=0;a<i;a++){var
h=b[d+a];b[d+a]=h<<f|g;if(b[d+a]<0)b[d+a]+=n;g=h>>>32-f}c[e]=g;if(c[e]<0)c[e]+=n;return 0}function
dc(c){var
b=[-1,-1];for(var
a=2;a<c+2;a++)b[a]=-1;return b}function
dg(c,d,f,e){var
b=e;for(var
a=0;a<f;a++){c[d+a]+=b;if(c[d+a]<n){b=0;break}else{c[d+a]-=n;b=1}}return b}function
ba(c,d,g,h,i,e,f){var
b=f;for(var
a=0;a<e;a++){c[d+a]+=h[i+a]+b;if(c[d+a]<n)b=0;else{c[d+a]-=n;b=1}}return dg(c,d+e,g-e,b)}function
bB(c,d,g,h,i,e,k,l){var
b=0,f=k[l];for(var
a=0;a<e;a++){c[d+a]+=h[i+a]*(f&o)+b;var
j=h[i+a]*(f>>>16);b=Math.floor(j/Y);c[d+a]+=j%Y*Y;b+=Math.floor(c[d+a]/n);c[d+a]%=n}return e<g&&b?ba(c,d+e,g-e,[b],0,1,0):b}function
hP(b,c,j,e,f,a){if(a==1){de(b,c+1,b,c,b,c,j,e,f);return 0}var
h=dj(e,f+a-1);bD(e,f,a,[0],0,h);bD(b,c,j,[0],0,h);var
k=e[f+a-1]+1,i=dc(a+1);for(var
d=j-1;d>=a;d--){var
g=k==n?b[c+d]:bz(b[c+d],b[c+d-1],k)[0];dl(i,0,a+1);bB(i,0,a+1,e,f,a,[g],0);bF(b,c+d-a,a+1,i,0,a+1,1);while(b[c+d]!=0||db(b,c+d-a,a,e,f,a)>=0){g=g+1;bF(b,c+d-a,a+1,e,f,a,1)}b[c+d]=g}bE(b,c,a,[0],0,h);bE(e,f,a,[0],0,h);return 0}function
d1(a,b){return a.slice(M(b))}function
av(){aT(g.Division_by_zero)}function
fh(b,a){if(aG(a))av();var
d=b[3]^a[3];if(b[3]&z)b=P(b);if(a[3]&z)a=P(a);var
c=ar(b,a)[1];if(d&z)c=P(c);return c}function
hR(a,b){return a[b]<n/4}function
dt(c,d,a,b){while(b>0){if(m(c,a)==d)return a;a++;b--}return-1}function
fI(c){var
b,a=document.createElement(ck);a.innerHTML=c;b=a.textContent||a.innerText;a=null;return b}function
aH(a){if(a<0)a=Math.ceil(a);return[f,a&e,Math.floor(a*ag)&e,Math.floor(a*ag*ag)&o]}function
gh(b){var
a=c[b];return aH(a.file.length())}function
dY(a,b,c,d){return a.set([b,c],d)}function
R(c,b,a){return bf(c,b,a)}function
dC(b,c){function
f(a){bs(g.Undefined_recursive_module,b)}function
e(b,c,a){if(typeof
b==="number")switch(b){case
0:c[a]={fun:f};break;case
1:c[a]=[246,f];break;default:c[a]=[]}else
switch(b[0]){case
0:c[a]=[0];for(var
d=1;d<b[1].length;d++)e(b[1][d],c[a],d);break;default:c[a]=b[1]}}var
a=[];e(c,a,0);return a[0]}function
fz(a){return eval(a.toString())}function
eb(a,b){a.t&6&&l(a);b.t&6&&l(b);return a.c<b.c?-1:a.c>b.c?1:0}function
cV(c,b){function
a(b,a){return af(b,a)<<24|af(b,a+1)<<16|af(b,a+2)<<8|af(b,a+3)}if(a(c,b)!=(aY|0))d(b9);return a(c,b+4)}function
aC(b,a){this.s=Q(b);this.i=a}aC.prototype={read8u:function(){return this.s.charCodeAt(this.i++)},read8s:function(){return this.s.charCodeAt(this.i++)<<24>>24},read16u:function(){var
b=this.s,a=this.i;this.i=a+2;return b.charCodeAt(a)<<8|b.charCodeAt(a+1)},read16s:function(){var
b=this.s,a=this.i;this.i=a+2;return b.charCodeAt(a)<<24>>16|b.charCodeAt(a+1)},read32u:function(){var
b=this.s,a=this.i;this.i=a+4;return(b.charCodeAt(a)<<24|b.charCodeAt(a+1)<<16|b.charCodeAt(a+2)<<8|b.charCodeAt(a+3))>>>0},read32s:function(){var
b=this.s,a=this.i;this.i=a+4;return b.charCodeAt(a)<<24|b.charCodeAt(a+1)<<16|b.charCodeAt(a+2)<<8|b.charCodeAt(a+3)},readstr:function(b){var
a=this.i;this.i=a+b;return h(this.s.substring(a,a+b))}};function
cJ(c,a){var
b=new
aC(c,typeof
a=="number"?a:a[0]);return aF(b,a)}function
e$(f){var
a=c[f],b=B(8);a.file.read(a.offset,b,0,8);var
d=cV(b,0)+20,b=B(d);a.file.read(a.offset,b,0,d);var
e=[0],g=cJ(b,e);a.offset=a.offset+e[0];return g}function
dT(a){return a.kind}function
fF(b,a){switch(a.length){case
1:return b();case
2:return b(a[1]);case
3:return b(a[1],a[2]);case
4:return b(a[1],a[2],a[3]);case
5:return b(a[1],a[2],a[3],a[4]);case
6:return b(a[1],a[2],a[3],a[4],a[5]);case
7:return b(a[1],a[2],a[3],a[4],a[5],a[6]);case
8:return b(a[1],a[2],a[3],a[4],a[5],a[6],a[7])}return b.apply(null,M(a))}function
du(f,e,c,g,h){var
b=ah(g);if(b.length>c)d(ch);for(var
a=0;a<b.length;a++)ae(f,a+e,b[a]);return b.length}function
fP(a){return a()}function
ht(c){var
b=a;if(b.quit)b.quit(c);if(b.process&&b.process.exit)b.process.exit(c);i("Function 'exit' not implemented")}function
gk(e,g,f,b){var
a=c[e],d=a.file.length()-a.offset;if(d==0&&a.refill!=null)d=aQ(a);if(d<b)b=d;a.file.read(a.offset,g,f,b);a.offset+=b;return b}function
dX(a,b){return a.reshape(M(b))}function
fc(d){var
b=new(a.Float32Array)(1);b[0]=d;var
c=new(a.Int32Array)(b.buffer);return c[0]|0}function
hN(a,c,b,d){if(a[c]>b[d])return 1;if(a[c]<b[d])return-1;return 0}function
e6(b,a){return bh(b,a.data)}function
g6(a){a[2]=bq++;return a}function
g1(){return 0}function
e1(){return g}function
h4(d){var
a=new
Date(d*ak),c=new
Date(Date.UTC(a.getUTCFullYear(),0,1)),b=Math.floor((a-c)/b1);return[0,a.getUTCSeconds(),a.getUTCMinutes(),a.getUTCHours(),a.getUTCDate(),a.getUTCMonth(),a.getUTCFullYear()-a0,a.getUTCDay(),b,false|0]}function
d3(a,b){var
c=a.get1(b),d=a.get1(b+1)<<8;return c|d}function
fq(b,a){a=a&63;if(a==0)return b;if(a<24)return[f,(b[1]>>a|b[2]<<24-a)&e,(b[2]>>a|b[3]<<24-a)&e,b[3]>>a];if(a<48)return[f,(b[2]>>a-24|b[3]<<48-a)&e,b[3]>>a-24,0];return[f,b[3]>>a-48,0,0]}function
hl(){return[0,h("js_of_ocaml")]}function
hw(){return[0,h("Unix"),32,0]}function
em(a,b){return V(a,b,true)}function
h7(){return Math.floor(dm())}function
gq(){var
b=0;for(var
a=0;a<c.length;a++)if(c[a]&&c[a].opened&&c[a].out)b=[0,c[a].fd,b];return b}var
dp=bb;function
eN(){return bq++}function
bk(a){return(a[3]<<16)*Math.pow(2,32)+a[2]*Math.pow(2,24)+a[1]}function
dy(c){var
b=new(a.Uint8Array)(c);return T(b,null,0,12,0,[b.length])}function
ds(a){if(a.data2!=null)i("bigstring_destroy: unsupported kind");if(a.hasOwnProperty("__is_deallocated"))i("bigstring_destroy: bigstring is already deallocated");var
c=new(a.data.__proto__.constructor)(0),b=T(c,null,a.data_type,a.kind,a.layout,[0]);b.__is_deallocated=true;Object.assign(a,b);return 0}function
gX(){return 0}function
bc(a,b){var
c=a.get1(b),d=a.get1(b+1)<<8,e=a.get1(b+2)<<16,f=a.get1(b+3)<<24;return c|d|e|f}function
dz(a){return a.data.buffer}function
gG(b,a){if(a==0)av();return b%a}function
gL(d,c){var
b=new
Array(c+1);b[0]=d;for(var
a=1;a<=c;a++)b[a]=0;return b}function
dS(){return 0}function
hX(a,b,c,d){a[b]^=c[d];if(a[b]<0)a[b]+=n;return 0}function
eH(){return 0}function
dR(a,b){return a.get(M(b))}function
a9(a,b){this.s=a;this.i=b}a9.prototype={read8u:function(){return m(this.s,this.i++)},read8s:function(){return m(this.s,this.i++)<<24>>24},read16u:function(){var
b=this.s,a=this.i;this.i=a+2;return m(b,a)<<8|m(b,a+1)},read16s:function(){var
b=this.s,a=this.i;this.i=a+2;return m(b,a)<<24>>16|m(b,a+1)},read32u:function(){var
b=this.s,a=this.i;this.i=a+4;return(m(b,a)<<24|m(b,a+1)<<16|m(b,a+2)<<8|m(b,a+3))>>>0},read32s:function(){var
b=this.s,a=this.i;this.i=a+4;return m(b,a)<<24|m(b,a+1)<<16|m(b,a+2)<<8|m(b,a+3)},readstr:function(b){var
d=this.i,c=new
Array(b);for(var
a=0;a<b;a++)c[a]=m(this.s,d+a);this.i=d+b;return ac(c)}};function
eZ(){return 0}function
ax(c,e){var
d=c.length,b=new
Array(d+1);b[0]=e;for(var
a=1;a<=d;a++)b[a]=c[a-1];return b}function
fR(a){return ax(a,0)}function
gI(a,b){var
c=aM(a),a=c.join(t)+t;E.push({path:a,device:new
u(a,b)});return 0}function
c4(a){delete
g.fds[a];return 0}function
eL(i,c){var
a,e=aS(i),d=e.prec<0?6:e.prec;if(c<0||c==0&&1/c==-Infinity){e.sign=-1;c=-c}if(isNaN(c)){a=b6;e.filler=J}else
if(!isFinite(c)){a="inf";e.filler=J}else
switch(e.conv){case"e":var
a=c.toExponential(d),b=a.length;if(a.charAt(b-3)==a7)a=a.slice(0,b-1)+x+a.slice(b-1);break;case"f":a=c.toFixed(d);break;case"g":d=d?d:1;a=c.toExponential(d-1);var
h=a.indexOf(a7),g=+a.slice(h+1);if(g<-4||c>=1e+21||c.toFixed(0).length>d){var
b=h-1;while(a.charAt(b)==x)b--;if(a.charAt(b)==aA)b--;a=a.slice(0,b+1)+a.slice(h);b=a.length;if(a.charAt(b-3)==a7)a=a.slice(0,b-1)+x+a.slice(b-1);break}else{var
f=d;if(g<0){f-=g+1;a=c.toFixed(f)}else
while(a=c.toFixed(f),a.length>d+1)f--;if(f){var
b=a.length-1;while(a.charAt(b)==x)b--;if(a.charAt(b)==aA)b--;a=a.slice(0,b+1)}}break}return aE(e,a)}function
cB(c,b,e){if(b>>>0>=c.l+7)v();var
d=aI(e);for(var
a=0;a<8;a++)R(c,b+7-a,d[a]);return 0}function
cz(b,a,c){if(a>>>0>=b.l+1)v();var
e=f&c>>8,d=f&c;R(b,a+0,d);R(b,a+1,e);return 0}function
hh(c,a,b){return cz(c,a,b)}function
fg(a){return[f,(a[3]&ad)>>8|(a[3]&f)<<8|a[2]&a5,(a[2]&ad)>>8|(a[2]&f)<<8|a[1]&a5,(a[1]&ad)>>8|(a[1]&f)<<8]}function
et(b,a){if(a==0)av();return b/a|0}function
cC(a,d,c,e){if(c>0)if(d==0&&(c>=a.l||a.t==2&&c>=a.c.length))if(e==0){a.c=b;a.t=2}else{a.c=ab(c,String.fromCharCode(e));a.t=c==a.l?0:2}else{if(a.t!=4)ao(a);for(c+=d;d<c;d++)a.c[d]=e}return 0}var
eE=cC;function
c3(a,b){a.t&6&&l(a);b.t&6&&l(b);return a.c<b.c?1:0}function
hd(a,b){return c3(b,a)}function
eT(){return 0}function
j(b){b=Q(b);var
d=b.length/2,c=new
Array(d);for(var
a=0;a<d;a++)c[a]=(b.charCodeAt(2*a)|b.charCodeAt(2*a+1)<<8)<<16>>16;return c}function
f8(b,v,a){var
p=2,q=3,t=5,e=6,i=7,h=8,l=9,o=1,n=2,s=3,u=4,r=5;if(!b.lex_default){b.lex_base=j(b[o]);b.lex_backtrk=j(b[n]);b.lex_check=j(b[r]);b.lex_trans=j(b[u]);b.lex_default=j(b[s])}var
f,c=v,m=am(a[p]);if(c>=0){a[i]=a[t]=a[e];a[h]=-1}else
c=-c-1;for(;;){var
g=b.lex_base[c];if(g<0)return-g-1;var
k=b.lex_backtrk[c];if(k>=0){a[i]=a[e];a[h]=k}if(a[e]>=a[q])if(a[l]==0)return-c-1;else
f=Z;else{f=m[a[e]];a[e]++}c=b.lex_check[g+f]==c?b.lex_trans[g+f]:b.lex_default[c];if(c<0){a[e]=a[i];if(a[h]==-1)d(bN);else
return a[h]}else
if(f==Z)a[l]=0}}function
hv(){var
b=a,g="a.out",c=[];if(b.process&&b.process.argv&&b.process.argv.length>1){var
d=b.process.argv;g=d[1];c=ai(d,2,d.length-2)}var
h=X(g),f=[0,h];for(var
e=0;e<c.length;e++)f.push(X(c[e]));return[0,h,f]}function
fS(a){return+a}function
hu(b){var
a=I(b);return a.device.exists(a.rest)}var
C=2;function
bx(b,a){if(a<0||C+a>=b.length)i("Weak.get_key");return b[C+a]===undefined?0:b[C+a]}function
da(c,b){if(b<0||C+b>=c.length)i("Weak.get_copy");var
a=bx(c,b);if(a===0)return a;var
d=a[1];if(d
instanceof
Array)return[0,aR(d)];return a}var
ey=da;function
eo(){d("caml_convert_raw_backtrace_slot")}function
gY(){return 0}function
dH(e,f,d){var
a=new
Array(d+1);a[0]=0;for(var
b=1,c=f+1;b<=d;b++,c++)a[b]=e[c];return a}function
f7(a,b){return+(V(a,b,false)<0)}function
ec(a,b){if(a===b)return 1;a.t&6&&l(a);b.t&6&&l(b);return a.c==b.c?1:0}function
hp(){return 0}function
y(c,b,a){g[c+1]=b;if(a)g[a]=b}function
eq(a){return(Math.exp(a)+Math.exp(-a))/2}function
di(f,i,c,g,j,d,h,k,e){var
b=0;for(var
a=0;a<e;a++)b+=bB(f,i+a,c-a,g,j,d,h,k+a);return b}function
h3(c,d,b,f,g,e){var
a=0;a+=ba(c,d,b,c,d,b,0);a+=di(c,d,b,f,g,e,f,g,e);return a}function
c_(b,a){return b[C+a]!==undefined&&b[C+a]!==0?1:0}var
ev=c_;function
cE(a){a^=a>>>16;a=as(a,2246822507|0);a^=a>>>13;a=as(a,3266489909|0);a^=a>>>16;return a}function
d7(a,b,c){a.set1(b,c[1]&f);a.set1(b+1,c[1]>>8&f);a.set1(b+2,c[1]>>16);a.set1(b+3,c[2]&f);a.set1(b+4,c[2]>>8&f);a.set1(b+5,c[2]>>16);a.set1(b+6,c[3]&f);a.set1(b+7,c[3]>>8);return 0}function
f9(d,a,c,g){for(;;){var
b=d.charCodeAt(a);a++;if(b==f)return;var
e=d.charCodeAt(a);a++;c[b+1]=e==f?g:c[e+1]}}function
cU(d,a,c){for(;;){var
b=d.charCodeAt(a);a++;if(b==f)return;var
e=d.charCodeAt(a);a++;c[b+1]=e==f?-1:c[e+1]}}function
gJ(a,F,b){var
v=2,w=3,C=5,f=6,k=7,i=8,p=9,l=10,t=1,r=2,A=3,D=4,x=5,u=6,s=7,B=8,E=9,y=10,z=11;if(!a.lex_default){a.lex_base=j(a[t]);a.lex_backtrk=j(a[r]);a.lex_check=j(a[x]);a.lex_trans=j(a[D]);a.lex_default=j(a[A])}if(!a.lex_default_code){a.lex_base_code=j(a[u]);a.lex_backtrk_code=j(a[s]);a.lex_check_code=j(a[y]);a.lex_trans_code=j(a[E]);a.lex_default_code=j(a[B])}if(a.lex_code==null)a.lex_code=Q(a[z]);var
e,c=F,q=am(b[v]);if(c>=0){b[k]=b[C]=b[f];b[i]=-1}else
c=-c-1;for(;;){var
h=a.lex_base[c];if(h<0){var
g=a.lex_base_code[c];cU(a.lex_code,g,b[l]);return-h-1}var
n=a.lex_backtrk[c];if(n>=0){var
g=a.lex_backtrk_code[c];cU(a.lex_code,g,b[l]);b[k]=b[f];b[i]=n}if(b[f]>=b[w])if(b[p]==0)return-c-1;else
e=Z;else{e=q[b[f]];b[f]++}var
m=c;c=a.lex_check[h+e]==c?a.lex_trans[h+e]:a.lex_default[c];if(c<0){b[f]=b[k];if(b[i]==-1)d(bN);else
return b[i]}else{var
o=a.lex_base_code[m],g;g=a.lex_check_code[o+e]==m?a.lex_trans_code[o+e]:a.lex_default_code[m];if(g>0)f9(a.lex_code,g,b[l],b[f]);if(e==Z)b[p]=0}}}function
fD(a){return a}function
eK(a){var
a=a+1|0,b=new
Array(a);b[0]=K;for(var
c=1;c<a;c++)b[c]=0;return b}function
eX(){return[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}function
f6(a,b){return+(V(a,b,false)<=0)}function
gB(a,b){c[a].offset=bk(b);return 0}function
eW(a){return 0}function
fG(b,a){return b[a]}var
aN=[];function
e2(i,h,d){var
b=i[1],g=aN[d];if(g===null)for(var
f=aN.length;f<d;f++)aN[f]=0;else
if(b[g]===h)return b[g-1];var
a=3,e=b[1]*2+1,c;while(a<e){c=a+e>>1|1;if(h<b[c+1])e=c-2;else
a=c}aN[d]=a+1;return h==b[a+1]?b[a]:0}function
fH(){var
c=a.console?a.console:{},d=["log","debug","info","warn","error","assert","dir","dirxml","trace","group","groupCollapsed","groupEnd","time","timeEnd"];function
e(){}for(var
b=0;b<d.length;b++)if(!c[d[b]])c[d[b]]=e;return c}function
dh(b){var
c=a;if(c.process&&c.process.stdout&&c.process.stdout.write)c.process.stdout.write(b);else{if(b.charCodeAt(b.length-1)==10)b=b.substr(0,b.length-1);var
d=c.console;d&&d.log&&d.log(b)}}function
aX(c,e,d,a){if(g.fds===undefined)g.fds=new
Array();a=a?a:{};var
b={};b.file=d;b.offset=a.append?d.length():0;b.flags=a;b.output=e;g.fds[c]=b;if(!g.fd_last_idx||c>g.fd_last_idx)g.fd_last_idx=c;return c}function
hB(c,b,h){var
a={};while(b){switch(b[1]){case
0:a.rdonly=1;break;case
1:a.wronly=1;break;case
2:a.append=1;break;case
3:a.create=1;break;case
4:a.truncate=1;break;case
5:a.excl=1;break;case
6:a.binary=1;break;case
7:a.text=1;break;case
8:a.nonblock=1;break}b=b[2]}if(a.rdonly&&a.wronly)s(c.toString()+cf);if(a.text&&a.binary)s(c.toString()+bO);var
d=I(c),e=d.device.open(d.rest,a),f=g.fd_last_idx?g.fd_last_idx:0;return aX(f+1,bv,e,a)}aX(0,bv,new
r(B(0)));aX(1,dh,new
r(B(0)));aX(2,aw,new
r(B(0)));function
go(d){var
b=g.fds[d];if(b.flags.wronly)s(cj+d+" is writeonly");var
a={file:b.file,offset:b.offset,fd:d,opened:true,out:false,refill:null};c[a.fd]=a;return a.fd}function
eP(){return 0}function
gQ(b,a){switch(a.length){case
0:return new
b();case
1:return new
b(a[0]);case
2:return new
b(a[0],a[1]);case
3:return new
b(a[0],a[1],a[2]);case
4:return new
b(a[0],a[1],a[2],a[3]);case
5:return new
b(a[0],a[1],a[2],a[3],a[4]);case
6:return new
b(a[0],a[1],a[2],a[3],a[4],a[5]);case
7:return new
b(a[0],a[1],a[2],a[3],a[4],a[5],a[6])}function
c(){return b.apply(this,a)}c.prototype=b.prototype;return new
c()}var
ex=bx;function
hO(b,c,d){for(var
a=0;a<d;a++)b[c+a]=n-1-b[c+a]}var
aL={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};function
fJ(a){if(!aL.all.test(a))return a;return a.replace(aL.amp,"&amp;").replace(aL.lt,"&lt;").replace(aL.quot,"&quot;")}function
gi(b){var
a=c[b];bm(b);a.opened=false;a.file.close();c4(a.fd);return 0}function
h8(){}function
eC(b,c){if(!b.js_error||c||b[0]==w)b.js_error=new(a.Error)("Js exception containing backtrace");return b}function
hA(a){return 0}function
dM(a){return a.nth_dim(1)}function
hT(a,b){return a[b]==0}function
f0(a){return function(){return A(a,[this,arguments])}}function
h5(){return 0}function
g8(a){return(Math.exp(a)-Math.exp(-a))/2}function
fQ(b,a,c){b[a]=c;return 0}function
f5(b,a){a|=0;if(a>F){a-=F;b*=Math.pow(2,F);if(a>F){a-=F;b*=Math.pow(2,F)}}if(a<-F){a+=F;b*=Math.pow(2,-F)}b*=Math.pow(2,a);return b}function
fY(b,e){return function(){var
d=arguments.length;if(d==b)return A(e,arguments);var
c=new
Array(b);for(var
a=0;a<d&&a<b;a++)c[a]=arguments[a];return A(e,c)}}function
dF(b,a){if(a<0||a>=b.length-1)L();return b[a+1]}function
eY(){return[0]}function
fl(a,b){if(aG(b))av();var
d=a[3];if(a[3]&z)a=P(a);if(b[3]&z)b=P(b);var
c=ar(a,b)[2];if(d&z)c=P(c);return c}function
hU(a,b,c,d){a[b]&=c[d];if(a[b]<0)a[b]+=n;return 0}function
er(c,b){if(a.caml_create_file)a.caml_create_file(c,b);else{if(!a.caml_fs_tmp)a.caml_fs_tmp=[];a.caml_fs_tmp.push({name:c,content:b})}return 0}function
gN(b,a){b[0]=a;return 0}function
dA(c,a){var
b=new
a9(c,typeof
a=="number"?a:a[0]);return aF(b,a)}function
fd(a){return(a&f)<<24|(a&ad)<<8|(a&a5)>>>8|(a&4278190080)>>>24}function
g_(){d("Spacetime profiling only works for native code")}function
h_(){}function
gz(b,d){var
a=c[b];if(a.refill!=null)s(bR);a.offset=bk(d);return 0}function
dZ(a,b,c,d,e){return a.set([b,c,d],e)}function
fK(b,a){return b
instanceof
a}function
cF(a,e){var
b=bi(e),d=b[1]|b[2]<<24,c=b[2]>>>8|b[3]<<16;a=D(a,d);a=D(a,c);return a}function
gK(a,b){return+(V(a,b,false)!=0)}function
fo(b,a){a=a&63;if(a==0)return b;if(a<24)return[f,b[1]<<a&e,(b[2]<<a|b[1]>>24-a)&e,(b[3]<<a|b[2]>>24-a)&o];if(a<48)return[f,0,b[1]<<a-24&e,(b[2]<<a-24|b[1]>>48-a)&o];return[f,0,0,b[1]<<a-48&o]}function
fZ(a){return function(){return A(a,ax(arguments,this))}}function
hn(){return 32}var
d9=bb;function
ft(){return 1}function
hj(c,a,b){return cB(c,a,b)}function
hZ(a,b){return a[b]}function
h2(a,b,c){a[b]=c;if(a[b]<0)a[b]+=n;return 0}function
dL(a){return a.nth_dim(0)}function
fL(a,c,b){return a[c.toString()].apply(a,M(b))}function
cw(g,b,c,f,a,e){d("caml_ba_map_file not implemented")}function
dV(a,b){return cw(a[0],a[1],a[2],a[3],a[4],a[5])}function
dn(g){var
a=new
Date(g*ak),d=new
Date(a.getFullYear(),0,1),b=Math.floor((a-d)/b1),c=new
Date(a.getFullYear(),0,1),e=new
Date(a.getFullYear(),6,1),f=Math.max(c.getTimezoneOffset(),e.getTimezoneOffset());return[0,a.getSeconds(),a.getMinutes(),a.getHours(),a.getDate(),a.getMonth(),a.getFullYear()-a0,a.getDay(),b,a.getTimezoneOffset()<f|0]}function
c$(a){if(a<0)i("Weak.create");var
b=[cg,"caml_ephe_list_head"];b.length=C+a;return b}var
ew=c$;function
fT(a){return h(a)}function
hI(a){var
b=Math.exp(a),c=Math.exp(-a);return(b-c)/(b+c)}var
S=a.JSON;if(typeof
S!=="object")S={};(function(){"use strict";var
l=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,n=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,i=/(?:^|:|,)(?:\s*\[)+/g,e=/[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,d=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;function
a(a){return a<10?x+a:a}function
g(){return this.valueOf()}if(typeof
Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+O+a(this.getUTCMonth()+1)+O+a(this.getUTCDate())+"T"+a(this.getUTCHours())+ay+a(this.getUTCMinutes())+ay+a(this.getUTCSeconds())+"Z":null};Boolean.prototype.toJSON=g;Number.prototype.toJSON=g;String.prototype.toJSON=g}var
c,j,h,f;function
m(a){e.lastIndex=0;return e.test(a)?az+a.replace(e,function(a){var
b=h[a];return typeof
b==="string"?b:bJ+(cm+a.charCodeAt(0).toString(16)).slice(-4)})+az:az+a+az}function
k(l,n){var
b,g,e,h,i=c,d,a=n[l];if(a&&typeof
a==="object"&&typeof
a.toJSON==="function")a=a.toJSON(l);if(typeof
f==="function")a=f.call(n,l,a);switch(typeof
a){case"string":return m(a);case"number":return isFinite(a)?String(a):a2;case"boolean":case"null":return String(a);case"object":if(!a)return a2;c+=j;d=[];if(Object.prototype.toString.apply(a)==="[object Array]"){h=a.length;for(b=0;b<h;b+=1)d[b]=k(b,a)||a2;e=d.length===0?"[]":c?"[\n"+c+d.join(bY+c)+a1+i+a8:"["+d.join(b3)+a8;c=i;return e}if(f&&typeof
f==="object"){h=f.length;for(b=0;b<h;b+=1)if(typeof
f[b]==="string"){g=f[b];e=k(g,a);if(e)d.push(m(g)+(c?bU:ay)+e)}}else
for(g
in
a)if(Object.prototype.hasOwnProperty.call(a,g)){e=k(g,a);if(e)d.push(m(g)+(c?bU:ay)+e)}e=d.length===0?"{}":c?"{\n"+c+d.join(bY+c)+a1+i+b$:"{"+d.join(b3)+b$;c=i;return e}}if(typeof
S.stringify!=="function"){h={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};S.stringify=function(g,a,d){var
e;c=b;j=b;if(typeof
d==="number")for(e=0;e<d;e+=1)j+=J;else
if(typeof
d==="string")j=d;f=a;if(a&&typeof
a!=="function"&&(typeof
a!=="object"||typeof
a.length!=="number"))throw new
Error("JSON.stringify");return k(b,{"":g})}}if(typeof
S.parse!=="function")S.parse=function(a,f){var
c;function
g(d,e){var
b,c,a=d[e];if(a&&typeof
a==="object")for(b
in
a)if(Object.prototype.hasOwnProperty.call(a,b)){c=g(a,b);if(c!==undefined)a[b]=c;else
delete
a[b]}return f.call(d,e,a)}a=String(a);d.lastIndex=0;if(d.test(a))a=a.replace(d,function(a){return bJ+(cm+a.charCodeAt(0).toString(16)).slice(-4)});if(l.test(a.replace(o,"@").replace(n,a8).replace(i,b))){c=eval("("+a+b7);return typeof
f==="function"?g({"":c},b):c}throw new
SyntaxError("JSON.parse")}}());function
f3(){return S}function
hJ(a){var
b=1;while(a&&a.joo_tramp){a=a.joo_tramp.apply(null,a.joo_args);b++}return a}function
h6(a){var
c=new
Date(a[6]+a0,a[5],a[4],a[3],a[2],a[1]),b=Math.floor(c.getTime()/ak),d=dn(b);return[0,b,d]}function
ef(d,c){if(c>>>0>=d.l+7)v();var
b=new
Array(8);for(var
a=0;a<8;a++)b[7-a]=k(d,c+a);return ap(b)}function
by(b,a,c){if(a<0||C+a>=b.length)i("Weak.set");b[C+a]=c;return 0}function
hE(a){var
b=I(a),c=b.device.unlink(b.rest);if(c==0)au(a);return 0}function
hL(c){var
d=aM(c),c=d.join(t)+t,b=-1;for(var
a=0;a<E.length;a++)if(E[a].path==c)b=a;if(b>-1)E.splice(b,1);return 0}function
ha(b,a){if(a>>>0>=b.l+3)v();var
c=k(b,a),d=k(b,a+1),e=k(b,a+2),f=k(b,a+3);return f<<24|e<<16|d<<8|c}function
e9(a,b){var
a=Math.abs(a),b=Math.abs(b),c=Math.max(a,b),d=Math.min(a,b)/(c?c:1);return c*Math.sqrt(1+d*d)}function
fe(d){var
b=new(a.Int32Array)(1);b[0]=d;var
c=new(a.Float32Array)(b.buffer);return c[0]}function
gu(a){return aH(c[a].offset)}function
fv(b,c,a){return b.apply(c,M(a))}function
g2(a){return 0}function
hg(b,a,c){if(a>>>0>=b.l)v();return R(b,a,c)}function
ho(){return 2147483647/4|0}function
eA(b,a){return by(b,a,0)}function
gv(a){return c[a].offset}function
g9(a){return 0}function
bw(a,b){if(a===b)return 1;a.t&6&&l(a);b.t&6&&l(b);return a.c==b.c?1:0}function
ei(a,b){return 1-bw(a,b)}function
fN(b){var
c={};for(var
a=1;a<b.length;a++){var
d=b[a];c[d[1].toString()]=d[2]}return c}function
g4(a){return h(b)}function
ct(d,b,e,c,f){if(c<=b)for(var
a=1;a<=f;a++)e[c+a]=d[b+a];else
for(var
a=f;a>=1;a--)e[c+a]=d[b+a];return 0}function
c9(a,c,b,d,e){ct(a,C+c-1,b,C+d-1,e);return 0}function
cy(a,b){a.t&6&&l(a);b.t&6&&l(b);return a.c<b.c?1:0}function
eV(){return[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}function
gm(e){var
a=c[e],b=a.file;while(a.offset+3>=b.length()){var
f=aQ(a);if(f==0)aU()}var
d=a.offset,g=b.read_one(d)<<24|b.read_one(d+1)<<16|b.read_one(d+2)<<8|b.read_one(d+3);a.offset+=4;return g}function
ea(a){return(a&f)<<8|(a&ad)>>8}function
gC(e,b){var
d=c[e],a=g.fds[d.fd];a.flags.text=!b;a.flags.binary=b;return 0}function
eF(){return 0}function
hY(a,b){return a[b]}function
hx(){return h(W)}function
eJ(a){var
c;a=Q(a);c=+a;if(a.length>0&&c===c)return c;a=a.replace(/_/g,b);c=+a;if(a.length>0&&c===c||/^[+-]?nan$/i.test(a))return c;var
e=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(a);if(e){var
f=e[3].replace(/0+$/,b),h=parseInt(e[1]+e[2]+f,16),g=(e[4]|0)-4*f.length;c=h*Math.pow(2,g);return c}if(/^\+?inf(inity)?$/i.test(a))return Infinity;if(/^-inf(inity)?$/i.test(a))return-Infinity;d("float_of_string")}function
g$(b,a){if(a>>>0>=b.l+1)v();var
c=k(b,a),d=k(b,a+1);return d<<8|c}function
hm(){return 0}function
cY(a,b){return ac(ah(a))}function
gR(b,c,d){var
a=cY(c);aP(b,a,0,$(a));return 0}function
hG(b){var
b=b.toString();a.console.log(b);if(typeof
require!="undefined"&&require("child_process")&&require("child_process").execSync)try{require("child_process").execSync(b);return 0}catch(a){return 1}else
return a3}function
dQ(a,b,c,d){return a.get([b,c,d])}var
eu=c9;function
fy(a){if(a.js_error)return a.js_error;return null}function
ek(a,b){if(b>>>0>=a.length-1)L();return a}function
ej(a){return a}function
hQ(){return 0}function
cG(b,a){var
d=a[1]|a[2]<<24,c=a[2]>>>8|a[3]<<16;b=D(b,c^d);return b}function
cH(a,b){switch(b.t&6){default:l(b);case
0:a=cI(a,b.c);break;case
2:a=bh(a,b.c)}return a}var
cp=Z;function
e5(j,k,m,l){var
f,g,h,d,c,b,a,e,i;d=k;if(d<0||d>cp)d=cp;c=j;b=m;f=[l];g=0;h=1;while(g<h&&c>0){a=f[g++];if(a
instanceof
Array&&a[0]===(a[0]|0))switch(a[0]){case
248:b=D(b,a[2]);c--;break;case
250:f[--g]=a[1];break;case
255:b=cG(b,a);c--;break;default:var
n=a.length-1<<10|a[0];b=D(b,n);for(e=1,i=a.length;e<i;e++){if(h>=d)break;f[h++]=a[e]}break}else
if(a
instanceof
q){b=cH(b,a);c--}else
if(a===(a|0)){b=D(b,a+a+1);c--}else
if(a===+a){b=cF(b,a);c--}else
if(a&&a.hash&&typeof
a.hash==="function")b=D(b,a.hash())}b=cE(b);return b&bT}function
dx(e,f,g,h,d){for(var
a=0;a<d;a++){var
b=m(e,f+a),c=m(g,h+a);if(b<c)return-1;if(b>c)return 1}return 0}function
gO(a){return a
instanceof
Array?a[0]:a
instanceof
q?252:ak}function
fA(){return typeof
module!=="undefined"&&module&&module.exports?module.exports:a}function
eO(a){if(a==0||!isFinite(a))return[0,a,0];var
c=a<0;if(c)a=-a;var
b=bA(a)+1;a*=Math.pow(2,-b);if(a<0.5){a*=2;b-=1}if(c)a=-a;return[0,a,b]}function
ee(b,a){if(a>>>0>=b.l+3)v();var
c=k(b,a),d=k(b,a+1),e=k(b,a+2),f=k(b,a+3);return f<<24|e<<16|d<<8|c}function
dq(f,e,b,c,d){for(var
a=0;a<d;a++)ae(b,c+a,bd(f,e+a));return 0}function
ep(a,b){if(b==0)b=1/b;a=Math.abs(a);return b<0?-a:a}function
d0(a,b,c){return a.set(M(b),c)}function
ez(c,a,b){return by(c,a,[0,b])}function
gw(a){return aH(c[a].offset)}function
hb(d,c){if(c>>>0>=d.l+7)v();var
b=new
Array(8);for(var
a=0;a<8;a++)b[7-a]=k(d,c+a);return ap(b)}function
c2(a,b){a.t&6&&l(a);b.t&6&&l(b);return a.c<=b.c?1:0}function
hc(a,b){return c2(b,a)}function
gt(a){return c[a].offset}function
ff(a,b){return[f,a[1]&b[1],a[2]&b[2],a[3]&b[3]]}function
hs(){return 32}function
dJ(a,d){if(a.layout==d)return a;var
c=[];for(var
b=0;b<a.num_dims;b++)c[b]=a.nth_dim(b);return T(a.data,a.data2,a.data_type,a.kind,d,c)}function
fa(c,a){var
b=new
aC(c,typeof
a=="number"?a:a[0]);return aF(b,a)}function
fM(b,a){switch(a.length){case
1:return new
b();case
2:return new
b(a[1]);case
3:return new
b(a[1],a[2]);case
4:return new
b(a[1],a[2],a[3]);case
5:return new
b(a[1],a[2],a[3],a[4]);case
6:return new
b(a[1],a[2],a[3],a[4],a[5]);case
7:return new
b(a[1],a[2],a[3],a[4],a[5],a[6]);case
8:return new
b(a[1],a[2],a[3],a[4],a[5],a[6],a[7])}function
c(){return b.apply(this,M(a))}c.prototype=b.prototype;return new
c()}function
eM(e,c){if(Q(e)=="%d")return h(b+c);var
a=aS(e);if(c<0)if(a.signedconv){a.sign=-1;c=-c}else
c>>>=0;var
d=c.toString(a.base);if(a.prec>=0){a.filler=J;var
f=a.prec-d.length;if(f>0)d=ab(f,x)+d}return aE(a,d)}function
fE(a){return a.toString()}function
gP(b,a){if(a<=0||a+1>b.length)i("Obj.truncate");if(b.length!=a+1)b.length=a+1;return 0}function
d2(a,c,b){return a.sub(c,b)}function
hS(a,b){return a[b]&1==1}function
eR(){return 0}function
fk(a){return a[3]==o&&(a[1]&a[2])==e}function
cA(b,a,c){if(a>>>0>=b.l+3)v();var
h=f&c>>24,g=f&c>>16,e=f&c>>8,d=f&c;R(b,a+0,d);R(b,a+1,e);R(b,a+2,g);R(b,a+3,h);return 0}function
gp(e){var
d=g.fds[e];if(d.flags.rdonly)s(cj+e+" is readonly");var
a={file:d.file,offset:d.offset,fd:e,opened:true,out:true,buffer:b};c[a.fd]=a;return a.fd}function
g5(a){return h(b)}function
dE(a){var
c=[0];while(a!==0){var
d=a[1];for(var
b=1;b<d.length;b++)c.push(d[b]);a=a[2]}return c}function
d6(a,b,c){a.set1(b,c&f);a.set1(b+1,c>>>8&f);a.set1(b+2,c>>>16&f);a.set1(b+3,c>>>24&f);return 0}function
hq(){return 1}function
dv(b,a){if(bc(b,a)!=(aY|0))d(b9);return bc(b,a+4)}function
gc(a){var
a=a+1|0,b=new
Array(a);b[0]=K;for(var
c=1;c<a;c++)b[c]=0;return b}function
gA(a,b){c[a].offset=b;return 0}function
e3(a,b){return+(V(a,b,false)>=0)}function
fV(a){return typeof
a}function
f2(a){return function(){a.apply(null,ax(arguments,this))}}function
dN(a){return a.nth_dim(2)}function
e0(){return[0]}function
gb(a){var
b=1+a,c=b-1;return c==0?a:a*Math.log(b)/c}function
ed(b,a){if(a>>>0>=b.l+1)v();var
c=k(b,a),d=k(b,a+1);return d<<8|c}function
fn(a,b){return[f,a[1]|b[1],a[2]|b[2],a[3]|b[3]]}function
fC(a){return!!a}function
gD(){return 0}function
f4(a){return[a6,a]}function
hW(a,b,c,d){a[b]|=c[d];if(a[b]<0)a[b]+=n;return 0}function
es(a){if(a<0)i("String.create");return new
q(a?2:9,b,a)}function
fO(){var
c=a.navigator?a.navigator.userAgent:b;return c.indexOf("MSIE")!=-1&&c.indexOf("Opera")!=0}function
dU(a){return a.layout}var
cW=function(){function
m(a,b){return a+b|0}function
a(d,a,c,f,b,e){a=m(m(a,d),m(f,e));return m(a<<b|a>>>32-b,c)}function
h(c,b,d,e,h,f,g){return a(b&d|~b&e,c,b,h,f,g)}function
i(d,b,e,c,h,f,g){return a(b&c|e&~c,d,b,h,f,g)}function
j(c,b,d,e,h,f,g){return a(b^d^e,c,b,h,f,g)}function
k(c,b,d,e,h,f,g){return a(d^(b|~e),c,b,h,f,g)}function
n(g,o){var
e=o;g[e>>2]|=p<<8*(e&3);for(e=(e&~3)+8;(e&63)<60;e+=4)g[(e>>2)-1]=0;g[(e>>2)-1]=o<<3;g[e>>2]=o>>29&536870911;var
l=[1732584193,4023233417,2562383102,271733878];for(e=0;e<g.length;e+=16){var
a=l[0],b=l[1],c=l[2],d=l[3];a=h(a,b,c,d,g[e+0],7,3614090360);d=h(d,a,b,c,g[e+1],12,3905402710);c=h(c,d,a,b,g[e+2],17,606105819);b=h(b,c,d,a,g[e+3],22,3250441966);a=h(a,b,c,d,g[e+4],7,4118548399);d=h(d,a,b,c,g[e+5],12,1200080426);c=h(c,d,a,b,g[e+6],17,2821735955);b=h(b,c,d,a,g[e+7],22,4249261313);a=h(a,b,c,d,g[e+8],7,1770035416);d=h(d,a,b,c,g[e+9],12,2336552879);c=h(c,d,a,b,g[e+10],17,4294925233);b=h(b,c,d,a,g[e+11],22,2304563134);a=h(a,b,c,d,g[e+12],7,1804603682);d=h(d,a,b,c,g[e+13],12,4254626195);c=h(c,d,a,b,g[e+14],17,2792965006);b=h(b,c,d,a,g[e+15],22,1236535329);a=i(a,b,c,d,g[e+1],5,4129170786);d=i(d,a,b,c,g[e+6],9,3225465664);c=i(c,d,a,b,g[e+11],14,643717713);b=i(b,c,d,a,g[e+0],20,3921069994);a=i(a,b,c,d,g[e+5],5,3593408605);d=i(d,a,b,c,g[e+10],9,38016083);c=i(c,d,a,b,g[e+15],14,3634488961);b=i(b,c,d,a,g[e+4],20,3889429448);a=i(a,b,c,d,g[e+9],5,568446438);d=i(d,a,b,c,g[e+14],9,3275163606);c=i(c,d,a,b,g[e+3],14,4107603335);b=i(b,c,d,a,g[e+8],20,1163531501);a=i(a,b,c,d,g[e+13],5,2850285829);d=i(d,a,b,c,g[e+2],9,4243563512);c=i(c,d,a,b,g[e+7],14,1735328473);b=i(b,c,d,a,g[e+12],20,2368359562);a=j(a,b,c,d,g[e+5],4,4294588738);d=j(d,a,b,c,g[e+8],11,2272392833);c=j(c,d,a,b,g[e+11],16,1839030562);b=j(b,c,d,a,g[e+14],23,4259657740);a=j(a,b,c,d,g[e+1],4,2763975236);d=j(d,a,b,c,g[e+4],11,1272893353);c=j(c,d,a,b,g[e+7],16,4139469664);b=j(b,c,d,a,g[e+10],23,3200236656);a=j(a,b,c,d,g[e+13],4,681279174);d=j(d,a,b,c,g[e+0],11,3936430074);c=j(c,d,a,b,g[e+3],16,3572445317);b=j(b,c,d,a,g[e+6],23,76029189);a=j(a,b,c,d,g[e+9],4,3654602809);d=j(d,a,b,c,g[e+12],11,3873151461);c=j(c,d,a,b,g[e+15],16,530742520);b=j(b,c,d,a,g[e+2],23,3299628645);a=k(a,b,c,d,g[e+0],6,4096336452);d=k(d,a,b,c,g[e+7],10,1126891415);c=k(c,d,a,b,g[e+14],15,2878612391);b=k(b,c,d,a,g[e+5],21,4237533241);a=k(a,b,c,d,g[e+12],6,1700485571);d=k(d,a,b,c,g[e+3],10,2399980690);c=k(c,d,a,b,g[e+10],15,4293915773);b=k(b,c,d,a,g[e+1],21,2240044497);a=k(a,b,c,d,g[e+8],6,1873313359);d=k(d,a,b,c,g[e+15],10,4264355552);c=k(c,d,a,b,g[e+6],15,2734768916);b=k(b,c,d,a,g[e+13],21,1309151649);a=k(a,b,c,d,g[e+4],6,4149444226);d=k(d,a,b,c,g[e+11],10,3174756917);c=k(c,d,a,b,g[e+2],15,718787259);b=k(b,c,d,a,g[e+9],21,3951481745);l[0]=m(a,l[0]);l[1]=m(b,l[1]);l[2]=m(c,l[2]);l[3]=m(d,l[3])}var
q=new
Array(16);for(var
e=0;e<4;e++)for(var
n=0;n<4;n++)q[e*4+n]=l[e]>>8*n&f;return q}return function(h,g,f){var
e=[];switch(h.t&6){default:l(h);case
0:var
d=h.c;for(var
a=0;a<f;a+=4){var
b=a+g;e[a>>2]=d.charCodeAt(b)|d.charCodeAt(b+1)<<8|d.charCodeAt(b+2)<<16|d.charCodeAt(b+3)<<24}for(;a<f;a++)e[a>>2]|=d.charCodeAt(a+g)<<8*(a&3);break;case
4:var
c=h.c;for(var
a=0;a<f;a+=4){var
b=a+g;e[a>>2]=c[b]|c[b+1]<<8|c[b+2]<<16|c[b+3]<<24}for(;a<f;a++)e[a>>2]|=c[a+g]<<8*(a&3)}return ac(n(e,f))}}();function
gf(f,a){var
b=c[f],e=b.file.length();if(a<0)a=e-b.offset;if(b.offset+a>e)aU();var
d=B(a);b.file.read(b.offset,d,0,a);return cW(d,0,a)}function
fp(b,a){a=a&63;if(a==0)return b;var
d=b[3]<<16>>16;if(a<24)return[f,(b[1]>>a|b[2]<<24-a)&e,(b[2]>>a|d<<24-a)&e,b[3]<<16>>a>>>16];var
c=b[3]<<16>>31;if(a<48)return[f,(b[2]>>a-24|b[3]<<48-a)&e,b[3]<<16>>a-24>>16&e,c&o];return[f,b[3]<<16>>a-32&e,c&e,c&o]}function
en(){return[0]}function
dG(b,a,c){if(a<0||a>=b.length-1)L();b[a+1]=c;return 0}function
eg(a,b){return cx(b,a)}function
c6(c,a){if(typeof
a==="function"){c.fun=a;return 0}if(a.fun){c.fun=a.fun;return 0}var
b=a.length;while(b--)c[b]=a[b];return 0}function
cs(b,c,d){if(typeof
b==="number")switch(b){case
0:c.fun=d;break;case
1:default:c6(c,d)}else
switch(b[0]){case
0:for(var
a=1;a<b[1].length;a++)cs(b[1][a],c[a],d[a]);break}return 0}function
h1(a,b,c){a[b]=c;if(a[b]<0)a[b]+=n;return 0}function
hK(b,a){return{joo_tramp:b,joo_args:a}}function
gs(c,a){var
b=[a>>24&f,a>>16&f,a>>8&f,a&f],d=ac(b);aP(c,d,0,4);return 0}var
e_=new
Date()*bI;function
hH(){return new
Date()*bI-e_}function
gg(b){var
a=c[b];return a.file.length()}function
dD(c,d){var
g=c.length,h=d.length,f=g+h-1,b=new
Array(f);b[0]=0;var
a=1,e=1;for(;a<g;a++)b[a]=c[a];for(;a<f;a++,e++)b[a]=d[e];return b}function
gZ(){i("Printexc.get_raw_backtrace_slot: index out of bounds")}function
hf(a){return a}function
gF(a,b){c[a].refill=b;return 0}function
fj(a){return a[3]==z&&(a[1]|a[2])==0}function
e8(a,d,l){if(!isFinite(a)){if(isNaN(a))return X(b6);return X(a>0?"infinity":"-infinity")}var
j=a==0&&1/a==-Infinity?1:a>=0?0:1;if(j)a=-a;var
e=0;if(a==0);else
if(a<1)while(a<1&&e>-1022){a*=2;e--}else
while(a>=2){a/=2;e++}var
k=e<0?b:aj,f=b;if(j)f=O;else
switch(l){case
43:f=aj;break;case
32:f=J;break;default:break}if(d>=0&&d<13){var
h=Math.pow(2,d*4);a=Math.round(a*h)/h}var
c=a.toString(16);if(d>=0){var
i=c.indexOf(aA);if(i<0)c+=aA+ab(d,x);else{var
g=i+1+d;if(c.length<g)c+=ab(g-c.length,x);else
c=c.substr(0,g)}}return X(f+bP+c+ck+k+e.toString(10))}function
fB(a){aw("caml_js_expr: fallback to runtime evaluation");return eval(a.toString())}function
f1(c,e){return function(){var
d=arguments.length;if(d==c)return A(e,ax(arguments,this));var
b=new
Array(c+1);b[0]=this;for(var
a=1;a<d&&a<=c;a++)b[a]=arguments[a];return A(e,b)}}function
gx(a){return bu}function
d8(){return 0}function
fb(){return 0}function
dO(a,b){a.fill(b);return 0}function
eS(){return[0,0,0,0,0,0,0,0,0]}function
gT(a,b){return ac(ah(a))}function
gH(a){if(isFinite(a)){var
d=1/a<0;a=Math.abs(a);var
b=Math.floor(a),c=a-b;if(d){b=-b;c=-c}return[0,c,b]}if(isNaN(a))return[0,NaN,NaN];return[0,1/a,a]}function
e7(d,g,a){var
b=0;function
f(a){g--;if(d<0||g<0)return;if(a
instanceof
Array&&a[0]===(a[0]|0))switch(a[0]){case
248:d--;b=b*aB+a[2]|0;break;case
250:g++;f(a);break;case
255:d--;b=b*aB+a[1]+(a[2]<<24)|0;break;default:d--;b=b*19+a[0]|0;for(var
c=a.length-1;c>0;c--)f(a[c])}else
if(a
instanceof
q){d--;switch(a.t&6){default:l(a);case
0:for(var
i=a.c,e=a.l,c=0;c<e;c++)b=b*19+i.charCodeAt(c)|0;break;case
2:for(var
h=a.c,e=a.l,c=0;c<e;c++)b=b*19+h[c]|0}}else
if(a===(a|0)){d--;b=b*aB+a|0}else
if(a===+a){d--;var
j=aI(bi(a));for(var
c=7;c>=0;c--)b=b*19+j[c]|0}else
if(a&&a.hash&&typeof
a.hash==="function")b=b*aB+a.hash()|0}f(a);return b&bT}function
eI(a,b){if(a===b)return 0;if(a<b)return-1;if(a>b)return 1;if(a===a)return 1;if(b===b)return-1;return 0}function
hi(c,a,b){return cA(c,a,b)}function
gU(b,a,g,m){var
w=Z,v=6,ab=7,P=8,Q=9,E=10,J=0,s=1,H=2,I=3,G=4,F=5,p=1,D=2,C=3,q=4,A=5,M=6,f=7,u=8,O=9,N=10,x=11,K=12,L=13,z=14,B=15,y=16,aa=2,$=3,W=4,V=5,S=6,T=7,Y=8,X=9,U=10,r=11,_=12,R=13;if(!b.dgoto){b.defred=j(b[S]);b.sindex=j(b[Y]);b.check=j(b[R]);b.rindex=j(b[X]);b.table=j(b[_]);b.len=j(b[V]);b.lhs=j(b[W]);b.gindex=j(b[U]);b.dgoto=j(b[T])}var
l=0,k,e,d,o,c=a[z],h=a[B],i=a[y];exit:for(;;)switch(g){case
0:h=0;i=0;case
6:k=b.defred[h];if(k!=0){g=E;break}if(a[f]>=0){g=ab;break}l=J;break exit;case
1:if(m
instanceof
Array){a[f]=b[$][m[0]+1];a[u]=m[1]}else{a[f]=b[aa][m+1];a[u]=0}case
7:e=b.sindex[h];d=e+a[f];if(e!=0&&d>=0&&d<=b[r]&&b.check[d]==a[f]){g=P;break}e=b.rindex[h];d=e+a[f];if(e!=0&&d>=0&&d<=b[r]&&b.check[d]==a[f]){k=b.table[d];g=E;break}if(i<=0){l=F;break exit}case
5:if(i<3){i=3;for(;;){o=a[p][c+1];e=b.sindex[o];d=e+w;if(e!=0&&d>=0&&d<=b[r]&&b.check[d]==w){g=Q;break}else{if(c<=a[M])return s;c--}}}else{if(a[f]==0)return s;a[f]=-1;g=v;break}case
8:a[f]=-1;if(i>0)i--;case
9:h=b.table[d];c++;if(c>=a[A]){l=H;break exit}case
2:a[p][c+1]=h;a[D][c+1]=a[u];a[C][c+1]=a[O];a[q][c+1]=a[N];g=v;break;case
10:var
n=b.len[k];a[x]=c;a[L]=k;a[K]=n;c=c-n+1;n=b.lhs[k];o=a[p][c];e=b.gindex[n];d=e+o;h=e!=0&&d>=0&&d<=b[r]&&b.check[d]==o?b.table[d]:b.dgoto[n];if(c>=a[A]){l=I;break exit}case
3:l=G;break exit;case
4:a[p][c+1]=h;a[D][c+1]=m;var
t=a[x];a[q][c+1]=a[q][t+1];if(c>t)a[C][c+1]=a[q][t+1];g=v;break;default:return s}a[z]=c;a[B]=h;a[y]=i;return l}function
h0(b){var
d=b.length,c=new
Array(d);for(var
a=0;a<d;a++)c[a]=b[a];return c}function
gS(e,c,b,f,g){var
a=ah(f);if(a.length>b)d(ch);U(a,0,e,c,a.length);return 0}function
gV(a){aw("caml_pure_js_expr: fallback to runtime evaluation");return eval(a.toString())}function
d_(d,a,e,b,c){return U(d,a,e,b,c)}function
dB(c,e,d,f,b){for(var
a=0;a<b;a++)c[e+a]=d[f+a];return 0}function
dr(e,b,f,c,d){for(var
a=0;a<d;a++)ae(f,c+a,m(e,b+a));return 0}function
he(a,b){return 1-bw(a,b)}function
fr(a,b){return[f,a[1]^b[1],a[2]^b[2],a[3]^b[3]]}function
eh(a,b){return cy(b,a)}function
g0(e){var
a=I(e);if(a.device.exists(a.rest)){var
c=a.device.open(a.rest,{rdonly:1}),d=c.length(),b=B(d);c.read(0,b,0,d);return b}au(e)}function
gE(b,d){var
a=c[b];g.fds[a.fd].output=d;return 0}function
fU(a){return a}function
g3(a,b){bp[Q(a)]=b;return 0}function
dK(a,b){return a.nth_dim(b)}a.jsoo_runtime={caml_ephe_unset_key:eA,caml_ephe_set_key:ez,caml_ephe_check_key:ev,caml_ephe_get_key_copy:ey,caml_ephe_get_key:ex,caml_ephe_blit_key:eu,caml_ephe_create:ew,caml_weak_blit:c9,caml_weak_check:c_,caml_weak_get_copy:da,caml_weak_get:bx,caml_weak_set:by,caml_weak_create:c$,caml_ephe_key_offset:C,caml_hash_mix_bigstring:e6,bigstring_marshal_blit_stub:du,bigstring_marshal_stub:dw,bigstring_unmarshal_stub:dA,bigstring_marshal_data_size_stub:dv,bigstring_of_array_buffer:dy,bigstring_to_array_buffer:dz,bigstring_find:dt,bigstring_memcmp_stub:dx,bigstring_blit_stub:dr,caml_blit_string_to_bigstring:d$,bigstring_blit_bytes_bigstring_stub:dq,bigstring_blit_string_bigstring_stub:cr,caml_blit_bigstring_to_string:d9,bigstring_blit_bigstring_string_stub:dp,bigstring_blit_bigstring_bytes_stub:bb,bigstring_destroy_stub:ds,bigstring_alloc:cq,caml_json:f3,JSON:S,caml_gc_get:eS,caml_gc_set:eW,caml_gc_stat:eX,caml_gc_quick_stat:eV,caml_gc_counters:eQ,caml_gc_compaction:eP,caml_gc_full_major:eR,caml_gc_major:eT,caml_gc_minor:eU,caml_CamlinternalMod_update_mod:cs,caml_CamlinternalMod_init_mod:dC,caml_js_export_var:fA,caml_js_object:fN,caml_pure_js_expr:gV,caml_js_expr:fB,caml_js_eval_string:fz,caml_js_to_byte_string:fT,caml_js_equals:fx,caml_js_wrap_meth_callback_unsafe:f2,caml_js_wrap_meth_callback_strict:f1,caml_js_wrap_meth_callback_arguments:f0,caml_js_wrap_meth_callback:fZ,caml_js_wrap_callback_strict:fY,caml_js_wrap_callback_arguments:fX,caml_js_wrap_callback:cT,caml_ojs_new_arr:gQ,caml_js_new:fM,caml_js_meth_call:fL,caml_js_fun_call:fF,caml_js_call:fv,caml_js_var:fW,caml_js_to_array:fR,caml_js_from_array:M,caml_js_from_string:fE,caml_js_to_float:fU,caml_js_from_float:fD,caml_js_to_bool:fS,caml_js_from_bool:fC,js_print_stderr:aw,js_print_stdout:dh,caml_trampoline_return:hK,caml_trampoline:hJ,caml_js_get_console:fH,caml_js_html_entities:fI,caml_js_html_escape:fJ,caml_js_on_ie:fO,caml_js_typeof:fV,caml_js_instanceof:fK,caml_js_delete:fw,caml_js_get:fG,caml_js_set:fQ,caml_js_pure_expr:fP,MlNodeFile:H,MlNodeDevice:G,fs_node_supported:df,MlFakeFile:r,MlFakeDevice:u,caml_read_file_content:g0,caml_create_file:bg,caml_fs_init:cD,caml_create_file_extern:er,caml_ba_map_file_bytecode:dV,caml_ba_map_file:cw,caml_sys_rename:hF,caml_sys_is_directory:hz,caml_sys_remove:hE,caml_sys_read_directory:hD,caml_sys_file_exists:hu,caml_raise_not_a_dir:gW,caml_raise_no_such_file:au,caml_sys_chdir:hk,caml_sys_getcwd:hx,caml_unmount:hL,caml_mount_autoload:gI,resolve_fs_device:I,caml_list_mount_point:f_,jsoo_mount_point:E,caml_make_path:aM,MlFile:a$,caml_root:aa,caml_current_dir:W,caml_ml_output_int:gs,caml_ml_pos_out_64:gw,caml_ml_pos_out:gv,caml_ml_seek_out_64:gB,caml_ml_seek_out:gA,caml_output_value:gR,caml_ml_output_char:gr,caml_ml_output:aP,caml_ml_output_bytes:cX,caml_ml_flush:bm,caml_ml_input_scan_line:gn,caml_ml_pos_in_64:gu,caml_ml_pos_in:gt,caml_ml_seek_in_64:gz,caml_ml_seek_in:gy,caml_ml_input_int:gm,caml_ml_input_char:gl,caml_input_value:e$,caml_ml_input:gk,caml_ml_may_refill_input:bn,caml_ml_refill_input:aQ,caml_ml_set_channel_refill:gF,caml_ml_set_channel_output:gE,caml_ml_channel_size_64:gh,caml_ml_channel_size:gg,caml_ml_close_channel:gi,caml_ml_set_binary_mode:gC,caml_ml_open_descriptor_in:go,caml_ml_open_descriptor_out:gp,caml_ml_out_channels_list:gq,caml_ml_channels:c,caml_ml_set_channel_name:gD,caml_sys_open:hB,caml_std_output:bv,caml_sys_close:c4,caml_is_js:ft,caml_spacetime_only_works_for_native_code:g_,caml_register_channel_for_spacetime:g2,caml_spacetime_enabled:g9,caml_sys_isatty:hA,caml_runtime_parameters:g4,caml_runtime_variant:g5,caml_ml_runtime_warnings_enabled:gx,caml_ml_enable_runtime_warnings:gj,caml_runtime_warnings:bu,caml_list_of_js_array:f$,caml_int64_bswap:fg,caml_int32_bswap:fd,caml_bswap16:ea,caml_convert_raw_backtrace_slot:eo,caml_install_signal_handler:fb,caml_fresh_oo_id:eN,caml_set_oo_id:g6,caml_oo_last_id:bq,unix_inet_addr_of_string:h5,caml_sys_get_argv:hv,caml_sys_exit:ht,caml_sys_getenv:hy,caml_get_current_callstack:eY,caml_raw_backtrace_slot:gZ,caml_raw_backtrace_next_slot:gY,caml_raw_backtrace_length:gX,caml_convert_raw_backtrace:en,caml_record_backtrace:g1,caml_get_exception_raw_backtrace:e0,caml_get_exception_backtrace:eZ,caml_backtrace_status:d8,caml_final_release:eH,caml_final_register_called_without_value:eG,caml_final_register:eF,caml_get_public_method:e2,caml_array_blit:ct,caml_array_concat:dE,caml_array_append:dD,caml_array_sub:dH,caml_sys_system_command:hG,caml_sys_const_ostype_win32:hr,caml_sys_const_ostype_unix:hq,caml_sys_const_ostype_cygwin:hp,caml_sys_const_max_wosize:ho,caml_sys_const_int_size:hn,caml_sys_const_word_size:hs,caml_sys_const_big_endian:hm,caml_sys_random_seed:hC,caml_sys_const_backend_type:hl,caml_sys_get_config:hw,caml_sys_time:hH,caml_hash:e5,caml_hash_mix_string:cH,caml_hash_mix_string_arr:bh,caml_hash_mix_string_str:cI,caml_hash_mix_int64:cG,caml_hash_mix_float:cF,caml_hash_mix_final:cE,caml_hash_mix_int:D,caml_hash_univ_param:e7,caml_format_float:eL,caml_format_int:eM,caml_finish_formatting:aE,caml_parse_format:aS,caml_is_printable:fu,caml_float_of_string:eJ,caml_int_of_string:fs,caml_parse_digit:at,caml_parse_sign_and_base:br,caml_lessthan:f7,caml_lessequal:f6,caml_greaterthan:e4,caml_greaterequal:e3,caml_notequal:gK,caml_equal:eB,caml_int_compare:cS,caml_compare:em,caml_compare_val:V,caml_floatarray_create:eK,caml_make_float_vect:gc,caml_make_vect:gd,caml_check_bound:ek,caml_array_get:dF,caml_array_set:dG,caml_mod:gG,caml_div:et,caml_mul:as,caml_lazy_make_forward:f4,caml_obj_truncate:gP,caml_obj_dup:aR,caml_obj_block:gL,caml_obj_set_tag:gN,caml_obj_tag:gO,caml_obj_is_block:gM,caml_update_dummy:c6,caml_array_bound_error:L,caml_raise_not_found:cZ,caml_raise_zero_divide:av,caml_raise_end_of_file:aU,caml_invalid_argument:i,caml_js_error_of_exception:fy,caml_exn_with_js_backtrace:eC,caml_wrap_exception:hM,caml_failwith:d,caml_raise_sys_error:s,caml_raise_with_string:aV,caml_raise_with_arg:bs,caml_return_exn_constant:bt,caml_raise_constant:aT,caml_get_global_data:e1,caml_register_global:y,caml_global_data:g,caml_named_value:bo,caml_register_named_value:g3,caml_named_values:bp,caml_call_gen:A,raw_array_append_one:dk,raw_array_cons:ax,raw_array_copy:h0,raw_array_sub:ai,win_handle_fd:h9,win_cleanup:h8,win_startup:h_,unix_mktime:h6,unix_localtime:dn,unix_gmtime:h4,unix_time:h7,unix_gettimeofday:dm,caml_ba_reshape:dX,caml_ba_slice:d1,caml_ba_sub:d2,caml_ba_fill:dO,caml_ba_blit:dI,caml_ba_set_3:dZ,caml_ba_set_2:dY,caml_ba_set_1:ae,caml_ba_uint8_set64:d7,caml_ba_uint8_set32:d6,caml_ba_uint8_set16:d5,caml_ba_set_generic:d0,caml_ba_get_3:dQ,caml_ba_get_2:dP,caml_ba_get_1:m,caml_ba_uint8_get64:d4,caml_ba_uint8_get32:bc,caml_ba_uint8_get16:d3,caml_ba_get_generic:dR,caml_ba_dim_3:dN,caml_ba_dim_2:dM,caml_ba_dim_1:dL,caml_ba_dim:dK,caml_ba_num_dims:dW,caml_ba_layout:dU,caml_ba_kind:dT,caml_ba_change_layout:dJ,caml_ba_create:cu,caml_ba_create_from:T,caml_ba_views:an,caml_ba_get_size:aD,caml_ba_init_views:cv,caml_ba_init:dS,caml_set_parser_trace:g7,caml_parse_engine:gU,caml_new_lex_engine:gJ,caml_lex_engine:f8,caml_lex_array:j,caml_output_value_to_buffer:gS,caml_output_value_to_bytes:gT,caml_output_value_to_string:cY,caml_output_val:ah,caml_marshal_data_size:cV,caml_input_value_from_reader:aF,caml_input_value_from_bytes:fa,caml_input_value_from_string:cJ,caml_float_of_bytes:_,BigStringReader:a9,MlBytesReader:aC,caml_marshal_constants:ge,caml_md5_string:cW,caml_md5_chan:gf,caml_int64_to_bytes:aI,caml_int64_of_bytes:ap,caml_int64_of_string:fm,caml_int64_format:fi,caml_int64_of_float:aH,caml_int64_to_float:bk,caml_int64_to_int32:cR,caml_int64_of_int32:aq,caml_int64_mod:fl,caml_int64_div:fh,caml_int64_udivmod:ar,caml_int64_lsr1:cO,caml_int64_lsl1:bj,caml_int64_shift_right:fp,caml_int64_shift_right_unsigned:fq,caml_int64_shift_left:fo,caml_int64_xor:fr,caml_int64_or:fn,caml_int64_and:ff,caml_int64_is_minus_one:fk,caml_int64_is_min_int:fj,caml_int64_is_negative:cN,caml_int64_is_zero:aG,caml_int64_mul:cP,caml_int64_sub:cQ,caml_int64_add:cK,caml_int64_neg:P,caml_int64_compare:cL,caml_int64_ult:aK,caml_int64_ucompare:aJ,caml_int64_offset:ag,caml_tanh_float:hI,caml_sinh_float:g8,caml_cosh_float:eq,caml_log10_float:ga,caml_hypot_float:e9,caml_log1p_float:gb,caml_expm1_float:eD,caml_copysign_float:ep,caml_float_compare:eI,caml_frexp_float:eO,caml_ldexp_float:f5,caml_modf_float:gH,caml_classify_float:el,caml_int32_float_of_bits:fe,caml_int64_float_of_bits:cM,caml_hexstring_of_float:e8,caml_int32_bits_of_float:fc,caml_int64_bits_of_float:bi,jsoo_floor_log2:bA,caml_bytes_of_string:ej,caml_string_of_bytes:hf,caml_ml_bytes_length:aO,caml_ml_string_length:$,caml_blit_string:d_,caml_blit_bytes:U,caml_fill_string:eE,caml_fill_bytes:cC,caml_bytes_greaterthan:eh,caml_string_greaterthan:hd,caml_bytes_greaterequal:eg,caml_string_greaterequal:hc,caml_bytes_lessthan:cy,caml_string_lessthan:c3,caml_bytes_lessequal:cx,caml_string_lessequal:c2,caml_bytes_notequal:ei,caml_string_notequal:he,caml_bytes_equal:ec,caml_string_equal:bw,caml_bytes_compare:eb,caml_string_compare:c0,caml_string_of_array:ac,caml_new_string:h,caml_create_bytes:B,caml_create_string:es,caml_js_to_string:X,caml_jsbytes_of_string:Q,caml_array_of_string:am,caml_convert_string_to_array:ao,caml_convert_string_to_bytes:l,MlBytes:q,caml_bytes_set:be,caml_string_set64:hj,caml_bytes_set64:cB,caml_string_set32:hi,caml_bytes_set32:cA,caml_string_set16:hh,caml_bytes_set16:cz,caml_string_set:hg,caml_bytes_get:bd,caml_bytes_get64:ef,caml_string_get64:hb,caml_bytes_get32:ee,caml_string_get32:ha,caml_bytes_get16:ed,caml_string_get16:g$,caml_string_get:c1,caml_string_bound_error:v,caml_string_unsafe_set:R,caml_bytes_unsafe_set:bf,caml_bytes_unsafe_get:af,caml_string_unsafe_get:k,caml_to_js_string:c5,caml_is_ascii:bl,caml_utf16_of_utf8:c7,caml_utf8_of_utf16:c8,caml_subarray_to_string:aW,caml_str_repeat:ab,lxor_digit_nat:hX,lor_digit_nat:hW,land_digit_nat:hU,compare_nat:db,compare_digits_nat:hN,shift_right_nat:bE,div_nat:hP,div_digit_nat:de,div_helper:bz,shift_left_nat:bD,square_nat:h3,mult_nat:di,mult_digit_nat:bB,sub_nat:bF,decr_nat:dd,complement_nat:hO,add_nat:ba,incr_nat:dg,is_digit_odd:hS,is_digit_zero:hT,is_digit_int:hR,num_leading_zero_bits_in_digit:dj,num_digits_nat:bC,nth_digit_nat_native:hZ,set_digit_nat_native:h2,nth_digit_nat:hY,set_digit_nat:h1,blit_nat:dB,set_to_zero_nat:dl,create_nat:dc,initialize_nat:hQ};cD();y(0,[w,h(cc),0],cc);y(1,[w,h(bV),-1],bV);y(2,[w,h(bZ),-2],bZ);y(3,[w,h(co),-3],co);y(4,[w,h(b0),-4],b0);y(5,[w,h(bW),-5],bW);y(6,[w,h(bL),-6],bL);y(7,[w,h(b8),-7],b8);y(8,[w,h(bM),-8],bM);y(9,[w,h(ci),-9],ci);y(10,[w,h(b4),-10],b4);y(11,[w,h(bH),-11],bH);return}(function(){return this}()));

//# 1 "../.js/stdlib/stdlib.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_array_concat=runtime.caml_array_concat,
     caml_array_sub=runtime.caml_array_sub,
     caml_blit_string=runtime.caml_blit_string,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_convert_raw_backtrace_slot=runtime.caml_convert_raw_backtrace_slot,
     caml_create_string=runtime.caml_create_string,
     caml_equal=runtime.caml_equal,
     caml_fill_string=runtime.caml_fill_string,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_format_float=runtime.caml_format_float,
     caml_format_int=runtime.caml_format_int,
     caml_get_exception_raw_backtrace=runtime.caml_get_exception_raw_backtrace,
     caml_get_public_method=runtime.caml_get_public_method,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_hash=runtime.caml_hash,
     caml_input_value=runtime.caml_input_value,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_float_of_bits=runtime.caml_int64_float_of_bits,
     caml_int64_format=runtime.caml_int64_format,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int_compare=runtime.caml_int_compare,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_is_printable=runtime.caml_is_printable,
     caml_lessequal=runtime.caml_lessequal,
     caml_make_vect=runtime.caml_make_vect,
     caml_marshal_data_size=runtime.caml_marshal_data_size,
     caml_md5_string=runtime.caml_md5_string,
     caml_ml_channel_size=runtime.caml_ml_channel_size,
     caml_ml_channel_size_64=runtime.caml_ml_channel_size_64,
     caml_ml_close_channel=runtime.caml_ml_close_channel,
     caml_ml_flush=runtime.caml_ml_flush,
     caml_ml_input=runtime.caml_ml_input,
     caml_ml_input_char=runtime.caml_ml_input_char,
     caml_ml_open_descriptor_in=runtime.caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out=runtime.caml_ml_open_descriptor_out,
     caml_ml_output=runtime.caml_ml_output,
     caml_ml_output_char=runtime.caml_ml_output_char,
     caml_ml_set_binary_mode=runtime.caml_ml_set_binary_mode,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_new_string=runtime.caml_new_string,
     caml_notequal=runtime.caml_notequal,
     caml_obj_block=runtime.caml_obj_block,
     caml_obj_is_block=runtime.caml_obj_is_block,
     caml_obj_set_tag=runtime.caml_obj_set_tag,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_obj_truncate=runtime.caml_obj_truncate,
     caml_output_value=runtime.caml_output_value,
     caml_register_global=runtime.caml_register_global,
     caml_register_named_value=runtime.caml_register_named_value,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_set=runtime.caml_string_set,
     caml_sys_getenv=runtime.caml_sys_getenv,
     caml_sys_open=runtime.caml_sys_open,
     caml_sys_random_seed=runtime.caml_sys_random_seed,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_weak_blit=runtime.caml_weak_blit,
     caml_weak_check=runtime.caml_weak_check,
     caml_weak_create=runtime.caml_weak_create,
     caml_weak_get=runtime.caml_weak_get,
     caml_weak_get_copy=runtime.caml_weak_get_copy,
     caml_weak_set=runtime.caml_weak_set,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_new_string("%,"),
     cst_really_input=caml_new_string("really_input"),
     cst_input=caml_new_string("input"),
     cst_output_substring=caml_new_string("output_substring"),
     cst_output=caml_new_string("output"),
     cst_12g=caml_new_string("%.12g"),
     cst=caml_new_string("."),
     cst_false$0=caml_new_string("false"),
     cst_true$0=caml_new_string("true"),
     cst_bool_of_string=caml_new_string("bool_of_string"),
     cst_true=caml_new_string("true"),
     cst_false=caml_new_string("false"),
     cst_char_of_int=caml_new_string("char_of_int"),
     cst_Pervasives_Exit=caml_new_string("Pervasives.Exit"),
     cst_Array_blit=caml_new_string("Array.blit"),
     cst_Array_fill=caml_new_string("Array.fill"),
     cst_Array_sub=caml_new_string("Array.sub"),
     cst_Array_init=caml_new_string("Array.init"),
     cst_Array_Bottom=caml_new_string("Array.Bottom"),
     cst_List_map2=caml_new_string("List.map2"),
     cst_List_iter2=caml_new_string("List.iter2"),
     cst_List_fold_left2=caml_new_string("List.fold_left2"),
     cst_List_fold_right2=caml_new_string("List.fold_right2"),
     cst_List_for_all2=caml_new_string("List.for_all2"),
     cst_List_exists2=caml_new_string("List.exists2"),
     cst_List_combine=caml_new_string("List.combine"),
     cst_List_rev_map2=caml_new_string("List.rev_map2"),
     cst_nth=caml_new_string("nth"),
     cst_List_nth=caml_new_string("List.nth"),
     cst_tl=caml_new_string("tl"),
     cst_hd=caml_new_string("hd"),
     cst_b=caml_new_string("\\b"),
     cst_t=caml_new_string("\\t"),
     cst_n=caml_new_string("\\n"),
     cst_r=caml_new_string("\\r"),
     cst$2=caml_new_string("\\\\"),
     cst$1=caml_new_string("\\'"),
     cst_Char_chr=caml_new_string("Char.chr"),
     cst_String_rcontains_from_Bytes_rcontains_from=
      caml_new_string("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes_contains_from=
      caml_new_string("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_Bytes_rindex_from=
      caml_new_string("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_Bytes_index_from=
      caml_new_string("String.index_from / Bytes.index_from"),
     cst_String_blit_Bytes_blit_string=
      caml_new_string("String.blit / Bytes.blit_string"),
     cst_Bytes_blit=caml_new_string("Bytes.blit"),
     cst_String_fill_Bytes_fill=caml_new_string("String.fill / Bytes.fill"),
     cst_String_sub_Bytes_sub=caml_new_string("String.sub / Bytes.sub"),
     cst$4=caml_new_string(""),
     cst$3=caml_new_string(""),
     cst_Sys_Break=caml_new_string("Sys.Break"),
     cst_4_02_3=caml_new_string("4.02.3"),
     cst_Sort_array=caml_new_string("Sort.array"),
     cst_Marshal_from_bytes=caml_new_string("Marshal.from_bytes"),
     cst_Marshal_from_bytes$0=caml_new_string("Marshal.from_bytes"),
     cst_Marshal_data_size=caml_new_string("Marshal.data_size"),
     cst_Marshal_to_buffer_substring_out_of_bounds=
      caml_new_string("Marshal.to_buffer: substring out of bounds"),
     cst_Obj_extension_slot=caml_new_string("Obj.extension_slot"),
     cst_Obj_extension_id=caml_new_string("Obj.extension_id"),
     cst_Obj_extension_name=caml_new_string("Obj.extension_name"),
     cst_d=caml_new_string("%d"),
     cst_d$0=caml_new_string("%d"),
     _cT_=[255,16777215,16777215,32767],
     cst_d$1=caml_new_string("%d"),
     cst_Lexing_lex_refill_cannot_grow_buffer=
      caml_new_string("Lexing.lex_refill: cannot grow buffer"),
     _c5_=[0,caml_new_string(""),0,0,-1],
     _c8_=[0,caml_new_string(""),1,0,0],
     cst_syntax_error=caml_new_string("syntax error"),
     cst_Parsing_YYexit=caml_new_string("Parsing.YYexit"),
     cst_Parsing_Parse_error=caml_new_string("Parsing.Parse_error"),
     cst_Set_remove_min_elt=caml_new_string("Set.remove_min_elt"),
     cst_Set_bal=caml_new_string("Set.bal"),
     cst_Set_bal$0=caml_new_string("Set.bal"),
     cst_Set_bal$1=caml_new_string("Set.bal"),
     cst_Set_bal$2=caml_new_string("Set.bal"),
     cst_Map_remove_min_elt=caml_new_string("Map.remove_min_elt"),
     cst_Map_bal=caml_new_string("Map.bal"),
     cst_Map_bal$0=caml_new_string("Map.bal"),
     cst_Map_bal$1=caml_new_string("Map.bal"),
     cst_Map_bal$2=caml_new_string("Map.bal"),
     cst_Stack_Empty=caml_new_string("Stack.Empty"),
     cst_Queue_Empty=caml_new_string("Queue.Empty"),
     cst_CamlinternalLazy_Undefined=
      caml_new_string("CamlinternalLazy.Undefined"),
     cst_count=caml_new_string("{count = "),
     cst_data=caml_new_string("; data = "),
     cst$5=caml_new_string("}"),
     cst_Sempty=caml_new_string("Sempty"),
     cst_Scons=caml_new_string("Scons ("),
     cst$6=caml_new_string(", "),
     cst$7=caml_new_string(")"),
     cst_Sapp=caml_new_string("Sapp ("),
     cst$8=caml_new_string(", "),
     cst$9=caml_new_string(")"),
     cst_Slazy=caml_new_string("Slazy"),
     cst_Sgen=caml_new_string("Sgen"),
     cst_Sbuffio=caml_new_string("Sbuffio"),
     cst_Stream_Failure=caml_new_string("Stream.Failure"),
     cst_Stream_Error=caml_new_string("Stream.Error"),
     cst_Buffer_add_channel=caml_new_string("Buffer.add_channel"),
     cst_Buffer_add_substring_add_subbytes=
      caml_new_string("Buffer.add_substring/add_subbytes"),
     cst_Buffer_add_cannot_grow_buffer=
      caml_new_string("Buffer.add: cannot grow buffer"),
     cst_Buffer_nth=caml_new_string("Buffer.nth"),
     cst_Buffer_blit=caml_new_string("Buffer.blit"),
     cst_Buffer_sub=caml_new_string("Buffer.sub"),
     cst_c=caml_new_string("%c"),
     cst_s=caml_new_string("%s"),
     cst_i=caml_new_string("%i"),
     cst_li=caml_new_string("%li"),
     cst_ni=caml_new_string("%ni"),
     cst_Li=caml_new_string("%Li"),
     cst_f=caml_new_string("%f"),
     cst_B=caml_new_string("%B"),
     cst$20=caml_new_string("%{"),
     cst$21=caml_new_string("%}"),
     cst$22=caml_new_string("%("),
     cst$23=caml_new_string("%)"),
     cst_a=caml_new_string("%a"),
     cst_t$0=caml_new_string("%t"),
     cst$24=caml_new_string("%?"),
     cst_r$0=caml_new_string("%r"),
     cst_r$1=caml_new_string("%_r"),
     cst_u$0=caml_new_string("%u"),
     cst_Printf_bad_conversion=caml_new_string("Printf: bad conversion %["),
     cst_Printf_bad_conversion$0=caml_new_string("Printf: bad conversion %_"),
     cst$28=caml_new_string("@{"),
     cst$29=caml_new_string("@["),
     cst$30=caml_new_string("@{"),
     cst$31=caml_new_string("@["),
     cst$32=caml_new_string("@{"),
     cst$33=caml_new_string("@["),
     cst_0=caml_new_string("0"),
     cst_padding=caml_new_string("padding"),
     cst_precision=caml_new_string("precision"),
     cst$38=caml_new_string("'*'"),
     cst$36=caml_new_string("'-'"),
     cst_0$2=caml_new_string("'0'"),
     cst$37=caml_new_string("'*'"),
     cst_0$0=caml_new_string("0"),
     cst_0$1=caml_new_string("0"),
     cst_precision$1=caml_new_string("precision"),
     cst_precision$2=caml_new_string("precision"),
     cst$39=caml_new_string("'+'"),
     cst$40=caml_new_string("'#'"),
     cst$41=caml_new_string("' '"),
     cst_padding$0=caml_new_string("`padding'"),
     cst_precision$0=caml_new_string("`precision'"),
     cst$42=caml_new_string("'+'"),
     cst$43=caml_new_string("'_'"),
     sub_format=[0,0,caml_new_string("")],
     cst_digit=caml_new_string("digit"),
     cst_character=caml_new_string("character ')'"),
     cst_character$0=caml_new_string("character '}'"),
     cst$47=caml_new_string("'#'"),
     cst$46=caml_new_string("'+'"),
     cst$45=caml_new_string("'+'"),
     cst$44=caml_new_string("' '"),
     cst$50=caml_new_string("'+'"),
     cst$49=caml_new_string("'+'"),
     cst$48=caml_new_string("' '"),
     cst_non_zero_widths_are_unsupported_for_c_conversions=
      caml_new_string("non-zero widths are unsupported for %c conversions"),
     cst_unexpected_end_of_format=caml_new_string("unexpected end of format"),
     cst$34=caml_new_string(""),
     cst$35=caml_new_string(""),
     cst_b$0=caml_new_string("b"),
     cst_h=caml_new_string("h"),
     cst_hov=caml_new_string("hov"),
     cst_hv=caml_new_string("hv"),
     cst_v=caml_new_string("v"),
     cst_nan=caml_new_string("nan"),
     cst$27=caml_new_string("."),
     cst_neg_infinity=caml_new_string("neg_infinity"),
     cst_infinity=caml_new_string("infinity"),
     cst_12g$0=caml_new_string("%.12g"),
     cst_d$2=caml_new_string("%d"),
     cst_d$3=caml_new_string("%+d"),
     cst_d$4=caml_new_string("% d"),
     cst_i$0=caml_new_string("%i"),
     cst_i$1=caml_new_string("%+i"),
     cst_i$2=caml_new_string("% i"),
     cst_x=caml_new_string("%x"),
     cst_x$0=caml_new_string("%#x"),
     cst_X=caml_new_string("%X"),
     cst_X$0=caml_new_string("%#X"),
     cst_o=caml_new_string("%o"),
     cst_o$0=caml_new_string("%#o"),
     cst_u=caml_new_string("%u"),
     cst$25=caml_new_string("%!"),
     cst$26=caml_new_string("@{"),
     cst_0c=caml_new_string("0c"),
     cst$19=caml_new_string("%%"),
     cst$11=caml_new_string("@]"),
     cst$12=caml_new_string("@}"),
     cst$13=caml_new_string("@?"),
     cst$14=caml_new_string("@\n"),
     cst$15=caml_new_string("@."),
     cst$16=caml_new_string("@@"),
     cst$17=caml_new_string("@%"),
     cst$18=caml_new_string("@"),
     cst$10=caml_new_string(".*"),
     cst_CamlinternalFormat_Type_mismatch=
      caml_new_string("CamlinternalFormat.Type_mismatch"),
     cst$58=caml_new_string(""),
     cst$59=caml_new_string("\n"),
     cst_bool_of_string$0=caml_new_string("bool_of_string"),
     cst_a_boolean=caml_new_string("a boolean"),
     cst_int_of_string=caml_new_string("int_of_string"),
     cst_an_integer=caml_new_string("an integer"),
     cst_int_of_string$0=caml_new_string("int_of_string"),
     cst_an_integer$0=caml_new_string("an integer"),
     cst_float_of_string=caml_new_string("float_of_string"),
     cst_a_float=caml_new_string("a float"),
     cst_float_of_string$0=caml_new_string("float_of_string"),
     cst_a_float$0=caml_new_string("a float"),
     cst$55=caml_new_string(""),
     cst$56=caml_new_string(" "),
     cst$57=caml_new_string(""),
     cst_one_of=caml_new_string("one of: "),
     cst$54=caml_new_string("(?)"),
     cst_help$3=caml_new_string("--help"),
     cst_help$4=caml_new_string("-help"),
     cst_help$2=caml_new_string("-help"),
     cst_Display_this_list_of_options=
      caml_new_string(" Display this list of options"),
     cst_help=caml_new_string("-help"),
     cst_help$1=caml_new_string("--help"),
     cst_Display_this_list_of_options$0=
      caml_new_string(" Display this list of options"),
     cst_help$0=caml_new_string("--help"),
     cst$51=caml_new_string("}"),
     cst$52=caml_new_string("|"),
     cst$53=caml_new_string("{"),
     cst_none=caml_new_string("<none>"),
     cst_Arg_Bad=caml_new_string("Arg.Bad"),
     cst_Arg_Help=caml_new_string("Arg.Help"),
     cst_Arg_Stop=caml_new_string("Arg.Stop"),
     cst$61=caml_new_string(""),
     cst_Program_not_linked_with_g_cannot_print_stack_backtrace=
      caml_new_string
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     cst_Raised_at=caml_new_string("Raised at"),
     cst_Re_raised_at=caml_new_string("Re-raised at"),
     cst_Raised_by_primitive_operation_at=
      caml_new_string("Raised by primitive operation at"),
     cst_Called_from=caml_new_string("Called from"),
     cst_Out_of_memory=caml_new_string("Out of memory"),
     cst_Stack_overflow=caml_new_string("Stack overflow"),
     cst_Pattern_matching_failed=caml_new_string("Pattern matching failed"),
     cst_Assertion_failed=caml_new_string("Assertion failed"),
     cst_Undefined_recursive_module=
      caml_new_string("Undefined recursive module"),
     cst$62=caml_new_string(""),
     cst$63=caml_new_string(""),
     cst$60=caml_new_string("_"),
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     cst_Digest_from_hex$0=caml_new_string("Digest.from_hex"),
     cst_Digest_from_hex=caml_new_string("Digest.from_hex"),
     cst_Digest_substring=caml_new_string("Digest.substring"),
     cst_Random_int64=caml_new_string("Random.int64"),
     cst_Random_int32=caml_new_string("Random.int32"),
     cst_Random_int=caml_new_string("Random.int"),
     cst_x$1=caml_new_string("x"),
     cst_OCAMLRUNPARAM=caml_new_string("OCAMLRUNPARAM"),
     cst_CAMLRUNPARAM=caml_new_string("CAMLRUNPARAM"),
     cst$64=caml_new_string(""),
     cst$70=caml_new_string("."),
     cst$68=caml_new_string(">"),
     cst$69=caml_new_string("</"),
     cst$66=caml_new_string(">"),
     cst$67=caml_new_string("<"),
     cst$65=caml_new_string("\n"),
     cst_Format_Empty_queue=caml_new_string("Format.Empty_queue"),
     cst_end_of_input_not_found=caml_new_string("end of input not found"),
     cst_scanf_bad_conversion_a=caml_new_string('scanf: bad conversion "%a"'),
     cst_scanf_bad_conversion_t=caml_new_string('scanf: bad conversion "%t"'),
     cst_scanf_bad_conversion_custom_converter=
      caml_new_string('scanf: bad conversion "%?" (custom converter)'),
     cst_scanf_bad_conversion=caml_new_string('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$1=caml_new_string('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$0=caml_new_string('scanf: bad conversion "%-"'),
     cst_scanf_bad_conversion$2=caml_new_string('scanf: bad conversion "%*"'),
     cst$75=caml_new_string('"'),
     cst$76=caml_new_string('"'),
     cst$74=caml_new_string('"'),
     cst_in_format=caml_new_string(' in format "'),
     cst_digits=caml_new_string("digits"),
     cst_decimal_digits=caml_new_string("decimal digits"),
     cst_0b=caml_new_string("0b"),
     cst_0o=caml_new_string("0o"),
     cst_0x=caml_new_string("0x"),
     cst_false$1=caml_new_string("false"),
     cst_true$1=caml_new_string("true"),
     cst_no_dot_or_exponent_part_found_in_float_token=
      caml_new_string("no dot or exponent part found in float token"),
     cst$73=caml_new_string("-"),
     cst$72=caml_new_string("-"),
     cst_unnamed_character_string=caml_new_string("unnamed character string"),
     cst_unnamed_function=caml_new_string("unnamed function"),
     cst_unnamed_pervasives_input_channel=
      caml_new_string("unnamed pervasives input channel"),
     cst$71=caml_new_string("-"),
     cst_Scanf_Scan_failure=caml_new_string("Scanf.Scan_failure"),
     cst_binary=caml_new_string("binary"),
     cst_octal=caml_new_string("octal"),
     cst_hexadecimal=caml_new_string("hexadecimal"),
     cst_a_Char=caml_new_string("a Char"),
     cst_a_String=caml_new_string("a String"),
     cst$77=caml_new_string(""),
     cst$78=caml_new_string(""),
     cst$79=caml_new_string(""),
     cst$80=caml_new_string(""),
     cst$81=caml_new_string(""),
     cst$83=caml_new_string(""),
     cst$82=caml_new_string(""),
     cst_Illegal_character=caml_new_string("Illegal character "),
     cst_Weak_Make_hash_bucket_cannot_grow_more=
      caml_new_string("Weak.Make: hash bucket cannot grow more"),
     cst_Weak_fill=caml_new_string("Weak.fill"),
     cst_Filename_chop_extension=caml_new_string("Filename.chop_extension"),
     cst_Filename_chop_suffix=caml_new_string("Filename.chop_suffix"),
     cst$93=caml_new_string(""),
     cst$91=caml_new_string("./"),
     cst$90=caml_new_string(".\\"),
     cst$89=caml_new_string("../"),
     cst$88=caml_new_string("..\\"),
     cst$87=caml_new_string("./"),
     cst$86=caml_new_string("../"),
     cst$85=caml_new_string(""),
     cst$84=caml_new_string(""),
     current_dir_name=caml_new_string("."),
     parent_dir_name=caml_new_string(".."),
     dir_sep=caml_new_string("/"),
     cst_TMPDIR=caml_new_string("TMPDIR"),
     cst_tmp=caml_new_string("/tmp"),
     quotequote=caml_new_string("'\\''"),
     current_dir_name$0=caml_new_string("."),
     parent_dir_name$0=caml_new_string(".."),
     dir_sep$0=caml_new_string("\\"),
     cst_TEMP=caml_new_string("TEMP"),
     cst$92=caml_new_string("."),
     current_dir_name$1=caml_new_string("."),
     parent_dir_name$1=caml_new_string(".."),
     dir_sep$1=caml_new_string("/"),
     cst_Cygwin=caml_new_string("Cygwin"),
     cst_Unix=caml_new_string("Unix"),
     cst_Win32=caml_new_string("Win32"),
     _k5_=[254,1,0],
     End_of_file=global_data.End_of_file,
     Invalid_argument=global_data.Invalid_argument,
     Failure=global_data.Failure,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     Out_of_memory=global_data.Out_of_memory,
     Stack_overflow=global_data.Stack_overflow,
     Match_failure=global_data.Match_failure,
     Undefined_recursive_module=global_data.Undefined_recursive_module,
     Sys_error=global_data.Sys_error,
     _o_=[0,0,[0,6,0]],
     _n_=[0,0,[0,7,0]],
     _m_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _l_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _d_=[255,0,0,32752],
     _e_=[255,0,0,65520],
     _f_=[255,1,0,32752],
     _g_=[255,16777215,16777215,32751],
     _h_=[255,0,0,16],
     _i_=[255,0,0,15536],
     _H_=[0,caml_new_string("array.ml"),168,4],
     _as_=[0,0,0],
     _aw_=[0,caml_new_string("list.ml"),223,11],
     _cV_=[255,16777215,16777215,65535],
     _cR_=[255,0,0,0],
     _cP_=[255,1,0,0],
     _cN_=[255,1,0,0],
     _cJ_=[255,0,0,0],
     _cK_=[255,1,0,0],
     _cL_=[255,16777215,16777215,65535],
     _cS_=[255,0,0,32768],
     _dB_=[0,0,0,0],
     _dC_=[0,0,0],
     _dD_=[0,caml_new_string("set.ml"),372,18],
     _dE_=[0,0,0,0],
     _dF_=[0,caml_new_string("map.ml"),270,10],
     _dG_=[0,0,0],
     _ed_=[0,caml_new_string("stream.ml"),53,12],
     _ee_=[0,0],
     _eg_=[0,caml_new_string("stream.ml"),82,12],
     _ey_=[0,0,0],
     _eU_=[0,caml_new_string("buffer.ml"),115,9],
     _fq_=[0,caml_new_string("camlinternalFormat.ml"),816,23],
     _fB_=[0,caml_new_string("camlinternalFormat.ml"),780,21],
     _ft_=[0,caml_new_string("camlinternalFormat.ml"),781,21],
     _fC_=[0,caml_new_string("camlinternalFormat.ml"),784,21],
     _fu_=[0,caml_new_string("camlinternalFormat.ml"),785,21],
     _fD_=[0,caml_new_string("camlinternalFormat.ml"),788,19],
     _fv_=[0,caml_new_string("camlinternalFormat.ml"),789,19],
     _fE_=[0,caml_new_string("camlinternalFormat.ml"),792,22],
     _fw_=[0,caml_new_string("camlinternalFormat.ml"),793,22],
     _fF_=[0,caml_new_string("camlinternalFormat.ml"),797,30],
     _fx_=[0,caml_new_string("camlinternalFormat.ml"),798,30],
     _fz_=[0,caml_new_string("camlinternalFormat.ml"),802,26],
     _fr_=[0,caml_new_string("camlinternalFormat.ml"),803,26],
     _fA_=[0,caml_new_string("camlinternalFormat.ml"),812,28],
     _fs_=[0,caml_new_string("camlinternalFormat.ml"),813,28],
     _fy_=[0,caml_new_string("camlinternalFormat.ml"),817,23],
     _gk_=[0,caml_new_string("camlinternalFormat.ml"),1449,4],
     _gl_=[0,caml_new_string("camlinternalFormat.ml"),1517,39],
     _gm_=[0,caml_new_string("camlinternalFormat.ml"),1540,31],
     _gn_=[0,caml_new_string("camlinternalFormat.ml"),1541,31],
     _g2_=
      [0,
       [11,
        caml_new_string("bad input: format type mismatch between "),
        [3,0,[11,caml_new_string(" and "),[3,0,0]]]],
       caml_new_string("bad input: format type mismatch between %S and %S")],
     _g0_=
      [0,
       [11,
        caml_new_string("bad input: format type mismatch between "),
        [3,0,[11,caml_new_string(" and "),[3,0,0]]]],
       caml_new_string("bad input: format type mismatch between %S and %S")],
     _gB_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,0,0,0,[11,caml_new_string(", duplicate flag "),[1,0]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _gC_=[0,1,0],
     _gD_=[0,0],
     _gF_=[1,0],
     _gE_=[1,1],
     _gG_=[1,1],
     _gL_=[1,1],
     _gK_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", flag "),
            [1,
             [11,
              caml_new_string(" is only allowed after the '"),
              [12,
               37,
               [11,caml_new_string("', before padding and precision"),0]]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _gH_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_new_string
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _gI_=[0,0],
     _gJ_=[0,0],
     _gM_=[0,[12,64,0]],
     _gN_=[0,caml_new_string("@ "),1,0],
     _gO_=[0,caml_new_string("@,"),0,0],
     _gP_=[0,caml_new_string("@;"),1,0],
     _gQ_=[2,60],
     _gR_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": '"),
          [12,
           37,
           [11,
            caml_new_string("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_new_string(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_new_string
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _gS_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": integer "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(" is greater than the limit "),[4,0,0,0,0]]]]]],
       caml_new_string
        ("invalid format %S: integer %d is greater than the limit %d")],
     _gT_=[0,caml_new_string("camlinternalFormat.ml"),2621,11],
     _gU_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,[11,caml_new_string('" at character number '),[4,0,0,0,0]]]]]]],
       caml_new_string
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _gV_=[0,caml_new_string("camlinternalFormat.ml"),2683,34],
     _gW_=[0,caml_new_string("camlinternalFormat.ml"),2716,28],
     _gX_=[0,caml_new_string("camlinternalFormat.ml"),2744,25],
     _gY_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [2,
             0,
             [11,
              caml_new_string(" is incompatible with '"),
              [0,[11,caml_new_string("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _gA_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [2,0,[11,caml_new_string(" expected, read "),[1,0]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _gz_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", '"),
            [0,[11,caml_new_string("' without "),[2,0,0]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, '%c' without %s")],
     _gy_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,0,0,0,[11,caml_new_string(", "),[2,0,0]]]]]],
       caml_new_string("invalid format %S: at character number %d, %s")],
     _gu_=
      [0,
       [11,caml_new_string("invalid box description "),[3,0,0]],
       caml_new_string("invalid box description %S")],
     _gt_=[0,0,4],
     _gd_=[0,caml_new_string("'"),[0,caml_new_string("'"),0]],
     _fX_=[0,caml_new_string("%"),[0,caml_new_string("d"),0]],
     _fY_=[0,caml_new_string("%+"),[0,caml_new_string("d"),0]],
     _fZ_=[0,caml_new_string("% "),[0,caml_new_string("d"),0]],
     _f0_=[0,caml_new_string("%"),[0,caml_new_string("i"),0]],
     _f1_=[0,caml_new_string("%+"),[0,caml_new_string("i"),0]],
     _f2_=[0,caml_new_string("% "),[0,caml_new_string("i"),0]],
     _f3_=[0,caml_new_string("%"),[0,caml_new_string("x"),0]],
     _f4_=[0,caml_new_string("%#"),[0,caml_new_string("x"),0]],
     _f5_=[0,caml_new_string("%"),[0,caml_new_string("X"),0]],
     _f6_=[0,caml_new_string("%#"),[0,caml_new_string("X"),0]],
     _f7_=[0,caml_new_string("%"),[0,caml_new_string("o"),0]],
     _f8_=[0,caml_new_string("%#"),[0,caml_new_string("o"),0]],
     _f9_=[0,caml_new_string("%"),[0,caml_new_string("u"),0]],
     _fV_=[0,caml_new_string('"'),[0,caml_new_string('"'),0]],
     _hD_=[0,[2,0,0],caml_new_string("%s")],
     _hE_=[0,[2,0,0],caml_new_string("%s")],
     _hA_=[0,[2,0,0],caml_new_string("%s")],
     _hB_=[0,[2,0,0],caml_new_string("%s")],
     _hs_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(": unknown option '"),
         [2,0,[11,caml_new_string("'.\n"),0]]]],
       caml_new_string("%s: unknown option '%s'.\n")],
     _hv_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(": wrong argument '"),
         [2,
          0,
          [11,
           caml_new_string("'; option '"),
           [2,
            0,
            [11,
             caml_new_string("' expects "),
             [2,0,[11,caml_new_string(".\n"),0]]]]]]]],
       caml_new_string("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _hw_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(": option '"),
         [2,0,[11,caml_new_string("' needs an argument.\n"),0]]]],
       caml_new_string("%s: option '%s' needs an argument.\n")],
     _hx_=
      [0,
       [2,0,[11,caml_new_string(": "),[2,0,[11,caml_new_string(".\n"),0]]]],
       caml_new_string("%s: %s.\n")],
     _ht_=[0,caml_new_string("-help")],
     _hu_=[0,caml_new_string("--help")],
     _hp_=[0,[2,0,0],caml_new_string("%s")],
     _hm_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _hj_=[0,caml_new_string("-help")],
     _hg_=
      [0,
       [11,caml_new_string("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_new_string("  %s %s\n")],
     _hh_=
      [0,
       [11,caml_new_string("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_new_string("  %s %s%s\n")],
     _hJ_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _hS_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _hQ_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _hR_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _hO_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [11,
           caml_new_string('", line '),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(", characters "),
             [4,0,0,0,[12,45,[4,0,0,0,0]]]]]]]]],
       caml_new_string('%s file "%s", line %d, characters %d-%d')],
     _hP_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _hN_=
      [0,
       [11,caml_new_string("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_new_string("Uncaught exception: %s\n")],
     _hM_=
      [0,
       [11,caml_new_string("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_new_string("Uncaught exception: %s\n")],
     _hK_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _hL_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _hI_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _hH_=[0,[3,0,0],caml_new_string("%S")],
     _hZ_=
      [0,
       [11,caml_new_string("minor_words: "),[8,0,0,[0,0],[12,10,0]]],
       caml_new_string("minor_words: %.0f\n")],
     _h0_=
      [0,
       [11,caml_new_string("promoted_words: "),[8,0,0,[0,0],[12,10,0]]],
       caml_new_string("promoted_words: %.0f\n")],
     _h1_=
      [0,
       [11,caml_new_string("major_words: "),[8,0,0,[0,0],[12,10,0]]],
       caml_new_string("major_words: %.0f\n")],
     _h2_=
      [0,
       [11,caml_new_string("minor_collections: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("minor_collections: %d\n")],
     _h3_=
      [0,
       [11,caml_new_string("major_collections: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("major_collections: %d\n")],
     _h4_=
      [0,
       [11,caml_new_string("heap_words: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("heap_words: %d\n")],
     _h5_=
      [0,
       [11,caml_new_string("heap_chunks: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("heap_chunks: %d\n")],
     _h6_=
      [0,
       [11,caml_new_string("top_heap_words: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("top_heap_words: %d\n")],
     _h7_=
      [0,
       [11,caml_new_string("live_words: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("live_words: %d\n")],
     _h8_=
      [0,
       [11,caml_new_string("live_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("live_blocks: %d\n")],
     _h9_=
      [0,
       [11,caml_new_string("free_words: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("free_words: %d\n")],
     _h__=
      [0,
       [11,caml_new_string("free_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("free_blocks: %d\n")],
     _h$_=
      [0,
       [11,caml_new_string("largest_free: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("largest_free: %d\n")],
     _ia_=
      [0,
       [11,caml_new_string("fragments: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("fragments: %d\n")],
     _ib_=
      [0,
       [11,caml_new_string("compactions: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("compactions: %d\n")],
     _ip_=[255,1,0,0],
     _iq_=[255,0,0,0],
     _iu_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _i4_=[0,0],
     _i6_=[3,0,3],
     _i5_=[0,caml_new_string("")],
     _jB_=[0,91],
     _jA_=[0,123],
     _jC_=[0,caml_new_string("scanf.ml"),1258,13],
     _jN_=[0,[3,0,[10,0]],caml_new_string("%S%!")],
     _jv_=[0,37,caml_new_string("")],
     _jr_=
      [0,
       [11,
        caml_new_string("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_new_string(": "),[3,0,0]]]],
       caml_new_string("scanf: bad input at char number %i: %S")],
     _jo_=
      [0,
       [11,
        caml_new_string("the character "),
        [1,[11,caml_new_string(" cannot start a boolean"),0]]],
       caml_new_string("the character %C cannot start a boolean")],
     _ji_=
      [0,
       [11,caml_new_string("bad character hexadecimal encoding \\"),[0,[0,0]]],
       caml_new_string("bad character hexadecimal encoding \\%c%c")],
     _jh_=
      [0,
       [11,caml_new_string("bad character decimal encoding \\"),[0,[0,[0,0]]]],
       caml_new_string("bad character decimal encoding \\%c%c%c")],
     _jg_=[0,caml_new_string("scanf.ml"),674,9],
     _jf_=
      [0,
       [11,
        caml_new_string("character "),
        [1,
         [11,
          caml_new_string(" is not a valid "),
          [2,0,[11,caml_new_string(" digit"),0]]]]],
       caml_new_string("character %C is not a valid %s digit")],
     _je_=
      [0,
       [11,
        caml_new_string("character "),
        [1,[11,caml_new_string(" is not a decimal digit"),0]]],
       caml_new_string("character %C is not a decimal digit")],
     _jd_=[0,caml_new_string("scanf.ml"),507,11],
     _jc_=
      [0,
       [11,caml_new_string("invalid boolean "),[3,0,0]],
       caml_new_string("invalid boolean %S")],
     _jb_=
      [0,
       [11,
        caml_new_string("looking for "),
        [1,[11,caml_new_string(", found "),[1,0]]]],
       caml_new_string("looking for %C, found %C")],
     _ja_=
      [0,
       [11,
        caml_new_string("scanning of "),
        [2,
         0,
         [11,
          caml_new_string
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_new_string
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _i$_=
      [0,
       [11,
        caml_new_string("scanning of "),
        [2,
         0,
         [11,
          caml_new_string
           (" failed: the specified length was too short for token"),
          0]]],
       caml_new_string
        ("scanning of %s failed: the specified length was too short for token")],
     _i__=
      [0,
       [11,caml_new_string("illegal escape character "),[1,0]],
       caml_new_string("illegal escape character %C")],
     _j8_=[0,caml_new_string("camlinternalOO.ml"),280,50],
     _k3_=[0,7,0],
     _k2_=[0,1,[0,3,[0,5,0]]],
     _kX_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_new_string("%s%06x%s")],
     _kF_=[0,caml_new_string("filename.ml"),189,9],
     _lh_=[254,0,0],
     _k4_=[254,0,0],
     _k6_=[254,0,1];
    function _a_(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,_a_(rest)];
         case 1:var rest$0=param[1];return [1,_a_(rest$0)];
         case 2:var rest$1=param[1];return [2,_a_(rest$1)];
         case 3:var rest$2=param[1];return [3,_a_(rest$2)];
         case 4:var rest$3=param[1];return [4,_a_(rest$3)];
         case 5:var rest$4=param[1];return [5,_a_(rest$4)];
         case 6:var rest$5=param[1];return [6,_a_(rest$5)];
         case 7:var rest$6=param[1];return [7,_a_(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,_a_(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];return [9,ty1,ty1,_a_(rest$8)];
         case 10:var rest$9=param[1];return [10,_a_(rest$9)];
         case 11:var rest$10=param[1];return [11,_a_(rest$10)];
         case 12:var rest$11=param[1];return [12,_a_(rest$11)];
         case 13:var rest$12=param[1];return [13,_a_(rest$12)];
         default:var rest$13=param[1];return [14,_a_(rest$13)]}}
    function _b_(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,_b_(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,_b_(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,_b_(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,_b_(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,_b_(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,_b_(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,_b_(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,_b_(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];return [8,ty,_b_(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,_b_(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,_b_(rest$9,fmtty2)];
         case 11:var rest$10=fmtty1[1];return [11,_b_(rest$10,fmtty2)];
         case 12:var rest$11=fmtty1[1];return [12,_b_(rest$11,fmtty2)];
         case 13:var rest$12=fmtty1[1];return [13,_b_(rest$12,fmtty2)];
         default:var rest$13=fmtty1[1];return [14,_b_(rest$13,fmtty2)]}}
    function _c_(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,_c_(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,_c_(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];return [2,pad,_c_(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];return [3,pad$0,_c_(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,_c_(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,_c_(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,_c_(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,_c_(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,_c_(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,_c_(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,_c_(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];return [11,str,_c_(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];return [12,chr,_c_(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,_c_(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,_c_(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,_c_(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,_c_(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,_c_(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,_c_(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,_c_(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,_c_(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,_c_(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,_c_(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];return [23,ign,_c_(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,_c_(rest$23,fmt2)]}}
    var CamlinternalFormatBasics=[0,_b_,_a_,_c_];
    caml_register_global
     (558,CamlinternalFormatBasics,"CamlinternalFormatBasics");
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=caml_set_oo_id([248,cst_Pervasives_Exit,0]);
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     infinity=caml_int64_float_of_bits(_d_),
     neg_infinity=caml_int64_float_of_bits(_e_),
     nan=caml_int64_float_of_bits(_f_),
     max_float=caml_int64_float_of_bits(_g_),
     min_float=caml_int64_float_of_bits(_h_),
     epsilon_float=caml_int64_float_of_bits(_i_),
     max_int=2147483647,
     min_int=-2147483648;
    function _j_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_string(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function char_of_int(n)
     {if(0 <= n)if(! (255 < n))return n;return invalid_arg(cst_char_of_int)}
    function string_of_bool(b){return b?cst_true:cst_false}
    function bool_of_string(param)
     {return caml_string_notequal(param,cst_false$0)
              ?caml_string_notequal(param,cst_true$0)
                ?invalid_arg(cst_bool_of_string)
                :1
              :0}
    function string_of_int(n){return caml_new_string("" + n)}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return _j_(s,cst);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function string_of_float(f)
     {return valid_float_lexem(caml_format_float(cst_12g,f))}
    function _k_(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,_k_(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_out_gen(mode,perm,name)
     {return caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm))}
    function open_out(name){return open_out_gen(_l_,438,name)}
    function open_out_bin(name){return open_out_gen(_m_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_C8_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(runtime.caml_ml_out_channels_list(0))}
    function output_bytes(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output(oc,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(s) - len | 0) < ofs))
         return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output)}
    function output_substring(oc,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(s) - len | 0) < ofs))
         return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output_substring)}
    function output_value(chan,v){return caml_output_value(chan,v,0)}
    function close_out(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function close_out_noerr(oc)
     {try {caml_ml_flush(oc)}catch(_C7_){}
      try
       {var _C5_=caml_ml_close_channel(oc);return _C5_}
      catch(_C6_){return 0}}
    function open_in_gen(mode,perm,name)
     {return caml_ml_open_descriptor_in(caml_sys_open(name,mode,perm))}
    function open_in(name){return open_in_gen(_n_,0,name)}
    function open_in_bin(name){return open_in_gen(_o_,0,name)}
    function input(ic,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(s) - len | 0) < ofs))
         return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(cst_input)}
    function unsafe_really_input(ic,s,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 < len$0)
         {var r=caml_ml_input(ic,s,ofs$0,len$0);
          if(0 === r)throw End_of_file;
          var len$1=len$0 - r | 0,ofs$1=ofs$0 + r | 0,ofs$0=ofs$1,len$0=len$1;
          continue}
        return 0}}
    function really_input(ic,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(s) - len | 0) < ofs))
         return unsafe_really_input(ic,s,ofs,len);
      return invalid_arg(cst_really_input)}
    function really_input_string(ic,len)
     {var s=caml_create_string(len);really_input(ic,s,0,len);return s}
    function input_line(chan)
     {function build_result(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1],len=caml_ml_string_length(hd);
            caml_blit_string(hd,0,buf,pos$0 - len | 0,len);
            var pos$1=pos$0 - len | 0,pos$0=pos$1,param$0=tl;
            continue}
          return buf}}
      var accu=0,len=0;
      for(;;)
       {var n=runtime.caml_ml_input_scan_line(chan);
        if(0 === n)
         {if(accu)return build_result(caml_create_string(len),len,accu);
          throw End_of_file}
        if(0 < n)
         {var res=caml_create_string(n - 1 | 0);
          caml_ml_input(chan,res,0,n - 1 | 0);
          caml_ml_input_char(chan);
          if(accu)
           {var len$0=(len + n | 0) - 1 | 0;
            return build_result(caml_create_string(len$0),len$0,[0,res,accu])}
          return res}
        var beg=caml_create_string(- n | 0);
        caml_ml_input(chan,beg,0,- n | 0);
        var len$1=len - n | 0,accu$0=[0,beg,accu],accu=accu$0,len=len$1;
        continue}}
    function close_in_noerr(ic)
     {try
       {var _C3_=caml_ml_close_channel(ic);return _C3_}
      catch(_C4_){return 0}}
    function print_char(c){return caml_ml_output_char(stdout,c)}
    function print_string(s){return output_string(stdout,s)}
    function print_bytes(s){return output_bytes(stdout,s)}
    function print_int(i)
     {return output_string(stdout,caml_new_string("" + i))}
    function print_float(f){return output_string(stdout,string_of_float(f))}
    function print_endline(s)
     {output_string(stdout,s);
      caml_ml_output_char(stdout,10);
      return caml_ml_flush(stdout)}
    function print_newline(param)
     {caml_ml_output_char(stdout,10);return caml_ml_flush(stdout)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_bytes(s){return output_bytes(stderr,s)}
    function prerr_int(i)
     {return output_string(stderr,caml_new_string("" + i))}
    function prerr_float(f){return output_string(stderr,string_of_float(f))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function prerr_newline(param)
     {caml_ml_output_char(stderr,10);return caml_ml_flush(stderr)}
    function read_line(param){caml_ml_flush(stdout);return input_line(stdin)}
    function read_int(param){return caml_int_of_string(read_line(0))}
    function read_float(param){return caml_float_of_string(read_line(0))}
    function string_of_format(param){var str=param[2];return str}
    var exit_function=[0,flush_all];
    function _p_(param,_C1_)
     {var
       str2=_C1_[2],
       fmt2=_C1_[1],
       str1=param[2],
       fmt1=param[1],
       _C2_=_j_(str1,_j_(cst$0,str2));
      return [0,_c_(fmt1,fmt2),_C2_]}
    function at_exit(f)
     {var g=exit_function[1];
      exit_function[1]
      =
      function(param){caml_call1(f,0);return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function exit(retcode)
     {do_at_exit(0);return runtime.caml_sys_exit(retcode)}
    var
     Pervasives=
      [0,
       invalid_arg,
       failwith,
       Exit,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       _j_,
       char_of_int,
       string_of_bool,
       bool_of_string,
       string_of_int,
       string_of_float,
       _k_,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       _p_,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
    caml_register_global(562,Pervasives,"Pervasives");
    function _q_(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_CZ_=l - 1 | 0,_CY_=1;
        if(! (_CZ_ < 1))
         {var i=_CY_;
          for(;;)
           {res[i + 1] = caml_call1(f,i);
            var _C0_=i + 1 | 0;
            if(_CZ_ !== i){var i=_C0_;continue}
            break}}
        return res}
      return invalid_arg(cst_Array_init)}
    function _r_(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_CW_=sx - 1 | 0,_CV_=0;
      if(! (_CW_ < 0))
       {var x=_CV_;
        for(;;)
         {res[x + 1] = caml_make_vect(sy,init);
          var _CX_=x + 1 | 0;
          if(_CW_ !== x){var x=_CX_;continue}
          break}}
      return res}
    function _s_(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function _t_(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?_s_(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :runtime.caml_array_append(a1,a2)}
    function _u_(a,ofs,len)
     {if(0 <= len)
       if(! ((a.length - 1 - len | 0) < ofs))return caml_array_sub(a,ofs,len);
      return invalid_arg(cst_Array_sub)}
    function _v_(a,ofs,len,v)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((a.length - 1 - len | 0) < ofs))
         {var _CT_=(ofs + len | 0) - 1 | 0;
          if(! (_CT_ < ofs))
           {var i=ofs;
            for(;;)
             {a[i + 1] = v;
              var _CU_=i + 1 | 0;
              if(_CT_ !== i){var i=_CU_;continue}
              break}}
          return 0}
      return invalid_arg(cst_Array_fill)}
    function _w_(a1,ofs1,a2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((a1.length - 1 - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((a2.length - 1 - len | 0) < ofs2))
           return runtime.caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(cst_Array_blit)}
    function _x_(f,a)
     {var _CR_=a.length - 1 - 1 | 0,_CQ_=0;
      if(! (_CR_ < 0))
       {var i=_CQ_;
        for(;;)
         {caml_call1(f,a[i + 1]);
          var _CS_=i + 1 | 0;
          if(_CR_ !== i){var i=_CS_;continue}
          break}}
      return 0}
    function _y_(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_CO_=l - 1 | 0,_CN_=1;
      if(! (_CO_ < 1))
       {var i=_CN_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _CP_=i + 1 | 0;
          if(_CO_ !== i){var i=_CP_;continue}
          break}}
      return r}
    function _z_(f,a)
     {var _CL_=a.length - 1 - 1 | 0,_CK_=0;
      if(! (_CL_ < 0))
       {var i=_CK_;
        for(;;)
         {caml_call2(f,i,a[i + 1]);
          var _CM_=i + 1 | 0;
          if(_CL_ !== i){var i=_CM_;continue}
          break}}
      return 0}
    function _A_(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_CI_=l - 1 | 0,_CH_=1;
      if(! (_CI_ < 1))
       {var i=_CH_;
        for(;;)
         {r[i + 1] = caml_call2(f,i,a[i + 1]);
          var _CJ_=i + 1 | 0;
          if(_CI_ !== i){var i=_CJ_;continue}
          break}}
      return r}
    function _B_(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[i + 1],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function _C_(l)
     {if(l)
       {var tl=l[2],hd=l[1],accu=0,param=l;
        for(;;)
         {if(param)
           {var
             param$0=param[2],
             accu$0=accu + 1 | 0,
             accu=accu$0,
             param=param$0;
            continue}
          var a=caml_make_vect(accu,hd),i=1,param$1=tl;
          for(;;)
           {if(param$1)
             {var tl$0=param$1[2],hd$0=param$1[1];
              a[i + 1] = hd$0;
              var i$0=i + 1 | 0,i=i$0,param$1=tl$0;
              continue}
            return a}}}
      return [0]}
    function _D_(f,x,a)
     {var r=[0,x],_CF_=a.length - 1 - 1 | 0,_CE_=0;
      if(! (_CF_ < 0))
       {var i=_CE_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[i + 1]);
          var _CG_=i + 1 | 0;
          if(_CF_ !== i){var i=_CG_;continue}
          break}}
      return r[1]}
    function _E_(f,a,x)
     {var r=[0,x],_CC_=a.length - 1 - 1 | 0;
      if(! (_CC_ < 0))
       {var i=_CC_;
        for(;;)
         {r[1] = caml_call2(f,a[i + 1],r[1]);
          var _CD_=i - 1 | 0;
          if(0 !== i){var i=_CD_;continue}
          break}}
      return r[1]}
    var _F_=caml_set_oo_id([248,cst_Array_Bottom,0]);
    function _G_(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _Cv_=i31 + 1 | 0,_Cw_=caml_check_bound(a,_Cv_)[_Cv_ + 1];
          if(caml_call2(cmp,caml_check_bound(a,i31)[i31 + 1],_Cw_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _Cx_=i31 + 2 | 0,
           _Cy_=caml_check_bound(a,_Cx_)[_Cx_ + 1],
           _Cz_=x[1];
          if(caml_call2(cmp,caml_check_bound(a,_Cz_)[_Cz_ + 1],_Cy_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _CA_=i31 + 1 | 0,_CB_=caml_check_bound(a,_CA_)[_CA_ + 1];
          if(! (0 <= caml_call2(cmp,caml_check_bound(a,i31)[i31 + 1],_CB_)))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,_F_,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_check_bound(a,j)[j + 1],e))
           {var _Cu_=caml_check_bound(a,j)[j + 1];
            caml_check_bound(a,i$0)[i$0 + 1] = _Cu_;
            var i$0=j;
            continue}
          return caml_check_bound(a,i$0)[i$0 + 1] = e}}
      function trickle(l,i,e)
       {try
         {var _Ct_=trickledown(l,i,e);return _Ct_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === _F_)
           {var i$0=exn[2];return caml_check_bound(a,i$0)[i$0 + 1] = e}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_Cs_=caml_check_bound(a,i$1)[i$1 + 1];
          caml_check_bound(a,i$0)[i$0 + 1] = _Cs_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _Cr_=bubbledown(l,i);return _Cr_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === _F_){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_Cj_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_Cj_ < 0))
       {var i$2=_Cj_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[i$2 + 1]);
          var _Cq_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_Cq_;continue}
          break}}
      var _Ck_=l - 1 | 0;
      if(! (_Ck_ < 2))
       {var i$0=_Ck_;
        a:
        for(;;)
         {var
           e$0=caml_check_bound(a,i$0)[i$0 + 1],
           _Co_=caml_check_bound(a,0)[1];
          caml_check_bound(a,i$0)[i$0 + 1] = _Co_;
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_H_];
            if
             (0 <= caml_call2(cmp,caml_check_bound(a,father)[father + 1],e$0))
             caml_check_bound(a,i)[i + 1] = e$0;
            else
             {var _Ci_=caml_check_bound(a,father)[father + 1];
              caml_check_bound(a,i)[i + 1] = _Ci_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _Cp_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_Cp_;continue a}
            break}
          break}}
      var _Cl_=1 < l?1:0;
      if(_Cl_)
       {var e=caml_check_bound(a,1)[2],_Cm_=caml_check_bound(a,0)[1];
        caml_check_bound(a,1)[2] = _Cm_;
        var _Cn_=caml_check_bound(a,0)[1] = e}
      else
       var _Cn_=_Cl_;
      return _Cn_}
    function _I_(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_check_bound(src2,src2ofs)[src2ofs + 1],
         s1$1=caml_check_bound(a,src1ofs)[src1ofs + 1],
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_check_bound(dst,d)[d + 1] = s2;
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_check_bound(src2,i2$0)[i2$0 + 1],
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return _w_(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_check_bound(dst,d)[d + 1] = s1;
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_check_bound(a,i1$0)[i1$0 + 1],
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return _w_(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _Ca_=len - 1 | 0,_B$_=0;
        if(! (_Ca_ < 0))
         {var i=_B$_;
          a:
          for(;;)
           {var
             _Cb_=srcofs + i | 0,
             e=caml_check_bound(a,_Cb_)[_Cb_ + 1],
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if(dstofs <= j[1])
               {var _Cc_=j[1];
                if(0 < caml_call2(cmp,caml_check_bound(dst,_Cc_)[_Cc_ + 1],e))
                 {var
                   _Cd_=j[1],
                   _Ce_=caml_check_bound(dst,_Cd_)[_Cd_ + 1],
                   _Cf_=j[1] + 1 | 0;
                  caml_check_bound(dst,_Cf_)[_Cf_ + 1] = _Ce_;
                  j[1] += -1;
                  continue}}
              var _Cg_=j[1] + 1 | 0;
              caml_check_bound(dst,_Cg_)[_Cg_ + 1] = e;
              var _Ch_=i + 1 | 0;
              if(_Ca_ !== i){var i=_Ch_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var
       l1=l / 2 | 0,
       l2=l - l1 | 0,
       t=caml_make_vect(l2,caml_check_bound(a,0)[1]);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    var
     _J_=caml_array_concat,
     Array=
      [0,
       _q_,
       _r_,
       _r_,
       _t_,
       _J_,
       _u_,
       _s_,
       _v_,
       _w_,
       _B_,
       _C_,
       _x_,
       _y_,
       _z_,
       _A_,
       _D_,
       _E_,
       _G_,
       _I_,
       _I_];
    caml_register_global(564,Array,"Array");
    function _K_(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function _L_(param)
     {if(param){var a=param[1];return a}return failwith(cst_hd)}
    function _M_(param)
     {if(param){var l=param[2];return l}return failwith(cst_tl)}
    function _N_(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(cst_nth)}}
      return invalid_arg(cst_List_nth)}
    function _O_(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function _P_(l){return _O_(l,0)}
    function _Q_(param)
     {if(param){var r=param[2],l=param[1];return _k_(l,_Q_(r))}return 0}
    function _R_(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,_R_(f,l)]}
      return 0}
    function _S_(i,f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call2(f,i,a);
        return [0,r,_S_(i + 1 | 0,f,l)]}
      return 0}
    function _T_(f,l){return _S_(0,f,l)}
    function _U_(f,param)
     {var accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           a=param$0[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param$0=l;
          continue}
        return accu}}
    function _V_(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function _W_(f,l$0)
     {var i=0,param=l$0;
      for(;;)
       {if(param)
         {var l=param[2],a=param[1];
          caml_call2(f,i,a);
          var i$0=i + 1 | 0,i=i$0,param=l;
          continue}
        return 0}}
    function _X_(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function _Y_(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,_Y_(f,l$0,accu))}
      return accu}
    function _Z_(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,_Z_(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_map2)}
    function ___(f,l1,l2)
     {var accu=0,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$0=[0,caml_call2(f,a1,a2),accu],
             accu=accu$0,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu;
        return invalid_arg(cst_List_rev_map2)}}
    function _$_(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_iter2)}}
    function _aa_(f,accu,l1,l2)
     {var accu$0=accu,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$1=caml_call3(f,accu$0,a1,a2),
             accu$0=accu$1,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu$0;
        return invalid_arg(cst_List_fold_left2)}}
    function _ab_(f,l1,l2,accu)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return caml_call3(f,a1,a2,_ab_(f,l1$0,l2$0,accu))}}
      else
       if(! l2)return accu;
      return invalid_arg(cst_List_fold_right2)}
    function _ac_(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_B__=caml_call1(p,a);
          if(_B__){var param$0=l;continue}
          return _B__}
        return 1}}
    function _ad_(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_B9_=caml_call1(p,a);
          if(_B9_)return _B9_;
          var param$0=l;
          continue}
        return 0}}
    function _ae_(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _B8_=caml_call2(p,a1,a2);
            if(_B8_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _B8_}}
        else
         if(! l2$0)return 1;
        return invalid_arg(cst_List_for_all2)}}
    function _af_(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _B7_=caml_call2(p,a1,a2);
            if(_B7_)return _B7_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_exists2)}}
    function _ag_(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_B6_=0 === caml_compare(a,x)?1:0;
          if(_B6_)return _B6_;
          var param$0=l;
          continue}
        return 0}}
    function _ah_(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_B5_=a === x?1:0;
          if(_B5_)return _B5_;
          var param$0=l;
          continue}
        return 0}}
    function _ai_(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function _aj_(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function _ak_(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           match=param$0[1],
           a=match[1],
           _B4_=0 === caml_compare(a,x)?1:0;
          if(_B4_)return _B4_;
          var param$0=l;
          continue}
        return 0}}
    function _al_(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],a=match[1],_B3_=a === x?1:0;
          if(_B3_)return _B3_;
          var param$0=l;
          continue}
        return 0}}
    function _am_(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return 0 === caml_compare(a,x)?l:[0,pair,_am_(x,l)]}
      return 0}
    function _an_(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return a === x?l:[0,pair,_an_(x,l)]}
      return 0}
    function _ao_(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function _ap_(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return _P_(accu$0)}}}
    function _aq_(p,param)
     {var yes=0,no=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))
           {var yes$0=[0,x,yes],yes=yes$0,param$0=l;continue}
          var no$0=[0,x,no],no=no$0,param$0=l;
          continue}
        var _B2_=_P_(no);
        return [0,_P_(yes),_B2_]}}
    function _ar_(param)
     {if(param)
       {var
         l=param[2],
         match=param[1],
         y=match[2],
         x=match[1],
         match$0=_ar_(l),
         ry=match$0[2],
         rx=match$0[1];
        return [0,[0,x,rx],[0,y,ry]]}
      return _as_}
    function _at_(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],_at_(l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_combine)}
    function _au_(cmp,l1,match)
     {if(l1)
       {if(match)
         {var t2=match[2],h2=match[1],t1=l1[2],h1=l1[1];
          return 0 < caml_call2(cmp,h1,h2)
                  ?[0,h2,_au_(cmp,l1,t2)]
                  :[0,h1,_au_(cmp,t1,match)]}
        return l1}
      return match}
    function _av_(k,l)
     {var k$0=k,l$0=l;
      for(;;)
       {if(0 === k$0)return l$0;
        if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
        throw [0,Assert_failure,_aw_]}}
    function _ax_(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _BZ_=l[2];
            if(_BZ_)
             {var x2=_BZ_[1],x1=l[1];
              return 0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _B0_=l[2];
            if(_B0_)
             {var _B1_=_B0_[2];
              if(_B1_)
               {var x3=_B1_[1],x2$0=_B0_[1],x1$0=l[1];
                return 0 < caml_call2(cmp,x1$0,x2$0)
                        ?0 < caml_call2(cmp,x1$0,x3)
                          ?0 < caml_call2(cmp,x2$0,x3)
                            ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                            :[0,x2$0,[0,x3,[0,x1$0,0]]]
                          :[0,x2$0,[0,x1$0,[0,x3,0]]]
                        :0 < caml_call2(cmp,x2$0,x3)
                          ?0 < caml_call2(cmp,x1$0,x3)
                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                            :[0,x1$0,[0,x3,[0,x2$0,0]]]
                          :[0,x1$0,[0,x2$0,[0,x3,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=_av_(n1,l),
         l1$0=rev_sort(n1,l),
         l2$1=rev_sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
              var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
              continue}
            return _O_(l1,accu)}
          return _O_(l2,accu)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _BW_=l[2];
            if(_BW_)
             {var x2=_BW_[1],x1=l[1];
              return 0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _BX_=l[2];
            if(_BX_)
             {var _BY_=_BX_[2];
              if(_BY_)
               {var x3=_BY_[1],x2$0=_BX_[1],x1$0=l[1];
                return 0 < caml_call2(cmp,x1$0,x2$0)
                        ?0 < caml_call2(cmp,x2$0,x3)
                          ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                          :0 < caml_call2(cmp,x1$0,x3)
                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                            :[0,x3,[0,x1$0,[0,x2$0,0]]]
                        :0 < caml_call2(cmp,x1$0,x3)
                          ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                          :0 < caml_call2(cmp,x2$0,x3)
                            ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                            :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=_av_(n1,l),
         l1$0=sort(n1,l),
         l2$1=sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
              var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
              continue}
            return _O_(l1,accu)}
          return _O_(l2,accu)}}
      var len=_K_(l);
      return 2 <= len?sort(len,l):l}
    function _ay_(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _BT_=l[2];
            if(_BT_)
             {var x2=_BT_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _BU_=l[2];
            if(_BU_)
             {var _BV_=_BU_[2];
              if(_BV_)
               {var
                 x3=_BV_[1],
                 x2$0=_BU_[1],
                 x1$0=l[1],
                 c$1=caml_call2(cmp,x1$0,x2$0);
                if(0 === c$1)
                 {var c$2=caml_call2(cmp,x2$0,x3);
                  return 0 === c$2
                          ?[0,x2$0,0]
                          :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
                if(0 <= c$1)
                 {var c$3=caml_call2(cmp,x1$0,x3);
                  if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                  if(0 <= c$3)
                   {var c$4=caml_call2(cmp,x2$0,x3);
                    return 0 === c$4
                            ?[0,x2$0,[0,x1$0,0]]
                            :0 <= c$4
                              ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                              :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                  return [0,x2$0,[0,x1$0,[0,x3,0]]]}
                var c$5=caml_call2(cmp,x2$0,x3);
                if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
                if(0 <= c$5)
                 {var c$6=caml_call2(cmp,x1$0,x3);
                  return 0 === c$6
                          ?[0,x1$0,[0,x2$0,0]]
                          :0 <= c$6
                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                            :[0,x1$0,[0,x3,[0,x2$0,0]]]}
                return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=_av_(n1,l),
         l1$0=rev_sort(n1,l),
         l2$1=rev_sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            return _O_(l1,accu)}
          return _O_(l2,accu)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _BQ_=l[2];
            if(_BQ_)
             {var x2=_BQ_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _BR_=l[2];
            if(_BR_)
             {var _BS_=_BR_[2];
              if(_BS_)
               {var
                 x3=_BS_[1],
                 x2$0=_BR_[1],
                 x1$0=l[1],
                 c$1=caml_call2(cmp,x1$0,x2$0);
                if(0 === c$1)
                 {var c$2=caml_call2(cmp,x2$0,x3);
                  return 0 === c$2
                          ?[0,x2$0,0]
                          :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
                if(0 < c$1)
                 {var c$3=caml_call2(cmp,x2$0,x3);
                  if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                  if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                  var c$4=caml_call2(cmp,x1$0,x3);
                  return 0 === c$4
                          ?[0,x1$0,[0,x2$0,0]]
                          :0 < c$4
                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                            :[0,x3,[0,x1$0,[0,x2$0,0]]]}
                var c$5=caml_call2(cmp,x1$0,x3);
                if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
                if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
                var c$6=caml_call2(cmp,x2$0,x3);
                return 0 === c$6
                        ?[0,x2$0,[0,x1$0,0]]
                        :0 < c$6
                          ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                          :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=_av_(n1,l),
         l1$0=sort(n1,l),
         l2$1=sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            return _O_(l1,accu)}
          return _O_(l2,accu)}}
      var len=_K_(l);
      return 2 <= len?sort(len,l):l}
    var
     List=
      [0,
       _K_,
       _L_,
       _M_,
       _N_,
       _P_,
       _k_,
       _O_,
       _Q_,
       _Q_,
       _V_,
       _W_,
       _R_,
       _T_,
       _U_,
       _X_,
       _Y_,
       _$_,
       _Z_,
       ___,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ao_,
       _ap_,
       _ap_,
       _aq_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ar_,
       _at_,
       _ax_,
       _ax_,
       _ax_,
       _ay_,
       _au_];
    caml_register_global(566,List,"List");
    function _az_(n)
     {if(0 <= n)if(! (255 < n))return n;return invalid_arg(cst_Char_chr)}
    function _aA_(c)
     {if(39 === c)return cst$1;
      if(92 === c)return cst$2;
      if(! (14 <= c))
       switch(c)
        {case 8:return cst_b;
         case 9:return cst_t;
         case 10:return cst_n;
         case 13:return cst_r
         }
      if(caml_is_printable(c))
       {var s=caml_create_string(1);caml_bytes_unsafe_set(s,0,c);return s}
      var s$0=caml_create_string(4);
      caml_bytes_unsafe_set(s$0,0,92);
      caml_bytes_unsafe_set(s$0,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s$0,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s$0,3,48 + (c % 10 | 0) | 0);
      return s$0}
    function _aB_(c)
     {var switch$0=65 <= c?90 < c?0:1:0;
      if(! switch$0)
       {var switch$1=192 <= c?214 < c?0:1:0;
        if(! switch$1)
         {var switch$2=216 <= c?222 < c?1:0:1;if(switch$2)return c}}
      return c + 32 | 0}
    function _aC_(c)
     {var switch$0=97 <= c?122 < c?0:1:0;
      if(! switch$0)
       {var switch$1=224 <= c?246 < c?0:1:0;
        if(! switch$1)
         {var switch$2=248 <= c?254 < c?1:0:1;if(switch$2)return c}}
      return c - 32 | 0}
    var Char=[0,_az_,_aA_,_aB_,_aC_,function(c1,c2){return c1 - c2 | 0}];
    caml_register_global(567,Char,"Char");
    function make(n,c)
     {var s=caml_create_string(n);caml_fill_string(s,0,n,c);return s}
    function init(n,f)
     {var s=caml_create_string(n),_BO_=n - 1 | 0,_BN_=0;
      if(! (_BO_ < 0))
       {var i=_BN_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
          var _BP_=i + 1 | 0;
          if(_BO_ !== i){var i=_BP_;continue}
          break}}
      return s}
    var _aD_=caml_create_string(0);
    function _aE_(s)
     {var len=caml_ml_string_length(s),r=caml_create_string(len);
      caml_blit_string(s,0,r,0,len);
      return r}
    function _aF_(b){return _aE_(b)}
    function _aG_(s){return _aE_(s)}
    function _aH_(s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(s) - len | 0) < ofs))
         {var r=caml_create_string(len);
          caml_blit_string(s,ofs,r,0,len);
          return r}
      return invalid_arg(cst_String_sub_Bytes_sub)}
    function _aI_(b,ofs,len){return _aH_(b,ofs,len)}
    function _aJ_(s,left,right)
     {var
       len=(caml_ml_string_length(s) + left | 0) + right | 0,
       r=caml_create_string(len),
       match=0 <= left?[0,0,left]:[0,- left | 0,0],
       dstoff=match[2],
       srcoff=match[1],
       cpylen=min(caml_ml_string_length(s) - srcoff | 0,len - dstoff | 0);
      if(0 < cpylen)caml_blit_string(s,srcoff,r,dstoff,cpylen);
      return r}
    function _aK_(s,ofs,len,c)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(s) - len | 0) < ofs))
         return caml_fill_string(s,ofs,len,c);
      return invalid_arg(cst_String_fill_Bytes_fill)}
    function _aL_(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_Bytes_blit)}
    function _aM_(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_String_blit_Bytes_blit_string)}
    function _aN_(f,a)
     {var _BL_=caml_ml_string_length(a) - 1 | 0,_BK_=0;
      if(! (_BL_ < 0))
       {var i=_BK_;
        for(;;)
         {caml_call1(f,caml_bytes_unsafe_get(a,i));
          var _BM_=i + 1 | 0;
          if(_BL_ !== i){var i=_BM_;continue}
          break}}
      return 0}
    function _aO_(f,a)
     {var _BI_=caml_ml_string_length(a) - 1 | 0,_BH_=0;
      if(! (_BI_ < 0))
       {var i=_BH_;
        for(;;)
         {caml_call2(f,i,caml_bytes_unsafe_get(a,i));
          var _BJ_=i + 1 | 0;
          if(_BI_ !== i){var i=_BJ_;continue}
          break}}
      return 0}
    function _aP_(sep,l)
     {if(l)
       {var tl=l[2],hd=l[1],num=[0,0],len=[0,0];
        _V_
         (function(s)
           {num[1]++;len[1] = len[1] + caml_ml_string_length(s) | 0;return 0},
          l);
        var
         r=
          caml_create_string
           (len[1] + caml_mul(caml_ml_string_length(sep),num[1] - 1 | 0) | 0);
        caml_blit_string(hd,0,r,0,caml_ml_string_length(hd));
        var pos=[0,caml_ml_string_length(hd)];
        _V_
         (function(s)
           {caml_blit_string(sep,0,r,pos[1],caml_ml_string_length(sep));
            pos[1] = pos[1] + caml_ml_string_length(sep) | 0;
            caml_blit_string(s,0,r,pos[1],caml_ml_string_length(s));
            pos[1] = pos[1] + caml_ml_string_length(s) | 0;
            return 0},
          tl);
        return r}
      return _aD_}
    function _aQ_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       r=caml_create_string(l1 + l2 | 0);
      caml_blit_string(s1,0,r,0,l1);
      caml_blit_string(s2,0,r,l1,l2);
      return r}
    function _aR_(param)
     {var
       _BG_=param - 9 | 0,
       switch$0=4 < _BG_ >>> 0?23 === _BG_?1:0:2 === _BG_?0:1;
      return switch$0?1:0}
    function _aS_(s)
     {var len=caml_ml_string_length(s),i=[0,0];
      for(;;)
       {if(i[1] < len)if(_aR_(caml_bytes_unsafe_get(s,i[1]))){i[1]++;continue}
        var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1])
           if(_aR_(caml_bytes_unsafe_get(s,j[1]))){j[1] += -1;continue}
          return i[1] <= j[1]?_aH_(s,i[1],(j[1] - i[1] | 0) + 1 | 0):_aD_}}}
    function _aT_(s)
     {var n=[0,0],_Bz_=caml_ml_string_length(s) - 1 | 0,_By_=0;
      if(! (_Bz_ < 0))
       {var i$0=_By_;
        for(;;)
         {var
           c$0=caml_bytes_unsafe_get(s,i$0),
           switch$0=
            14 <= c$0
             ?34 === c$0?1:92 === c$0?1:0
             :11 <= c$0?13 <= c$0?1:0:8 <= c$0?1:0,
           _BE_=switch$0?2:caml_is_printable(c$0)?1:4;
          n[1] = n[1] + _BE_ | 0;
          var _BF_=i$0 + 1 | 0;
          if(_Bz_ !== i$0){var i$0=_BF_;continue}
          break}}
      if(n[1] === caml_ml_string_length(s))return _aE_(s);
      var s$0=caml_create_string(n[1]);
      n[1] = 0;
      var _BB_=caml_ml_string_length(s) - 1 | 0,_BA_=0;
      if(! (_BB_ < 0))
       {var i=_BA_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),_BC_=c - 34 | 0;
          if(58 < _BC_ >>> 0)
           if(-20 <= _BC_)
            var switch$1=1;
           else
            {var switcher=_BC_ + 34 | 0;
             switch(switcher)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                var switch$2=1;
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                var switch$2=1;
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                var switch$2=1;
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                var switch$2=1;
                break;
               default:var switch$1=1,switch$2=0}
             if(switch$2)var switch$1=0}
          else
           var
            switcher$0=_BC_ - 1 | 0,
            switch$1=
             56 < switcher$0 >>> 0
              ?(caml_bytes_unsafe_set(s$0,n[1],92),
                n[1]++,
                caml_bytes_unsafe_set(s$0,n[1],c),
                0)
              :1;
          if(switch$1)
           if(caml_is_printable(c))
            caml_bytes_unsafe_set(s$0,n[1],c);
           else
            {caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0)}
          n[1]++;
          var _BD_=i + 1 | 0;
          if(_BB_ !== i){var i=_BD_;continue}
          break}}
      return s$0}
    function _aU_(f,s)
     {var l=caml_ml_string_length(s);
      if(0 === l)return s;
      var r=caml_create_string(l),_Bw_=l - 1 | 0,_Bv_=0;
      if(! (_Bw_ < 0))
       {var i=_Bv_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _Bx_=i + 1 | 0;
          if(_Bw_ !== i){var i=_Bx_;continue}
          break}}
      return r}
    function _aV_(f,s)
     {var l=caml_ml_string_length(s);
      if(0 === l)return s;
      var r=caml_create_string(l),_Bt_=l - 1 | 0,_Bs_=0;
      if(! (_Bt_ < 0))
       {var i=_Bs_;
        for(;;)
         {caml_bytes_unsafe_set
           (r,i,caml_call2(f,i,caml_bytes_unsafe_get(s,i)));
          var _Bu_=i + 1 | 0;
          if(_Bt_ !== i){var i=_Bu_;continue}
          break}}
      return r}
    function _aW_(s){return _aU_(_aC_,s)}
    function _aX_(s){return _aU_(_aB_,s)}
    function _aY_(f,s)
     {if(0 === caml_ml_string_length(s))return s;
      var r=_aE_(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function _aZ_(s){return _aY_(_aC_,s)}
    function _a0_(s){return _aY_(_aB_,s)}
    function _a1_(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function _a2_(s,c){return _a1_(s,caml_ml_string_length(s),0,c)}
    function _a3_(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)if(! (l < i))return _a1_(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_index_from)}
    function _a4_(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function _a5_(s,c){return _a4_(s,caml_ml_string_length(s) - 1 | 0,c)}
    function _a6_(s,i,c)
     {if(-1 <= i)if(! (caml_ml_string_length(s) <= i))return _a4_(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_rindex_from)}
    function _a7_(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(! (l < i))
        try
         {_a1_(s,l,i,c);var _Bq_=1;return _Bq_}
        catch(_Br_)
         {_Br_ = caml_wrap_exception(_Br_);
          if(_Br_ === Not_found)return 0;
          throw _Br_}
      return invalid_arg(cst_String_contains_from_Bytes_contains_from)}
    function _a8_(s,c){return _a7_(s,0,c)}
    function _a9_(s,i,c)
     {if(0 <= i)
       if(! (caml_ml_string_length(s) <= i))
        try
         {_a4_(s,i,c);var _Bo_=1;return _Bo_}
        catch(_Bp_)
         {_Bp_ = caml_wrap_exception(_Bp_);
          if(_Bp_ === Not_found)return 0;
          throw _Bp_}
      return invalid_arg(cst_String_rcontains_from_Bytes_rcontains_from)}
    var _a__=caml_compare;
    function _a$_(_Bn_){return _Bn_}
    function _ba_(_Bm_){return _Bm_}
    var
     Bytes=
      [0,
       make,
       init,
       _aD_,
       _aE_,
       _aG_,
       _aF_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aP_,
       _aQ_,
       _aN_,
       _aO_,
       _aU_,
       _aV_,
       _aS_,
       _aT_,
       _a2_,
       _a5_,
       _a3_,
       _a6_,
       _a8_,
       _a7_,
       _a9_,
       _aW_,
       _aX_,
       _aZ_,
       _a0_,
       _a__,
       _ba_,
       _a$_];
    caml_register_global(568,Bytes,"Bytes");
    function _bb_(n,c){return make(n,c)}
    function _bc_(n,f){return init(n,f)}
    function _bd_(s){return _aE_(s)}
    function _be_(s,ofs,len){return _aH_(s,ofs,len)}
    function _bf_(sep,l)
     {if(l)
       {var tl=l[2],hd=l[1],num=[0,0],len=[0,0];
        _V_
         (function(s)
           {num[1]++;len[1] = len[1] + caml_ml_string_length(s) | 0;return 0},
          l);
        var
         r=
          caml_create_string
           (len[1] + caml_mul(caml_ml_string_length(sep),num[1] - 1 | 0) | 0);
        caml_blit_string(hd,0,r,0,caml_ml_string_length(hd));
        var pos=[0,caml_ml_string_length(hd)];
        _V_
         (function(s)
           {caml_blit_string(sep,0,r,pos[1],caml_ml_string_length(sep));
            pos[1] = pos[1] + caml_ml_string_length(sep) | 0;
            caml_blit_string(s,0,r,pos[1],caml_ml_string_length(s));
            pos[1] = pos[1] + caml_ml_string_length(s) | 0;
            return 0},
          tl);
        return r}
      return cst$3}
    function _bg_(f,s){return _aN_(f,s)}
    function _bh_(f,s){return _aO_(f,s)}
    function _bi_(f,s){return _aU_(f,s)}
    function _bj_(f,s){return _aV_(f,s)}
    function _bk_(param)
     {var
       _Bl_=param - 9 | 0,
       switch$0=4 < _Bl_ >>> 0?23 === _Bl_?1:0:2 === _Bl_?0:1;
      return switch$0?1:0}
    function _bl_(s)
     {if(caml_string_equal(s,cst$4))return s;
      if(! _bk_(caml_bytes_unsafe_get(s,0)))
       if(! _bk_(caml_bytes_unsafe_get(s,caml_ml_string_length(s) - 1 | 0)))
        return s;
      return _aS_(s)}
    function _bm_(s)
     {var i=0;
      for(;;)
       {if(caml_ml_string_length(s) <= i)
         var _Bk_=0;
        else
         {var
           c=caml_bytes_unsafe_get(s,i),
           switch$0=
            14 <= c?34 === c?1:92 === c?1:0:11 <= c?13 <= c?1:0:8 <= c?1:0;
          if(switch$0)
           var _Bk_=1;
          else
           {if(caml_is_printable(c)){var i$0=i + 1 | 0,i=i$0;continue}
            var _Bk_=1}}
        return _Bk_?_aT_(s):s}}
    function _bn_(s,c){return _a2_(s,c)}
    function _bo_(s,c){return _a5_(s,c)}
    function _bp_(s,i,c){return _a3_(s,i,c)}
    function _bq_(s,i,c){return _a6_(s,i,c)}
    function _br_(s,c){return _a8_(s,c)}
    function _bs_(s,i,c){return _a7_(s,i,c)}
    function _bt_(s,i,c){return _a9_(s,i,c)}
    function _bu_(s){return _aW_(s)}
    function _bv_(s){return _aX_(s)}
    function _bw_(s){return _aZ_(s)}
    function _bx_(s){return _a0_(s)}
    var
     _by_=caml_string_compare,
     String=
      [0,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _aK_,
       _aM_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       _bw_,
       _bx_,
       _by_];
    caml_register_global(569,String,"String");
    var
     match=runtime.caml_sys_get_argv(0),
     _bz_=match[2],
     _bB_=runtime.caml_sys_get_config(0)[1],
     _bA_=match[1],
     _bC_=0,
     _bD_=32,
     _bE_=runtime.caml_sys_const_ostype_unix(0),
     _bF_=runtime.caml_sys_const_ostype_win32(0),
     _bG_=runtime.caml_sys_const_ostype_cygwin(0),
     _bH_=4194303,
     _bI_=16777211,
     _bJ_=[0,0];
    function _bK_(sig_num,sig_beh){return 0}
    var
     _bL_=-1,
     _bM_=-2,
     _bN_=-3,
     _bO_=-4,
     _bP_=-5,
     _bQ_=-6,
     _bR_=-7,
     _bS_=-8,
     _bT_=-9,
     _bU_=-10,
     _bV_=-11,
     _bW_=-12,
     _bX_=-13,
     _bY_=-14,
     _bZ_=-15,
     _b0_=-16,
     _b1_=-17,
     _b2_=-18,
     _b3_=-19,
     _b4_=-20,
     _b5_=-21,
     _b6_=caml_set_oo_id([248,cst_Sys_Break,0]),
     Sys=
      [0,
       _bz_,
       _bA_,
       _bJ_,
       _bB_,
       _bE_,
       _bF_,
       _bG_,
       _bD_,
       _bC_,
       _bI_,
       _bH_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       _bP_,
       _bQ_,
       _bR_,
       _bS_,
       _bT_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_,
       _b1_,
       _b2_,
       _b3_,
       _b4_,
       _b5_,
       _b6_,
       function(on){return on?0:0},
       cst_4_02_3];
    caml_register_global(570,Sys,"Sys");
    function _b7_(order,l1,l2)
     {if(l1)
       {var t1=l1[2],h1=l1[1];
        if(l2)
         {var t2=l2[2],h2=l2[1];
          return caml_call2(order,h1,h2)
                  ?[0,h1,_b7_(order,t1,l2)]
                  :[0,h2,_b7_(order,l1,t2)]}
        return l1}
      return l2}
    function _b8_(order,l)
     {function initlist(param)
       {if(param)
         {var _Bg_=param[2],_Bh_=param[1];
          if(_Bg_)
           {var
             rest=_Bg_[2],
             e2=_Bg_[1],
             _Bi_=initlist(rest),
             _Bj_=
              caml_call2(order,_Bh_,e2)?[0,_Bh_,[0,e2,0]]:[0,e2,[0,_Bh_,0]];
            return [0,_Bj_,_Bi_]}
          return [0,[0,_Bh_,0],0]}
        return 0}
      function merge2(x)
       {if(x)
         {var _Be_=x[2];
          if(_Be_)
           {var rest=_Be_[2],l2=_Be_[1],l1=x[1],_Bf_=merge2(rest);
            return [0,_b7_(order,l1,l2),_Bf_]}}
        return x}
      var llist$1=initlist(l),llist=llist$1;
      for(;;)
       {if(llist)
         {if(llist[2]){var llist$0=merge2(llist),llist=llist$0;continue}
          var l$0=llist[1];
          return l$0}
        return 0}}
    function _b9_(arr,i,j)
     {var tmp=arr[i + 1];arr[i + 1] = arr[j + 1];return arr[j + 1] = tmp}
    var
     Sort=
      [0,
       _b8_,
       function(cmp,arr)
        {function qsort(lo,hi)
          {var lo$0=lo,hi$0=hi;
           a:
           for(;;)
            {var _Bb_=6 <= (hi$0 - lo$0 | 0)?1:0;
             if(_Bb_)
              {var mid=(lo$0 + hi$0 | 0) >>> 1 | 0;
               if(caml_call2(cmp,arr[mid + 1],arr[lo$0 + 1]))
                _b9_(arr,mid,lo$0);
               if(caml_call2(cmp,arr[hi$0 + 1],arr[mid + 1]))
                {_b9_(arr,mid,hi$0);
                 if(caml_call2(cmp,arr[mid + 1],arr[lo$0 + 1]))
                  _b9_(arr,mid,lo$0)}
               var
                pivot=arr[mid + 1],
                i=[0,lo$0 + 1 | 0],
                j=[0,hi$0 - 1 | 0],
                _Bc_=1 - caml_call2(cmp,pivot,arr[hi$0 + 1]),
                _Bd_=_Bc_ || 1 - caml_call2(cmp,arr[lo$0 + 1],pivot);
               if(_Bd_)throw [0,Invalid_argument,cst_Sort_array];
               b:
               for(;;)
                {if(i[1] < j[1])
                  for(;;)
                   {if(caml_call2(cmp,pivot,arr[i[1] + 1]))
                     for(;;)
                      {if(caml_call2(cmp,arr[j[1] + 1],pivot))
                        {if(i[1] < j[1])_b9_(arr,i[1],j[1]);
                         i[1]++;
                         j[1] += -1;
                         continue b}
                       j[1] += -1;
                       continue}
                    i[1]++;
                    continue}
                 if((j[1] - lo$0 | 0) <= (hi$0 - i[1] | 0))
                  {qsort(lo$0,j[1]);var lo$1=i[1],lo$0=lo$1;continue a}
                 qsort(i[1],hi$0);
                 var hi$1=j[1],hi$0=hi$1;
                 continue a}}
             return _Bb_}}
         qsort(0,arr.length - 1 - 1 | 0);
         var _A$_=arr.length - 1 - 1 | 0,_A__=1;
         if(! (_A$_ < 1))
          {var i=_A__;
           for(;;)
            {var val_i=arr[i + 1];
             if(1 - caml_call2(cmp,arr[(i - 1 | 0) + 1],val_i))
              {arr[i + 1] = arr[(i - 1 | 0) + 1];
               var j=[0,i - 1 | 0];
               for(;;)
                {if(1 <= j[1])
                  if(! caml_call2(cmp,arr[(j[1] - 1 | 0) + 1],val_i))
                   {arr[j[1] + 1] = arr[(j[1] - 1 | 0) + 1];
                    j[1] += -1;
                    continue}
                 arr[j[1] + 1] = val_i;
                 break}}
             var _Ba_=i + 1 | 0;
             if(_A$_ !== i){var i=_Ba_;continue}
             break}}
         return 0},
       _b7_];
    caml_register_global(571,Sort,"Sort");
    function _b__(buff,ofs,len,v,flags)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(buff) - len | 0) < ofs))
         return runtime.caml_output_value_to_buffer(buff,ofs,len,v,flags);
      return invalid_arg(cst_Marshal_to_buffer_substring_out_of_bounds)}
    var _b$_=20;
    function _ca_(buff,ofs)
     {if(0 <= ofs)
       if(! ((caml_ml_string_length(buff) - 20 | 0) < ofs))
        return caml_marshal_data_size(buff,ofs);
      return invalid_arg(cst_Marshal_data_size)}
    function _cb_(buff,ofs){return 20 + _ca_(buff,ofs) | 0}
    function _cc_(buff,ofs)
     {if(0 <= ofs)
       if(! ((caml_ml_string_length(buff) - 20 | 0) < ofs))
        {var len=caml_marshal_data_size(buff,ofs);
         return (caml_ml_string_length(buff) - (20 + len | 0) | 0) < ofs
                 ?invalid_arg(cst_Marshal_from_bytes$0)
                 :runtime.caml_input_value_from_string(buff,ofs)}
      return invalid_arg(cst_Marshal_from_bytes)}
    var
     Marshal=
      [0,
       caml_output_value,
       _b__,
       caml_input_value,
       _cc_,
       function(buff,ofs){return _cc_(buff,ofs)},
       _b$_,
       _ca_,
       _cb_];
    caml_register_global(572,Marshal,"Marshal");
    function _cd_(x,i){return caml_check_bound(x,i)[i + 1]}
    function _ce_(x,i,v){return caml_check_bound(x,i)[i + 1] = v}
    function _cf_(obj){return runtime.caml_output_value_to_string(obj,0)}
    function _cg_(str,pos)
     {var _A9_=pos + _cb_(str,pos) | 0;return [0,_cc_(str,pos),_A9_]}
    var
     _ch_=0,
     _ci_=245,
     _cj_=246,
     _ck_=247,
     _cl_=248,
     _cm_=249,
     _cn_=250,
     _co_=251,
     _cp_=251,
     _cq_=252,
     _cr_=253,
     _cs_=254,
     _ct_=255,
     _cu_=1e3,
     _cv_=1001,
     _cw_=1002;
    function _cx_(x)
     {if(caml_obj_is_block(x))
       if(caml_obj_tag(x) !== 248)
        if(1 <= x.length - 1)var slot=x[1],switch$0=1;else var switch$0=0;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var slot=x;
      if(caml_obj_is_block(slot))
       if(caml_obj_tag(slot) === 248)
        {var name=slot[1];
         if(caml_obj_tag(name) === 252)return slot;
         throw Not_found}
      throw Not_found}
    function _cy_(x)
     {try
       {var slot=_cx_(x),_A7_=slot[1];return _A7_}
      catch(_A8_)
       {_A8_ = caml_wrap_exception(_A8_);
        if(_A8_ === Not_found)return invalid_arg(cst_Obj_extension_name);
        throw _A8_}}
    function _cz_(x)
     {try
       {var slot=_cx_(x),_A5_=slot[2];return _A5_}
      catch(_A6_)
       {_A6_ = caml_wrap_exception(_A6_);
        if(_A6_ === Not_found)return invalid_arg(cst_Obj_extension_id);
        throw _A6_}}
    var
     Obj=
      [0,
       _cd_,
       _ce_,
       _ch_,
       _ci_,
       _cj_,
       _ck_,
       _cl_,
       _cm_,
       _cn_,
       _co_,
       _cp_,
       _cq_,
       _cr_,
       _cs_,
       _ct_,
       _ct_,
       _cu_,
       _cv_,
       _cw_,
       _cy_,
       _cz_,
       function(x)
        {try
          {var _A3_=_cx_(x);return _A3_}
         catch(_A4_)
          {_A4_ = caml_wrap_exception(_A4_);
           if(_A4_ === Not_found)return invalid_arg(cst_Obj_extension_slot);
           throw _A4_}},
       _cf_,
       _cg_];
    caml_register_global(573,Obj,"Obj");
    var _cA_=0,_cB_=1,_cC_=-1;
    function _cD_(n){return n + 1 | 0}
    function _cE_(n){return n - 1 | 0}
    function _cF_(n){return caml_greaterequal(n,0)?n:- n | 0}
    var _cG_=-2147483648,_cH_=2147483647;
    function _cI_(n){return n ^ -1}
    var
     Int32=
      [0,
       _cA_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cH_,
       _cG_,
       _cI_,
       function(n){return caml_format_int(cst_d,n)},
       caml_int_compare];
    caml_register_global(574,Int32,"Int32");
    function _cM_(n){return caml_int64_add(n,_cN_)}
    function _cO_(n){return caml_int64_sub(n,_cP_)}
    function _cQ_(n)
     {return caml_greaterequal(n,_cR_)?n:runtime.caml_int64_neg(n)}
    function _cU_(n){return runtime.caml_int64_xor(n,_cV_)}
    var
     Int64=
      [0,
       _cJ_,
       _cK_,
       _cL_,
       _cM_,
       _cO_,
       _cQ_,
       _cT_,
       _cS_,
       _cU_,
       function(n){return caml_int64_format(cst_d$0,n)},
       runtime.caml_int64_compare];
    caml_register_global(575,Int64,"Int64");
    var _cW_=0,_cX_=1,_cY_=-1;
    function _cZ_(n){return n + 1 | 0}
    function _c0_(n){return n - 1 | 0}
    function _c1_(n){return caml_greaterequal(n,0)?n:- n | 0}
    var _c2_=-2147483648,_c3_=2147483647;
    function _c4_(n){return n ^ -1}
    var
     Nativeint=
      [0,
       _cW_,
       _cX_,
       _cY_,
       _cZ_,
       _c0_,
       _c1_,
       _bD_,
       _c3_,
       _c2_,
       _c4_,
       function(n){return caml_format_int(cst_d$1,n)},
       caml_int_compare];
    caml_register_global(576,Nativeint,"Nativeint");
    function _c6_(tbl,state,buf)
     {var result=runtime.caml_lex_engine(tbl,state,buf);
      if(0 <= result)
       {buf[11] = buf[12];
        var _A2_=buf[12];
        buf[12] = [0,_A2_[1],_A2_[2],_A2_[3],buf[4] + buf[6] | 0]}
      return result}
    function _c7_(tbl,state,buf)
     {var result=runtime.caml_new_lex_engine(tbl,state,buf);
      if(0 <= result)
       {buf[11] = buf[12];
        var _A1_=buf[12];
        buf[12] = [0,_A1_[1],_A1_[2],_A1_[3],buf[4] + buf[6] | 0]}
      return result}
    function _c9_(f)
     {var
       aux_buffer=caml_create_string(512),
       _AP_=[0],
       _AQ_=0,
       _AR_=0,
       _AS_=0,
       _AT_=0,
       _AU_=0,
       _AV_=0,
       _AW_=0,
       _AX_=caml_create_string(1024);
      return [0,
              function(lexbuf)
               {var
                 read=caml_call2(f,aux_buffer,512),
                 n=0 < read?read:(lexbuf[9] = 1,0);
                if(caml_ml_string_length(lexbuf[2]) < (lexbuf[3] + n | 0))
                 {if
                   (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                    <=
                    caml_ml_string_length(lexbuf[2]))
                   _aL_
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   {var
                     newlen=
                      min(2 * caml_ml_string_length(lexbuf[2]) | 0,_bI_);
                    if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                     failwith(cst_Lexing_lex_refill_cannot_grow_buffer);
                    var newbuf=caml_create_string(newlen);
                    _aL_(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                    lexbuf[2] = newbuf}
                  var s=lexbuf[5];
                  lexbuf[4] = lexbuf[4] + s | 0;
                  lexbuf[6] = lexbuf[6] - s | 0;
                  lexbuf[5] = 0;
                  lexbuf[7] = lexbuf[7] - s | 0;
                  lexbuf[3] = lexbuf[3] - s | 0;
                  var t=lexbuf[10],_AZ_=t.length - 1 - 1 | 0,_AY_=0;
                  if(! (_AZ_ < 0))
                   {var i=_AY_;
                    for(;;)
                     {var v=caml_check_bound(t,i)[i + 1];
                      if(0 <= v)caml_check_bound(t,i)[i + 1] = v - s | 0;
                      var _A0_=i + 1 | 0;
                      if(_AZ_ !== i){var i=_A0_;continue}
                      break}}}
                _aL_(aux_buffer,0,lexbuf[2],lexbuf[3],n);
                lexbuf[3] = lexbuf[3] + n | 0;
                return 0},
              _AX_,
              _AW_,
              _AV_,
              _AU_,
              _AT_,
              _AS_,
              _AR_,
              _AQ_,
              _AP_,
              _c8_,
              _c8_]}
    function _c__(ic){return _c9_(function(buf,n){return input(ic,buf,0,n)})}
    function _c$_(s)
     {var
       _AG_=[0],
       _AH_=1,
       _AI_=0,
       _AJ_=0,
       _AK_=0,
       _AL_=0,
       _AM_=0,
       _AN_=caml_ml_string_length(s),
       _AO_=_aG_(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _AO_,
              _AN_,
              _AM_,
              _AL_,
              _AK_,
              _AJ_,
              _AI_,
              _AH_,
              _AG_,
              _c8_,
              _c8_]}
    function _da_(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;return _aI_(lexbuf[2],lexbuf[5],len)}
    function _db_(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return _aI_(lexbuf[2],i1,len)}
    function _dc_(lexbuf,i1,i2)
     {if(0 <= i1){var len=i2 - i1 | 0;return [0,_aI_(lexbuf[2],i1,len)]}
      return 0}
    function _dd_(lexbuf,i){return caml_string_get(lexbuf[2],i)}
    function _de_(lexbuf,i){return 0 <= i?[0,caml_string_get(lexbuf[2],i)]:0}
    function _df_(lexbuf,i)
     {return caml_string_get(lexbuf[2],lexbuf[5] + i | 0)}
    function _dg_(lexbuf){return lexbuf[11][4]}
    function _dh_(lexbuf){return lexbuf[12][4]}
    function _di_(lexbuf){return lexbuf[11]}
    function _dj_(lexbuf){return lexbuf[12]}
    function _dk_(lexbuf)
     {var lcp=lexbuf[12];
      lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]];
      return 0}
    var
     Lexing=
      [0,
       _c5_,
       _c__,
       _c$_,
       _c9_,
       _da_,
       _df_,
       _dg_,
       _dh_,
       _di_,
       _dj_,
       _dk_,
       function(lb)
        {lb[6] = 0;
         lb[4] = 0;
         var _AF_=lb[12];
         lb[12] = [0,_AF_[1],_AF_[2],_AF_[3],0];
         lb[3] = 0;
         return 0},
       _db_,
       _dc_,
       _dd_,
       _de_,
       _c6_,
       _c7_];
    caml_register_global(577,Lexing,"Lexing");
    var
     YYexit=caml_set_oo_id([248,cst_Parsing_YYexit,0]),
     Parse_error=caml_set_oo_id([248,cst_Parsing_Parse_error,0]),
     _dl_=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,_c5_),
       caml_make_vect(100,_c5_),
       100,
       0,
       0,
       0,
       _c5_,
       _c5_,
       0,
       0,
       0,
       0,
       0,
       0];
    function _dm_(param)
     {var
       oldsize=_dl_[5],
       newsize=oldsize * 2 | 0,
       new_s=caml_make_vect(newsize,0),
       new_v=caml_make_vect(newsize,0),
       new_start=caml_make_vect(newsize,_c5_),
       new_end=caml_make_vect(newsize,_c5_);
      _w_(_dl_[1],0,new_s,0,oldsize);
      _dl_[1] = new_s;
      _w_(_dl_[2],0,new_v,0,oldsize);
      _dl_[2] = new_v;
      _w_(_dl_[3],0,new_start,0,oldsize);
      _dl_[3] = new_start;
      _w_(_dl_[4],0,new_end,0,oldsize);
      _dl_[4] = new_end;
      _dl_[5] = newsize;
      return 0}
    function _dn_(param){_v_(_dl_[2],0,_dl_[5],0);_dl_[8] = 0;return 0}
    var _do_=[0,function(x){return 0}];
    function _dp_(tables,start,lexer,lexbuf)
     {var
       init_asp=_dl_[11],
       init_sp=_dl_[14],
       init_stackbase=_dl_[6],
       init_state=_dl_[15],
       init_curr_char=_dl_[7],
       init_lval=_dl_[8],
       init_errflag=_dl_[16];
      _dl_[6] = _dl_[14] + 1 | 0;
      _dl_[7] = start;
      _dl_[10] = lexbuf[12];
      try
       {var cmd=0,arg=0;
        for(;;)
         {var match=runtime.caml_parse_engine(tables,_dl_,cmd,arg);
          switch(match)
           {case 0:
             var arg$0=caml_call1(lexer,lexbuf);
             _dl_[9] = lexbuf[11];
             _dl_[10] = lexbuf[12];
             var cmd=1,arg=arg$0;
             continue;
            case 1:throw Parse_error;
            case 2:_dm_(0);var cmd=2,arg=0;continue;
            case 3:_dm_(0);var cmd=3,arg=0;continue;
            case 4:
             try
              {var
                _AB_=_dl_[13],
                _AC_=
                 [0,
                  4,
                  caml_call1(caml_check_bound(tables[1],_AB_)[_AB_ + 1],_dl_)],
                match$0=_AC_}
             catch(_AE_)
              {_AE_ = caml_wrap_exception(_AE_);
               if(_AE_ !== Parse_error)throw _AE_;
               var match$0=[0,5,0]}
             var arg$1=match$0[2],cmd$0=match$0[1],cmd=cmd$0,arg=arg$1;
             continue;
            default:
             caml_call1(tables[14],cst_syntax_error);var cmd=5,arg=0;continue}}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var curr_char=_dl_[7];
        _dl_[11] = init_asp;
        _dl_[14] = init_sp;
        _dl_[6] = init_stackbase;
        _dl_[15] = init_state;
        _dl_[7] = init_curr_char;
        _dl_[8] = init_lval;
        _dl_[16] = init_errflag;
        if(exn[1] === YYexit){var v=exn[2];return v}
        _do_[1]
        =
        function(tok)
         {if(caml_obj_is_block(tok))
           {var _AD_=caml_obj_tag(tok);
            return caml_check_bound(tables[3],_AD_)[_AD_ + 1] === curr_char
                    ?1
                    :0}
          return caml_check_bound(tables[2],tok)[tok + 1] === curr_char?1:0};
        throw exn}}
    function _dq_(env,n)
     {var _AA_=env[11] - n | 0;return caml_check_bound(env[2],_AA_)[_AA_ + 1]}
    function _dr_(param)
     {var i=_dl_[12];
      for(;;)
       {if(0 < i)
         {var
           _Ax_=(_dl_[11] - i | 0) + 1 | 0,
           st=caml_check_bound(_dl_[3],_Ax_)[_Ax_ + 1],
           _Ay_=(_dl_[11] - i | 0) + 1 | 0,
           en=caml_check_bound(_dl_[4],_Ay_)[_Ay_ + 1];
          if(caml_notequal(st,en))return st;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        var _Az_=_dl_[11];
        return caml_check_bound(_dl_[4],_Az_)[_Az_ + 1]}}
    function _ds_(param)
     {var _Aw_=_dl_[11];return caml_check_bound(_dl_[4],_Aw_)[_Aw_ + 1]}
    function _dt_(n)
     {var _Av_=_dl_[11] - (_dl_[12] - n | 0) | 0;
      return caml_check_bound(_dl_[3],_Av_)[_Av_ + 1]}
    function _du_(n)
     {var _Au_=_dl_[11] - (_dl_[12] - n | 0) | 0;
      return caml_check_bound(_dl_[4],_Au_)[_Au_ + 1]}
    function _dv_(param){return _dr_(0)[4]}
    function _dw_(param){return _ds_(0)[4]}
    function _dx_(n){return _dt_(n)[4]}
    function _dy_(n){return _du_(n)[4]}
    function _dz_(tok){return caml_call1(_do_[1],tok)}
    function _dA_(msg){return 0}
    var
     Parsing=
      [0,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dn_,
       Parse_error,
       function(_At_){return runtime.caml_set_parser_trace(_At_)},
       YYexit,
       _dp_,
       _dq_,
       _dz_,
       _dA_];
    caml_register_global(578,Parsing,"Parsing");
    var
     Set=
      [0,
       function(_zK_)
        {function _zc_(param){if(param){var h=param[4];return h}return 0}
         function _zd_(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           var _As_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_As_]}
         function _ze_(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[3],lv=l[2],ll=l[1],_An_=_zc_(lr);
               if(_An_ <= _zc_(ll))return _zd_(ll,lv,_zd_(lr,v,r));
               if(lr)
                {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_Ao_=_zd_(lrr,v,r);
                 return _zd_(_zd_(ll,lv,lrl),lrv,_Ao_)}
               return invalid_arg(cst_Set_bal)}
             return invalid_arg(cst_Set_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[3],rv=r[2],rl=r[1],_Ap_=_zc_(rl);
               if(_Ap_ <= _zc_(rr))return _zd_(_zd_(l,v,rl),rv,rr);
               if(rl)
                {var rlr=rl[3],rlv=rl[2],rll=rl[1],_Aq_=_zd_(rlr,rv,rr);
                 return _zd_(_zd_(l,v,rll),rlv,_Aq_)}
               return invalid_arg(cst_Set_bal$1)}
             return invalid_arg(cst_Set_bal$2)}
           var _Ar_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_Ar_]}
         function _zf_(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(_zK_[1],x,v);
             return 0 === c?t:0 <= c?_ze_(l,v,_zf_(x,r)):_ze_(_zf_(x,l),v,r)}
           return [0,0,x,0,1]}
         function _zg_(x){return [0,0,x,0,1]}
         function _zh_(v,param)
          {if(param)
            {var r=param[3],x=param[2],l=param[1];return _ze_(_zh_(v,l),x,r)}
           return _zg_(v)}
         function _zi_(v,param)
          {if(param)
            {var r=param[3],x=param[2],l=param[1];return _ze_(l,x,_zi_(v,r))}
           return _zg_(v)}
         function _zj_(l,v,r)
          {if(l)
            {if(r)
              {var
                rh=r[4],
                rr=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[4],
                lr=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?_ze_(ll,lv,_zj_(lr,v,r))
                       :(lh + 2 | 0) < rh?_ze_(_zj_(l,v,rl),rv,rr):_zd_(l,v,r)}
             return _zi_(v,l)}
           return _zh_(v,r)}
         function _zk_(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _Am_=param$0[1];
               if(_Am_){var param$0=_Am_;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function _zl_(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _Ak_=param$0[3],_Al_=param$0[2];
               if(_Ak_){var param$0=_Ak_;continue}
               return _Al_}
             throw Not_found}}
         function _zm_(param)
          {if(param)
            {var _Aj_=param[1];
             if(_Aj_){var r=param[3],v=param[2];return _ze_(_zm_(_Aj_),v,r)}
             var r$0=param[3];
             return r$0}
           return invalid_arg(cst_Set_remove_min_elt)}
         function _zn_(t,match)
          {if(t)
            {if(match){var _Ai_=_zm_(match);return _zj_(t,_zk_(match),_Ai_)}
             return t}
           return match}
         function _zo_(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(_zK_[1],x,v);
             if(0 === c)return [0,l,1,r];
             if(0 <= c)
              {var match=_zo_(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,_zj_(l,v,lr),pres,rr]}
             var
              match$0=_zo_(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,_zj_(rl,v,r)]}
           return _dB_}
         var _zp_=0;
         function _zq_(param){return param?0:1}
         function _zr_(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(_zK_[1],x,v),
                _Ah_=0 === c?1:0;
               if(_Ah_)return _Ah_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function _zs_(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(_zK_[1],x,v);
             if(0 === c)
              {if(l)
                {if(r){var _Ag_=_zm_(r);return _ze_(l,_zk_(r),_Ag_)}return l}
               return r}
             return 0 <= c?_ze_(l,v,_zs_(x,r)):_ze_(_zs_(x,l),v,r)}
           return 0}
         function _zt_(t1,match)
          {if(t1)
            {if(match)
              {var
                h2=match[4],
                r2=match[3],
                v2=match[2],
                l2=match[1],
                h1=t1[4],
                r1=t1[3],
                v1=t1[2],
                l1=t1[1];
               if(h2 <= h1)
                {if(1 === h2)return _zf_(v2,t1);
                 var
                  match$0=_zo_(v1,match),
                  r2$0=match$0[3],
                  l2$0=match$0[1],
                  _Ae_=_zt_(r1,r2$0);
                 return _zj_(_zt_(l1,l2$0),v1,_Ae_)}
               if(1 === h1)return _zf_(v1,match);
               var
                match$1=_zo_(v2,t1),
                r1$0=match$1[3],
                l1$0=match$1[1],
                _Af_=_zt_(r1$0,r2);
               return _zj_(_zt_(l1$0,l2),v2,_Af_)}
             return t1}
           return match}
         function _zu_(s1,match)
          {if(s1)
            {if(match)
              {var
                r1=s1[3],
                v1=s1[2],
                l1=s1[1],
                _Aa_=_zo_(v1,match),
                _Ab_=_Aa_[1];
               if(0 === _Aa_[2])
                {var r2=_Aa_[3],_Ac_=_zu_(r1,r2);
                 return _zn_(_zu_(l1,_Ab_),_Ac_)}
               var r2$0=_Aa_[3],_Ad_=_zu_(r1,r2$0);
               return _zj_(_zu_(l1,_Ab_),v1,_Ad_)}
             return 0}
           return 0}
         function _zv_(t1,match)
          {if(t1)
            {if(match)
              {var
                r1=t1[3],
                v1=t1[2],
                l1=t1[1],
                _z8_=_zo_(v1,match),
                _z9_=_z8_[1];
               if(0 === _z8_[2])
                {var r2=_z8_[3],_z__=_zv_(r1,r2);
                 return _zj_(_zv_(l1,_z9_),v1,_z__)}
               var r2$0=_z8_[3],_z$_=_zv_(r1,r2$0);
               return _zn_(_zv_(l1,_z9_),_z$_)}
             return t1}
           return 0}
         function _zw_(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                s$1=s$0[1],
                e$1=[0,v,r,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function _zx_(s1,s2)
          {var e2$2=_zw_(s2,0),e1$2=_zw_(s1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[3],
                  r2=e2[2],
                  v2=e2[1],
                  e1$0=e1[3],
                  r1=e1[2],
                  v1=e1[1],
                  c=caml_call2(_zK_[1],v1,v2);
                 if(0 === c)
                  {var e2$1=_zw_(r2,e2$0),e1$1=_zw_(r1,e1$0),e1=e1$1,e2=e2$1;
                   continue}
                 return c}
               return 1}
             return e2?-1:0}}
         function _zy_(s1,s2){return 0 === _zx_(s1,s2)?1:0}
         function _zz_(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0)
              {if(s2$0)
                {var
                  r2=s2$0[3],
                  v2=s2$0[2],
                  l2=s2$0[1],
                  r1=s1$0[3],
                  v1=s1$0[2],
                  l1=s1$0[1],
                  c=caml_call2(_zK_[1],v1,v2);
                 if(0 === c)
                  {var _z5_=_zz_(l1,l2);
                   if(_z5_){var s1$0=r1,s2$0=r2;continue}
                   return _z5_}
                 if(0 <= c)
                  {var _z6_=_zz_([0,0,v1,r1,0],r2);
                   if(_z6_){var s1$0=l1;continue}
                   return _z6_}
                 var _z7_=_zz_([0,l1,v1,0,0],l2);
                 if(_z7_){var s1$0=r1;continue}
                 return _z7_}
               return 0}
             return 1}}
         function _zA_(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[3],v=param$0[2],l=param$0[1];
               _zA_(f,l);
               caml_call1(f,v);
               var param$0=r;
               continue}
             return 0}}
         function _zB_(f,s,accu)
          {var s$0=s,accu$0=accu;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                l=s$0[1],
                accu$1=caml_call2(f,v,_zB_(f,l,accu$0)),
                s$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function _zC_(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _z2_=caml_call1(p,v);
               if(_z2_)
                {var _z3_=_zC_(p,l);
                 if(_z3_){var param$0=r;continue}
                 var _z4_=_z3_}
               else
                var _z4_=_z2_;
               return _z4_}
             return 1}}
         function _zD_(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _zZ_=caml_call1(p,v);
               if(_zZ_)
                var _z0_=_zZ_;
               else
                {var _z1_=_zD_(p,l);
                 if(! _z1_){var param$0=r;continue}
                 var _z0_=_z1_}
               return _z0_}
             return 0}}
         function _zE_(p,param)
          {if(param)
            {var
              r=param[3],
              v=param[2],
              l=param[1],
              l$0=_zE_(p,l),
              pv=caml_call1(p,v),
              r$0=_zE_(p,r);
             return pv?_zj_(l$0,v,r$0):_zn_(l$0,r$0)}
           return 0}
         function _zF_(p,param)
          {if(param)
            {var
              r=param[3],
              v=param[2],
              l=param[1],
              match=_zF_(p,l),
              lf=match[2],
              lt=match[1],
              pv=caml_call1(p,v),
              match$0=_zF_(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pv){var _zX_=_zn_(lf,rf);return [0,_zj_(lt,v,rt),_zX_]}
             var _zY_=_zj_(lf,v,rf);
             return [0,_zn_(lt,rt),_zY_]}
           return _dC_}
         function _zG_(param)
          {if(param)
            {var r=param[3],l=param[1],_zW_=_zG_(r);
             return (_zG_(l) + 1 | 0) + _zW_ | 0}
           return 0}
         function _zH_(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,v,_zH_(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function _zI_(s){return _zH_(0,s)}
         function _zJ_(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(_zK_[1],x,v);
               if(0 === c)return v;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         return [0,
                 _zp_,
                 _zq_,
                 _zr_,
                 _zf_,
                 _zg_,
                 _zs_,
                 _zt_,
                 _zu_,
                 _zv_,
                 _zx_,
                 _zy_,
                 _zz_,
                 _zA_,
                 _zB_,
                 _zC_,
                 _zD_,
                 _zE_,
                 _zF_,
                 _zG_,
                 _zI_,
                 _zk_,
                 _zl_,
                 _zk_,
                 _zo_,
                 _zJ_,
                 function(l)
                  {if(l)
                    {var _zL_=l[2],_zM_=l[1];
                     if(_zL_)
                      {var _zN_=_zL_[2],_zO_=_zL_[1];
                       if(_zN_)
                        {var _zP_=_zN_[2],_zQ_=_zN_[1];
                         if(_zP_)
                          {var _zR_=_zP_[2],_zS_=_zP_[1];
                           if(_zR_)
                            {if(_zR_[2])
                              {var
                                l$0=_ay_(_zK_[1],l),
                                sub=
                                 function(n,l)
                                  {if(! (3 < n >>> 0))
                                    switch(n)
                                     {case 0:return [0,0,l];
                                      case 1:
                                       if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                                       break;
                                      case 2:
                                       if(l)
                                        {var _zT_=l[2];
                                         if(_zT_)
                                          {var l$4=_zT_[2],x1=_zT_[1],x0$0=l[1];
                                           return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                                       break;
                                      default:
                                       if(l)
                                        {var _zU_=l[2];
                                         if(_zU_)
                                          {var _zV_=_zU_[2];
                                           if(_zV_)
                                            {var l$5=_zV_[2],x2=_zV_[1],x1$0=_zU_[1],x0$1=l[1];
                                             return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                                   var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                                   if(l$0)
                                    {var
                                      l$1=l$0[2],
                                      mid=l$0[1],
                                      match$0=sub((n - nl | 0) - 1 | 0,l$1),
                                      l$2=match$0[2],
                                      right=match$0[1];
                                     return [0,_zd_(left,mid,right),l$2]}
                                   throw [0,Assert_failure,_dD_]};
                               return sub(_K_(l$0),l$0)[1]}
                             var x4=_zR_[1];
                             return _zf_(x4,_zf_(_zS_,_zf_(_zQ_,_zf_(_zO_,_zg_(_zM_)))))}
                           return _zf_(_zS_,_zf_(_zQ_,_zf_(_zO_,_zg_(_zM_))))}
                         return _zf_(_zQ_,_zf_(_zO_,_zg_(_zM_)))}
                       return _zf_(_zO_,_zg_(_zM_))}
                     return _zg_(_zM_)}
                   return _zp_}]}];
    caml_register_global(579,Set,"Set");
    var
     Map=
      [0,
       function(_yL_)
        {function _ye_(param){if(param){var h=param[5];return h}return 0}
         function _yf_(l,x,d,r)
          {var hl=_ye_(l),hr=_ye_(r),_zb_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_zb_]}
         function _yg_(x,d){return [0,0,x,d,0,1]}
         function _yh_(l,x,d,r)
          {if(l)var h=l[5],hl=h;else var hl=0;
           if(r)var h$0=r[5],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_y8_=_ye_(lr);
               if(_y8_ <= _ye_(ll))return _yf_(ll,lv,ld,_yf_(lr,x,d,r));
               if(lr)
                {var
                  lrr=lr[4],
                  lrd=lr[3],
                  lrv=lr[2],
                  lrl=lr[1],
                  _y9_=_yf_(lrr,x,d,r);
                 return _yf_(_yf_(ll,lv,ld,lrl),lrv,lrd,_y9_)}
               return invalid_arg(cst_Map_bal)}
             return invalid_arg(cst_Map_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_y__=_ye_(rl);
               if(_y__ <= _ye_(rr))return _yf_(_yf_(l,x,d,rl),rv,rd,rr);
               if(rl)
                {var
                  rlr=rl[4],
                  rld=rl[3],
                  rlv=rl[2],
                  rll=rl[1],
                  _y$_=_yf_(rlr,rv,rd,rr);
                 return _yf_(_yf_(l,x,d,rll),rlv,rld,_y$_)}
               return invalid_arg(cst_Map_bal$1)}
             return invalid_arg(cst_Map_bal$2)}
           var _za_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_za_]}
         var _yi_=0;
         function _yj_(param){return param?0:1}
         function _yk_(x,data,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(_yL_[1],x,v);
             return 0 === c
                     ?[0,l,x,data,r,h]
                     :0 <= c
                       ?_yh_(l,v,d,_yk_(x,data,r))
                       :_yh_(_yk_(x,data,l),v,d,r)}
           return [0,0,x,data,0,1]}
         function _yl_(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(_yL_[1],x,v);
               if(0 === c)return d;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function _ym_(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(_yL_[1],x,v),
                _y7_=0 === c?1:0;
               if(_y7_)return _y7_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function _yn_(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _y6_=param$0[1];
               if(_y6_){var param$0=_y6_;continue}
               var d=param$0[3],x=param$0[2];
               return [0,x,d]}
             throw Not_found}}
         function _yo_(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _y3_=param$0[4],_y4_=param$0[3],_y5_=param$0[2];
               if(_y3_){var param$0=_y3_;continue}
               return [0,_y5_,_y4_]}
             throw Not_found}}
         function _yp_(param)
          {if(param)
            {var _y2_=param[1];
             if(_y2_)
              {var r=param[4],d=param[3],x=param[2];
               return _yh_(_yp_(_y2_),x,d,r)}
             var r$0=param[4];
             return r$0}
           return invalid_arg(cst_Map_remove_min_elt)}
         function _yq_(x$0,param)
          {if(param)
            {var
              r=param[4],
              d$0=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(_yL_[1],x$0,v);
             if(0 === c)
              {if(l)
                {if(r)
                  {var match=_yn_(r),d=match[2],x=match[1];
                   return _yh_(l,x,d,_yp_(r))}
                 return l}
               return r}
             return 0 <= c?_yh_(l,v,d$0,_yq_(x$0,r)):_yh_(_yq_(x$0,l),v,d$0,r)}
           return 0}
         function _yr_(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
               _yr_(f,l);
               caml_call2(f,v,d);
               var param$0=r;
               continue}
             return 0}}
         function _ys_(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=_ys_(f,l),
              d$0=caml_call1(f,d),
              r$0=_ys_(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function _yt_(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=_yt_(f,l),
              d$0=caml_call2(f,v,d),
              r$0=_yt_(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function _yu_(f,m,accu)
          {var m$0=m,accu$0=accu;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                accu$1=caml_call3(f,v,d,_yu_(f,l,accu$0)),
                m$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function _yv_(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _yZ_=caml_call2(p,v,d);
               if(_yZ_)
                {var _y0_=_yv_(p,l);
                 if(_y0_){var param$0=r;continue}
                 var _y1_=_y0_}
               else
                var _y1_=_yZ_;
               return _y1_}
             return 1}}
         function _yw_(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _yW_=caml_call2(p,v,d);
               if(_yW_)
                var _yX_=_yW_;
               else
                {var _yY_=_yw_(p,l);
                 if(! _yY_){var param$0=r;continue}
                 var _yX_=_yY_}
               return _yX_}
             return 0}}
         function _yx_(k,v,param)
          {if(param)
            {var r=param[4],d=param[3],x=param[2],l=param[1];
             return _yh_(_yx_(k,v,l),x,d,r)}
           return _yg_(k,v)}
         function _yy_(k,v,param)
          {if(param)
            {var r=param[4],d=param[3],x=param[2],l=param[1];
             return _yh_(l,x,d,_yy_(k,v,r))}
           return _yg_(k,v)}
         function _yz_(l,v,d,r)
          {if(l)
            {if(r)
              {var
                rh=r[5],
                rr=r[4],
                rd=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[5],
                lr=l[4],
                ld=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?_yh_(ll,lv,ld,_yz_(lr,v,d,r))
                       :(lh + 2 | 0) < rh
                         ?_yh_(_yz_(l,v,d,rl),rv,rd,rr)
                         :_yf_(l,v,d,r)}
             return _yy_(v,d,l)}
           return _yx_(v,d,r)}
         function _yA_(t,match)
          {if(t)
            {if(match)
              {var match$0=_yn_(match),d=match$0[2],x=match$0[1];
               return _yz_(t,x,d,_yp_(match))}
             return t}
           return match}
         function _yB_(t1,v,d,t2)
          {if(d){var d$0=d[1];return _yz_(t1,v,d$0,t2)}return _yA_(t1,t2)}
         function _yC_(x,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(_yL_[1],x,v);
             if(0 === c)return [0,l,[0,d],r];
             if(0 <= c)
              {var match=_yC_(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,_yz_(l,v,d,lr),pres,rr]}
             var
              match$0=_yC_(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,_yz_(rl,v,d,r)]}
           return _dE_}
         function _yD_(f,s1,s2)
          {if(s1)
            {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
             if(_ye_(s2) <= h1)
              {var
                match=_yC_(v1,s2),
                r2=match[3],
                d2=match[2],
                l2=match[1],
                _yS_=_yD_(f,r1,r2),
                _yT_=caml_call3(f,v1,[0,d1],d2);
               return _yB_(_yD_(f,l1,l2),v1,_yT_,_yS_)}}
           else
            if(! s2)return 0;
           if(s2)
            {var
              r2$0=s2[4],
              d2$0=s2[3],
              v2=s2[2],
              l2$0=s2[1],
              match$0=_yC_(v2,s1),
              r1$0=match$0[3],
              d1$0=match$0[2],
              l1$0=match$0[1],
              _yU_=_yD_(f,r1$0,r2$0),
              _yV_=caml_call3(f,v2,d1$0,[0,d2$0]);
             return _yB_(_yD_(f,l1$0,l2$0),v2,_yV_,_yU_)}
           throw [0,Assert_failure,_dF_]}
         function _yE_(p,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=_yE_(p,l),
              pvd=caml_call2(p,v,d),
              r$0=_yE_(p,r);
             return pvd?_yz_(l$0,v,d,r$0):_yA_(l$0,r$0)}
           return 0}
         function _yF_(p,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              match=_yF_(p,l),
              lf=match[2],
              lt=match[1],
              pvd=caml_call2(p,v,d),
              match$0=_yF_(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pvd){var _yQ_=_yA_(lf,rf);return [0,_yz_(lt,v,d,rt),_yQ_]}
             var _yR_=_yz_(lf,v,d,rf);
             return [0,_yA_(lt,rt),_yR_]}
           return _dG_}
         function _yG_(m,e)
          {var m$0=m,e$0=e;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                m$1=m$0[1],
                e$1=[0,v,d,r,e$0],
                m$0=m$1,
                e$0=e$1;
               continue}
             return e$0}}
         function _yH_(cmp,m1,m2)
          {var e2$2=_yG_(m2,0),e1$2=_yG_(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  c=caml_call2(_yL_[1],v1,v2);
                 if(0 === c)
                  {var c$0=caml_call2(cmp,d1,d2);
                   if(0 === c$0)
                    {var e2$1=_yG_(r2,e2$0),e1$1=_yG_(r1,e1$0),e1=e1$1,e2=e2$1;
                     continue}
                   return c$0}
                 return c}
               return 1}
             return e2?-1:0}}
         function _yI_(cmp,m1,m2)
          {var e2$2=_yG_(m2,0),e1$2=_yG_(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  _yN_=0 === caml_call2(_yL_[1],v1,v2)?1:0;
                 if(_yN_)
                  {var _yO_=caml_call2(cmp,d1,d2);
                   if(_yO_)
                    {var e2$1=_yG_(r2,e2$0),e1$1=_yG_(r1,e1$0),e1=e1$1,e2=e2$1;
                     continue}
                   var _yP_=_yO_}
                 else
                  var _yP_=_yN_;
                 return _yP_}
               return 0}
             return e2?0:1}}
         function _yJ_(param)
          {if(param)
            {var r=param[4],l=param[1],_yM_=_yJ_(r);
             return (_yJ_(l) + 1 | 0) + _yM_ | 0}
           return 0}
         function _yK_(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,[0,v,d],_yK_(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         return [0,
                 _yi_,
                 _yj_,
                 _ym_,
                 _yk_,
                 _yg_,
                 _yq_,
                 _yD_,
                 _yH_,
                 _yI_,
                 _yr_,
                 _yu_,
                 _yv_,
                 _yw_,
                 _yE_,
                 _yF_,
                 _yJ_,
                 function(s){return _yK_(0,s)},
                 _yn_,
                 _yo_,
                 _yn_,
                 _yC_,
                 _yl_,
                 _ys_,
                 _yt_]}];
    caml_register_global(580,Map,"Map");
    var _dH_=caml_set_oo_id([248,cst_Stack_Empty,0]);
    function _dI_(param){return [0,0]}
    function _dJ_(s){s[1] = 0;return 0}
    function _dK_(s){return [0,s[1]]}
    function _dL_(x,s){s[1] = [0,x,s[1]];return 0}
    function _dM_(s)
     {var _yd_=s[1];
      if(_yd_){var tl=_yd_[2],hd=_yd_[1];s[1] = tl;return hd}
      throw _dH_}
    function _dN_(s)
     {var _yc_=s[1];if(_yc_){var hd=_yc_[1];return hd}throw _dH_}
    function _dO_(s){return 0 === s[1]?1:0}
    function _dP_(s){return _K_(s[1])}
    var
     Stack=
      [0,
       _dH_,
       _dI_,
       _dL_,
       _dM_,
       _dN_,
       _dJ_,
       _dK_,
       _dO_,
       _dP_,
       function(f,s){return _V_(f,s[1])}];
    caml_register_global(581,Stack,"Stack");
    var _dQ_=caml_set_oo_id([248,cst_Queue_Empty,0]);
    function _dR_(param){return [0,0,0]}
    function _dS_(q){q[1] = 0;q[2] = 0;return 0}
    function _dT_(x,q)
     {if(0 === q[1])
       {var cell=[];
        caml_update_dummy(cell,[0,x,cell]);
        q[1] = 1;
        q[2] = cell;
        return 0}
      var tail=q[2],head=tail[2],cell$0=[0,x,head];
      q[1] = q[1] + 1 | 0;
      tail[2] = cell$0;
      q[2] = cell$0;
      return 0}
    function _dU_(q){if(0 === q[1])throw _dQ_;return q[2][2][1]}
    function _dV_(q)
     {if(0 === q[1])throw _dQ_;
      q[1] = q[1] - 1 | 0;
      var tail=q[2],head=tail[2];
      if(head === tail)q[2] = 0;else tail[2] = head[2];
      return head[1]}
    function _dW_(q)
     {if(0 === q[1])return _dR_(0);
      var tail=q[2],prev=[];
      caml_update_dummy(prev,[0,tail[1],prev]);
      var prev$0=prev,cell=tail[2];
      for(;;)
       {if(cell !== tail)
         {var prev$1=[0,cell[1],prev];
          prev$0[2] = prev$1;
          var cell$0=cell[2],prev$0=prev$1,cell=cell$0;
          continue}
        return [0,q[1],prev]}}
    function _dX_(q){return 0 === q[1]?1:0}
    function _dY_(q){return q[1]}
    function _dZ_(f,q)
     {var _ya_=0 < q[1]?1:0;
      if(_ya_)
       {var tail=q[2],cell=tail[2];
        for(;;)
         {caml_call1(f,cell[1]);
          var _yb_=cell !== tail?1:0;
          if(_yb_){var cell$0=cell[2],cell=cell$0;continue}
          return _yb_}}
      return _ya_}
    function _d0_(f,accu,q)
     {if(0 === q[1])return accu;
      var tail=q[2],accu$0=accu,cell=tail[2];
      for(;;)
       {var accu$1=caml_call2(f,accu$0,cell[1]);
        if(cell === tail)return accu$1;
        var cell$0=cell[2],accu$0=accu$1,cell=cell$0;
        continue}}
    var
     Queue=
      [0,
       _dQ_,
       _dR_,
       _dT_,
       _dT_,
       _dV_,
       _dV_,
       _dU_,
       _dU_,
       _dS_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       function(q1,q2)
        {var length1=q1[1],_x__=0 < length1?1:0;
         if(_x__)
          {var tail1=q1[2];
           _dS_(q1);
           if(0 < q2[1])
            {var tail2=q2[2],head1=tail1[2],head2=tail2[2];
             tail1[2] = head2;
             tail2[2] = head1}
           q2[1] = q2[1] + length1 | 0;
           q2[2] = tail1;
           var _x$_=0}
         else
          var _x$_=_x__;
         return _x$_}];
    caml_register_global(582,Queue,"Queue");
    var _d1_=caml_set_oo_id([248,cst_CamlinternalLazy_Undefined,0]);
    function _d2_(param){throw _d1_}
    function _d3_(blk)
     {var closure=blk[1];
      blk[1] = _d2_;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function _d4_(blk)
     {var closure=blk[1];
      blk[1] = _d2_;
      var result=caml_call1(closure,0);
      blk[1] = result;
      caml_obj_set_tag(blk,250);
      return result}
    function _d5_(lzv)
     {var t=caml_obj_tag(lzv);return t === 250?lzv[1]:t !== 246?lzv:_d3_(lzv)}
    function _d6_(lzv)
     {var t=caml_obj_tag(lzv);return t === 250?lzv[1]:t !== 246?lzv:_d4_(lzv)}
    var CamlinternalLazy=[0,_d1_,_d3_,_d4_,_d5_,_d6_];
    caml_register_global(583,CamlinternalLazy,"CamlinternalLazy");
    function _d7_(f){var x=caml_obj_block(246,1);x[1] = f;return x}
    function _d8_(v)
     {var t=caml_obj_tag(v);
      if(t !== 250)if(t !== 246)if(t !== 253)return v;
      return runtime.caml_lazy_make_forward(v)}
    function _d9_(l){return caml_obj_tag(l) !== 246?1:0}
    var Lazy=[0,_d1_,_d6_,_d7_,_d8_,_d9_,_d7_,_d8_,_d9_];
    caml_register_global(584,Lazy,"Lazy");
    var
     _d__=caml_set_oo_id([248,cst_Stream_Failure,0]),
     _d$_=caml_set_oo_id([248,cst_Stream_Error,0]);
    function _ea_(s,d){return s[2] = d}
    function _eb_(b)
     {b[3] = input(b[1],b[2],0,caml_ml_string_length(b[2]));b[4] = 0;return 0}
    function _ec_(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=_ec_(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_ed_]}
           case 2:
            var
             f=d$0[1],
             _x6_=caml_obj_tag(f),
             d$1=250 === _x6_?f[1]:246 === _x6_?_d3_(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _x7_=d$0[1],_x8_=_x7_[1];
            if(_x8_)
             {var _x9_=_x8_[1];
              if(_x9_){var a$0=_x9_[1];_x7_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_x7_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _x7_[1] = _ee_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])_eb_(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function _ef_(s)
     {for(;;)
       {var _x1_=s[2];
        if(typeof _x1_ === "number")
         return 0;
        else
         switch(_x1_[0])
          {case 0:var a=_x1_[1];return [0,a];
           case 1:
            var d=_ec_(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];_ea_(s,d);return [0,a$0]}
              throw [0,Assert_failure,_eg_]}
           case 2:
            var
             f=_x1_[1],
             _x2_=caml_obj_tag(f),
             _x3_=250 === _x2_?f[1]:246 === _x2_?_d3_(f):f;
            _ea_(s,_x3_);
            continue;
           case 3:
            var _x4_=_x1_[1],_x5_=_x4_[1];
            if(_x5_){var a$1=_x5_[1];return a$1}
            var x=caml_call1(_x4_[2],s[1]);
            _x4_[1] = [0,x];
            return x;
           default:
            var b=_x1_[1];
            if(b[3] <= b[4])_eb_(b);
            return 0 === b[3]
                    ?(_ea_(s,0),0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function _eh_(s)
     {for(;;)
       {var _xZ_=s[2];
        if(typeof _xZ_ !== "number")
         switch(_xZ_[0])
          {case 0:var d=_xZ_[2];s[1] = s[1] + 1 | 0;return _ea_(s,d);
           case 3:
            var _x0_=_xZ_[1];
            if(_x0_[1]){s[1] = s[1] + 1 | 0;_x0_[1] = 0;return 0}
            break;
           case 4:
            var b=_xZ_[1];s[1] = s[1] + 1 | 0;b[4] = b[4] + 1 | 0;return 0
           }
        var match=_ef_(s);
        if(match)continue;
        return 0}}
    function _ei_(n,s)
     {if(0 < n)
       {var match=_ef_(s);
        if(match)
         {var a=match[1];
          _eh_(s);
          var
           match$0=_ei_(n - 1 | 0,s),
           k=match$0[3],
           d=match$0[2],
           al=match$0[1];
          return [0,[0,a,al],[0,a,d],k + 1 | 0]}
        return [0,0,s[2],0]}
      return [0,0,s[2],0]}
    function _ej_(n,s)
     {var match=_ei_(n,s),len=match[3],d=match[2],al=match[1];
      s[1] = s[1] - len | 0;
      _ea_(s,d);
      return al}
    function _ek_(s)
     {var match=_ef_(s);if(match){var a=match[1];_eh_(s);return a}throw _d__}
    function _el_(s){var match=_ef_(s);if(match)throw _d__;return 0}
    function _em_(f,strm)
     {for(;;)
       {var match=_ef_(strm);
        if(match){var a=match[1];_eh_(strm);caml_call1(f,a);continue}
        return 0}}
    function _en_(f){return [0,0,[3,[0,0,f]]]}
    function _eo_(l)
     {var _xY_=0;return [0,0,_Y_(function(x,l){return [0,x,l]},l,_xY_)]}
    function _ep_(s)
     {var count=[0,0];
      return _en_
              (function(param)
                {var c=count[1];
                 return c < caml_ml_string_length(s)
                         ?(count[1]++,[0,caml_string_get(s,c)])
                         :0})}
    function _eq_(s)
     {var count=[0,0];
      return _en_
              (function(param)
                {var c=count[1];
                 return c < caml_ml_string_length(s)
                         ?(count[1]++,[0,caml_string_get(s,c)])
                         :0})}
    function _er_(ic){return [0,0,[4,[0,ic,caml_create_string(4096),0,0]]]}
    function _es_(i,s){return [0,0,[1,i[2],s[2]]]}
    function _et_(i,s){return [0,0,[0,i,s[2]]]}
    function _eu_(i){return [0,0,[0,i,0]]}
    function _ev_(f,s)
     {return [0,
              0,
              [2,
               [246,
                function(_xW_)
                 {var _xX_=s[2];return [1,caml_call1(f,0)[2],_xX_]}]]]}
    function _ew_(f,s)
     {return [0,
              0,
              [2,
               [246,
                function(_xU_){var _xV_=s[2];return [0,caml_call1(f,0),_xV_]}]]]}
    function _ex_(f)
     {return [0,0,[2,[246,function(_xT_){return [0,caml_call1(f,0),0]}]]]}
    function _ez_(f)
     {return [0,0,[2,[246,function(_xS_){return caml_call1(f,0)[2]}]]]}
    function _eA_(f,s)
     {print_string(cst_count);
      print_int(s[1]);
      print_string(cst_data);
      _eB_(f,s[2]);
      print_string(cst$5);
      return print_newline(0)}
    function _eB_(f,param)
     {if(typeof param === "number")
       return print_string(cst_Sempty);
      else
       switch(param[0])
        {case 0:
          var d=param[2],a=param[1];
          print_string(cst_Scons);
          caml_call1(f,a);
          print_string(cst$6);
          _eB_(f,d);
          return print_string(cst$7);
         case 1:
          var d2=param[2],d1=param[1];
          print_string(cst_Sapp);
          _eB_(f,d1);
          print_string(cst$8);
          _eB_(f,d2);
          return print_string(cst$9);
         case 2:return print_string(cst_Slazy);
         case 3:return print_string(cst_Sgen);
         default:return print_string(cst_Sbuffio)}}
    var
     Stream=
      [0,
       _d__,
       _d$_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       _em_,
       _ek_,
       _el_,
       _ef_,
       _eh_,
       function(_xR_){return _xR_[1]},
       _ej_,
       _es_,
       _et_,
       _eu_,
       _ev_,
       _ew_,
       _ex_,
       _ey_,
       _ez_,
       _eA_];
    caml_register_global(585,Stream,"Stream");
    function _eC_(n)
     {var
       n$0=1 <= n?n:1,
       n$1=16777211 < n$0?_bI_:n$0,
       s=caml_create_string(n$1);
      return [0,s,0,n$1,s]}
    function _eD_(b){return _aI_(b[1],0,b[2])}
    function _eE_(b){return _aH_(b[1],0,b[2])}
    function _eF_(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)if(! ((b[2] - len | 0) < ofs))return _aI_(b[1],ofs,len);
      return invalid_arg(cst_Buffer_sub)}
    function _eG_(src,srcoff,dst,dstoff,len)
     {if(0 <= len)
       if(0 <= srcoff)
        if(! ((src[2] - len | 0) < srcoff))
         if(0 <= dstoff)
          if(! ((caml_ml_string_length(dst) - len | 0) < dstoff))
           return _aL_(src[1],srcoff,dst,dstoff,len);
      return invalid_arg(cst_Buffer_blit)}
    function _eH_(b,ofs)
     {if(0 <= ofs)if(! (b[2] <= ofs))return caml_bytes_unsafe_get(b[1],ofs);
      return invalid_arg(cst_Buffer_nth)}
    function _eI_(b){return b[2]}
    function _eJ_(b){b[2] = 0;return 0}
    function _eK_(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_string_length(b[1]);return 0}
    function _eL_(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(16777211 < new_len[1])
         if((b[2] + more | 0) <= 16777211)
          new_len[1] = _bI_;
         else
          failwith(cst_Buffer_add_cannot_grow_buffer);
        var new_buffer=caml_create_string(new_len[1]);
        _aL_(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function _eM_(b,c)
     {var pos=b[2];
      if(b[3] <= pos)_eL_(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function _eN_(b,s,offset,len)
     {var _xO_=offset < 0?1:0;
      if(_xO_)
       var _xP_=_xO_;
      else
       var
        _xQ_=len < 0?1:0,
        _xP_=_xQ_ || (caml_ml_string_length(s) < (offset + len | 0)?1:0);
      if(_xP_)invalid_arg(cst_Buffer_add_substring_add_subbytes);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)_eL_(b,len);
      _aM_(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function _eO_(b,s,offset,len){return _eN_(b,s,offset,len)}
    function _eP_(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)_eL_(b,len);
      _aM_(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function _eQ_(b,s){return _eP_(b,s)}
    function _eR_(b,bs){return _eO_(b,bs[1],0,bs[2])}
    function _eS_(b,ic,len)
     {var _xM_=len < 0?1:0,_xN_=_xM_ || (16777211 < len?1:0);
      if(_xN_)invalid_arg(cst_Buffer_add_channel);
      if(b[3] < (b[2] + len | 0))_eL_(b,len);
      really_input(ic,b[1],b[2],len);
      b[2] = b[2] + len | 0;
      return 0}
    function _eT_(oc,b){return output(oc,b[1],0,b[2])}
    var
     Buffer=
      [0,
       _eC_,
       _eD_,
       _eE_,
       _eF_,
       _eG_,
       _eH_,
       _eI_,
       _eJ_,
       _eK_,
       _eM_,
       _eP_,
       _eQ_,
       _eN_,
       _eO_,
       function(b,f,s)
        {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
         for(;;)
          {if(i$7 < lim$1)
            {var current=caml_string_get(s,i$7);
             if(36 === current)
              {if(92 === previous)
                {_eM_(b,current);
                 var i$8=i$7 + 1 | 0,previous=32,i$7=i$8;
                 continue}
               var start=i$7 + 1 | 0;
               if(lim$1 <= start)throw Not_found;
               var opening=caml_string_get(s,start);
               if(40 === opening)
                var switch$0=0;
               else
                if(123 === opening)
                 var switch$0=0;
                else
                 {var
                   i$6=start + 1 | 0,
                   lim$0=caml_ml_string_length(s),
                   i$3=i$6;
                  for(;;)
                   {if(lim$0 <= i$3)
                     var stop=lim$0;
                    else
                     {var
                       match=caml_string_get(s,i$3),
                       switch$1=
                        91 <= match
                         ?97 <= match?123 <= match?0:1:95 === match?1:0
                         :58 <= match?65 <= match?1:0:48 <= match?1:0;
                      if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
                      var stop=i$3}
                    var
                     match$0=[0,_be_(s,start,stop - start | 0),stop],
                     switch$0=1;
                    break}}
               if(! switch$0)
                {var i$5=start + 1 | 0,k$2=0;
                 if(40 === opening)
                  var _xK_=41;
                 else
                  {if(123 !== opening)throw [0,Assert_failure,_eU_];
                   var _xK_=125}
                 var lim=caml_ml_string_length(s),k=k$2,i=i$5;
                 for(;;)
                  {if(lim <= i)throw Not_found;
                   if(caml_string_get(s,i) === opening)
                    {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
                   if(caml_string_get(s,i) !== _xK_)
                    {var i$2=i + 1 | 0,i=i$2;continue}
                   if(0 !== k)
                    {var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
                   var
                    match$0=
                     [0,_be_(s,i$5,(i - start | 0) - 1 | 0),i + 1 | 0];
                   break}}
               var next_i=match$0[2],ident=match$0[1];
               _eP_(b,caml_call1(f,ident));
               var previous=32,i$7=next_i;
               continue}
             if(92 === previous)
              {_eM_(b,92);
               _eM_(b,current);
               var i$9=i$7 + 1 | 0,previous=32,i$7=i$9;
               continue}
             if(92 === current)
              {var i$10=i$7 + 1 | 0,previous=current,i$7=i$10;continue}
             _eM_(b,current);
             var i$11=i$7 + 1 | 0,previous=current,i$7=i$11;
             continue}
           var _xL_=92 === previous?1:0;
           return _xL_?_eM_(b,previous):_xL_}},
       _eR_,
       _eS_,
       _eT_];
    caml_register_global(586,Buffer,"Buffer");
    function _eV_(param){return make(32,0)}
    function _eW_(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_string_set
              (char_set,
               str_ind,
               char_of_int(caml_string_get(char_set,str_ind) | mask))}
    function _eX_(char_set){return _aF_(char_set)}
    function _eY_(char_set)
     {var char_set$0=_eV_(0),i=0;
      for(;;)
       {caml_string_set
         (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
        var _xJ_=i + 1 | 0;
        if(31 !== i){var i=_xJ_;continue}
        return char_set$0}}
    function _eZ_(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function _e0_(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function _e1_(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[9,fmt]];
         case 3:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,_e0_(pad_opt),fmt]];
         case 1:var pad_opt$0=ign[1];return [0,[3,_e0_(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,_e0_(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,_e0_(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,_e0_(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,_e0_(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_xI_=[0,ndec];else var _xI_=0;
          return [0,[8,0,_e0_(pad_opt$5),_xI_,fmt]];
         case 7:
          var fmtty=ign[2],pad_opt$6=ign[1];
          return [0,[13,pad_opt$6,fmtty,fmt]];
         case 8:
          var fmtty$0=ign[2],pad_opt$7=ign[1];
          return [0,[14,pad_opt$7,fmtty$0,fmt]];
         case 9:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    var _e2_=6;
    function _e3_(init_size){return [0,0,caml_create_string(init_size)]}
    function _e4_(buf,overhead)
     {var
       len=caml_ml_string_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _xG_=len < min_len?1:0;
      if(_xG_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_string(new_len);
        _aL_(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _xH_=0}
      else
       var _xH_=_xG_;
      return _xH_}
    function _e5_(buf,c)
     {_e4_(buf,1);
      caml_string_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function _e6_(buf,s)
     {var str_len=caml_ml_string_length(s);
      _e4_(buf,str_len);
      _aM_(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function _e7_(buf){return _aI_(buf[2],0,buf[1])}
    function _e8_(iconv)
     {switch(iconv)
       {case 12:return 117;
        case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 0:
        case 1:
        case 2:return 100;
        default:return 105}}
    function _e9_(fconv)
     {switch(fconv)
       {case 15:return 70;
        case 0:
        case 1:
        case 2:return 102;
        case 3:
        case 4:
        case 5:return 101;
        case 6:
        case 7:
        case 8:return 69;
        case 9:
        case 10:
        case 11:return 103;
        default:return 71}}
    function _e__(buf,padty)
     {switch(padty)
       {case 0:return _e5_(buf,45);
        case 1:return 0;
        default:return _e5_(buf,48)}}
    function _e$_(buf,ign_flag){return ign_flag?_e5_(buf,95):ign_flag}
    function _fa_(buf,pad_opt)
     {if(pad_opt)
       {var width=pad_opt[1];return _e6_(buf,caml_new_string("" + width))}
      return 0}
    function _fb_(buf,pad)
     {if(typeof pad === "number")
       return 0;
      else
       {if(0 === pad[0])
         {var n=pad[2],padty=pad[1];
          _e__(buf,padty);
          return _e6_(buf,caml_new_string("" + n))}
        var padty$0=pad[1];
        _e__(buf,padty$0);
        return _e5_(buf,42)}}
    function _fc_(buf,prec)
     {if(typeof prec === "number")return 0 === prec?0:_e6_(buf,cst$10);
      var n=prec[1];
      _e5_(buf,46);
      return _e6_(buf,caml_new_string("" + n))}
    function _fd_(buf,iconv)
     {switch(iconv)
       {case 1:
        case 4:return _e5_(buf,43);
        case 2:
        case 5:return _e5_(buf,32);
        case 7:
        case 9:
        case 11:return _e5_(buf,35);
        default:return 0}}
    function _fe_(buf,ign_flag,iconv,pad,prec,c)
     {_e5_(buf,37);
      _e$_(buf,ign_flag);
      _fd_(buf,iconv);
      _fb_(buf,pad);
      _fc_(buf,prec);
      _e5_(buf,c);
      return _e5_(buf,_e8_(iconv))}
    function _ff_(buf,fconv)
     {switch(fconv)
       {case 1:
        case 4:
        case 7:
        case 10:
        case 13:return _e5_(buf,43);
        case 2:
        case 5:
        case 8:
        case 11:
        case 14:return _e5_(buf,32);
        default:return 0}}
    function _fg_(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return cst$11;
         case 1:return cst$12;
         case 2:return cst$13;
         case 3:return cst$14;
         case 4:return cst$15;
         case 5:return cst$16;
         default:return cst$17}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _j_(cst$18,_bb_(1,c))}}
    function _fh_(formatting_gen)
     {if(0 === formatting_gen[0])
       {var match=formatting_gen[1],str=match[2];return str}
      var match$0=formatting_gen[1],str$0=match$0[2];
      return str$0}
    function _fi_(buf,chr){return 37 === chr?_e6_(buf,cst$19):_e5_(buf,chr)}
    function _fj_(buf,str)
     {var _xE_=caml_ml_string_length(str) - 1 | 0,_xD_=0;
      if(! (_xE_ < 0))
       {var i=_xD_;
        for(;;)
         {_fi_(buf,caml_string_get(str,i));
          var _xF_=i + 1 | 0;
          if(_xE_ !== i){var i=_xF_;continue}
          break}}
      return 0}
    function _fk_(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];_e6_(buf,cst_c);var fmtty$0=rest;continue;
          case 1:
           var rest$0=fmtty$0[1];_e6_(buf,cst_s);var fmtty$0=rest$0;continue;
          case 2:
           var rest$1=fmtty$0[1];_e6_(buf,cst_i);var fmtty$0=rest$1;continue;
          case 3:
           var rest$2=fmtty$0[1];_e6_(buf,cst_li);var fmtty$0=rest$2;continue;
          case 4:
           var rest$3=fmtty$0[1];_e6_(buf,cst_ni);var fmtty$0=rest$3;continue;
          case 5:
           var rest$4=fmtty$0[1];_e6_(buf,cst_Li);var fmtty$0=rest$4;continue;
          case 6:
           var rest$5=fmtty$0[1];_e6_(buf,cst_f);var fmtty$0=rest$5;continue;
          case 7:
           var rest$6=fmtty$0[1];_e6_(buf,cst_B);var fmtty$0=rest$6;continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           _e6_(buf,cst$20);
           _fk_(buf,sub_fmtty);
           _e6_(buf,cst$21);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           _e6_(buf,cst$22);
           _fk_(buf,sub_fmtty$0);
           _e6_(buf,cst$23);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];_e6_(buf,cst_a);var fmtty$0=rest$9;continue;
          case 11:
           var rest$10=fmtty$0[1];
           _e6_(buf,cst_t$0);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           _e6_(buf,cst$24);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           _e6_(buf,cst_r$0);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           _e6_(buf,cst_r$1);
           var fmtty$0=rest$13;
           continue}}
    function _fl_(param)
     {if(param){var x=param[1];return 1 + _fl_(x) | 0}return 0}
    function _fm_(fmt$1)
     {var buf=_e3_(16),fmt=fmt$1,ign_flag=0;
      a:
      for(;;)
       if(typeof fmt === "number")
        return _e7_(buf);
       else
        switch(fmt[0])
         {case 0:
           var rest=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _e5_(buf,99);
           var fmt=rest,ign_flag=0;
           continue;
          case 1:
           var rest$0=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _e5_(buf,67);
           var fmt=rest$0,ign_flag=0;
           continue;
          case 2:
           var rest$1=fmt[2],pad=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _fb_(buf,pad);
           _e5_(buf,115);
           var fmt=rest$1,ign_flag=0;
           continue;
          case 3:
           var rest$2=fmt[2],pad$0=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _fb_(buf,pad$0);
           _e5_(buf,83);
           var fmt=rest$2,ign_flag=0;
           continue;
          case 4:
           var rest$3=fmt[4],prec=fmt[3],pad$1=fmt[2],iconv=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _fd_(buf,iconv);
           _fb_(buf,pad$1);
           _fc_(buf,prec);
           _e5_(buf,_e8_(iconv));
           var fmt=rest$3,ign_flag=0;
           continue;
          case 5:
           var rest$4=fmt[4],prec$0=fmt[3],pad$2=fmt[2],iconv$0=fmt[1];
           _fe_(buf,ign_flag,iconv$0,pad$2,prec$0,108);
           var fmt=rest$4,ign_flag=0;
           continue;
          case 6:
           var rest$5=fmt[4],prec$1=fmt[3],pad$3=fmt[2],iconv$1=fmt[1];
           _fe_(buf,ign_flag,iconv$1,pad$3,prec$1,110);
           var fmt=rest$5,ign_flag=0;
           continue;
          case 7:
           var rest$6=fmt[4],prec$2=fmt[3],pad$4=fmt[2],iconv$2=fmt[1];
           _fe_(buf,ign_flag,iconv$2,pad$4,prec$2,76);
           var fmt=rest$6,ign_flag=0;
           continue;
          case 8:
           var rest$7=fmt[4],prec$3=fmt[3],pad$5=fmt[2],fconv=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _ff_(buf,fconv);
           _fb_(buf,pad$5);
           _fc_(buf,prec$3);
           _e5_(buf,_e9_(fconv));
           var fmt=rest$7,ign_flag=0;
           continue;
          case 9:
           var rest$8=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _e5_(buf,66);
           var fmt=rest$8,ign_flag=0;
           continue;
          case 10:var rest$9=fmt[1];_e6_(buf,cst$25);var fmt=rest$9;continue;
          case 11:
           var rest$10=fmt[2],str=fmt[1];
           _fj_(buf,str);
           var fmt=rest$10;
           continue;
          case 12:
           var rest$11=fmt[2],chr=fmt[1];
           _fi_(buf,chr);
           var fmt=rest$11;
           continue;
          case 13:
           var rest$12=fmt[3],fmtty=fmt[2],pad_opt=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _fa_(buf,pad_opt);
           _e5_(buf,123);
           _fk_(buf,fmtty);
           _e5_(buf,37);
           _e5_(buf,125);
           var fmt=rest$12,ign_flag=0;
           continue;
          case 14:
           var rest$13=fmt[3],fmtty$0=fmt[2],pad_opt$0=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _fa_(buf,pad_opt$0);
           _e5_(buf,40);
           _fk_(buf,fmtty$0);
           _e5_(buf,37);
           _e5_(buf,41);
           var fmt=rest$13,ign_flag=0;
           continue;
          case 15:
           var rest$14=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _e5_(buf,97);
           var fmt=rest$14,ign_flag=0;
           continue;
          case 16:
           var rest$15=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _e5_(buf,116);
           var fmt=rest$15,ign_flag=0;
           continue;
          case 17:
           var rest$16=fmt[2],fmting_lit=fmt[1];
           _fj_(buf,_fg_(fmting_lit));
           var fmt=rest$16;
           continue;
          case 18:
           var rest$17=fmt[2],fmting_gen=fmt[1];
           _fj_(buf,cst$26);
           _fj_(buf,_fh_(fmting_gen));
           var fmt=rest$17;
           continue;
          case 19:
           var rest$18=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _e5_(buf,114);
           var fmt=rest$18,ign_flag=0;
           continue;
          case 20:
           var rest$19=fmt[3],char_set=fmt[2],width_opt=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _fa_(buf,width_opt);
           var
            print_char=
             function(buf,i)
              {var c=char_of_int(i);
               return 37 === c
                       ?(_e5_(buf,37),_e5_(buf,37))
                       :64 === c?(_e5_(buf,37),_e5_(buf,64)):_e5_(buf,c)};
           _e5_(buf,91);
           var
            _xt_=_eZ_(char_set,0)?(_e5_(buf,94),_eY_(char_set)):char_set,
            is_alone$0=
             function(_xy_)
              {function is_alone(c)
                {var
                  after=_az_(c + 1 | 0),
                  before=_az_(c - 1 | 0),
                  _xz_=_eZ_(_xy_,c);
                 if(_xz_)
                  var
                   _xA_=_eZ_(_xy_,before),
                   _xB_=_xA_?_eZ_(_xy_,after):_xA_,
                   _xC_=1 - _xB_;
                 else
                  var _xC_=_xz_;
                 return _xC_}
               return is_alone},
            is_alone=is_alone$0(_xt_);
           if(is_alone(93))_e5_(buf,93);
           var i=1;
           b:
           for(;;)
            {if(i < 256)
              {if(! _eZ_(_xt_,char_of_int(i)))
                {var i$0=i + 1 | 0,i=i$0;continue}
               var match=char_of_int(i),switcher=match - 45 | 0;
               if(48 < switcher >>> 0)
                var switch$0=210 <= switcher?(print_char(buf,255),1):0;
               else
                {var switcher$0=switcher - 1 | 0;
                 if(46 < switcher$0 >>> 0){var i$2=i + 1 | 0,i=i$2;continue}
                 var switch$0=0}
               if(! switch$0)
                {var i$1=i + 1 | 0;
                 if(! _eZ_(_xt_,char_of_int(i$1)))
                  {print_char(buf,i$1 - 1 | 0);
                   var i$6=i$1 + 1 | 0,i=i$6;
                   continue}
                 var match$0=char_of_int(i$1),switcher$1=match$0 - 45 | 0;
                 if(48 < switcher$1 >>> 0)
                  var
                   switch$1=
                    210 <= switcher$1
                     ?(print_char(buf,254),print_char(buf,255),1)
                     :0;
                 else
                  {var switcher$2=switcher$1 - 1 | 0;
                   if(46 < switcher$2 >>> 0)
                    {if(! _eZ_(_xt_,char_of_int(i$1 + 1 | 0)))
                      {print_char(buf,i$1 - 1 | 0);
                       var i$5=i$1 + 1 | 0,i=i$5;
                       continue}
                     var switch$1=0}
                   else
                    var switch$1=0}
                 if(! switch$1)
                  {if(! _eZ_(_xt_,char_of_int(i$1 + 1 | 0)))
                    {print_char(buf,i$1 - 1 | 0);
                     print_char(buf,i$1);
                     var i$4=i$1 + 2 | 0,i=i$4;
                     continue}
                   var j=i$1 + 2 | 0,i$3=i$1 - 1 | 0,j$0=j;
                   for(;;)
                    {if(256 !== j$0)
                      if(_eZ_(_xt_,char_of_int(j$0)))
                       {var j$1=j$0 + 1 | 0,j$0=j$1;continue}
                     print_char(buf,i$3);
                     print_char(buf,45);
                     print_char(buf,j$0 - 1 | 0);
                     if(j$0 < 256){var i$7=j$0 + 1 | 0,i=i$7;continue b}
                     break}}}}
             if(is_alone(45))_e5_(buf,45);
             _e5_(buf,93);
             var fmt=rest$19,ign_flag=0;
             continue a}
          case 21:
           var rest$20=fmt[2],counter=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           switch(counter)
            {case 0:var _xu_=108;break;
             case 1:var _xu_=110;break;
             default:var _xu_=78}
           _e5_(buf,_xu_);
           var fmt=rest$20,ign_flag=0;
           continue;
          case 22:
           var rest$21=fmt[1];
           _e5_(buf,37);
           _e$_(buf,ign_flag);
           _fj_(buf,cst_0c);
           var fmt=rest$21,ign_flag=0;
           continue;
          case 23:
           var
            rest$22=fmt[2],
            ign=fmt[1],
            match$1=_e1_(ign,rest$22),
            fmt$0=match$1[1],
            fmt=fmt$0,
            ign_flag=1;
           continue;
          default:
           var rest$23=fmt[3],arity=fmt[1],_xw_=_fl_(arity),_xv_=1;
           if(! (_xw_ < 1))
            {var i$8=_xv_;
             for(;;)
              {_e5_(buf,37);
               _e$_(buf,ign_flag);
               _e5_(buf,63);
               var _xx_=i$8 + 1 | 0;
               if(_xw_ !== i$8){var i$8=_xx_;continue}
               break}}
           var fmt=rest$23,ign_flag=0;
           continue}}
    function _fn_(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,_fn_(rest)];
         case 1:var rest$0=param[1];return [1,_fn_(rest$0)];
         case 2:var rest$1=param[1];return [2,_fn_(rest$1)];
         case 3:var rest$2=param[1];return [3,_fn_(rest$2)];
         case 4:var rest$3=param[1];return [4,_fn_(rest$3)];
         case 5:var rest$4=param[1];return [5,_fn_(rest$4)];
         case 6:var rest$5=param[1];return [6,_fn_(rest$5)];
         case 7:var rest$6=param[1];return [7,_fn_(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,_fn_(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,_fn_(rest$8)];
         case 10:var rest$9=param[1];return [10,_fn_(rest$9)];
         case 11:var rest$10=param[1];return [11,_fn_(rest$10)];
         case 12:var rest$11=param[1];return [12,_fn_(rest$11)];
         case 13:var rest$12=param[1];return [13,_fn_(rest$12)];
         default:var rest$13=param[1];return [14,_fn_(rest$13)]}}
    function _fo_(param)
     {if(typeof param === "number")
       {var
         _w7_=function(param){return 0},
         _w8_=function(param){return 0},
         _w9_=function(param){return 0};
        return [0,function(param){return 0},_w9_,_w8_,_w7_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=_fo_(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _w__=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_w__,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=_fo_(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _w$_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _w$_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=_fo_(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _xa_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _xa_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=_fo_(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _xb_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _xb_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=_fo_(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _xc_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _xc_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=_fo_(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _xd_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _xd_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=_fo_(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _xe_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _xe_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=_fo_(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _xf_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _xf_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=_fo_(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _xg_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _xg_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=_fo_(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=_fp_(_fn_(ty1),ty2),
           match$9=_fo_(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _xh_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _xi_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _xj_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _xj_,
                  _xi_,
                  _xh_];
         case 10:
          var
           rest$9=param[1],
           match$10=_fo_(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _xk_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _xk_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=_fo_(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _xl_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _xl_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=_fo_(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _xm_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _xm_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=_fo_(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _xn_=function(param){caml_call1(de$12,0);return 0},
           _xo_=function(param){caml_call1(ed$12,0);return 0},
           _xp_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _xp_,
                  _xo_,
                  _xn_];
         default:
          var
           rest$13=param[1],
           match$14=_fo_(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _xq_=function(param){caml_call1(de$13,0);return 0},
           _xr_=function(param){caml_call1(ed$13,0);return 0},
           _xs_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _xs_,
                  _xr_,
                  _xq_]}}
    function _fp_(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_fq_]}
      else
       switch(ty1[0])
        {case 0:
          var _wO_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,_fp_(_wO_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _wP_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,_fp_(_wP_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _wQ_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,_fp_(_wQ_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _wR_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,_fp_(_wR_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _wS_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,_fp_(_wS_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _wT_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,_fp_(_wT_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _wU_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,_fp_(_wU_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _wV_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,_fp_(_wV_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _wW_=ty1[2],_wX_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_wY_=_fp_(_wW_,rest2$7);
              return [8,_fp_(_wX_,ty2),_wY_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_fz_];
          break;
         case 9:
          var _wZ_=ty1[3],_w0_=ty1[2],_w1_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=_fp_(_fn_(_w0_),ty21),
               match$0=_fo_(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_w1_,ty22,_fp_(_wZ_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_fA_];
          break;
         case 10:
          var _w2_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,_fp_(_w2_,rest2$9)]}
          throw [0,Assert_failure,_fB_];
         case 11:
          var _w3_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,_fp_(_w3_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_fC_];
          break;
         case 12:
          var _w4_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,_fp_(_w4_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_fD_];
          break;
         case 13:
          var _w5_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,_fp_(_w5_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_fE_];
          break;
         default:
          var _w6_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,_fp_(_w6_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_fF_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ft_];
        case 1:throw [0,Assert_failure,_fu_];
        case 2:throw [0,Assert_failure,_fv_];
        case 3:throw [0,Assert_failure,_fw_];
        case 4:throw [0,Assert_failure,_fx_];
        case 5:throw [0,Assert_failure,_fr_];
        case 6:throw [0,Assert_failure,_fs_];
        default:throw [0,Assert_failure,_fy_]}}
    function _fI_(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function _fH_(arity,fmtty)
     {if(arity){var arity$0=arity[1];return [12,_fH_(arity$0,fmtty)]}
      return fmtty}
    function _fG_(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,_fG_(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,_fG_(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return _fI_(pad,[1,_fG_(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return _fI_(pad$0,[1,_fG_(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=_fG_(rest$3),
            prec_ty=_fJ_(prec,[2,ty_rest]);
           return _fI_(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=_fG_(rest$4),
            prec_ty$0=_fJ_(prec$0,[3,ty_rest$0]);
           return _fI_(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=_fG_(rest$5),
            prec_ty$1=_fJ_(prec$1,[4,ty_rest$1]);
           return _fI_(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=_fG_(rest$6),
            prec_ty$2=_fJ_(prec$2,[5,ty_rest$2]);
           return _fI_(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=_fG_(rest$7),
            prec_ty$3=_fJ_(prec$3,[6,ty_rest$3]);
           return _fI_(pad$5,prec_ty$3);
          case 9:var rest$8=fmtty$0[1];return [7,_fG_(rest$8)];
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];return [8,ty,_fG_(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,_fG_(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,_fG_(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,_fG_(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var rest$13=fmtty$0[2],fmting_gen=fmtty$0[1],_wM_=_fG_(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_wN_=_fG_(fmt);
           else
            var match$0=fmting_gen[1],fmt$0=match$0[1],_wN_=_fG_(fmt$0);
           return _b_(_wN_,_wM_);
          case 19:var rest$14=fmtty$0[1];return [13,_fG_(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,_fG_(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,_fG_(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,_fG_(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:return [14,_fG_(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$5=ign[2];return _b_(fmtty$5,_fG_(rest$18));
              case 9:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return _fH_(arity,_fG_(rest$19))}}
    function _fJ_(prec,fmtty)
     {return typeof prec === "number"?0 === prec?fmtty:[2,fmtty]:fmtty}
    var _fK_=caml_set_oo_id([248,cst_CamlinternalFormat_Type_mismatch,0]);
    function _fL_(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw _fK_}}
    function _fM_(pad,prec,fmtty)
     {var match=_fL_(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _wL_=match[2];
        if(typeof _wL_ !== "number" && 2 === _wL_[0])
         {var rest$0=_wL_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw _fK_}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function _fN_(fmt,fmtty)
     {var _wK_=_fO_(fmt,fmtty);
      if(typeof _wK_[2] === "number"){var fmt$0=_wK_[1];return fmt$0}
      throw _fK_}
    function _fP_(ign,fmt,fmtty)
     {var match=_fO_(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function _fO_(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=_fO_(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=_fO_(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _wi_=_fL_(pad,fmtty),
           _wj_=_wi_[2],
           _wk_=_wi_[1];
          if(typeof _wj_ !== "number" && 1 === _wj_[0])
           {var
             fmtty_rest$1=_wj_[1],
             match$1=_fO_(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_wk_,fmt$2],fmtty$2]}
          throw _fK_;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _wl_=_fL_(pad$0,fmtty),
           _wm_=_wl_[2],
           _wn_=_wl_[1];
          if(typeof _wm_ !== "number" && 1 === _wm_[0])
           {var
             fmtty_rest$2=_wm_[1],
             match$2=_fO_(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_wn_,fmt$3],fmtty$3]}
          throw _fK_;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _wo_=_fM_(pad$1,prec,fmtty),
           _wp_=_wo_[3],
           _wq_=_wo_[2],
           _wr_=_wo_[1];
          if(typeof _wp_ !== "number" && 2 === _wp_[0])
           {var
             fmtty_rest$3=_wp_[1],
             match$3=_fO_(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_wr_,_wq_,fmt$4],fmtty$4]}
          throw _fK_;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _ws_=_fM_(pad$2,prec$0,fmtty),
           _wt_=_ws_[3],
           _wu_=_ws_[2],
           _wv_=_ws_[1];
          if(typeof _wt_ !== "number" && 3 === _wt_[0])
           {var
             fmtty_rest$4=_wt_[1],
             match$4=_fO_(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_wv_,_wu_,fmt$5],fmtty$5]}
          throw _fK_;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _ww_=_fM_(pad$3,prec$1,fmtty),
           _wx_=_ww_[3],
           _wy_=_ww_[2],
           _wz_=_ww_[1];
          if(typeof _wx_ !== "number" && 4 === _wx_[0])
           {var
             fmtty_rest$5=_wx_[1],
             match$5=_fO_(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_wz_,_wy_,fmt$6],fmtty$6]}
          throw _fK_;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _wA_=_fM_(pad$4,prec$2,fmtty),
           _wB_=_wA_[3],
           _wC_=_wA_[2],
           _wD_=_wA_[1];
          if(typeof _wB_ !== "number" && 5 === _wB_[0])
           {var
             fmtty_rest$6=_wB_[1],
             match$6=_fO_(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_wD_,_wC_,fmt$7],fmtty$7]}
          throw _fK_;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _wE_=_fM_(pad$5,prec$3,fmtty),
           _wF_=_wE_[3],
           _wG_=_wE_[2],
           _wH_=_wE_[1];
          if(typeof _wF_ !== "number" && 6 === _wF_[0])
           {var
             fmtty_rest$7=_wF_[1],
             match$7=_fO_(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_wH_,_wG_,fmt$8],fmtty$8]}
          throw _fK_;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=_fO_(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=_fO_(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=_fO_(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=_fO_(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))throw _fK_;
            var
             match$12=_fO_(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _wI_=[0,_a_(sub_fmtty1)];
            if(caml_notequal([0,_a_(sub_fmtty$1)],_wI_))throw _fK_;
            var
             match$13=_fO_(fmt_rest$13,_a_(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=_fO_(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=_fO_(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=_fO_(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=_fO_(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=_fO_(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=_fO_(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=_fO_(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=_fO_(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=_fO_(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=_fO_(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return _fP_(ign,rest,fmtty);
             case 1:return _fP_(ign,rest,fmtty);
             case 2:return _fP_(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=_fO_(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw _fK_;
             default:return _fP_(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return _fP_(ign,rest,fmtty);
             case 1:return _fP_(ign,rest,fmtty);
             case 2:return _fP_(ign,rest,fmtty);
             case 3:return _fP_(ign,rest,fmtty);
             case 4:return _fP_(ign,rest,fmtty);
             case 5:return _fP_(ign,rest,fmtty);
             case 6:return _fP_(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return _fP_([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _wJ_=_fQ_(sub_fmtty$3,rest,fmtty),
               match$27=_wJ_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_wJ_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return _fP_(ign,rest,fmtty);
             default:return _fP_(ign,rest,fmtty)}
         }
      throw _fK_}
    function _fQ_(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,_fO_(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=_fQ_(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=_fQ_(sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=_fQ_(sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=_fQ_(sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=_fQ_(sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=_fQ_(sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=_fQ_(sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=_fQ_(sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))throw _fK_;
            var
             match$8=_fQ_(sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _wg_=[0,_a_(sub1_fmtty)];
            if(caml_notequal([0,_a_(sub1_fmtty$0)],_wg_))throw _fK_;
            var _wh_=[0,_a_(sub2_fmtty$1)];
            if(caml_notequal([0,_a_(sub2_fmtty$2)],_wh_))throw _fK_;
            var
             sub_fmtty$0=_fp_(_fn_(sub1_fmtty),sub2_fmtty$1),
             match$9=_fo_(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=_fQ_(_a_(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,_fn_(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=_fQ_(sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=_fQ_(sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=_fQ_(sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=_fQ_(sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw _fK_}
    function _fR_(fmt,fmtty){return _fN_(fmt,_a_(_fn_(fmtty)))}
    function _fS_(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _wf_=2 === padty$0?48:32,res=make(width$0,_wf_);
      switch(padty$0)
       {case 0:_aM_(str,0,res,0,len);break;
        case 1:_aM_(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_string_set(res,0,caml_string_get(str,0));
             _aM_(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(! switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_string_set(res,1,caml_string_get(str,1));
                _aM_(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(! switch$2)_aM_(str,0,res,width$0 - len | 0,len)}}
      return res}
    function _fT_(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(! switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_string_set(res$1,1,caml_string_get(str,1));
                   _aM_(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_string_set(res$0,0,c);
            _aM_(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(! switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         _aM_(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function _fU_(str){return _bf_(_bm_(str),_fV_)}
    function _fW_(iconv,c)
     {switch(iconv)
       {case 0:var seps=_fX_;break;
        case 1:var seps=_fY_;break;
        case 2:var seps=_fZ_;break;
        case 3:var seps=_f0_;break;
        case 4:var seps=_f1_;break;
        case 5:var seps=_f2_;break;
        case 6:var seps=_f3_;break;
        case 7:var seps=_f4_;break;
        case 8:var seps=_f5_;break;
        case 9:var seps=_f6_;break;
        case 10:var seps=_f7_;break;
        case 11:var seps=_f8_;break;
        default:var seps=_f9_}
      return _bf_(_bb_(1,c),seps)}
    function _f__(iconv,n)
     {switch(iconv)
       {case 0:var _we_=cst_d$2;break;
        case 1:var _we_=cst_d$3;break;
        case 2:var _we_=cst_d$4;break;
        case 3:var _we_=cst_i$0;break;
        case 4:var _we_=cst_i$1;break;
        case 5:var _we_=cst_i$2;break;
        case 6:var _we_=cst_x;break;
        case 7:var _we_=cst_x$0;break;
        case 8:var _we_=cst_X;break;
        case 9:var _we_=cst_X$0;break;
        case 10:var _we_=cst_o;break;
        case 11:var _we_=cst_o$0;break;
        default:var _we_=cst_u}
      return caml_format_int(_we_,n)}
    function _f$_(iconv,n){return caml_format_int(_fW_(iconv,108),n)}
    function _ga_(iconv,n){return caml_format_int(_fW_(iconv,110),n)}
    function _gb_(iconv,n){return caml_int64_format(_fW_(iconv,76),n)}
    function _gc_(fconv,prec$0,x)
     {var prec$1=abs(prec$0);
      if(15 === fconv)
       var _wb_=cst_12g$0;
      else
       {var prec=abs(prec$1),symb=_e9_(fconv),buf=_e3_(16);
        _e5_(buf,37);
        _ff_(buf,fconv);
        _e5_(buf,46);
        _e6_(buf,caml_new_string("" + prec));
        _e5_(buf,symb);
        var _wb_=_e7_(buf)}
      var str=caml_format_float(_wb_,x);
      if(15 === fconv)
       {var
         len=caml_ml_string_length(str),
         match$0=runtime.caml_classify_float(x);
        if(3 === match$0)return x < 0?cst_neg_infinity:cst_infinity;
        if(4 <= match$0)return cst_nan;
        var i=0;
        for(;;)
         {if(i === len)
           var _wd_=0;
          else
           {var
             match=caml_string_get(str,i),
             _wc_=match - 46 | 0,
             switch$0=
              23 < _wc_ >>> 0?55 === _wc_?1:0:21 < (_wc_ - 1 | 0) >>> 0?1:0;
            if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            var _wd_=1}
          return _wd_?str:_j_(str,cst$27)}}
      return str}
    function _ge_(fmtty){var buf=_e3_(16);_fk_(buf,fmtty);return _e7_(buf)}
    function _gi_(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return _gf_(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=_fT_(p,caml_call2(trans,iconv,x));
                    return _gf_(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=_fT_(p,caml_call2(trans,iconv,x));
          return _gf_(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _v__=pad[2],_v$_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=_fS_(_v$_,_v__,caml_call2(trans,iconv,x));
                      return _gf_(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var str=_fS_(_v$_,_v__,_fT_(p,caml_call2(trans,iconv,x)));
                      return _gf_(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var str=_fS_(_v$_,_v__,_fT_(p$0,caml_call2(trans,iconv,x)));
            return _gf_(k,o,[4,acc,str],fmt)}}
        var _wa_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=_fS_(_wa_,w,caml_call2(trans,iconv,x));
                    return _gf_(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var str=_fS_(_wa_,w,_fT_(p,caml_call2(trans,iconv,x)));
                    return _gf_(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var str=_fS_(_wa_,w,_fT_(p$1,caml_call2(trans,iconv,x)));
          return _gf_(k,o,[4,acc,str],fmt)}}}
    function _gh_(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return _gf_(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,_fS_(padty,width,caml_call1(trans,x))];
            return _gf_(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,_fS_(padty$0,w,caml_call1(trans,x))];
          return _gf_(k,o,new_acc,fmt)}}}
    function _lr_(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return _gf_(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var new_acc=[4,acc$0,_bf_(_aA_(c),_gd_)];
             return _gf_(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return _gh_(k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return _gh_(k$0,o,acc$0,rest$2,pad$0,_fU_);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return _gi_(k$0,o,acc$0,rest$3,pad$1,prec,_f__,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return _gi_(k$0,o,acc$0,rest$4,pad$2,prec$0,_f$_,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return _gi_(k$0,o,acc$0,rest$5,pad$3,prec$1,_ga_,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return _gi_(k$0,o,acc$0,rest$6,pad$4,prec$2,_gb_,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=_gc_(fconv,_e2_,x);
                         return _gf_(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=_gc_(fconv,p,x);
                         return _gf_(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=_gc_(fconv,p,x);
               return _gf_(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _v7_=pad$5[2],_v8_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var str=_gc_(fconv,_e2_,x),str$0=_fS_(_v8_,_v7_,str);
                           return _gf_(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=_fS_(_v8_,_v7_,_gc_(fconv,p,x));
                           return _gf_(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=_fS_(_v8_,_v7_,_gc_(fconv,p$0,x));
                 return _gf_(k$0,o,[4,acc$0,str],rest$7)}}
             var _v9_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var str=_gc_(fconv,_e2_,x),str$0=_fS_(_v9_,w,str);
                         return _gf_(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=_fS_(_v9_,w,_gc_(fconv,p,x));
                         return _gf_(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=_fS_(_v9_,w,_gc_(fconv,p$1,x));
               return _gf_(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {return _gf_(k$0,o,[4,acc$0,string_of_bool(b)],rest$8)};
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],ty=_ge_(sub_fmtty);
           return function(str){return _gf_(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return _gf_(k$0,o,acc$0,_c_(_fR_(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return _gf_
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return _gf_(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _v5_=fmt$0[1];
           if(0 === _v5_[0])
            {var
              rest$13=fmt$0[2],
              match=_v5_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return _gf_(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_v5_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return _gf_(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_gk_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,cst_Printf_bad_conversion];
           return function(param){return _gf_(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(cst_u$0,n)];
             return _gf_(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return _gf_(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return _lp_(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return _lp_(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return _lp_(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 3:throw [0,Assert_failure,_gl_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return _lp_(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return _lp_(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return _lp_(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return _lp_(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return _lp_(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return _lp_(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return _lp_(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return _lp_(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return _lp_(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return _lq_(counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (_lq_,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return _lp_(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return _lp_(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return(_lp_,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _v6_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return _lo_(counter$0,k$0,o,acc$0,rest$19,arity,_v6_)}
           return caml_trampoline_return
                   (_lo_,[0,k$0,o,acc$0,rest$19,arity,_v6_])}}
    function _lq_(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;return _lp_(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(_lp_,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return _gg_(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=_fp_(_fn_(ty1),ty2);
          return function(param){return _gg_(k,o,acc,_b_(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_v4_){return _gg_(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return _gg_(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_gm_];
         default:throw [0,Assert_failure,_gn_]}}
    function _lp_(counter,k,o,acc,fmt)
     {var _v3_=[8,acc,cst_Printf_bad_conversion$0];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;return _lr_(counter$0,k,o,_v3_,fmt)}
      return caml_trampoline_return(_lr_,[0,k,o,_v3_,fmt])}
    function _lo_(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x){return _gj_(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _v2_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;return _lr_(counter$0,k,o,_v2_,rest)}
      return caml_trampoline_return(_lr_,[0,k,o,_v2_,rest])}
    function _gf_(k,o,acc,fmt){return caml_trampoline(_lr_(0,k,o,acc,fmt))}
    function _gg_(k,o,acc,fmtty,fmt)
     {return caml_trampoline(_lq_(0,k,o,acc,fmtty,fmt))}
    function _gj_(k,o,acc,rest,arity,f)
     {return caml_trampoline(_lo_(0,k,o,acc,rest,arity,f))}
    function _go_(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1],s=_fg_(fmting_lit);
           _go_(o,p);
           return output_string(o,s);
          case 1:
           var _v0_=acc$0[2],_v1_=acc$0[1];
           if(0 === _v0_[0])
            {var acc$1=_v0_[1];
             _go_(o,_v1_);
             output_string(o,cst$28);
             var acc$0=acc$1;
             continue}
           var acc$2=_v0_[1];
           _go_(o,_v1_);
           output_string(o,cst$29);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];_go_(o,p$2);return caml_call1(f,o);
          case 7:var p$3=acc$0[1];_go_(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];_go_(o,p$4);return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           _go_(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           _go_(o,p$1);
           return caml_ml_output_char(o,c)}}
    function _gp_(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1],s=_fg_(fmting_lit);
           _gp_(b,p);
           return _eP_(b,s);
          case 1:
           var _vY_=acc$0[2],_vZ_=acc$0[1];
           if(0 === _vY_[0])
            {var acc$1=_vY_[1];
             _gp_(b,_vZ_);
             _eP_(b,cst$30);
             var acc$0=acc$1;
             continue}
           var acc$2=_vY_[1];
           _gp_(b,_vZ_);
           _eP_(b,cst$31);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];_gp_(b,p$2);return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];_gp_(b,p$3);return invalid_arg(msg);
          case 2:
          case 4:var s$0=acc$0[2],p$0=acc$0[1];_gp_(b,p$0);return _eP_(b,s$0);
          default:var c=acc$0[2],p$1=acc$0[1];_gp_(b,p$1);return _eM_(b,c)}}
    function _gq_(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1],s=_fg_(fmting_lit);
           _gq_(b,p);
           return _eP_(b,s);
          case 1:
           var _vW_=acc$0[2],_vX_=acc$0[1];
           if(0 === _vW_[0])
            {var acc$1=_vW_[1];
             _gq_(b,_vX_);
             _eP_(b,cst$32);
             var acc$0=acc$1;
             continue}
           var acc$2=_vW_[1];
           _gq_(b,_vX_);
           _eP_(b,cst$33);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           _gq_(b,p$2);
           return _eP_(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];_gq_(b,p$3);return invalid_arg(msg);
          case 2:
          case 4:var s$0=acc$0[2],p$0=acc$0[1];_gq_(b,p$0);return _eP_(b,s$0);
          default:var c=acc$0[2],p$1=acc$0[1];_gq_(b,p$1);return _eM_(b,c)}}
    function _gr_(param)
     {var fmt=param[1],buf=_eC_(256);
      function k(param,acc){_gq_(buf,acc);return failwith(_eD_(buf))}
      return _gf_(k,0,0,fmt)}
    function _gs_(str)
     {if(caml_string_equal(str,cst$34))return _gt_;
      var len=caml_ml_string_length(str);
      function invalid_box(param){return caml_call1(_gr_(_gu_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match)if(32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var
           match=caml_string_get(str,j$0),
           switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=_be_(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _vU_=caml_int_of_string(_be_(str,nstart,nend - nstart | 0)),
          indent=_vU_}
       catch(_vV_)
        {_vV_ = caml_wrap_exception(_vV_);
         if(_vV_[1] !== Failure)throw _vV_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      if(caml_string_notequal(box_name,cst$35))
       if(caml_string_notequal(box_name,cst_b$0))
        if(caml_string_notequal(box_name,cst_h))
         if(caml_string_notequal(box_name,cst_hov))
          if(caml_string_notequal(box_name,cst_hv))
           if(caml_string_notequal(box_name,cst_v))
            var box_type=invalid_box(0),switch$0=1;
           else
            var box_type=1,switch$0=1;
          else
           var box_type=2,switch$0=1;
         else
          var box_type=3,switch$0=1;
        else
         var box_type=0,switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var box_type=4;
      return [0,indent,box_type]}
    function _gv_(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function _gw_(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=0 === prec?[0,0,fmt]:[0,1,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function _gx_(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(_gr_(_gy_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,cst_unexpected_end_of_format)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(_gr_(_gz_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(_gr_(_gA_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,_be_(str,lit_start,size),fmt]]}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _vT_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_vT_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_gM_;
            else
             {var c=caml_string_get(str,str_ind$0);
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  var switch$0=0;
                 else
                  switch(switcher)
                   {case 0:
                     var
                      match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 1:var switch$0=0;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]],
                      switch$0=1}}
               else
                if(91 <= c)
                 {var switcher$0=c - 91 | 0;
                  switch(switcher$0)
                   {case 0:
                     var
                      match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 1:var switch$0=0;break;
                    default:
                     var
                      match$4=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$3=match$4[1],
                      match$0=[0,[17,0,fmt_rest$3]],
                      switch$0=1}}
                else
                 var switch$0=0;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]],
                 switch$0=1;
               else
                if(32 <= c)
                 {var switcher$1=c - 32 | 0;
                  switch(switcher$1)
                   {case 0:
                     var
                      match$6=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$5=match$6[1],
                      match$0=[0,[17,_gN_,fmt_rest$5]],
                      switch$0=1;
                     break;
                    case 5:
                     if((str_ind$0 + 1 | 0) < end_ind)
                      if(37 === caml_string_get(str,str_ind$0 + 1 | 0))
                       var
                        match$7=parse(str_ind$0 + 2 | 0,end_ind),
                        fmt_rest$6=match$7[1],
                        match$0=[0,[17,6,fmt_rest$6]],
                        switch$0=1,
                        switch$1=0;
                      else
                       var switch$1=1;
                     else
                      var switch$1=1;
                     if(switch$1)
                      var
                       match$8=parse(str_ind$0,end_ind),
                       fmt_rest$7=match$8[1],
                       match$0=[0,[12,64,fmt_rest$7]],
                       switch$0=1;
                     break;
                    case 12:
                     var
                      match$9=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$8=match$9[1],
                      match$0=[0,[17,_gO_,fmt_rest$8]],
                      switch$0=1;
                     break;
                    case 14:
                     var
                      match$10=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$9=match$10[1],
                      match$0=[0,[17,4,fmt_rest$9]],
                      switch$0=1;
                     break;
                    case 27:
                     var
                      match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 28:
                     var
                      match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 31:
                     var
                      match$11=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$10=match$11[1],
                      match$0=[0,[17,2,fmt_rest$10]],
                      switch$0=1;
                     break;
                    case 32:
                     var
                      match$12=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$11=match$12[1],
                      match$0=[0,[17,5,fmt_rest$11]],
                      switch$0=1;
                     break;
                    default:var switch$0=0}}
                else
                 var switch$0=0;
              if(! switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,sharp,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         sharp_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_sharp(param){sharp_used[1] = 1;return sharp}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,cst_0$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_gG_
                      :incompatible_flag(pct_ind,str_ind,symb,cst_0$1)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,cst$36);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,cst_0$2)}
            return incompatible_flag(pct_ind,str_ind,c,cst$37)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        if(124 <= symb)
         var switch$0=0;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]],
             switch$0=1;
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=_fG_(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[8,get_pad_opt(95),sub_fmtty],
              _vq_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _vq_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_vq_,switch$0=1;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind),switch$0=1;break;
           case 67:
            var
             match$11=parse(str_ind,end_ind),
             fmt_rest$9=match$11[1],
             _vs_=get_ign(0)?[0,[23,1,fmt_rest$9]]:[0,[1,fmt_rest$9]],
             fmt_result=_vs_,
             switch$0=1;
            break;
           case 78:
            var
             match$15=parse(str_ind,end_ind),
             fmt_rest$13=match$15[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$5=[10,counter$0],_vy_=[0,[23,ignored$5,fmt_rest$13]];
            else
             var _vy_=[0,[21,counter$0,fmt_rest$13]];
            var fmt_result=_vy_,switch$0=1;
            break;
           case 83:
            var
             pad$4=check_no_0(symb,get_padprec(0)),
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1];
            if(get_ign(0))
             var
              ignored$6=[1,get_padprec_opt(95)],
              _vz_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var
              match$17=_gv_(pad$4,fmt_rest$14),
              fmt_rest$15=match$17[2],
              pad$5=match$17[1],
              _vz_=[0,[3,pad$5,fmt_rest$15]];
            var fmt_result=_vz_,switch$0=1;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set=_eV_(0),
             add_char=function(c){return _eW_(char_set,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {_eW_(char_set,char_of_int(i));
                    var _vS_=i + 1 | 0;
                    if(c !== i){var i=_vS_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind){return caml_call2(_gr_(_gR_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _vR_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_vR_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_vR_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0);
                  if(46 <= c$1)
                   if(64 === c$1)
                    var switch$0=0;
                   else
                    {if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}
                     var switch$0=1}
                  else
                   if(37 === c$1)
                    var switch$0=0;
                   else
                    {if(45 <= c$1)
                      {var str_ind$2=str_ind$0 + 1 | 0;
                       if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                       var c$2=caml_string_get(str,str_ind$2);
                       if(37 === c$2)
                        {if((str_ind$2 + 1 | 0) === end_ind)
                          unexpected_end_of_format(end_ind);
                         var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                         if(37 !== c$3)
                          if(64 !== c$3)return fail_single_percent(str_ind$2);
                         add_range(c$0,c$3);
                         var _vP_=str_ind$2 + 2 | 0;
                         if(counter < 50)
                          {var counter$2=counter + 1 | 0;
                           return parse_char_set_content(counter$2,_vP_,end_ind)}
                         return caml_trampoline_return
                                 (parse_char_set_content,[0,_vP_,end_ind])}
                       if(93 === c$2)
                        {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                       add_range(c$0,c$2);
                       var _vQ_=str_ind$2 + 1 | 0;
                       if(counter < 50)
                        {var counter$1=counter + 1 | 0;
                         return parse_char_set_content(counter$1,_vQ_,end_ind)}
                       return caml_trampoline_return
                               (parse_char_set_content,[0,_vQ_,end_ind])}
                     var switch$0=1}
                  if(! switch$0)
                   if(37 === c$0)
                    {add_char(c$1);
                     var _vO_=str_ind$0 + 1 | 0;
                     if(counter < 50)
                      {var counter$0=counter + 1 | 0;
                       return parse_char_set_content(counter$0,_vO_,end_ind)}
                     return caml_trampoline_return
                             (parse_char_set_content,[0,_vO_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             match$31=caml_string_get(str,str_ind),
             match$32=94 === match$31?[0,str_ind + 1 | 0,1]:[0,str_ind,0],
             reverse=match$32[2],
             str_ind$0=match$32[1];
            if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$0),
             next_ind=parse_char_set_after_char(str_ind$0 + 1 | 0,end_ind,c),
             char_set$0=_eX_(char_set),
             char_set$1=reverse?_eY_(char_set$0):char_set$0,
             match$21=parse(next_ind,end_ind),
             fmt_rest$18=match$21[1];
            if(get_ign(0))
             var
              ignored$8=[9,get_pad_opt(95),char_set$1],
              _vG_=[0,[23,ignored$8,fmt_rest$18]];
            else
             var _vG_=[0,[20,get_pad_opt(91),char_set$1,fmt_rest$18]];
            var fmt_result=_vG_,switch$0=1;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$19=match$22[1],
             fmt_result=[0,[15,fmt_rest$19]],
             switch$0=1;
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$20=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _vH_=get_ign(0)?[0,[23,4,fmt_rest$20]]:[0,[22,fmt_rest$20]],
                _vI_=_vH_;
              else
               var
                _vI_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$20)
                  :invalid_format_message
                    (str_ind,
                     cst_non_zero_widths_are_unsupported_for_c_conversions);
              var _vJ_=_vI_}
            else
             var _vJ_=char_format(fmt_rest$20);
            var fmt_result=_vJ_,switch$0=1;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$21=match$25[1],
             _vK_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[19,fmt_rest$21]],
             fmt_result=_vK_,
             switch$0=1;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$22=match$26[1];
            if(get_ign(0))
             var
              ignored$9=[0,get_padprec_opt(95)],
              _vL_=[0,[23,ignored$9,fmt_rest$22]];
            else
             var
              match$27=_gv_(pad$9,fmt_rest$22),
              fmt_rest$23=match$27[2],
              pad$10=match$27[1],
              _vL_=[0,[2,pad$10,fmt_rest$23]];
            var fmt_result=_vL_,switch$0=1;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$24=match$28[1],
             fmt_result=[0,[16,fmt_rest$24]],
             switch$0=1;
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$25=match$30[1],
             sub_fmtty$0=_fG_(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$10=[7,get_pad_opt(95),sub_fmtty$0],
              _vM_=[0,[23,ignored$10,fmt_rest$25]];
            else
             var _vM_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$25]];
            var fmt_result=_vM_,switch$0=1;
            break;
           case 66:
           case 98:
            var
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1],
             _vr_=get_ign(0)?[0,[23,2,fmt_rest$8]]:[0,[9,fmt_rest$8]],
             fmt_result=_vr_,
             switch$0=1;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]],
             switch$0=1;
            break;
           case 76:
           case 108:
           case 110:
            if(str_ind === end_ind)
             var switch$1=1;
            else
             {var symb$0=caml_string_get(str,str_ind),_vN_=symb$0 - 88 | 0;
              if(32 < _vN_ >>> 0)
               var switch$2=0;
              else
               switch(_vN_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _vx_=1,switch$2=1;break;
                 default:var switch$2=0}
              if(! switch$2)var _vx_=0;
              if(_vx_)var switch$0=0,switch$1=0;else var switch$1=1}
            if(switch$1)
             {var match$14=parse(str_ind,end_ind),fmt_rest$12=match$14[1];
              if(108 <= symb)
               if(111 <= symb)
                var switch$3=0;
               else
                {var switcher$0=symb - 108 | 0;
                 switch(switcher$0)
                  {case 0:var counter=0,switch$3=1;break;
                   case 1:var switch$3=0;break;
                   default:var counter=1,switch$3=1}}
              else
               if(76 === symb)var counter=2,switch$3=1;else var switch$3=0;
              if(! switch$3)throw [0,Assert_failure,_gV_];
              if(get_ign(0))
               var ignored$4=[10,counter],_vw_=[0,[23,ignored$4,fmt_rest$12]];
              else
               var _vw_=[0,[21,counter,fmt_rest$12]];
              var fmt_result=_vw_,switch$0=1}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var fmt_result=caml_call3(_gr_(_gK_),str,pct_ind,symb),switch$0=1;
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _vA_=get_space(0),
             _vB_=get_sharp(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_vB_,_vA_,symb),
             match$18=parse(str_ind,end_ind),
             fmt_rest$16=match$18[1];
            if(get_ign(0))
             var
              ignored$7=[2,iconv$2,get_pad_opt(95)],
              _vC_=[0,[23,ignored$7,fmt_rest$16]];
            else
             {var pad$6=get_pad(0),match$19=get_prec(0);
              if(typeof match$19 === "number")
               if(0 === match$19)
                var pad$7=pad$6,switch$4=1;
               else
                var switch$4=0;
              else
               var switch$4=0;
              if(! switch$4)
               if(typeof pad$6 === "number")
                var pad$7=0;
               else
                if(0 === pad$6[0])
                 {if(2 <= pad$6[1])
                   var
                    n=pad$6[2],
                    _vD_=
                     legacy_behavior$0
                      ?[0,1,n]
                      :incompatible_flag(pct_ind,str_ind,48,cst_precision$1),
                    _vE_=_vD_;
                  else
                   var _vE_=pad$6;
                  var pad$7=_vE_}
                else
                 var
                  _vF_=
                   2 <= pad$6[1]
                    ?legacy_behavior$0
                      ?_gL_
                      :incompatible_flag(pct_ind,str_ind,48,cst_precision$2)
                    :pad$6,
                  pad$7=_vF_;
              var
               match$20=_gw_(pad$7,get_prec(0),fmt_rest$16),
               fmt_rest$17=match$20[3],
               prec$4=match$20[2],
               pad$8=match$20[1],
               _vC_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$17]]}
            var fmt_result=_vC_,switch$0=1;
            break;
           case 69:
           case 70:
           case 71:
           case 101:
           case 102:
           case 103:
            var
             space$1=get_space(0),
             plus$2=get_plus(0),
             plus$3=plus$2,
             space$2=space$1;
            for(;;)
             {if(0 === plus$3)
               if(0 === space$2)
                {if(72 <= symb)
                  {var switcher$1=symb - 101 | 0;
                   if(2 < switcher$1 >>> 0)
                    var switch$5=0;
                   else
                    switch(switcher$1)
                     {case 0:var fconv=3,switch$5=1;break;
                      case 1:var fconv=0,switch$5=1;break;
                      default:var fconv=9,switch$5=1}}
                 else
                  if(69 <= symb)
                   {var switcher$2=symb - 69 | 0;
                    switch(switcher$2)
                     {case 0:var fconv=6,switch$5=1;break;
                      case 1:var fconv=15,switch$5=1;break;
                      default:var fconv=12,switch$5=1}}
                  else
                   var switch$5=0;
                 if(! switch$5)throw [0,Assert_failure,_gX_]}
               else
                {if(72 <= symb)
                  {var switcher$3=symb - 101 | 0;
                   if(2 < switcher$3 >>> 0)
                    var switch$6=0;
                   else
                    switch(switcher$3)
                     {case 0:var fconv=5,switch$6=1;break;
                      case 1:var fconv=2,switch$6=1;break;
                      default:var fconv=11,switch$6=1}}
                 else
                  if(69 <= symb)
                   {var switcher$4=symb - 69 | 0;
                    switch(switcher$4)
                     {case 0:var fconv=8,switch$6=1;break;
                      case 1:var switch$6=0;break;
                      default:var fconv=14,switch$6=1}}
                  else
                   var switch$6=0;
                 if(! switch$6)
                  {if(legacy_behavior$0){var space$2=0;continue}
                   var fconv=incompatible_flag(pct_ind,str_ind,symb,cst$48)}}
              else
               if(0 === space$2)
                {if(72 <= symb)
                  {var switcher$5=symb - 101 | 0;
                   if(2 < switcher$5 >>> 0)
                    var switch$7=0;
                   else
                    switch(switcher$5)
                     {case 0:var fconv=4,switch$7=1;break;
                      case 1:var fconv=1,switch$7=1;break;
                      default:var fconv=10,switch$7=1}}
                 else
                  if(69 <= symb)
                   {var switcher$6=symb - 69 | 0;
                    switch(switcher$6)
                     {case 0:var fconv=7,switch$7=1;break;
                      case 1:var switch$7=0;break;
                      default:var fconv=13,switch$7=1}}
                  else
                   var switch$7=0;
                 if(! switch$7)
                  {if(legacy_behavior$0){var plus$3=0;continue}
                   var fconv=incompatible_flag(pct_ind,str_ind,symb,cst$49)}}
               else
                {if(legacy_behavior$0){var space$2=0;continue}
                 var fconv=incompatible_flag(pct_ind,str_ind,32,cst$50)}
              var match$12=parse(str_ind,end_ind),fmt_rest$10=match$12[1];
              if(get_ign(0))
               {var match=get_prec(0);
                if(typeof match === "number")
                 var
                  _vt_=
                   0 === match?0:incompatible_flag(pct_ind,str_ind,95,cst$38);
                else
                 var ndec=match[1],_vt_=[0,ndec];
                var
                 ignored$3=[6,get_pad_opt(95),_vt_],
                 _vu_=[0,[23,ignored$3,fmt_rest$10]]}
              else
               var
                _vv_=get_prec(0),
                match$13=_gw_(get_pad(0),_vv_,fmt_rest$10),
                fmt_rest$11=match$13[3],
                prec$3=match$13[2],
                pad$3=match$13[1],
                _vu_=[0,[8,fconv,pad$3,prec$3,fmt_rest$11]];
              var fmt_result=_vu_,switch$0=1;
              break}
            break;
           default:var switch$0=0}
        if(! switch$0)
         {if(108 <= symb)
           if(111 <= symb)
            var switch$8=0;
           else
            {var switcher=symb - 108 | 0;
             switch(switcher)
              {case 0:
                var
                 _va_=caml_string_get(str,str_ind),
                 _vb_=get_space(0),
                 _vc_=get_sharp(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_vc_,_vb_,_va_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _vd_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _vf_=get_prec(0),
                  match$1=_gw_(get_pad(0),_vf_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _vd_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _ve_=_vd_,switch$9=1;
                break;
               case 1:var switch$8=0,switch$9=0;break;
               default:
                var
                 _vg_=caml_string_get(str,str_ind),
                 _vh_=get_space(0),
                 _vi_=get_sharp(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_vi_,_vh_,_vg_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _vj_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _vk_=get_prec(0),
                  match$3=_gw_(get_pad(0),_vk_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _vj_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _ve_=_vj_,switch$9=1}
             if(switch$9)var fmt_result=_ve_,switch$8=1}
          else
           if(76 === symb)
            {var
              _vl_=caml_string_get(str,str_ind),
              _vm_=get_space(0),
              _vn_=get_sharp(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_vn_,_vm_,_vl_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _vo_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _vp_=get_prec(0),
               match$5=_gw_(get_pad(0),_vp_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _vo_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_vo_,switch$8=1}
           else
            var switch$8=0;
          if(! switch$8)
           var fmt_result=caml_call3(_gr_(_gH_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _u3_=1 - plus_used[1],plus$0=_u3_?plus:_u3_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,cst$39);
          var _u4_=1 - sharp_used[1],sharp$0=_u4_?sharp:_u4_;
          if(sharp$0)incompatible_flag(pct_ind,str_ind,symb,cst$40);
          var _u5_=1 - space_used[1],space$0=_u5_?space:_u5_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,cst$41);
          var _u6_=1 - pad_used[1],_u7_=_u6_?caml_notequal([0,pad],_gI_):_u6_;
          if(_u7_)incompatible_flag(pct_ind,str_ind,symb,cst_padding$0);
          var
           _u8_=1 - prec_used[1],
           _u9_=_u8_?caml_notequal([0,prec],_gJ_):_u8_;
          if(_u9_)
           {var _u__=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_u__,cst_precision$0)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,cst$42)}
        var _u$_=1 - ign_used[1],ign$0=_u$_?ign:_u$_;
        if(ign$0)
         {var
           switch$10=
            38 <= symb
             ?44 === symb?0:64 === symb?0:1
             :33 === symb?0:37 <= symb?0:1,
           switch$11=switch$10?0:legacy_behavior$0?1:0;
          if(! switch$11)incompatible_flag(pct_ind,str_ind,symb,cst$43)}
        return fmt_result}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,sharp,space,ign,pad,match)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   sharp,
                   space,
                   ign,
                   pad,
                   match,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof match === "number")if(0 === match)return parse_conv(0);
          if(0 === minus)
           {if(typeof match === "number")return parse_conv(_gE_);
            var n=match[1];
            return parse_conv([0,1,n])}
          if(typeof match === "number")return parse_conv(_gF_);
          var n$0=match[1];
          return parse_conv([0,0,n$0])}
        return parse_conv(pad)}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,sharp,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       sharp,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            {var switcher=symb$0 - 42 | 0;
             switch(switcher)
              {case 0:
                return parse_after_precision
                        (pct_ind,
                         str_ind$0 + 1 | 0,
                         end_ind,
                         minus,
                         plus,
                         sharp,
                         space,
                         ign,
                         pad,
                         1);
               case 1:
               case 3:
                if(legacy_behavior$0)
                 {var
                   _u2_=str_ind$0 + 1 | 0,
                   minus$0=minus || (45 === symb$0?1:0);
                  return parse_literal(minus$0,_u2_)}
                break
               }}
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     sharp,
                     space,
                     ign,
                     pad,
                     _gD_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,cst_precision)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 sharp,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],sharp=[0,0];
        function set_flag(str_ind,flag)
         {var _uZ_=flag[1],_u0_=_uZ_?1 - legacy_behavior$0:_uZ_;
          if(_u0_)
           {var _u1_=caml_string_get(str,str_ind);
            caml_call3(_gr_(_gB_),str,str_ind,_u1_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,sharp);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _uU_=space[1],
           _uV_=sharp[1],
           _uW_=plus[1],
           _uX_=minus[1],
           _uY_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            0 === _uY_
             ?0 === _uX_?1:0
             :0 === _uX_
               ?2
               :legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,cst_0),
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _uX_,
                       _uW_,
                       _uV_,
                       _uU_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _uX_,
                     _uW_,
                     _uV_,
                     _uU_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,cst_padding);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_uX_,_uW_,_uV_,_uU_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_uX_,_uW_,_uV_,_uU_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_uX_,_uW_,_uV_,_uU_,ign,_gC_)}}}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=_bp_(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=_be_(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str];
            if(is_open_tag)
             var formatting$0=[0,sub_format$0];
            else
             {if(typeof sub_fmt === "number")
               var switch$0=0;
              else
               if(11 === sub_fmt[0])
                if(typeof sub_fmt[2] === "number")
                 {var str$0=sub_fmt[1];
                  try
                   {_gs_(str$0);var switch$1=1}
                  catch(_uT_)
                   {_uT_ = caml_wrap_exception(_uT_);
                    if(_uT_[1] !== Failure)throw _uT_;
                    var switch$0=1,switch$1=0}
                  if(switch$1)var switch$0=1}
                else
                 var switch$0=0;
               else
                var switch$0=0;
              var formatting$0=[1,sub_format$0]}
            var _uR_=[0,[18,formatting$0,fmt_rest$0]];
            return _uR_}
          throw Not_found}
        catch(_uS_)
         {_uS_ = caml_wrap_exception(_uS_);
          if(_uS_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _uS_}}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _uN_=str_ind === end_ind?1:0,
           _uO_=_uN_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_uO_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$1=caml_string_get(str,str_ind_1),
           switch$0=48 <= match$1?58 <= match$1?0:1:45 === match$1?1:0;
          if(! switch$0)throw Not_found;
          var
           match$2=parse_integer(str_ind_1,end_ind),
           width=match$2[2],
           str_ind_2=match$2[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$3=caml_string_get(str,str_ind_3),
           switcher=match$3 - 45 | 0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=_be_(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _uP_=[0,str_ind_3 + 1 | 0,[0,s,width,0]],
             switch$1=0;
           else
            var switch$1=1;
          else
           {var switcher$0=switcher - 1 | 0;
            if(1 < switcher$0 >>> 0)
             {var
               match$4=parse_integer(str_ind_3,end_ind),
               offset=match$4[2],
               str_ind_4=match$4[1],
               str_ind_5=parse_spaces(str_ind_4,end_ind);
              if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
              var
               s$0=_be_(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
               _uP_=[0,str_ind_5 + 1 | 0,[0,s$0,width,offset]],
               switch$1=0}
            else
             var switch$1=1}
          if(switch$1)throw Not_found;
          var match=_uP_}
        catch(_uQ_)
         {_uQ_ = caml_wrap_exception(_uQ_);
          if(_uQ_ !== Not_found)if(_uQ_[1] !== Failure)throw _uQ_;
          var match=[0,str_ind,_gP_]}
        var
         formatting_lit=match[2],
         next_ind=match[1],
         match$0=parse(next_ind,end_ind),
         fmt_rest=match$0[1];
        return [0,[17,formatting_lit,fmt_rest]]}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=48 <= match$2?58 <= match$2?0:1:45 === match$2?1:0;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=_be_(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _uL_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _uL_=0;
          var _uK_=_uL_}
        catch(_uM_)
         {_uM_ = caml_wrap_exception(_uM_);
          if(_uM_ !== Not_found)if(_uM_[1] !== Failure)throw _uM_;
          var _uK_=0}
        if(_uK_)
         {var
           match=_uK_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_gQ_,fmt_rest$0]]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0),switcher=c - 48 | 0;
          if(9 < switcher >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(16777211 < acc$1)return caml_call3(_gr_(_gS_),str,acc$1,_bI_);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0),switcher=c - 48 | 0;
           if(9 < switcher >>> 0)
            return expected_character(str_ind + 1 | 0,cst_digit,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_gT_]}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)caml_call3(_gr_(_gU_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 {var switcher=match$0 - 123 | 0;
                  switch(switcher)
                   {case 0:
                     var
                      sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                      str_ind$2=sub_end + 2 | 0,
                      str_ind$0=str_ind$2;
                     continue;
                    case 1:break;
                    default:
                     return expected_character
                             (str_ind$0 + 1 | 0,cst_character,125)}}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,cst_character$0,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=_be_(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5(_gr_(_gY_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,sharp,space,symb)
       {var plus$0=plus,sharp$0=sharp,space$0=space;
        for(;;)
         {if(0 === plus$0)
           if(0 === sharp$0)
            if(0 === space$0)
             {var switcher=symb - 88 | 0;
              if(32 < switcher >>> 0)
               var switch$0=1;
              else
               switch(switcher)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6;
                 default:var switch$0=1}}
            else
             {if(100 === symb)return 2;
              if(105 === symb)return 5;
              var switch$0=1}
           else
            if(0 === space$0)
             {if(88 === symb)return 9;
              if(111 === symb)return 11;
              if(120 === symb)return 7;
              var switch$0=0}
            else
             var switch$0=0;
          else
           if(0 === sharp$0)
            if(0 === space$0)
             {if(100 === symb)return 1;
              if(105 === symb)return 4;
              var switch$0=1}
            else
             var switch$0=1;
           else
            var switch$0=0;
          if(! switch$0)
           {var switcher$0=symb - 88 | 0;
            if(! (32 < switcher$0 >>> 0))
             switch(switcher$0)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var sharp$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,cst$47)
               }}
          if(0 === plus$0)
           {if(0 === space$0)throw [0,Assert_failure,_gW_];
            if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$44)}
          if(0 === space$0)
           {if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$45)}
          if(legacy_behavior$0){var space$0=0;continue}
          return incompatible_flag(pct_ind,str_ind,32,cst$46)}}
      return parse(0,caml_ml_string_length(str))}
    function _gZ_(str,fmtty)
     {var match=_gx_(0,str),fmt=match[1];
      try
       {var _uI_=[0,_fN_(fmt,fmtty),str];return _uI_}
      catch(_uJ_)
       {_uJ_ = caml_wrap_exception(_uJ_);
        if(_uJ_ === _fK_)
         {var _uH_=_ge_(fmtty);return caml_call2(_gr_(_g0_),str,_uH_)}
        throw _uJ_}}
    function _g1_(str,param)
     {var str$0=param[2],fmt=param[1],match=_gx_(0,str),fmt$0=match[1];
      try
       {var _uF_=[0,_fN_(fmt$0,_fG_(fmt)),str];return _uF_}
      catch(_uG_)
       {_uG_ = caml_wrap_exception(_uG_);
        if(_uG_ === _fK_)return caml_call2(_gr_(_g2_),str,str$0);
        throw _uG_}}
    var
     CamlinternalFormat=
      [0,
       _eZ_,
       _eY_,
       _eV_,
       _eW_,
       _eX_,
       _e1_,
       _gf_,
       _go_,
       _gp_,
       _gq_,
       _fN_,
       _gx_,
       _gZ_,
       _g1_,
       _e8_,
       _fg_,
       _fh_,
       _ge_,
       _fm_,
       _gs_,
       _fn_,
       _fp_,
       _fR_];
    caml_register_global(587,CamlinternalFormat,"CamlinternalFormat");
    function _g3_(k,o,param)
     {var fmt=param[1],_uE_=0;
      return _gf_
              (function(o,acc){_go_(o,acc);return caml_call1(k,o)},o,_uE_,fmt)}
    function _g4_(k,b,param)
     {var fmt=param[1],_uD_=0;
      return _gf_
              (function(b,acc){_gp_(b,acc);return caml_call1(k,b)},b,_uD_,fmt)}
    function _g5_(k,oc,param)
     {var fmt=param[1],_uC_=0;
      return _gf_(function(oc,param){return caml_call1(k,oc)},oc,_uC_,fmt)}
    function _g6_(oc,fmt){return _g3_(function(_uB_){return 0},oc,fmt)}
    function _g7_(b,fmt){return _g4_(function(_uA_){return 0},b,fmt)}
    function _g8_(oc,fmt){return _g5_(function(_uz_){return 0},oc,fmt)}
    function _g9_(fmt){return _g6_(stdout,fmt)}
    function _g__(fmt){return _g6_(stderr,fmt)}
    function _g$_(k,param)
     {var fmt=param[1];
      function k$0(param,acc)
       {var buf=_eC_(64);_gq_(buf,acc);return caml_call1(k,_eD_(buf))}
      return _gf_(k$0,0,0,fmt)}
    function _ha_(fmt){return _g$_(function(s){return s},fmt)}
    var Printf=[0,_g6_,_g9_,_g__,_ha_,_g7_,_g8_,_g3_,_g5_,_g$_,_g4_,_g$_];
    caml_register_global(588,Printf,"Printf");
    var
     _hb_=caml_set_oo_id([248,cst_Arg_Bad,0]),
     _hc_=caml_set_oo_id([248,cst_Arg_Help,0]),
     _hd_=caml_set_oo_id([248,cst_Arg_Stop,0]);
    function _he_(x,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var t=l$0[2],match=l$0[1],y2=match[2],y1=match[1];
          if(caml_equal(y1,x))return y2;
          var l$0=t;
          continue}
        throw Not_found}}
    function _hf_(prefix,sep,suffix,l)
     {if(l)
       {var t=l[2],h=l[1],_uy_=_j_(prefix,h);
        return _j_(_X_(function(x,y){return _j_(x,_j_(sep,y))},_uy_,t),suffix)}
      return cst_none}
    function _hi_(param){throw [0,_hd_,_hj_]}
    function _hk_(speclist)
     {try
       {_he_(cst_help$2,speclist);var _uv_=0,_ut_=_uv_}
      catch(_ux_)
       {_ux_ = caml_wrap_exception(_ux_);
        if(_ux_ !== Not_found)throw _ux_;
        var _ut_=[0,[0,cst_help,[0,_hi_],cst_Display_this_list_of_options],0]}
      try
       {_he_(cst_help$1,speclist);var _uu_=0,add2=_uu_}
      catch(_uw_)
       {_uw_ = caml_wrap_exception(_uw_);
        if(_uw_ !== Not_found)throw _uw_;
        var
         add2=
          [0,[0,cst_help$0,[0,_hi_],cst_Display_this_list_of_options$0],0]}
      return _k_(speclist,_k_(_ut_,add2))}
    function _hl_(buf,speclist,errmsg)
     {caml_call1(_g7_(buf,_hm_),errmsg);
      var _uq_=_hk_(speclist);
      return _V_
              (function(param)
                {var
                  doc=param[3],
                  spec=param[2],
                  key=param[1],
                  _ur_=0 < caml_ml_string_length(doc)?1:0;
                 if(_ur_)
                  {if(11 === spec[0])
                    {var l=spec[1],_us_=_hf_(cst$53,cst$52,cst$51,l);
                     return caml_call3(_g7_(buf,_hh_),key,_us_,doc)}
                   return caml_call2(_g7_(buf,_hg_),key,doc)}
                 return _ur_},
               _uq_)}
    function _hn_(speclist,errmsg)
     {var b=_eC_(200);_hl_(b,speclist,errmsg);return _eD_(b)}
    var _hq_=[0,0];
    function _ho_(speclist,errmsg)
     {var _up_=_hn_(speclist,errmsg);return caml_call1(_g__(_hp_),_up_)}
    function _hr_(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current=sth;else var current=_hq_;
      var l=argv.length - 1,b=_eC_(200),initpos=current[1];
      function stop(error)
       {var
         progname=
          initpos < l?caml_check_bound(argv,initpos)[initpos + 1]:cst$54;
        switch(error[0])
         {case 0:
           var _uo_=error[1];
           if(caml_string_notequal(_uo_,cst_help$3))
            if(caml_string_notequal(_uo_,cst_help$4))
             caml_call2(_g7_(b,_hs_),progname,_uo_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(_g7_(b,_hv_),progname,arg,opt,expected);
           break;
          case 2:var s=error[1];caml_call2(_g7_(b,_hw_),progname,s);break;
          default:var s$0=error[1];caml_call2(_g7_(b,_hx_),progname,s$0)}
        _hl_(b,speclist[1],errmsg);
        if(! caml_equal(error,_ht_))
         if(! caml_equal(error,_hu_))throw [0,_hb_,_eD_(b)];
        throw [0,_hc_,_eD_(b)]}
      current[1]++;
      for(;;)
       {if(current[1] < l)
         {var _t8_=current[1],s=caml_check_bound(argv,_t8_)[_t8_ + 1];
          if(1 <= caml_ml_string_length(s))
           if(45 === caml_string_get(s,0))
            {try
              {var _t9_=_he_(s,speclist[1]),action=_t9_}
             catch(_un_)
              {_un_ = caml_wrap_exception(_un_);
               if(_un_ !== Not_found)throw _un_;
               var action=stop([0,s])}
             try
              {var
                treat_action$0=
                 function(s)
                  {function treat_action(param)
                    {switch(param[0])
                      {case 0:var f=param[1];return caml_call1(f,0);
                       case 1:
                        var f$0=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var
                           _t__=current[1] + 1 | 0,
                           arg=caml_check_bound(argv,_t__)[_t__ + 1];
                          try
                           {caml_call1(f$0,bool_of_string(arg))}
                          catch(_um_)
                           {_um_ = caml_wrap_exception(_um_);
                            if(_um_[1] === Invalid_argument)
                             if(! caml_string_notequal(_um_[2],cst_bool_of_string$0))
                              throw [0,_hd_,[1,s,arg,cst_a_boolean]];
                            throw _um_}
                          current[1]++;
                          return 0}
                        break;
                       case 2:var r=param[1];r[1] = 1;return 0;
                       case 3:var r$0=param[1];r$0[1] = 0;return 0;
                       case 4:
                        var f$1=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var _t$_=current[1] + 1 | 0;
                          caml_call1(f$1,caml_check_bound(argv,_t$_)[_t$_ + 1]);
                          current[1]++;
                          return 0}
                        break;
                       case 5:
                        var r$1=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var _ua_=current[1] + 1 | 0;
                          r$1[1] = caml_check_bound(argv,_ua_)[_ua_ + 1];
                          current[1]++;
                          return 0}
                        break;
                       case 6:
                        var f$2=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var
                           _ub_=current[1] + 1 | 0,
                           arg$0=caml_check_bound(argv,_ub_)[_ub_ + 1];
                          try
                           {caml_call1(f$2,caml_int_of_string(arg$0))}
                          catch(_ul_)
                           {_ul_ = caml_wrap_exception(_ul_);
                            if(_ul_[1] === Failure)
                             if(! caml_string_notequal(_ul_[2],cst_int_of_string))
                              throw [0,_hd_,[1,s,arg$0,cst_an_integer]];
                            throw _ul_}
                          current[1]++;
                          return 0}
                        break;
                       case 7:
                        var r$2=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var
                           _uc_=current[1] + 1 | 0,
                           arg$1=caml_check_bound(argv,_uc_)[_uc_ + 1];
                          try
                           {r$2[1] = caml_int_of_string(arg$1)}
                          catch(_uk_)
                           {_uk_ = caml_wrap_exception(_uk_);
                            if(_uk_[1] === Failure)
                             if(! caml_string_notequal(_uk_[2],cst_int_of_string$0))
                              throw [0,_hd_,[1,s,arg$1,cst_an_integer$0]];
                            throw _uk_}
                          current[1]++;
                          return 0}
                        break;
                       case 8:
                        var f$3=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var
                           _ud_=current[1] + 1 | 0,
                           arg$2=caml_check_bound(argv,_ud_)[_ud_ + 1];
                          try
                           {caml_call1(f$3,caml_float_of_string(arg$2))}
                          catch(_uj_)
                           {_uj_ = caml_wrap_exception(_uj_);
                            if(_uj_[1] === Failure)
                             if(! caml_string_notequal(_uj_[2],cst_float_of_string))
                              throw [0,_hd_,[1,s,arg$2,cst_a_float]];
                            throw _uj_}
                          current[1]++;
                          return 0}
                        break;
                       case 9:
                        var r$3=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var
                           _ue_=current[1] + 1 | 0,
                           arg$3=caml_check_bound(argv,_ue_)[_ue_ + 1];
                          try
                           {r$3[1] = caml_float_of_string(arg$3)}
                          catch(_ui_)
                           {_ui_ = caml_wrap_exception(_ui_);
                            if(_ui_[1] === Failure)
                             if(! caml_string_notequal(_ui_[2],cst_float_of_string$0))
                              throw [0,_hd_,[1,s,arg$3,cst_a_float$0]];
                            throw _ui_}
                          current[1]++;
                          return 0}
                        break;
                       case 10:var specs=param[1];return _V_(treat_action,specs);
                       case 11:
                        var f$4=param[2],symb=param[1];
                        if((current[1] + 1 | 0) < l)
                         {var
                           _uf_=current[1] + 1 | 0,
                           arg$4=caml_check_bound(argv,_uf_)[_uf_ + 1];
                          if(_ag_(arg$4,symb))
                           {var _ug_=current[1] + 1 | 0;
                            caml_call1(f$4,caml_check_bound(argv,_ug_)[_ug_ + 1]);
                            current[1]++;
                            return 0}
                          throw [0,
                                 _hd_,
                                 [1,s,arg$4,_j_(cst_one_of,_hf_(cst$57,cst$56,cst$55,symb))]]}
                        break;
                       default:
                        var f$5=param[1];
                        for(;;)
                         {if(current[1] < (l - 1 | 0))
                           {var _uh_=current[1] + 1 | 0;
                            caml_call1(f$5,caml_check_bound(argv,_uh_)[_uh_ + 1]);
                            current[1]++;
                            continue}
                          return 0}}
                     throw [0,_hd_,[2,s]]}
                   return treat_action},
                treat_action=treat_action$0(s);
               treat_action(action)}
             catch(exn)
              {exn = caml_wrap_exception(exn);
               if(exn[1] === _hb_)
                {var m=exn[2];stop([3,m])}
               else
                {if(exn[1] !== _hd_)throw exn;var e=exn[2];stop(e)}}
             current[1]++;
             var switch$0=1}
           else
            var switch$0=0;
          else
           var switch$0=0;
          if(! switch$0)
           {try
             {caml_call1(anonfun,s)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(exn[1] !== _hb_)throw exn;
              var m$0=exn[2];
              stop([3,m$0])}
            current[1]++}
          continue}
        return 0}}
    function _hy_(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current=sth;else var current=_hq_;
      return _hr_([0,current],argv,[0,speclist],anonfun,errmsg)}
    function _hz_(l,f,msg)
     {try
       {var _t7_=_hy_(0,_bz_,l,f,msg);return _t7_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === _hb_)
         {var msg$0=exn[2];caml_call1(_g__(_hA_),msg$0);return exit(2)}
        if(exn[1] === _hc_)
         {var msg$1=exn[2];caml_call1(_g9_(_hB_),msg$1);return exit(0)}
        throw exn}}
    function _hC_(l,f,msg)
     {try
       {var _t6_=_hr_(0,_bz_,l,f,msg);return _t6_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === _hb_)
         {var msg$0=exn[2];caml_call1(_g__(_hD_),msg$0);return exit(2)}
        if(exn[1] === _hc_)
         {var msg$1=exn[2];caml_call1(_g9_(_hE_),msg$1);return exit(0)}
        throw exn}}
    function _hF_(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 === caml_string_get(s,n$0))
           {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
          return n$0}}
      try
       {var _t4_=loop(_bn_(s,32));return _t4_}
      catch(_t5_)
       {_t5_ = caml_wrap_exception(_t5_);
        if(_t5_ === Not_found)return len;
        throw _t5_}}
    function _hG_(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max(cur,caml_ml_string_length(kwd))
              :max(cur,caml_ml_string_length(kwd) + _hF_(doc) | 0)}
    var
     Arg=
      [0,
       _hz_,
       _hC_,
       _hy_,
       _hr_,
       _hc_,
       _hb_,
       _ho_,
       _hn_,
       function(opt,speclist)
        {if(opt)var sth=opt[1],limit=sth;else var limit=max_int;
         var
          completed=_hk_(speclist),
          len=_X_(_hG_,0,completed),
          len$0=min(len,limit);
         return _R_
                 (function(ksd)
                   {var _t2_=ksd[2],_t3_=ksd[1];
                    if(caml_string_notequal(ksd[3],cst$58))
                     {if(11 === _t2_[0])
                       {var
                         msg$0=ksd[3],
                         cutcol$0=_hF_(msg$0),
                         spaces$0=_bb_(max(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                        return [0,_t3_,_t2_,_j_(cst$59,_j_(spaces$0,msg$0))]}
                      var
                       msg=ksd[3],
                       cutcol=_hF_(msg),
                       kwd_len=caml_ml_string_length(_t3_),
                       diff=(len$0 - kwd_len | 0) - cutcol | 0;
                      if(0 < diff)
                       {var
                         spaces=_bb_(diff,32),
                         prefix=_be_(msg,0,cutcol),
                         suffix=
                          _be_(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                        return [0,_t3_,_t2_,_j_(prefix,_j_(spaces,suffix))]}
                      return [0,_t3_,_t2_,msg]}
                    return ksd},
                  completed)},
       _hq_];
    caml_register_global(589,Arg,"Arg");
    var printers=[0,0];
    function field(x,i)
     {var f=x[i + 1];
      return caml_obj_is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(_ha_(_hH_),f)
                :caml_obj_tag(f) === 253?string_of_float(f):cst$60
              :caml_call1(_ha_(_hI_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return cst$61;
      var _t0_=other_fields(x,i + 1 | 0),_t1_=field(x,i);
      return caml_call2(_ha_(_hJ_),_t1_,_t0_)}
    function fields(x)
     {var n=x.length - 1;
      if(2 < n >>> 0)
       {var _tX_=other_fields(x,2),_tY_=field(x,1);
        return caml_call2(_ha_(_hK_),_tY_,_tX_)}
      switch(n)
       {case 0:return cst$62;
        case 1:return cst$63;
        default:var _tZ_=field(x,1);return caml_call1(_ha_(_hL_),_tZ_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _tV_=caml_call1(hd,x),_tU_=_tV_}catch(_tW_){var _tU_=0}
            if(_tU_){var s=_tU_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return cst_Out_of_memory;
          if(x === Stack_overflow)return cst_Stack_overflow;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (_ha_(locfmt),
                     file,
                     line,
                     char$0,
                     char$0 + 5 | 0,
                     cst_Pattern_matching_failed)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (_ha_(locfmt),
                     file$0,
                     line$0,
                     char$1,
                     char$1 + 6 | 0,
                     cst_Assertion_failed)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (_ha_(locfmt),
                     file$1,
                     line$1,
                     char$2,
                     char$2 + 6 | 0,
                     cst_Undefined_recursive_module)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _j_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function print(fct,arg)
     {try
       {var _tT_=caml_call1(fct,arg);return _tT_}
      catch(x)
       {x = caml_wrap_exception(x);
        var _tS_=to_string(x);
        caml_call1(_g__(_hM_),_tS_);
        caml_ml_flush(stderr);
        throw x}}
    function catch$0(fct,arg)
     {try
       {var _tR_=caml_call1(fct,arg);return _tR_}
      catch(x)
       {x = caml_wrap_exception(x);
        caml_ml_flush(stdout);
        var _tQ_=to_string(x);
        caml_call1(_g__(_hN_),_tQ_);
        return exit(2)}}
    function convert_raw_backtrace(rbckt)
     {try
       {var
         _tN_=
          [0,
           _y_
            (function(_tP_){return caml_convert_raw_backtrace_slot(_tP_)},
             rbckt)];
        return _tN_}
      catch(_tO_)
       {_tO_ = caml_wrap_exception(_tO_);
        if(_tO_[1] === Failure)return 0;
        throw _tO_}}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise
                ?0 === pos?cst_Raised_at:cst_Re_raised_at
                :0 === pos
                  ?cst_Raised_by_primitive_operation_at
                  :cst_Called_from}
      if(0 === slot[0])
       {var
         endchar=slot[5],
         startchar=slot[4],
         lineno=slot[3],
         filename=slot[2],
         is_raise=slot[1],
         _tL_=info(is_raise);
        return [0,
                caml_call5(_ha_(_hO_),_tL_,filename,lineno,startchar,endchar)]}
      if(0 === slot[1])
       {var _tM_=info(0);return [0,caml_call1(_ha_(_hP_),_tM_)]}
      return 0}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_tJ_=a.length - 1 - 1 | 0,_tI_=0;
        if(! (_tJ_ < 0))
         {var i=_tI_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[i + 1]);
            if(match){var str=match[1];caml_call1(_g6_(outchan,_hQ_),str)}
            var _tK_=i + 1 | 0;
            if(_tJ_ !== i){var i=_tK_;continue}
            break}}
        return 0}
      return _g6_(outchan,_hR_)}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtrace(0))}
    function backtrace_to_string(backtrace)
     {if(backtrace)
       {var a=backtrace[1],b=_eC_(1024),_tG_=a.length - 1 - 1 | 0,_tF_=0;
        if(! (_tG_ < 0))
         {var i=_tF_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[i + 1]);
            if(match){var str=match[1];caml_call1(_g7_(b,_hS_),str)}
            var _tH_=i + 1 | 0;
            if(_tG_ !== i){var i=_tH_;continue}
            break}}
        return _eD_(b)}
      return cst_Program_not_linked_with_g_cannot_print_stack_backtrace}
    function raw_backtrace_to_string(raw_backtrace)
     {return backtrace_to_string(convert_raw_backtrace(raw_backtrace))}
    function backtrace_slot_is_raise(param)
     {if(0 === param[0]){var is_raise=param[1];return is_raise}
      var is_raise$0=param[1];
      return is_raise$0}
    function backtrace_slot_location(param)
     {if(0 === param[0])
       {var
         end_char=param[5],
         start_char=param[4],
         line_number=param[3],
         filename=param[2];
        return [0,[0,filename,line_number,start_char,end_char]]}
      return 0}
    function backtrace_slots(raw_backtrace)
     {var match=convert_raw_backtrace(raw_backtrace);
      if(match)
       {var backtrace=match[1],i$1=backtrace.length - 1 - 1 | 0,i=i$1;
        for(;;)
         {if(-1 === i)
           var _tE_=0;
          else
           {var
             param=caml_check_bound(backtrace,i)[i + 1],
             _tD_=0 === param[0]?1:0;
            if(! _tD_){var i$0=i - 1 | 0,i=i$0;continue}
            var _tE_=_tD_}
          return _tE_?[0,backtrace]:0}}
      return 0}
    function raw_backtrace_length(bckt){return bckt.length - 1}
    function get_raw_backtrace_slot(bckt,i)
     {return caml_check_bound(bckt,i)[i + 1]}
    function get_backtrace(param)
     {return backtrace_to_string
              (convert_raw_backtrace(caml_get_exception_raw_backtrace(0)))}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function exn_slot(x){return 0 === caml_obj_tag(x)?x[1]:x}
    function exn_slot_id(x){var slot=exn_slot(x);return slot[2]}
    function exn_slot_name(x){var slot=exn_slot(x);return slot[1]}
    var uncaught_exception_handler=[0,0];
    function set_uncaught_exception_handler(fn)
     {uncaught_exception_handler[1] = [0,fn];return 0}
    function _hT_(_tC_){return caml_convert_raw_backtrace_slot(_tC_)}
    var
     _hU_=
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_location,
       format_backtrace_slot];
    function _hV_(_tB_){return runtime.caml_get_current_callstack(_tB_)}
    function _hW_(_tA_){return caml_get_exception_raw_backtrace(_tA_)}
    function _hX_(_tz_){return runtime.caml_backtrace_status(_tz_)}
    var
     Printexc=
      [0,
       to_string,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       function(_ty_){return runtime.caml_record_backtrace(_ty_)},
       _hX_,
       register_printer,
       _hW_,
       print_raw_backtrace,
       raw_backtrace_to_string,
       _hV_,
       set_uncaught_exception_handler,
       backtrace_slots,
       _hU_,
       raw_backtrace_length,
       get_raw_backtrace_slot,
       _hT_,
       exn_slot_id,
       exn_slot_name];
    caml_register_global(594,Printexc,"Printexc");
    function _hY_(c)
     {var st=runtime.caml_gc_stat(0),_tj_=st[1];
      caml_call1(_g6_(c,_hZ_),_tj_);
      var _tk_=st[2];
      caml_call1(_g6_(c,_h0_),_tk_);
      var _tl_=st[3];
      caml_call1(_g6_(c,_h1_),_tl_);
      var _tm_=st[4];
      caml_call1(_g6_(c,_h2_),_tm_);
      var _tn_=st[5];
      caml_call1(_g6_(c,_h3_),_tn_);
      var _to_=st[6];
      caml_call1(_g6_(c,_h4_),_to_);
      var _tp_=st[7];
      caml_call1(_g6_(c,_h5_),_tp_);
      var _tq_=st[15];
      caml_call1(_g6_(c,_h6_),_tq_);
      var _tr_=st[8];
      caml_call1(_g6_(c,_h7_),_tr_);
      var _ts_=st[9];
      caml_call1(_g6_(c,_h8_),_ts_);
      var _tt_=st[10];
      caml_call1(_g6_(c,_h9_),_tt_);
      var _tu_=st[11];
      caml_call1(_g6_(c,_h__),_tu_);
      var _tv_=st[12];
      caml_call1(_g6_(c,_h$_),_tv_);
      var _tw_=st[13];
      caml_call1(_g6_(c,_ia_),_tw_);
      var _tx_=st[14];
      return caml_call1(_g6_(c,_ib_),_tx_)}
    function _ic_(param)
     {var
       match=runtime.caml_gc_counters(0),
       ma=match[3],
       pro=match[2],
       mi=match[1];
      return (mi + ma - pro) * 4}
    function _id_(f){return [0,1]}
    function _ie_(a){a[1] = 0;return 0}
    function _if_(_ti_){return runtime.caml_final_release(_ti_)}
    var
     Gc=
      [0,
       _hY_,
       _ic_,
       function(_th_,_tg_){return runtime.caml_final_register(_th_,_tg_)},
       _if_,
       _id_,
       _ie_];
    caml_register_global(595,Gc,"Gc");
    function _ig_(str)
     {return caml_md5_string(str,0,caml_ml_string_length(str))}
    function _ih_(b){return _ig_(b)}
    function _ii_(str,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(str) - len | 0) < ofs))
         return caml_md5_string(str,ofs,len);
      return invalid_arg(cst_Digest_substring)}
    function _ij_(b,ofs,len){return _ii_(b,ofs,len)}
    function _ik_(filename)
     {var ic=open_in_bin(filename);
      try
       {var d=runtime.caml_md5_chan(ic,-1)}
      catch(e){e = caml_wrap_exception(e);caml_ml_close_channel(ic);throw e}
      caml_ml_close_channel(ic);
      return d}
    function _il_(chan,digest){return output_string(chan,digest)}
    function _im_(chan){return really_input_string(chan,16)}
    function _in_(n){var _tf_=10 <= n?87:48;return n + _tf_ | 0}
    function _io_(d)
     {var result=caml_create_string(32),i=0;
      for(;;)
       {var x=caml_string_get(d,i);
        caml_bytes_unsafe_set(result,i * 2 | 0,_in_(x >>> 4 | 0));
        caml_bytes_unsafe_set(result,(i * 2 | 0) + 1 | 0,_in_(x & 15));
        var _te_=i + 1 | 0;
        if(15 !== i){var i=_te_;continue}
        return result}}
    var
     Digest=
      [0,
       _by_,
       _ig_,
       _ih_,
       _ii_,
       _ij_,
       _ik_,
       _il_,
       _im_,
       _io_,
       function(s)
        {if(32 !== caml_ml_string_length(s))
          throw [0,Invalid_argument,cst_Digest_from_hex];
         function digit(c)
          {if(65 <= c)
            {if(97 <= c)
              {if(! (103 <= c))return (c - 97 | 0) + 10 | 0}
             else
              if(! (71 <= c))return (c - 65 | 0) + 10 | 0}
           else
            {var switcher=c - 48 | 0;
             if(! (9 < switcher >>> 0))return c - 48 | 0}
           throw [0,Invalid_argument,cst_Digest_from_hex$0]}
         var result=caml_create_string(16),i=0;
         for(;;)
          {var i$0=2 * i | 0,_tc_=digit(caml_string_get(s,i$0 + 1 | 0));
           caml_string_set
            (result,i,_az_((digit(caml_string_get(s,i$0)) << 4) + _tc_ | 0));
           var _td_=i + 1 | 0;
           if(15 !== i){var i=_td_;continue}
           return result}}];
    caml_register_global(596,Digest,"Digest");
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function assign(st1,st2)
     {_w_(st2[1],0,st1[1],0,55);st1[2] = st2[2];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[i$0 + 1] = i$0;
        var _tb_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_tb_;continue}
        var accu=[0,cst_x$1],_s9_=54 + max(55,l) | 0,_s8_=0;
        if(! (_s9_ < 0))
         {var i=_s8_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[k + 1];
            accu[1] = _ig_(_j_(accu[1],caml_new_string("" + x)));
            var
             _s__=accu[1],
             _s4_=caml_string_get(_s__,3) << 24,
             _s5_=caml_string_get(_s__,2) << 16,
             _s6_=caml_string_get(_s__,1) << 8,
             _s7_=((caml_string_get(_s__,0) + _s6_ | 0) + _s5_ | 0) + _s4_ | 0,
             _s$_=(caml_check_bound(s[1],j)[j + 1] ^ _s7_) & 1073741823;
            caml_check_bound(s[1],j)[j + 1] = _s$_;
            var _ta_=i + 1 | 0;
            if(_s9_ !== i){var i=_ta_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$0(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function make_self_init(param){return make$0(caml_sys_random_seed(0))}
    function copy(s){var result=new_state(0);assign(result,s);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _s1_=s[2],
       curval=caml_check_bound(s[1],_s1_)[_s1_ + 1],
       _s2_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_s2_)[_s2_ + 1]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _s3_=s[2];
      caml_check_bound(s[1],_s3_)[_s3_ + 1] = newval30;
      return newval30}
    function int$0(s,bound)
     {if(! (1073741823 < bound))
       if(0 < bound)
        for(;;)
         {var r=bits(s),v=caml_mod(r,bound);
          if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
          return v}
      return invalid_arg(cst_Random_int)}
    function int32(s,bound)
     {if(caml_lessequal(bound,0))return invalid_arg(cst_Random_int32);
      for(;;)
       {var b1=bits(s),b2=(bits(s) & 1) << 30,r=b1 | b2,v=caml_mod(r,bound);
        if(caml_greaterthan(r - v | 0,(2147483647 - bound | 0) + 1 | 0))
         continue;
        return v}}
    function int64(s,bound)
     {if(caml_lessequal(bound,_iq_))return invalid_arg(cst_Random_int64);
      for(;;)
       {var
         b1=caml_int64_of_int32(bits(s)),
         b2=caml_int64_shift_left(caml_int64_of_int32(bits(s)),30),
         b3=caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7),60),
         r=caml_int64_or(b1,caml_int64_or(b2,b3)),
         v=runtime.caml_int64_mod(r,bound);
        if
         (caml_greaterthan
           (caml_int64_sub(r,v),
            caml_int64_add(caml_int64_sub(_cT_,bound),_ip_)))
         continue;
        return v}}
    function _ir_(s,bound){return int32(s,bound)}
    function _is_(s,bound)
     {var r1=bits(s),r2=bits(s);
      return (r1 / 1073741824 + r2) / 1073741824 * bound}
    function _it_(s){return 0 === (bits(s) & 1)?1:0}
    var _iv_=[0,_iu_.slice(),0];
    function _iw_(param){return bits(_iv_)}
    function _ix_(bound){return int$0(_iv_,bound)}
    function _iy_(bound){return int32(_iv_,bound)}
    function _iz_(bound){return _ir_(_iv_,bound)}
    function _iA_(bound){return int64(_iv_,bound)}
    function _iB_(scale){return _is_(_iv_,scale)}
    function _iC_(param){return _it_(_iv_)}
    function _iD_(seed){return full_init(_iv_,seed)}
    function _iE_(seed){return full_init(_iv_,[0,seed])}
    function _iF_(param){return _iD_(caml_sys_random_seed(0))}
    function _iG_(param){return copy(_iv_)}
    var
     _iH_=[0,make$0,make_self_init,copy,bits,int$0,int32,_ir_,int64,_is_,_it_],
     Random=
      [0,
       _iE_,
       _iD_,
       _iF_,
       _iw_,
       _ix_,
       _iy_,
       _iz_,
       _iA_,
       _iB_,
       _iC_,
       _iH_,
       _iG_,
       function(s){return assign(_iv_,s)}];
    caml_register_global(597,Random,"Random");
    function hash(x){return caml_hash(10,100,0,x)}
    function hash_param(n1,n2,x){return caml_hash(n1,n2,0,x)}
    function seeded_hash(seed,x){return caml_hash(10,100,seed,x)}
    try
     {var _ln_=caml_sys_getenv(cst_OCAMLRUNPARAM),params=_ln_}
    catch(_sZ_)
     {_sZ_ = caml_wrap_exception(_sZ_);
      if(_sZ_ !== Not_found)throw _sZ_;
      try
       {var _lm_=caml_sys_getenv(cst_CAMLRUNPARAM),_iI_=_lm_}
      catch(_s0_)
       {_s0_ = caml_wrap_exception(_s0_);
        if(_s0_ !== Not_found)throw _s0_;
        var _iI_=cst$64}
      var params=_iI_}
    var _iJ_=[0,_br_(params,82)];
    function _iK_(param){_iJ_[1] = 1;return 0}
    var _iL_=[246,function(_sY_){return caml_call1(_iH_[2],0)}];
    function _iM_(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=_iJ_[1];
      var x=16;
      for(;;)
       {if(! (initial_size <= x))
         if(! (4194303 < (x * 2 | 0))){var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _sW_=caml_obj_tag(_iL_),
          _sX_=250 === _sW_?_iL_[1]:246 === _sW_?_d3_(_iL_):_iL_,
          seed=caml_call1(_iH_[4],_sX_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function _iN_(h)
     {h[1] = 0;
      var len=h[2].length - 1,_sU_=len - 1 | 0,_sT_=0;
      if(! (_sU_ < 0))
       {var i=_sT_;
        for(;;)
         {caml_check_bound(h[2],i)[i + 1] = 0;
          var _sV_=i + 1 | 0;
          if(_sU_ !== i){var i=_sV_;continue}
          break}}
      return 0}
    function _iO_(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1)
       if(len !== h[4]){h[1] = 0;h[2] = caml_make_vect(h[4],0);return 0}
      return _iN_(h)}
    function _iP_(init)
     {var _sQ_=init[4],_sR_=init[3],_sS_=_s_(init[2]);
      return [0,init[1],_sS_,_sR_,_sQ_]}
    function _iQ_(h){return h[1]}
    function _iR_(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _sL_=nsize < 4194303?1:0;
      if(_sL_)
       {var ndata=caml_make_vect(nsize,0);
        h[2] = ndata;
        var
         insert_bucket=
          function(param)
           {if(param)
             {var rest=param[3],data=param[2],key=param[1];
              insert_bucket(rest);
              var nidx=caml_call2(indexfun,h,key);
              return ndata[nidx + 1]
                     =
                     [0,key,data,caml_check_bound(ndata,nidx)[nidx + 1]]}
            return 0},
         _sN_=osize - 1 | 0,
         _sM_=0;
        if(! (_sN_ < 0))
         {var i=_sM_;
          for(;;)
           {insert_bucket(caml_check_bound(odata,i)[i + 1]);
            var _sP_=i + 1 | 0;
            if(_sN_ !== i){var i=_sP_;continue}
            break}}
        var _sO_=0}
      else
       var _sO_=_sL_;
      return _sO_}
    function _iS_(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod
                (runtime.caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function _iT_(h,key,info)
     {var i=_iS_(h,key),bucket=[0,key,info,caml_check_bound(h[2],i)[i + 1]];
      caml_check_bound(h[2],i)[i + 1] = bucket;
      h[1] = h[1] + 1 | 0;
      var _sK_=h[2].length - 1 << 1 < h[1]?1:0;
      return _sK_?_iR_(_iS_,h):_sK_}
    function _iU_(h,key)
     {function remove_bucket(param)
       {if(param)
         {var next=param[3],i=param[2],k=param[1];
          return 0 === caml_compare(k,key)
                  ?(h[1] = h[1] - 1 | 0,next)
                  :[0,k,i,remove_bucket(next)]}
        return 0}
      var i=_iS_(h,key),_sJ_=remove_bucket(caml_check_bound(h[2],i)[i + 1]);
      return caml_check_bound(h[2],i)[i + 1] = _sJ_}
    function _iV_(h,key)
     {var _sI_=_iS_(h,key),match=caml_check_bound(h[2],_sI_)[_sI_ + 1];
      if(match)
       {var rest1=match[3],d1=match[2],k1=match[1];
        if(0 === caml_compare(key,k1))return d1;
        if(rest1)
         {var rest2=rest1[3],d2=rest1[2],k2=rest1[1];
          if(0 === caml_compare(key,k2))return d2;
          if(rest2)
           {var rest3=rest2[3],d3=rest2[2],k3=rest2[1];
            if(0 === caml_compare(key,k3))return d3;
            var param=rest3;
            for(;;)
             {if(param)
               {var rest=param[3],d=param[2],k=param[1];
                if(0 === caml_compare(key,k))return d;
                var param=rest;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function _iW_(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var rest=param$0[3],d=param$0[2],k=param$0[1];
            if(0 === caml_compare(k,key))return [0,d,find_in_bucket(rest)];
            var param$0=rest;
            continue}
          return 0}}
      var _sH_=_iS_(h,key);
      return find_in_bucket(caml_check_bound(h[2],_sH_)[_sH_ + 1])}
    function _iX_(h,key,info)
     {function replace_bucket(param)
       {if(param)
         {var next=param[3],i=param[2],k=param[1];
          return 0 === caml_compare(k,key)
                  ?[0,key,info,next]
                  :[0,k,i,replace_bucket(next)]}
        throw Not_found}
      var i=_iS_(h,key),l=caml_check_bound(h[2],i)[i + 1];
      try
       {var
         _sE_=replace_bucket(l),
         _sF_=caml_check_bound(h[2],i)[i + 1] = _sE_;
        return _sF_}
      catch(_sG_)
       {_sG_ = caml_wrap_exception(_sG_);
        if(_sG_ === Not_found)
         {caml_check_bound(h[2],i)[i + 1] = [0,key,info,l];
          h[1] = h[1] + 1 | 0;
          var _sD_=h[2].length - 1 << 1 < h[1]?1:0;
          return _sD_?_iR_(_iS_,h):_sD_}
        throw _sG_}}
    function _iY_(h,key)
     {var
       _sC_=_iS_(h,key),
       param$0=caml_check_bound(h[2],_sC_)[_sC_ + 1],
       param=param$0;
      for(;;)
       {if(param)
         {var rest=param[3],k=param[1],_sB_=0 === caml_compare(k,key)?1:0;
          if(_sB_)return _sB_;
          var param=rest;
          continue}
        return 0}}
    function _iZ_(f,h)
     {var d$0=h[2],_sz_=d$0.length - 1 - 1 | 0,_sy_=0;
      if(! (_sz_ < 0))
       {var i=_sy_;
        a:
        for(;;)
         {var param$0=caml_check_bound(d$0,i)[i + 1],param=param$0;
          for(;;)
           {if(param)
             {var rest=param[3],d=param[2],k=param[1];
              caml_call2(f,k,d);
              var param=rest;
              continue}
            var _sA_=i + 1 | 0;
            if(_sz_ !== i){var i=_sA_;continue a}
            break}
          break}}
      return 0}
    function _i0_(f,h,init)
     {var d$0=h[2],accu$1=[0,init],_sv_=d$0.length - 1 - 1 | 0,_su_=0;
      if(! (_sv_ < 0))
       {var i=_su_;
        a:
        for(;;)
         {var
           _sw_=accu$1[1],
           b$0=caml_check_bound(d$0,i)[i + 1],
           b=b$0,
           accu=_sw_;
          for(;;)
           {if(b)
             {var
               rest=b[3],
               d=b[2],
               k=b[1],
               accu$0=caml_call3(f,k,d,accu),
               b=rest,
               accu=accu$0;
              continue}
            accu$1[1] = accu;
            var _sx_=i + 1 | 0;
            if(_sv_ !== i){var i=_sx_;continue a}
            break}
          break}}
      return accu$1[1]}
    function _i1_(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function _i2_(h)
     {var
       _sr_=h[2],
       _ss_=0,
       mbl=_D_(function(m,b){return max(m,_i1_(0,b))},_ss_,_sr_),
       histo=caml_make_vect(mbl + 1 | 0,0),
       _st_=h[2];
      _x_
       (function(b)
         {var l=_i1_(0,b);
          return histo[l + 1] = caml_check_bound(histo,l)[l + 1] + 1 | 0},
        _st_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function _i3_(_r$_)
     {function _sa_(h,key)
       {var _sq_=h[2].length - 1 - 1 | 0;
        return caml_call2(_r$_[2],h[3],key) & _sq_}
      function _sb_(h,key,info)
       {var i=_sa_(h,key),bucket=[0,key,info,caml_check_bound(h[2],i)[i + 1]];
        caml_check_bound(h[2],i)[i + 1] = bucket;
        h[1] = h[1] + 1 | 0;
        var _sp_=h[2].length - 1 << 1 < h[1]?1:0;
        return _sp_?_iR_(_sa_,h):_sp_}
      function _sc_(h,key)
       {function remove_bucket(param)
         {if(param)
           {var next=param[3],i=param[2],k=param[1];
            return caml_call2(_r$_[1],k,key)
                    ?(h[1] = h[1] - 1 | 0,next)
                    :[0,k,i,remove_bucket(next)]}
          return 0}
        var i=_sa_(h,key),_so_=remove_bucket(caml_check_bound(h[2],i)[i + 1]);
        return caml_check_bound(h[2],i)[i + 1] = _so_}
      function _sd_(h,key)
       {var _sn_=_sa_(h,key),match=caml_check_bound(h[2],_sn_)[_sn_ + 1];
        if(match)
         {var rest1=match[3],d1=match[2],k1=match[1];
          if(caml_call2(_r$_[1],key,k1))return d1;
          if(rest1)
           {var rest2=rest1[3],d2=rest1[2],k2=rest1[1];
            if(caml_call2(_r$_[1],key,k2))return d2;
            if(rest2)
             {var rest3=rest2[3],d3=rest2[2],k3=rest2[1];
              if(caml_call2(_r$_[1],key,k3))return d3;
              var param=rest3;
              for(;;)
               {if(param)
                 {var rest=param[3],d=param[2],k=param[1];
                  if(caml_call2(_r$_[1],key,k))return d;
                  var param=rest;
                  continue}
                throw Not_found}}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function _se_(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var rest=param$0[3],d=param$0[2],k=param$0[1];
              if(caml_call2(_r$_[1],k,key))return [0,d,find_in_bucket(rest)];
              var param$0=rest;
              continue}
            return 0}}
        var _sm_=_sa_(h,key);
        return find_in_bucket(caml_check_bound(h[2],_sm_)[_sm_ + 1])}
      function _sf_(h,key,info)
       {function replace_bucket(param)
         {if(param)
           {var next=param[3],i=param[2],k=param[1];
            return caml_call2(_r$_[1],k,key)
                    ?[0,key,info,next]
                    :[0,k,i,replace_bucket(next)]}
          throw Not_found}
        var i=_sa_(h,key),l=caml_check_bound(h[2],i)[i + 1];
        try
         {var
           _sj_=replace_bucket(l),
           _sk_=caml_check_bound(h[2],i)[i + 1] = _sj_;
          return _sk_}
        catch(_sl_)
         {_sl_ = caml_wrap_exception(_sl_);
          if(_sl_ === Not_found)
           {caml_check_bound(h[2],i)[i + 1] = [0,key,info,l];
            h[1] = h[1] + 1 | 0;
            var _si_=h[2].length - 1 << 1 < h[1]?1:0;
            return _si_?_iR_(_sa_,h):_si_}
          throw _sl_}}
      return [0,
              _iM_,
              _iN_,
              _iO_,
              _iP_,
              _sb_,
              _sc_,
              _sd_,
              _se_,
              _sf_,
              function(h,key)
               {var
                 _sh_=_sa_(h,key),
                 param$0=caml_check_bound(h[2],_sh_)[_sh_ + 1],
                 param=param$0;
                for(;;)
                 {if(param)
                   {var
                     rest=param[3],
                     k=param[1],
                     _sg_=caml_call2(_r$_[1],k,key);
                    if(_sg_)return _sg_;
                    var param=rest;
                    continue}
                  return 0}},
              _iZ_,
              _i0_,
              _iQ_,
              _i2_]}
    var
     Hashtbl=
      [0,
       _iM_,
       _iN_,
       _iO_,
       _iP_,
       _iT_,
       _iV_,
       _iW_,
       _iY_,
       _iU_,
       _iX_,
       _iZ_,
       _i0_,
       _iQ_,
       _iK_,
       _i2_,
       function(_rU_)
        {var
          _rV_=_rU_[1],
          _rW_=_i3_([0,_rV_,function(seed,x){return caml_call1(_rU_[2],x)}]),
          _rX_=_rW_[1],
          _rY_=_rW_[2],
          _rZ_=_rW_[3],
          _r0_=_rW_[4],
          _r1_=_rW_[5],
          _r2_=_rW_[6],
          _r3_=_rW_[7],
          _r4_=_rW_[8],
          _r5_=_rW_[9],
          _r6_=_rW_[10],
          _r7_=_rW_[11],
          _r8_=_rW_[12],
          _r9_=_rW_[13],
          _r__=_rW_[14];
         return [0,
                 function(sz){return caml_call2(_rX_,_i4_,sz)},
                 _rY_,
                 _rZ_,
                 _r0_,
                 _r1_,
                 _r2_,
                 _r3_,
                 _r4_,
                 _r5_,
                 _r6_,
                 _r7_,
                 _r8_,
                 _r9_,
                 _r__]},
       _i3_,
       hash,
       seeded_hash,
       hash_param,
       caml_hash];
    caml_register_global(598,Hashtbl,"Hashtbl");
    function add_queue(x,q)
     {var c=[0,[0,x,0]],_rT_=q[1];
      if(_rT_){var cell=_rT_[1];q[1] = c;cell[2] = c;return 0}
      q[1] = c;
      q[2] = c;
      return 0}
    var Empty_queue=caml_set_oo_id([248,cst_Format_Empty_queue,0]);
    function take_queue(q)
     {var _rS_=q[2];
      if(_rS_)
       {var match=_rS_[1],x=match[1],tl=match[2];
        q[2] = tl;
        if(0 === tl)q[1] = 0;
        return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[27])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return pp_output_spaces(state,state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return pp_output_spaces(state,width)}
    function pp_force_break_line(state)
     {var _rP_=state[2];
      if(_rP_)
       {var
         match=_rP_[1],
         width=match[2],
         bl_ty=match[1],
         _rQ_=state[9] < width?1:0;
        if(_rQ_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _rR_=0}
        else
         var _rR_=_rQ_;
        return _rR_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[27]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _rE_=state[3];
          if(_rE_)
           {var
             match=_rE_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return runtime.caml_lessthan(n,x)
                          ?[0,n,ls]
                          :[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _rF_=state[2];
          if(_rF_){var ls=_rF_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _rG_=state[3];
          if(_rG_){var ls$0=_rG_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _rH_=state[2];
          if(_rH_)
           {var match$0=_rH_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _rI_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _rI_?pp_skip_token(state):_rI_;
         default:
          var _rJ_=state[5];
          if(_rJ_)
           {var
             tags=_rJ_[2],
             tag_name=_rJ_[1],
             marker=caml_call1(state[24],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_rK_=state[2];
          if(_rK_)
           {var match$1=_rK_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _rL_=state[3];
          if(_rL_)
           {var
             match$2=_rL_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _rM_=tabs$0[1];
            if(_rM_)
             {var x=_rM_[1];
              try
               {var _rN_=find(insertion_point,tabs$0[1]),x$0=_rN_}
              catch(_rO_)
               {_rO_ = caml_wrap_exception(_rO_);
                if(_rO_ !== Not_found)throw _rO_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[23],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _rA_=state[27][2];
        if(_rA_)
         {var
           match=_rA_[1],
           x=match[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _rB_=size < 0?1:0,
           _rC_=_rB_?(state[13] - state[12] | 0) < state[9]?1:0:_rB_,
           _rD_=1 - _rC_;
          if(_rD_)
           {take_queue(state[27]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _rD_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _ry_=advance_loop(state);return _ry_}
      catch(_rz_)
       {_rz_ = caml_wrap_exception(_rz_);
        if(_rz_ === Empty_queue)return 0;
        throw _rz_}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    var q_elem=[0,-1,_i5_,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _ru_=state[1];
      if(_ru_)
       {var
         match=_ru_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_ru_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _rw_=1 - ty,
             _rx_=
              _rw_?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):_rw_;
            return _rx_;
           case 1:
           case 2:
            var
             _rv_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _rv_
           }
        return 0}
      return 0}
    function scan_push(state,b,tok)
     {pp_enqueue(state,tok);
      if(b)set_size(state,1);
      state[1] = [0,[0,state[13],tok],state[1]];
      return 0}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var elem=[0,- state[13] | 0,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _rs_=state[14] === state[15]?1:0;
      if(_rs_)
       {var _rt_=state[16],len=caml_ml_string_length(_rt_);
        return enqueue_string_as(state,len,_rt_)}
      return _rs_}
    function pp_close_box(state,param)
     {var _rq_=1 < state[14]?1:0;
      if(_rq_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _rr_=0}
      else
       var _rr_=_rq_;
      return _rr_}
    function pp_open_tag(state,tag_name)
     {if(state[21])
       {state[4] = [0,tag_name,state[4]];caml_call1(state[25],tag_name)}
      var _rp_=state[22];
      return _rp_?pp_enqueue(state,[0,0,[5,tag_name],0]):_rp_}
    function pp_close_tag(state,param)
     {if(state[22])pp_enqueue(state,[0,0,5,0]);
      var _rm_=state[21];
      if(_rm_)
       {var _rn_=state[4];
        if(_rn_)
         {var tags=_rn_[2],tag_name=_rn_[1];
          caml_call1(state[26],tag_name);
          state[4] = tags;
          return 0}
        var _ro_=0}
      else
       var _ro_=_rm_;
      return _ro_}
    function pp_set_print_tags(state,b){state[21] = b;return 0}
    function pp_set_mark_tags(state,b){state[22] = b;return 0}
    function pp_get_print_tags(state,param){return state[21]}
    function pp_get_mark_tags(state,param){return state[22]}
    function pp_set_tags(state,b)
     {pp_set_print_tags(state,b);return pp_set_mark_tags(state,b)}
    function pp_get_formatter_tag_functions(state,param)
     {return [0,state[23],state[24],state[25],state[26]]}
    function pp_set_formatter_tag_functions(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      state[23] = mot;
      state[24] = mct;
      state[25] = pot;
      state[26] = pct;
      return 0}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      var _rl_=state[27];
      _rl_[1] = 0;
      _rl_[2] = 0;
      clear_scan_stack(state);
      state[2] = 0;
      state[3] = 0;
      state[4] = 0;
      state[5] = 0;
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _rk_=state[14] < state[15]?1:0;
      return _rk_?enqueue_string_as(state,size,s):_rk_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_new_string("" + i))}
    function pp_print_float(state,f)
     {return pp_print_string(state,string_of_float(f))}
    function pp_print_bool(state,b)
     {return pp_print_string(state,string_of_bool(b))}
    function pp_print_char(state,c){return pp_print_as(state,1,_bb_(1,c))}
    function pp_open_hbox(state,param){return pp_open_box_gen(state,0,0)}
    function pp_open_vbox(state,indent)
     {return pp_open_box_gen(state,indent,1)}
    function pp_open_hvbox(state,indent)
     {return pp_open_box_gen(state,indent,2)}
    function pp_open_hovbox(state,indent)
     {return pp_open_box_gen(state,indent,3)}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {pp_flush_queue(state,1);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _rj_=state[14] < state[15]?1:0;
      return _rj_?enqueue_advance(state,[0,0,3,0]):_rj_}
    function pp_print_if_newline(state,param)
     {var _ri_=state[14] < state[15]?1:0;
      return _ri_?enqueue_advance(state,[0,0,4,0]):_ri_}
    function pp_print_break(state,width,offset)
     {var _rh_=state[14] < state[15]?1:0;
      if(_rh_)
       {var elem=[0,- state[13] | 0,[1,width,offset],width];
        return scan_push(state,1,elem)}
      return _rh_}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_open_tbox(state,param)
     {state[14] = state[14] + 1 | 0;
      var _rg_=state[14] < state[15]?1:0;
      if(_rg_)
       {var elem=[0,0,[4,[0,[0,0]]],0];return enqueue_advance(state,elem)}
      return _rg_}
    function pp_close_tbox(state,param)
     {var _rd_=1 < state[14]?1:0;
      if(_rd_)
       {var _re_=state[14] < state[15]?1:0;
        if(_re_)
         {var elem=[0,0,2,0];
          enqueue_advance(state,elem);
          state[14] = state[14] - 1 | 0;
          var _rf_=0}
        else
         var _rf_=_re_}
      else
       var _rf_=_rd_;
      return _rf_}
    function pp_print_tbreak(state,width,offset)
     {var _rc_=state[14] < state[15]?1:0;
      if(_rc_)
       {var elem=[0,- state[13] | 0,[2,width,offset],width];
        return scan_push(state,1,elem)}
      return _rc_}
    function pp_print_tab(state,param){return pp_print_tbreak(state,0,0)}
    function pp_set_tab(state,param)
     {var _rb_=state[14] < state[15]?1:0;
      if(_rb_){var elem=[0,0,0,0];return enqueue_advance(state,elem)}
      return _rb_}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _q$_=param$0[2],_ra_=param$0[1];
          if(_q$_)
           {caml_call2(pp_v,ppf,_ra_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=_q$_;
            continue}
          return caml_call2(pp_v,ppf,_ra_)}
        return 0}}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {pp_print_string(ppf,_be_(s,left[1],right[1] - left[1] | 0));
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] !== len)
         {var match=caml_string_get(s,right[1]);
          if(10 === match)
           {flush(0);pp_force_newline(ppf,0)}
          else
           if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++;
          continue}
        var _q__=left[1] !== len?1:0;
        return _q__?flush(0):_q__}}
    function pp_set_max_boxes(state,n)
     {var _q8_=1 < n?1:0,_q9_=_q8_?(state[15] = n,0):_q8_;return _q9_}
    function pp_get_max_boxes(state,param){return state[15]}
    function pp_over_max_boxes(state,param)
     {return state[14] === state[15]?1:0}
    function pp_set_ellipsis_text(state,s){state[16] = s;return 0}
    function pp_get_ellipsis_text(state,param){return state[16]}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var n$1=state[6] - n$0 | 0,_q7_=1 <= n$1?1:0;
      if(_q7_)
       {var n=pp_limit(n$1);
        state[7] = n;
        state[8] = state[6] - state[7] | 0;
        return pp_rinit(state)}
      return _q7_}
    function pp_get_max_indent(state,param){return state[8]}
    function pp_set_margin(state,n)
     {var _q6_=1 <= n?1:0;
      if(_q6_)
       {var n$0=pp_limit(n);
        state[6] = n$0;
        var
         new_max_indent=
          state[8] <= state[6]
           ?state[8]
           :max(max(state[6] - state[7] | 0,state[6] / 2 | 0),1);
        return pp_set_max_indent(state,new_max_indent)}
      return _q6_}
    function pp_get_margin(state,param){return state[6]}
    function pp_set_formatter_out_functions(state,param)
     {var i=param[4],h=param[3],g=param[2],f=param[1];
      state[17] = f;
      state[18] = g;
      state[19] = h;
      state[20] = i;
      return 0}
    function pp_get_formatter_out_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20]]}
    function pp_set_formatter_output_functions(state,f,g)
     {state[17] = f;state[18] = g;return 0}
    function pp_get_formatter_output_functions(state,param)
     {return [0,state[17],state[18]]}
    function pp_set_all_formatter_output_functions(state,f,g,h,i)
     {pp_set_formatter_output_functions(state,f,g);
      state[19] = h;
      state[20] = i;
      return 0}
    function pp_get_all_formatter_output_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20]]}
    function display_newline(state,param)
     {return caml_call3(state[17],cst$65,0,1)}
    var blank_line=_bb_(80,32);
    function display_blanks(state,n)
     {var n$0=n;
      for(;;)
       {var _q5_=0 < n$0?1:0;
        if(_q5_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _q5_}}
    function pp_set_formatter_out_channel(state,os)
     {state[17]
      =
      function(_q2_,_q3_,_q4_){return output_substring(os,_q2_,_q3_,_q4_)};
      state[18] = function(param){return caml_ml_flush(os)};
      state[19] = function(_q1_){return display_newline(state,_q1_)};
      state[20] = function(_q0_){return display_blanks(state,_q0_)};
      return 0}
    function default_pp_mark_open_tag(s){return _j_(cst$67,_j_(s,cst$66))}
    function default_pp_mark_close_tag(s){return _j_(cst$69,_j_(s,cst$68))}
    function default_pp_print_open_tag(_qZ_){return 0}
    function default_pp_print_close_tag(_qY_){return 0}
    function make_formatter(output,flush)
     {function i(_qX_){return 0}
      function h(_qW_){return 0}
      var pp_q=[0,0,0],sys_tok=[0,-1,_i6_,0];
      add_queue(sys_tok,pp_q);
      var
       sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom],
       ppf=
        [0,
         sys_scan_stack,
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max_int,
         cst$70,
         output,
         flush,
         h,
         i,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_q];
      ppf[19] = function(_qV_){return display_newline(ppf,_qV_)};
      ppf[20] = function(_qU_){return display_blanks(ppf,_qU_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _qQ_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(_qR_,_qS_,_qT_)
                {return output_substring(oc,_qR_,_qS_,_qT_)},
               _qQ_)}
    function formatter_of_buffer(b)
     {function _qL_(_qP_){return 0}
      return make_formatter
              (function(_qM_,_qN_,_qO_){return _eN_(b,_qM_,_qN_,_qO_)},_qL_)}
    var
     stdbuf=_eC_(512),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr),
     str_formatter=formatter_of_buffer(stdbuf);
    function flush_str_formatter(param)
     {pp_flush_queue(str_formatter,0);
      var s=_eD_(stdbuf);
      _eK_(stdbuf);
      return s}
    function flush_buf_formatter(buf,ppf)
     {pp_flush_queue(ppf,0);var s=_eD_(buf);_eK_(buf);return s}
    function open_hbox(_qK_){return pp_open_hbox(std_formatter,_qK_)}
    function open_vbox(_qJ_){return pp_open_vbox(std_formatter,_qJ_)}
    function open_hvbox(_qI_){return pp_open_hvbox(std_formatter,_qI_)}
    function open_hovbox(_qH_){return pp_open_hovbox(std_formatter,_qH_)}
    function open_box(_qG_){return pp_open_box(std_formatter,_qG_)}
    function close_box(_qF_){return pp_close_box(std_formatter,_qF_)}
    function open_tag(_qE_){return pp_open_tag(std_formatter,_qE_)}
    function close_tag(_qD_){return pp_close_tag(std_formatter,_qD_)}
    function print_as(_qB_,_qC_){return pp_print_as(std_formatter,_qB_,_qC_)}
    function print_string$0(_qA_){return pp_print_string(std_formatter,_qA_)}
    function print_int$0(_qz_){return pp_print_int(std_formatter,_qz_)}
    function print_float$0(_qy_){return pp_print_float(std_formatter,_qy_)}
    function print_char$0(_qx_){return pp_print_char(std_formatter,_qx_)}
    function print_bool(_qw_){return pp_print_bool(std_formatter,_qw_)}
    function print_break(_qu_,_qv_)
     {return pp_print_break(std_formatter,_qu_,_qv_)}
    function print_cut(_qt_){return pp_print_cut(std_formatter,_qt_)}
    function print_space(_qs_){return pp_print_space(std_formatter,_qs_)}
    function force_newline(_qr_){return pp_force_newline(std_formatter,_qr_)}
    function print_flush(_qq_){return pp_print_flush(std_formatter,_qq_)}
    function print_newline$0(_qp_)
     {return pp_print_newline(std_formatter,_qp_)}
    function print_if_newline(_qo_)
     {return pp_print_if_newline(std_formatter,_qo_)}
    function open_tbox(_qn_){return pp_open_tbox(std_formatter,_qn_)}
    function close_tbox(_qm_){return pp_close_tbox(std_formatter,_qm_)}
    function print_tbreak(_qk_,_ql_)
     {return pp_print_tbreak(std_formatter,_qk_,_ql_)}
    function set_tab(_qj_){return pp_set_tab(std_formatter,_qj_)}
    function print_tab(_qi_){return pp_print_tab(std_formatter,_qi_)}
    function set_margin(_qh_){return pp_set_margin(std_formatter,_qh_)}
    function get_margin(_qg_){return std_formatter[6]}
    function set_max_indent(_qf_)
     {return pp_set_max_indent(std_formatter,_qf_)}
    function get_max_indent(_qe_){return std_formatter[8]}
    function set_max_boxes(_qd_){return pp_set_max_boxes(std_formatter,_qd_)}
    function get_max_boxes(_qc_){return std_formatter[15]}
    function over_max_boxes(_qb_)
     {return pp_over_max_boxes(std_formatter,_qb_)}
    function set_ellipsis_text(_qa_)
     {return pp_set_ellipsis_text(std_formatter,_qa_)}
    function get_ellipsis_text(_p$_){return std_formatter[16]}
    function set_formatter_out_channel(_p__)
     {return pp_set_formatter_out_channel(std_formatter,_p__)}
    function set_formatter_out_functions(_p9_)
     {return pp_set_formatter_out_functions(std_formatter,_p9_)}
    function get_formatter_out_functions(_p8_)
     {return pp_get_formatter_out_functions(std_formatter,_p8_)}
    function set_formatter_output_functions(_p6_,_p7_)
     {return pp_set_formatter_output_functions(std_formatter,_p6_,_p7_)}
    function get_formatter_output_functions(_p5_)
     {return pp_get_formatter_output_functions(std_formatter,_p5_)}
    function set_all_formatter_output_functions(_p1_,_p2_,_p3_,_p4_)
     {return pp_set_all_formatter_output_functions
              (std_formatter,_p1_,_p2_,_p3_,_p4_)}
    function get_all_formatter_output_functions(_p0_)
     {return pp_get_all_formatter_output_functions(std_formatter,_p0_)}
    function set_formatter_tag_functions(_pZ_)
     {return pp_set_formatter_tag_functions(std_formatter,_pZ_)}
    function get_formatter_tag_functions(_pY_)
     {return pp_get_formatter_tag_functions(std_formatter,_pY_)}
    function set_print_tags(_pX_)
     {return pp_set_print_tags(std_formatter,_pX_)}
    function get_print_tags(_pW_){return std_formatter[21]}
    function set_mark_tags(_pV_){return pp_set_mark_tags(std_formatter,_pV_)}
    function get_mark_tags(_pU_){return std_formatter[22]}
    function set_tags(_pT_){return pp_set_tags(std_formatter,_pT_)}
    function compute_tag(output,tag_acc)
     {var buf=_eC_(16),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=buf[2];
      return 2 <= len?_eF_(buf,1,len - 2 | 0):_eD_(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_tag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      else
       switch(fmting_lit[0])
        {case 0:
          var offset=fmting_lit[3],width=fmting_lit[2];
          return pp_print_break(ppf,width,offset);
         case 1:return 0;
         default:
          var c=fmting_lit[1];
          pp_print_char(ppf,64);
          return pp_print_char(ppf,c)}}
    function output_acc(ppf,acc)
     {if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _pJ_=acc[2],_pK_=acc[1];
          if(0 === _pJ_[0])
           {var acc$0=_pJ_[1];
            output_acc(ppf,_pK_);
            return pp_open_tag(ppf,compute_tag(output_acc,acc$0))}
          var acc$1=_pJ_[1];
          output_acc(ppf,_pK_);
          var
           match=_gs_(compute_tag(output_acc,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _pL_=acc[1];
          if(typeof _pL_ === "number")
           var switch$1=1;
          else
           if(0 === _pL_[0])
            {var _pM_=_pL_[2];
             if(typeof _pM_ === "number")
              var switch$2=1;
             else
              if(1 === _pM_[0])
               var
                s$0=acc[2],
                size=_pM_[2],
                p$1=_pL_[1],
                switch$0=0,
                switch$1=0,
                switch$2=0;
              else
               var switch$2=1;
             if(switch$2)var switch$1=1}
           else
            var switch$1=1;
          if(switch$1)var s=acc[2],p$0=_pL_,switch$0=2;
          break;
         case 3:
          var _pN_=acc[1];
          if(typeof _pN_ === "number")
           var switch$3=1;
          else
           if(0 === _pN_[0])
            {var _pO_=_pN_[2];
             if(typeof _pO_ === "number")
              var switch$4=1;
             else
              if(1 === _pO_[0])
               var
                c$0=acc[2],
                size$0=_pO_[2],
                p$3=_pN_[1],
                switch$0=1,
                switch$3=0,
                switch$4=0;
              else
               var switch$4=1;
             if(switch$4)var switch$3=1}
           else
            var switch$3=1;
          if(switch$3)var c=acc[2],p$2=_pN_,switch$0=3;
          break;
         case 4:
          var _pP_=acc[1];
          if(typeof _pP_ === "number")
           var switch$5=1;
          else
           if(0 === _pP_[0])
            {var _pQ_=_pP_[2];
             if(typeof _pQ_ === "number")
              var switch$6=1;
             else
              if(1 === _pQ_[0])
               var
                s$0=acc[2],
                size=_pQ_[2],
                p$1=_pP_[1],
                switch$0=0,
                switch$5=0,
                switch$6=0;
              else
               var switch$6=1;
             if(switch$6)var switch$5=1}
           else
            var switch$5=1;
          if(switch$5)var s=acc[2],p$0=_pP_,switch$0=2;
          break;
         case 5:
          var _pR_=acc[1];
          if(typeof _pR_ === "number")
           var switch$7=1;
          else
           if(0 === _pR_[0])
            {var _pS_=_pR_[2];
             if(typeof _pS_ === "number")
              var switch$8=1;
             else
              if(1 === _pS_[0])
               var
                c$0=acc[2],
                size$0=_pS_[2],
                p$3=_pR_[1],
                switch$0=1,
                switch$7=0,
                switch$8=0;
              else
               var switch$8=1;
             if(switch$8)var switch$7=1}
           else
            var switch$7=1;
          if(switch$7)var c=acc[2],p$2=_pR_,switch$0=3;
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc(ppf,p$3);return pp_print_as_size(ppf,size$0,_bb_(1,c$0));
        case 2:output_acc(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc(ppf,acc)
     {if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          strput_acc(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _px_=acc[2],_py_=acc[1];
          if(0 === _px_[0])
           {var acc$0=_px_[1];
            strput_acc(ppf,_py_);
            return pp_open_tag(ppf,compute_tag(strput_acc,acc$0))}
          var acc$1=_px_[1];
          strput_acc(ppf,_py_);
          var
           match=_gs_(compute_tag(strput_acc,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _pz_=acc[1];
          if(typeof _pz_ === "number")
           var switch$1=1;
          else
           if(0 === _pz_[0])
            {var _pA_=_pz_[2];
             if(typeof _pA_ === "number")
              var switch$2=1;
             else
              if(1 === _pA_[0])
               var
                s$0=acc[2],
                size=_pA_[2],
                p$1=_pz_[1],
                switch$0=0,
                switch$1=0,
                switch$2=0;
              else
               var switch$2=1;
             if(switch$2)var switch$1=1}
           else
            var switch$1=1;
          if(switch$1)var s=acc[2],p$0=_pz_,switch$0=2;
          break;
         case 3:
          var _pB_=acc[1];
          if(typeof _pB_ === "number")
           var switch$3=1;
          else
           if(0 === _pB_[0])
            {var _pC_=_pB_[2];
             if(typeof _pC_ === "number")
              var switch$4=1;
             else
              if(1 === _pC_[0])
               var
                c$0=acc[2],
                size$0=_pC_[2],
                p$3=_pB_[1],
                switch$0=1,
                switch$3=0,
                switch$4=0;
              else
               var switch$4=1;
             if(switch$4)var switch$3=1}
           else
            var switch$3=1;
          if(switch$3)var c=acc[2],p$2=_pB_,switch$0=3;
          break;
         case 4:
          var _pD_=acc[1];
          if(typeof _pD_ === "number")
           var switch$5=1;
          else
           if(0 === _pD_[0])
            {var _pE_=_pD_[2];
             if(typeof _pE_ === "number")
              var switch$6=1;
             else
              if(1 === _pE_[0])
               var
                s$0=acc[2],
                size=_pE_[2],
                p$1=_pD_[1],
                switch$0=0,
                switch$5=0,
                switch$6=0;
              else
               var switch$6=1;
             if(switch$6)var switch$5=1}
           else
            var switch$5=1;
          if(switch$5)var s=acc[2],p$0=_pD_,switch$0=2;
          break;
         case 5:
          var _pF_=acc[1];
          if(typeof _pF_ === "number")
           var switch$7=1;
          else
           if(0 === _pF_[0])
            {var _pG_=_pF_[2];
             if(typeof _pG_ === "number")
              var switch$8=1;
             else
              if(1 === _pG_[0])
               var
                c$0=acc[2],
                size$0=_pG_[2],
                p$3=_pF_[1],
                switch$0=1,
                switch$7=0,
                switch$8=0;
              else
               var switch$8=1;
             if(switch$8)var switch$7=1}
           else
            var switch$7=1;
          if(switch$7)var c=acc[2],p$2=_pF_,switch$0=3;
          break;
         case 6:
          var _pH_=acc[1];
          if(typeof _pH_ !== "number" && 0 === _pH_[0])
           {var _pI_=_pH_[2];
            if(typeof _pI_ !== "number" && 1 === _pI_[0])
             {var f$1=acc[2],size$1=_pI_[2],p$4=_pH_[1];
              strput_acc(ppf,p$4);
              return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
          var f$0=acc[2];
          strput_acc(ppf,_pH_);
          return pp_print_string(ppf,caml_call1(f$0,0));
         case 7:
          var p$5=acc[1];strput_acc(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          strput_acc(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:strput_acc(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         strput_acc(ppf,p$3);return pp_print_as_size(ppf,size$0,_bb_(1,c$0));
        case 2:strput_acc(ppf,p$0);return pp_print_string(ppf,s);
        default:strput_acc(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf(k,o,param)
     {var fmt=param[1],_pw_=0;
      return _gf_
              (function(o,acc){output_acc(o,acc);return caml_call1(k,o)},
               o,
               _pw_,
               fmt)}
    function ikfprintf(k,x,param)
     {var fmt=param[1],_pu_=0;
      return _gf_(function(param,_pv_){return caml_call1(k,x)},x,_pu_,fmt)}
    function fprintf(ppf,fmt)
     {return kfprintf(function(_pt_){return 0},ppf,fmt)}
    function ifprintf(ppf,fmt)
     {return ikfprintf(function(_ps_){return 0},ppf,fmt)}
    function printf(fmt){return fprintf(std_formatter,fmt)}
    function eprintf(fmt){return fprintf(err_formatter,fmt)}
    function kprintf(k,param)
     {var fmt=param[1],b=_eC_(512),ppf=formatter_of_buffer(b);
      function k$0(param,acc)
       {strput_acc(ppf,acc);return caml_call1(k,flush_buf_formatter(b,ppf))}
      return _gf_(k$0,0,0,fmt)}
    function sprintf(fmt){return kprintf(function(s){return s},fmt)}
    function asprintf(param)
     {var fmt=param[1],b=_eC_(512),ppf=formatter_of_buffer(b);
      function k(ppf,acc)
       {output_acc(ppf,acc);
        pp_flush_queue(ppf,0);
        return flush_buf_formatter(b,ppf)}
      return _gf_(k,ppf,0,fmt)}
    function bprintf(b,param)
     {var fmt=param[1];
      function k(ppf,acc){output_acc(ppf,acc);return pp_flush_queue(ppf,0)}
      return _gf_(k,formatter_of_buffer(b),0,fmt)}
    at_exit(print_flush);
    var
     Format=
      [0,
       open_box,
       close_box,
       print_string$0,
       print_as,
       print_int$0,
       print_float$0,
       print_char$0,
       print_bool,
       print_space,
       print_cut,
       print_break,
       print_flush,
       print_newline$0,
       force_newline,
       print_if_newline,
       set_margin,
       get_margin,
       set_max_indent,
       get_max_indent,
       set_max_boxes,
       get_max_boxes,
       over_max_boxes,
       open_hbox,
       open_vbox,
       open_hvbox,
       open_hovbox,
       open_tbox,
       close_tbox,
       print_tbreak,
       set_tab,
       print_tab,
       set_ellipsis_text,
       get_ellipsis_text,
       open_tag,
       close_tag,
       set_tags,
       set_print_tags,
       set_mark_tags,
       get_print_tags,
       get_mark_tags,
       set_formatter_out_channel,
       set_formatter_output_functions,
       get_formatter_output_functions,
       set_formatter_out_functions,
       get_formatter_out_functions,
       set_formatter_tag_functions,
       get_formatter_tag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       pp_open_hbox,
       pp_open_vbox,
       pp_open_hvbox,
       pp_open_hovbox,
       pp_open_box,
       pp_close_box,
       pp_open_tag,
       pp_close_tag,
       pp_print_string,
       pp_print_as,
       pp_print_int,
       pp_print_float,
       pp_print_char,
       pp_print_bool,
       pp_print_break,
       pp_print_cut,
       pp_print_space,
       pp_force_newline,
       pp_print_flush,
       pp_print_newline,
       pp_print_if_newline,
       pp_open_tbox,
       pp_close_tbox,
       pp_print_tbreak,
       pp_set_tab,
       pp_print_tab,
       pp_set_tags,
       pp_set_print_tags,
       pp_set_mark_tags,
       pp_get_print_tags,
       pp_get_mark_tags,
       pp_set_margin,
       pp_get_margin,
       pp_set_max_indent,
       pp_get_max_indent,
       pp_set_max_boxes,
       pp_get_max_boxes,
       pp_over_max_boxes,
       pp_set_ellipsis_text,
       pp_get_ellipsis_text,
       pp_set_formatter_out_channel,
       pp_set_formatter_output_functions,
       pp_get_formatter_output_functions,
       pp_set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       pp_set_formatter_out_functions,
       pp_get_formatter_out_functions,
       pp_print_list,
       pp_print_text,
       fprintf,
       printf,
       eprintf,
       sprintf,
       asprintf,
       ifprintf,
       kfprintf,
       ikfprintf,
       kprintf,
       bprintf,
       kprintf,
       set_all_formatter_output_functions,
       get_all_formatter_output_functions,
       pp_set_all_formatter_output_functions,
       pp_get_all_formatter_output_functions];
    caml_register_global(599,Format,"Format");
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_pr_)
       {_pr_ = caml_wrap_exception(_pr_);
        if(_pr_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _pr_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function beginning_of_input(ib){return 0 === ib[4]?1:0}
    function name_of_input(ib)
     {var _pq_=ib[9];
      if(typeof _pq_ === "number")
       return 0 === _pq_?cst_unnamed_character_string:cst_unnamed_function;
      else
       {if(0 === _pq_[0]){var fname=_pq_[1];return fname}
        return cst_unnamed_pervasives_input_channel}}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return _eK_(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var tokbuf=ib[8],tok=_eD_(tokbuf);
      _eJ_(tokbuf);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {_eM_(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              _eC_(default_token_buffer_size),
              iname]}
    function from_string(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      return create(0,next)}
    var _i7_=1;
    function from_function(_pp_){return create(_i7_,_pp_)}
    var len=1024;
    function scan_close_at_end(ic)
     {caml_ml_close_channel(ic);throw End_of_file}
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_string(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_string_get(buf,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        lim[1] = input(ic,buf,0,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_string_get(buf,0))}
      return create(iname,next)}
    function from_ic_close_at_end(_pn_,_po_)
     {return from_ic(scan_close_at_end,_pn_,_po_)}
    var stdib=from_ic(scan_raise_at_end,[0,cst$71,stdin],stdin);
    function from_file(fname)
     {if(caml_string_notequal(fname,cst$72))
       {var ic=open_in(fname);return from_ic_close_at_end([0,fname,ic],ic)}
      return stdib}
    function from_file_bin(fname)
     {if(caml_string_notequal(fname,cst$73))
       {var ic=open_in_bin(fname);
        return from_ic_close_at_end([0,fname,ic],ic)}
      return stdib}
    var memo=[0,0];
    function memo_from_ic(scan_close_ic,ic)
     {try
       {var _pl_=_aj_(ic,memo[1]);return _pl_}
      catch(_pm_)
       {_pm_ = caml_wrap_exception(_pm_);
        if(_pm_ === Not_found)
         {var ib=from_ic(scan_close_ic,[1,ic],ic);
          memo[1] = [0,[0,ic,ib],memo[1]];
          return ib}
        throw _pm_}}
    function _i8_(_pk_){return memo_from_ic(scan_raise_at_end,_pk_)}
    function _i9_(ib)
     {var _pj_=ib[9];
      if(typeof _pj_ === "number")
       return 0;
      else
       {if(0 === _pj_[0]){var ic=_pj_[2];return caml_ml_close_channel(ic)}
        var ic$0=_pj_[1];
        return caml_ml_close_channel(ic$0)}}
    var Scan_failure=caml_set_oo_id([248,cst_Scanf_Scan_failure,0]);
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c){return bad_input(caml_call1(_ha_(_i__),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(_ha_(_i$_),message))}
    function bad_float(param)
     {return bad_input(cst_no_dot_or_exponent_part_found_in_float_token)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(_ha_(_jb_),c,ci))}
    function check_char(ib,c$0)
     {var c$1=c$0;
      for(;;)
       {if(32 === c$1)
         for(;;)
          {var c=peek_char(ib),_ph_=1 - ib[1];
           if(_ph_)
            {var
              _pi_=c - 9 | 0,
              switch$0=
               4 < _pi_ >>> 0?23 === _pi_?1:0:1 < (_pi_ - 2 | 0) >>> 0?1:0;
             if(switch$0){invalidate_current_char(ib);continue}
             return 0}
           return _ph_}
        var ci=checked_peek_char(ib);
        if(ci === c$1)return invalidate_current_char(ib);
        if(13 === ci)
         if(10 === c$1){invalidate_current_char(ib);var c$1=10;continue}
        return character_mismatch(c$1,ci)}}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,cst_false$1)
              ?caml_string_notequal(s,cst_true$1)
                ?bad_input(caml_call1(_ha_(_jc_),s))
                :1
              :0}
    function token_int_literal(conv,ib)
     {var switcher=conv - 88 | 0;
      if(! (32 < switcher >>> 0))
       {switch(switcher)
         {case 10:var _pg_=_j_(cst_0b,token_string(ib)),switch$0=0;break;
          case 23:var _pg_=_j_(cst_0o,token_string(ib)),switch$0=0;break;
          case 0:
          case 32:var tok=_j_(cst_0x,token_string(ib)),switch$0=2;break;
          case 12:
          case 17:
          case 29:var tok=token_string(ib),switch$0=2;break;
          default:var switch$0=1}
        switch(switch$0)
         {case 0:var tok=_pg_,switch$1=1;break;
          case 1:var switch$1=0;break;
          default:var switch$1=1}
        if(switch$1)
         {var l=caml_ml_string_length(tok);
          if(0 !== l)
           if(43 === caml_string_get(tok,0))return _be_(tok,1,l - 1 | 0);
          return tok}}
      throw [0,Assert_failure,_jd_]}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digits(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(cst_decimal_digits);
      var c=checked_peek_char(ib),switcher=c - 48 | 0;
      if(9 < switcher >>> 0)return bad_input(caml_call1(_ha_(_je_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digits(width$0,ib)}
    function scan_digits_plus(basis,digitp,width,ib)
     {if(0 === width)return bad_token_length(cst_digits);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width,ib,c$0),width$0=width$3;
        for(;;)
         {if(0 === width$0)return width$0;
          var c=peek_char(ib);
          if(ib[1])return width$0;
          if(caml_call1(digitp,c))
           {var width$1=store_char(width$0,ib,c),width$0=width$1;continue}
          if(95 === c)
           {var width$2=ignore_char(width$0,ib),width$0=width$2;continue}
          return width$0}}
      return bad_input(caml_call2(_ha_(_jf_),c$0,basis))}
    function is_binary_digit(param)
     {var switcher=param - 48 | 0;return 1 < switcher >>> 0?0:1}
    function scan_binary_int(_pe_,_pf_)
     {return scan_digits_plus(cst_binary,is_binary_digit,_pe_,_pf_)}
    function is_octal_digit(param)
     {var switcher=param - 48 | 0;return 7 < switcher >>> 0?0:1}
    function scan_octal_int(_pc_,_pd_)
     {return scan_digits_plus(cst_octal,is_octal_digit,_pc_,_pd_)}
    function is_hexa_digit(param)
     {var
       _pb_=param - 48 | 0,
       switch$0=
        22 < _pb_ >>> 0
         ?5 < (_pb_ - 49 | 0) >>> 0?0:1
         :6 < (_pb_ - 10 | 0) >>> 0?1:0;
      return switch$0?1:0}
    function scan_hexadecimal_int(_o$_,_pa_)
     {return scan_digits_plus(cst_hexadecimal,is_hexa_digit,_o$_,_pa_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal_int(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conv(conv,width$1,ib)
     {var switcher=conv - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return scan_binary_int(width$1,ib);
         case 12:return scan_optionally_signed_decimal_int(width$1,ib);
         case 17:
          var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
          if(48 === c)
           {var width=store_char(width$0,ib,c);
            if(0 === width)return width;
            var c$0=peek_char(ib);
            if(ib[1])return width;
            if(99 <= c$0)
             {if(111 === c$0)
               return scan_octal_int(store_char(width,ib,c$0),ib);
              var switch$0=120 === c$0?1:0}
            else
             if(88 === c$0)
              var switch$0=1;
             else
              {if(98 <= c$0)
                return scan_binary_int(store_char(width,ib,c$0),ib);
               var switch$0=0}
            return switch$0
                    ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                    :scan_decimal_digits(width,ib)}
          return scan_unsigned_decimal_int(width$0,ib);
         case 23:return scan_octal_int(width$1,ib);
         case 29:return scan_unsigned_decimal_int(width$1,ib);
         case 0:
         case 32:return scan_hexadecimal_int(width$1,ib)
         }
      throw [0,Assert_failure,_jg_]}
    function scan_frac_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      var switcher=c - 48 | 0;
      return 9 < switcher >>> 0
              ?width
              :scan_decimal_digits(store_char(width,ib,c),ib)}
    function scan_exp_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c)if(101 !== c)return width;
      return scan_optionally_signed_decimal_int(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var width=scan_sign(width$1,ib),width$0=scan_decimal_digits(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_frac_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exp_part(width$3,ib),precision$0]}
      return [0,scan_exp_part(width$0,ib),precision]}
    function scan_caml_float(width,precision,ib)
     {var width$0=scan_optionally_signed_decimal_int(width,ib);
      if(0 === width$0)return bad_float(0);
      var c=peek_char(ib);
      if(ib[1])return bad_float(0);
      var switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min(width$1,precision),
           width$2=
            width$1
            -
            (precision$0 - scan_frac_part(precision$0,ib) | 0)
            |
            0;
          return scan_exp_part(width$2,ib)}}
      else
       {var switcher$0=switcher - 1 | 0;
        if(30 < switcher$0 >>> 0)return scan_exp_part(width$0,ib)}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var
         _o__=c - 9 | 0,
         switch$0=4 < _o__ >>> 0?23 === _o__?1:0:1 < (_o__ - 2 | 0) >>> 0?1:0;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(_ha_(_ja_),message)):c}
    function check_next_char_for_char(_o8_,_o9_)
     {return check_next_char(cst_a_Char,_o8_,_o9_)}
    function _jj_(_o6_,_o7_){return check_next_char(cst_a_String,_o6_,_o7_)}
    function _jk_(width,ib)
     {var c0=check_next_char_for_char(width,ib);
      if(40 <= c0)
       if(58 <= c0)
        {var switcher$0=c0 - 92 | 0;
         if(28 < switcher$0 >>> 0)
          var switch$0=0;
         else
          switch(switcher$0)
           {case 28:
             var
              get_digit=
               function(param)
                {var
                  c=next_char(ib),
                  _o5_=c - 48 | 0,
                  switch$0=
                   22 < _o5_ >>> 0
                    ?5 < (_o5_ - 49 | 0) >>> 0?0:1
                    :6 < (_o5_ - 10 | 0) >>> 0?1:0;
                 return switch$0?c:bad_input_escape(c)},
              c1=get_digit(0),
              c2=get_digit(0),
              _o1_=hexadecimal_value_of_char(c2),
              c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _o1_ | 0;
             if(0 <= c$0)
              if(255 < c$0)
               var switch$1=0;
              else
               var _o3_=char_of_int(c$0),switch$1=1;
             else
              var switch$1=0;
             if(! switch$1)var _o3_=bad_input(caml_call2(_ha_(_ji_),c1,c2));
             return store_char(width - 2 | 0,ib,_o3_);
            case 0:
            case 6:
            case 18:
            case 22:
            case 24:var switch$0=1;break;
            default:var switch$0=0}}
       else
        {if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib),switcher=c - 48 | 0;
               return 9 < switcher >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0;
           if(0 <= c)
            if(255 < c)var switch$2=0;else var _o4_=char_of_int(c),switch$2=1;
           else
            var switch$2=0;
           if(! switch$2)
            var _o4_=bad_input(caml_call3(_ha_(_jh_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_o4_)}
         var switch$0=0}
      else
       var switch$0=34 === c0?1:39 <= c0?1:0;
      if(switch$0)
       {if(110 <= c0)
         if(117 <= c0)
          var switch$3=0;
         else
          {var switcher=c0 - 110 | 0;
           switch(switcher)
            {case 0:var _o2_=10,switch$3=1;break;
             case 4:var _o2_=13,switch$3=1;break;
             case 6:var _o2_=9,switch$3=1;break;
             default:var switch$3=0}}
        else
         if(98 === c0)var _o2_=8,switch$3=1;else var switch$3=0;
        if(! switch$3)var _o2_=c0;
        return store_char(width,ib,_o2_)}
      return bad_input_escape(c0)}
    function _jl_(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(_jk_(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function _jm_(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=_jj_(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var width$1=ignore_char(width$0,ib),match=_jj_(width$1,ib);
            if(10 === match)
             {var _oZ_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_oZ_)}
              return caml_trampoline_return(skip_spaces,[0,_oZ_])}
            if(13 === match)
             {var width$3=ignore_char(width$1,ib),match$0=_jj_(width$3,ib);
              if(10 === match$0)
               {var _o0_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_o0_)}
                return caml_trampoline_return(skip_spaces,[0,_o0_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=_jk_(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=_jj_(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function _jn_(ib)
     {var
       c=checked_peek_char(ib),
       m=102 === c?5:116 === c?4:bad_input(caml_call1(_ha_(_jo_),c));
      return scan_string(0,m,ib)}
    function _jp_(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_oV_=0 < i$0?1:0;
          if(_oV_)
           {var _oW_=1 - ib[1];
            if(_oW_)
             var _oX_=_eZ_(char_set,c),_oY_=_oX_?c !== stp?1:0:_oX_;
            else
             var _oY_=_oW_}
          else
           var _oY_=_oV_;
          if(_oY_)
           {store_char(max_int,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _oY_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _oU_=1 - ib[1];
        if(_oU_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _oU_}
      return scan_chars(width,-1)}
    function _jq_(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(_ha_(_jr_),i,s))}
    function _js_(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function _jt_(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_int}
    function _ju_(fmting)
     {if(6 === fmting)return _jv_;
      var
       str=_fg_(fmting),
       stp=caml_string_get(str,1),
       sub_str=_be_(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function _lt_(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[1],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_oS_=_a_(_fn_(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;return _ls_(counter$0,k,_oS_,rest)}
           return caml_trampoline_return(_ls_,[0,k,_oS_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _oT_=fmt$0[1];
           if(0 === _oT_[0])
            {var
              rest$0=fmt$0[2],
              match=_oT_[1],
              fmt$18=match[1],
              fmt$19=_c_(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_oT_[1],
            fmt$20=match$0[1],
            fmt$21=_c_(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return _jw_(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return _jw_(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return _ls_(counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return(_ls_,[0,k,fmtty$0,rest$2]);
              case 9:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function _ls_(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;return _lt_(counter$0,k,fmt)}
         return caml_trampoline_return(_lt_,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=_fp_(_fn_(ty1),ty2),
            fmtty$10=_b_(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return _jx_(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return _jx_(new_k,fmt_rest$0,fmt)}}}
    function _jw_(k,fmt){return caml_trampoline(_lt_(0,k,fmt))}
    function _jx_(k,fmtty,fmt){return caml_trampoline(_ls_(0,k,fmtty,fmt))}
    function _jz_(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(0 === prec)
           {caml_call3(scan,max_int,max_int,ib);
            var x=caml_call1(token,ib);
            return [0,x,_jy_(ib,fmt,readers)]}
          return invalid_arg(cst_scanf_bad_conversion)}
        var p=prec[1];
        caml_call3(scan,max_int,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,_jy_(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(0 === pad[1])return invalid_arg(cst_scanf_bad_conversion$0);
          var _oR_=pad[2];
          if(typeof prec === "number")
           {if(0 === prec)
             {caml_call3(scan,_oR_,max_int,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,_jy_(ib,fmt,readers)]}
            return invalid_arg(cst_scanf_bad_conversion$1)}
          var p$0=prec[1];
          caml_call3(scan,_oR_,p$0,ib);
          var x$2=caml_call1(token,ib);
          return [0,x$2,_jy_(ib,fmt,readers)]}
        return invalid_arg(cst_scanf_bad_conversion$2)}}
    function _jy_(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return 0;
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,_jy_(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1];
           _jl_(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,_jy_(ib,rest$0,readers)];
          case 2:
           var _oE_=fmt$0[2],_oF_=fmt$0[1];
           if(typeof _oE_ !== "number")
            switch(_oE_[0])
             {case 17:
               var
                rest$1=_oE_[2],
                fmting_lit=_oE_[1],
                match=_ju_(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$1];
               return _jz_(ib,str_rest,readers,_oF_,0,scan$0,token_string);
              case 18:
               var _oG_=_oE_[1];
               if(0 === _oG_[0])
                {var
                  rest$2=_oE_[2],
                  match$0=_oG_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_jA_,width,ib)};
                 return _jz_
                         (ib,_c_(fmt$1,rest$2),readers,_oF_,0,scan$1,token_string)}
               var
                rest$3=_oE_[2],
                match$1=_oG_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_jB_,width,ib)};
               return _jz_
                       (ib,_c_(fmt$2,rest$3),readers,_oF_,0,scan$2,token_string)
              }
           var scan=function(width,param,ib){return scan_string(0,width,ib)};
           return _jz_(ib,_oE_,readers,_oF_,0,scan,token_string);
          case 3:
           var
            rest$4=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return _jm_(width,ib)};
           return _jz_(ib,rest$4,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$5=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            conv=_e8_(iconv),
            scan$4=
             function(width,param,ib){return scan_int_conv(conv,width,ib)};
           return _jz_
                   (ib,
                    rest$5,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$6=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            conv$0=_e8_(iconv$0),
            scan$5=
             function(width,param,ib){return scan_int_conv(conv$0,width,ib)};
           return _jz_
                   (ib,
                    rest$6,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$7=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            conv$1=_e8_(iconv$1),
            scan$6=
             function(width,param,ib){return scan_int_conv(conv$1,width,ib)};
           return _jz_
                   (ib,
                    rest$7,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$8=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            conv$2=_e8_(iconv$2),
            scan$7=
             function(width,param,ib){return scan_int_conv(conv$2,width,ib)};
           return _jz_
                   (ib,
                    rest$8,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return runtime.caml_int64_of_string
                              (token_int_literal(conv$2,ib))});
          case 8:
           if(15 <= fmt$0[1])
            {var rest$9=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
             return _jz_
                     (ib,rest$9,readers,pad$4,prec$3,scan_caml_float,token_float)}
           var rest$10=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
           return _jz_(ib,rest$10,readers,pad$5,prec$4,scan_float,token_float);
          case 9:
           var rest$11=fmt$0[1];
           _jn_(ib);
           var b=token_bool(ib);
           return [0,b,_jy_(ib,rest$11,readers)];
          case 10:
           var rest$12=fmt$0[1];
           if(end_of_input(ib)){var fmt$0=rest$12;continue}
           return bad_input(cst_end_of_input_not_found);
          case 11:
           var rest$13=fmt$0[2],str$0=fmt$0[1];
           _bg_(function(_oQ_){return check_char(ib,_oQ_)},str$0);
           var fmt$0=rest$13;
           continue;
          case 12:
           var rest$14=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$14;
           continue;
          case 13:
           var rest$15=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
           _jm_(_jt_(pad_opt),ib);
           var s=token_string(ib);
           try
            {var _oH_=_gZ_(s,fmtty),fmt$3=_oH_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$3=bad_input(msg)}
           return [0,fmt$3,_jy_(ib,rest$15,readers)];
          case 14:
           var rest$16=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
           _jm_(_jt_(pad_opt$0),ib);
           var s$0=token_string(ib);
           try
            {var
              match$3=_gx_(0,s$0),
              fmt$6=match$3[1],
              match$4=_gx_(0,s$0),
              fmt$7=match$4[1],
              _oI_=_fN_(fmt$7,_a_(_fn_(fmtty$0))),
              _oJ_=[0,_fN_(fmt$6,_a_(fmtty$0)),_oI_],
              match$2=_oJ_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg$0=exn[2],match$2=bad_input(msg$0)}
           var fmt$4=match$2[2],fmt$5=match$2[1];
           return [0,[0,fmt$5,s$0],_jy_(ib,_c_(fmt$4,rest$16),readers)];
          case 15:return invalid_arg(cst_scanf_bad_conversion_a);
          case 16:return invalid_arg(cst_scanf_bad_conversion_t);
          case 17:
           var
            rest$17=fmt$0[2],
            formatting_lit=fmt$0[1],
            _oK_=_fg_(formatting_lit);
           _bg_(function(_oP_){return check_char(ib,_oP_)},_oK_);
           var fmt$0=rest$17;
           continue;
          case 18:
           var _oL_=fmt$0[1];
           if(0 === _oL_[0])
            {var rest$18=fmt$0[2],match$5=_oL_[1],fmt$8=match$5[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$9=_c_(fmt$8,rest$18),fmt$0=fmt$9;
             continue}
           var rest$19=fmt$0[2],match$6=_oL_[1],fmt$10=match$6[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$11=_c_(fmt$10,rest$19),fmt$0=fmt$11;
           continue;
          case 19:
           var
            fmt_rest=fmt$0[1],
            readers_rest=readers[2],
            reader=readers[1],
            x=caml_call1(reader,ib);
           return [0,x,_jy_(ib,fmt_rest,readers_rest)];
          case 20:
           var _oM_=fmt$0[3],_oN_=fmt$0[2],_oO_=fmt$0[1];
           if(typeof _oM_ !== "number" && 17 === _oM_[0])
            {var
              rest$20=_oM_[2],
              fmting_lit$0=_oM_[1],
              match$7=_ju_(fmting_lit$0),
              str$1=match$7[2],
              stp$0=match$7[1],
              width$0=_jt_(_oO_);
             _jp_(_oN_,[0,stp$0],width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$20];
             return [0,s$2,_jy_(ib,str_rest$0,readers)]}
           var width=_jt_(_oO_);
           _jp_(_oN_,0,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,_jy_(ib,_oM_,readers)];
          case 21:
           var rest$21=fmt$0[2],counter=fmt$0[1],count=_js_(ib,counter);
           return [0,count,_jy_(ib,rest$21,readers)];
          case 22:
           var rest$22=fmt$0[1],c$1=checked_peek_char(ib);
           return [0,c$1,_jy_(ib,rest$22,readers)];
          case 23:
           var
            rest$23=fmt$0[2],
            ign=fmt$0[1],
            match$8=_e1_(ign,rest$23),
            fmt$12=match$8[1],
            match$9=_jy_(ib,fmt$12,readers);
           if(match$9){var arg_rest=match$9[2];return arg_rest}
           throw [0,Assert_failure,_jC_];
          default:
           return invalid_arg(cst_scanf_bad_conversion_custom_converter)}}
    function _jD_(ib,ef,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             r=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=r;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _oD_=[0,_jy_(ib,fmt,readers)],_oC_=_oD_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          if(exc[1] === Scan_failure)
           var switch$0=0;
          else
           if(exc[1] === Failure)
            var switch$0=0;
           else
            if(exc === End_of_file)
             var switch$0=0;
            else
             {if(exc[1] !== Invalid_argument)throw exc;
              var
               msg=exc[2],
               _oB_=
                invalid_arg(_j_(msg,_j_(cst_in_format,_j_(_bm_(str),cst$74)))),
               switch$0=1}
          if(! switch$0)var _oB_=[1,exc];
          var _oC_=_oB_}
        if(0 === _oC_[0]){var args=_oC_[1];return apply(f,args)}
        var exc=_oC_[1];
        return caml_call2(ef,ib,exc)}
      return _jw_(k,fmt)}
    function _jE_(s,ef,fmt){return _jD_(from_string(s),ef,fmt)}
    function _jF_(ic,ef,fmt){return _jD_(_i8_(ic),ef,fmt)}
    function _jG_(ib,fmt){return _jD_(ib,_jq_,fmt)}
    function _jH_(ic,fmt){return _jD_(_i8_(ic),_jq_,fmt)}
    function _jI_(s,fmt){return _jD_(from_string(s),_jq_,fmt)}
    function _jJ_(fmt){return _jD_(stdib,_jq_,fmt)}
    function _jK_(ib,format,f)
     {_jm_(max_int,ib);
      var str=token_string(ib);
      try
       {var _oA_=_g1_(str,format),fmt=_oA_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== Failure)throw exn;
        var msg=exn[2],fmt=bad_input(msg)}
      return caml_call1(f,fmt)}
    function _jL_(s,format,f){return _jK_(from_string(s),format,f)}
    function _jM_(s,fmt)
     {var l=caml_ml_string_length(s);
      function _oz_(x){return x}
      var b=_eC_(l + 2 | 0);
      _eM_(b,34);
      var _ox_=l - 1 | 0,_ow_=0;
      if(! (_ox_ < 0))
       {var i=_ow_;
        for(;;)
         {var c=caml_string_get(s,i);
          if(34 === c)_eM_(b,92);
          _eM_(b,c);
          var _oy_=i + 1 | 0;
          if(_ox_ !== i){var i=_oy_;continue}
          break}}
      _eM_(b,34);
      return _jL_(_eD_(b),fmt,_oz_)}
    var
     Scanf=
      [0,
       [0,
        stdib,
        from_file,
        from_file_bin,
        _i9_,
        from_file,
        from_file_bin,
        from_string,
        from_function,
        _i8_,
        end_of_input,
        beginning_of_input,
        name_of_input,
        stdib],
       Scan_failure,
       _jG_,
       _jH_,
       _jI_,
       _jJ_,
       _jD_,
       _jE_,
       _jF_,
       _jK_,
       _jL_,
       _jM_,
       function(s)
        {function _ov_(x){return x}
         return caml_call1(_jI_(_j_(cst$76,_j_(s,cst$75)),_jN_),_ov_)}];
    caml_register_global(600,Scanf,"Scanf");
    var
     _jO_=caml_register_named_value,
     Callback=
      [0,
       _jO_,
       function(name,exn)
        {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
         return caml_register_named_value(name,slot)}];
    caml_register_global(601,Callback,"Callback");
    function copy$0(o){var o$0=o.slice();return caml_set_oo_id(o$0)}
    var params$0=[0,1,1,1,3,16],initial_object_size=2,dummy_item=0;
    function public_method_label(s)
     {var accu=[0,0],_os_=caml_ml_string_length(s) - 1 | 0,_or_=0;
      if(! (_os_ < 0))
       {var i=_or_;
        for(;;)
         {var _ot_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _ot_ | 0;
          var _ou_=i + 1 | 0;
          if(_os_ !== i){var i=_ou_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     Vars=caml_call1(Map[1],[0,caml_string_compare]),
     Meths=caml_call1(Map[1],[0,caml_string_compare]),
     Labs=caml_call1(Map[1],[0,caml_int_compare]),
     dummy_table=[0,0,[0,dummy_item],Meths[1],Labs[1],0,0,Vars[1],0],
     table_count=[0,0],
     _jP_=caml_obj_block(0,0);
    function _jQ_(n){return 2 < n?_jQ_((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function _jR_(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,_jP_);
      caml_check_bound(methods,0)[1] = len;
      var _ol_=((_jQ_(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _ol_;
      var _on_=len - 1 | 0,_om_=0;
      if(! (_on_ < 0))
       {var i=_om_;
        for(;;)
         {var
           _op_=(i * 2 | 0) + 3 | 0,
           _oo_=caml_check_bound(pub_labels,i)[i + 1];
          caml_check_bound(methods,_op_)[_op_ + 1] = _oo_;
          var _oq_=i + 1 | 0;
          if(_on_ !== i){var i=_oq_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function _jS_(array,new_size)
     {var old_size=array[2].length - 1,_oj_=old_size < new_size?1:0;
      if(_oj_)
       {var new_buck=caml_make_vect(new_size,_jP_);
        _w_(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _ok_=0}
      else
       var _ok_=_oj_;
      return _ok_}
    var _jT_=[0,0],_jU_=[0,0];
    function _jV_(table)
     {var index=table[2].length - 1;_jS_(table,index + 1 | 0);return index}
    function _jW_(table,name)
     {try
       {var _oh_=caml_call2(Meths[22],name,table[3]);return _oh_}
      catch(_oi_)
       {_oi_ = caml_wrap_exception(_oi_);
        if(_oi_ === Not_found)
         {var label=_jV_(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _oi_}}
    function _jX_(table,names)
     {return _y_(function(_og_){return _jW_(table,_og_)},names)}
    function _jY_(table,label,element)
     {_jT_[1]++;
      return caml_call2(Labs[22],label,table[4])
              ?(_jS_(table,label + 1 | 0),
                caml_check_bound(table[2],label)[label + 1]
                =
                element)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function _jZ_(table,label)
     {try
       {var _oe_=_ai_(label,table[6]);return _oe_}
      catch(_of_)
       {_of_ = caml_wrap_exception(_of_);
        if(_of_ === Not_found)
         return caml_check_bound(table[2],label)[label + 1];
        throw _of_}}
    function _j0_(arr){return arr === 0?0:_B_(arr)}
    function _j1_(table,vars,virt_meths,concr_meths)
     {var
       vars$0=_j0_(vars),
       virt_meths$0=_j0_(virt_meths),
       concr_meths$0=_j0_(concr_meths),
       virt_meth_labs=
        _R_(function(_od_){return _jW_(table,_od_)},virt_meths$0),
       concr_meth_labs=
        _R_(function(_oc_){return _jW_(table,_oc_)},concr_meths$0);
      table[5]
      =
      [0,
       [0,table[3],table[4],table[6],table[7],virt_meth_labs,vars$0],
       table[5]];
      var _n5_=Vars[1],_n6_=table[7];
      function _n7_(lab,info,tvars)
       {return _ag_(lab,vars$0)?caml_call3(Vars[4],lab,info,tvars):tvars}
      table[7] = caml_call3(Vars[11],_n7_,_n6_,_n5_);
      var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
      _$_
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          var _n__=by_label[1];
          try
           {var _oa_=caml_call2(Labs[22],label,table[4]),_n$_=_oa_}
          catch(_ob_)
           {_ob_ = caml_wrap_exception(_ob_);
            if(_ob_ !== Not_found)throw _ob_;
            var _n$_=1}
          by_label[1] = caml_call3(Labs[4],label,_n$_,_n__);
          return 0},
        concr_meths$0,
        concr_meth_labs);
      _$_
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
          return 0},
        virt_meths$0,
        virt_meth_labs);
      table[3] = by_name[1];
      table[4] = by_label[1];
      var _n8_=0,_n9_=table[6];
      table[6]
      =
      _Y_
       (function(met,hm)
         {var lab=met[1];return _ag_(lab,virt_meth_labs)?hm:[0,met,hm]},
        _n9_,
        _n8_);
      return 0}
    function _j2_(table)
     {var
       match=_L_(table[5]),
       vars=match[6],
       virt_meths=match[5],
       saved_vars=match[4],
       saved_hidden_meths=match[3],
       by_label=match[2],
       by_name=match[1];
      table[5] = _M_(table[5]);
      table[7]
      =
      _X_
       (function(s,v)
         {var _n4_=caml_call2(Vars[22],v,table[7]);
          return caml_call3(Vars[4],v,_n4_,s)},
        saved_vars,
        vars);
      table[3] = by_name;
      table[4] = by_label;
      var _n3_=table[6];
      table[6]
      =
      _Y_
       (function(met,hm)
         {var lab=met[1];return _ag_(lab,virt_meths)?hm:[0,met,hm]},
        _n3_,
        saved_hidden_meths);
      return 0}
    function _j3_(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function _j4_(table,name)
     {try
       {var _n1_=caml_call2(Vars[22],name,table[7]);return _n1_}
      catch(_n2_)
       {_n2_ = caml_wrap_exception(_n2_);
        if(_n2_ === Not_found)
         {var index=_j3_(table);
          if(caml_string_notequal(name,cst$77))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _n2_}}
    function _j5_(arr){return caml_equal(arr,0)?[0]:arr}
    function _j6_(table,meths,vals)
     {var
       meths$0=_j5_(meths),
       nmeths=meths$0.length - 1,
       nvals=vals.length - 1,
       res=caml_make_vect(nmeths + nvals | 0,0),
       _nT_=nmeths - 1 | 0,
       _nS_=0;
      if(! (_nT_ < 0))
       {var i$0=_nS_;
        for(;;)
         {var _nZ_=_jW_(table,caml_check_bound(meths$0,i$0)[i$0 + 1]);
          caml_check_bound(res,i$0)[i$0 + 1] = _nZ_;
          var _n0_=i$0 + 1 | 0;
          if(_nT_ !== i$0){var i$0=_n0_;continue}
          break}}
      var _nV_=nvals - 1 | 0,_nU_=0;
      if(! (_nV_ < 0))
       {var i=_nU_;
        for(;;)
         {var
           _nX_=i + nmeths | 0,
           _nW_=_j4_(table,caml_check_bound(vals,i)[i + 1]);
          caml_check_bound(res,_nX_)[_nX_ + 1] = _nW_;
          var _nY_=i + 1 | 0;
          if(_nV_ !== i){var i=_nY_;continue}
          break}}
      return res}
    function _j7_(table,name)
     {try
       {var _nQ_=caml_call2(Vars[22],name,table[7]);return _nQ_}
      catch(_nR_)
       {_nR_ = caml_wrap_exception(_nR_);
        if(_nR_ === Not_found)throw [0,Assert_failure,_j8_];
        throw _nR_}}
    function _j9_(table,names)
     {return _y_(function(_nP_){return _j7_(table,_nP_)},names)}
    function _j__(table,f){table[8] = [0,f,table[8]];return 0}
    function _j$_(public_methods)
     {if(public_methods === 0)return _jR_([0]);
      var tags=_y_(public_method_label,public_methods),table=_jR_(tags);
      _z_
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      return table}
    function _ka_(table)
     {_jU_[1] = (_jU_[1] + table[1] | 0) - 1 | 0;
      table[8] = _P_(table[8]);
      return _jS_
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function _kb_(cla,vals,virt_meths,concr_meths,param,top)
     {var env=param[4],super$0=param[2];
      _j1_(cla,vals,virt_meths,concr_meths);
      var init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla);
      _j2_(cla);
      var
       _nK_=0,
       _nL_=_j5_(concr_meths),
       _nM_=[0,_y_(function(nm){return _jZ_(cla,_jW_(cla,nm))},_nL_),_nK_],
       _nN_=_j5_(vals);
      return caml_array_concat
              ([0,
                [0,init],
                [0,_y_(function(_nO_){return _j7_(cla,_nO_)},_nN_),_nM_]])}
    function _kc_(pub_meths,class_init)
     {var table=_j$_(pub_meths),env_init=caml_call1(class_init,table);
      _ka_(table);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function _kd_(pub_meths,class_init,init_table)
     {var table=_j$_(pub_meths),env_init=caml_call1(class_init,table);
      _ka_(table);
      init_table[2] = class_init;
      init_table[1] = env_init;
      return 0}
    function _ke_(loc)
     {function undef(param){throw [0,Undefined_recursive_module,loc]}
      return [0,undef,undef,undef,0]}
    function _kf_(table)
     {var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function _kg_(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function _kh_(obj,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],f=param$0[1];
          caml_call1(f,obj);
          var param$0=l;
          continue}
        return 0}}
    function _ki_(obj,table)
     {var inits=table[8],_nJ_=0 !== inits?1:0;
      return _nJ_?_kh_(obj,inits):_nJ_}
    function _kj_(obj_0,obj,table)
     {if(obj_0)return obj;
      var inits=table[8];
      if(0 !== inits)_kh_(obj,inits);
      return obj}
    function _kk_(obj_0,table)
     {if(obj_0)return obj_0;var obj=_kf_(table);_ki_(obj,table);return obj}
    function _kl_(n,keys,tables)
     {var res=[0,0,0,0],r=[0,res],_nG_=0;
      if(! (n < 0))
       {var i=_nG_;
        for(;;)
         {var _nH_=r[1];
          r[1] = [0,caml_check_bound(keys,i)[i + 1],_nH_,0];
          var _nI_=i + 1 | 0;
          if(n !== i){var i=_nI_;continue}
          break}}
      tables[2] = r[1];
      return res}
    function _km_(root,keys)
     {if(0 === root[2])return _kl_(keys.length - 1 - 1 | 0,keys,root);
      var i$1=keys.length - 1 - 1 | 0,i=i$1,tables=root[2];
      a:
      for(;;)
       {if(0 <= i)
         {var key=caml_check_bound(keys,i)[i + 1],tables$0=tables;
          for(;;)
           {if(tables$0[1] === key)
             {var tables$1=tables$0[2],i$0=i - 1 | 0,i=i$0,tables=tables$1;
              continue a}
            if(0 === tables$0[3])
             {var next=[0,key,0,0];
              tables$0[3] = next;
              return _kl_(i - 1 | 0,keys,next)}
            var tables$2=tables$0[3],tables$0=tables$2;
            continue}}
        return tables}}
    function _kn_(table)
     {var n=_jV_(table);
      if(0 === (n % 2 | 0))
       var switch$0=0;
      else
       if((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n)
        var switch$0=0;
       else
        var n$0=_jV_(table),switch$0=1;
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[n$0 + 1] = 0;
      return n$0}
    function _ko_(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _nA_=i[1],
           label=caml_check_bound(methods,_nA_)[_nA_ + 1],
           next=
            function(param)
             {i[1]++;
              var _nF_=i[1];
              return caml_check_bound(methods,_nF_)[_nF_ + 1]},
           clo=next(0);
          if(typeof clo === "number")
           switch(clo)
            {case 0:
              var
               x=next(0),
               clo$0=function(x){return function(obj){return x}}(x);
              break;
             case 1:
              var
               n=next(0),
               clo$0=function(n){return function(obj){return obj[n + 1]}}(n);
              break;
             case 2:
              var
               e=next(0),
               n$0=next(0),
               clo$0=
                function(e,n){return function(obj){return obj[e + 1][n + 1]}}
                 (e,n$0);
              break;
             case 3:
              var
               n$1=next(0),
               clo$0=
                function(n)
                  {return function(obj){return caml_call1(obj[1][n + 1],obj)}}
                 (n$1);
              break;
             case 4:
              var
               n$2=next(0),
               clo$0=
                function(n){return function(obj,x){obj[n + 1] = x;return 0}}
                 (n$2);
              break;
             case 5:
              var
               f=next(0),
               x$0=next(0),
               clo$0=
                function(f,x){return function(obj){return caml_call1(f,x)}}
                 (f,x$0);
              break;
             case 6:
              var
               f$0=next(0),
               n$3=next(0),
               clo$0=
                function(f,n)
                  {return function(obj){return caml_call1(f,obj[n + 1])}}
                 (f$0,n$3);
              break;
             case 7:
              var
               f$1=next(0),
               e$0=next(0),
               n$4=next(0),
               clo$0=
                function(f,e,n)
                  {return function(obj)
                    {return caml_call1(f,obj[e + 1][n + 1])}}
                 (f$1,e$0,n$4);
              break;
             case 8:
              var
               f$2=next(0),
               n$5=next(0),
               clo$0=
                function(f,n)
                  {return function(obj)
                    {return caml_call1(f,caml_call1(obj[1][n + 1],obj))}}
                 (f$2,n$5);
              break;
             case 9:
              var
               f$3=next(0),
               x$1=next(0),
               y=next(0),
               clo$0=
                function(f,x,y)
                  {return function(obj){return caml_call2(f,x,y)}}
                 (f$3,x$1,y);
              break;
             case 10:
              var
               f$4=next(0),
               x$2=next(0),
               n$6=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj){return caml_call2(f,x,obj[n + 1])}}
                 (f$4,x$2,n$6);
              break;
             case 11:
              var
               f$5=next(0),
               x$3=next(0),
               e$1=next(0),
               n$7=next(0),
               clo$0=
                function(f,x,e,n)
                  {return function(obj)
                    {return caml_call2(f,x,obj[e + 1][n + 1])}}
                 (f$5,x$3,e$1,n$7);
              break;
             case 12:
              var
               f$6=next(0),
               x$4=next(0),
               n$8=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj)
                    {return caml_call2(f,x,caml_call1(obj[1][n + 1],obj))}}
                 (f$6,x$4,n$8);
              break;
             case 13:
              var
               f$7=next(0),
               n$9=next(0),
               x$5=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj){return caml_call2(f,obj[n + 1],x)}}
                 (f$7,n$9,x$5);
              break;
             case 14:
              var
               f$8=next(0),
               e$2=next(0),
               n$10=next(0),
               x$6=next(0),
               clo$0=
                function(f,e,n,x)
                  {return function(obj)
                    {return caml_call2(f,obj[e + 1][n + 1],x)}}
                 (f$8,e$2,n$10,x$6);
              break;
             case 15:
              var
               f$9=next(0),
               n$11=next(0),
               x$7=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj)
                    {return caml_call2(f,caml_call1(obj[1][n + 1],obj),x)}}
                 (f$9,n$11,x$7);
              break;
             case 16:
              var
               n$12=next(0),
               x$8=next(0),
               clo$0=
                function(n,x)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,x)}}
                 (n$12,x$8);
              break;
             case 17:
              var
               n$13=next(0),
               m=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,obj[m + 1])}}
                 (n$13,m);
              break;
             case 18:
              var
               n$14=next(0),
               e$3=next(0),
               m$0=next(0),
               clo$0=
                function(n,e,m)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,obj[e + 1][m + 1])}}
                 (n$14,e$3,m$0);
              break;
             case 19:
              var
               n$15=next(0),
               m$1=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {var _nD_=caml_call1(obj[1][m + 1],obj);
                     return caml_call2(obj[1][n + 1],obj,_nD_)}}
                 (n$15,m$1);
              break;
             case 20:
              var m$2=next(0),x$9=next(0);
              _kn_(table);
              var
               clo$0=
                function(m,x)
                  {return function(obj)
                    {return caml_call1(caml_get_public_method(x,m,0),x)}}
                 (m$2,x$9);
              break;
             case 21:
              var m$3=next(0),n$16=next(0);
              _kn_(table);
              var
               clo$0=
                function(m,n)
                  {return function(obj)
                    {var _nC_=obj[n + 1];
                     return caml_call1(caml_get_public_method(_nC_,m,0),_nC_)}}
                 (m$3,n$16);
              break;
             case 22:
              var m$4=next(0),e$4=next(0),n$17=next(0);
              _kn_(table);
              var
               clo$0=
                function(m,e,n)
                  {return function(obj)
                    {var _nB_=obj[e + 1][n + 1];
                     return caml_call1(caml_get_public_method(_nB_,m,0),_nB_)}}
                 (m$4,e$4,n$17);
              break;
             default:
              var m$5=next(0),n$18=next(0);
              _kn_(table);
              var
               clo$0=
                function(m,n)
                  {return function(obj)
                    {var _nE_=caml_call1(obj[1][n + 1],obj);
                     return caml_call1(caml_get_public_method(_nE_,m,0),_nE_)}}
                 (m$5,n$18)}
          else
           var clo$0=clo;
          _jY_(table,label,clo$0);
          i[1]++;
          continue}
        return 0}}
    var
     CamlinternalOO=
      [0,
       public_method_label,
       _jV_,
       _j4_,
       _j6_,
       _j7_,
       _j9_,
       _jW_,
       _jX_,
       _jZ_,
       _jY_,
       _ko_,
       _j1_,
       _j2_,
       _j__,
       dummy_table,
       _j$_,
       _ka_,
       _kb_,
       _kc_,
       _kd_,
       _ke_,
       copy$0,
       _kf_,
       _kg_,
       _ki_,
       _kj_,
       _kk_,
       _km_,
       params$0,
       function(param){return [0,table_count[1],_jT_[1],_jU_[1]]}];
    caml_register_global(602,CamlinternalOO,"CamlinternalOO");
    var Oo=[0,copy$0,public_method_label,public_method_label];
    caml_register_global(603,Oo,"Oo");
    var
     update_mod=runtime.caml_CamlinternalMod_update_mod,
     init_mod=runtime.caml_CamlinternalMod_init_mod,
     CamlinternalMod=[0,init_mod,update_mod];
    caml_register_global(604,CamlinternalMod,"CamlinternalMod");
    var _kp_=caml_create_string(32),_kq_=[0,_kp_],_kr_=[0,0];
    function _ks_(param){_kq_[1] = _kp_;_kr_[1] = 0;return 0}
    function _kt_(c)
     {if(caml_ml_string_length(_kq_[1]) <= _kr_[1])
       {var newbuffer=caml_create_string(2 * _kr_[1] | 0);
        _aL_(_kq_[1],0,newbuffer,0,_kr_[1]);
        _kq_[1] = newbuffer}
      caml_string_set(_kq_[1],_kr_[1],c);
      _kr_[1]++;
      return 0}
    function _ku_(param)
     {var s=_aI_(_kq_[1],0,_kr_[1]);_kq_[1] = _kp_;return s}
    var
     Genlex=
      [0,
       function(keywords)
        {var kwd_table=caml_call2(Hashtbl[1],0,17);
         _V_
          (function(s){return caml_call3(Hashtbl[5],kwd_table,s,[0,s])},
           keywords);
         function ident_or_keyword(id)
          {try
            {var _ny_=caml_call2(Hashtbl[6],kwd_table,id);return _ny_}
           catch(_nz_)
            {_nz_ = caml_wrap_exception(_nz_);
             if(_nz_ === Not_found)return [1,id];
             throw _nz_}}
         function keyword_or_error(c)
          {var s=_bb_(1,c);
           try
            {var _nw_=caml_call2(Hashtbl[6],kwd_table,s);return _nw_}
           catch(_nx_)
            {_nx_ = caml_wrap_exception(_nx_);
             if(_nx_ === Not_found)
              throw [0,_d$_,_j_(cst_Illegal_character,s)];
             throw _nx_}}
         function end_exponent_part(strm)
          {for(;;)
            {var match=_ef_(strm);
             if(match)
              {var _nv_=match[1],switcher=_nv_ - 48 | 0;
               if(! (9 < switcher >>> 0)){_eh_(strm);_kt_(_nv_);continue}}
             return [0,[3,caml_float_of_string(_ku_(0))]]}}
         function exponent_part(strm)
          {var match=_ef_(strm);
           if(match)
            {var _nu_=match[1],switch$0=43 === _nu_?0:45 === _nu_?0:1;
             if(! switch$0)
              {_eh_(strm);_kt_(_nu_);return end_exponent_part(strm)}}
           return end_exponent_part(strm)}
         function number(s)
          {for(;;)
            {var match=_ef_(s);
             if(match)
              {var _nr_=match[1];
               if(58 <= _nr_)
                {var switch$0=69 === _nr_?0:101 === _nr_?0:1;
                 if(! switch$0){_eh_(s);_kt_(69);return exponent_part(s)}}
               else
                {if(46 === _nr_)
                  {_eh_(s);
                   _kt_(46);
                   for(;;)
                    {var match$0=_ef_(s);
                     if(match$0)
                      {var _ns_=match$0[1],_nt_=_ns_ - 69 | 0;
                       if(32 < _nt_ >>> 0)
                        {var switcher=_nt_ + 21 | 0;
                         if(! (9 < switcher >>> 0)){_eh_(s);_kt_(_ns_);continue}}
                       else
                        {var switcher$0=_nt_ - 1 | 0;
                         if(30 < switcher$0 >>> 0)
                          {_eh_(s);_kt_(69);return exponent_part(s)}}}
                     return [0,[3,caml_float_of_string(_ku_(0))]]}}
                 if(48 <= _nr_){_eh_(s);_kt_(_nr_);continue}}}
             return [0,[2,caml_int_of_string(_ku_(0))]]}}
         function ident2(strm)
          {for(;;)
            {var match=_ef_(strm);
             if(match)
              {var _np_=match[1];
               if(94 <= _np_)
                var
                 _nq_=_np_ - 95 | 0,
                 switch$0=30 < _nq_ >>> 0?32 <= _nq_?1:0:29 === _nq_?0:1;
               else
                if(65 <= _np_)
                 var switch$0=92 === _np_?0:1;
                else
                 if(33 <= _np_)
                  switch(_np_ - 33 | 0)
                   {case 0:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                    case 12:
                    case 14:
                    case 25:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:var switch$0=0;break;
                    default:var switch$0=1}
                 else
                  var switch$0=1;
               if(! switch$0){_eh_(strm);_kt_(_np_);continue}}
             return [0,ident_or_keyword(_ku_(0))]}}
         function neg_number(s)
          {var match=_ef_(s);
           if(match)
            {var _no_=match[1],switcher=_no_ - 48 | 0;
             if(! (9 < switcher >>> 0))
              {_eh_(s);_ks_(0);_kt_(45);_kt_(_no_);return number(s)}}
           _ks_(0);
           _kt_(45);
           return ident2(s)}
         function ident(strm)
          {for(;;)
            {var match=_ef_(strm);
             if(match)
              {var _nm_=match[1];
               if(91 <= _nm_)
                var
                 _nn_=_nm_ - 95 | 0,
                 switch$0=27 < _nn_ >>> 0?97 <= _nn_?0:1:1 === _nn_?1:0;
               else
                var
                 switch$0=
                  48 <= _nm_?6 < (_nm_ - 58 | 0) >>> 0?0:1:39 === _nm_?0:1;
               if(! switch$0){_eh_(strm);_kt_(_nm_);continue}}
             return [0,ident_or_keyword(_ku_(0))]}}
         function next_token$0(counter,strm)
          {for(;;)
            {var match=_ef_(strm);
             if(match)
              {var _nd_=match[1];
               if(124 <= _nd_)
                var switch$0=127 <= _nd_?192 <= _nd_?1:0:125 === _nd_?0:2;
               else
                {var _ne_=_nd_ - 65 | 0;
                 if(57 < _ne_ >>> 0)
                  if(58 <= _ne_)
                   var switch$0=0;
                  else
                   {var switcher=_ne_ + 65 | 0;
                    switch(switcher)
                     {case 34:
                       _eh_(strm);
                       _ks_(0);
                       for(;;)
                        {var match$1=_ef_(strm);
                         if(match$1)
                          {var _ng_=match$1[1];
                           if(34 === _ng_){_eh_(strm);return [0,[4,_ku_(0)]]}
                           if(92 === _ng_)
                            {_eh_(strm);
                             try
                              {var c$0=escape(strm)}
                             catch(_nl_)
                              {_nl_ = caml_wrap_exception(_nl_);
                               if(_nl_ === _d__)throw [0,_d$_,cst$80];
                               throw _nl_}
                             _kt_(c$0);
                             continue}
                           _eh_(strm);
                           _kt_(_ng_);
                           continue}
                         throw _d__}
                      case 39:
                       _eh_(strm);
                       try
                        {var match$2=_ef_(strm);
                         if(! match$2)throw _d__;
                         var _nh_=match$2[1];
                         if(92 === _nh_)
                          {_eh_(strm);
                           try
                            {var _ni_=escape(strm)}
                           catch(_nk_)
                            {_nk_ = caml_wrap_exception(_nk_);
                             if(_nk_ === _d__)throw [0,_d$_,cst$81];
                             throw _nk_}
                           var c=_ni_}
                         else
                          {_eh_(strm);var c=_nh_}}
                       catch(_nj_)
                        {_nj_ = caml_wrap_exception(_nj_);
                         if(_nj_ === _d__)throw [0,_d$_,cst$78];
                         throw _nj_}
                       var match$0=_ef_(strm);
                       if(match$0)
                        if(39 === match$0[1]){_eh_(strm);return [0,[5,c]]}
                       throw [0,_d$_,cst$79];
                      case 40:
                       _eh_(strm);
                       if(counter < 50)
                        {var counter$0=counter + 1 | 0;
                         return maybe_comment(counter$0,strm)}
                       return caml_trampoline_return(maybe_comment,[0,strm]);
                      case 45:_eh_(strm);return neg_number(strm);
                      case 9:
                      case 10:
                      case 12:
                      case 13:
                      case 26:
                      case 32:_eh_(strm);continue;
                      case 48:
                      case 49:
                      case 50:
                      case 51:
                      case 52:
                      case 53:
                      case 54:
                      case 55:
                      case 56:
                      case 57:_eh_(strm);_ks_(0);_kt_(_nd_);return number(strm);
                      case 33:
                      case 35:
                      case 36:
                      case 37:
                      case 38:
                      case 42:
                      case 43:
                      case 47:
                      case 58:
                      case 60:
                      case 61:
                      case 62:
                      case 63:
                      case 64:var switch$0=2;break;
                      default:var switch$0=0}}
                 else
                  {var _nf_=_ne_ - 26 | 0;
                   if(5 < _nf_ >>> 0)
                    var switch$0=1;
                   else
                    switch(_nf_)
                     {case 4:var switch$0=1;break;
                      case 1:
                      case 3:var switch$0=2;break;
                      default:var switch$0=0}}}
               switch(switch$0)
                {case 0:_eh_(strm);return [0,keyword_or_error(_nd_)];
                 case 1:_eh_(strm);_ks_(0);_kt_(_nd_);return ident(strm);
                 default:_eh_(strm);_ks_(0);_kt_(_nd_);return ident2(strm)}}
             return 0}}
         function maybe_comment(counter,strm)
          {var match=_ef_(strm);
           if(match)
            if(42 === match[1])
             {_eh_(strm);
              comment(strm);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return next_token$0(counter$0,strm)}
              return caml_trampoline_return(next_token$0,[0,strm])}
           return [0,keyword_or_error(40)]}
         function next_token(strm)
          {return caml_trampoline(next_token$0(0,strm))}
         function escape(strm)
          {var match=_ef_(strm);
           if(match)
            {var _na_=match[1];
             if(58 <= _na_)
              {var switcher=_na_ - 110 | 0;
               if(! (6 < switcher >>> 0))
                switch(switcher)
                 {case 0:_eh_(strm);return 10;
                  case 4:_eh_(strm);return 13;
                  case 6:_eh_(strm);return 9
                  }}
             else
              if(48 <= _na_)
               {_eh_(strm);
                var match$0=_ef_(strm);
                if(match$0)
                 {var _nb_=match$0[1],switcher$0=_nb_ - 48 | 0;
                  if(! (9 < switcher$0 >>> 0))
                   {_eh_(strm);
                    var match$1=_ef_(strm);
                    if(match$1)
                     {var _nc_=match$1[1],switcher$1=_nc_ - 48 | 0;
                      if(! (9 < switcher$1 >>> 0))
                       {_eh_(strm);
                        return _az_
                                ((((_na_ - 48 | 0) * 100 | 0)
                                  +
                                  ((_nb_ - 48 | 0) * 10 | 0)
                                  |
                                  0)
                                 +
                                 (_nc_ - 48 | 0)
                                 |
                                 0)}}
                    throw [0,_d$_,cst$83]}}
                throw [0,_d$_,cst$82]}
             _eh_(strm);
             return _na_}
           throw _d__}
         function comment(strm)
          {a:
           for(;;)
            {var match=_ef_(strm);
             if(match)
              {var switcher=match[1] - 40 | 0;
               if(! (2 < switcher >>> 0))
                switch(switcher)
                 {case 0:
                   _eh_(strm);
                   var match$0=_ef_(strm);
                   if(match$0)
                    {if(42 === match$0[1]){_eh_(strm);comment(strm);continue}
                     _eh_(strm);
                     continue}
                   throw _d__;
                  case 1:break;
                  default:
                   _eh_(strm);
                   for(;;)
                    {var match$1=_ef_(strm);
                     if(match$1)
                      {var _m$_=match$1[1];
                       if(41 === _m$_){_eh_(strm);return 0}
                       if(42 === _m$_){_eh_(strm);continue}
                       _eh_(strm);
                       continue a}
                     throw _d__}}
               _eh_(strm);
               continue}
             throw _d__}}
         return function(input)
          {return _en_(function(count){return next_token(input)})}}];
    caml_register_global(605,Genlex,"Genlex");
    function _kv_(x){return x.length - 1 - 1 | 0}
    function _kw_(ar,ofs,len,x)
     {if(0 <= ofs)
       if(0 <= len)
        if(! (_kv_(ar) < (ofs + len | 0)))
         {var _m9_=(ofs + len | 0) - 1 | 0;
          if(! (_m9_ < ofs))
           {var i=ofs;
            for(;;)
             {caml_weak_set(ar,i,x);
              var _m__=i + 1 | 0;
              if(_m9_ !== i){var i=_m__;continue}
              break}}
          return 0}
      throw [0,Invalid_argument,cst_Weak_fill]}
    var
     Weak=
      [0,
       caml_weak_create,
       _kv_,
       caml_weak_set,
       caml_weak_get,
       caml_weak_get_copy,
       caml_weak_check,
       _kw_,
       caml_weak_blit,
       function(H)
        {var _mk_=caml_weak_create(0);
         function _ml_(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
         var _mm_=7;
         function _mn_(sz)
          {var sz$0=7 <= sz?sz:7,sz$1=4194303 < sz$0?_bH_:sz$0;
           return [0,
                   caml_make_vect(sz$1,_mk_),
                   caml_make_vect(sz$1,[0]),
                   _mm_,
                   0,
                   0]}
         function _mo_(t)
          {var _m7_=t[1].length - 1 - 1 | 0,_m6_=0;
           if(! (_m7_ < 0))
            {var i=_m6_;
             for(;;)
              {caml_check_bound(t[1],i)[i + 1] = _mk_;
               caml_check_bound(t[2],i)[i + 1] = [0];
               var _m8_=i + 1 | 0;
               if(_m7_ !== i){var i=_m8_;continue}
               break}}
           t[3] = _mm_;
           t[4] = 0;
           return 0}
         function _mp_(f,t,init)
          {var _m5_=t[1],i=0;
           return _E_
                   (function(b,accu$1)
                     {var i$0=i,accu=accu$1;
                      for(;;)
                       {if(_kv_(b) <= i$0)return accu;
                        var match=caml_weak_get(b,i$0);
                        if(match)
                         {var
                           v=match[1],
                           accu$0=caml_call2(f,v,accu),
                           i$1=i$0 + 1 | 0,
                           i$0=i$1,
                           accu=accu$0;
                          continue}
                        var i$2=i$0 + 1 | 0,i$0=i$2;
                        continue}},
                    _m5_,
                    init)}
         function _mq_(f,t)
          {var _m4_=t[1],i=0;
           return _x_
                   (function(b)
                     {var i$0=i;
                      for(;;)
                       {if(_kv_(b) <= i$0)return 0;
                        var match=caml_weak_get(b,i$0);
                        if(match)
                         {var v=match[1];
                          caml_call1(f,v);
                          var i$1=i$0 + 1 | 0,i$0=i$1;
                          continue}
                        var i$2=i$0 + 1 | 0,i$0=i$2;
                        continue}},
                    _m4_)}
         function _mr_(i,b,accu)
          {var i$0=i,accu$0=accu;
           for(;;)
            {if(_kv_(b) <= i$0)return accu$0;
             var
              _m3_=caml_weak_check(b,i$0)?1:0,
              accu$1=accu$0 + _m3_ | 0,
              i$1=i$0 + 1 | 0,
              i$0=i$1,
              accu$0=accu$1;
             continue}}
         function _ms_(t)
          {var _mY_=0,_mZ_=t[1],_m0_=0;
           return _E_
                   (function(_m1_,_m2_){return _mr_(_m0_,_m1_,_m2_)},_mZ_,_mY_)}
         function _mt_(t,setter,d,h,index)
          {var
            bucket$0=caml_check_bound(t[1],index)[index + 1],
            hashes=caml_check_bound(t[2],index)[index + 1],
            sz=_kv_(bucket$0),
            i$3=0;
           for(;;)
            {if(sz <= i$3)
              {var newsz=min(((3 * sz | 0) / 2 | 0) + 3 | 0,4194302);
               if(newsz <= sz)
                failwith(cst_Weak_Make_hash_bucket_cannot_grow_more);
               var
                newbucket=caml_weak_create(newsz),
                newhashes=caml_make_vect(newsz,0);
               caml_weak_blit(bucket$0,0,newbucket,0,sz);
               _w_(hashes,0,newhashes,0,sz);
               caml_call3(setter,newbucket,sz,d);
               caml_check_bound(newhashes,sz)[sz + 1] = h;
               caml_check_bound(t[1],index)[index + 1] = newbucket;
               caml_check_bound(t[2],index)[index + 1] = newhashes;
               var _mU_=sz <= t[3]?1:0,_mV_=_mU_?t[3] < newsz?1:0:_mU_;
               if(_mV_)
                {t[4] = t[4] + 1 | 0;
                 var i$4=0;
                 for(;;)
                  {var
                    _mN_=t[5],
                    bucket=caml_check_bound(t[1],_mN_)[_mN_ + 1],
                    _mO_=t[5],
                    hbucket=caml_check_bound(t[2],_mO_)[_mO_ + 1],
                    n=_kv_(bucket),
                    prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
                    live=_mr_(0,bucket,0);
                   if(live <= prev_len)
                    {var j$2=_kv_(bucket) - 1 | 0,i$0=0,j=j$2;
                     for(;;)
                      {if(prev_len <= j)
                        {if(caml_weak_check(bucket,i$0))
                          {var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                         if(caml_weak_check(bucket,j))
                          {caml_weak_blit(bucket,j,bucket,i$0,1);
                           var _mP_=caml_check_bound(hbucket,j)[j + 1];
                           caml_check_bound(hbucket,i$0)[i$0 + 1] = _mP_;
                           var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                           continue}
                         var j$1=j - 1 | 0,j=j$1;
                         continue}
                       if(0 === prev_len)
                        {var _mQ_=t[5];
                         caml_check_bound(t[1],_mQ_)[_mQ_ + 1] = _mk_;
                         var _mR_=t[5];
                         caml_check_bound(t[2],_mR_)[_mR_ + 1] = [0]}
                       else
                        {caml_obj_truncate(bucket,prev_len + 1 | 0);
                         caml_obj_truncate(hbucket,prev_len)}
                       var _mS_=t[3] < n?1:0,_mT_=_mS_?prev_len <= t[3]?1:0:_mS_;
                       if(_mT_)t[4] = t[4] - 1 | 0;
                       break}}
                   t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
                   var _mX_=i$4 + 1 | 0;
                   if(2 !== i$4){var i$4=_mX_;continue}
                   break}}
               var _mW_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
               if(_mW_)
                {var
                  n$0=t[1].length - 1,
                  newlen=min(((3 * n$0 | 0) / 2 | 0) + 3 | 0,_bH_);
                 if(n$0 < newlen)
                  {var newt=_mn_(newlen),_mM_=t[1],i=0;
                   _z_
                    (function(j,ob)
                      {var i$0=i;
                       for(;;)
                        {if(_kv_(ob) <= i$0)return 0;
                         var match=caml_weak_check(ob,i$0);
                         if(0 === match){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                         var
                          oh=caml_check_bound(t[2],j)[j + 1],
                          setter$0=
                           function(i)
                            {function setter(nb,ni,param)
                              {return caml_weak_blit(ob,i,nb,ni,1)}
                             return setter},
                          setter=setter$0(i$0),
                          h=caml_check_bound(oh,i$0)[i$0 + 1];
                         _mt_(newt,setter,0,h,_ml_(newt,h));
                         var i$2=i$0 + 1 | 0,i$0=i$2;
                         continue}},
                     _mM_);
                   t[1] = newt[1];
                   t[2] = newt[2];
                   t[3] = newt[3];
                   t[4] = newt[4];
                   t[5] = caml_mod(t[5],newt[1].length - 1);
                   return 0}
                 t[3] = max_int;
                 t[4] = 0;
                 return 0}
               return _mW_}
             if(caml_weak_check(bucket$0,i$3))
              {var i$5=i$3 + 1 | 0,i$3=i$5;continue}
             caml_call3(setter,bucket$0,i$3,d);
             return caml_check_bound(hashes,i$3)[i$3 + 1] = h}}
         function _mu_(t,d)
          {var h=caml_call1(H[2],d);
           return _mt_(t,caml_weak_set,[0,d],h,_ml_(t,h))}
         function _mv_(t,d,ifnotfound)
          {var
            h=caml_call1(H[2],d),
            index=_ml_(t,h),
            bucket=caml_check_bound(t[1],index)[index + 1],
            hashes=caml_check_bound(t[2],index)[index + 1],
            sz=_kv_(bucket),
            i=0;
           for(;;)
            {if(sz <= i)return caml_call2(ifnotfound,h,index);
             if(h === caml_check_bound(hashes,i)[i + 1])
              {var match=caml_weak_get_copy(bucket,i);
               if(match)
                {var v=match[1];
                 if(caml_call2(H[1],v,d))
                  {var match$0=caml_weak_get(bucket,i);
                   if(match$0){var v$0=match$0[1];return v$0}
                   var i$0=i + 1 | 0,i=i$0;
                   continue}}
               var i$1=i + 1 | 0,i=i$1;
               continue}
             var i$2=i + 1 | 0,i=i$2;
             continue}}
         function _mw_(t,d)
          {return _mv_
                   (t,
                    d,
                    function(h,index)
                     {_mt_(t,caml_weak_set,[0,d],h,index);return d})}
         function _mx_(t,d)
          {return _mv_(t,d,function(h,index){throw Not_found})}
         function _my_(t,d,iffound,ifnotfound)
          {var
            h=caml_call1(H[2],d),
            index=_ml_(t,h),
            bucket=caml_check_bound(t[1],index)[index + 1],
            hashes=caml_check_bound(t[2],index)[index + 1],
            sz=_kv_(bucket),
            i=0;
           for(;;)
            {if(sz <= i)return ifnotfound;
             if(h === caml_check_bound(hashes,i)[i + 1])
              {var match=caml_weak_get_copy(bucket,i);
               if(match)
                {var v=match[1];
                 if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
               var i$0=i + 1 | 0,i=i$0;
               continue}
             var i$1=i + 1 | 0,i=i$1;
             continue}}
         function _mz_(t,d)
          {var _mL_=0;
           return _my_(t,d,function(w,i){return caml_weak_set(w,i,0)},_mL_)}
         function _mA_(t,d)
          {var _mK_=0;return _my_(t,d,function(w,i){return 1},_mK_)}
         function _mB_(t,d)
          {var
            h=caml_call1(H[2],d),
            index=_ml_(t,h),
            bucket=caml_check_bound(t[1],index)[index + 1],
            hashes=caml_check_bound(t[2],index)[index + 1],
            sz=_kv_(bucket),
            i=0,
            accu=0;
           for(;;)
            {if(sz <= i)return accu;
             if(h === caml_check_bound(hashes,i)[i + 1])
              {var match=caml_weak_get_copy(bucket,i);
               if(match)
                {var v=match[1];
                 if(caml_call2(H[1],v,d))
                  {var match$0=caml_weak_get(bucket,i);
                   if(match$0)
                    {var
                      v$0=match$0[1],
                      accu$0=[0,v$0,accu],
                      i$0=i + 1 | 0,
                      i=i$0,
                      accu=accu$0;
                     continue}
                   var i$1=i + 1 | 0,i=i$1;
                   continue}}
               var i$2=i + 1 | 0,i=i$2;
               continue}
             var i$3=i + 1 | 0,i=i$3;
             continue}}
         return [0,
                 _mn_,
                 _mo_,
                 _mw_,
                 _mu_,
                 _mz_,
                 _mx_,
                 _mB_,
                 _mA_,
                 _mq_,
                 _mp_,
                 _ms_,
                 function(t)
                  {var len=t[1].length - 1,lens=_y_(_kv_,t[1]);
                   _G_(caml_compare,lens);
                   var
                    _mC_=0,
                    totlen=
                     _D_(function(_mJ_,_mI_){return _mJ_ + _mI_ | 0},_mC_,lens),
                    _mD_=len - 1 | 0,
                    _mF_=len / 2 | 0,
                    _mE_=caml_check_bound(lens,_mD_)[_mD_ + 1],
                    _mG_=caml_check_bound(lens,_mF_)[_mF_ + 1],
                    _mH_=caml_check_bound(lens,0)[1];
                   return [0,len,_ms_(t),totlen,_mH_,_mG_,_mE_]}]}];
    caml_register_global(606,Weak,"Weak");
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$84))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return _be_(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return _be_(name,0,p)}}
        return _be_(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$85))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return _be_(name,0,n$3 + 1 | 0)}
                  return _be_(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return _be_(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _mi_=caml_ml_string_length(n) < 1?1:0,
       _mj_=_mi_ || (47 !== caml_string_get(n,0)?1:0);
      return _mj_}
    function is_implicit(n)
     {var _md_=is_relative(n);
      if(_md_)
       {var
         _me_=caml_ml_string_length(n) < 2?1:0,
         _mf_=_me_ || caml_string_notequal(_be_(n,0,2),cst$87);
        if(_mf_)
         var
          _mg_=caml_ml_string_length(n) < 3?1:0,
          _mh_=_mg_ || caml_string_notequal(_be_(n,0,3),cst$86);
        else
         var _mh_=_mf_}
      else
       var _mh_=_md_;
      return _mh_}
    function check_suffix(name,suff)
     {var
       _mb_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0,
       _mc_=
        _mb_
         ?caml_string_equal
           (_be_
             (name,
              caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
              caml_ml_string_length(suff)),
            suff)
         :_mb_;
      return _mc_}
    try
     {var _ll_=caml_sys_getenv(cst_TMPDIR),_kx_=_ll_}
    catch(_ma_)
     {_ma_ = caml_wrap_exception(_ma_);
      if(_ma_ !== Not_found)throw _ma_;
      var _kx_=cst_tmp}
    function quote(s)
     {var l=caml_ml_string_length(s),b=_eC_(l + 20 | 0);
      _eM_(b,39);
      var _l__=l - 1 | 0,_l9_=0;
      if(! (_l__ < 0))
       {var i=_l9_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           _eP_(b,quotequote);
          else
           _eM_(b,caml_string_get(s,i));
          var _l$_=i + 1 | 0;
          if(_l__ !== i){var i=_l$_;continue}
          break}}
      _eM_(b,39);
      return _eD_(b)}
    function basename(_l8_)
     {return generic_basename(is_dir_sep,current_dir_name,_l8_)}
    function _ky_(_l7_)
     {return generic_dirname(is_dir_sep,current_dir_name,_l7_)}
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_l4_=47 === c?1:0;
      if(_l4_)
       var _l5_=_l4_;
      else
       var _l6_=92 === c?1:0,_l5_=_l6_ || (58 === c?1:0);
      return _l5_}
    function is_relative$0(n)
     {var
       _lY_=caml_ml_string_length(n) < 1?1:0,
       _lZ_=_lY_ || (47 !== caml_string_get(n,0)?1:0);
      if(_lZ_)
       {var
         _l0_=caml_ml_string_length(n) < 1?1:0,
         _l1_=_l0_ || (92 !== caml_string_get(n,0)?1:0);
        if(_l1_)
         var
          _l2_=caml_ml_string_length(n) < 2?1:0,
          _l3_=_l2_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _l3_=_l1_}
      else
       var _l3_=_lZ_;
      return _l3_}
    function is_implicit$0(n)
     {var _lP_=is_relative$0(n);
      if(_lP_)
       {var
         _lQ_=caml_ml_string_length(n) < 2?1:0,
         _lR_=_lQ_ || caml_string_notequal(_be_(n,0,2),cst$91);
        if(_lR_)
         {var
           _lS_=caml_ml_string_length(n) < 2?1:0,
           _lT_=_lS_ || caml_string_notequal(_be_(n,0,2),cst$90);
          if(_lT_)
           {var
             _lU_=caml_ml_string_length(n) < 3?1:0,
             _lV_=_lU_ || caml_string_notequal(_be_(n,0,3),cst$89);
            if(_lV_)
             var
              _lW_=caml_ml_string_length(n) < 3?1:0,
              _lX_=_lW_ || caml_string_notequal(_be_(n,0,3),cst$88);
            else
             var _lX_=_lV_}
          else
           var _lX_=_lT_}
        else
         var _lX_=_lR_}
      else
       var _lX_=_lP_;
      return _lX_}
    function check_suffix$0(name,suff)
     {var _lM_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_lM_)
       var
        s=
         _be_
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _lN_=_bv_(suff),
        _lO_=caml_string_equal(_bv_(s),_lN_);
      else
       var _lO_=_lM_;
      return _lO_}
    try
     {var _lk_=caml_sys_getenv(cst_TEMP),_kz_=_lk_}
    catch(_lL_)
     {_lL_ = caml_wrap_exception(_lL_);
      if(_lL_ !== Not_found)throw _lL_;
      var _kz_=cst$92}
    function _kA_(s)
     {var l=caml_ml_string_length(s),b=_eC_(l + 20 | 0);
      _eM_(b,34);
      function add_bs(n)
       {var _lJ_=1;
        if(! (n < 1))
         {var j=_lJ_;
          for(;;)
           {_eM_(b,92);
            var _lK_=j + 1 | 0;
            if(n !== j){var j=_lK_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return _eM_(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _lH_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_lH_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_lH_,i$0])}
          if(92 === c)
           {var _lI_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_lI_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_lI_,i$0])}
          _eM_(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){_eM_(b,34);return add_bs(n$0)}
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            _eM_(b,34);
            var _lG_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_lG_)}
            return caml_trampoline_return(loop$0,[0,_lG_])}
          if(92 === c)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return _eD_(b)}
    function _kB_(s)
     {var _lC_=2 <= caml_ml_string_length(s)?1:0;
      if(_lC_)
       var
        param=caml_string_get(s,0),
        switch$0=91 <= param?25 < (param - 97 | 0) >>> 0?0:1:65 <= param?1:0,
        _lD_=switch$0?1:0,
        _lE_=_lD_?58 === caml_string_get(s,1)?1:0:_lD_;
      else
       var _lE_=_lC_;
      if(_lE_)
       {var _lF_=_be_(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,_be_(s,0,2),_lF_]}
      return [0,cst$93,s]}
    function _kC_(s)
     {var
       match=_kB_(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return _j_(drive,dir)}
    function _kD_(s)
     {var match=_kB_(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    function basename$0(_lB_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_lB_)}
    function _kE_(_lA_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_lA_)}
    if(caml_string_notequal(_bB_,cst_Cygwin))
     if(caml_string_notequal(_bB_,cst_Unix))
      {if(caml_string_notequal(_bB_,cst_Win32))throw [0,Assert_failure,_kF_];
       var
        _kG_=
         [0,
          current_dir_name$0,
          parent_dir_name$0,
          dir_sep$0,
          is_dir_sep$0,
          is_relative$0,
          is_implicit$0,
          check_suffix$0,
          _kz_,
          _kA_,
          _kD_,
          _kC_]}
     else
      var
       _kG_=
        [0,
         current_dir_name,
         parent_dir_name,
         dir_sep,
         is_dir_sep,
         is_relative,
         is_implicit,
         check_suffix,
         _kx_,
         quote,
         basename,
         _ky_];
    else
     var
      _kG_=
       [0,
        current_dir_name$1,
        parent_dir_name$1,
        dir_sep$1,
        is_dir_sep$0,
        is_relative$0,
        is_implicit$0,
        check_suffix$0,
        _kx_,
        quote,
        basename$0,
        _kE_];
    var
     _kK_=_kG_[8],
     _kO_=_kG_[4],
     _kP_=_kG_[3],
     _kH_=_kG_[11],
     _kI_=_kG_[10],
     _kJ_=_kG_[9],
     _kL_=_kG_[7],
     _kM_=_kG_[6],
     _kN_=_kG_[5],
     _kQ_=_kG_[2],
     _kR_=_kG_[1];
    function _kS_(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l)
       if(! _kO_(dirname,l - 1 | 0))return _j_(dirname,_j_(_kP_,filename));
      return _j_(dirname,filename)}
    function _kT_(name,suff)
     {var n=caml_ml_string_length(name) - caml_ml_string_length(suff) | 0;
      return 0 <= n?_be_(name,0,n):invalid_arg(cst_Filename_chop_suffix)}
    function _kU_(name)
     {var i$1=caml_ml_string_length(name) - 1 | 0,i=i$1;
      for(;;)
       {if(0 <= i)
         if(! _kO_(name,i))
          {if(46 === caml_string_get(name,i))return _be_(name,0,i);
           var i$0=i - 1 | 0,i=i$0;
           continue}
        return invalid_arg(cst_Filename_chop_extension)}}
    var _kV_=[246,function(_lz_){return caml_call1(_iH_[2],0)}];
    function _kW_(temp_dir,prefix,suffix)
     {var
       _lx_=caml_obj_tag(_kV_),
       _ly_=250 === _lx_?_kV_[1]:246 === _lx_?_d3_(_kV_):_kV_,
       rnd=caml_call1(_iH_[4],_ly_) & 16777215;
      return _kS_(temp_dir,caml_call3(_ha_(_kX_),prefix,rnd,suffix))}
    var _kY_=[0,_kK_];
    function _kZ_(s){_kY_[1] = s;return 0}
    function _k0_(param){return _kY_[1]}
    function _k1_(opt,prefix,suffix)
     {if(opt)var sth=opt[1],temp_dir=sth;else var temp_dir=_kY_[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=_kW_(temp_dir,prefix,suffix);
          try
           {runtime.caml_sys_close(caml_sys_open(name,_k2_,384));return name}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1e3 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    var
     Filename=
      [0,
       _kR_,
       _kQ_,
       _kP_,
       _kS_,
       _kN_,
       _kM_,
       _kL_,
       _kT_,
       _kU_,
       _kI_,
       _kH_,
       _k1_,
       function(opt,_lv_,prefix,suffix)
        {if(opt)var sth=opt[1],mode=sth;else var mode=_k3_;
         if(_lv_)var sth$0=_lv_[1],temp_dir=sth$0;else var temp_dir=_kY_[1];
         function try_name(counter)
          {var counter$0=counter;
           for(;;)
            {var name=_kW_(temp_dir,prefix,suffix);
             try
              {var
                _lw_=
                 [0,name,open_out_gen([0,1,[0,3,[0,5,mode]]],384,name)];
               return _lw_}
             catch(e)
              {e = caml_wrap_exception(e);
               if(e[1] === Sys_error)
                {if(1e3 <= counter$0)throw e;
                 var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
                 continue}
               throw e}}}
         return try_name(0)},
       _k0_,
       _kZ_,
       _kK_,
       _kJ_];
    caml_register_global(608,Filename,"Filename");
    function _k7_(x,y){return [254,x[1] + y[1],x[2] + y[2]]}
    function _k8_(x,y){return [254,x[1] - y[1],x[2] - y[2]]}
    function _k9_(x){return [254,- x[1],- x[2]]}
    function _k__(x){return [254,x[1],- x[2]]}
    function _k$_(x,y)
     {return [254,x[1] * y[1] - x[2] * y[2],x[1] * y[2] + x[2] * y[1]]}
    function _la_(x,y)
     {if(Math.abs(y[2]) <= Math.abs(y[1]))
       {var r=y[2] / y[1],d=y[1] + r * y[2];
        return [254,(x[1] + r * x[2]) / d,(x[2] - r * x[1]) / d]}
      var r$0=y[1] / y[2],d$0=y[2] + r$0 * y[1];
      return [254,(r$0 * x[1] + x[2]) / d$0,(r$0 * x[2] - x[1]) / d$0]}
    function _lb_(x){return _la_(_k5_,x)}
    function _lc_(x){return x[1] * x[1] + x[2] * x[2]}
    function _ld_(x)
     {var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(r == 0)return i;
      if(i == 0)return r;
      if(i <= r){var q=i / r;return r * Math.sqrt(1 + q * q)}
      var q$0=r / i;
      return i * Math.sqrt(1 + q$0 * q$0)}
    function _le_(x){return Math.atan2(x[2],x[1])}
    function _lf_(n,a){return [254,Math.cos(a) * n,Math.sin(a) * n]}
    function _lg_(x)
     {if(x[1] == 0)if(x[2] == 0)return _lh_;
      var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(i <= r)
       var
        q=i / r,
        w=Math.sqrt(r) * Math.sqrt(0.5 * (1 + Math.sqrt(1 + q * q)));
      else
       var
        q$0=r / i,
        w=Math.sqrt(i) * Math.sqrt(0.5 * (q$0 + Math.sqrt(1 + q$0 * q$0)));
      if(0 <= x[1])return [254,w,0.5 * x[2] / w];
      var w$0=0 <= x[2]?w:- w;
      return [254,0.5 * i / w,w$0]}
    function _li_(x)
     {var e=Math.exp(x[1]);return [254,e * Math.cos(x[2]),e * Math.sin(x[2])]}
    function _lj_(x)
     {var _lu_=Math.atan2(x[2],x[1]);return [254,Math.log(_ld_(x)),_lu_]}
    var
     Complex=
      [0,
       _k4_,
       _k5_,
       _k6_,
       _k9_,
       _k__,
       _k7_,
       _k8_,
       _k$_,
       _lb_,
       _la_,
       _lg_,
       _lc_,
       _ld_,
       _le_,
       _lf_,
       _li_,
       _lj_,
       function(x,y){return _li_(_k$_(y,_lj_(x)))}];
    caml_register_global(609,Complex,"Complex");
    var
     ArrayLabels=
      [0,
       _q_,
       _r_,
       _r_,
       _t_,
       _J_,
       _u_,
       _s_,
       _v_,
       _w_,
       _B_,
       _C_,
       _x_,
       _y_,
       _z_,
       _A_,
       _D_,
       _E_,
       _G_,
       _I_,
       _I_];
    caml_register_global(610,ArrayLabels,"ArrayLabels");
    var
     ListLabels=
      [0,
       _K_,
       _L_,
       _M_,
       _N_,
       _P_,
       _k_,
       _O_,
       _Q_,
       _Q_,
       _V_,
       _W_,
       _R_,
       _T_,
       _U_,
       _X_,
       _Y_,
       _$_,
       _Z_,
       ___,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ao_,
       _ap_,
       _ap_,
       _aq_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ar_,
       _at_,
       _ax_,
       _ax_,
       _ax_,
       _au_];
    caml_register_global(611,ListLabels,"ListLabels");
    var
     BytesLabels=
      [0,
       make,
       init,
       _aD_,
       _aE_,
       _aG_,
       _aF_,
       _aH_,
       _aI_,
       _aK_,
       _aL_,
       _aP_,
       _aN_,
       _aO_,
       _aU_,
       _aV_,
       _aS_,
       _aT_,
       _a2_,
       _a5_,
       _a3_,
       _a6_,
       _a8_,
       _a7_,
       _a9_,
       _aW_,
       _aX_,
       _aZ_,
       _a0_,
       _a__,
       _ba_,
       _a$_];
    caml_register_global(612,BytesLabels,"BytesLabels");
    var
     StringLabels=
      [0,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _aK_,
       _aM_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       _bw_,
       _bx_,
       _by_];
    caml_register_global(613,StringLabels,"StringLabels");
    var MoreLabels=[0,Hashtbl,Map,Set];
    caml_register_global(614,MoreLabels,"MoreLabels");
    var StdLabels=[0,0,0,0,0];
    caml_register_global(615,StdLabels,"StdLabels");
    return}
  (function(){return this}()));


//# 1 "../.js/uchar/uchar.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_new_string=runtime.caml_new_string;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_U_0000_has_no_predecessor=
      caml_new_string("U+0000 has no predecessor"),
     cst_U_10FFFF_has_no_successor=
      caml_new_string("U+10FFFF has no successor"),
     Pervasives=global_data.Pervasives,
     Printf=global_data.Printf,
     _b_=
      [0,
       [11,
        caml_new_string("U+"),
        [4,8,[0,2,4],0,[11,caml_new_string(" is not a latin1 character"),0]]],
       caml_new_string("U+%04X is not a latin1 character")],
     _a_=
      [0,
       [4,8,0,0,[11,caml_new_string(" is not an Unicode scalar value"),0]],
       caml_new_string("%X is not an Unicode scalar value")],
     _c_=0,
     _d_=1114111,
     _e_=55295,
     _f_=57344;
    function _g_(_I_)
     {return _I_ === 55295
              ?_f_
              :_I_ === 1114111
                ?caml_call1(Pervasives[1],cst_U_10FFFF_has_no_successor)
                :_I_ + 1 | 0}
    function _h_(_H_)
     {return _H_ === 57344
              ?_e_
              :_H_ === 0
                ?caml_call1(Pervasives[1],cst_U_0000_has_no_predecessor)
                :_H_ - 1 | 0}
    function _i_(_C_)
     {var _D_=0 <= _C_?1:0,_E_=_D_?_C_ <= 55295?1:0:_D_;
      if(_E_)
       var _F_=_E_;
      else
       var _G_=57344 <= _C_?1:0,_F_=_G_?_C_ <= 1114111?1:0:_G_;
      return _F_}
    function _j_(_B_)
     {if(_i_(_B_))return _B_;
      var _A_=caml_call2(Printf[4],_a_,_B_);
      return caml_call1(Pervasives[1],_A_)}
    function _k_(_z_){return _z_ < 256?1:0}
    function _l_(_y_){return _y_}
    function _m_(_x_)
     {if(255 < _x_)
       {var _w_=caml_call2(Printf[4],_b_,_x_);
        return caml_call1(Pervasives[1],_w_)}
      return _x_}
    function _n_(_v_){return _v_}
    var _o_=runtime.caml_equal,_p_=runtime.caml_compare;
    function _q_(_u_){return _u_}
    function _r_(_t_){return _t_}
    var
     Uchar=
      [0,
       _c_,
       _d_,
       _g_,
       _h_,
       _i_,
       _j_,
       function(_s_){return _s_},
       _r_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_];
    runtime.caml_register_global(6,Uchar,"Uchar");
    return}
  (function(){return this}()));


//# 1 "../.js/js_of_ocaml/js_of_ocaml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_equal=runtime.caml_equal,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_from_string=runtime.caml_js_from_string,
     caml_js_get=runtime.caml_js_get,
     caml_js_html_escape=runtime.caml_js_html_escape,
     caml_js_set=runtime.caml_js_set,
     caml_js_to_byte_string=runtime.caml_js_to_byte_string,
     caml_js_to_string=runtime.caml_js_to_string,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsbytes_of_string=runtime.caml_jsbytes_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseFloat=caml_new_string("parseFloat"),
     cst_parseInt=caml_new_string("parseInt"),
     cst_Js_Error=caml_new_string("Js.Error"),
     cst_jsError=caml_new_string("jsError"),
     cst_can_t_retrieve_file_name_not_implemented=
      caml_new_string("can't retrieve file name: not implemented"),
     cst_endings=caml_new_string("endings"),
     cst_type=caml_new_string("type"),
     cst_loadstart=caml_new_string("loadstart"),
     cst_progress=caml_new_string("progress"),
     cst_abort=caml_new_string("abort"),
     cst_error=caml_new_string("error"),
     cst_load=caml_new_string("load"),
     cst_loadend=caml_new_string("loadend"),
     cst_a$1=caml_new_string("a"),
     cst_area$1=caml_new_string("area"),
     cst_audio$1=caml_new_string("audio"),
     cst_base$1=caml_new_string("base"),
     cst_blockquote$1=caml_new_string("blockquote"),
     cst_body$1=caml_new_string("body"),
     cst_br$1=caml_new_string("br"),
     cst_button$1=caml_new_string("button"),
     cst_canvas$1=caml_new_string("canvas"),
     cst_caption$1=caml_new_string("caption"),
     cst_col$1=caml_new_string("col"),
     cst_colgroup$1=caml_new_string("colgroup"),
     cst_del$1=caml_new_string("del"),
     cst_div$1=caml_new_string("div"),
     cst_dl$1=caml_new_string("dl"),
     cst_embed$1=caml_new_string("embed"),
     cst_fieldset$1=caml_new_string("fieldset"),
     cst_form$1=caml_new_string("form"),
     cst_frame$1=caml_new_string("frame"),
     cst_frameset$1=caml_new_string("frameset"),
     cst_h1$1=caml_new_string("h1"),
     cst_h2$1=caml_new_string("h2"),
     cst_h3$1=caml_new_string("h3"),
     cst_h4$1=caml_new_string("h4"),
     cst_h5$1=caml_new_string("h5"),
     cst_h6$1=caml_new_string("h6"),
     cst_head$1=caml_new_string("head"),
     cst_hr$1=caml_new_string("hr"),
     cst_html$1=caml_new_string("html"),
     cst_iframe$1=caml_new_string("iframe"),
     cst_img$1=caml_new_string("img"),
     cst_input$2=caml_new_string("input"),
     cst_ins$1=caml_new_string("ins"),
     cst_label$1=caml_new_string("label"),
     cst_legend$1=caml_new_string("legend"),
     cst_li$1=caml_new_string("li"),
     cst_link$1=caml_new_string("link"),
     cst_map$1=caml_new_string("map"),
     cst_meta$1=caml_new_string("meta"),
     cst_object$1=caml_new_string("object"),
     cst_ol$1=caml_new_string("ol"),
     cst_optgroup$1=caml_new_string("optgroup"),
     cst_option$1=caml_new_string("option"),
     cst_p$1=caml_new_string("p"),
     cst_param$1=caml_new_string("param"),
     cst_pre$1=caml_new_string("pre"),
     cst_q$1=caml_new_string("q"),
     cst_script$1=caml_new_string("script"),
     cst_select$2=caml_new_string("select"),
     cst_style$1=caml_new_string("style"),
     cst_table$1=caml_new_string("table"),
     cst_tbody$1=caml_new_string("tbody"),
     cst_td$1=caml_new_string("td"),
     cst_textarea$1=caml_new_string("textarea"),
     cst_tfoot$1=caml_new_string("tfoot"),
     cst_th$1=caml_new_string("th"),
     cst_thead$1=caml_new_string("thead"),
     cst_title$1=caml_new_string("title"),
     cst_tr$1=caml_new_string("tr"),
     cst_ul$1=caml_new_string("ul"),
     cst_video$1=caml_new_string("video"),
     cst_KeyH=caml_new_string("KeyH"),
     cst_Digit6=caml_new_string("Digit6"),
     cst_BrowserRefresh=caml_new_string("BrowserRefresh"),
     cst_Backslash=caml_new_string("Backslash"),
     cst_AltLeft=caml_new_string("AltLeft"),
     cst_AltRight=caml_new_string("AltRight"),
     cst_ArrowDown=caml_new_string("ArrowDown"),
     cst_ArrowLeft=caml_new_string("ArrowLeft"),
     cst_ArrowRight=caml_new_string("ArrowRight"),
     cst_ArrowUp=caml_new_string("ArrowUp"),
     cst_Backquote=caml_new_string("Backquote"),
     cst_Backspace=caml_new_string("Backspace"),
     cst_BracketLeft=caml_new_string("BracketLeft"),
     cst_BracketRight=caml_new_string("BracketRight"),
     cst_BrowserBack=caml_new_string("BrowserBack"),
     cst_BrowserFavorites=caml_new_string("BrowserFavorites"),
     cst_BrowserForward=caml_new_string("BrowserForward"),
     cst_BrowserHome=caml_new_string("BrowserHome"),
     cst_Delete=caml_new_string("Delete"),
     cst_BrowserSearch=caml_new_string("BrowserSearch"),
     cst_BrowserStop=caml_new_string("BrowserStop"),
     cst_CapsLock=caml_new_string("CapsLock"),
     cst_Comma=caml_new_string("Comma"),
     cst_ContextMenu=caml_new_string("ContextMenu"),
     cst_ControlLeft=caml_new_string("ControlLeft"),
     cst_ControlRight=caml_new_string("ControlRight"),
     cst_Digit0=caml_new_string("Digit0"),
     cst_Digit1=caml_new_string("Digit1"),
     cst_Digit2=caml_new_string("Digit2"),
     cst_Digit3=caml_new_string("Digit3"),
     cst_Digit4=caml_new_string("Digit4"),
     cst_Digit5=caml_new_string("Digit5"),
     cst_F6=caml_new_string("F6"),
     cst_F1=caml_new_string("F1"),
     cst_Digit7=caml_new_string("Digit7"),
     cst_Digit8=caml_new_string("Digit8"),
     cst_Digit9=caml_new_string("Digit9"),
     cst_End=caml_new_string("End"),
     cst_Enter=caml_new_string("Enter"),
     cst_Equal=caml_new_string("Equal"),
     cst_Escape=caml_new_string("Escape"),
     cst_F10=caml_new_string("F10"),
     cst_F11=caml_new_string("F11"),
     cst_F12=caml_new_string("F12"),
     cst_F2=caml_new_string("F2"),
     cst_F3=caml_new_string("F3"),
     cst_F4=caml_new_string("F4"),
     cst_F5=caml_new_string("F5"),
     cst_KeyA=caml_new_string("KeyA"),
     cst_F7=caml_new_string("F7"),
     cst_F8=caml_new_string("F8"),
     cst_F9=caml_new_string("F9"),
     cst_Home=caml_new_string("Home"),
     cst_Insert=caml_new_string("Insert"),
     cst_IntlBackslash=caml_new_string("IntlBackslash"),
     cst_IntlYen=caml_new_string("IntlYen"),
     cst_KeyB=caml_new_string("KeyB"),
     cst_KeyC=caml_new_string("KeyC"),
     cst_KeyD=caml_new_string("KeyD"),
     cst_KeyE=caml_new_string("KeyE"),
     cst_KeyF=caml_new_string("KeyF"),
     cst_KeyG=caml_new_string("KeyG"),
     cst_Numpad4=caml_new_string("Numpad4"),
     cst_KeyX=caml_new_string("KeyX"),
     cst_KeyP=caml_new_string("KeyP"),
     cst_KeyI=caml_new_string("KeyI"),
     cst_KeyJ=caml_new_string("KeyJ"),
     cst_KeyK=caml_new_string("KeyK"),
     cst_KeyL=caml_new_string("KeyL"),
     cst_KeyM=caml_new_string("KeyM"),
     cst_KeyN=caml_new_string("KeyN"),
     cst_KeyO=caml_new_string("KeyO"),
     cst_KeyQ=caml_new_string("KeyQ"),
     cst_KeyR=caml_new_string("KeyR"),
     cst_KeyS=caml_new_string("KeyS"),
     cst_KeyT=caml_new_string("KeyT"),
     cst_KeyU=caml_new_string("KeyU"),
     cst_KeyV=caml_new_string("KeyV"),
     cst_KeyW=caml_new_string("KeyW"),
     cst_MetaRight=caml_new_string("MetaRight"),
     cst_KeyY=caml_new_string("KeyY"),
     cst_KeyZ=caml_new_string("KeyZ"),
     cst_MediaPlayPause=caml_new_string("MediaPlayPause"),
     cst_MediaStop=caml_new_string("MediaStop"),
     cst_MediaTrackNext=caml_new_string("MediaTrackNext"),
     cst_MediaTrackPrevious=caml_new_string("MediaTrackPrevious"),
     cst_MetaLeft=caml_new_string("MetaLeft"),
     cst_Minus=caml_new_string("Minus"),
     cst_NumLock=caml_new_string("NumLock"),
     cst_Numpad0=caml_new_string("Numpad0"),
     cst_Numpad1=caml_new_string("Numpad1"),
     cst_Numpad2=caml_new_string("Numpad2"),
     cst_Numpad3=caml_new_string("Numpad3"),
     cst_PageUp=caml_new_string("PageUp"),
     cst_NumpadDivide=caml_new_string("NumpadDivide"),
     cst_Numpad5=caml_new_string("Numpad5"),
     cst_Numpad6=caml_new_string("Numpad6"),
     cst_Numpad7=caml_new_string("Numpad7"),
     cst_Numpad8=caml_new_string("Numpad8"),
     cst_Numpad9=caml_new_string("Numpad9"),
     cst_NumpadAdd=caml_new_string("NumpadAdd"),
     cst_NumpadDecimal=caml_new_string("NumpadDecimal"),
     cst_NumpadEnter=caml_new_string("NumpadEnter"),
     cst_NumpadEqual=caml_new_string("NumpadEqual"),
     cst_NumpadMultiply=caml_new_string("NumpadMultiply"),
     cst_NumpadSubtract=caml_new_string("NumpadSubtract"),
     cst_OSLeft=caml_new_string("OSLeft"),
     cst_OSRight=caml_new_string("OSRight"),
     cst_PageDown=caml_new_string("PageDown"),
     cst_ShiftRight=caml_new_string("ShiftRight"),
     cst_Pause=caml_new_string("Pause"),
     cst_Period=caml_new_string("Period"),
     cst_PrintScreen=caml_new_string("PrintScreen"),
     cst_Quote=caml_new_string("Quote"),
     cst_ScrollLock=caml_new_string("ScrollLock"),
     cst_Semicolon=caml_new_string("Semicolon"),
     cst_ShiftLeft=caml_new_string("ShiftLeft"),
     cst_Slash=caml_new_string("Slash"),
     cst_Space=caml_new_string("Space"),
     cst_Tab=caml_new_string("Tab"),
     cst_VolumeDown=caml_new_string("VolumeDown"),
     cst_VolumeMute=caml_new_string("VolumeMute"),
     cst_VolumeUp=caml_new_string("VolumeUp"),
     cst_mouseout$0=caml_new_string("mouseout"),
     cst_mouseover$0=caml_new_string("mouseover"),
     cst_video$0=caml_new_string("video"),
     cst_audio$0=caml_new_string("audio"),
     cst_ul$0=caml_new_string("ul"),
     cst_tr$0=caml_new_string("tr"),
     cst_title$0=caml_new_string("title"),
     cst_thead$0=caml_new_string("thead"),
     cst_th$0=caml_new_string("th"),
     cst_tfoot$0=caml_new_string("tfoot"),
     cst_textarea$0=caml_new_string("textarea"),
     cst_td$0=caml_new_string("td"),
     cst_tbody$0=caml_new_string("tbody"),
     cst_table$0=caml_new_string("table"),
     cst_style$0=caml_new_string("style"),
     cst_select$1=caml_new_string("select"),
     cst_script$0=caml_new_string("script"),
     cst_q$0=caml_new_string("q"),
     cst_pre$0=caml_new_string("pre"),
     cst_param$0=caml_new_string("param"),
     cst_p$0=caml_new_string("p"),
     cst_option$0=caml_new_string("option"),
     cst_optgroup$0=caml_new_string("optgroup"),
     cst_ol$0=caml_new_string("ol"),
     cst_object$0=caml_new_string("object"),
     cst_meta$0=caml_new_string("meta"),
     cst_map$0=caml_new_string("map"),
     cst_link$0=caml_new_string("link"),
     cst_li$0=caml_new_string("li"),
     cst_legend$0=caml_new_string("legend"),
     cst_label$0=caml_new_string("label"),
     cst_ins$0=caml_new_string("ins"),
     cst_input$1=caml_new_string("input"),
     cst_img$0=caml_new_string("img"),
     cst_iframe$0=caml_new_string("iframe"),
     cst_html$0=caml_new_string("html"),
     cst_hr$0=caml_new_string("hr"),
     cst_head$0=caml_new_string("head"),
     cst_h6$0=caml_new_string("h6"),
     cst_h5$0=caml_new_string("h5"),
     cst_h4$0=caml_new_string("h4"),
     cst_h3$0=caml_new_string("h3"),
     cst_h2$0=caml_new_string("h2"),
     cst_h1$0=caml_new_string("h1"),
     cst_frame$0=caml_new_string("frame"),
     cst_frameset$0=caml_new_string("frameset"),
     cst_form$0=caml_new_string("form"),
     cst_embed$0=caml_new_string("embed"),
     cst_fieldset$0=caml_new_string("fieldset"),
     cst_dl$0=caml_new_string("dl"),
     cst_div$0=caml_new_string("div"),
     cst_del$0=caml_new_string("del"),
     cst_colgroup$0=caml_new_string("colgroup"),
     cst_col$0=caml_new_string("col"),
     cst_caption$0=caml_new_string("caption"),
     cst_canvas$0=caml_new_string("canvas"),
     cst_button$0=caml_new_string("button"),
     cst_br$0=caml_new_string("br"),
     cst_body$0=caml_new_string("body"),
     cst_blockquote$0=caml_new_string("blockquote"),
     cst_base$0=caml_new_string("base"),
     cst_area$0=caml_new_string("area"),
     cst_a$0=caml_new_string("a"),
     cst_canvas=caml_new_string("canvas"),
     cst_video=caml_new_string("video"),
     cst_audio=caml_new_string("audio"),
     cst_iframe=caml_new_string("iframe"),
     cst_frame=caml_new_string("frame"),
     cst_frameset=caml_new_string("frameset"),
     cst_address=caml_new_string("address"),
     cst_noscript=caml_new_string("noscript"),
     cst_dt=caml_new_string("dt"),
     cst_dd=caml_new_string("dd"),
     cst_abbr=caml_new_string("abbr"),
     cst_var=caml_new_string("var"),
     cst_kbd=caml_new_string("kbd"),
     cst_samp=caml_new_string("samp"),
     cst_code=caml_new_string("code"),
     cst_dfn=caml_new_string("dfn"),
     cst_cite=caml_new_string("cite"),
     cst_strong=caml_new_string("strong"),
     cst_em=caml_new_string("em"),
     cst_small=caml_new_string("small"),
     cst_big=caml_new_string("big"),
     cst_b=caml_new_string("b"),
     cst_i=caml_new_string("i"),
     cst_tt=caml_new_string("tt"),
     cst_span=caml_new_string("span"),
     cst_sup=caml_new_string("sup"),
     cst_sub=caml_new_string("sub"),
     cst_td=caml_new_string("td"),
     cst_th=caml_new_string("th"),
     cst_tr=caml_new_string("tr"),
     cst_tbody=caml_new_string("tbody"),
     cst_tfoot=caml_new_string("tfoot"),
     cst_thead=caml_new_string("thead"),
     cst_colgroup=caml_new_string("colgroup"),
     cst_col=caml_new_string("col"),
     cst_caption=caml_new_string("caption"),
     cst_table=caml_new_string("table"),
     cst_script=caml_new_string("script"),
     cst_area=caml_new_string("area"),
     cst_map=caml_new_string("map"),
     cst_param=caml_new_string("param"),
     cst_object=caml_new_string("object"),
     cst_img=caml_new_string("img"),
     cst_a=caml_new_string("a"),
     cst_del=caml_new_string("del"),
     cst_ins=caml_new_string("ins"),
     cst_hr=caml_new_string("hr"),
     cst_br=caml_new_string("br"),
     cst_pre=caml_new_string("pre"),
     cst_blockquote=caml_new_string("blockquote"),
     cst_q=caml_new_string("q"),
     cst_h6=caml_new_string("h6"),
     cst_h5=caml_new_string("h5"),
     cst_h4=caml_new_string("h4"),
     cst_h3=caml_new_string("h3"),
     cst_h2=caml_new_string("h2"),
     cst_h1=caml_new_string("h1"),
     cst_p=caml_new_string("p"),
     cst_embed=caml_new_string("embed"),
     cst_div=caml_new_string("div"),
     cst_li=caml_new_string("li"),
     cst_dl=caml_new_string("dl"),
     cst_ol=caml_new_string("ol"),
     cst_ul=caml_new_string("ul"),
     cst_legend=caml_new_string("legend"),
     cst_fieldset=caml_new_string("fieldset"),
     cst_label=caml_new_string("label"),
     cst_button=caml_new_string("button"),
     cst_textarea=caml_new_string("textarea"),
     cst_input$0=caml_new_string("input"),
     cst_select$0=caml_new_string("select"),
     cst_option=caml_new_string("option"),
     cst_optgroup=caml_new_string("optgroup"),
     cst_form=caml_new_string("form"),
     cst_body=caml_new_string("body"),
     cst_style=caml_new_string("style"),
     cst_base=caml_new_string("base"),
     cst_meta=caml_new_string("meta"),
     cst_title=caml_new_string("title"),
     cst_link=caml_new_string("link"),
     cst_head=caml_new_string("head"),
     cst_html=caml_new_string("html"),
     cst_click=caml_new_string("click"),
     cst_dblclick=caml_new_string("dblclick"),
     cst_mousedown=caml_new_string("mousedown"),
     cst_mouseup=caml_new_string("mouseup"),
     cst_mouseover=caml_new_string("mouseover"),
     cst_mousemove=caml_new_string("mousemove"),
     cst_mouseout=caml_new_string("mouseout"),
     cst_keypress=caml_new_string("keypress"),
     cst_keydown=caml_new_string("keydown"),
     cst_keyup=caml_new_string("keyup"),
     cst_mousewheel=caml_new_string("mousewheel"),
     cst_DOMMouseScroll=caml_new_string("DOMMouseScroll"),
     cst_touchstart=caml_new_string("touchstart"),
     cst_touchmove=caml_new_string("touchmove"),
     cst_touchend=caml_new_string("touchend"),
     cst_touchcancel=caml_new_string("touchcancel"),
     cst_dragstart=caml_new_string("dragstart"),
     cst_dragend=caml_new_string("dragend"),
     cst_dragenter=caml_new_string("dragenter"),
     cst_dragover=caml_new_string("dragover"),
     cst_dragleave=caml_new_string("dragleave"),
     cst_drag=caml_new_string("drag"),
     cst_drop=caml_new_string("drop"),
     cst_hashchange=caml_new_string("hashchange"),
     cst_change=caml_new_string("change"),
     cst_input=caml_new_string("input"),
     cst_timeupdate=caml_new_string("timeupdate"),
     cst_submit=caml_new_string("submit"),
     cst_scroll=caml_new_string("scroll"),
     cst_focus=caml_new_string("focus"),
     cst_blur=caml_new_string("blur"),
     cst_load$0=caml_new_string("load"),
     cst_unload=caml_new_string("unload"),
     cst_beforeunload=caml_new_string("beforeunload"),
     cst_resize=caml_new_string("resize"),
     cst_orientationchange=caml_new_string("orientationchange"),
     cst_popstate=caml_new_string("popstate"),
     cst_error$0=caml_new_string("error"),
     cst_abort$0=caml_new_string("abort"),
     cst_select=caml_new_string("select"),
     cst_online=caml_new_string("online"),
     cst_offline=caml_new_string("offline"),
     cst_checking=caml_new_string("checking"),
     cst_noupdate=caml_new_string("noupdate"),
     cst_downloading=caml_new_string("downloading"),
     cst_progress$0=caml_new_string("progress"),
     cst_updateready=caml_new_string("updateready"),
     cst_cached=caml_new_string("cached"),
     cst_obsolete=caml_new_string("obsolete"),
     cst_DOMContentLoaded=caml_new_string("DOMContentLoaded"),
     cst_animationstart=caml_new_string("animationstart"),
     cst_animationend=caml_new_string("animationend"),
     cst_animationiteration=caml_new_string("animationiteration"),
     cst_animationcancel=caml_new_string("animationcancel"),
     cst_canplay=caml_new_string("canplay"),
     cst_canplaythrough=caml_new_string("canplaythrough"),
     cst_durationchange=caml_new_string("durationchange"),
     cst_emptied=caml_new_string("emptied"),
     cst_ended=caml_new_string("ended"),
     cst_loadeddata=caml_new_string("loadeddata"),
     cst_loadedmetadata=caml_new_string("loadedmetadata"),
     cst_loadstart$0=caml_new_string("loadstart"),
     cst_pause=caml_new_string("pause"),
     cst_play=caml_new_string("play"),
     cst_playing=caml_new_string("playing"),
     cst_ratechange=caml_new_string("ratechange"),
     cst_seeked=caml_new_string("seeked"),
     cst_seeking=caml_new_string("seeking"),
     cst_stalled=caml_new_string("stalled"),
     cst_suspend=caml_new_string("suspend"),
     cst_volumechange=caml_new_string("volumechange"),
     cst_waiting=caml_new_string("waiting"),
     cst_Dom_html_Canvas_not_available=
      caml_new_string("Dom_html.Canvas_not_available"),
     cst_checkbox=caml_new_string("checkbox"),
     cst_file=caml_new_string("file"),
     cst_password=caml_new_string("password"),
     cst_radio=caml_new_string("radio"),
     cst_reset=caml_new_string("reset"),
     cst_submit$0=caml_new_string("submit"),
     cst_text=caml_new_string("text"),
     cst_readystatechange=caml_new_string("readystatechange"),
     cst_loadstart$1=caml_new_string("loadstart"),
     cst_progress$1=caml_new_string("progress"),
     cst_abort$1=caml_new_string("abort"),
     cst_error$1=caml_new_string("error"),
     cst_load$1=caml_new_string("load"),
     cst_timeout=caml_new_string("timeout"),
     cst_loadend$0=caml_new_string("loadend"),
     cst_Worker_onmessage_is_undefined$0=
      caml_new_string("Worker.onmessage is undefined"),
     cst_Worker_onmessage_is_undefined=
      caml_new_string("Worker.onmessage is undefined"),
     cst_Worker_import_scripts_is_undefined=
      caml_new_string("Worker.import_scripts is undefined"),
     cst_webglcontextlost=caml_new_string("webglcontextlost"),
     cst_webglcontextrestored=caml_new_string("webglcontextrestored"),
     cst_webglcontextcreationerror=
      caml_new_string("webglcontextcreationerror"),
     cst_g=caml_new_string("g"),
     cst=caml_new_string("[\\][()\\\\|+*.?{}^$]"),
     cst$37=caml_new_string(""),
     cst$13=caml_new_string(""),
     cst$21=caml_new_string(""),
     cst$14=caml_new_string("#"),
     cst$15=caml_new_string("?"),
     cst$20=caml_new_string(""),
     cst$16=caml_new_string("/"),
     cst$17=caml_new_string("/"),
     cst$19=caml_new_string(":"),
     cst$18=caml_new_string(""),
     cst_http$1=caml_new_string("http://"),
     cst$22=caml_new_string(""),
     cst$30=caml_new_string(""),
     cst$23=caml_new_string("#"),
     cst$24=caml_new_string("?"),
     cst$29=caml_new_string(""),
     cst$25=caml_new_string("/"),
     cst$26=caml_new_string("/"),
     cst$28=caml_new_string(":"),
     cst$27=caml_new_string(""),
     cst_https$1=caml_new_string("https://"),
     cst$31=caml_new_string(""),
     cst$36=caml_new_string(""),
     cst$32=caml_new_string("#"),
     cst$33=caml_new_string("?"),
     cst$35=caml_new_string(""),
     cst$34=caml_new_string("/"),
     cst_file$2=caml_new_string("file://"),
     cst$12=caml_new_string(""),
     cst$11=caml_new_string(""),
     cst$10=caml_new_string(""),
     cst$9=caml_new_string(""),
     cst$8=caml_new_string(""),
     cst$7=caml_new_string(""),
     cst$6=caml_new_string(""),
     cst$4=caml_new_string("="),
     cst$5=caml_new_string("&"),
     cst$2=caml_new_string(""),
     cst$3=caml_new_string(""),
     cst_file$0=caml_new_string("file"),
     cst_file$1=caml_new_string("file:"),
     cst_http=caml_new_string("http"),
     cst_http$0=caml_new_string("http:"),
     cst_https=caml_new_string("https"),
     cst_https$0=caml_new_string("https:"),
     cst$1=caml_new_string(" "),
     cst_2B=caml_new_string("%2B"),
     cst_Url_Local_exn=caml_new_string("Url.Local_exn"),
     cst$0=caml_new_string("+"),
     cst_Url_Not_an_http_protocol=caml_new_string("Url.Not_an_http_protocol"),
     cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0_9a_zA_Z_0_9A_Fa_f_0_9=
      caml_new_string
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     cst_Ff_Ii_Ll_Ee=
      caml_new_string
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     cst_3_2_0=caml_new_string("3.2.0"),
     cst$38=caml_new_string(""),
     cst_Jstable_keys=caml_new_string("Jstable.keys"),
     dummy_string=caml_new_string(""),
     cst_is_not_a_valid_length$0=caml_new_string(" is not a valid length"),
     cst_d_d_deg_grad_rad_turns=
      caml_new_string("^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$"),
     cst_length_conversion_error$0=
      caml_new_string("length conversion error: "),
     cst_deg$0=caml_new_string("deg"),
     cst_grad$0=caml_new_string("grad"),
     cst_rad$0=caml_new_string("rad"),
     cst_turns$0=caml_new_string("turns"),
     cst_deg=caml_new_string("deg"),
     cst_grad=caml_new_string("grad"),
     cst_rad=caml_new_string("rad"),
     cst_turns=caml_new_string("turns"),
     cst_is_not_a_valid_length=caml_new_string(" is not a valid length"),
     cst_0$0=caml_new_string("0"),
     cst_d_d_s_S=caml_new_string("^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$"),
     cst_length_conversion_error=caml_new_string("length conversion error: "),
     cst_pc$0=caml_new_string("pc"),
     cst_ch$0=caml_new_string("ch"),
     cst_cm$0=caml_new_string("cm"),
     cst_em$1=caml_new_string("em"),
     cst_ex$0=caml_new_string("ex"),
     cst_gd$0=caml_new_string("gd"),
     cst_in$0=caml_new_string("in"),
     cst_mm$0=caml_new_string("mm"),
     cst_pt$0=caml_new_string("pt"),
     cst_px$0=caml_new_string("px"),
     cst_rem$0=caml_new_string("rem"),
     cst_vh$0=caml_new_string("vh"),
     cst_vm$0=caml_new_string("vm"),
     cst_vw$0=caml_new_string("vw"),
     cst_0=caml_new_string("0"),
     cst_em$0=caml_new_string("em"),
     cst_ex=caml_new_string("ex"),
     cst_px=caml_new_string("px"),
     cst_gd=caml_new_string("gd"),
     cst_rem=caml_new_string("rem"),
     cst_vw=caml_new_string("vw"),
     cst_vh=caml_new_string("vh"),
     cst_vm=caml_new_string("vm"),
     cst_ch=caml_new_string("ch"),
     cst_mm=caml_new_string("mm"),
     cst_cm=caml_new_string("cm"),
     cst_in=caml_new_string("in"),
     cst_pt=caml_new_string("pt"),
     cst_pc=caml_new_string("pc"),
     cst$40=caml_new_string("): "),
     cst_color_conversion_error$0=caml_new_string("color conversion error ("),
     cst$39=caml_new_string("): "),
     cst_color_conversion_error=caml_new_string("color conversion error ("),
     cst_is_not_a_valid_color$0=caml_new_string(" is not a valid color"),
     cst_rgba_d_d_d_d_d=
      caml_new_string
       ("(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgba_d_d_d_d_d$0=
      caml_new_string
       ("(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_hsla_d_d_d_d_d=
      caml_new_string
       ("(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgb=caml_new_string("rgb"),
     cst_rgba=caml_new_string("rgba"),
     cst_rgb$0=caml_new_string("rgb"),
     cst_rgba$0=caml_new_string("rgba"),
     cst_hsl=caml_new_string("hsl"),
     cst_hsla=caml_new_string("hsla"),
     cst_rgb_s_d_s_d_s_d=
      caml_new_string("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     cst_rgb_s_d_s_d_s_d$0=
      caml_new_string("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d=
      caml_new_string("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d$0=
      caml_new_string
       ("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_hsl_s_d_s_d_s_d=
      caml_new_string("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_hsla_s_d_s_d_s_d_d_d=
      caml_new_string("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_is_not_a_valid_color=caml_new_string(" is not a valid color"),
     cst_is_out_of_valid_range=caml_new_string(" is out of valid range"),
     partial=[8,0,0,0,[12,41,0]],
     partial$0=[12,41,0],
     cst_lightgrey$0=caml_new_string("lightgrey"),
     cst_darkslategray$0=caml_new_string("darkslategray"),
     cst_cornsilk$0=caml_new_string("cornsilk"),
     cst_blue$0=caml_new_string("blue"),
     cst_aliceblue$0=caml_new_string("aliceblue"),
     cst_antiquewhite$0=caml_new_string("antiquewhite"),
     cst_aqua$0=caml_new_string("aqua"),
     cst_aquamarine$0=caml_new_string("aquamarine"),
     cst_azure$0=caml_new_string("azure"),
     cst_beige$0=caml_new_string("beige"),
     cst_bisque$0=caml_new_string("bisque"),
     cst_black$0=caml_new_string("black"),
     cst_blanchedalmond$0=caml_new_string("blanchedalmond"),
     cst_blueviolet$0=caml_new_string("blueviolet"),
     cst_brown$0=caml_new_string("brown"),
     cst_burlywood$0=caml_new_string("burlywood"),
     cst_cadetblue$0=caml_new_string("cadetblue"),
     cst_chartreuse$0=caml_new_string("chartreuse"),
     cst_chocolate$0=caml_new_string("chocolate"),
     cst_coral$0=caml_new_string("coral"),
     cst_cornflowerblue$0=caml_new_string("cornflowerblue"),
     cst_darkkhaki$0=caml_new_string("darkkhaki"),
     cst_crimson$0=caml_new_string("crimson"),
     cst_cyan$0=caml_new_string("cyan"),
     cst_darkblue$0=caml_new_string("darkblue"),
     cst_darkcyan$0=caml_new_string("darkcyan"),
     cst_darkgoldenrod$0=caml_new_string("darkgoldenrod"),
     cst_darkgray$0=caml_new_string("darkgray"),
     cst_darkgreen$0=caml_new_string("darkgreen"),
     cst_darkgrey$0=caml_new_string("darkgrey"),
     cst_darkmagenta$0=caml_new_string("darkmagenta"),
     cst_darkolivegreen$0=caml_new_string("darkolivegreen"),
     cst_darkorange$0=caml_new_string("darkorange"),
     cst_darkorchid$0=caml_new_string("darkorchid"),
     cst_darkred$0=caml_new_string("darkred"),
     cst_darksalmon$0=caml_new_string("darksalmon"),
     cst_darkseagreen$0=caml_new_string("darkseagreen"),
     cst_darkslateblue$0=caml_new_string("darkslateblue"),
     cst_greenyellow$0=caml_new_string("greenyellow"),
     cst_floralwhite$0=caml_new_string("floralwhite"),
     cst_darkslategrey$0=caml_new_string("darkslategrey"),
     cst_darkturquoise$0=caml_new_string("darkturquoise"),
     cst_darkviolet$0=caml_new_string("darkviolet"),
     cst_deeppink$0=caml_new_string("deeppink"),
     cst_deepskyblue$0=caml_new_string("deepskyblue"),
     cst_dimgray$0=caml_new_string("dimgray"),
     cst_dimgrey$0=caml_new_string("dimgrey"),
     cst_dodgerblue$0=caml_new_string("dodgerblue"),
     cst_firebrick$0=caml_new_string("firebrick"),
     cst_forestgreen$0=caml_new_string("forestgreen"),
     cst_fuchsia$0=caml_new_string("fuchsia"),
     cst_gainsboro$0=caml_new_string("gainsboro"),
     cst_ghostwhite$0=caml_new_string("ghostwhite"),
     cst_gold$0=caml_new_string("gold"),
     cst_goldenrod$0=caml_new_string("goldenrod"),
     cst_gray$0=caml_new_string("gray"),
     cst_green$0=caml_new_string("green"),
     cst_lavenderblush$0=caml_new_string("lavenderblush"),
     cst_grey$0=caml_new_string("grey"),
     cst_honeydew$0=caml_new_string("honeydew"),
     cst_hotpink$0=caml_new_string("hotpink"),
     cst_indianred$0=caml_new_string("indianred"),
     cst_indigo$0=caml_new_string("indigo"),
     cst_ivory$0=caml_new_string("ivory"),
     cst_khaki$0=caml_new_string("khaki"),
     cst_lavender$0=caml_new_string("lavender"),
     cst_lawngreen$0=caml_new_string("lawngreen"),
     cst_lemonchiffon$0=caml_new_string("lemonchiffon"),
     cst_lightblue$0=caml_new_string("lightblue"),
     cst_lightcoral$0=caml_new_string("lightcoral"),
     cst_lightcyan$0=caml_new_string("lightcyan"),
     cst_lightgoldenrodyellow$0=caml_new_string("lightgoldenrodyellow"),
     cst_lightgray$0=caml_new_string("lightgray"),
     cst_lightgreen$0=caml_new_string("lightgreen"),
     cst_paleturquoise$0=caml_new_string("paleturquoise"),
     cst_mediumslateblue$0=caml_new_string("mediumslateblue"),
     cst_limegreen$0=caml_new_string("limegreen"),
     cst_lightpink$0=caml_new_string("lightpink"),
     cst_lightsalmon$0=caml_new_string("lightsalmon"),
     cst_lightseagreen$0=caml_new_string("lightseagreen"),
     cst_lightskyblue$0=caml_new_string("lightskyblue"),
     cst_lightslategray$0=caml_new_string("lightslategray"),
     cst_lightslategrey$0=caml_new_string("lightslategrey"),
     cst_lightsteelblue$0=caml_new_string("lightsteelblue"),
     cst_lightyellow$0=caml_new_string("lightyellow"),
     cst_lime$0=caml_new_string("lime"),
     cst_linen$0=caml_new_string("linen"),
     cst_magenta$0=caml_new_string("magenta"),
     cst_maroon$0=caml_new_string("maroon"),
     cst_mediumaquamarine$0=caml_new_string("mediumaquamarine"),
     cst_mediumblue$0=caml_new_string("mediumblue"),
     cst_mediumorchid$0=caml_new_string("mediumorchid"),
     cst_mediumpurple$0=caml_new_string("mediumpurple"),
     cst_mediumseagreen$0=caml_new_string("mediumseagreen"),
     cst_navy$0=caml_new_string("navy"),
     cst_mediumspringgreen$0=caml_new_string("mediumspringgreen"),
     cst_mediumturquoise$0=caml_new_string("mediumturquoise"),
     cst_mediumvioletred$0=caml_new_string("mediumvioletred"),
     cst_midnightblue$0=caml_new_string("midnightblue"),
     cst_mintcream$0=caml_new_string("mintcream"),
     cst_mistyrose$0=caml_new_string("mistyrose"),
     cst_moccasin$0=caml_new_string("moccasin"),
     cst_navajowhite$0=caml_new_string("navajowhite"),
     cst_oldlace$0=caml_new_string("oldlace"),
     cst_olive$0=caml_new_string("olive"),
     cst_olivedrab$0=caml_new_string("olivedrab"),
     cst_orange$0=caml_new_string("orange"),
     cst_orangered$0=caml_new_string("orangered"),
     cst_orchid$0=caml_new_string("orchid"),
     cst_palegoldenrod$0=caml_new_string("palegoldenrod"),
     cst_palegreen$0=caml_new_string("palegreen"),
     cst_skyblue$0=caml_new_string("skyblue"),
     cst_rosybrown$0=caml_new_string("rosybrown"),
     cst_palevioletred$0=caml_new_string("palevioletred"),
     cst_papayawhip$0=caml_new_string("papayawhip"),
     cst_peachpuff$0=caml_new_string("peachpuff"),
     cst_peru$0=caml_new_string("peru"),
     cst_pink$0=caml_new_string("pink"),
     cst_plum$0=caml_new_string("plum"),
     cst_powderblue$0=caml_new_string("powderblue"),
     cst_purple$0=caml_new_string("purple"),
     cst_red$0=caml_new_string("red"),
     cst_royalblue$0=caml_new_string("royalblue"),
     cst_saddlebrown$0=caml_new_string("saddlebrown"),
     cst_salmon$0=caml_new_string("salmon"),
     cst_sandybrown$0=caml_new_string("sandybrown"),
     cst_seagreen$0=caml_new_string("seagreen"),
     cst_seashell$0=caml_new_string("seashell"),
     cst_sienna$0=caml_new_string("sienna"),
     cst_silver$0=caml_new_string("silver"),
     cst_thistle$0=caml_new_string("thistle"),
     cst_slateblue$0=caml_new_string("slateblue"),
     cst_slategray$0=caml_new_string("slategray"),
     cst_slategrey$0=caml_new_string("slategrey"),
     cst_snow$0=caml_new_string("snow"),
     cst_springgreen$0=caml_new_string("springgreen"),
     cst_steelblue$0=caml_new_string("steelblue"),
     cst_tan$0=caml_new_string("tan"),
     cst_teal$0=caml_new_string("teal"),
     cst_tomato$0=caml_new_string("tomato"),
     cst_turquoise$0=caml_new_string("turquoise"),
     cst_violet$0=caml_new_string("violet"),
     cst_wheat$0=caml_new_string("wheat"),
     cst_white$0=caml_new_string("white"),
     cst_whitesmoke$0=caml_new_string("whitesmoke"),
     cst_yellow$0=caml_new_string("yellow"),
     cst_yellowgreen$0=caml_new_string("yellowgreen"),
     cst_is_not_a_valid_color_name=
      caml_new_string(" is not a valid color name"),
     cst_aliceblue=caml_new_string("aliceblue"),
     cst_antiquewhite=caml_new_string("antiquewhite"),
     cst_aqua=caml_new_string("aqua"),
     cst_aquamarine=caml_new_string("aquamarine"),
     cst_azure=caml_new_string("azure"),
     cst_beige=caml_new_string("beige"),
     cst_bisque=caml_new_string("bisque"),
     cst_black=caml_new_string("black"),
     cst_blanchedalmond=caml_new_string("blanchedalmond"),
     cst_blue=caml_new_string("blue"),
     cst_blueviolet=caml_new_string("blueviolet"),
     cst_brown=caml_new_string("brown"),
     cst_burlywood=caml_new_string("burlywood"),
     cst_cadetblue=caml_new_string("cadetblue"),
     cst_chartreuse=caml_new_string("chartreuse"),
     cst_chocolate=caml_new_string("chocolate"),
     cst_coral=caml_new_string("coral"),
     cst_cornflowerblue=caml_new_string("cornflowerblue"),
     cst_cornsilk=caml_new_string("cornsilk"),
     cst_crimson=caml_new_string("crimson"),
     cst_cyan=caml_new_string("cyan"),
     cst_darkblue=caml_new_string("darkblue"),
     cst_darkcyan=caml_new_string("darkcyan"),
     cst_darkgoldenrod=caml_new_string("darkgoldenrod"),
     cst_darkgray=caml_new_string("darkgray"),
     cst_darkgreen=caml_new_string("darkgreen"),
     cst_darkgrey=caml_new_string("darkgrey"),
     cst_darkkhaki=caml_new_string("darkkhaki"),
     cst_darkmagenta=caml_new_string("darkmagenta"),
     cst_darkolivegreen=caml_new_string("darkolivegreen"),
     cst_darkorange=caml_new_string("darkorange"),
     cst_darkorchid=caml_new_string("darkorchid"),
     cst_darkred=caml_new_string("darkred"),
     cst_darksalmon=caml_new_string("darksalmon"),
     cst_darkseagreen=caml_new_string("darkseagreen"),
     cst_darkslateblue=caml_new_string("darkslateblue"),
     cst_darkslategray=caml_new_string("darkslategray"),
     cst_darkslategrey=caml_new_string("darkslategrey"),
     cst_darkturquoise=caml_new_string("darkturquoise"),
     cst_darkviolet=caml_new_string("darkviolet"),
     cst_deeppink=caml_new_string("deeppink"),
     cst_deepskyblue=caml_new_string("deepskyblue"),
     cst_dimgray=caml_new_string("dimgray"),
     cst_dimgrey=caml_new_string("dimgrey"),
     cst_dodgerblue=caml_new_string("dodgerblue"),
     cst_firebrick=caml_new_string("firebrick"),
     cst_floralwhite=caml_new_string("floralwhite"),
     cst_forestgreen=caml_new_string("forestgreen"),
     cst_fuchsia=caml_new_string("fuchsia"),
     cst_gainsboro=caml_new_string("gainsboro"),
     cst_ghostwhite=caml_new_string("ghostwhite"),
     cst_gold=caml_new_string("gold"),
     cst_goldenrod=caml_new_string("goldenrod"),
     cst_gray=caml_new_string("gray"),
     cst_grey=caml_new_string("grey"),
     cst_green=caml_new_string("green"),
     cst_greenyellow=caml_new_string("greenyellow"),
     cst_honeydew=caml_new_string("honeydew"),
     cst_hotpink=caml_new_string("hotpink"),
     cst_indianred=caml_new_string("indianred"),
     cst_indigo=caml_new_string("indigo"),
     cst_ivory=caml_new_string("ivory"),
     cst_khaki=caml_new_string("khaki"),
     cst_lavender=caml_new_string("lavender"),
     cst_lavenderblush=caml_new_string("lavenderblush"),
     cst_lawngreen=caml_new_string("lawngreen"),
     cst_lemonchiffon=caml_new_string("lemonchiffon"),
     cst_lightblue=caml_new_string("lightblue"),
     cst_lightcoral=caml_new_string("lightcoral"),
     cst_lightcyan=caml_new_string("lightcyan"),
     cst_lightgoldenrodyellow=caml_new_string("lightgoldenrodyellow"),
     cst_lightgray=caml_new_string("lightgray"),
     cst_lightgreen=caml_new_string("lightgreen"),
     cst_lightgrey=caml_new_string("lightgrey"),
     cst_lightpink=caml_new_string("lightpink"),
     cst_lightsalmon=caml_new_string("lightsalmon"),
     cst_lightseagreen=caml_new_string("lightseagreen"),
     cst_lightskyblue=caml_new_string("lightskyblue"),
     cst_lightslategray=caml_new_string("lightslategray"),
     cst_lightslategrey=caml_new_string("lightslategrey"),
     cst_lightsteelblue=caml_new_string("lightsteelblue"),
     cst_lightyellow=caml_new_string("lightyellow"),
     cst_lime=caml_new_string("lime"),
     cst_limegreen=caml_new_string("limegreen"),
     cst_linen=caml_new_string("linen"),
     cst_magenta=caml_new_string("magenta"),
     cst_maroon=caml_new_string("maroon"),
     cst_mediumaquamarine=caml_new_string("mediumaquamarine"),
     cst_mediumblue=caml_new_string("mediumblue"),
     cst_mediumorchid=caml_new_string("mediumorchid"),
     cst_mediumpurple=caml_new_string("mediumpurple"),
     cst_mediumseagreen=caml_new_string("mediumseagreen"),
     cst_mediumslateblue=caml_new_string("mediumslateblue"),
     cst_mediumspringgreen=caml_new_string("mediumspringgreen"),
     cst_mediumturquoise=caml_new_string("mediumturquoise"),
     cst_mediumvioletred=caml_new_string("mediumvioletred"),
     cst_midnightblue=caml_new_string("midnightblue"),
     cst_mintcream=caml_new_string("mintcream"),
     cst_mistyrose=caml_new_string("mistyrose"),
     cst_moccasin=caml_new_string("moccasin"),
     cst_navajowhite=caml_new_string("navajowhite"),
     cst_navy=caml_new_string("navy"),
     cst_oldlace=caml_new_string("oldlace"),
     cst_olive=caml_new_string("olive"),
     cst_olivedrab=caml_new_string("olivedrab"),
     cst_orange=caml_new_string("orange"),
     cst_orangered=caml_new_string("orangered"),
     cst_orchid=caml_new_string("orchid"),
     cst_palegoldenrod=caml_new_string("palegoldenrod"),
     cst_palegreen=caml_new_string("palegreen"),
     cst_paleturquoise=caml_new_string("paleturquoise"),
     cst_palevioletred=caml_new_string("palevioletred"),
     cst_papayawhip=caml_new_string("papayawhip"),
     cst_peachpuff=caml_new_string("peachpuff"),
     cst_peru=caml_new_string("peru"),
     cst_pink=caml_new_string("pink"),
     cst_plum=caml_new_string("plum"),
     cst_powderblue=caml_new_string("powderblue"),
     cst_purple=caml_new_string("purple"),
     cst_red=caml_new_string("red"),
     cst_rosybrown=caml_new_string("rosybrown"),
     cst_royalblue=caml_new_string("royalblue"),
     cst_saddlebrown=caml_new_string("saddlebrown"),
     cst_salmon=caml_new_string("salmon"),
     cst_sandybrown=caml_new_string("sandybrown"),
     cst_seagreen=caml_new_string("seagreen"),
     cst_seashell=caml_new_string("seashell"),
     cst_sienna=caml_new_string("sienna"),
     cst_silver=caml_new_string("silver"),
     cst_skyblue=caml_new_string("skyblue"),
     cst_slateblue=caml_new_string("slateblue"),
     cst_slategray=caml_new_string("slategray"),
     cst_slategrey=caml_new_string("slategrey"),
     cst_snow=caml_new_string("snow"),
     cst_springgreen=caml_new_string("springgreen"),
     cst_steelblue=caml_new_string("steelblue"),
     cst_tan=caml_new_string("tan"),
     cst_teal=caml_new_string("teal"),
     cst_thistle=caml_new_string("thistle"),
     cst_tomato=caml_new_string("tomato"),
     cst_turquoise=caml_new_string("turquoise"),
     cst_violet=caml_new_string("violet"),
     cst_wheat=caml_new_string("wheat"),
     cst_white=caml_new_string("white"),
     cst_whitesmoke=caml_new_string("whitesmoke"),
     cst_yellow=caml_new_string("yellow"),
     cst_yellowgreen=caml_new_string("yellowgreen"),
     cst_vkern$0=caml_new_string("vkern"),
     cst_view$0=caml_new_string("view"),
     cst_use$0=caml_new_string("use"),
     cst_tspan$0=caml_new_string("tspan"),
     cst_tref$0=caml_new_string("tref"),
     cst_title$3=caml_new_string("title"),
     cst_textpath$0=caml_new_string("textpath"),
     cst_text$1=caml_new_string("text"),
     cst_symbol$0=caml_new_string("symbol"),
     cst_switch$0=caml_new_string("switch"),
     cst_svg$0=caml_new_string("svg"),
     cst_style$3=caml_new_string("style"),
     cst_stop$0=caml_new_string("stop"),
     cst_set$0=caml_new_string("set"),
     cst_script$3=caml_new_string("script"),
     cst_rect$0=caml_new_string("rect"),
     cst_radialgradient$0=caml_new_string("radialgradient"),
     cst_polyline$0=caml_new_string("polyline"),
     cst_polygon$0=caml_new_string("polygon"),
     cst_parttern$0=caml_new_string("parttern"),
     cst_path$0=caml_new_string("path"),
     cst_mpath$0=caml_new_string("mpath"),
     cst_missing_glyph$0=caml_new_string("missing-glyph"),
     cst_metadata$0=caml_new_string("metadata"),
     cst_mask$0=caml_new_string("mask"),
     cst_lineargradient$0=caml_new_string("lineargradient"),
     cst_line$0=caml_new_string("line"),
     cst_image$0=caml_new_string("image"),
     cst_hkern$0=caml_new_string("hkern"),
     cst_glyphref$0=caml_new_string("glyphref"),
     cst_glyph$0=caml_new_string("glyph"),
     cst_g$1=caml_new_string("g"),
     cst_foreignobject$0=caml_new_string("foreignobject"),
     cst_font_face_uri$0=caml_new_string("font-face-uri"),
     cst_font_face_src$0=caml_new_string("font-face-src"),
     cst_font_face_name$0=caml_new_string("font-face-name"),
     cst_font_face_format$0=caml_new_string("font-face-format"),
     cst_font_face$0=caml_new_string("font-face"),
     cst_font$0=caml_new_string("font"),
     cst_filter$0=caml_new_string("filter"),
     cst_ellipse$0=caml_new_string("ellipse"),
     cst_desc$0=caml_new_string("desc"),
     cst_defs$0=caml_new_string("defs"),
     cst_cursor$0=caml_new_string("cursor"),
     cst_clippath$0=caml_new_string("clippath"),
     cst_circle$0=caml_new_string("circle"),
     cst_animatetransform$0=caml_new_string("animatetransform"),
     cst_animatemotion$0=caml_new_string("animatemotion"),
     cst_animatecolor$0=caml_new_string("animatecolor"),
     cst_animate$0=caml_new_string("animate"),
     cst_altglyphitem$0=caml_new_string("altglyphitem"),
     cst_altglyphdef$0=caml_new_string("altglyphdef"),
     cst_altglyph$0=caml_new_string("altglyph"),
     cst_a$3=caml_new_string("a"),
     cst_vkern=caml_new_string("vkern"),
     cst_view=caml_new_string("view"),
     cst_use=caml_new_string("use"),
     cst_tspan=caml_new_string("tspan"),
     cst_tref=caml_new_string("tref"),
     cst_title$2=caml_new_string("title"),
     cst_textpath=caml_new_string("textpath"),
     cst_text$0=caml_new_string("text"),
     cst_symbol=caml_new_string("symbol"),
     cst_switch=caml_new_string("switch"),
     cst_svg=caml_new_string("svg"),
     cst_style$2=caml_new_string("style"),
     cst_stop=caml_new_string("stop"),
     cst_set=caml_new_string("set"),
     cst_script$2=caml_new_string("script"),
     cst_rect=caml_new_string("rect"),
     cst_radialgradient=caml_new_string("radialgradient"),
     cst_polyline=caml_new_string("polyline"),
     cst_polygon=caml_new_string("polygon"),
     cst_parttern=caml_new_string("parttern"),
     cst_path=caml_new_string("path"),
     cst_mpath=caml_new_string("mpath"),
     cst_missing_glyph=caml_new_string("missing-glyph"),
     cst_metadata=caml_new_string("metadata"),
     cst_mask=caml_new_string("mask"),
     cst_lineargradient=caml_new_string("lineargradient"),
     cst_line=caml_new_string("line"),
     cst_image=caml_new_string("image"),
     cst_hkern=caml_new_string("hkern"),
     cst_glyphref=caml_new_string("glyphref"),
     cst_glyph=caml_new_string("glyph"),
     cst_g$0=caml_new_string("g"),
     cst_foreignobject=caml_new_string("foreignobject"),
     cst_font_face_uri=caml_new_string("font-face-uri"),
     cst_font_face_src=caml_new_string("font-face-src"),
     cst_font_face_name=caml_new_string("font-face-name"),
     cst_font_face_format=caml_new_string("font-face-format"),
     cst_font_face=caml_new_string("font-face"),
     cst_font=caml_new_string("font"),
     cst_filter=caml_new_string("filter"),
     cst_ellipse=caml_new_string("ellipse"),
     cst_desc=caml_new_string("desc"),
     cst_defs=caml_new_string("defs"),
     cst_cursor=caml_new_string("cursor"),
     cst_clippath=caml_new_string("clippath"),
     cst_circle=caml_new_string("circle"),
     cst_animatetransform=caml_new_string("animatetransform"),
     cst_animatemotion=caml_new_string("animatemotion"),
     cst_animatecolor=caml_new_string("animatecolor"),
     cst_animate=caml_new_string("animate"),
     cst_altglyphitem=caml_new_string("altglyphitem"),
     cst_altglyphdef=caml_new_string("altglyphdef"),
     cst_altglyph=caml_new_string("altglyph"),
     cst_a$2=caml_new_string("a"),
     cst_Dom_svg_SVGError=caml_new_string("Dom_svg.SVGError"),
     Pervasives=global_data.Pervasives,
     Callback=global_data.Callback,
     Printexc=global_data.Printexc,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     List=global_data.List,
     Array=global_data.Array,
     Uchar=global_data.Uchar,
     Printf=global_data.Printf,
     Failure=global_data.Failure,
     String=global_data.String,
     Invalid_argument=global_data.Invalid_argument,
     Unsafe=[0,joo_global_object],
     no_handler=null,
     t37=undefined,
     _Q_=[0,caml_new_string("lib/dom.ml"),276,66],
     _T_=[0,caml_new_string("transparent")],
     _U_=[0,caml_new_string("native")],
     _bh_=[0,caml_new_string("lib/dom_html.ml"),1657,57],
     _bg_=[0,caml_new_string("lib/dom_html.ml"),1656,59],
     _aa_=
      [0,
       [11,
        caml_new_string("getElementById_exn: "),
        [3,0,[11,caml_new_string(" not found"),0]]],
       caml_new_string("getElementById_exn: %S not found")],
     _bJ_=[0,caml_new_string("lib/form.ml"),172,9],
     _bI_=[0,1],
     _bL_=[0,caml_new_string("lib/xmlHttpRequest.ml"),86,2],
     _bT_=[0,caml_new_string("lib/regexp.ml"),35,64],
     _bX_=[0,caml_new_string(""),0],
     _e4_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _e5_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _e6_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _e7_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eN_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eO_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eP_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eQ_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eR_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eS_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eT_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eU_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eV_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eW_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eX_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eY_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eZ_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _e0_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _eJ_=
      caml_list_of_js_array
       ([caml_new_string("aliceblue"),
         caml_new_string("antiquewhite"),
         caml_new_string("aqua"),
         caml_new_string("aquamarine"),
         caml_new_string("azure"),
         caml_new_string("beige"),
         caml_new_string("bisque"),
         caml_new_string("black"),
         caml_new_string("blanchedalmond"),
         caml_new_string("blue"),
         caml_new_string("blueviolet"),
         caml_new_string("brown"),
         caml_new_string("burlywood"),
         caml_new_string("cadetblue"),
         caml_new_string("chartreuse"),
         caml_new_string("chocolate"),
         caml_new_string("coral"),
         caml_new_string("cornflowerblue"),
         caml_new_string("cornsilk"),
         caml_new_string("crimson"),
         caml_new_string("cyan"),
         caml_new_string("darkblue"),
         caml_new_string("darkcyan"),
         caml_new_string("darkgoldenrod"),
         caml_new_string("darkgray"),
         caml_new_string("darkgreen"),
         caml_new_string("darkgrey"),
         caml_new_string("darkkhaki"),
         caml_new_string("darkmagenta"),
         caml_new_string("darkolivegreen"),
         caml_new_string("darkorange"),
         caml_new_string("darkorchid"),
         caml_new_string("darkred"),
         caml_new_string("darksalmon"),
         caml_new_string("darkseagreen"),
         caml_new_string("darkslateblue"),
         caml_new_string("darkslategray"),
         caml_new_string("darkslategrey"),
         caml_new_string("darkturquoise"),
         caml_new_string("darkviolet"),
         caml_new_string("deeppink"),
         caml_new_string("deepskyblue"),
         caml_new_string("dimgray"),
         caml_new_string("dimgrey"),
         caml_new_string("dodgerblue"),
         caml_new_string("firebrick"),
         caml_new_string("floralwhite"),
         caml_new_string("forestgreen"),
         caml_new_string("fuchsia"),
         caml_new_string("gainsboro"),
         caml_new_string("ghostwhite"),
         caml_new_string("gold"),
         caml_new_string("goldenrod"),
         caml_new_string("gray"),
         caml_new_string("green"),
         caml_new_string("greenyellow"),
         caml_new_string("grey"),
         caml_new_string("honeydew"),
         caml_new_string("hotpink"),
         caml_new_string("indianred"),
         caml_new_string("indigo"),
         caml_new_string("ivory"),
         caml_new_string("khaki"),
         caml_new_string("lavender"),
         caml_new_string("lavenderblush"),
         caml_new_string("lawngreen"),
         caml_new_string("lemonchiffon"),
         caml_new_string("lightblue"),
         caml_new_string("lightcoral"),
         caml_new_string("lightcyan"),
         caml_new_string("lightgoldenrodyellow"),
         caml_new_string("lightgray"),
         caml_new_string("lightgreen"),
         caml_new_string("lightgrey"),
         caml_new_string("lightpink"),
         caml_new_string("lightsalmon"),
         caml_new_string("lightseagreen"),
         caml_new_string("lightskyblue"),
         caml_new_string("lightslategray"),
         caml_new_string("lightslategrey"),
         caml_new_string("lightsteelblue"),
         caml_new_string("lightyellow"),
         caml_new_string("lime"),
         caml_new_string("limegreen"),
         caml_new_string("linen"),
         caml_new_string("magenta"),
         caml_new_string("maroon"),
         caml_new_string("mediumaquamarine"),
         caml_new_string("mediumblue"),
         caml_new_string("mediumorchid"),
         caml_new_string("mediumpurple"),
         caml_new_string("mediumseagreen"),
         caml_new_string("mediumslateblue"),
         caml_new_string("mediumspringgreen"),
         caml_new_string("mediumturquoise"),
         caml_new_string("mediumvioletred"),
         caml_new_string("midnightblue"),
         caml_new_string("mintcream"),
         caml_new_string("mistyrose"),
         caml_new_string("moccasin"),
         caml_new_string("navajowhite"),
         caml_new_string("navy"),
         caml_new_string("oldlace"),
         caml_new_string("olive"),
         caml_new_string("olivedrab"),
         caml_new_string("orange"),
         caml_new_string("orangered"),
         caml_new_string("orchid"),
         caml_new_string("palegoldenrod"),
         caml_new_string("palegreen"),
         caml_new_string("paleturquoise"),
         caml_new_string("palevioletred"),
         caml_new_string("papayawhip"),
         caml_new_string("peachpuff"),
         caml_new_string("peru"),
         caml_new_string("pink"),
         caml_new_string("plum"),
         caml_new_string("powderblue"),
         caml_new_string("purple"),
         caml_new_string("red"),
         caml_new_string("rosybrown"),
         caml_new_string("royalblue"),
         caml_new_string("saddlebrown"),
         caml_new_string("salmon"),
         caml_new_string("sandybrown"),
         caml_new_string("seagreen"),
         caml_new_string("seashell"),
         caml_new_string("sienna"),
         caml_new_string("silver"),
         caml_new_string("skyblue"),
         caml_new_string("slateblue"),
         caml_new_string("slategray"),
         caml_new_string("slategrey"),
         caml_new_string("snow"),
         caml_new_string("springgreen"),
         caml_new_string("steelblue"),
         caml_new_string("tan"),
         caml_new_string("teal"),
         caml_new_string("thistle"),
         caml_new_string("tomato"),
         caml_new_string("turquoise"),
         caml_new_string("violet"),
         caml_new_string("wheat"),
         caml_new_string("white"),
         caml_new_string("whitesmoke"),
         caml_new_string("yellow"),
         caml_new_string("yellowgreen")]),
     _eH_=
      [0,
       [12,35,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,0]]]],
       caml_new_string("#%02X%02X%02X")],
     _eA_=
      [0,
       [11,
        caml_new_string("rgb("),
        [4,0,0,0,[12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,41,0]]]]]]],
       caml_new_string("rgb(%d,%d,%d)")],
     _eB_=
      [0,
       [11,
        caml_new_string("rgb("),
        [4,
         0,
         0,
         0,
         [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]]],
       caml_new_string("rgb(%d%%,%d%%,%d%%)")],
     _eC_=
      [0,
       [11,
        caml_new_string("rgba("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,44,[8,0,0,0,[12,41,0]]]]]]]]],
       caml_new_string("rgba(%d,%d,%d,%f)")],
     _eD_=
      [0,
       [11,
        caml_new_string("rgba("),
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,44,partial]]]]]]]]]],
       caml_new_string("rgba(%d%%,%d%%,%d%%,%f)")],
     _eE_=
      [0,
       [11,
        caml_new_string("hsl("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]],
       caml_new_string("hsl(%d,%d%%,%d%%)")],
     _eF_=
      [0,
       [11,
        caml_new_string("hsla("),
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[8,0,0,0,partial$0]]]]]]]]]],
       caml_new_string("hsla(%d,%d%%,%d%%,%f)")],
     _ce_=[0,240,248,255],
     _cf_=[0,250,235,215],
     _cg_=[0,0,255,255],
     _ch_=[0,127,255,212],
     _ci_=[0,240,255,255],
     _cj_=[0,245,245,220],
     _ck_=[0,255,228,196],
     _cl_=[0,0,0,0],
     _cm_=[0,255,235,205],
     _cn_=[0,0,0,255],
     _co_=[0,138,43,226],
     _cp_=[0,165,42,42],
     _cq_=[0,222,184,135],
     _cr_=[0,95,158,160],
     _cs_=[0,127,255,0],
     _ct_=[0,210,105,30],
     _cu_=[0,255,127,80],
     _cv_=[0,100,149,237],
     _cw_=[0,255,248,220],
     _cx_=[0,220,20,60],
     _cy_=[0,0,255,255],
     _cz_=[0,0,0,139],
     _cA_=[0,0,139,139],
     _cB_=[0,184,134,11],
     _cC_=[0,169,169,169],
     _cD_=[0,0,100,0],
     _cE_=[0,169,169,169],
     _cF_=[0,189,183,107],
     _cG_=[0,139,0,139],
     _cH_=[0,85,107,47],
     _cI_=[0,255,140,0],
     _cJ_=[0,153,50,204],
     _cK_=[0,139,0,0],
     _cL_=[0,233,150,122],
     _cM_=[0,143,188,143],
     _cN_=[0,72,61,139],
     _cO_=[0,47,79,79],
     _cP_=[0,47,79,79],
     _cQ_=[0,0,206,209],
     _cR_=[0,148,0,211],
     _cS_=[0,255,20,147],
     _cT_=[0,0,191,255],
     _cU_=[0,105,105,105],
     _cV_=[0,105,105,105],
     _cW_=[0,30,144,255],
     _cX_=[0,178,34,34],
     _cY_=[0,255,250,240],
     _cZ_=[0,34,139,34],
     _c0_=[0,255,0,255],
     _c1_=[0,220,220,220],
     _c2_=[0,248,248,255],
     _c3_=[0,255,215,0],
     _c4_=[0,218,165,32],
     _c5_=[0,128,128,128],
     _c6_=[0,128,128,128],
     _c7_=[0,0,128,0],
     _c8_=[0,173,255,47],
     _c9_=[0,240,255,240],
     _c__=[0,255,105,180],
     _c$_=[0,205,92,92],
     _da_=[0,75,0,130],
     _db_=[0,255,255,240],
     _dc_=[0,240,230,140],
     _dd_=[0,230,230,250],
     _de_=[0,255,240,245],
     _df_=[0,124,252,0],
     _dg_=[0,255,250,205],
     _dh_=[0,173,216,230],
     _di_=[0,240,128,128],
     _dj_=[0,224,255,255],
     _dk_=[0,250,250,210],
     _dl_=[0,211,211,211],
     _dm_=[0,144,238,144],
     _dn_=[0,211,211,211],
     _do_=[0,255,182,193],
     _dp_=[0,255,160,122],
     _dq_=[0,32,178,170],
     _dr_=[0,135,206,250],
     _ds_=[0,119,136,153],
     _dt_=[0,119,136,153],
     _du_=[0,176,196,222],
     _dv_=[0,255,255,224],
     _dw_=[0,0,255,0],
     _dx_=[0,50,205,50],
     _dy_=[0,250,240,230],
     _dz_=[0,255,0,255],
     _dA_=[0,128,0,0],
     _dB_=[0,102,205,170],
     _dC_=[0,0,0,205],
     _dD_=[0,186,85,211],
     _dE_=[0,147,112,219],
     _dF_=[0,60,179,113],
     _dG_=[0,123,104,238],
     _dH_=[0,0,250,154],
     _dI_=[0,72,209,204],
     _dJ_=[0,199,21,133],
     _dK_=[0,25,25,112],
     _dL_=[0,245,255,250],
     _dM_=[0,255,228,225],
     _dN_=[0,255,228,181],
     _dO_=[0,255,222,173],
     _dP_=[0,0,0,128],
     _dQ_=[0,253,245,230],
     _dR_=[0,128,128,0],
     _dS_=[0,107,142,35],
     _dT_=[0,255,165,0],
     _dU_=[0,255,69,0],
     _dV_=[0,218,112,214],
     _dW_=[0,238,232,170],
     _dX_=[0,152,251,152],
     _dY_=[0,175,238,238],
     _dZ_=[0,219,112,147],
     _d0_=[0,255,239,213],
     _d1_=[0,255,218,185],
     _d2_=[0,205,133,63],
     _d3_=[0,255,192,203],
     _d4_=[0,221,160,221],
     _d5_=[0,176,224,230],
     _d6_=[0,128,0,128],
     _d7_=[0,255,0,0],
     _d8_=[0,188,143,143],
     _d9_=[0,65,105,225],
     _d__=[0,139,69,19],
     _d$_=[0,250,128,114],
     _ea_=[0,244,164,96],
     _eb_=[0,46,139,87],
     _ec_=[0,255,245,238],
     _ed_=[0,160,82,45],
     _ee_=[0,192,192,192],
     _ef_=[0,135,206,235],
     _eg_=[0,106,90,205],
     _eh_=[0,112,128,144],
     _ei_=[0,112,128,144],
     _ej_=[0,255,250,250],
     _ek_=[0,0,255,127],
     _el_=[0,70,130,180],
     _em_=[0,210,180,140],
     _en_=[0,0,128,128],
     _eo_=[0,216,191,216],
     _ep_=[0,255,99,71],
     _eq_=[0,64,224,208],
     _er_=[0,238,130,238],
     _es_=[0,245,222,179],
     _et_=[0,255,255,255],
     _eu_=[0,245,245,245],
     _ev_=[0,255,255,0],
     _ew_=[0,154,205,50];
    function _a_(_km_){return _km_}
    function _b_(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function _c_(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function _d_(x){return 1 - (x == no_handler?1:0)}
    function _e_(x,f)
     {var _kl_=1 - (x == no_handler?1:0);return _kl_?caml_call1(f,x):_kl_}
    function _f_(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function _g_(x,f){return x == no_handler?caml_call1(f,0):x}
    function _h_(x){if(x){var x$0=x[1];return x$0}return no_handler}
    var
     Opt=
      [0,
       no_handler,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       function(x)
        {function _kk_(x){return [0,x]}
         return _f_(x,function(param){return 0},_kk_)}];
    function _i_(_kj_){return _kj_}
    function _j_(x,f){return x === t37?t37:caml_call1(f,x)}
    function _k_(x,f){return x === t37?t37:caml_call1(f,x)}
    function _l_(x){return x !== t37?1:0}
    function _m_(x,f){var _ki_=x !== t37?1:0;return _ki_?caml_call1(f,x):_ki_}
    function _n_(x,f,g){return x === t37?caml_call1(f,0):caml_call1(g,x)}
    function _o_(x,f){return x === t37?caml_call1(f,0):x}
    function _p_(x){if(x){var x$0=x[1];return x$0}return t37}
    var
     Optdef=
      [0,
       t37,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       function(x)
        {function _kh_(x){return [0,x]}
         return _n_(x,function(param){return 0},_kh_)}];
    function coerce(x,f,g)
     {function _kf_(param){return caml_call1(g,x)}
      var _kg_=caml_call1(f,x);
      return caml_call2(Opt[8],_kg_,_kf_)}
    function coerce_opt(x,f,g)
     {function _kd_(param){return caml_call1(g,x)}
      var _ke_=caml_call2(Opt[4],x,f);
      return caml_call2(Opt[8],_ke_,_kd_)}
    var
     true$0=true,
     false$0=false,
     string_constr=Unsafe[1].String,
     regExp_withFlags=Unsafe[1].RegExp,
     object_constructor=Unsafe[1].Object;
    function object_keys(o){return object_constructor.keys(o)}
    var
     array_length=Unsafe[1].Array,
     array_get=caml_js_get,
     array_set=caml_js_set;
    function array_map(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call1(f,x)}))}
    function array_mapi(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call2(f,idx,x)}))}
    function str_array(_kc_){return _kc_}
    function match_result(_kb_){return _kb_}
    var
     date_ms=Unsafe[1].Date,
     math=Unsafe[1].Math,
     Error=caml_set_oo_id([248,cst_Js_Error,0]),
     error_constr=Unsafe[1].Error;
    caml_call2(Callback[2],cst_jsError,[0,Error,{}]);
    function raise_js_error(exn){throw exn}
    var JSON=Unsafe[1].JSON;
    function decodeURI(s){return Unsafe[1].decodeURI(s)}
    function decodeURIComponent(s){return Unsafe[1].decodeURIComponent(s)}
    function encodeURI(s){return Unsafe[1].encodeURI(s)}
    function encodeURIComponent(s){return Unsafe[1].encodeURIComponent(s)}
    function escape(s){return Unsafe[1].escape(s)}
    function unescape(s){return Unsafe[1].unescape(s)}
    function isNaN(i){return Unsafe[1].isNaN(i) | 0}
    function parseInt(s)
     {var s$0=Unsafe[1].parseInt(s);
      return isNaN(s$0)?caml_call1(Pervasives[2],cst_parseInt):s$0}
    function parseFloat(s)
     {var s$0=Unsafe[1].parseFloat(s);
      return isNaN(s$0)?caml_call1(Pervasives[2],cst_parseFloat):s$0}
    function _q_(param)
     {if(param[1] === Error)
       {var e=param[2];return [0,caml_js_to_string(e.toString())]}
      return 0}
    caml_call1(Printexc[8],_q_);
    function _r_(e)
     {return e instanceof array_length?0:[0,caml_js_to_string(e.toString())]}
    caml_call1(Printexc[8],_r_);
    function _s_(e){return caml_js_to_string(e.toString())}
    function _t_(field,x){return runtime.caml_js_export_var(0)[field] = x}
    function _u_(field,x){return _t_(field.toString(),x)}
    function _v_(obj)
     {var keys=object_keys(obj);
      return keys.forEach
              (caml_js_wrap_callback
                (function(key,param,_ka_){return _t_(key,obj[key])}))}
    function _w_(_j$_){return _j$_}
    var
     Js=
      [0,
       no_handler,
       function(_j__){return _j__},
       t37,
       _w_,
       Opt,
       Optdef,
       true$0,
       false$0,
       string_constr,
       regExp_withFlags,
       regExp_withFlags,
       regExp_withFlags,
       object_keys,
       array_length,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       math,
       error_constr,
       _s_,
       raise_js_error,
       Error,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       _u_,
       _v_,
       Unsafe];
    caml_register_global(1609,Js,"Js");
    function _x_(nodeList)
     {var length=nodeList.length,acc=0,i=0;
      for(;;)
       {if(i < length)
         {var _j9_=nodeList.item(i),match=caml_call1(Opt[10],_j9_);
          if(match)
           {var e=match[1],i$0=i + 1 | 0,acc$0=[0,e,acc],acc=acc$0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        return caml_call1(List[5],acc)}}
    var _y_=1,_z_=2,_A_=4,_B_=8,_C_=16,_D_=32;
    function _E_(t,mask){return (t & mask) === mask?1:0}
    function _F_(x,y){return x | y}
    var _G_=[0,_y_,_z_,_A_,_B_,_C_,_D_,_E_,_F_,_F_];
    function _H_(p,n){p.appendChild(n);return 0}
    function _I_(p,n){p.removeChild(n);return 0}
    function _J_(p,n,o){p.replaceChild(n,o);return 0}
    function _K_(p,n,o){p.insertBefore(n,o);return 0}
    function _L_(e)
     {var match=e.nodeType;
      if(0 !== match)
       {var switcher=match - 1 | 0;
        switch(switcher)
         {case 0:return [0,e];case 1:return [1,e];case 2:case 3:return [2,e]}}
      return [3,e]}
    function _M_(e,t){return caml_equal(e.nodeType,t)?e:no_handler}
    function _N_(e){return _M_(e,1)}
    function _O_(e)
     {if(3 !== e.nodeType)if(4 !== e.nodeType)return no_handler;return e}
    function _P_(e){return _M_(e,2)}
    function handler(f)
     {return function(e)
       {if(caml_call1(Opt[5],e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function full_handler(f)
     {return runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0,e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call2(f,this$0,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var e$0=event,res$0=caml_call2(f,this$0,e$0);
                 if(1 - (res$0 | 0))e$0.returnValue = res$0;
                 return res$0})}
    function invoke_handler(f,this$0,event){return f.call(this$0,event)}
    function eventTarget(e)
     {function _j6_(param)
       {function _j8_(param){throw Not_found}
        return caml_call2(Opt[8],e.srcElement,_j8_)}
      var target=caml_call2(Opt[8],e.target,_j6_);
      if(target instanceof Unsafe[1].Node)
       {if(3 === target.nodeType)
         {var _j7_=function(param){throw [0,Assert_failure,_Q_]};
          return caml_call2(Opt[8],target.parentNode,_j7_)}
        return target}
      return target}
    var _R_=[0,caml_js_from_string];
    function addEventListener(e,typ,h,capt)
     {if(e.addEventListener === t37)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _j3_=[0,h,e,[0]];
            return function(_j4_,_j5_)
             {return runtime.caml_js_call(_j3_,_j4_,_j5_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      e.addEventListener(typ,h,capt);
      return function(param){return e.removeEventListener(typ,h,capt)}}
    function removeEventListener(id){return caml_call1(id,0)}
    var
     Dom=
      [0,
       _G_,
       _K_,
       _J_,
       _I_,
       _H_,
       _x_,
       _L_,
       [0,_N_,_O_,_P_],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       _R_,
       addEventListener,
       removeEventListener,
       function(ev)
        {return caml_call1(Optdef[5],ev.preventDefault)
                 ?ev.preventDefault()
                 :ev.returnValue = ! ! 0}];
    caml_register_global(1613,Dom,"Dom");
    var
     arrayBuffer=Unsafe[1].ArrayBuffer,
     int8Array_inBuffer=Unsafe[1].Int8Array,
     uint8Array_fromBuffer=Unsafe[1].Uint8Array,
     int16Array_inBuffer=Unsafe[1].Int16Array,
     uint16Array_inBuffer=Unsafe[1].Uint16Array,
     int32Array_inBuffer=Unsafe[1].Int32Array,
     uint32Array_inBuffer=Unsafe[1].Uint32Array,
     float32Array_inBuffer=Unsafe[1].Float32Array,
     float64Array_inBuffer=Unsafe[1].Float64Array,
     set=caml_js_set,
     get=caml_js_get,
     unsafe_get=caml_js_get,
     _S_=Unsafe[1].DataView,
     Typed_array=
      [0,
       arrayBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       set,
       get,
       unsafe_get,
       _S_,
       _S_,
       [0,runtime.bigstring_to_array_buffer,runtime.bigstring_of_array_buffer],
       [0,
        function(ab)
         {var uint8=new uint8Array_fromBuffer(ab);
          return runtime.caml_string_of_array(uint8)}]];
    caml_register_global(1614,Typed_array,"Typed_array");
    var blob_constr=Unsafe[1].Blob;
    function filter_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function blob_raw(contentType,endings,a)
     {var _jZ_=0;
      if(endings)
       var _j0_=116179762 <= endings[1]?_T_:_U_,_j1_=_j0_;
      else
       var _j1_=0;
      var
       _j2_=[0,[0,cst_type,contentType],[0,[0,cst_endings,_j1_],_jZ_]],
       options=
        filter_map
         (function(param)
           {var v=param[2],name=param[1];
            if(v){var v$0=v[1];return [0,[0,name,v$0.toString()]]}
            return 0},
          _j2_),
       options$0=
        options?runtime.caml_js_object(caml_call1(Array[11],options)):t37;
      return new blob_constr(caml_js_from_array(a),options$0)}
    function blob_from_string(contentType,endings,s)
     {return blob_raw(contentType,endings,[0,s.toString()])}
    function blob_from_any(contentType,endings,l)
     {function _jX_(param)
       {var _jY_=param[1];
        if(155580615 === _jY_){var s=param[2];return s}
        if(486041214 <= _jY_)
         {if(1037850489 <= _jY_){var a=param[2];return a}
          var a$0=param[2];
          return a$0}
        if(288368849 <= _jY_){var s$0=param[2];return s$0.toString()}
        var b=param[2];
        return b}
      var l$0=caml_call2(List[12],_jX_,l);
      return blob_raw(contentType,endings,caml_call1(Array[11],l$0))}
    function filename(file)
     {var match=caml_call1(Optdef[10],file.name);
      if(match){var name=match[1];return name}
      var match$0=caml_call1(Optdef[10],file.fileName);
      if(match$0){var name$0=match$0[1];return name$0}
      return caml_call1
              (Pervasives[2],cst_can_t_retrieve_file_name_not_implemented)}
    var doc_constr=Unsafe[1].Document;
    function _V_(e){return e instanceof doc_constr?e:no_handler}
    function _W_(e){return e instanceof blob_constr?e:no_handler}
    function _X_(e){return caml_equal(typeof e,"string")?e:no_handler}
    function _Y_(e){return e instanceof arrayBuffer?e:no_handler}
    var
     loadstart=caml_call1(_R_[1],cst_loadstart),
     progress=caml_call1(_R_[1],cst_progress),
     abort=caml_call1(_R_[1],cst_abort),
     error=caml_call1(_R_[1],cst_error),
     load=caml_call1(_R_[1],cst_load),
     ReaderEvent=
      [0,loadstart,progress,abort,error,load,caml_call1(_R_[1],cst_loadend)],
     _Z_=Unsafe[1].FileReader,
     File=
      [0,
       blob_from_string,
       blob_from_any,
       [0,_V_,_W_,function(_jW_){return _jW_},_X_,_Y_],
       ReaderEvent,
       filename,
       _Z_,
       addEventListener];
    caml_register_global(1616,File,"File");
    var
     onIE=runtime.caml_js_on_ie(0) | 0,
     click=caml_call1(_R_[1],cst_click),
     dblclick=caml_call1(_R_[1],cst_dblclick),
     mousedown=caml_call1(_R_[1],cst_mousedown),
     mouseup=caml_call1(_R_[1],cst_mouseup),
     mouseover=caml_call1(_R_[1],cst_mouseover),
     mousemove=caml_call1(_R_[1],cst_mousemove),
     mouseout=caml_call1(_R_[1],cst_mouseout),
     keypress=caml_call1(_R_[1],cst_keypress),
     keydown=caml_call1(_R_[1],cst_keydown),
     keyup=caml_call1(_R_[1],cst_keyup),
     mousewheel=caml_call1(_R_[1],cst_mousewheel),
     DOMMouseScroll=caml_call1(_R_[1],cst_DOMMouseScroll),
     touchstart=caml_call1(_R_[1],cst_touchstart),
     touchmove=caml_call1(_R_[1],cst_touchmove),
     touchend=caml_call1(_R_[1],cst_touchend),
     touchcancel=caml_call1(_R_[1],cst_touchcancel),
     dragstart=caml_call1(_R_[1],cst_dragstart),
     dragend=caml_call1(_R_[1],cst_dragend),
     dragenter=caml_call1(_R_[1],cst_dragenter),
     dragover=caml_call1(_R_[1],cst_dragover),
     dragleave=caml_call1(_R_[1],cst_dragleave),
     drag=caml_call1(_R_[1],cst_drag),
     drop=caml_call1(_R_[1],cst_drop),
     hashchange=caml_call1(_R_[1],cst_hashchange),
     change=caml_call1(_R_[1],cst_change),
     input=caml_call1(_R_[1],cst_input),
     timeupdate=caml_call1(_R_[1],cst_timeupdate),
     submit=caml_call1(_R_[1],cst_submit),
     scroll=caml_call1(_R_[1],cst_scroll),
     focus=caml_call1(_R_[1],cst_focus),
     blur=caml_call1(_R_[1],cst_blur),
     load$0=caml_call1(_R_[1],cst_load$0),
     unload=caml_call1(_R_[1],cst_unload),
     beforeunload=caml_call1(_R_[1],cst_beforeunload),
     resize=caml_call1(_R_[1],cst_resize),
     orientationchange=caml_call1(_R_[1],cst_orientationchange),
     popstate=caml_call1(_R_[1],cst_popstate),
     error$0=caml_call1(_R_[1],cst_error$0),
     abort$0=caml_call1(_R_[1],cst_abort$0),
     select=caml_call1(_R_[1],cst_select),
     online=caml_call1(_R_[1],cst_online),
     offline=caml_call1(_R_[1],cst_offline),
     checking=caml_call1(_R_[1],cst_checking),
     noupdate=caml_call1(_R_[1],cst_noupdate),
     downloading=caml_call1(_R_[1],cst_downloading),
     progress$0=caml_call1(_R_[1],cst_progress$0),
     updateready=caml_call1(_R_[1],cst_updateready),
     cached=caml_call1(_R_[1],cst_cached),
     obsolete=caml_call1(_R_[1],cst_obsolete),
     domContentLoaded=caml_call1(_R_[1],cst_DOMContentLoaded),
     animationstart=caml_call1(_R_[1],cst_animationstart),
     animationend=caml_call1(_R_[1],cst_animationend),
     animationiteration=caml_call1(_R_[1],cst_animationiteration),
     animationcancel=caml_call1(_R_[1],cst_animationcancel),
     canplay=caml_call1(_R_[1],cst_canplay),
     canplaythrough=caml_call1(_R_[1],cst_canplaythrough),
     durationchange=caml_call1(_R_[1],cst_durationchange),
     emptied=caml_call1(_R_[1],cst_emptied),
     ended=caml_call1(_R_[1],cst_ended),
     loadeddata=caml_call1(_R_[1],cst_loadeddata),
     loadedmetadata=caml_call1(_R_[1],cst_loadedmetadata),
     loadstart$0=caml_call1(_R_[1],cst_loadstart$0),
     pause=caml_call1(_R_[1],cst_pause),
     play=caml_call1(_R_[1],cst_play),
     playing=caml_call1(_R_[1],cst_playing),
     ratechange=caml_call1(_R_[1],cst_ratechange),
     seeked=caml_call1(_R_[1],cst_seeked),
     seeking=caml_call1(_R_[1],cst_seeking),
     stalled=caml_call1(_R_[1],cst_stalled),
     suspend=caml_call1(_R_[1],cst_suspend),
     volumechange=caml_call1(_R_[1],cst_volumechange),
     ___=caml_call1(_R_[1],cst_waiting),
     Event=
      [0,
       click,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       mousewheel,
       DOMMouseScroll,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       hashchange,
       change,
       input,
       timeupdate,
       submit,
       scroll,
       focus,
       blur,
       load$0,
       unload,
       beforeunload,
       resize,
       orientationchange,
       popstate,
       error$0,
       abort$0,
       select,
       online,
       offline,
       checking,
       noupdate,
       downloading,
       progress$0,
       updateready,
       cached,
       obsolete,
       domContentLoaded,
       animationstart,
       animationend,
       animationiteration,
       animationcancel,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       loadeddata,
       loadedmetadata,
       loadstart$0,
       pause,
       play,
       playing,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       ___,
       _R_[1]],
     d="2d";
    function location_origin(loc)
     {function _jU_(o){return o}
      function _jV_(param)
       {var protocol=loc.protocol,hostname=loc.hostname,port=loc.port;
        if(0 === protocol.length)if(0 === hostname.length)return "";
        var origin=protocol.concat("//",hostname);
        return 0 < port.length?origin.concat(":",loc.port):origin}
      return caml_call3(Optdef[7],loc.origin,_jV_,_jU_)}
    var _$_=Unsafe[1],document=_$_.document;
    function getElementById(id)
     {function _jR_(pnode){return pnode}
      function _jS_(param){throw Not_found}
      var _jT_=document.getElementById(id.toString());
      return caml_call3(Opt[7],_jT_,_jS_,_jR_)}
    function getElementById_exn(id)
     {function _jN_(pnode){return pnode}
      function _jO_(param)
       {var _jQ_=caml_call2(Printf[4],_aa_,id);
        return caml_call1(Pervasives[2],_jQ_)}
      var _jP_=document.getElementById(id.toString());
      return caml_call3(Opt[7],_jP_,_jO_,_jN_)}
    function getElementById_opt(id)
     {var _jM_=document.getElementById(id.toString());
      return caml_call1(Opt[10],_jM_)}
    function getElementById_coerce(id,coerce)
     {function _jI_(e)
       {var _jL_=caml_call1(coerce,e);return caml_call1(Opt[10],_jL_)}
      function _jJ_(param){return 0}
      var _jK_=document.getElementById(id.toString());
      return caml_call3(Opt[7],_jK_,_jJ_,_jI_)}
    function opt_iter(x,f){if(x){var v=x[1];return caml_call1(f,v)}return 0}
    function createElement(doc,name)
     {return doc.createElement(name.toString())}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc,elt)
     {for(;;)
       {if(0 === type)if(0 === name)return createElement(doc,elt);
        var _jC_=createElementSyntax[1];
        if(785140586 === _jC_)
         {try
           {var
             el=document.createElement('<input name="x">'),
             _jF_=el.tagName.toLowerCase() === "input"?1:0,
             _jG_=_jF_?el.name === "x"?1:0:_jF_,
             _jD_=_jG_}
          catch(_jH_){var _jD_=0}
          var _jE_=_jD_?982028505:-1003883683;
          createElementSyntax[1] = _jE_;
          continue}
        if(982028505 <= _jC_)
         {var a=new array_length();
          a.push("<",elt.toString());
          opt_iter
           (type,
            function(t){a.push(' type="',caml_js_html_escape(t),'"');return 0});
          opt_iter
           (name,
            function(n){a.push(' name="',caml_js_html_escape(n),'"');return 0});
          a.push(">");
          return doc.createElement(a.join(""))}
        var res=createElement(doc,elt);
        opt_iter(type,function(t){return res.type = t});
        opt_iter(name,function(n){return res.name = n});
        return res}}
    function createHtml(doc){return unsafeCreateElement(doc,cst_html)}
    function createHead(doc){return unsafeCreateElement(doc,cst_head)}
    function createLink(doc){return unsafeCreateElement(doc,cst_link)}
    function createTitle(doc){return unsafeCreateElement(doc,cst_title)}
    function createMeta(doc){return unsafeCreateElement(doc,cst_meta)}
    function createBase(doc){return unsafeCreateElement(doc,cst_base)}
    function createStyle(doc){return unsafeCreateElement(doc,cst_style)}
    function createBody(doc){return unsafeCreateElement(doc,cst_body)}
    function createForm(doc){return unsafeCreateElement(doc,cst_form)}
    function createOptgroup(doc){return unsafeCreateElement(doc,cst_optgroup)}
    function createOption(doc){return unsafeCreateElement(doc,cst_option)}
    function createSelect(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_select$0)}
    function createInput(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_input$0)}
    function createTextarea(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_textarea)}
    function createButton(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_button)}
    function createLabel(doc){return unsafeCreateElement(doc,cst_label)}
    function createFieldset(doc){return unsafeCreateElement(doc,cst_fieldset)}
    function createLegend(doc){return unsafeCreateElement(doc,cst_legend)}
    function createUl(doc){return unsafeCreateElement(doc,cst_ul)}
    function createOl(doc){return unsafeCreateElement(doc,cst_ol)}
    function createDl(doc){return unsafeCreateElement(doc,cst_dl)}
    function createLi(doc){return unsafeCreateElement(doc,cst_li)}
    function createDiv(doc){return unsafeCreateElement(doc,cst_div)}
    function createEmbed(doc){return unsafeCreateElement(doc,cst_embed)}
    function createP(doc){return unsafeCreateElement(doc,cst_p)}
    function createH1(doc){return unsafeCreateElement(doc,cst_h1)}
    function createH2(doc){return unsafeCreateElement(doc,cst_h2)}
    function createH3(doc){return unsafeCreateElement(doc,cst_h3)}
    function createH4(doc){return unsafeCreateElement(doc,cst_h4)}
    function createH5(doc){return unsafeCreateElement(doc,cst_h5)}
    function createH6(doc){return unsafeCreateElement(doc,cst_h6)}
    function createQ(doc){return unsafeCreateElement(doc,cst_q)}
    function createBlockquote(doc)
     {return unsafeCreateElement(doc,cst_blockquote)}
    function createPre(doc){return unsafeCreateElement(doc,cst_pre)}
    function createBr(doc){return unsafeCreateElement(doc,cst_br)}
    function createHr(doc){return unsafeCreateElement(doc,cst_hr)}
    function createIns(doc){return unsafeCreateElement(doc,cst_ins)}
    function createDel(doc){return unsafeCreateElement(doc,cst_del)}
    function createA(doc){return unsafeCreateElement(doc,cst_a)}
    function createImg(doc){return unsafeCreateElement(doc,cst_img)}
    function createObject(doc){return unsafeCreateElement(doc,cst_object)}
    function createParam(doc){return unsafeCreateElement(doc,cst_param)}
    function createMap(doc){return unsafeCreateElement(doc,cst_map)}
    function createArea(doc){return unsafeCreateElement(doc,cst_area)}
    function createScript(doc){return unsafeCreateElement(doc,cst_script)}
    function createTable(doc){return unsafeCreateElement(doc,cst_table)}
    function createCaption(doc){return unsafeCreateElement(doc,cst_caption)}
    function createCol(doc){return unsafeCreateElement(doc,cst_col)}
    function createColgroup(doc){return unsafeCreateElement(doc,cst_colgroup)}
    function createThead(doc){return unsafeCreateElement(doc,cst_thead)}
    function createTfoot(doc){return unsafeCreateElement(doc,cst_tfoot)}
    function createTbody(doc){return unsafeCreateElement(doc,cst_tbody)}
    function createTr(doc){return unsafeCreateElement(doc,cst_tr)}
    function createTh(doc){return unsafeCreateElement(doc,cst_th)}
    function createTd(doc){return unsafeCreateElement(doc,cst_td)}
    function createSub(doc){return createElement(doc,cst_sub)}
    function createSup(doc){return createElement(doc,cst_sup)}
    function createSpan(doc){return createElement(doc,cst_span)}
    function createTt(doc){return createElement(doc,cst_tt)}
    function createI(doc){return createElement(doc,cst_i)}
    function createB(doc){return createElement(doc,cst_b)}
    function createBig(doc){return createElement(doc,cst_big)}
    function createSmall(doc){return createElement(doc,cst_small)}
    function createEm(doc){return createElement(doc,cst_em)}
    function createStrong(doc){return createElement(doc,cst_strong)}
    function createCite(doc){return createElement(doc,cst_cite)}
    function createDfn(doc){return createElement(doc,cst_dfn)}
    function createCode(doc){return createElement(doc,cst_code)}
    function createSamp(doc){return createElement(doc,cst_samp)}
    function createKbd(doc){return createElement(doc,cst_kbd)}
    function createVar(doc){return createElement(doc,cst_var)}
    function createAbbr(doc){return createElement(doc,cst_abbr)}
    function createDd(doc){return createElement(doc,cst_dd)}
    function createDt(doc){return createElement(doc,cst_dt)}
    function createNoscript(doc){return createElement(doc,cst_noscript)}
    function createAddress(doc){return createElement(doc,cst_address)}
    function createFrameset(doc){return unsafeCreateElement(doc,cst_frameset)}
    function createFrame(doc){return unsafeCreateElement(doc,cst_frame)}
    function createIframe(doc){return unsafeCreateElement(doc,cst_iframe)}
    function createAudio(doc){return unsafeCreateElement(doc,cst_audio)}
    function createVideo(doc){return unsafeCreateElement(doc,cst_video)}
    var
     Canvas_not_available=
      caml_set_oo_id([248,cst_Dom_html_Canvas_not_available,0]);
    function createCanvas(doc)
     {var c=unsafeCreateElement(doc,cst_canvas);
      if(1 - caml_call1(Opt[5],c.getContext))throw Canvas_not_available;
      return c}
    var
     html_element=Unsafe[1].HTMLElement,
     _ab_=
      html_element === t37
       ?function(e){return e.innerHTML === t37?no_handler:e}
       :function(e){return e instanceof html_element?e:no_handler};
    function _ac_(tag,e)
     {var _jB_=tag.toString();
      return e.tagName.toLowerCase() === _jB_?e:no_handler}
    function _ad_(e){return _ac_(cst_a$0,e)}
    function _ae_(e){return _ac_(cst_area$0,e)}
    function _af_(e){return _ac_(cst_base$0,e)}
    function _ag_(e){return _ac_(cst_blockquote$0,e)}
    function _ah_(e){return _ac_(cst_body$0,e)}
    function _ai_(e){return _ac_(cst_br$0,e)}
    function _aj_(e){return _ac_(cst_button$0,e)}
    function _ak_(e){return _ac_(cst_canvas$0,e)}
    function _al_(e){return _ac_(cst_caption$0,e)}
    function _am_(e){return _ac_(cst_col$0,e)}
    function _an_(e){return _ac_(cst_colgroup$0,e)}
    function _ao_(e){return _ac_(cst_del$0,e)}
    function _ap_(e){return _ac_(cst_div$0,e)}
    function _aq_(e){return _ac_(cst_dl$0,e)}
    function _ar_(e){return _ac_(cst_fieldset$0,e)}
    function _as_(e){return _ac_(cst_embed$0,e)}
    function _at_(e){return _ac_(cst_form$0,e)}
    function _au_(e){return _ac_(cst_frameset$0,e)}
    function _av_(e){return _ac_(cst_frame$0,e)}
    function _aw_(e){return _ac_(cst_h1$0,e)}
    function _ax_(e){return _ac_(cst_h2$0,e)}
    function _ay_(e){return _ac_(cst_h3$0,e)}
    function _az_(e){return _ac_(cst_h4$0,e)}
    function _aA_(e){return _ac_(cst_h5$0,e)}
    function _aB_(e){return _ac_(cst_h6$0,e)}
    function _aC_(e){return _ac_(cst_head$0,e)}
    function _aD_(e){return _ac_(cst_hr$0,e)}
    function _aE_(e){return _ac_(cst_html$0,e)}
    function _aF_(e){return _ac_(cst_iframe$0,e)}
    function _aG_(e){return _ac_(cst_img$0,e)}
    function _aH_(e){return _ac_(cst_input$1,e)}
    function _aI_(e){return _ac_(cst_ins$0,e)}
    function _aJ_(e){return _ac_(cst_label$0,e)}
    function _aK_(e){return _ac_(cst_legend$0,e)}
    function _aL_(e){return _ac_(cst_li$0,e)}
    function _aM_(e){return _ac_(cst_link$0,e)}
    function _aN_(e){return _ac_(cst_map$0,e)}
    function _aO_(e){return _ac_(cst_meta$0,e)}
    function _aP_(e){return _ac_(cst_object$0,e)}
    function _aQ_(e){return _ac_(cst_ol$0,e)}
    function _aR_(e){return _ac_(cst_optgroup$0,e)}
    function _aS_(e){return _ac_(cst_option$0,e)}
    function _aT_(e){return _ac_(cst_p$0,e)}
    function _aU_(e){return _ac_(cst_param$0,e)}
    function _aV_(e){return _ac_(cst_pre$0,e)}
    function _aW_(e){return _ac_(cst_q$0,e)}
    function _aX_(e){return _ac_(cst_script$0,e)}
    function _aY_(e){return _ac_(cst_select$1,e)}
    function _aZ_(e){return _ac_(cst_style$0,e)}
    function _a0_(e){return _ac_(cst_table$0,e)}
    function _a1_(e){return _ac_(cst_tbody$0,e)}
    function _a2_(e){return _ac_(cst_td$0,e)}
    function _a3_(e){return _ac_(cst_textarea$0,e)}
    function _a4_(e){return _ac_(cst_tfoot$0,e)}
    function _a5_(e){return _ac_(cst_th$0,e)}
    function _a6_(e){return _ac_(cst_thead$0,e)}
    function _a7_(e){return _ac_(cst_title$0,e)}
    function _a8_(e){return _ac_(cst_tr$0,e)}
    function _a9_(e){return _ac_(cst_ul$0,e)}
    function _a__(e){return _ac_(cst_audio$0,e)}
    function _a$_(e){return _ac_(cst_video$0,e)}
    function _ba_(constr,ev)
     {if(constr !== t37)if(ev instanceof constr)return ev;return no_handler}
    function _bb_(ev){return _ba_(Unsafe[1].MouseEvent,ev)}
    function _bc_(ev){return _ba_(Unsafe[1].KeyboardEvent,ev)}
    function _bd_(ev){return _ba_(Unsafe[1].WheelEvent,ev)}
    function _be_(ev){return _ba_(Unsafe[1].MouseScrollEvent,ev)}
    function _bf_(ev){return _ba_(Unsafe[1].PopStateEvent,ev)}
    function eventRelatedTarget(e)
     {function _jy_(param)
       {var match=caml_js_to_string(e.type);
        if(caml_string_notequal(match,cst_mouseout$0))
         {if(caml_string_notequal(match,cst_mouseover$0))return no_handler;
          var _jz_=function(param){throw [0,Assert_failure,_bg_]};
          return caml_call2(Optdef[8],e.fromElement,_jz_)}
        function _jA_(param){throw [0,Assert_failure,_bh_]}
        return caml_call2(Optdef[8],e.toElement,_jA_)}
      return caml_call2(Optdef[8],e.relatedTarget,_jy_)}
    function eventAbsolutePosition(e)
     {var body=document.body,html=document.documentElement;
      return [0,
              (e.clientX + body.scrollLeft | 0) + html.scrollLeft | 0,
              (e.clientY + body.scrollTop | 0) + html.scrollTop | 0]}
    function eventAbsolutePosition$0(e)
     {function _ju_(x)
       {function _jw_(y){return [0,x,y]}
        function _jx_(param){return eventAbsolutePosition(e)}
        return caml_call3(Optdef[7],e.pageY,_jx_,_jw_)}
      function _jv_(param){return eventAbsolutePosition(e)}
      return caml_call3(Optdef[7],e.pageX,_jv_,_ju_)}
    function elementClientPosition(e)
     {var
       r=e.getBoundingClientRect(),
       body=document.body,
       html=document.documentElement;
      return [0,
              ((r.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
              ((r.top | 0) - body.clientTop | 0) - html.clientTop | 0]}
    function getDocumentScroll(param)
     {var body=document.body,html=document.documentElement;
      return [0,
              body.scrollLeft + html.scrollLeft | 0,
              body.scrollTop + html.scrollTop | 0]}
    function buttonPressed(ev)
     {function _js_(x){return x}
      function _jt_(param)
       {var match=ev.button,switcher=match - 1 | 0;
        if(! (3 < switcher >>> 0))
         switch(switcher)
          {case 0:return 1;case 1:return 3;case 2:break;default:return 2}
        return 0}
      return caml_call3(Optdef[7],ev.which,_jt_,_js_)}
    function addMousewheelEventListener(e,h,capt)
     {var d=createDiv(document);
      d.setAttribute("onmousewheel","return;");
      if(typeof d.onmousewheel === "function")
       {var
         _jo_=
          handler
           (function(e)
             {function _jq_(param){return 0}
              var
               dx=
                (- caml_call2(Optdef[8],e.wheelDeltaX,_jq_) | 0) / 40 | 0;
              function _jr_(param){return e.wheelDelta}
              var
               dy=
                (- caml_call2(Optdef[8],e.wheelDeltaY,_jr_) | 0) / 40 | 0;
              return caml_call3(h,e,dx,dy)});
        return addEventListener(e,Event[11],_jo_,capt)}
      var
       _jp_=
        handler
         (function(e)
           {var d=e.detail;
            return e.axis === e.HORIZONTAL
                    ?caml_call3(h,e,d,0)
                    :caml_call3(h,e,0,d)});
      return addEventListener(e,Event[12],_jp_,capt)}
    function f(v)
     {var
       match=caml_js_to_string(v),
       switch$0=caml_string_compare(match,cst_KeyH);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 8;
        var switch$1=caml_string_compare(match,cst_Numpad4);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 72;
          var switch$2=caml_string_compare(match,cst_PageUp);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 98;
            var switch$3=caml_string_compare(match,cst_ShiftRight);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 91;
              if(! caml_string_notequal(match,cst_Slash))return 55;
              if(! caml_string_notequal(match,cst_Space))return 41;
              if(! caml_string_notequal(match,cst_Tab))return 39;
              if(! caml_string_notequal(match,cst_VolumeDown))return 103;
              if(! caml_string_notequal(match,cst_VolumeMute))return 102;
              if(! caml_string_notequal(match,cst_VolumeUp))return 104}
            else
             {if(! caml_string_notequal(match,cst_Pause))return 123;
              if(! caml_string_notequal(match,cst_Period))return 54;
              if(! caml_string_notequal(match,cst_PrintScreen))return 120;
              if(! caml_string_notequal(match,cst_Quote))return 50;
              if(! caml_string_notequal(match,cst_ScrollLock))return 119;
              if(! caml_string_notequal(match,cst_Semicolon))return 49;
              if(! caml_string_notequal(match,cst_ShiftLeft))return 90}}
          else
           {var switch$4=caml_string_compare(match,cst_NumpadDivide);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 84;
              if(! caml_string_notequal(match,cst_NumpadEnter))return 83;
              if(! caml_string_notequal(match,cst_NumpadEqual))return 82;
              if(! caml_string_notequal(match,cst_NumpadMultiply))return 78;
              if(! caml_string_notequal(match,cst_NumpadSubtract))return 79;
              if(! caml_string_notequal(match,cst_OSLeft))return 117;
              if(! caml_string_notequal(match,cst_OSRight))return 118;
              if(! caml_string_notequal(match,cst_PageDown))return 99}
            else
             {if(! caml_string_notequal(match,cst_Numpad5))return 73;
              if(! caml_string_notequal(match,cst_Numpad6))return 74;
              if(! caml_string_notequal(match,cst_Numpad7))return 75;
              if(! caml_string_notequal(match,cst_Numpad8))return 76;
              if(! caml_string_notequal(match,cst_Numpad9))return 77;
              if(! caml_string_notequal(match,cst_NumpadAdd))return 80;
              if(! caml_string_notequal(match,cst_NumpadDecimal))return 81}}}
        else
         {var switch$5=caml_string_compare(match,cst_KeyX);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 24;
            var switch$6=caml_string_compare(match,cst_MetaRight);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 89;
              if(! caml_string_notequal(match,cst_Minus))return 37;
              if(! caml_string_notequal(match,cst_NumLock))return 85;
              if(! caml_string_notequal(match,cst_Numpad0))return 68;
              if(! caml_string_notequal(match,cst_Numpad1))return 69;
              if(! caml_string_notequal(match,cst_Numpad2))return 70;
              if(! caml_string_notequal(match,cst_Numpad3))return 71}
            else
             {if(! caml_string_notequal(match,cst_KeyY))return 25;
              if(! caml_string_notequal(match,cst_KeyZ))return 26;
              if(! caml_string_notequal(match,cst_MediaPlayPause))return 107;
              if(! caml_string_notequal(match,cst_MediaStop))return 108;
              if(! caml_string_notequal(match,cst_MediaTrackNext))return 106;
              if(! caml_string_notequal(match,cst_MediaTrackPrevious))
               return 105;
              if(! caml_string_notequal(match,cst_MetaLeft))return 88}}
          else
           {var switch$7=caml_string_compare(match,cst_KeyP);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 16;
              if(! caml_string_notequal(match,cst_KeyQ))return 17;
              if(! caml_string_notequal(match,cst_KeyR))return 18;
              if(! caml_string_notequal(match,cst_KeyS))return 19;
              if(! caml_string_notequal(match,cst_KeyT))return 20;
              if(! caml_string_notequal(match,cst_KeyU))return 21;
              if(! caml_string_notequal(match,cst_KeyV))return 22;
              if(! caml_string_notequal(match,cst_KeyW))return 23}
            else
             {if(! caml_string_notequal(match,cst_KeyI))return 9;
              if(! caml_string_notequal(match,cst_KeyJ))return 10;
              if(! caml_string_notequal(match,cst_KeyK))return 11;
              if(! caml_string_notequal(match,cst_KeyL))return 12;
              if(! caml_string_notequal(match,cst_KeyM))return 13;
              if(! caml_string_notequal(match,cst_KeyN))return 14;
              if(! caml_string_notequal(match,cst_KeyO))return 15}}}}
      else
       {var switch$8=caml_string_compare(match,cst_Digit6);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 33;
          var switch$9=caml_string_compare(match,cst_F6);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 61;
            var switch$10=caml_string_compare(match,cst_KeyA);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 1;
              if(! caml_string_notequal(match,cst_KeyB))return 2;
              if(! caml_string_notequal(match,cst_KeyC))return 3;
              if(! caml_string_notequal(match,cst_KeyD))return 4;
              if(! caml_string_notequal(match,cst_KeyE))return 5;
              if(! caml_string_notequal(match,cst_KeyF))return 6;
              if(! caml_string_notequal(match,cst_KeyG))return 7}
            else
             {if(! caml_string_notequal(match,cst_F7))return 62;
              if(! caml_string_notequal(match,cst_F8))return 63;
              if(! caml_string_notequal(match,cst_F9))return 64;
              if(! caml_string_notequal(match,cst_Home))return 100;
              if(! caml_string_notequal(match,cst_Insert))return 44;
              if(! caml_string_notequal(match,cst_IntlBackslash))return 121;
              if(! caml_string_notequal(match,cst_IntlYen))return 122}}
          else
           {var switch$11=caml_string_compare(match,cst_F1);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 56;
              if(! caml_string_notequal(match,cst_F10))return 65;
              if(! caml_string_notequal(match,cst_F11))return 66;
              if(! caml_string_notequal(match,cst_F12))return 67;
              if(! caml_string_notequal(match,cst_F2))return 57;
              if(! caml_string_notequal(match,cst_F3))return 58;
              if(! caml_string_notequal(match,cst_F4))return 59;
              if(! caml_string_notequal(match,cst_F5))return 60}
            else
             {if(! caml_string_notequal(match,cst_Digit7))return 34;
              if(! caml_string_notequal(match,cst_Digit8))return 35;
              if(! caml_string_notequal(match,cst_Digit9))return 36;
              if(! caml_string_notequal(match,cst_End))return 101;
              if(! caml_string_notequal(match,cst_Enter))return 40;
              if(! caml_string_notequal(match,cst_Equal))return 38;
              if(! caml_string_notequal(match,cst_Escape))return 42}}}
        else
         {var switch$12=caml_string_compare(match,cst_BrowserRefresh);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 113;
            var switch$13=caml_string_compare(match,cst_Delete);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 45;
              if(! caml_string_notequal(match,cst_Digit0))return 27;
              if(! caml_string_notequal(match,cst_Digit1))return 28;
              if(! caml_string_notequal(match,cst_Digit2))return 29;
              if(! caml_string_notequal(match,cst_Digit3))return 30;
              if(! caml_string_notequal(match,cst_Digit4))return 31;
              if(! caml_string_notequal(match,cst_Digit5))return 32}
            else
             {if(! caml_string_notequal(match,cst_BrowserSearch))return 110;
              if(! caml_string_notequal(match,cst_BrowserStop))return 114;
              if(! caml_string_notequal(match,cst_CapsLock))return 46;
              if(! caml_string_notequal(match,cst_Comma))return 53;
              if(! caml_string_notequal(match,cst_ContextMenu))return 109;
              if(! caml_string_notequal(match,cst_ControlLeft))return 86;
              if(! caml_string_notequal(match,cst_ControlRight))return 87}}
          else
           {var switch$14=caml_string_compare(match,cst_Backslash);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 52;
              if(! caml_string_notequal(match,cst_Backspace))return 43;
              if(! caml_string_notequal(match,cst_BracketLeft))return 47;
              if(! caml_string_notequal(match,cst_BracketRight))return 48;
              if(! caml_string_notequal(match,cst_BrowserBack))return 116;
              if(! caml_string_notequal(match,cst_BrowserFavorites))
               return 112;
              if(! caml_string_notequal(match,cst_BrowserForward))return 115;
              if(! caml_string_notequal(match,cst_BrowserHome))return 111}
            else
             {if(! caml_string_notequal(match,cst_AltLeft))return 92;
              if(! caml_string_notequal(match,cst_AltRight))return 93;
              if(! caml_string_notequal(match,cst_ArrowDown))return 97;
              if(! caml_string_notequal(match,cst_ArrowLeft))return 94;
              if(! caml_string_notequal(match,cst_ArrowRight))return 95;
              if(! caml_string_notequal(match,cst_ArrowUp))return 96;
              if(! caml_string_notequal(match,cst_Backquote))return 51}}}}
      return 0}
    function _bi_(param)
     {if(19 <= param)
       {if(91 === param)return 88}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 90;case 1:return 86;default:return 92}}
      return 0}
    function _bj_(param)
     {if(19 <= param)
       {if(91 === param)return 89}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 91;case 1:return 87;default:return 93}}
      return 0}
    function _bk_(param)
     {if(47 <= param)
       {var switcher=param - 96 | 0;
        if(! (15 < switcher >>> 0))
         switch(switcher)
          {case 0:return 68;
           case 1:return 69;
           case 2:return 70;
           case 3:return 71;
           case 4:return 72;
           case 5:return 73;
           case 6:return 74;
           case 7:return 75;
           case 8:return 76;
           case 9:return 77;
           case 10:return 78;
           case 11:return 80;
           case 12:break;
           case 13:return 79;
           case 14:return 81;
           default:return 84}}
      else
       if(12 <= param)
        {var switcher$0=param - 12 | 0;
         switch(switcher$0)
          {case 0:return 73;
           case 1:return 83;
           case 21:return 77;
           case 22:return 71;
           case 23:return 69;
           case 24:return 75;
           case 25:return 72;
           case 26:return 76;
           case 27:return 74;
           case 28:return 70;
           case 33:return 68;
           case 34:return 81
           }}
      return 0}
    function _bl_(param)
     {var switcher=param - 8 | 0;
      if(! (214 < switcher >>> 0))
       {var _jn_=switcher;
        if(67 <= _jn_)
         switch(_jn_)
          {case 67:return 11;
           case 68:return 12;
           case 69:return 13;
           case 70:return 14;
           case 71:return 15;
           case 72:return 16;
           case 73:return 17;
           case 74:return 18;
           case 75:return 19;
           case 76:return 20;
           case 77:return 21;
           case 78:return 22;
           case 79:return 23;
           case 80:return 24;
           case 81:return 25;
           case 82:return 26;
           case 85:return 109;
           case 104:return 56;
           case 105:return 57;
           case 106:return 58;
           case 107:return 59;
           case 108:return 60;
           case 109:return 61;
           case 110:return 62;
           case 111:return 63;
           case 112:return 64;
           case 113:return 65;
           case 114:return 66;
           case 115:return 67;
           case 137:return 119;
           case 178:return 49;
           case 179:return 38;
           case 180:return 53;
           case 181:return 37;
           case 182:return 54;
           case 183:return 55;
           case 184:return 51;
           case 211:return 47;
           case 212:return 52;
           case 213:return 48;
           case 214:return 50
           }
        else
         switch(_jn_)
          {case 0:return 43;
           case 1:return 39;
           case 5:return 40;
           case 11:return 123;
           case 12:return 46;
           case 19:return 42;
           case 24:return 41;
           case 25:return 98;
           case 26:return 99;
           case 27:return 101;
           case 28:return 100;
           case 29:return 94;
           case 30:return 96;
           case 31:return 95;
           case 32:return 97;
           case 34:return 120;
           case 37:return 44;
           case 38:return 45;
           case 40:return 27;
           case 41:return 28;
           case 42:return 29;
           case 43:return 30;
           case 44:return 31;
           case 45:return 32;
           case 46:return 33;
           case 47:return 34;
           case 48:return 35;
           case 49:return 36;
           case 57:return 1;
           case 58:return 2;
           case 59:return 3;
           case 60:return 4;
           case 61:return 5;
           case 62:return 6;
           case 63:return 7;
           case 64:return 8;
           case 65:return 9;
           case 66:return 10
           }}
      return 0}
    function _bm_(param){return 0}
    function _bn_(value,f,v){return 0 === v?caml_call1(f,value):v}
    function _bo_(x,f){return caml_call1(f,x)}
    function _bp_(evt)
     {var _jg_=evt.keyCode;
      function _jh_(_jm_){return _bn_(_jg_,_bl_,_jm_)}
      var match=evt.location,switcher=match - 1 | 0;
      if(2 < switcher >>> 0)
       var _ji_=_bm_;
      else
       switch(switcher)
        {case 0:
          var
           _jd_=evt.keyCode,
           _ji_=function(_jk_){return _bn_(_jd_,_bi_,_jk_)};
          break;
         case 1:
          var
           _je_=evt.keyCode,
           _ji_=function(_jj_){return _bn_(_je_,_bj_,_jj_)};
          break;
         default:
          var
           _jf_=evt.keyCode,
           _ji_=function(_jl_){return _bn_(_jf_,_bk_,_jl_)}}
      var value=evt.code;
      return _bo_
              (_bo_
                (_bo_
                  (0,
                   function(v)
                    {return 0 === v?caml_call3(Optdef[7],value,_bm_,f):v}),
                 _ji_),
               _jh_)}
    function _bq_(value)
     {if(0 < value)
       try
        {var _jb_=[0,caml_call1(Uchar[6],value)];return _jb_}
       catch(_jc_){return 0}
      return 0}
    function _br_(param){return ""}
    function _bs_(param){return 0}
    function _bt_(evt)
     {var key=caml_call2(Optdef[8],evt.key,_br_),match=key.length;
      return 0 === match
              ?caml_call3(Optdef[7],evt.charCode,_bs_,_bq_)
              :1 === match?_bq_(key.charCodeAt(0) | 0):0}
    function element(_ja_){return _ja_}
    function tagged(e)
     {var tag=caml_js_to_byte_string(e.tagName.toLowerCase());
      if(0 === caml_ml_string_length(tag))return [61,e];
      var match=runtime.caml_bytes_unsafe_get(tag,0),switcher=match - 97 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:
          return caml_string_notequal(tag,cst_a$1)
                  ?caml_string_notequal(tag,cst_area$1)
                    ?caml_string_notequal(tag,cst_audio$1)?[61,e]:[2,e]
                    :[1,e]
                  :[0,e];
         case 1:
          return caml_string_notequal(tag,cst_base$1)
                  ?caml_string_notequal(tag,cst_blockquote$1)
                    ?caml_string_notequal(tag,cst_body$1)
                      ?caml_string_notequal(tag,cst_br$1)
                        ?caml_string_notequal(tag,cst_button$1)?[61,e]:[7,e]
                        :[6,e]
                      :[5,e]
                    :[4,e]
                  :[3,e];
         case 2:
          return caml_string_notequal(tag,cst_canvas$1)
                  ?caml_string_notequal(tag,cst_caption$1)
                    ?caml_string_notequal(tag,cst_col$1)
                      ?caml_string_notequal(tag,cst_colgroup$1)?[61,e]:[11,e]
                      :[10,e]
                    :[9,e]
                  :[8,e];
         case 3:
          return caml_string_notequal(tag,cst_del$1)
                  ?caml_string_notequal(tag,cst_div$1)
                    ?caml_string_notequal(tag,cst_dl$1)?[61,e]:[14,e]
                    :[13,e]
                  :[12,e];
         case 4:return caml_string_notequal(tag,cst_embed$1)?[61,e]:[15,e];
         case 5:
          return caml_string_notequal(tag,cst_fieldset$1)
                  ?caml_string_notequal(tag,cst_form$1)
                    ?caml_string_notequal(tag,cst_frame$1)
                      ?caml_string_notequal(tag,cst_frameset$1)?[61,e]:[18,e]
                      :[19,e]
                    :[17,e]
                  :[16,e];
         case 7:
          return caml_string_notequal(tag,cst_h1$1)
                  ?caml_string_notequal(tag,cst_h2$1)
                    ?caml_string_notequal(tag,cst_h3$1)
                      ?caml_string_notequal(tag,cst_h4$1)
                        ?caml_string_notequal(tag,cst_h5$1)
                          ?caml_string_notequal(tag,cst_h6$1)
                            ?caml_string_notequal(tag,cst_head$1)
                              ?caml_string_notequal(tag,cst_hr$1)
                                ?caml_string_notequal(tag,cst_html$1)?[61,e]:[28,e]
                                :[27,e]
                              :[26,e]
                            :[25,e]
                          :[24,e]
                        :[23,e]
                      :[22,e]
                    :[21,e]
                  :[20,e];
         case 8:
          return caml_string_notequal(tag,cst_iframe$1)
                  ?caml_string_notequal(tag,cst_img$1)
                    ?caml_string_notequal(tag,cst_input$2)
                      ?caml_string_notequal(tag,cst_ins$1)?[61,e]:[32,e]
                      :[31,e]
                    :[30,e]
                  :[29,e];
         case 11:
          return caml_string_notequal(tag,cst_label$1)
                  ?caml_string_notequal(tag,cst_legend$1)
                    ?caml_string_notequal(tag,cst_li$1)
                      ?caml_string_notequal(tag,cst_link$1)?[61,e]:[36,e]
                      :[35,e]
                    :[34,e]
                  :[33,e];
         case 12:
          return caml_string_notequal(tag,cst_map$1)
                  ?caml_string_notequal(tag,cst_meta$1)?[61,e]:[38,e]
                  :[37,e];
         case 14:
          return caml_string_notequal(tag,cst_object$1)
                  ?caml_string_notequal(tag,cst_ol$1)
                    ?caml_string_notequal(tag,cst_optgroup$1)
                      ?caml_string_notequal(tag,cst_option$1)?[61,e]:[42,e]
                      :[41,e]
                    :[40,e]
                  :[39,e];
         case 15:
          return caml_string_notequal(tag,cst_p$1)
                  ?caml_string_notequal(tag,cst_param$1)
                    ?caml_string_notequal(tag,cst_pre$1)?[61,e]:[45,e]
                    :[44,e]
                  :[43,e];
         case 16:return caml_string_notequal(tag,cst_q$1)?[61,e]:[46,e];
         case 18:
          return caml_string_notequal(tag,cst_script$1)
                  ?caml_string_notequal(tag,cst_select$2)
                    ?caml_string_notequal(tag,cst_style$1)?[61,e]:[49,e]
                    :[48,e]
                  :[47,e];
         case 19:
          return caml_string_notequal(tag,cst_table$1)
                  ?caml_string_notequal(tag,cst_tbody$1)
                    ?caml_string_notequal(tag,cst_td$1)
                      ?caml_string_notequal(tag,cst_textarea$1)
                        ?caml_string_notequal(tag,cst_tfoot$1)
                          ?caml_string_notequal(tag,cst_th$1)
                            ?caml_string_notequal(tag,cst_thead$1)
                              ?caml_string_notequal(tag,cst_title$1)
                                ?caml_string_notequal(tag,cst_tr$1)?[61,e]:[58,e]
                                :[57,e]
                              :[56,e]
                            :[55,e]
                          :[54,e]
                        :[53,e]
                      :[52,e]
                    :[51,e]
                  :[50,e];
         case 20:return caml_string_notequal(tag,cst_ul$1)?[61,e]:[59,e];
         case 21:return caml_string_notequal(tag,cst_video$1)?[61,e]:[60,e]
         }
      return [61,e]}
    function opt_tagged(e)
     {function _i__(e){return [0,tagged(e)]}
      function _i$_(param){return 0}
      return caml_call3(Opt[7],e,_i$_,_i__)}
    function taggedEvent(ev)
     {function _iV_(ev){return [0,ev]}
      function _iW_(param)
       {function _iY_(ev){return [1,ev]}
        function _iZ_(param)
         {function _i1_(ev){return [2,ev]}
          function _i2_(param)
           {function _i4_(ev){return [3,ev]}
            function _i5_(param)
             {function _i7_(ev){return [4,ev]}
              function _i8_(param){return [5,ev]}
              var _i9_=_bf_(ev);
              return caml_call3(Opt[7],_i9_,_i8_,_i7_)}
            var _i6_=_be_(ev);
            return caml_call3(Opt[7],_i6_,_i5_,_i4_)}
          var _i3_=_bd_(ev);
          return caml_call3(Opt[7],_i3_,_i2_,_i1_)}
        var _i0_=_bc_(ev);
        return caml_call3(Opt[7],_i0_,_iZ_,_iY_)}
      var _iX_=_bb_(ev);
      return caml_call3(Opt[7],_iX_,_iW_,_iV_)}
    function opt_taggedEvent(ev)
     {function _iT_(ev){return [0,taggedEvent(ev)]}
      function _iU_(param){return 0}
      return caml_call3(Opt[7],ev,_iU_,_iT_)}
    function stopPropagation(ev)
     {function _iR_(param){return ev.stopPropagation()}
      function _iS_(param){return ev.cancelBubble = true$0}
      return caml_call3(Optdef[7],ev.stopPropagation,_iS_,_iR_)}
    var
     _bu_=
      runtime.caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             _$_.requestAnimationFrame,
             [0,
              _$_.mozRequestAnimationFrame,
              [0,
               _$_.webkitRequestAnimationFrame,
               [0,
                _$_.oRequestAnimationFrame,
                [0,_$_.msRequestAnimationFrame,0]]]]];
          try
           {var
             _iO_=function(c){return caml_call1(Optdef[5],c)},
             req=caml_call2(List[28],_iO_,l),
             _iP_=function(callback){return req(callback)};
            return _iP_}
          catch(_iQ_)
           {_iQ_ = caml_wrap_exception(_iQ_);
            if(_iQ_ === Not_found)
             {var
               now=function(param){return new date_ms().getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0?0:dt;
                last[1] = t;
                _$_.setTimeout(callback,dt$0);
                return 0}}
            throw _iQ_}});
    function _bv_(param){return caml_call1(Optdef[5],_$_.history.pushState)}
    function _bw_(param)
     {var i=createInput(0,0,document);
      return caml_call1(Optdef[5],i.placeholder)}
    function _bx_(param)
     {var i=createInput(0,0,document);return caml_call1(Optdef[5],i.required)}
    var _by_=2147483e3;
    function _bz_(callback,d)
     {var id=[0,0];
      function loop(d,param)
       {var
         match=2147483e3 < d?[0,_by_,d - 2147483e3]:[0,d,0],
         remain=match[2],
         step=match[1],
         cb=remain == 0?callback:function(_iN_){return loop(remain,_iN_)};
        id[1] = [0,_$_.setTimeout(caml_js_wrap_callback(cb),step)];
        return 0}
      loop(d,0);
      return id}
    function _bA_(id)
     {var _iM_=id[1];
      if(_iM_){var x=_iM_[1];id[1] = 0;return _$_.clearTimeout(x)}
      return 0}
    var
     Dom_html=
      [0,
       d,
       document,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       _$_,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       Event,
       addEventListener,
       removeEventListener,
       addMousewheelEventListener,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0,_bp_,_bl_],
       [0,_bt_],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        _ab_,
        _ad_,
        _ae_,
        _a__,
        _af_,
        _ag_,
        _ah_,
        _ai_,
        _aj_,
        _ak_,
        _al_,
        _am_,
        _an_,
        _ao_,
        _ap_,
        _as_,
        _aq_,
        _ar_,
        _at_,
        _au_,
        _av_,
        _aw_,
        _ax_,
        _ay_,
        _az_,
        _aA_,
        _aB_,
        _aC_,
        _aD_,
        _aE_,
        _aF_,
        _aG_,
        _aH_,
        _aI_,
        _aJ_,
        _aK_,
        _aL_,
        _aM_,
        _aN_,
        _aO_,
        _aP_,
        _aQ_,
        _aR_,
        _aS_,
        _aT_,
        _aU_,
        _aV_,
        _aW_,
        _aX_,
        _aY_,
        _aZ_,
        _a0_,
        _a1_,
        _a2_,
        _a3_,
        _a4_,
        _a5_,
        _a6_,
        _a7_,
        _a8_,
        _a9_,
        _a$_,
        _bb_,
        _bc_,
        _bd_,
        _be_,
        _bf_],
       _bz_,
       _bA_,
       function(c){return [].slice.call(c)},
       _bu_,
       runtime.caml_js_html_entities,
       onIE,
       _bv_,
       _bw_,
       _bx_];
    caml_register_global(1619,Dom_html,"Dom_html");
    var formData=Unsafe[1].FormData,_bB_=Unsafe[1].FormData;
    function _bC_(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,_bC_(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function _bD_(elt)
     {var _iK_=0 < elt.name.length?1:0,_iL_=_iK_?1 - (elt.disabled | 0):_iK_;
      return _iL_}
    function _bE_(get,form)
     {var length=form.elements.length;
      function _iy_(i)
       {var _iJ_=form.elements.item(i);return caml_call1(Opt[10],_iJ_)}
      var
       _iz_=caml_call2(Array[1],length,_iy_),
       elements=caml_call1(Array[10],_iz_);
      function _iA_(param)
       {if(param)
         {var v=param[1],match$3=tagged(v);
          switch(match$3[0])
           {case 31:
             var v$0=match$3[1];
             if(get)var sth=get[1],get$0=sth;else var get$0=0;
             if(_bD_(v$0))
              {var
                name$1=caml_js_to_string(v$0.name),
                value=v$0.value,
                match=caml_js_to_byte_string(v$0.type.toLowerCase());
               if(caml_string_notequal(match,cst_checkbox))
                {if(! caml_string_notequal(match,cst_file))
                  {if(get$0)return [0,[0,name$1,[0,-976970511,value]],0];
                   var match$0=caml_call1(Optdef[10],v$0.files);
                   if(match$0)
                    {var list=match$0[1];
                     if(0 === list.length)
                      return [0,[0,name$1,[0,-976970511,""]],0];
                     var match$1=caml_call1(Optdef[10],v$0.multiple);
                     if(match$1)
                      if(0 !== match$1[1])
                       {var
                         _iF_=function(i){return list.item(i)},
                         _iG_=caml_call2(Array[1],list.length,_iF_),
                         _iH_=caml_call1(Array[10],_iG_);
                        return _bC_
                                (function(f)
                                  {var match=caml_call1(Opt[10],f);
                                   if(match)
                                    {var file=match[1];return [0,[0,name$1,[0,781515420,file]]]}
                                   return 0},
                                 _iH_)}
                     var _iE_=list.item(0),match$2=caml_call1(Opt[10],_iE_);
                     if(match$2)
                      {var file=match$2[1];
                       return [0,[0,name$1,[0,781515420,file]],0]}
                     return 0}
                   return 0}
                 if(caml_string_notequal(match,cst_password))
                  if(caml_string_notequal(match,cst_radio))
                   {if(caml_string_notequal(match,cst_reset))
                     if(caml_string_notequal(match,cst_submit$0))
                      {if(caml_string_notequal(match,cst_text))
                        return [0,[0,name$1,[0,-976970511,value]],0];
                       var switch$0=1,switch$1=0}
                     else
                      var switch$1=1;
                    else
                     var switch$1=1;
                    if(switch$1)return 0}
                  else
                   var switch$0=0;
                 else
                  var switch$0=1;
                 if(switch$0)return [0,[0,name$1,[0,-976970511,value]],0]}
               return v$0.checked | 0?[0,[0,name$1,[0,-976970511,value]],0]:0}
             return 0;
            case 48:
             var v$1=match$3[1];
             if(_bD_(v$1))
              {var name$0=caml_js_to_string(v$1.name);
               if(v$1.multiple | 0)
                {var
                  _iC_=
                   function(i)
                    {var _iI_=v$1.options.item(i);
                     return caml_call1(Opt[10],_iI_)},
                  options=caml_call2(Array[1],v$1.options.length,_iC_),
                  _iD_=caml_call1(Array[10],options);
                 return _bC_
                         (function(param)
                           {if(param)
                             {var e=param[1];
                              return e.selected | 0
                                      ?[0,[0,name$0,[0,-976970511,e.value]]]
                                      :0}
                            return 0},
                          _iD_)}
               return [0,[0,name$0,[0,-976970511,v$1.value]],0]}
             return 0;
            case 53:
             var v$2=match$3[1];
             if(_bD_(v$2))
              {var name=caml_js_to_string(v$2.name);
               return [0,[0,name,[0,-976970511,v$2.value]],0]}
             return 0;
            default:return 0}}
        return 0}
      var
       _iB_=caml_call2(List[12],_iA_,elements),
       contents=caml_call1(List[9],_iB_);
      return contents}
    function _bF_(form_contents,form_elt)
     {if(891486873 <= form_contents[1])
       {var list=form_contents[2];list[1] = [0,form_elt,list[1]];return 0}
      var f=form_contents[2],_iw_=form_elt[2],_ix_=form_elt[1];
      if(781515420 <= _iw_[1])
       {var file=_iw_[2];return f.append(_ix_.toString(),file)}
      var s=_iw_[2];
      return f.append(_ix_.toString(),s)}
    function _bG_(param)
     {var match=caml_call1(Optdef[10],formData);
      if(match){var constr=match[1];return [0,808620462,new constr()]}
      return [0,891486873,[0,0]]}
    function _bH_(form)
     {var contents=_bG_(0),_it_=_bE_(0,form);
      function _iu_(_iv_){return _bF_(contents,_iv_)}
      caml_call2(List[10],_iu_,_it_);
      return contents}
    var
     Form=
      [0,
       formData,
       _bB_,
       _bF_,
       _bH_,
       function(form)
        {var _ip_=_bE_(_bI_,form);
         function _iq_(param)
          {var _ir_=param[2],_is_=param[1];
           if(typeof _ir_ !== "number")
            if(-976970511 === _ir_[1])
             {var s=_ir_[2];return [0,_is_,caml_js_to_string(s)]}
           throw [0,Assert_failure,_bJ_]}
         return caml_call2(List[12],_iq_,_ip_)},
       _bG_,
       _bE_];
    caml_register_global(1620,Form,"Form");
    var
     readystatechange=caml_call1(_R_[1],cst_readystatechange),
     loadstart$1=caml_call1(_R_[1],cst_loadstart$1),
     progress$1=caml_call1(_R_[1],cst_progress$1),
     abort$1=caml_call1(_R_[1],cst_abort$1),
     error$1=caml_call1(_R_[1],cst_error$1),
     load$1=caml_call1(_R_[1],cst_load$1),
     timeout=caml_call1(_R_[1],cst_timeout),
     _bK_=
      [0,
       readystatechange,
       loadstart$1,
       progress$1,
       abort$1,
       error$1,
       load$1,
       timeout,
       caml_call1(_R_[1],cst_loadend$0)],
     XmlHttpRequest=
      [0,
       function(param)
        {var
          xmlHttpRequest=Unsafe[1].XMLHttpRequest,
          activeXObject=Unsafe[1].activeXObject;
         try
          {var _ik_=new xmlHttpRequest();return _ik_}
         catch(_il_)
          {try
            {var _ij_=new activeXObject("Msxml2.XMLHTTP");return _ij_}
           catch(_im_)
            {try
              {var _ii_=new activeXObject("Msxml3.XMLHTTP");return _ii_}
             catch(_in_)
              {try
                {var _ih_=new activeXObject("Microsoft.XMLHTTP");return _ih_}
               catch(_io_){throw [0,Assert_failure,_bL_]}}}}},
       _bK_];
    caml_register_global(1621,XmlHttpRequest,"XmlHttpRequest");
    var _bM_=Unsafe[1].Worker;
    function _bN_(script){return new _bM_(script.toString())}
    function _bO_(scripts)
     {if(Unsafe[1].importScripts === t37)
       caml_call1(Pervasives[1],cst_Worker_import_scripts_is_undefined);
      var
       _if_=caml_call1(Array[11],scripts),
       _ig_=caml_call2(Array[13],caml_js_from_string,_if_);
      return runtime.caml_js_fun_call(Unsafe[1].importScripts,_ig_)}
    function _bP_(handler)
     {if(Unsafe[1].onmessage === t37)
       caml_call1(Pervasives[1],cst_Worker_onmessage_is_undefined);
      function js_handler(ev){return caml_call1(handler,ev.data)}
      return Unsafe[1].onmessage = caml_js_wrap_callback(js_handler)}
    var
     Worker=
      [0,
       _bN_,
       _bO_,
       _bP_,
       function(msg)
        {if(Unsafe[1].postMessage === t37)
          caml_call1(Pervasives[1],cst_Worker_onmessage_is_undefined$0);
         return Unsafe[1].postMessage(msg)}];
    caml_register_global(1622,Worker,"Worker");
    var
     _bQ_=Unsafe[1].WebSocket,
     WebSockets=
      [0,_bQ_,_bQ_,_bQ_,function(param){return caml_call1(Optdef[5],_bQ_)}];
    caml_register_global(1623,WebSockets,"WebSockets");
    var
     defaultContextAttributes=
      {"alpha":true$0,
       "depth":true$0,
       "stencil":false$0,
       "antialias":true$0,
       "premultipliedAlpha":false$0,
       "preserveDrawingBuffer":false$0,
       "preferLowPowerToHighPerformance":false$0,
       "failIfMajorPerformanceCaveat":false$0},
     webglcontextlost=caml_call1(Event[73],cst_webglcontextlost),
     webglcontextrestored=caml_call1(Event[73],cst_webglcontextrestored),
     _bR_=
      [0,
       webglcontextlost,
       webglcontextrestored,
       caml_call1(Event[73],cst_webglcontextcreationerror)];
    function _bS_(c)
     {var ctx=c.getContext("webgl");
      return caml_call1(Opt[5],ctx)?ctx:c.getContext("experimental-webgl")}
    var
     WebGL=
      [0,
       defaultContextAttributes,
       _bR_,
       _bS_,
       function(c,attribs)
        {var ctx=c.getContext("webgl",attribs);
         return caml_call1(Opt[5],ctx)
                 ?ctx
                 :c.getContext("experimental-webgl",attribs)}];
    caml_register_global(1624,WebGL,"WebGL");
    function regexp(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"g")}
    function regexp_case_fold(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"gi")}
    function regexp_with_flag(s,f)
     {var _ie_=caml_call2(Pervasives[16],cst_g,f).toString();
      return new regExp_withFlags(caml_jsbytes_of_string(s),_ie_)}
    function blunt_str_array_get(a,i)
     {function _id_(param){throw [0,Assert_failure,_bT_]}
      return caml_js_to_byte_string(caml_call2(Optdef[8],a[i],_id_))}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var
       _ib_=r.exec(caml_jsbytes_of_string(s)),
       _ic_=caml_call2(Opt[3],_ib_,match_result);
      return caml_call1(Opt[10],_ic_)}
    function search_forward(r,s,i)
     {r.lastIndex = i;
      function _h__(res){return [0,res.index,res]}
      var
       _h$_=r.exec(caml_jsbytes_of_string(s)),
       _ia_=caml_call2(Opt[3],_h$_,_h__);
      return caml_call1(Opt[10],_ia_)}
    function matched_string(r){return blunt_str_array_get(r,0)}
    function matched_group(r,i)
     {var _h9_=caml_call2(Optdef[3],r[i],caml_js_to_byte_string);
      return caml_call1(Optdef[10],_h9_)}
    var quote_repl_re=new regExp_withFlags("[$]","g");
    function quote_repl(s)
     {return caml_jsbytes_of_string(s).replace(quote_repl_re,"$$$$")}
    function global_replace(r,s,s_by)
     {r.lastIndex = 0;
      var _h8_=quote_repl(s_by);
      return caml_js_to_byte_string(caml_jsbytes_of_string(s).replace(r,_h8_))}
    function replace_first(r,s,s_by)
     {var
       match=r.ignoreCase | 0,
       match$0=r.multiline | 0,
       flags=0 === match?0 === match$0?"":"m":0 === match$0?"i":"mi",
       r$0=new regExp_withFlags(r.source,flags),
       _h7_=quote_repl(s_by);
      return caml_js_to_byte_string
              (caml_jsbytes_of_string(s).replace(r$0,_h7_))}
    function list_of_js_array(a)
     {var idx$1=a.length - 1 | 0,accu=0,idx=idx$1;
      for(;;)
       {if(0 <= idx)
         {var
           idx$0=idx - 1 | 0,
           accu$0=[0,blunt_str_array_get(a,idx),accu],
           accu=accu$0,
           idx=idx$0;
          continue}
        return accu}}
    function split(r,s)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r))}
    function bounded_split(r,s,i)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r,i))}
    var _bU_=regexp(cst);
    function _bV_(s)
     {return caml_js_to_byte_string
              (caml_jsbytes_of_string(s).replace(_bU_,"\\$&"))}
    function _bW_(s){return regexp(_bV_(s))}
    var
     Regexp=
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       _bV_,
       _bW_,
       function(s){return regexp_case_fold(_bV_(s))},
       string_match,
       search_forward,
       search_forward,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
    caml_register_global(1625,Regexp,"Regexp");
    var Local_exn=caml_set_oo_id([248,cst_Url_Local_exn,0]);
    function interrupt(param){throw Local_exn}
    var plus_re=_bW_(cst$0),plus_re_js_string=new regExp_withFlags("\\+","g");
    function urldecode_js_string_string(s)
     {plus_re_js_string.lastIndex = 0;
      return caml_js_to_byte_string
              (unescape(s.replace(plus_re_js_string," ")))}
    function urldecode(s)
     {return caml_js_to_byte_string
              (unescape
                (caml_jsbytes_of_string(global_replace(plus_re,s,cst$1))))}
    function urlencode(opt,s)
     {if(opt)var sth=opt[1],with_plus=sth;else var with_plus=1;
      if(with_plus)
       {var s$0=caml_js_to_byte_string(escape(caml_jsbytes_of_string(s)));
        return global_replace(plus_re,s$0,cst_2B)}
      return caml_js_to_byte_string(escape(caml_jsbytes_of_string(s)))}
    var
     Not_an_http_protocol=caml_set_oo_id([248,cst_Url_Not_an_http_protocol,0]),
     default_http_port=80,
     default_https_port=443;
    function path_of_path_string(s)
     {var l=caml_ml_string_length(s);
      function aux(i)
       {try
         {var _h5_=caml_call3(String[16],s,i,47),j=_h5_}
        catch(_h6_)
         {_h6_ = caml_wrap_exception(_h6_);
          if(_h6_ !== Not_found)throw _h6_;
          var j=l}
        var word=caml_call3(String[4],s,i,j - i | 0);
        return l <= j?[0,word,0]:[0,word,aux(j + 1 | 0)]}
      var a=aux(0);
      if(a)
       if(! caml_string_notequal(a[1],cst$2))
        {var _h4_=a[2];
         if(! _h4_)return 0;
         if(! caml_string_notequal(_h4_[1],cst$3))if(! _h4_[2])return _bX_}
      return a}
    function encode_arguments(l)
     {function _hZ_(param)
       {var
         v=param[2],
         n=param[1],
         _h1_=urlencode(0,v),
         _h2_=caml_call2(Pervasives[16],cst$4,_h1_),
         _h3_=urlencode(0,n);
        return caml_call2(Pervasives[16],_h3_,_h2_)}
      var _h0_=caml_call2(List[12],_hZ_,l);
      return caml_call2(String[7],cst$5,_h0_)}
    function decode_arguments_js_string(s)
     {var arr=s.split(caml_call2(String[1],1,38).toString()),len=arr.length;
      function aux(acc,idx)
       {var idx$0=idx;
        for(;;)
         {if(0 <= idx$0)
           try
            {var
              _hR_=idx$0 - 1 | 0,
              _hS_=
               function(s)
                {function _hX_(param)
                  {var
                    y=param[2],
                    x=param[1],
                    _hY_=urldecode_js_string_string(y);
                   return [0,urldecode_js_string_string(x),_hY_]}
                 var index=s.indexOf(caml_call2(String[1],1,61).toString());
                 if(0 <= index)
                  var
                   _hV_=s.slice(index + 1 | 0),
                   _hW_=[0,s.slice(0,index),_hV_];
                 else
                  var _hW_=t37;
                 return caml_call3(Optdef[7],_hW_,interrupt,_hX_)},
              _hT_=
               aux
                ([0,caml_call3(Optdef[7],arr[idx$0],interrupt,_hS_),acc],_hR_);
             return _hT_}
           catch(_hU_)
            {_hU_ = caml_wrap_exception(_hU_);
             if(_hU_ === Local_exn)
              {var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
             throw _hU_}
          return acc}}
      return aux(0,len - 1 | 0)}
    function decode_arguments(s)
     {return decode_arguments_js_string(caml_jsbytes_of_string(s))}
    var
     url_re=
      new
       regExp_withFlags
       (caml_jsbytes_of_string
         (cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0_9a_zA_Z_0_9A_Fa_f_0_9)),
     file_re=new regExp_withFlags(caml_jsbytes_of_string(cst_Ff_Ii_Ll_Ee));
    function url_of_js_string(s)
     {function _hy_(res)
       {var
         prot_string=caml_call2(Optdef[8],res[1],interrupt),
         match=caml_js_to_byte_string(prot_string.toLowerCase());
        if(caml_string_notequal(match,cst_file$0))
         if(caml_string_notequal(match,cst_file$1))
          {if(caml_string_notequal(match,cst_http))
            if(caml_string_notequal(match,cst_http$0))
             {if(caml_string_notequal(match,cst_https))
               if(caml_string_notequal(match,cst_https$0))
                var switch$0=1,switch$1=0;
               else
                var switch$1=1;
              else
               var switch$1=1;
              if(switch$1)var ssl=1,switch$0=2}
            else
             var switch$0=0;
           else
            var switch$0=0;
           switch(switch$0)
            {case 0:var ssl=0,switch$2=1;break;
             case 1:var switch$2=0;break;
             default:var switch$2=1}
           if(switch$2)
            {var
              _hI_=function(param){return caml_jsbytes_of_string(cst$7)},
              path_str=
               urldecode_js_string_string(caml_call2(Optdef[8],res[6],_hI_)),
              _hJ_=function(param){return caml_jsbytes_of_string(cst$8)},
              _hK_=
               urldecode_js_string_string(caml_call2(Optdef[8],res[10],_hJ_)),
              _hL_=function(param){return caml_jsbytes_of_string(cst$9)},
              _hM_=
               decode_arguments_js_string(caml_call2(Optdef[8],res[8],_hL_)),
              _hN_=path_of_path_string(path_str),
              _hO_=function(param){return caml_jsbytes_of_string(cst$10)},
              s=caml_js_to_byte_string(caml_call2(Optdef[8],res[4],_hO_)),
              _hP_=
               caml_string_notequal(s,cst$6)?caml_int_of_string(s):ssl?443:80,
              url=
               [0,
                urldecode_js_string_string
                 (caml_call2(Optdef[8],res[2],interrupt)),
                _hP_,
                _hN_,
                path_str,
                _hM_,
                _hK_],
              _hQ_=ssl?[1,url]:[0,url];
             return [0,_hQ_]}}
        throw Not_an_http_protocol}
      function _hz_(param)
       {function _hB_(res)
         {var
           path_str=
            urldecode_js_string_string(caml_call2(Optdef[8],res[2],interrupt));
          function _hE_(param){return caml_jsbytes_of_string(cst$11)}
          var _hF_=caml_js_to_byte_string(caml_call2(Optdef[8],res[6],_hE_));
          function _hG_(param){return caml_jsbytes_of_string(cst$12)}
          var
           _hH_=
            decode_arguments_js_string(caml_call2(Optdef[8],res[4],_hG_));
          return [0,[2,[0,path_of_path_string(path_str),path_str,_hH_,_hF_]]]}
        function _hC_(param){return 0}
        var _hD_=file_re.exec(s);
        return caml_call3(Opt[7],_hD_,_hC_,_hB_)}
      var _hA_=url_re.exec(s);
      return caml_call3(Opt[7],_hA_,_hz_,_hy_)}
    function url_of_string(s)
     {return url_of_js_string(caml_jsbytes_of_string(s))}
    function string_of_url(param)
     {switch(param[0])
       {case 0:
         var
          match=param[1],
          frag=match[6],
          args=match[5],
          path=match[3],
          port=match[2],
          host=match[1];
         if(caml_string_notequal(frag,cst$13))
          var
           _gX_=urlencode(0,frag),
           _gY_=caml_call2(Pervasives[16],cst$14,_gX_);
         else
          var _gY_=cst$21;
         if(args)
          var
           _gZ_=encode_arguments(args),
           _g0_=caml_call2(Pervasives[16],cst$15,_gZ_);
         else
          var _g0_=cst$20;
         var
          _g1_=caml_call2(Pervasives[16],_g0_,_gY_),
          _g2_=function(x){return urlencode(0,x)},
          _g3_=caml_call2(List[12],_g2_,path),
          _g4_=caml_call2(String[7],cst$16,_g3_),
          _g5_=caml_call2(Pervasives[16],_g4_,_g1_),
          _g6_=caml_call2(Pervasives[16],cst$17,_g5_);
         if(80 === port)
          var _g7_=cst$18;
         else
          var
           _g$_=caml_call1(Pervasives[20],port),
           _g7_=caml_call2(Pervasives[16],cst$19,_g$_);
         var
          _g8_=caml_call2(Pervasives[16],_g7_,_g6_),
          _g9_=urlencode(0,host),
          _g__=caml_call2(Pervasives[16],_g9_,_g8_);
         return caml_call2(Pervasives[16],cst_http$1,_g__);
        case 1:
         var
          match$0=param[1],
          frag$0=match$0[6],
          args$0=match$0[5],
          path$0=match$0[3],
          port$0=match$0[2],
          host$0=match$0[1];
         if(caml_string_notequal(frag$0,cst$22))
          var
           _ha_=urlencode(0,frag$0),
           _hb_=caml_call2(Pervasives[16],cst$23,_ha_);
         else
          var _hb_=cst$30;
         if(args$0)
          var
           _hc_=encode_arguments(args$0),
           _hd_=caml_call2(Pervasives[16],cst$24,_hc_);
         else
          var _hd_=cst$29;
         var
          _he_=caml_call2(Pervasives[16],_hd_,_hb_),
          _hf_=function(x){return urlencode(0,x)},
          _hg_=caml_call2(List[12],_hf_,path$0),
          _hh_=caml_call2(String[7],cst$25,_hg_),
          _hi_=caml_call2(Pervasives[16],_hh_,_he_),
          _hj_=caml_call2(Pervasives[16],cst$26,_hi_);
         if(443 === port$0)
          var _hk_=cst$27;
         else
          var
           _ho_=caml_call1(Pervasives[20],port$0),
           _hk_=caml_call2(Pervasives[16],cst$28,_ho_);
         var
          _hl_=caml_call2(Pervasives[16],_hk_,_hj_),
          _hm_=urlencode(0,host$0),
          _hn_=caml_call2(Pervasives[16],_hm_,_hl_);
         return caml_call2(Pervasives[16],cst_https$1,_hn_);
        default:
         var
          match$1=param[1],
          frag$1=match$1[4],
          args$1=match$1[3],
          path$1=match$1[1];
         if(caml_string_notequal(frag$1,cst$31))
          var
           _hp_=urlencode(0,frag$1),
           _hq_=caml_call2(Pervasives[16],cst$32,_hp_);
         else
          var _hq_=cst$36;
         if(args$1)
          var
           _hr_=encode_arguments(args$1),
           _hs_=caml_call2(Pervasives[16],cst$33,_hr_);
         else
          var _hs_=cst$35;
         var
          _ht_=caml_call2(Pervasives[16],_hs_,_hq_),
          _hu_=function(x){return urlencode(0,x)},
          _hv_=caml_call2(List[12],_hu_,path$1),
          _hw_=caml_call2(String[7],cst$34,_hv_),
          _hx_=caml_call2(Pervasives[16],_hw_,_ht_);
         return caml_call2(Pervasives[16],cst_file$2,_hx_)}}
    var _bY_=caml_call1(Optdef[2],_$_.location);
    if(caml_call1(Optdef[5],_bY_))
     var _bZ_=_$_.location;
    else
     var
      t29="",
      t40=function(param,_gW_){return 0},
      t39=function(param,_gV_){return 0},
      t38=function(param){return 0},
      _bZ_=
       {"href":t29,
        "protocol":t29,
        "host":t29,
        "hostname":t29,
        "port":t29,
        "pathname":t29,
        "search":t29,
        "hash":t29,
        "origin":t37,
        "reload":caml_js_wrap_meth_callback(t38),
        "replace":caml_js_wrap_meth_callback(t39),
        "assign":caml_js_wrap_meth_callback(t40)};
    var
     host=urldecode_js_string_string(_bZ_.hostname),
     protocol=urldecode_js_string_string(_bZ_.protocol),
     _b0_=0,
     port=
      function(param)
        {try
          {var _gT_=[0,caml_int_of_string(caml_js_to_byte_string(_bZ_.port))];
           return _gT_}
         catch(_gU_)
          {_gU_ = caml_wrap_exception(_gU_);
           if(_gU_[1] === Failure)return 0;
           throw _gU_}}
       (_b0_),
     path_string=urldecode_js_string_string(_bZ_.pathname),
     path=path_of_path_string(path_string),
     _b1_=_bZ_.search.charAt(0) === "?"?_bZ_.search.slice(1):_bZ_.search,
     arguments$0=decode_arguments_js_string(_b1_);
    function get_fragment(param)
     {function _gP_(res){return caml_js_to_string(res[1])}
      function _gQ_(param){return cst$37}
      var _gR_=new regExp_withFlags("#(.*)"),_gS_=_bZ_.href.match(_gR_);
      return caml_call3(Opt[7],_gS_,_gQ_,_gP_)}
    function set_fragment(s)
     {return _bZ_.hash = caml_jsbytes_of_string(urlencode(0,s))}
    function get$0(param){return url_of_js_string(_bZ_.href)}
    function set$0(u)
     {return _bZ_.href = caml_jsbytes_of_string(string_of_url(u))}
    var
     Url=
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get$0,
        set$0,
        urldecode_js_string_string(_bZ_.href)]];
    caml_register_global(1629,Url,"Url");
    var Lib_version=[0,cst_3_2_0,cst$38];
    caml_register_global(1630,Lib_version,"Lib_version");
    function update_file(name,content)
     {var oc=caml_call1(Pervasives[43],name);
      caml_call2(Pervasives[49],oc,content);
      return caml_call1(Pervasives[59],oc)}
    function set_channel_flusher(out_channel,f)
     {var
       f$0=
        caml_js_wrap_callback
         (function(s){return caml_call1(f,caml_js_to_string(s))});
      return runtime.caml_ml_set_channel_output(out_channel,f$0)}
    function set_channel_filler(in_channel,f)
     {var f$0=caml_js_wrap_callback(f);
      return runtime.caml_ml_set_channel_refill(in_channel,f$0)}
    function mount(path,f)
     {return runtime.caml_mount_autoload
              (path,
               caml_js_wrap_callback
                (function(prefix,path){return caml_call2(f,prefix,path)}))}
    var
     unmount=runtime.caml_unmount,
     _b2_=runtime.caml_create_file,
     _b3_=runtime.caml_read_file_content,
     Sys_js=
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_gO_){return runtime.caml_list_mount_point(_gO_)},
       unmount,
       mount,
       _b3_,
       _b2_,
       update_file,
       cst_3_2_0];
    caml_register_global(1631,Sys_js,"Sys_js");
    function empty_mutation_observer_init(param){return {}}
    var _b4_=Unsafe[1].MutationObserver;
    function _b5_(param){return caml_call1(Optdef[5],_b4_)}
    var
     MutationObserver=
      [0,
       empty_mutation_observer_init,
       _b4_,
       _b5_,
       function
        (node,
         f,
         child_list,
         attributes,
         character_data,
         subtree,
         attribute_old_value,
         character_data_old_value,
         attribute_filter,
         param)
        {function opt_iter(x,f)
          {if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
         var obs=new _b4_(caml_js_wrap_callback(f)),cfg={};
         opt_iter(child_list,function(v){return cfg.childList = v});
         opt_iter(attributes,function(v){return cfg.attributes = v});
         opt_iter(character_data,function(v){return cfg.characterData = v});
         opt_iter(subtree,function(v){return cfg.subtree = v});
         opt_iter
          (attribute_old_value,function(v){return cfg.attributeOldValue = v});
         opt_iter
          (character_data_old_value,
           function(v){return cfg.characterDataOldValue = v});
         opt_iter
          (attribute_filter,
           function(l)
            {return cfg.attributeFilter
                    =
                    caml_js_from_array(caml_call1(Array[11],l))});
         obs.observe(node,cfg);
         return obs}];
    caml_register_global(1632,MutationObserver,"MutationObserver");
    var _b6_=Unsafe[1].Object;
    function _b7_(param){return new _b6_()}
    function _b8_(t,k,v){return t[k.concat("_")] = v}
    function _b9_(t,k){return delete t[k.concat("_")]}
    function _b__(t,k){return t[k.concat("_")]}
    var
     Jstable=
      [0,
       _b7_,
       _b8_,
       _b9_,
       _b__,
       function(t)
        {var
          key_array=Unsafe[1].Object.keys(t),
          res=[0,0],
          _gK_=key_array.length - 1 | 0,
          _gJ_=0;
         if(! (_gK_ < 0))
          {var i=_gJ_;
           for(;;)
            {var
              _gL_=
               function(param)
                {return caml_call1(Pervasives[2],cst_Jstable_keys)},
              key=caml_call2(Optdef[8],key_array[i],_gL_),
              _gM_=res[1];
             res[1] = [0,key.substring(0,key.length - 1 | 0),_gM_];
             var _gN_=i + 1 | 0;
             if(_gK_ !== i){var i=_gN_;continue}
             break}}
         return caml_call1(List[5],res[1])}];
    caml_register_global(1633,Jstable,"Jstable");
    var json=runtime.caml_json(0);
    function reviver(this$0,key,value)
     {return typeof value == typeof "foo"?caml_js_to_byte_string(value):value}
    var input_reviver=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(s){return json.parse(s,input_reviver)}
    var _b$_=dummy_string.constructor;
    function _ca_(key,value)
     {return value instanceof _b$_?caml_jsbytes_of_string(value):value}
    var Json=[0,function(obj){return json.stringify(obj,_ca_)},unsafe_input];
    caml_register_global(1634,Json,"Json");
    function _cb_(param)
     {var _gI_=param;
      if(74 <= _gI_)
       {if(111 <= _gI_)
         switch(_gI_)
          {case 111:return cst_palevioletred;
           case 112:return cst_papayawhip;
           case 113:return cst_peachpuff;
           case 114:return cst_peru;
           case 115:return cst_pink;
           case 116:return cst_plum;
           case 117:return cst_powderblue;
           case 118:return cst_purple;
           case 119:return cst_red;
           case 120:return cst_rosybrown;
           case 121:return cst_royalblue;
           case 122:return cst_saddlebrown;
           case 123:return cst_salmon;
           case 124:return cst_sandybrown;
           case 125:return cst_seagreen;
           case 126:return cst_seashell;
           case 127:return cst_sienna;
           case 128:return cst_silver;
           case 129:return cst_skyblue;
           case 130:return cst_slateblue;
           case 131:return cst_slategray;
           case 132:return cst_slategrey;
           case 133:return cst_snow;
           case 134:return cst_springgreen;
           case 135:return cst_steelblue;
           case 136:return cst_tan;
           case 137:return cst_teal;
           case 138:return cst_thistle;
           case 139:return cst_tomato;
           case 140:return cst_turquoise;
           case 141:return cst_violet;
           case 142:return cst_wheat;
           case 143:return cst_white;
           case 144:return cst_whitesmoke;
           case 145:return cst_yellow;
           default:return cst_yellowgreen}
        switch(_gI_)
         {case 74:return cst_lightpink;
          case 75:return cst_lightsalmon;
          case 76:return cst_lightseagreen;
          case 77:return cst_lightskyblue;
          case 78:return cst_lightslategray;
          case 79:return cst_lightslategrey;
          case 80:return cst_lightsteelblue;
          case 81:return cst_lightyellow;
          case 82:return cst_lime;
          case 83:return cst_limegreen;
          case 84:return cst_linen;
          case 85:return cst_magenta;
          case 86:return cst_maroon;
          case 87:return cst_mediumaquamarine;
          case 88:return cst_mediumblue;
          case 89:return cst_mediumorchid;
          case 90:return cst_mediumpurple;
          case 91:return cst_mediumseagreen;
          case 92:return cst_mediumslateblue;
          case 93:return cst_mediumspringgreen;
          case 94:return cst_mediumturquoise;
          case 95:return cst_mediumvioletred;
          case 96:return cst_midnightblue;
          case 97:return cst_mintcream;
          case 98:return cst_mistyrose;
          case 99:return cst_moccasin;
          case 100:return cst_navajowhite;
          case 101:return cst_navy;
          case 102:return cst_oldlace;
          case 103:return cst_olive;
          case 104:return cst_olivedrab;
          case 105:return cst_orange;
          case 106:return cst_orangered;
          case 107:return cst_orchid;
          case 108:return cst_palegoldenrod;
          case 109:return cst_palegreen;
          default:return cst_paleturquoise}}
      if(37 <= _gI_)
       switch(_gI_)
        {case 37:return cst_darkslategrey;
         case 38:return cst_darkturquoise;
         case 39:return cst_darkviolet;
         case 40:return cst_deeppink;
         case 41:return cst_deepskyblue;
         case 42:return cst_dimgray;
         case 43:return cst_dimgrey;
         case 44:return cst_dodgerblue;
         case 45:return cst_firebrick;
         case 46:return cst_floralwhite;
         case 47:return cst_forestgreen;
         case 48:return cst_fuchsia;
         case 49:return cst_gainsboro;
         case 50:return cst_ghostwhite;
         case 51:return cst_gold;
         case 52:return cst_goldenrod;
         case 53:return cst_gray;
         case 54:return cst_grey;
         case 55:return cst_green;
         case 56:return cst_greenyellow;
         case 57:return cst_honeydew;
         case 58:return cst_hotpink;
         case 59:return cst_indianred;
         case 60:return cst_indigo;
         case 61:return cst_ivory;
         case 62:return cst_khaki;
         case 63:return cst_lavender;
         case 64:return cst_lavenderblush;
         case 65:return cst_lawngreen;
         case 66:return cst_lemonchiffon;
         case 67:return cst_lightblue;
         case 68:return cst_lightcoral;
         case 69:return cst_lightcyan;
         case 70:return cst_lightgoldenrodyellow;
         case 71:return cst_lightgray;
         case 72:return cst_lightgreen;
         default:return cst_lightgrey}
      switch(_gI_)
       {case 0:return cst_aliceblue;
        case 1:return cst_antiquewhite;
        case 2:return cst_aqua;
        case 3:return cst_aquamarine;
        case 4:return cst_azure;
        case 5:return cst_beige;
        case 6:return cst_bisque;
        case 7:return cst_black;
        case 8:return cst_blanchedalmond;
        case 9:return cst_blue;
        case 10:return cst_blueviolet;
        case 11:return cst_brown;
        case 12:return cst_burlywood;
        case 13:return cst_cadetblue;
        case 14:return cst_chartreuse;
        case 15:return cst_chocolate;
        case 16:return cst_coral;
        case 17:return cst_cornflowerblue;
        case 18:return cst_cornsilk;
        case 19:return cst_crimson;
        case 20:return cst_cyan;
        case 21:return cst_darkblue;
        case 22:return cst_darkcyan;
        case 23:return cst_darkgoldenrod;
        case 24:return cst_darkgray;
        case 25:return cst_darkgreen;
        case 26:return cst_darkgrey;
        case 27:return cst_darkkhaki;
        case 28:return cst_darkmagenta;
        case 29:return cst_darkolivegreen;
        case 30:return cst_darkorange;
        case 31:return cst_darkorchid;
        case 32:return cst_darkred;
        case 33:return cst_darksalmon;
        case 34:return cst_darkseagreen;
        case 35:return cst_darkslateblue;
        default:return cst_darkslategray}}
    function _cc_(s)
     {var switch$0=caml_string_compare(s,cst_lightgrey$0);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 73;
        var switch$1=caml_string_compare(s,cst_paleturquoise$0);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 110;
          var switch$2=caml_string_compare(s,cst_skyblue$0);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 129;
            var switch$3=caml_string_compare(s,cst_thistle$0);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 138;
              if(! caml_string_notequal(s,cst_tomato$0))return 139;
              if(! caml_string_notequal(s,cst_turquoise$0))return 140;
              if(! caml_string_notequal(s,cst_violet$0))return 141;
              if(! caml_string_notequal(s,cst_wheat$0))return 142;
              if(! caml_string_notequal(s,cst_white$0))return 143;
              if(! caml_string_notequal(s,cst_whitesmoke$0))return 144;
              if(! caml_string_notequal(s,cst_yellow$0))return 145;
              if(! caml_string_notequal(s,cst_yellowgreen$0))return 146}
            else
             {if(! caml_string_notequal(s,cst_slateblue$0))return 130;
              if(! caml_string_notequal(s,cst_slategray$0))return 131;
              if(! caml_string_notequal(s,cst_slategrey$0))return 132;
              if(! caml_string_notequal(s,cst_snow$0))return 133;
              if(! caml_string_notequal(s,cst_springgreen$0))return 134;
              if(! caml_string_notequal(s,cst_steelblue$0))return 135;
              if(! caml_string_notequal(s,cst_tan$0))return 136;
              if(! caml_string_notequal(s,cst_teal$0))return 137}}
          else
           {var switch$4=caml_string_compare(s,cst_rosybrown$0);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 120;
              if(! caml_string_notequal(s,cst_royalblue$0))return 121;
              if(! caml_string_notequal(s,cst_saddlebrown$0))return 122;
              if(! caml_string_notequal(s,cst_salmon$0))return 123;
              if(! caml_string_notequal(s,cst_sandybrown$0))return 124;
              if(! caml_string_notequal(s,cst_seagreen$0))return 125;
              if(! caml_string_notequal(s,cst_seashell$0))return 126;
              if(! caml_string_notequal(s,cst_sienna$0))return 127;
              if(! caml_string_notequal(s,cst_silver$0))return 128}
            else
             {if(! caml_string_notequal(s,cst_palevioletred$0))return 111;
              if(! caml_string_notequal(s,cst_papayawhip$0))return 112;
              if(! caml_string_notequal(s,cst_peachpuff$0))return 113;
              if(! caml_string_notequal(s,cst_peru$0))return 114;
              if(! caml_string_notequal(s,cst_pink$0))return 115;
              if(! caml_string_notequal(s,cst_plum$0))return 116;
              if(! caml_string_notequal(s,cst_powderblue$0))return 117;
              if(! caml_string_notequal(s,cst_purple$0))return 118;
              if(! caml_string_notequal(s,cst_red$0))return 119}}}
        else
         {var switch$5=caml_string_compare(s,cst_mediumslateblue$0);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 92;
            var switch$6=caml_string_compare(s,cst_navy$0);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 101;
              if(! caml_string_notequal(s,cst_oldlace$0))return 102;
              if(! caml_string_notequal(s,cst_olive$0))return 103;
              if(! caml_string_notequal(s,cst_olivedrab$0))return 104;
              if(! caml_string_notequal(s,cst_orange$0))return 105;
              if(! caml_string_notequal(s,cst_orangered$0))return 106;
              if(! caml_string_notequal(s,cst_orchid$0))return 107;
              if(! caml_string_notequal(s,cst_palegoldenrod$0))return 108;
              if(! caml_string_notequal(s,cst_palegreen$0))return 109}
            else
             {if(! caml_string_notequal(s,cst_mediumspringgreen$0))return 93;
              if(! caml_string_notequal(s,cst_mediumturquoise$0))return 94;
              if(! caml_string_notequal(s,cst_mediumvioletred$0))return 95;
              if(! caml_string_notequal(s,cst_midnightblue$0))return 96;
              if(! caml_string_notequal(s,cst_mintcream$0))return 97;
              if(! caml_string_notequal(s,cst_mistyrose$0))return 98;
              if(! caml_string_notequal(s,cst_moccasin$0))return 99;
              if(! caml_string_notequal(s,cst_navajowhite$0))return 100}}
          else
           {var switch$7=caml_string_compare(s,cst_limegreen$0);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 83;
              if(! caml_string_notequal(s,cst_linen$0))return 84;
              if(! caml_string_notequal(s,cst_magenta$0))return 85;
              if(! caml_string_notequal(s,cst_maroon$0))return 86;
              if(! caml_string_notequal(s,cst_mediumaquamarine$0))return 87;
              if(! caml_string_notequal(s,cst_mediumblue$0))return 88;
              if(! caml_string_notequal(s,cst_mediumorchid$0))return 89;
              if(! caml_string_notequal(s,cst_mediumpurple$0))return 90;
              if(! caml_string_notequal(s,cst_mediumseagreen$0))return 91}
            else
             {if(! caml_string_notequal(s,cst_lightpink$0))return 74;
              if(! caml_string_notequal(s,cst_lightsalmon$0))return 75;
              if(! caml_string_notequal(s,cst_lightseagreen$0))return 76;
              if(! caml_string_notequal(s,cst_lightskyblue$0))return 77;
              if(! caml_string_notequal(s,cst_lightslategray$0))return 78;
              if(! caml_string_notequal(s,cst_lightslategrey$0))return 79;
              if(! caml_string_notequal(s,cst_lightsteelblue$0))return 80;
              if(! caml_string_notequal(s,cst_lightyellow$0))return 81;
              if(! caml_string_notequal(s,cst_lime$0))return 82}}}}
      else
       {var switch$8=caml_string_compare(s,cst_darkslategray$0);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 36;
          var switch$9=caml_string_compare(s,cst_greenyellow$0);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 56;
            var switch$10=caml_string_compare(s,cst_lavenderblush$0);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 64;
              if(! caml_string_notequal(s,cst_lawngreen$0))return 65;
              if(! caml_string_notequal(s,cst_lemonchiffon$0))return 66;
              if(! caml_string_notequal(s,cst_lightblue$0))return 67;
              if(! caml_string_notequal(s,cst_lightcoral$0))return 68;
              if(! caml_string_notequal(s,cst_lightcyan$0))return 69;
              if(! caml_string_notequal(s,cst_lightgoldenrodyellow$0))
               return 70;
              if(! caml_string_notequal(s,cst_lightgray$0))return 71;
              if(! caml_string_notequal(s,cst_lightgreen$0))return 72}
            else
             {if(! caml_string_notequal(s,cst_grey$0))return 54;
              if(! caml_string_notequal(s,cst_honeydew$0))return 57;
              if(! caml_string_notequal(s,cst_hotpink$0))return 58;
              if(! caml_string_notequal(s,cst_indianred$0))return 59;
              if(! caml_string_notequal(s,cst_indigo$0))return 60;
              if(! caml_string_notequal(s,cst_ivory$0))return 61;
              if(! caml_string_notequal(s,cst_khaki$0))return 62;
              if(! caml_string_notequal(s,cst_lavender$0))return 63}}
          else
           {var switch$11=caml_string_compare(s,cst_floralwhite$0);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 46;
              if(! caml_string_notequal(s,cst_forestgreen$0))return 47;
              if(! caml_string_notequal(s,cst_fuchsia$0))return 48;
              if(! caml_string_notequal(s,cst_gainsboro$0))return 49;
              if(! caml_string_notequal(s,cst_ghostwhite$0))return 50;
              if(! caml_string_notequal(s,cst_gold$0))return 51;
              if(! caml_string_notequal(s,cst_goldenrod$0))return 52;
              if(! caml_string_notequal(s,cst_gray$0))return 53;
              if(! caml_string_notequal(s,cst_green$0))return 55}
            else
             {if(! caml_string_notequal(s,cst_darkslategrey$0))return 37;
              if(! caml_string_notequal(s,cst_darkturquoise$0))return 38;
              if(! caml_string_notequal(s,cst_darkviolet$0))return 39;
              if(! caml_string_notequal(s,cst_deeppink$0))return 40;
              if(! caml_string_notequal(s,cst_deepskyblue$0))return 41;
              if(! caml_string_notequal(s,cst_dimgray$0))return 42;
              if(! caml_string_notequal(s,cst_dimgrey$0))return 43;
              if(! caml_string_notequal(s,cst_dodgerblue$0))return 44;
              if(! caml_string_notequal(s,cst_firebrick$0))return 45}}}
        else
         {var switch$12=caml_string_compare(s,cst_cornsilk$0);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 18;
            var switch$13=caml_string_compare(s,cst_darkkhaki$0);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 27;
              if(! caml_string_notequal(s,cst_darkmagenta$0))return 28;
              if(! caml_string_notequal(s,cst_darkolivegreen$0))return 29;
              if(! caml_string_notequal(s,cst_darkorange$0))return 30;
              if(! caml_string_notequal(s,cst_darkorchid$0))return 31;
              if(! caml_string_notequal(s,cst_darkred$0))return 32;
              if(! caml_string_notequal(s,cst_darksalmon$0))return 33;
              if(! caml_string_notequal(s,cst_darkseagreen$0))return 34;
              if(! caml_string_notequal(s,cst_darkslateblue$0))return 35}
            else
             {if(! caml_string_notequal(s,cst_crimson$0))return 19;
              if(! caml_string_notequal(s,cst_cyan$0))return 20;
              if(! caml_string_notequal(s,cst_darkblue$0))return 21;
              if(! caml_string_notequal(s,cst_darkcyan$0))return 22;
              if(! caml_string_notequal(s,cst_darkgoldenrod$0))return 23;
              if(! caml_string_notequal(s,cst_darkgray$0))return 24;
              if(! caml_string_notequal(s,cst_darkgreen$0))return 25;
              if(! caml_string_notequal(s,cst_darkgrey$0))return 26}}
          else
           {var switch$14=caml_string_compare(s,cst_blue$0);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 9;
              if(! caml_string_notequal(s,cst_blueviolet$0))return 10;
              if(! caml_string_notequal(s,cst_brown$0))return 11;
              if(! caml_string_notequal(s,cst_burlywood$0))return 12;
              if(! caml_string_notequal(s,cst_cadetblue$0))return 13;
              if(! caml_string_notequal(s,cst_chartreuse$0))return 14;
              if(! caml_string_notequal(s,cst_chocolate$0))return 15;
              if(! caml_string_notequal(s,cst_coral$0))return 16;
              if(! caml_string_notequal(s,cst_cornflowerblue$0))return 17}
            else
             {if(! caml_string_notequal(s,cst_aliceblue$0))return 0;
              if(! caml_string_notequal(s,cst_antiquewhite$0))return 1;
              if(! caml_string_notequal(s,cst_aqua$0))return 2;
              if(! caml_string_notequal(s,cst_aquamarine$0))return 3;
              if(! caml_string_notequal(s,cst_azure$0))return 4;
              if(! caml_string_notequal(s,cst_beige$0))return 5;
              if(! caml_string_notequal(s,cst_bisque$0))return 6;
              if(! caml_string_notequal(s,cst_black$0))return 7;
              if(! caml_string_notequal(s,cst_blanchedalmond$0))return 8}}}}
      throw [0,
             Invalid_argument,
             caml_call2(Pervasives[16],s,cst_is_not_a_valid_color_name)]}
    function _cd_(param)
     {var _gH_=param;
      if(74 <= _gH_)
       {if(111 <= _gH_)
         switch(_gH_)
          {case 111:return _dZ_;
           case 112:return _d0_;
           case 113:return _d1_;
           case 114:return _d2_;
           case 115:return _d3_;
           case 116:return _d4_;
           case 117:return _d5_;
           case 118:return _d6_;
           case 119:return _d7_;
           case 120:return _d8_;
           case 121:return _d9_;
           case 122:return _d__;
           case 123:return _d$_;
           case 124:return _ea_;
           case 125:return _eb_;
           case 126:return _ec_;
           case 127:return _ed_;
           case 128:return _ee_;
           case 129:return _ef_;
           case 130:return _eg_;
           case 131:return _eh_;
           case 132:return _ei_;
           case 133:return _ej_;
           case 134:return _ek_;
           case 135:return _el_;
           case 136:return _em_;
           case 137:return _en_;
           case 138:return _eo_;
           case 139:return _ep_;
           case 140:return _eq_;
           case 141:return _er_;
           case 142:return _es_;
           case 143:return _et_;
           case 144:return _eu_;
           case 145:return _ev_;
           default:return _ew_}
        switch(_gH_)
         {case 74:return _do_;
          case 75:return _dp_;
          case 76:return _dq_;
          case 77:return _dr_;
          case 78:return _ds_;
          case 79:return _dt_;
          case 80:return _du_;
          case 81:return _dv_;
          case 82:return _dw_;
          case 83:return _dx_;
          case 84:return _dy_;
          case 85:return _dz_;
          case 86:return _dA_;
          case 87:return _dB_;
          case 88:return _dC_;
          case 89:return _dD_;
          case 90:return _dE_;
          case 91:return _dF_;
          case 92:return _dG_;
          case 93:return _dH_;
          case 94:return _dI_;
          case 95:return _dJ_;
          case 96:return _dK_;
          case 97:return _dL_;
          case 98:return _dM_;
          case 99:return _dN_;
          case 100:return _dO_;
          case 101:return _dP_;
          case 102:return _dQ_;
          case 103:return _dR_;
          case 104:return _dS_;
          case 105:return _dT_;
          case 106:return _dU_;
          case 107:return _dV_;
          case 108:return _dW_;
          case 109:return _dX_;
          default:return _dY_}}
      if(37 <= _gH_)
       switch(_gH_)
        {case 37:return _cP_;
         case 38:return _cQ_;
         case 39:return _cR_;
         case 40:return _cS_;
         case 41:return _cT_;
         case 42:return _cU_;
         case 43:return _cV_;
         case 44:return _cW_;
         case 45:return _cX_;
         case 46:return _cY_;
         case 47:return _cZ_;
         case 48:return _c0_;
         case 49:return _c1_;
         case 50:return _c2_;
         case 51:return _c3_;
         case 52:return _c4_;
         case 53:return _c5_;
         case 54:return _c6_;
         case 55:return _c7_;
         case 56:return _c8_;
         case 57:return _c9_;
         case 58:return _c__;
         case 59:return _c$_;
         case 60:return _da_;
         case 61:return _db_;
         case 62:return _dc_;
         case 63:return _dd_;
         case 64:return _de_;
         case 65:return _df_;
         case 66:return _dg_;
         case 67:return _dh_;
         case 68:return _di_;
         case 69:return _dj_;
         case 70:return _dk_;
         case 71:return _dl_;
         case 72:return _dm_;
         default:return _dn_}
      switch(_gH_)
       {case 0:return _ce_;
        case 1:return _cf_;
        case 2:return _cg_;
        case 3:return _ch_;
        case 4:return _ci_;
        case 5:return _cj_;
        case 6:return _ck_;
        case 7:return _cl_;
        case 8:return _cm_;
        case 9:return _cn_;
        case 10:return _co_;
        case 11:return _cp_;
        case 12:return _cq_;
        case 13:return _cr_;
        case 14:return _cs_;
        case 15:return _ct_;
        case 16:return _cu_;
        case 17:return _cv_;
        case 18:return _cw_;
        case 19:return _cx_;
        case 20:return _cy_;
        case 21:return _cz_;
        case 22:return _cA_;
        case 23:return _cB_;
        case 24:return _cC_;
        case 25:return _cD_;
        case 26:return _cE_;
        case 27:return _cF_;
        case 28:return _cG_;
        case 29:return _cH_;
        case 30:return _cI_;
        case 31:return _cJ_;
        case 32:return _cK_;
        case 33:return _cL_;
        case 34:return _cM_;
        case 35:return _cN_;
        default:return _cO_}}
    function _ex_(a,r,g,b)
     {if(a){var a$0=a[1];return [3,[0,r,g,b,a$0]]}return [1,[0,r,g,b]]}
    function _ey_(a,h,s,l)
     {if(a){var a$0=a[1];return [6,[0,h,s,l,a$0]]}return [5,[0,h,s,l]]}
    function _ez_(param)
     {switch(param[0])
       {case 0:var n=param[1];return _cb_(n);
        case 1:
         var match=param[1],b=match[3],g=match[2],r=match[1];
         return caml_call4(Printf[4],_eA_,r,g,b);
        case 2:
         var match$0=param[1],b$0=match$0[3],g$0=match$0[2],r$0=match$0[1];
         return caml_call4(Printf[4],_eB_,r$0,g$0,b$0);
        case 3:
         var
          match$1=param[1],
          a=match$1[4],
          b$1=match$1[3],
          g$1=match$1[2],
          r$1=match$1[1];
         return caml_call5(Printf[4],_eC_,r$1,g$1,b$1,a);
        case 4:
         var
          match$2=param[1],
          a$0=match$2[4],
          b$2=match$2[3],
          g$2=match$2[2],
          r$2=match$2[1];
         return caml_call5(Printf[4],_eD_,r$2,g$2,b$2,a$0);
        case 5:
         var match$3=param[1],l=match$3[3],s=match$3[2],h=match$3[1];
         return caml_call4(Printf[4],_eE_,h,s,l);
        default:
         var
          match$4=param[1],
          a$1=match$4[4],
          l$0=match$4[3],
          s$0=match$4[2],
          h$0=match$4[1];
         return caml_call5(Printf[4],_eF_,h$0,s$0,l$0,a$1)}}
    function _eG_(param)
     {var blue=param[3],green=param[2],red=param[1];
      function in_range(i)
       {var _gE_=i < 0?1:0,_gF_=_gE_ || (255 < i?1:0);
        if(_gF_)
         {var _gG_=caml_call1(Pervasives[20],i);
          throw [0,
                 Invalid_argument,
                 caml_call2(Pervasives[16],_gG_,cst_is_out_of_valid_range)]}
        return _gF_}
      in_range(red);
      in_range(green);
      in_range(blue);
      return caml_call4(Printf[4],_eH_,red,green,blue)}
    function _eI_(s)
     {var
       rgb_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d)),
       rgb_pct_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d$0)),
       rgba_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d)),
       rgba_pct_re=
        new
         regExp_withFlags
         (caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d$0)),
       hsl_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsl_s_d_s_d_s_d)),
       hsla_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsla_s_d_s_d_s_d_d_d));
      if(! (rgb_re.test(s) | 0))
       if(! (rgba_re.test(s) | 0))
        if(! (rgb_pct_re.test(s) | 0))
         if(! (rgba_pct_re.test(s) | 0))
          if(! (hsl_re.test(s) | 0))
           if(! (hsla_re.test(s) | 0))
            {if(caml_call2(List[26],caml_js_to_string(s),_eJ_))return s;
             throw [0,
                    Invalid_argument,
                    caml_call2
                     (Pervasives[16],
                      caml_js_to_string(s),
                      cst_is_not_a_valid_color)]}
      return s}
    function _eK_(c)
     {if(0 === c[0]){var n=c[1];return _cb_(n).toString()}
      return _ez_(c).toString()}
    function _eL_(c)
     {var s=caml_js_to_string(c);
      try
       {var _gu_=[0,_cc_(s)];return _gu_}
      catch(_gv_)
       {_gv_ = caml_wrap_exception(_gv_);
        if(_gv_[1] === Invalid_argument)
         {var
           fail=
            function(param)
             {throw [0,
                     Invalid_argument,
                     caml_call2(Pervasives[16],s,cst_is_not_a_valid_color$0)]},
           re_rgb=regexp(cst_rgba_d_d_d_d_d),
           re_rgb_pct=regexp(cst_rgba_d_d_d_d_d$0),
           re_hsl=regexp(cst_hsla_d_d_d_d_d),
           i_of_s_o=
            function(param)
             {if(param)
               {var i=param[1];
                try
                 {var _gC_=caml_int_of_string(i);return _gC_}
                catch(_gD_)
                 {_gD_ = caml_wrap_exception(_gD_);
                  if(_gD_[1] === Invalid_argument)
                   var s=_gD_[2];
                  else
                   {if(_gD_[1] !== Failure)throw _gD_;var s=_gD_[2]}
                  var
                   _gA_=caml_call2(Pervasives[16],cst$39,s),
                   _gB_=caml_call2(Pervasives[16],i,_gA_);
                  throw [0,
                         Invalid_argument,
                         caml_call2(Pervasives[16],cst_color_conversion_error,_gB_)]}}
              return fail(0)},
           f_of_s=
            function(f)
             {try
               {var _gy_=caml_float_of_string(f);return _gy_}
              catch(_gz_)
               {_gz_ = caml_wrap_exception(_gz_);
                if(_gz_[1] === Invalid_argument)
                 var s=_gz_[2];
                else
                 {if(_gz_[1] !== Failure)throw _gz_;var s=_gz_[2]}
                var
                 _gw_=caml_call2(Pervasives[16],cst$40,s),
                 _gx_=caml_call2(Pervasives[16],f,_gw_);
                throw [0,
                       Invalid_argument,
                       caml_call2(Pervasives[16],cst_color_conversion_error$0,_gx_)]}},
           match=string_match(re_rgb,s,0);
          if(match)
           {var
             r=match[1],
             red=matched_group(r,2),
             green=matched_group(r,3),
             blue=matched_group(r,4),
             alpha=matched_group(r,5),
             match$0=matched_group(r,1);
            if(match$0)
             {var _gc_=match$0[1];
              if(! caml_string_notequal(_gc_,cst_rgb))
               {if(alpha)return fail(0);
                var _gg_=i_of_s_o(blue),_gh_=i_of_s_o(green);
                return [1,[0,i_of_s_o(red),_gh_,_gg_]]}
              if(! caml_string_notequal(_gc_,cst_rgba))
               {if(alpha)
                 {var
                   a=alpha[1],
                   _gd_=f_of_s(a),
                   _ge_=i_of_s_o(blue),
                   _gf_=i_of_s_o(green);
                  return [3,[0,i_of_s_o(red),_gf_,_ge_,_gd_]]}
                return fail(0)}}
            return fail(0)}
          var match$1=string_match(re_rgb_pct,s,0);
          if(match$1)
           {var
             r$0=match$1[1],
             red$0=matched_group(r$0,2),
             green$0=matched_group(r$0,3),
             blue$0=matched_group(r$0,4),
             alpha$0=matched_group(r$0,5),
             match$2=matched_group(r$0,1);
            if(match$2)
             {var _gi_=match$2[1];
              if(! caml_string_notequal(_gi_,cst_rgb$0))
               {if(alpha$0)return fail(0);
                var _gm_=i_of_s_o(blue$0),_gn_=i_of_s_o(green$0);
                return [2,[0,i_of_s_o(red$0),_gn_,_gm_]]}
              if(! caml_string_notequal(_gi_,cst_rgba$0))
               {if(alpha$0)
                 {var
                   a$0=alpha$0[1],
                   _gj_=f_of_s(a$0),
                   _gk_=i_of_s_o(blue$0),
                   _gl_=i_of_s_o(green$0);
                  return [4,[0,i_of_s_o(red$0),_gl_,_gk_,_gj_]]}
                return fail(0)}}
            return fail(0)}
          var match$3=string_match(re_hsl,s,0);
          if(match$3)
           {var
             r$1=match$3[1],
             red$1=matched_group(r$1,2),
             green$1=matched_group(r$1,3),
             blue$1=matched_group(r$1,4),
             alpha$1=matched_group(r$1,5),
             match$4=matched_group(r$1,1);
            if(match$4)
             {var _go_=match$4[1];
              if(! caml_string_notequal(_go_,cst_hsl))
               {if(alpha$1)return fail(0);
                var _gs_=i_of_s_o(blue$1),_gt_=i_of_s_o(green$1);
                return [5,[0,i_of_s_o(red$1),_gt_,_gs_]]}
              if(! caml_string_notequal(_go_,cst_hsla))
               {if(alpha$1)
                 {var
                   a$1=alpha$1[1],
                   _gp_=f_of_s(a$1),
                   _gq_=i_of_s_o(blue$1),
                   _gr_=i_of_s_o(green$1);
                  return [6,[0,i_of_s_o(red$1),_gr_,_gq_,_gp_]]}
                return fail(0)}}
            return fail(0)}
          return fail(0)}
        throw _gv_}}
    function _eM_(param)
     {if(typeof param === "number")
       return cst_0;
      else
       switch(param[0])
        {case 0:var f=param[1];return caml_call3(Printf[4],_eN_,f,cst_em$0);
         case 1:var f$0=param[1];return caml_call3(Printf[4],_eO_,f$0,cst_ex);
         case 2:var f$1=param[1];return caml_call3(Printf[4],_eP_,f$1,cst_px);
         case 3:var f$2=param[1];return caml_call3(Printf[4],_eQ_,f$2,cst_gd);
         case 4:
          var f$3=param[1];return caml_call3(Printf[4],_eR_,f$3,cst_rem);
         case 5:var f$4=param[1];return caml_call3(Printf[4],_eS_,f$4,cst_vw);
         case 6:var f$5=param[1];return caml_call3(Printf[4],_eT_,f$5,cst_vh);
         case 7:var f$6=param[1];return caml_call3(Printf[4],_eU_,f$6,cst_vm);
         case 8:var f$7=param[1];return caml_call3(Printf[4],_eV_,f$7,cst_ch);
         case 9:var f$8=param[1];return caml_call3(Printf[4],_eW_,f$8,cst_mm);
         case 10:
          var f$9=param[1];return caml_call3(Printf[4],_eX_,f$9,cst_cm);
         case 11:
          var f$10=param[1];return caml_call3(Printf[4],_eY_,f$10,cst_in);
         case 12:
          var f$11=param[1];return caml_call3(Printf[4],_eZ_,f$11,cst_pt);
         default:
          var f$12=param[1];return caml_call3(Printf[4],_e0_,f$12,cst_pc)}}
    function _e1_(t){return _eM_(t).toString()}
    var
     _e2_=
      [0,
       _eM_,
       _e1_,
       function(t)
        {var s=caml_js_to_string(t);
         if(runtime.caml_string_equal(s,cst_0$0))return 0;
         function fail(param)
          {throw [0,
                  Invalid_argument,
                  caml_call2(Pervasives[16],s,cst_is_not_a_valid_length)]}
         var re=regexp(cst_d_d_s_S),match=string_match(re,s,0);
         if(match)
          {var r=match[1],match$0=matched_group(r,1);
           if(match$0)
            {var f=match$0[1];
             try
              {var _ga_=caml_float_of_string(f)}
             catch(exn)
              {exn = caml_wrap_exception(exn);
               if(exn[1] === Invalid_argument)
                {var s$0=exn[2];
                 throw [0,
                        Invalid_argument,
                        caml_call2(Pervasives[16],cst_length_conversion_error,s$0)]}
               throw exn}
             var f$0=_ga_}
           else
            var f$0=fail(0);
           var match$1=matched_group(r,2);
           if(match$1)
            {var _gb_=match$1[1],switch$0=caml_string_compare(_gb_,cst_pc$0);
             if(0 <= switch$0)
              {if(! (0 < switch$0))return [13,f$0];
               if(! caml_string_notequal(_gb_,cst_pt$0))return [12,f$0];
               if(! caml_string_notequal(_gb_,cst_px$0))return [2,f$0];
               if(! caml_string_notequal(_gb_,cst_rem$0))return [4,f$0];
               if(! caml_string_notequal(_gb_,cst_vh$0))return [6,f$0];
               if(! caml_string_notequal(_gb_,cst_vm$0))return [7,f$0];
               if(! caml_string_notequal(_gb_,cst_vw$0))return [5,f$0]}
             else
              {if(! caml_string_notequal(_gb_,cst_ch$0))return [8,f$0];
               if(! caml_string_notequal(_gb_,cst_cm$0))return [10,f$0];
               if(! caml_string_notequal(_gb_,cst_em$1))return [0,f$0];
               if(! caml_string_notequal(_gb_,cst_ex$0))return [1,f$0];
               if(! caml_string_notequal(_gb_,cst_gd$0))return [3,f$0];
               if(! caml_string_notequal(_gb_,cst_in$0))return [11,f$0];
               if(! caml_string_notequal(_gb_,cst_mm$0))return [9,f$0]}
             return fail(0)}
           return fail(0)}
         return fail(0)}];
    function _e3_(param)
     {switch(param[0])
       {case 0:var f=param[1];return caml_call3(Printf[4],_e4_,f,cst_deg);
        case 1:
         var f$0=param[1];return caml_call3(Printf[4],_e5_,f$0,cst_grad);
        case 2:var f$1=param[1];return caml_call3(Printf[4],_e6_,f$1,cst_rad);
        default:
         var f$2=param[1];return caml_call3(Printf[4],_e7_,f$2,cst_turns)}}
    function _e8_(t){return _e3_(t).toString()}
    var
     CSS=
      [0,
       [0,_cb_,_cd_,_eG_,_ex_,_ey_,_ez_,_eK_,_eL_,_eI_],
       _e2_,
       [0,
        _e3_,
        _e8_,
        function(j)
         {var s=caml_js_to_string(j),re=regexp(cst_d_d_deg_grad_rad_turns);
          function fail(param)
           {throw [0,
                   Invalid_argument,
                   caml_call2(Pervasives[16],s,cst_is_not_a_valid_length$0)]}
          var match=string_match(re,s,0);
          if(match)
           {var r=match[1],match$0=matched_group(r,1);
            if(match$0)
             {var f=match$0[1];
              try
               {var _f__=caml_float_of_string(f)}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                if(exn[1] === Invalid_argument)
                 {var s$0=exn[2];
                  throw [0,
                         Invalid_argument,
                         caml_call2(Pervasives[16],cst_length_conversion_error$0,s$0)]}
                throw exn}
              var f$0=_f__}
            else
             var f$0=fail(0);
            var match$1=matched_group(r,2);
            if(match$1)
             {var _f$_=match$1[1];
              if(! caml_string_notequal(_f$_,cst_deg$0))return [0,f$0];
              if(! caml_string_notequal(_f$_,cst_grad$0))return [1,f$0];
              if(! caml_string_notequal(_f$_,cst_rad$0))return [2,f$0];
              if(! caml_string_notequal(_f$_,cst_turns$0))return [3,f$0]}
            return fail(0)}
          return fail(0)}]];
    caml_register_global(1636,CSS,"CSS");
    var
     Dom_events=
      [0,
       Event,
       function(opt,target,typ,cb)
        {if(opt)var sth=opt[1],capture=sth;else var capture=0;
         var _f9_=! ! capture;
         return addEventListener
                 (target,
                  typ,
                  full_handler(function(n,e){return ! ! caml_call2(cb,n,e)}),
                  _f9_)},
       removeEventListener];
    caml_register_global(1637,Dom_events,"Dom_events");
    var
     xmlns="http://www.w3.org/2000/svg",
     SVGError=caml_set_oo_id([248,cst_Dom_svg_SVGError,0]);
    function createElement$0(doc,name)
     {return doc.createElementNS(xmlns,name.toString())}
    function unsafeCreateElement$0(doc,name){return createElement$0(doc,name)}
    function createA$0(doc){return unsafeCreateElement$0(doc,cst_a$2)}
    function createAltGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_altglyph)}
    function createAltGlyphDef(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphdef)}
    function createAltGlyphItem(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphitem)}
    function createAnimate(doc){return unsafeCreateElement$0(doc,cst_animate)}
    function createAnimateColor(doc)
     {return unsafeCreateElement$0(doc,cst_animatecolor)}
    function createAnimateMotion(doc)
     {return unsafeCreateElement$0(doc,cst_animatemotion)}
    function createAnimateTransform(doc)
     {return unsafeCreateElement$0(doc,cst_animatetransform)}
    function createCircle(doc){return unsafeCreateElement$0(doc,cst_circle)}
    function createClipPath(doc)
     {return unsafeCreateElement$0(doc,cst_clippath)}
    function createCursor(doc){return unsafeCreateElement$0(doc,cst_cursor)}
    function createDefs(doc){return unsafeCreateElement$0(doc,cst_defs)}
    function createDesc(doc){return unsafeCreateElement$0(doc,cst_desc)}
    function createEllipse(doc){return unsafeCreateElement$0(doc,cst_ellipse)}
    function createFilter(doc){return unsafeCreateElement$0(doc,cst_filter)}
    function createFont(doc){return unsafeCreateElement$0(doc,cst_font)}
    function createFontFace(doc)
     {return unsafeCreateElement$0(doc,cst_font_face)}
    function createFontFaceFormat(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_format)}
    function createFontFaceName(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_name)}
    function createFontFaceSrc(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_src)}
    function createFontFaceUri(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_uri)}
    function createForeignObject(doc)
     {return unsafeCreateElement$0(doc,cst_foreignobject)}
    function createG(doc){return unsafeCreateElement$0(doc,cst_g$0)}
    function createGlyph(doc){return unsafeCreateElement$0(doc,cst_glyph)}
    function createGlyphRef(doc)
     {return unsafeCreateElement$0(doc,cst_glyphref)}
    function createhkern(doc){return unsafeCreateElement$0(doc,cst_hkern)}
    function createImage(doc){return unsafeCreateElement$0(doc,cst_image)}
    function createLineElement(doc)
     {return unsafeCreateElement$0(doc,cst_line)}
    function createLinearElement(doc)
     {return unsafeCreateElement$0(doc,cst_lineargradient)}
    function createMask(doc){return unsafeCreateElement$0(doc,cst_mask)}
    function createMetaData(doc)
     {return unsafeCreateElement$0(doc,cst_metadata)}
    function createMissingGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_missing_glyph)}
    function createMPath(doc){return unsafeCreateElement$0(doc,cst_mpath)}
    function createPath(doc){return unsafeCreateElement$0(doc,cst_path)}
    function createParttern(doc)
     {return unsafeCreateElement$0(doc,cst_parttern)}
    function createPolygon(doc){return unsafeCreateElement$0(doc,cst_polygon)}
    function createPolyline(doc)
     {return unsafeCreateElement$0(doc,cst_polyline)}
    function createRadialgradient(doc)
     {return unsafeCreateElement$0(doc,cst_radialgradient)}
    function createRect(doc){return unsafeCreateElement$0(doc,cst_rect)}
    function createScript$0(doc)
     {return unsafeCreateElement$0(doc,cst_script$2)}
    function createSet(doc){return unsafeCreateElement$0(doc,cst_set)}
    function createStop(doc){return unsafeCreateElement$0(doc,cst_stop)}
    function createStyle$0(doc){return unsafeCreateElement$0(doc,cst_style$2)}
    function createSvg(doc){return unsafeCreateElement$0(doc,cst_svg)}
    function createSwitch(doc){return unsafeCreateElement$0(doc,cst_switch)}
    function createSymbol(doc){return unsafeCreateElement$0(doc,cst_symbol)}
    function createTextElement(doc)
     {return unsafeCreateElement$0(doc,cst_text$0)}
    function createTextpath(doc)
     {return unsafeCreateElement$0(doc,cst_textpath)}
    function createTitle$0(doc){return unsafeCreateElement$0(doc,cst_title$2)}
    function createTref(doc){return unsafeCreateElement$0(doc,cst_tref)}
    function createTspan(doc){return unsafeCreateElement$0(doc,cst_tspan)}
    function createUse(doc){return unsafeCreateElement$0(doc,cst_use)}
    function createView(doc){return unsafeCreateElement$0(doc,cst_view)}
    function createvkern(doc){return unsafeCreateElement$0(doc,cst_vkern)}
    var svg_element=Unsafe[1].SVGElement,_e9_=Unsafe[1].document;
    function _e__(id)
     {function _f6_(e){if(e instanceof svg_element)return e;throw Not_found}
      function _f7_(param){throw Not_found}
      var _f8_=Unsafe[1].document.getElementById(id.toString());
      return caml_call3(Opt[7],_f8_,_f7_,_f6_)}
    function _e$_(e){return e instanceof svg_element?e:no_handler}
    function _fa_(e,tag)
     {var _f5_=tag.toString();
      return e.tagName.toLowerCase() === _f5_?e:no_handler}
    function _fb_(e){return _fa_(e,cst_a$3)}
    function _fc_(e){return _fa_(e,cst_altglyph$0)}
    function _fd_(e){return _fa_(e,cst_altglyphdef$0)}
    function _fe_(e){return _fa_(e,cst_altglyphitem$0)}
    function _ff_(e){return _fa_(e,cst_animate$0)}
    function _fg_(e){return _fa_(e,cst_animatecolor$0)}
    function _fh_(e){return _fa_(e,cst_animatemotion$0)}
    function _fi_(e){return _fa_(e,cst_animatetransform$0)}
    function _fj_(e){return _fa_(e,cst_circle$0)}
    function _fk_(e){return _fa_(e,cst_clippath$0)}
    function _fl_(e){return _fa_(e,cst_cursor$0)}
    function _fm_(e){return _fa_(e,cst_defs$0)}
    function _fn_(e){return _fa_(e,cst_desc$0)}
    function _fo_(e){return _fa_(e,cst_ellipse$0)}
    function _fp_(e){return _fa_(e,cst_filter$0)}
    function _fq_(e){return _fa_(e,cst_font$0)}
    function _fr_(e){return _fa_(e,cst_font_face$0)}
    function _fs_(e){return _fa_(e,cst_font_face_format$0)}
    function _ft_(e){return _fa_(e,cst_font_face_name$0)}
    function _fu_(e){return _fa_(e,cst_font_face_src$0)}
    function _fv_(e){return _fa_(e,cst_font_face_uri$0)}
    function _fw_(e){return _fa_(e,cst_foreignobject$0)}
    function _fx_(e){return _fa_(e,cst_g$1)}
    function _fy_(e){return _fa_(e,cst_glyph$0)}
    function _fz_(e){return _fa_(e,cst_glyphref$0)}
    function _fA_(e){return _fa_(e,cst_hkern$0)}
    function _fB_(e){return _fa_(e,cst_image$0)}
    function _fC_(e){return _fa_(e,cst_line$0)}
    function _fD_(e){return _fa_(e,cst_lineargradient$0)}
    function _fE_(e){return _fa_(e,cst_mask$0)}
    function _fF_(e){return _fa_(e,cst_metadata$0)}
    function _fG_(e){return _fa_(e,cst_missing_glyph$0)}
    function _fH_(e){return _fa_(e,cst_mpath$0)}
    function _fI_(e){return _fa_(e,cst_path$0)}
    function _fJ_(e){return _fa_(e,cst_parttern$0)}
    function _fK_(e){return _fa_(e,cst_polygon$0)}
    function _fL_(e){return _fa_(e,cst_polyline$0)}
    function _fM_(e){return _fa_(e,cst_radialgradient$0)}
    function _fN_(e){return _fa_(e,cst_rect$0)}
    function _fO_(e){return _fa_(e,cst_script$3)}
    function _fP_(e){return _fa_(e,cst_set$0)}
    function _fQ_(e){return _fa_(e,cst_stop$0)}
    function _fR_(e){return _fa_(e,cst_style$3)}
    function _fS_(e){return _fa_(e,cst_svg$0)}
    function _fT_(e){return _fa_(e,cst_switch$0)}
    function _fU_(e){return _fa_(e,cst_symbol$0)}
    function _fV_(e){return _fa_(e,cst_text$1)}
    function _fW_(e){return _fa_(e,cst_textpath$0)}
    function _fX_(e){return _fa_(e,cst_title$3)}
    function _fY_(e){return _fa_(e,cst_tref$0)}
    function _fZ_(e){return _fa_(e,cst_tspan$0)}
    function _f0_(e){return _fa_(e,cst_use$0)}
    function _f1_(e){return _fa_(e,cst_view$0)}
    var
     Dom_svg=
      [0,
       xmlns,
       SVGError,
       createElement$0,
       createA$0,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createParttern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript$0,
       createSet,
       createStop,
       createStyle$0,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle$0,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       _e9_,
       _e__,
       [0,
        _e$_,
        _fb_,
        _fc_,
        _fd_,
        _fe_,
        _ff_,
        _fg_,
        _fh_,
        _fi_,
        _fj_,
        _fk_,
        _fl_,
        _fm_,
        _fn_,
        _fo_,
        _fp_,
        _fq_,
        _fr_,
        _fs_,
        _ft_,
        _fu_,
        _fv_,
        _fw_,
        _fx_,
        _fy_,
        _fz_,
        _fA_,
        _fB_,
        _fC_,
        _fD_,
        _fE_,
        _fF_,
        _fG_,
        _fH_,
        _fI_,
        _fJ_,
        _fK_,
        _fL_,
        _fM_,
        _fN_,
        _fO_,
        _fP_,
        _fQ_,
        _fR_,
        _fS_,
        _fT_,
        _fU_,
        _fV_,
        _fW_,
        _fX_,
        _fY_,
        _fZ_,
        _f0_,
        _f1_,
        function(e){return _fa_(e,cst_vkern$0)}]];
    caml_register_global(1638,Dom_svg,"Dom_svg");
    function withCredentials(b)
     {var init={};init.withCredentials = ! ! b;return init}
    var
     eventSource=Unsafe[1].EventSource,
     EventSource=
      [0,withCredentials,eventSource,Unsafe[1].EventSource,addEventListener];
    caml_register_global(1639,EventSource,"EventSource");
    var Firebug=[0,runtime.caml_js_get_console(0)];
    caml_register_global(1640,Firebug,"Firebug");
    function empty_position_options(param){return {}}
    var
     x=Unsafe[1].navigator,
     _f2_=caml_call1(Optdef[5],x)?x.geolocation:x,
     Geolocation=
      [0,
       empty_position_options,
       _f2_,
       function(param){return caml_call1(Optdef[5],_f2_)}];
    caml_register_global(1641,Geolocation,"Geolocation");
    function _f3_(param){return {"localeMatcher":"best fit"}}
    var
     Collator=
      [0,
       _f3_,
       function(param)
        {return {"localeMatcher":"best fit",
                 "usage":"sort",
                 "sensitivity":"variant",
                 "ignorePunctuation":false$0,
                 "numeric":false$0,
                 "caseFirst":"false"}}],
     DateTimeFormat=
      [0,
       _f3_,
       function(param)
        {return {"localeMatcher":"best fit",
                 "timeZone":t37,
                 "hour12":t37,
                 "hourCycle":t37,
                 "formatMatcher":"best fit",
                 "weekday":t37,
                 "era":t37,
                 "year":t37,
                 "month":t37,
                 "day":t37,
                 "hour":t37,
                 "minute":t37,
                 "second":t37,
                 "timeZoneName":t37}}],
     NumberFormat=
      [0,
       _f3_,
       function(param)
        {return {"localeMatcher":"best fit",
                 "style":"decimal",
                 "currency":t37,
                 "currencyDisplay":t37,
                 "useGrouping":true$0,
                 "minimumIntegerDigits":t37,
                 "minimumFractionDigits":t37,
                 "maximumFractionDigits":t37,
                 "minimumSignificantDigits":t37,
                 "maximumSignificantDigits":t37}}],
     PluralRules=
      [0,
       _f3_,
       function(param){return {"localeMatcher":"best fit","type":"cardinal"}}],
     intl=Unsafe[1].Intl,
     collator_constr=Unsafe[1].Intl.Collator,
     dateTimeFormat_constr=Unsafe[1].Intl.DateTimeFormat,
     numberFormat_constr=Unsafe[1].Intl.NumberFormat,
     _f4_=Unsafe[1].Intl.PluralRules,
     Intl=
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       _f4_,
       function(param){return caml_call1(Optdef[5],intl)}];
    caml_register_global(1642,Intl,"Intl");
    var Js_of_ocaml=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    caml_register_global(1643,Js_of_ocaml,"Js_of_ocaml");
    return}
  (function(){return this}()));


//# 1 "../.js/bisect_ppx.runtime/bisect.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_new_string=runtime.caml_new_string,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_1_3_4=caml_new_string("1.3.4"),
     cst_exception_reading_data=caml_new_string("exception reading data: "),
     cst_unexpected_end_of_file_while_reading_magic_number=
      caml_new_string("unexpected end of file while reading magic number"),
     cst_bad_magic_number=caml_new_string("bad magic number"),
     cst_Bisect_Common_Invalid_file=
      caml_new_string("Bisect__Common.Invalid_file"),
     cst_Bisect_Common_Unsupported_version=
      caml_new_string("Bisect__Common.Unsupported_version"),
     cst_Bisect_Common_Modified_file=
      caml_new_string("Bisect__Common.Modified_file"),
     cst_BISECT_RTD=caml_new_string("BISECT-RTD"),
     supported_versions=[0,[0,2,0],0],
     format_version=[0,2,0],
     cst_out=caml_new_string("out"),
     cst_bisect=caml_new_string("bisect"),
     cst_BISECT_FILE=caml_new_string("BISECT_FILE"),
     cst_bisect_log=caml_new_string("bisect.log"),
     cst_BISECT_SILENT=caml_new_string("BISECT_SILENT"),
     cst_ERR=caml_new_string("ERR"),
     cst_ON=caml_new_string("ON"),
     cst_YES=caml_new_string("YES"),
     cst_Bisect_runtime_was_unable_to_write_file=
      caml_new_string(" *** Bisect runtime was unable to write file."),
     cst_Bisect_runtime_was_unable_to_create_file=
      caml_new_string(" *** Bisect runtime was unable to create file."),
     Filename=global_data.Filename,
     Hashtbl=global_data.Hashtbl,
     List=global_data.List,
     Marshal=global_data.Marshal,
     Array=global_data.Array,
     Pervasives=global_data.Pervasives,
     Printexc=global_data.Printexc,
     Assert_failure=global_data.Assert_failure,
     End_of_file=global_data.End_of_file,
     Bytes=global_data.Bytes,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Sys_error=global_data.Sys_error,
     Printf=global_data.Printf,
     String=global_data.String,
     Not_found=global_data.Not_found,
     Bisect=[0,0,0,0,0];
    caml_register_global(24,Bisect,"Bisect");
    var Bisect_Version=[0,cst_1_3_4];
    caml_register_global(25,Bisect_Version,"Bisect__Version");
    var
     _a_=[0,caml_new_string("src/runtime/common.ml"),109,13],
     _m_=[0,1,[0,6,[0,3,[0,5,0]]]],
     _l_=
      [0,[2,0,[4,0,[0,2,4],0,[12,46,[2,0,0]]]],caml_new_string("%s%04d.%s")],
     _g_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")];
    function try_finally(x,f,h)
     {try
       {var res=caml_call1(f,x)}
      catch(e)
       {e = caml_wrap_exception(e);try {caml_call1(h,x)}catch(_$_){}throw e}
      try {caml_call1(h,x)}catch(___){}
      return res}
    function try_in_channel(bin,x,f)
     {var open_ch=bin?Pervasives[63]:Pervasives[62],_Z_=Pervasives[77];
      return try_finally(caml_call1(open_ch,x),f,_Z_)}
    function try_out_channel(bin,x,f)
     {var open_ch=bin?Pervasives[44]:Pervasives[43],_Y_=Pervasives[60];
      return try_finally(caml_call1(open_ch,x),f,_Y_)}
    var
     Invalid_file=caml_set_oo_id([248,cst_Bisect_Common_Invalid_file,0]),
     Unsupported_version=
      caml_set_oo_id([248,cst_Bisect_Common_Unsupported_version,0]),
     Modified_file=caml_set_oo_id([248,cst_Bisect_Common_Modified_file,0]),
     magic=caml_call1(Bytes[5],cst_BISECT_RTD);
    function write_runtime_data(channel,content)
     {var x=caml_call1(Array[11],content);
      caml_call2(Pervasives[50],channel,magic);
      caml_call2(Pervasives[55],channel,format_version);
      return caml_call2(Pervasives[55],channel,x)}
    function write_points(points)
     {var points_array=caml_call1(Array[11],points);
      caml_call2(Array[18],caml_compare,points_array);
      return runtime.caml_output_value_to_string(points_array,0)}
    function read_runtime_data(filename)
     {return try_in_channel
              (1,
               filename,
               function(channel)
                {var
                  magic_length=runtime.caml_ml_string_length(magic),
                  file_magic=runtime.caml_create_string(magic_length);
                 try
                  {caml_call4
                    (Pervasives[68],channel,file_magic,0,magic_length)}
                 catch(_X_)
                  {_X_ = caml_wrap_exception(_X_);
                   if(_X_ === End_of_file)
                    throw [0,
                           Invalid_file,
                           filename,
                           cst_unexpected_end_of_file_while_reading_magic_number];
                   throw _X_}
                 if(runtime.caml_string_equal(file_magic,magic))
                  {var version=caml_call1(Pervasives[72],channel);
                   if(caml_call2(List[26],version,supported_versions))
                    {if(2 === version[1])
                      if(0 === version[2])
                       {try
                         {var file_content=caml_call1(Pervasives[72],channel)}
                        catch(e)
                         {e = caml_wrap_exception(e);
                          var _W_=caml_call1(Printexc[1],e);
                          throw [0,
                                 Invalid_file,
                                 filename,
                                 caml_call2(Pervasives[16],cst_exception_reading_data,_W_)]}
                        return caml_call1(Array[10],file_content)}
                     throw [0,Assert_failure,_a_]}
                   throw [0,Unsupported_version,filename]}
                 throw [0,Invalid_file,filename,cst_bad_magic_number]})}
    function read_points(s)
     {var points_array=caml_call2(Marshal[5],s,0);
      caml_call2(Array[18],caml_compare,points_array);
      return caml_call1(Array[10],points_array)}
    var _b_=caml_call2(Hashtbl[1],0,17);
    function _c_(filename)
     {var data=read_runtime_data(filename);
      function _U_(param)
       {var
         match=param[2],
         file_points=match[2],
         counts=match[1],
         source_file=param[1],
         basename=caml_call1(Filename[10],source_file),
         _V_=read_points(file_points);
        caml_call3(Hashtbl[10],_b_,basename,_V_);
        return [0,source_file,counts]}
      return caml_call2(List[12],_U_,data)}
    var
     Bisect_Common=
      [0,
       try_finally,
       try_in_channel,
       try_out_channel,
       Invalid_file,
       Unsupported_version,
       Modified_file,
       write_runtime_data,
       write_points,
       read_runtime_data,
       read_points,
       _c_,
       function(filename)
        {var _T_=caml_call1(Filename[10],filename);
         return caml_call2(Hashtbl[6],_b_,_T_)}];
    caml_register_global(37,Bisect_Common,"Bisect__Common");
    var Bisect_Extension=[0,cst_out];
    caml_register_global(38,Bisect_Extension,"Bisect__Extension");
    function _d_(param)
     {return 0 === param
              ?cst_Bisect_runtime_was_unable_to_create_file
              :cst_Bisect_runtime_was_unable_to_write_file}
    function _e_(fname)
     {return caml_call1(Filename[6],fname)
              ?caml_call2(Filename[4],Filename[1],fname)
              :fname}
    function _f_(env,default$0)
     {try
       {var _R_=runtime.caml_sys_getenv(env);return _R_}
      catch(_S_)
       {_S_ = caml_wrap_exception(_S_);
        if(_S_ === Not_found)return default$0;
        throw _S_}}
    var
     _h_=
      [246,
       function(_J_)
        {var
          fname=_f_(cst_BISECT_SILENT,cst_bisect_log),
          uc_fname=caml_call1(String[21],fname);
         if(caml_string_notequal(uc_fname,cst_ERR))
          {if(caml_string_notequal(uc_fname,cst_ON))
            if(caml_string_notequal(uc_fname,cst_YES))
             {var
               oc_l=
                [246,
                 function(_O_)
                  {var _P_=_e_(fname),oc=caml_call1(Pervasives[44],_P_);
                   function _Q_(param){return caml_call1(Pervasives[60],oc)}
                   caml_call1(Pervasives[83],_Q_);
                   return oc}];
              return function(msg)
               {var
                 _M_=caml_obj_tag(oc_l),
                 _L_=_d_(msg),
                 _N_=
                  250 === _M_
                   ?oc_l[1]
                   :246 === _M_?caml_call1(CamlinternalLazy[2],oc_l):oc_l;
                return caml_call3(Printf[1],_N_,_g_,_L_)}}
           return function(param){return 0}}
         return function(msg)
          {var _K_=_d_(msg);return caml_call1(Pervasives[38],_K_)}}];
    function _i_(message)
     {var
       _H_=caml_obj_tag(_h_),
       _I_=
        250 === _H_?_h_[1]:246 === _H_?caml_call1(CamlinternalLazy[2],_h_):_h_;
      return caml_call1(_I_,message)}
    var _j_=[246,function(_G_){return caml_call2(Hashtbl[1],0,17)}];
    function _k_(param)
     {var base_name=_e_(_f_(cst_BISECT_FILE,cst_bisect)),suffix=[0,0];
      function next_name(param)
       {suffix[1]++;
        return caml_call4(Printf[4],_l_,base_name,suffix[1],cst_out)}
      function ic_opt_loop(actual_name)
       {var actual_name$0=actual_name;
        for(;;)
         try
          {var _E_=[0,caml_call3(Pervasives[45],_m_,420,actual_name$0)];
           return _E_}
         catch(_F_)
          {_F_ = caml_wrap_exception(_F_);
           if(_F_[1] === Sys_error)
            {var actual_name$1=next_name(0),actual_name$0=actual_name$1;
             continue}
           _i_(0);
           return 0}}
      var channel_opt=ic_opt_loop(next_name(0));
      return channel_opt}
    function _n_(channel)
     {var
       _B_=caml_obj_tag(_j_),
       _A_=0,
       _C_=
        250 === _B_?_j_[1]:246 === _B_?caml_call1(CamlinternalLazy[2],_j_):_j_;
      function _D_(k,v,acc){return [0,[0,k,v],acc]}
      var content=caml_call3(Hashtbl[12],_D_,_C_,_A_);
      return write_runtime_data(channel,content)}
    function _o_(param)
     {var
       _w_=caml_obj_tag(_j_),
       _x_=
        250 === _w_?_j_[1]:246 === _w_?caml_call1(CamlinternalLazy[2],_j_):_j_;
      function _y_(param,_z_)
       {var point_state=_z_[1],n=point_state.length - 1;
        return 0 === n?0:caml_call4(Array[8],point_state,0,n - 1 | 0,0)}
      return caml_call2(Hashtbl[11],_y_,_x_)}
    function _p_(param)
     {var match=_k_(0);
      if(match)
       {var channel=match[1];
        try {_n_(channel)}catch(_v_){_i_(1)}
        return caml_call1(Pervasives[60],channel)}
      return 0}
    var
     _q_=[246,function(_u_){return caml_call1(Pervasives[83],_p_)}],
     Bisect_Runtime=
      [0,
       function(file,point_count,point_definitions)
        {var _r_=caml_obj_tag(_q_);
         if(250 !== _r_)if(246 === _r_)caml_call1(CamlinternalLazy[2],_q_);
         var
          point_state=runtime.caml_make_vect(point_count,0),
          _s_=caml_obj_tag(_j_),
          table=
           250 === _s_
            ?_j_[1]
            :246 === _s_?caml_call1(CamlinternalLazy[2],_j_):_j_;
         if(1 - caml_call2(Hashtbl[8],table,file))
          caml_call3(Hashtbl[5],table,file,[0,point_state,point_definitions]);
         return [0,
                 981889030,
                 function(point_index)
                  {var
                    current_count=
                     caml_check_bound(point_state,point_index)[point_index + 1],
                    _t_=
                     current_count < Pervasives[7]
                      ?current_count + 1 | 0
                      :current_count;
                   return caml_check_bound(point_state,point_index)
                           [point_index + 1]
                          =
                          _t_}]},
       _n_,
       _o_];
    caml_register_global(44,Bisect_Runtime,"Bisect__Runtime");
    return}
  (function(){return this}()));


//# 1 "../.js/num.core/nums.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_div=runtime.caml_div,
     caml_equal=runtime.caml_equal,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_int64_and=runtime.caml_int64_and,
     caml_int64_neg=runtime.caml_int64_neg,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_to_int32=runtime.caml_int64_to_int32,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_get=runtime.caml_string_get,
     caml_string_set=runtime.caml_string_set,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_invalid_digit=caml_new_string("invalid digit"),
     cst_number_too_long=caml_new_string("number too long"),
     cst_power_base_int=caml_new_string("power_base_int"),
     cst_nat_of_int=caml_new_string("nat_of_int"),
     cst_int_of_nat=caml_new_string("int_of_nat"),
     cst_make_nat=caml_new_string("make_nat"),
     cst_xor_big_int=caml_new_string("xor_big_int"),
     cst_or_big_int=caml_new_string("or_big_int"),
     cst_and_big_int=caml_new_string("and_big_int"),
     cst_extract_big_int=caml_new_string("extract_big_int"),
     cst_shift_right_big_int=caml_new_string("shift_right_big_int"),
     cst_two_power_m1_big_int=caml_new_string("two_power_m1_big_int"),
     cst_shift_right_towards_zero_big_int=
      caml_new_string("shift_right_towards_zero_big_int"),
     cst_shift_left_big_int=caml_new_string("shift_left_big_int"),
     cst_100000000=caml_new_string("100000000"),
     cst_963295986=caml_new_string("963295986"),
     cst$0=caml_new_string("-"),
     cst$2=caml_new_string(""),
     cst_e=caml_new_string("e"),
     cst_1=caml_new_string("1."),
     cst_e$0=caml_new_string("e"),
     cst$1=caml_new_string("."),
     cst_sqrt_big_int=caml_new_string("sqrt_big_int"),
     cst_base_power_big_int=caml_new_string("base_power_big_int"),
     cst_base_power_big_int$0=caml_new_string("base_power_big_int"),
     cst_base_power_big_int$1=caml_new_string("base_power_big_int"),
     cst_power_big_int_positive_big_int=
      caml_new_string("power_big_int_positive_big_int"),
     cst_power_int_positive_big_int=
      caml_new_string("power_int_positive_big_int"),
     cst_power_big_int_positive_int=
      caml_new_string("power_big_int_positive_int"),
     cst_power_int_positive_int=caml_new_string("power_int_positive_int"),
     cst_sys_big_int_of_string$1=caml_new_string("sys_big_int_of_string"),
     cst_sys_big_int_of_string$0=caml_new_string("sys_big_int_of_string"),
     cst_sys_big_int_of_string=caml_new_string("sys_big_int_of_string"),
     cst=caml_new_string("-"),
     cst_nat_of_big_int=caml_new_string("nat_of_big_int"),
     cst_int64_of_big_int$1=caml_new_string("int64_of_big_int"),
     cst_int64_of_big_int=caml_new_string("int64_of_big_int"),
     cst_int64_of_big_int$0=caml_new_string("int64_of_big_int"),
     cst_int32_of_big_int=caml_new_string("int32_of_big_int"),
     cst_nativeint_of_big_int=caml_new_string("nativeint_of_big_int"),
     cst_nativeint_of_big_int$0=caml_new_string("nativeint_of_big_int"),
     cst_nativeint_of_big_int$1=caml_new_string("nativeint_of_big_int"),
     cst_int_of_big_int=caml_new_string("int_of_big_int"),
     cst_create_big_int=caml_new_string("create_big_int"),
     cst$6=caml_new_string("/"),
     cst_approx_ratio_exp=caml_new_string("approx_ratio_exp"),
     cst_approx_ratio_exp$0=caml_new_string("approx_ratio_exp"),
     cst_0$0=caml_new_string("+0."),
     cst$5=caml_new_string(""),
     cst_1$1=caml_new_string("-1."),
     cst_1$2=caml_new_string("+1."),
     cst_0$1=caml_new_string("-0."),
     cst_0$2=caml_new_string("+0."),
     cst_approx_ratio_fix=caml_new_string("approx_ratio_fix"),
     cst_0=caml_new_string("+0"),
     cst_1$0=caml_new_string("1"),
     cst_msd_ratio=caml_new_string("msd_ratio"),
     cst_big_int_of_ratio=caml_new_string("big_int_of_ratio"),
     cst_nat_of_ratio$0=caml_new_string("nat_of_ratio"),
     cst_nat_of_ratio=caml_new_string("nat_of_ratio"),
     cst_integer_argument_required=
      caml_new_string("integer argument required"),
     cst_integer_ratio=caml_new_string("integer_ratio"),
     cst_inverse_ratio=caml_new_string("inverse_ratio"),
     cst_create_normalized_ratio=caml_new_string("create_normalized_ratio"),
     cst_create_ratio=caml_new_string("create_ratio"),
     cst$4=caml_new_string(""),
     s=caml_new_string("infinite or undefined rational number"),
     cst$3=caml_new_string(" "),
     cst_num_of_string=caml_new_string("num_of_string"),
     cst_power_num=caml_new_string("power_num"),
     cst_Normalization_during_computation=
      caml_new_string("Normalization during computation"),
     cst_returned_by_get_normalize_ratio=
      caml_new_string("     (returned by get_normalize_ratio ())"),
     cst_modifiable_with_set_normalize_ratio_your_choice=
      caml_new_string
       ("     (modifiable with set_normalize_ratio <your choice>)"),
     cst_Normalization_when_printing=
      caml_new_string("Normalization when printing"),
     cst_returned_by_get_normalize_ratio_when_printing=
      caml_new_string
       ("     (returned by get_normalize_ratio_when_printing ())"),
     cst_modifiable_with_set_normalize_ratio_when_printing_your_choice=
      caml_new_string
       ("     (modifiable with set_normalize_ratio_when_printing <your choice>)"),
     cst_Floating_point_approximation_when_printing_rational_numbers=
      caml_new_string
       ("Floating point approximation when printing rational numbers"),
     cst_returned_by_get_approx_printing=
      caml_new_string("     (returned by get_approx_printing ())"),
     cst_modifiable_with_set_approx_printing_your_choice=
      caml_new_string
       ("     (modifiable with set_approx_printing <your choice>)"),
     cst_Default_precision=caml_new_string("  Default precision = "),
     cst_returned_by_get_floating_precision=
      caml_new_string("     (returned by get_floating_precision ())"),
     cst_modifiable_with_set_floating_precision_your_choice=
      caml_new_string
       ("     (modifiable with set_floating_precision <your choice>)"),
     cst_Error_when_a_rational_denominator_is_null=
      caml_new_string("Error when a rational denominator is null"),
     cst_returned_by_get_error_when_null_denominator=
      caml_new_string("     (returned by get_error_when_null_denominator ())"),
     cst_modifiable_with_set_error_when_null_denominator_your_choice=
      caml_new_string
       ("     (modifiable with set_error_when_null_denominator <your choice>)"),
     cst_ON=caml_new_string("ON"),
     cst_OFF=caml_new_string("OFF"),
     cst$7=caml_new_string(" --> "),
     Pervasives=global_data.Pervasives,
     Sys=global_data.Sys,
     String=global_data.String,
     Bytes=global_data.Bytes,
     Char=global_data.Char,
     Assert_failure=global_data.Assert_failure,
     Failure=global_data.Failure,
     Out_of_memory=global_data.Out_of_memory,
     Int64=global_data.Int64,
     Nativeint=global_data.Nativeint,
     Division_by_zero=global_data.Division_by_zero,
     Not_found=global_data.Not_found,
     _cn_=[0,caml_new_string("nat.ml"),252,9],
     _cm_=[255,6553600,11973543,3552],
     _cl_=[0,caml_new_string("nat.ml"),259,9],
     _ck_=[0,caml_new_string("nat.ml"),266,9],
     _cj_=[0,caml_new_string("nat.ml"),272,9],
     _ci_=[255,6553600,11973543,3552],
     _K_=[255,16777215,255,0],
     _H_=[255,16777215,255,0],
     _I_=[255,0,0,0],
     _J_=[255,0,0,0],
     _D_=[255,0,0,0],
     _E_=[0,0,[255,0,0,0]],
     _F_=[255,0,0,0],
     _bf_=[0,caml_new_string("e0"),0],
     _bC_=[0,1],
     _bD_=[0,1],
     _bE_=[0,1],
     _bz_=[0,1],
     _bA_=[0,1],
     _bB_=[0,1];
    function _a_(i1,i2)
     {var i1$0=i1,i2$0=i2;
      for(;;)
       {if(0 === i2$0)return caml_call1(Pervasives[6],i1$0);
        var i2$1=caml_mod(i1$0,i2$0),i1$0=i2$0,i2$0=i2$1;
        continue}}
    function _b_(n){return 0 === n?0:_b_(n >>> 1 | 0) + 1 | 0}
    function _c_(n){return _b_(caml_call1(Pervasives[6],n))}
    function _d_(i){return 0 === i?0:0 < i?1:-1}
    var _e_=Sys[8] - 2 | 0,_f_=1 << _e_,_g_=_f_ - 1 | 0,_h_=- _g_ | 0;
    function _i_(n1,n2){return n1 === n2?0:caml_greaterthan(n1,n2)?1:-1}
    var Int_misc=[0,_a_,_c_,_i_,_d_,_e_,_g_,_h_,_f_];
    caml_register_global(120,Int_misc,"Int_misc");
    runtime.initialize_nat(0);
    function length_nat(n){return n.length - 1 - 1 | 0}
    var _j_=Sys[8];
    function make_nat(len)
     {if(0 <= len)
       {var res=runtime.create_nat(len);
        runtime.set_to_zero_nat(res,0,len);
        return res}
      return caml_call1(Pervasives[1],cst_make_nat)}
    var a_2=make_nat(2),a_1=make_nat(1),b_2=make_nat(2);
    function copy_nat(nat,off_set,length)
     {var res=runtime.create_nat(length);
      runtime.blit_nat(res,0,nat,off_set,length);
      return res}
    function is_zero_nat(n,off,len)
     {var _fJ_=runtime.num_digits_nat(n,off,len);
      return 0 === runtime.compare_nat(make_nat(1),0,1,n,off,_fJ_)?1:0}
    function is_nat_int(nat,off,len)
     {var
       _fH_=1 === runtime.num_digits_nat(nat,off,len)?1:0,
       _fI_=_fH_?runtime.is_digit_int(nat,off):_fH_;
      return _fI_}
    function int_of_nat(nat)
     {var len=length_nat(nat);
      return is_nat_int(nat,0,len)
              ?runtime.nth_digit_nat(nat,0)
              :caml_call1(Pervasives[2],cst_int_of_nat)}
    function nat_of_int(i)
     {if(0 <= i)
       {var res=make_nat(1);
        return 0 === i?res:(runtime.set_digit_nat(res,0,i),res)}
      return caml_call1(Pervasives[1],cst_nat_of_int)}
    function eq_nat(nat1,off1,len1,nat2,off2,len2)
     {var _fG_=runtime.num_digits_nat(nat2,off2,len2);
      return 0
              ===
              runtime.compare_nat
               (nat1,
                off1,
                runtime.num_digits_nat(nat1,off1,len1),
                nat2,
                off2,
                _fG_)
              ?1
              :0}
    function le_nat(nat1,off1,len1,nat2,off2,len2)
     {var _fF_=runtime.num_digits_nat(nat2,off2,len2);
      return runtime.compare_nat
               (nat1,
                off1,
                runtime.num_digits_nat(nat1,off1,len1),
                nat2,
                off2,
                _fF_)
              <=
              0
              ?1
              :0}
    function lt_nat(nat1,off1,len1,nat2,off2,len2)
     {var _fE_=runtime.num_digits_nat(nat2,off2,len2);
      return runtime.compare_nat
               (nat1,
                off1,
                runtime.num_digits_nat(nat1,off1,len1),
                nat2,
                off2,
                _fE_)
              <
              0
              ?1
              :0}
    function ge_nat(nat1,off1,len1,nat2,off2,len2)
     {var _fD_=runtime.num_digits_nat(nat2,off2,len2);
      return 0
              <=
              runtime.compare_nat
               (nat1,
                off1,
                runtime.num_digits_nat(nat1,off1,len1),
                nat2,
                off2,
                _fD_)
              ?1
              :0}
    function gt_nat(nat1,off1,len1,nat2,off2,len2)
     {var _fC_=runtime.num_digits_nat(nat2,off2,len2);
      return 0
              <
              runtime.compare_nat
               (nat1,
                off1,
                runtime.num_digits_nat(nat1,off1,len1),
                nat2,
                off2,
                _fC_)
              ?1
              :0}
    function exchange(r1,r2)
     {var old1=r1[1];r1[1] = r2[1];r2[1] = old1;return 0}
    function gcd_nat(nat1,off1,len1,nat2,off2,len2)
     {if(is_zero_nat(nat1,off1,len1))
       {runtime.blit_nat(nat1,off1,nat2,off2,len2);return len2}
      var
       copy1=[0,runtime.create_nat(len1 + 1 | 0)],
       copy2=[0,runtime.create_nat(len2 + 1 | 0)];
      runtime.blit_nat(copy1[1],0,nat1,off1,len1);
      runtime.blit_nat(copy2[1],0,nat2,off2,len2);
      runtime.set_digit_nat(copy1[1],len1,0);
      runtime.set_digit_nat(copy2[1],len2,0);
      if(lt_nat(copy1[1],0,len1,copy2[1],0,len2))exchange(copy1,copy2);
      var
       _fA_=length_nat(copy1[1]),
       real_len1=[0,runtime.num_digits_nat(copy1[1],0,_fA_)],
       _fB_=length_nat(copy2[1]),
       real_len2=[0,runtime.num_digits_nat(copy2[1],0,_fB_)];
      for(;;)
       {if(is_zero_nat(copy2[1],0,real_len2[1]))
         {runtime.blit_nat(nat1,off1,copy1[1],0,real_len1[1]);
          return real_len1[1]}
        runtime.set_digit_nat(copy1[1],real_len1[1],0);
        runtime.div_nat
         (copy1[1],0,real_len1[1] + 1 | 0,copy2[1],0,real_len2[1]);
        exchange(copy1,copy2);
        real_len1[1] = real_len2[1];
        real_len2[1] = runtime.num_digits_nat(copy2[1],0,real_len2[1]);
        continue}}
    function sqrt_nat(rad,off,len)
     {var
       len$0=runtime.num_digits_nat(rad,off,len),
       len_parity=len$0 % 2 | 0,
       rad_len=(len$0 + 1 | 0) + len_parity | 0,
       rad$0=runtime.create_nat(rad_len);
      runtime.blit_nat(rad$0,0,rad,off,len$0);
      runtime.set_digit_nat(rad$0,len$0,0);
      runtime.set_digit_nat(rad$0,rad_len - 1 | 0,0);
      var
       cand_len=(len$0 + 1 | 0) / 2 | 0,
       cand_rest=rad_len - cand_len | 0,
       cand=make_nat(cand_len),
       _fz_=caml_mul(Sys[8],len_parity),
       shift_cand=
        (runtime.num_leading_zero_bits_in_digit(rad$0,len$0 - 1 | 0)
         +
         _fz_
         |
         0)
        /
        2
        |
        0;
      if(shift_cand === Sys[8])return cand;
      runtime.complement_nat(cand,0,cand_len);
      runtime.shift_right_nat(cand,0,1,a_1,0,shift_cand);
      var next_cand=runtime.create_nat(rad_len);
      for(;;)
       {runtime.blit_nat(next_cand,0,rad$0,0,rad_len);
        runtime.div_nat(next_cand,0,rad_len,cand,0,cand_len);
        runtime.add_nat(next_cand,cand_len,cand_rest,cand,0,cand_len,0);
        runtime.shift_right_nat(next_cand,cand_len,cand_rest,a_1,0,1);
        if(lt_nat(next_cand,cand_len,cand_rest,cand,0,cand_len))
         {runtime.blit_nat(cand,0,next_cand,cand_len,cand_len);continue}
        return cand}}
    var power_base_max=make_nat(2);
    if(32 === _j_)
     runtime.set_digit_nat(power_base_max,0,1e9);
    else
     {if(64 !== _j_)throw [0,Assert_failure,_cn_];
      runtime.set_digit_nat(power_base_max,0,caml_int64_to_int32(_cm_));
      runtime.mult_digit_nat
       (power_base_max,0,2,power_base_max,0,1,nat_of_int(9),0)}
    if(32 === _j_)
     var _k_=9;
    else
     {if(64 !== _j_)throw [0,Assert_failure,_cl_];var _k_=19}
    if(32 === _j_)
     var _l_=9;
    else
     {if(64 !== _j_)throw [0,Assert_failure,_ck_];var _l_=18}
    if(32 === _j_)
     var _m_=nat_of_int(1e9);
    else
     {if(64 !== _j_)throw [0,Assert_failure,_cj_];
      var _m_=nat_of_int(caml_int64_to_int32(_ci_))}
    function _n_(nat,off)
     {if(is_nat_int(nat,off,1))
       {var _fw_=runtime.nth_digit_nat(nat,off);
        return caml_call1(Pervasives[20],_fw_)}
      runtime.blit_nat(b_2,0,nat,off,1);
      runtime.div_digit_nat(a_2,0,a_1,0,b_2,0,2,_m_,0);
      var
       leading_digits=runtime.nth_digit_nat(a_2,0),
       _fx_=runtime.nth_digit_nat(a_1,0),
       s1=caml_call1(Pervasives[20],_fx_),
       len=caml_ml_string_length(s1);
      if(10 <= leading_digits)
       {var
         result=caml_call2(Bytes[1],_l_ + 2 | 0,48),
         _fy_=caml_call1(Pervasives[20],leading_digits);
        caml_call5(String[6],_fy_,0,result,0,2);
        caml_call5
         (String[6],s1,0,result,caml_ml_string_length(result) - len | 0,len);
        return caml_call1(Bytes[6],result)}
      var result$0=caml_call2(Bytes[1],_l_ + 1 | 0,48);
      caml_string_set(result$0,0,caml_call1(Char[1],48 + leading_digits | 0));
      caml_call5
       (String[6],s1,0,result$0,caml_ml_string_length(result$0) - len | 0,len);
      return caml_call1(Bytes[6],result$0)}
    function _o_(base,power_base)
     {var i=[0,0],j=[0,0];
      runtime.set_digit_nat(power_base,0,base);
      for(;;)
       {i[1]++;
        if(runtime.is_digit_zero(power_base,i[1]))
         {runtime.mult_digit_nat
           (power_base,i[1],2,power_base,i[1] - 1 | 0,1,power_base,0);
          continue}
        for(;;)
         {if(j[1] < (i[1] - 1 | 0))
           if(runtime.is_digit_int(power_base,j[1])){j[1]++;continue}
          return [0,i[1] - 2 | 0,j[1]]}}}
    function _p_(base,i)
     {if(0 !== i)
       if(1 !== base)
        {if(0 === base)return nat_of_int(0);
         if(0 <= i)
          {var
            power_base=make_nat(_j_ + 1 | 0),
            match=_o_(base,power_base),
            pmax=match[1],
            n=caml_div(i,pmax + 1 | 0),
            rem=caml_mod(i,pmax + 1 | 0);
           if(0 < n)
            {var
              newn=i === _g_?n:n + 1 | 0,
              res=make_nat(newn),
              res2=make_nat(newn),
              l=_c_(n) - 2 | 0;
             runtime.blit_nat(res,0,power_base,pmax,1);
             if(! (l < 0))
              {var i$0=l;
               for(;;)
                {var
                  len=runtime.num_digits_nat(res,0,newn),
                  len2=caml_call2(Pervasives[4],n,2 * len | 0),
                  succ_len2=len2 + 1 | 0;
                 runtime.square_nat(res2,0,len2,res,0,len);
                 if(0 < (n & 1 << i$0))
                  {runtime.set_to_zero_nat(res,0,len);
                   runtime.mult_digit_nat
                    (res,0,succ_len2,res2,0,len2,power_base,pmax)}
                 else
                  runtime.blit_nat(res,0,res2,0,len2);
                 runtime.set_to_zero_nat(res2,0,len2);
                 var _fv_=i$0 - 1 | 0;
                 if(0 !== i$0){var i$0=_fv_;continue}
                 break}}
             return 0 < rem
                     ?(runtime.mult_digit_nat
                        (res2,0,newn,res,0,n,power_base,rem - 1 | 0),
                       res2)
                     :res}
           return copy_nat(power_base,rem - 1 | 0,1)}
         return caml_call1(Pervasives[1],cst_power_base_int)}
      return nat_of_int(1)}
    function _q_(nat,off,len_nat)
     {var len=runtime.num_digits_nat(nat,off,len_nat);
      if(1 === len)return _n_(nat,off);
      var
       len_copy=[0,len + 1 | 0],
       copy1=runtime.create_nat(len_copy[1]),
       copy2=make_nat(len_copy[1]),
       rest_digit=make_nat(2);
      if(caml_div(_g_,_k_ + 1 | 0) < len)
       return caml_call1(Pervasives[2],cst_number_too_long);
      var
       len_s=caml_mul(_k_ + 1 | 0,len),
       s=caml_call2(Bytes[1],len_s,48),
       pos_ref=[0,len_s];
      len_copy[1] = len_copy[1] - 1 | 0;
      runtime.blit_nat(copy1,0,nat,off,len);
      runtime.set_digit_nat(copy1,len,0);
      for(;;)
       {if(is_zero_nat(copy1,0,len_copy[1]))return caml_call1(Bytes[33],s);
        runtime.div_digit_nat
         (copy2,0,rest_digit,0,copy1,0,len_copy[1] + 1 | 0,power_base_max,0);
        var str=_n_(rest_digit,0);
        caml_call5
         (String[6],
          str,
          0,
          s,
          pos_ref[1] - caml_ml_string_length(str) | 0,
          caml_ml_string_length(str));
        pos_ref[1] = pos_ref[1] - _k_ | 0;
        len_copy[1] = runtime.num_digits_nat(copy2,0,len_copy[1]);
        runtime.blit_nat(copy1,0,copy2,0,len_copy[1]);
        runtime.set_digit_nat(copy1,len_copy[1],0);
        continue}}
    function _r_(nat)
     {var s=_q_(nat,0,length_nat(nat)),index=[0,0];
      try
       {var _fs_=caml_ml_string_length(s) - 2 | 0,_fr_=0;
        if(! (_fs_ < 0))
         {var i=_fr_;
          for(;;)
           {if(48 !== caml_string_get(s,i)){index[1] = i;throw Pervasives[3]}
            var _ft_=i + 1 | 0;
            if(_fs_ !== i){var i=_ft_;continue}
            break}}}
      catch(_fu_)
       {_fu_ = caml_wrap_exception(_fu_);if(_fu_ !== Pervasives[3])throw _fu_}
      return caml_call3
              (String[4],s,index[1],caml_ml_string_length(s) - index[1] | 0)}
    function _s_(base,s,off,len)
     {var
       power_base=make_nat(_j_ + 1 | 0),
       match=_o_(base,power_base),
       pint=match[2],
       pmax=match[1],
       _fj_=1 + caml_div(len,pmax + 1 | 0) | 0,
       current_len=[0,1],
       possible_len=[0,caml_call2(Pervasives[4],2,_fj_)],
       nat1=make_nat(_fj_),
       nat2=make_nat(_fj_),
       digits_read=[0,0],
       bound=(off + len | 0) - 1 | 0,
       int$0=[0,0];
      if(! (bound < off))
       {var i=off;
        for(;;)
         {var
           n=caml_string_get(s,i),
           switch$0=
            32 <= n
             ?93 <= n?95 === n?off < i?2:0:0:58 < (n - 33 | 0) >>> 0?1:0
             :11 <= n?13 === n?1:0:9 <= n?1:0;
          switch(switch$0)
           {case 0:
             if(48 <= n)
              if(n <= (47 + caml_call2(Pervasives[4],base,10) | 0))
               var _fq_=n - 48 | 0,switch$1=1;
              else
               var switch$1=0;
             else
              var switch$1=0;
             if(! switch$1)
              {if(65 <= n)
                if(n <= ((65 + base | 0) - 11 | 0))
                 var _fq_=n - 55 | 0,switch$2=1;
                else
                 var switch$2=0;
               else
                var switch$2=0;
               if(! switch$2)
                {if(97 <= n)
                  if(n <= ((97 + base | 0) - 11 | 0))
                   var _fq_=n - 87 | 0,switch$3=1;
                  else
                   var switch$3=0;
                 else
                  var switch$3=0;
                 if(! switch$3)
                  var _fq_=caml_call1(Pervasives[2],cst_invalid_digit)}}
             int$0[1] = caml_mul(int$0[1],base) + _fq_ | 0;
             digits_read[1]++;
             break;
            case 1:break
            }
          var
           _fk_=digits_read[1] === pint?1:0,
           _fl_=_fk_ || (i === bound?1:0),
           _fm_=_fl_?1 - (0 === digits_read[1]?1:0):_fl_;
          if(_fm_)
           {runtime.set_digit_nat(nat1,0,int$0[1]);
            var
             erase_len=
              _fj_ === current_len[1]?current_len[1] - 1 | 0:current_len[1],
             _fn_=1;
            if(! (erase_len < 1))
             {var j=_fn_;
              for(;;)
               {runtime.set_digit_nat(nat1,j,0);
                var _fp_=j + 1 | 0;
                if(erase_len !== j){var j=_fp_;continue}
                break}}
            runtime.mult_digit_nat
             (nat1,
              0,
              possible_len[1],
              nat2,
              0,
              current_len[1],
              power_base,
              digits_read[1] - 1 | 0);
            runtime.blit_nat(nat2,0,nat1,0,possible_len[1]);
            current_len[1] = runtime.num_digits_nat(nat1,0,possible_len[1]);
            possible_len[1]
            =
            caml_call2(Pervasives[4],_fj_,current_len[1] + 1 | 0);
            int$0[1] = 0;
            digits_read[1] = 0}
          var _fo_=i + 1 | 0;
          if(bound !== i){var i=_fo_;continue}
          break}}
      var nat=runtime.create_nat(current_len[1]);
      runtime.blit_nat(nat,0,nat1,0,current_len[1]);
      return nat}
    function _t_(s){return _s_(10,s,0,caml_ml_string_length(s))}
    var
     Nat=
      [0,
       make_nat,
       copy_nat,
       length_nat,
       is_zero_nat,
       is_nat_int,
       int_of_nat,
       nat_of_int,
       eq_nat,
       le_nat,
       lt_nat,
       ge_nat,
       gt_nat,
       gcd_nat,
       sqrt_nat,
       _r_,
       _t_,
       _s_,
       function(nat){return caml_float_of_string(_r_(nat))},
       _o_,
       _p_,
       _j_];
    caml_register_global(125,Nat,"Nat");
    function sign_big_int(bi){return bi[1]}
    var zero_big_int=[0,0,make_nat(1)],unit_big_int=[0,1,nat_of_int(1)];
    function num_digits_big_int(bi)
     {var _fi_=length_nat(bi[2]);return runtime.num_digits_nat(bi[2],0,_fi_)}
    function minus_big_int(bi)
     {var _fg_=num_digits_big_int(bi),_fh_=copy_nat(bi[2],0,_fg_);
      return [0,- bi[1] | 0,_fh_]}
    function abs_big_int(bi)
     {var
       _fd_=num_digits_big_int(bi),
       _fe_=copy_nat(bi[2],0,_fd_),
       _ff_=0 === bi[1]?0:1;
      return [0,_ff_,_fe_]}
    function compare_big_int(bi1,bi2)
     {if(0 === bi1[1])if(0 === bi2[1])return 0;
      if(bi1[1] < bi2[1])return -1;
      if(bi2[1] < bi1[1])return 1;
      if(1 === bi1[1])
       {var
         _e9_=num_digits_big_int(bi2),
         _e__=bi2[2],
         _e$_=num_digits_big_int(bi1);
        return runtime.compare_nat(bi1[2],0,_e$_,_e__,0,_e9_)}
      var
       _fa_=num_digits_big_int(bi1),
       _fb_=bi1[2],
       _fc_=num_digits_big_int(bi2);
      return runtime.compare_nat(bi2[2],0,_fc_,_fb_,0,_fa_)}
    function eq_big_int(bi1,bi2){return 0 === compare_big_int(bi1,bi2)?1:0}
    function le_big_int(bi1,bi2){return compare_big_int(bi1,bi2) <= 0?1:0}
    function ge_big_int(bi1,bi2){return 0 <= compare_big_int(bi1,bi2)?1:0}
    function lt_big_int(bi1,bi2){return compare_big_int(bi1,bi2) < 0?1:0}
    function gt_big_int(bi1,bi2){return 0 < compare_big_int(bi1,bi2)?1:0}
    function max_big_int(bi1,bi2){return lt_big_int(bi1,bi2)?bi2:bi1}
    function min_big_int(bi1,bi2){return gt_big_int(bi1,bi2)?bi2:bi1}
    function pred_big_int(bi)
     {var _e7_=bi[1];
      if(0 === _e7_)return [0,-1,nat_of_int(1)];
      if(1 === _e7_)
       {var size_bi=num_digits_big_int(bi),copy_bi=copy_nat(bi[2],0,size_bi);
        runtime.decr_nat(copy_bi,0,size_bi,0);
        var _e8_=is_zero_nat(copy_bi,0,size_bi)?0:1;
        return [0,_e8_,copy_bi]}
      var
       size_bi$0=num_digits_big_int(bi),
       size_res=size_bi$0 + 1 | 0,
       copy_bi$0=runtime.create_nat(size_res);
      runtime.blit_nat(copy_bi$0,0,bi[2],0,size_bi$0);
      runtime.set_digit_nat(copy_bi$0,size_bi$0,0);
      runtime.incr_nat(copy_bi$0,0,size_res,1);
      return [0,-1,copy_bi$0]}
    function succ_big_int(bi)
     {var _e5_=bi[1];
      if(-1 === _e5_)
       {var size_bi=num_digits_big_int(bi),copy_bi=copy_nat(bi[2],0,size_bi);
        runtime.decr_nat(copy_bi,0,size_bi,0);
        var _e6_=is_zero_nat(copy_bi,0,size_bi)?0:-1;
        return [0,_e6_,copy_bi]}
      if(0 === _e5_)return [0,1,nat_of_int(1)];
      var
       size_bi$0=num_digits_big_int(bi),
       size_res=size_bi$0 + 1 | 0,
       copy_bi$0=runtime.create_nat(size_res);
      runtime.blit_nat(copy_bi$0,0,bi[2],0,size_bi$0);
      runtime.set_digit_nat(copy_bi$0,size_bi$0,0);
      runtime.incr_nat(copy_bi$0,0,size_res,1);
      return [0,1,copy_bi$0]}
    function add_big_int(bi1,bi2)
     {var size_bi1=num_digits_big_int(bi1),size_bi2=num_digits_big_int(bi2);
      if(bi1[1] === bi2[1])
       {var match=runtime.compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
        if(-1 === match)
         {var res=runtime.create_nat(size_bi2 + 1 | 0);
          runtime.blit_nat(res,0,bi2[2],0,size_bi2);
          runtime.set_digit_nat(res,size_bi2,0);
          runtime.add_nat(res,0,size_bi2 + 1 | 0,bi1[2],0,size_bi1,0);
          var res$0=res}
        else
         {var res$1=runtime.create_nat(size_bi1 + 1 | 0);
          runtime.blit_nat(res$1,0,bi1[2],0,size_bi1);
          runtime.set_digit_nat(res$1,size_bi1,0);
          runtime.add_nat(res$1,0,size_bi1 + 1 | 0,bi2[2],0,size_bi2,0);
          var res$0=res$1}
        return [0,bi1[1],res$0]}
      var match$0=runtime.compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      if(0 === match$0)return zero_big_int;
      if(1 === match$0)
       {var res$2=copy_nat(bi1[2],0,size_bi1);
        runtime.sub_nat(res$2,0,size_bi1,bi2[2],0,size_bi2,1);
        return [0,bi1[1],res$2]}
      var res$3=copy_nat(bi2[2],0,size_bi2);
      runtime.sub_nat(res$3,0,size_bi2,bi1[2],0,size_bi1,1);
      return [0,bi2[1],res$3]}
    function big_int_of_int(i)
     {var res=runtime.create_nat(1);
      if(i === _f_)
       {runtime.set_digit_nat(res,0,_g_);runtime.incr_nat(res,0,1,1)}
      else
       runtime.set_digit_nat(res,0,caml_call1(Pervasives[6],i));
      return [0,_d_(i),res]}
    function add_int_big_int(i,bi){return add_big_int(big_int_of_int(i),bi)}
    function sub_big_int(bi1,bi2){return add_big_int(bi1,minus_big_int(bi2))}
    function mult_int_big_int(i,bi)
     {var size_bi=num_digits_big_int(bi),size_res=size_bi + 1 | 0;
      if(i === _f_)
       {var res=runtime.create_nat(size_res);
        runtime.blit_nat(res,0,bi[2],0,size_bi);
        runtime.set_digit_nat(res,size_bi,0);
        var _e2_=nat_of_int(_g_);
        runtime.mult_digit_nat(res,0,size_res,bi[2],0,size_bi,_e2_,0);
        return [0,- bi[1] | 0,res]}
      var
       res$0=make_nat(size_res),
       _e3_=nat_of_int(caml_call1(Pervasives[6],i));
      runtime.mult_digit_nat(res$0,0,size_res,bi[2],0,size_bi,_e3_,0);
      var _e4_=bi[1];
      return [0,caml_mul(_d_(i),_e4_),res$0]}
    function mult_big_int(bi1,bi2)
     {var
       size_bi1=num_digits_big_int(bi1),
       size_bi2=num_digits_big_int(bi2),
       size_res=size_bi1 + size_bi2 | 0,
       res=make_nat(size_res);
      if(size_bi1 < size_bi2)
       runtime.mult_nat(res,0,size_res,bi2[2],0,size_bi2,bi1[2],0,size_bi1);
      else
       runtime.mult_nat(res,0,size_res,bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      return [0,caml_mul(bi1[1],bi2[1]),res]}
    function quomod_big_int(bi1,bi2)
     {if(0 === bi2[1])throw Division_by_zero;
      var
       size_bi1=num_digits_big_int(bi1),
       size_bi2=num_digits_big_int(bi2),
       match=runtime.compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      if(-1 === match)
       {if(0 <= bi1[1])return [0,big_int_of_int(0),bi1];
        if(0 <= bi2[1])
         {var _eV_=add_big_int(bi2,bi1);return [0,big_int_of_int(-1),_eV_]}
        var _eW_=sub_big_int(bi1,bi2);
        return [0,big_int_of_int(1),_eW_]}
      if(0 === match)
       return [0,big_int_of_int(caml_mul(bi1[1],bi2[1])),zero_big_int];
      var
       bi1_negatif=-1 === bi1[1]?1:0,
       _eX_=
        bi1_negatif
         ?caml_call2(Pervasives[5],(size_bi1 - size_bi2 | 0) + 1 | 0,1)
          +
          1
          |
          0
         :caml_call2(Pervasives[5],(size_bi1 - size_bi2 | 0) + 1 | 0,1),
       size_r=caml_call2(Pervasives[5],size_bi1,size_bi2) + 1 | 0,
       q=runtime.create_nat(_eX_),
       r=runtime.create_nat(size_r);
      runtime.blit_nat(r,0,bi1[2],0,size_bi1);
      runtime.set_to_zero_nat(r,size_bi1,size_r - size_bi1 | 0);
      runtime.div_nat(r,0,size_r,bi2[2],0,size_bi2);
      runtime.blit_nat(q,0,r,size_bi2,size_r - size_bi2 | 0);
      var not_null_mod=1 - is_zero_nat(r,0,size_bi2);
      if(bi1_negatif)
       if(not_null_mod)
        {var new_r=copy_nat(bi2[2],0,size_bi2);
         runtime.sub_nat(new_r,0,size_bi2,r,0,size_bi2,1);
         runtime.set_digit_nat(q,_eX_ - 1 | 0,0);
         runtime.incr_nat(q,0,_eX_,1);
         return [0,[0,- bi2[1] | 0,q],[0,1,new_r]]}
      if(bi1_negatif)runtime.set_digit_nat(q,_eX_ - 1 | 0,0);
      var
       _eY_=copy_nat(r,0,size_bi2),
       _eZ_=not_null_mod?1:0,
       _e0_=[0,_eZ_,_eY_],
       _e1_=is_zero_nat(q,0,_eX_)?0:caml_mul(bi1[1],bi2[1]);
      return [0,[0,_e1_,q],_e0_]}
    function div_big_int(bi1,bi2){return quomod_big_int(bi1,bi2)[1]}
    function mod_big_int(bi1,bi2){return quomod_big_int(bi1,bi2)[2]}
    function gcd_big_int(bi1,bi2)
     {var size_bi1=num_digits_big_int(bi1),size_bi2=num_digits_big_int(bi2);
      if(is_zero_nat(bi1[2],0,size_bi1))return abs_big_int(bi2);
      if(is_zero_nat(bi2[2],0,size_bi2))return [0,1,bi1[2]];
      var match=runtime.compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      if(0 === match)
       var _eU_=bi1[2];
      else
       if(1 === match)
        var
         res=copy_nat(bi1[2],0,size_bi1),
         len=gcd_nat(res,0,size_bi1,bi2[2],0,size_bi2),
         _eU_=copy_nat(res,0,len);
       else
        var
         res$0=copy_nat(bi2[2],0,size_bi2),
         len$0=gcd_nat(res$0,0,size_bi2,bi1[2],0,size_bi1),
         _eU_=copy_nat(res$0,0,len$0);
      return [0,1,_eU_]}
    var _u_=big_int_of_int(_f_),_v_=_u_[2];
    function _w_(bi)
     {var _eS_=1 === num_digits_big_int(bi)?1:0;
      if(_eS_)
       {var match=runtime.compare_nat(bi[2],0,1,_v_,0,1);
        if(-1 !== match)return 0 === match?-1 === bi[1]?1:0:0;
        var _eT_=1}
      else
       var _eT_=_eS_;
      return _eT_}
    function _x_(bi)
     {try
       {var n=int_of_nat(bi[2]),_eQ_=-1 === bi[1]?- n | 0:n;return _eQ_}
      catch(_eR_)
       {_eR_ = caml_wrap_exception(_eR_);
        if(_eR_[1] === Failure)
         return eq_big_int(bi,_u_)
                 ?_f_
                 :caml_call1(Pervasives[2],cst_int_of_big_int);
        throw _eR_}}
    function _y_(i)
     {if(caml_equal(i,0))return zero_big_int;
      if(caml_greaterthan(i,0))
       {var res=runtime.create_nat(1);
        runtime.set_digit_nat_native(res,0,i);
        return [0,1,res]}
      var res$0=runtime.create_nat(1);
      runtime.set_digit_nat_native(res$0,0,- i | 0);
      return [0,-1,res$0]}
    function _z_(bi)
     {if(1 < num_digits_big_int(bi))
       caml_call1(Pervasives[2],cst_nativeint_of_big_int);
      var i=runtime.nth_digit_nat_native(bi[2],0);
      if(0 <= bi[1])
       return caml_greaterequal(i,0)
               ?i
               :caml_call1(Pervasives[2],cst_nativeint_of_big_int$0);
      if(! caml_greaterequal(i,0))
       if(! caml_equal(i,Nativeint[9]))
        return caml_call1(Pervasives[2],cst_nativeint_of_big_int$1);
      return - i | 0}
    function _A_(i){return _y_(i)}
    function _B_(bi)
     {var i=_z_(bi);
      if(runtime.caml_lessequal(i,2147483647))
       if(caml_greaterequal(i,-2147483648))return i;
      return caml_call1(Pervasives[2],cst_int32_of_big_int)}
    function _C_(i)
     {if(64 === Sys[8])return _y_(caml_int64_to_int32(i));
      var
       match=
        caml_equal(i,_D_)
         ?_E_
         :caml_greaterthan(i,_F_)?[0,1,i]:[0,-1,caml_int64_neg(i)],
       absi=match[2],
       sg=match[1],
       res=runtime.create_nat(2);
      runtime.set_digit_nat_native(res,0,caml_int64_to_int32(absi));
      runtime.set_digit_nat_native
       (res,1,caml_int64_to_int32(runtime.caml_int64_shift_right(absi,32)));
      return [0,sg,res]}
    function _G_(bi)
     {if(64 === Sys[8])return caml_int64_of_int32(_z_(bi));
      var match=num_digits_big_int(bi);
      if(1 === match)
       var
        i=
         caml_int64_and
          (caml_int64_of_int32(runtime.nth_digit_nat_native(bi[2],0)),_H_);
      else
       if(2 === match)
        var
         _eP_=
          runtime.caml_int64_shift_left
           (caml_int64_of_int32(runtime.nth_digit_nat_native(bi[2],1)),32),
         i=
          runtime.caml_int64_or
           (caml_int64_and
             (caml_int64_of_int32(runtime.nth_digit_nat_native(bi[2],0)),_K_),
            _eP_);
       else
        var i=caml_call1(Pervasives[2],cst_int64_of_big_int$1);
      if(0 <= bi[1])
       return caml_greaterequal(i,_I_)
               ?i
               :caml_call1(Pervasives[2],cst_int64_of_big_int);
      if(! caml_greaterequal(i,_J_))
       if(! caml_equal(i,Int64[8]))
        return caml_call1(Pervasives[2],cst_int64_of_big_int$0);
      return caml_int64_neg(i)}
    function _L_(bi)
     {if(-1 === bi[1])return caml_call1(Pervasives[2],cst_nat_of_big_int);
      var _eO_=num_digits_big_int(bi);
      return copy_nat(bi[2],0,_eO_)}
    function _M_(nat,off,len)
     {var
       length=runtime.num_digits_nat(nat,off,len),
       _eM_=copy_nat(nat,off,length),
       _eN_=is_zero_nat(nat,off,length)?0:1;
      return [0,_eN_,_eM_]}
    function _N_(nat){return _M_(nat,0,length_nat(nat))}
    function _O_(bi)
     {if(-1 === bi[1])
       {var _eL_=_r_(bi[2]);return caml_call2(Pervasives[16],cst,_eL_)}
      return _r_(bi[2])}
    function _P_(s,ofs,len,sgn,base)
     {if(len < 1)caml_call1(Pervasives[2],cst_sys_big_int_of_string);
      var n=_s_(base,s,ofs,len);
      return is_zero_nat(n,0,length_nat(n))?zero_big_int:[0,sgn,n]}
    function _Q_(s,ofs,len,sgn)
     {if(len < 1)caml_call1(Pervasives[2],cst_sys_big_int_of_string$0);
      if(2 <= len)
       {var
         match=caml_string_get(s,ofs),
         match$0=caml_string_get(s,ofs + 1 | 0);
        if(48 === match)
         {var
           switch$0=
            89 <= match$0
             ?98 === match$0?3:111 === match$0?2:120 === match$0?1:0
             :66 === match$0?3:79 === match$0?2:88 <= match$0?1:0;
          switch(switch$0)
           {case 0:break;
            case 1:return _P_(s,ofs + 2 | 0,len - 2 | 0,sgn,16);
            case 2:return _P_(s,ofs + 2 | 0,len - 2 | 0,sgn,8);
            default:return _P_(s,ofs + 2 | 0,len - 2 | 0,sgn,2)}}
        return _P_(s,ofs,len,sgn,10)}
      return _P_(s,ofs,len,sgn,10)}
    function _R_(s,ofs,len)
     {if(len < 1)caml_call1(Pervasives[2],cst_sys_big_int_of_string$1);
      var match=caml_string_get(s,ofs),switcher=match - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return _Q_(s,ofs + 1 | 0,len - 1 | 0,1);
         case 1:break;
         default:return _Q_(s,ofs + 1 | 0,len - 1 | 0,-1)}
      return _Q_(s,ofs,len,1)}
    function _S_(s){return _R_(s,0,caml_ml_string_length(s))}
    function _T_(i,n)
     {var match=_d_(n);
      if(-1 === match)
       return caml_call1(Pervasives[1],cst_power_int_positive_int);
      if(0 === match)return unit_big_int;
      var
       nat=_p_(caml_call1(Pervasives[6],i),n),
       _eK_=0 <= i?_d_(i):0 === (n & 1)?1:-1;
      return [0,_eK_,nat]}
    function _U_(bi,n)
     {var match=_d_(n);
      if(-1 === match)
       return caml_call1(Pervasives[1],cst_power_big_int_positive_int);
      if(0 === match)return unit_big_int;
      var
       bi_len=num_digits_big_int(bi),
       res_len=caml_mul(bi_len,n),
       res=make_nat(res_len),
       res2=make_nat(res_len),
       l=_c_(n) - 2 | 0;
      runtime.blit_nat(res,0,bi[2],0,bi_len);
      if(! (l < 0))
       {var i=l;
        for(;;)
         {var
           len=runtime.num_digits_nat(res,0,res_len),
           len2=caml_call2(Pervasives[4],res_len,2 * len | 0);
          runtime.set_to_zero_nat(res2,0,len2);
          runtime.square_nat(res2,0,len2,res,0,len);
          if(0 < (n & 1 << i))
           {var lenp=caml_call2(Pervasives[4],res_len,len2 + bi_len | 0);
            runtime.set_to_zero_nat(res,0,lenp);
            runtime.mult_nat(res,0,lenp,res2,0,len2,bi[2],0,bi_len)}
          else
           runtime.blit_nat(res,0,res2,0,len2);
          var _eJ_=i - 1 | 0;
          if(0 !== i){var i=_eJ_;continue}
          break}}
      var _eI_=0 <= bi[1]?bi[1]:0 === (n & 1)?1:-1;
      return [0,_eI_,res]}
    function _V_(i$0,bi)
     {var match$1=bi[1];
      if(-1 === match$1)
       return caml_call1(Pervasives[1],cst_power_int_positive_big_int);
      if(0 === match$1)return unit_big_int;
      var
       len$0=num_digits_big_int(bi),
       _eG_=bi[2],
       base=caml_call1(Pervasives[6],i$0),
       off=0;
      if(0 === base)
       var nat=nat_of_int(0);
      else
       {if(is_zero_nat(_eG_,off,len$0))
         var switch$0=0;
        else
         if(1 === base)
          var switch$0=0;
         else
          {var
            power_base=make_nat(_j_ + 1 | 0),
            match=_o_(base,power_base),
            pmax=match[1],
            _eE_=big_int_of_int(pmax + 1 | 0),
            match$0=quomod_big_int(_M_(_eG_,off,len$0),_eE_),
            y=match$0[2],
            x=match$0[1],
            rem=_x_(y),
            n=_x_(x);
           if(0 === n)
            var nat=copy_nat(power_base,rem - 1 | 0,1),switch$0=1;
           else
            {var res=make_nat(n),res2=make_nat(n + 1 | 0),l=_c_(n) - 2 | 0;
             runtime.blit_nat(res,0,power_base,pmax,1);
             if(! (l < 0))
              {var i=l;
               for(;;)
                {var
                  len=runtime.num_digits_nat(res,0,n),
                  len2=caml_call2(Pervasives[4],n,2 * len | 0),
                  succ_len2=len2 + 1 | 0;
                 runtime.square_nat(res2,0,len2,res,0,len);
                 if(0 < (n & 1 << i))
                  {runtime.set_to_zero_nat(res,0,len);
                   runtime.mult_digit_nat
                    (res,0,succ_len2,res2,0,len2,power_base,pmax)}
                 else
                  runtime.blit_nat(res,0,res2,0,len2);
                 runtime.set_to_zero_nat(res2,0,len2);
                 var _eF_=i - 1 | 0;
                 if(0 !== i){var i=_eF_;continue}
                 break}}
             if(0 < rem)
              {runtime.mult_digit_nat
                (res2,0,n + 1 | 0,res,0,n,power_base,rem - 1 | 0);
               var nat=res2,switch$0=1}
             else
              var nat=res,switch$0=1}}
        if(! switch$0)var nat=nat_of_int(1)}
      var _eH_=0 <= i$0?_d_(i$0):runtime.is_digit_odd(bi[2],0)?-1:1;
      return [0,_eH_,nat]}
    function _W_(bi1,bi2)
     {var match=bi2[1];
      if(-1 === match)
       return caml_call1(Pervasives[1],cst_power_big_int_positive_big_int);
      if(0 === match)return unit_big_int;
      try
       {var _eB_=_U_(bi1,_x_(bi2));return _eB_}
      catch(_eC_)
       {_eC_ = caml_wrap_exception(_eC_);
        if(_eC_[1] === Failure)
         try
          {var _eA_=_V_(_x_(bi1),bi2);return _eA_}
         catch(_eD_)
          {_eD_ = caml_wrap_exception(_eD_);
           if(_eD_[1] === Failure)throw Out_of_memory;
           throw _eD_}
        throw _eC_}}
    function _X_(base,n,bi)
     {var match=_d_(n);
      if(-1 === match)
       {var
         nat=_p_(base,- n | 0),
         len_nat=runtime.num_digits_nat(nat,0,length_nat(nat)),
         len_bi=num_digits_big_int(bi);
        if(len_bi < len_nat)
         return caml_call1(Pervasives[1],cst_base_power_big_int);
        if(len_bi === len_nat)
         if(-1 === runtime.compare_digits_nat(bi[2],len_bi,nat,len_nat))
          return caml_call1(Pervasives[1],cst_base_power_big_int$0);
        var copy=runtime.create_nat(len_bi + 1 | 0);
        runtime.blit_nat(copy,0,bi[2],0,len_bi);
        runtime.set_digit_nat(copy,len_bi,0);
        runtime.div_nat(copy,0,len_bi + 1 | 0,nat,0,len_nat);
        if(is_zero_nat(copy,0,len_nat))
         {var _ey_=copy_nat(copy,len_nat,1);return [0,bi[1],_ey_]}
        return caml_call1(Pervasives[1],cst_base_power_big_int$1)}
      if(0 === match)return bi;
      var
       nat$0=_p_(base,n),
       len_nat$0=runtime.num_digits_nat(nat$0,0,length_nat(nat$0)),
       len_bi$0=num_digits_big_int(bi),
       new_len=len_bi$0 + len_nat$0 | 0,
       nat$1=make_nat(new_len);
      if(len_nat$0 < len_bi$0)
       runtime.mult_nat(nat$1,0,new_len,bi[2],0,len_bi$0,nat$0,0,len_nat$0);
      else
       runtime.mult_nat(nat$1,0,new_len,nat$0,0,len_nat$0,bi[2],0,len_bi$0);
      if(is_zero_nat(nat$1,0,new_len))return zero_big_int;
      var _ez_=bi[1];
      if(1 !== _ez_)
       if(-1 !== _ez_)
        {var
          switch$0=
           0 === _ez_
            ?is_zero_nat
               (nat$1,0,runtime.num_digits_nat(nat$1,0,length_nat(nat$1)))
              ?0
              :1
            :1;
         if(switch$0)return caml_call1(Pervasives[1],cst_create_big_int)}
      return [0,_ez_,nat$1]}
    function _Y_(bi){return caml_float_of_string(_O_(bi))}
    function _Z_(bi)
     {var _ew_=bi[1];
      if(-1 === _ew_)return caml_call1(Pervasives[1],cst_sqrt_big_int);
      if(0 === _ew_)return zero_big_int;
      var _ex_=num_digits_big_int(bi);
      return [0,1,sqrt_nat(bi[2],0,_ex_)]}
    function ___(bi)
     {if(0 === bi[1])return zero_big_int;
      var
       len_bi=num_digits_big_int(bi),
       len_res=2 * len_bi | 0,
       res=make_nat(len_res);
      runtime.square_nat(res,0,len_res,bi[2],0,len_bi);
      return [0,1,res]}
    function _$_(s,off_set,length)
     {var l=(length + off_set | 0) - 1 | 0;
      if(53 <= caml_string_get(s,l))
       {var l$2=l - 1 | 0,l$0=l$2;
        for(;;)
         {if(l$0 < off_set)return 1;
          var current_char=caml_string_get(s,l$0);
          if(57 === current_char)
           {caml_string_set(s,l$0,48);var l$1=l$0 - 1 | 0,l$0=l$1;continue}
          caml_string_set(s,l$0,caml_call1(Char[1],current_char + 1 | 0));
          return 0}}
      return 0}
    function _aa_(prec,bi)
     {var
       len_bi=num_digits_big_int(bi),
       _eg_=_S_(cst_100000000),
       _eh_=_S_(cst_963295986),
       _ei_=
        _x_
         (add_int_big_int
           (- prec | 0,
            div_big_int
             (mult_big_int(big_int_of_int(len_bi - 1 | 0),_eh_),_eg_))),
       n=caml_call2(Pervasives[5],0,_ei_),
       _ej_=_O_(div_big_int(bi,_T_(10,n))),
       s=caml_call1(Bytes[34],_ej_),
       match=
        45 === caml_string_get(s,0)?[0,cst$0,1,prec + 1 | 0]:[0,cst$2,0,prec],
       off=match[2],
       sign=match[1];
      if(_$_(s,off,prec + 1 | 0))
       {var
         _ek_=
          caml_call1
           (Pervasives[20],
            ((n + 1 | 0) - off | 0) + caml_ml_string_length(s) | 0),
         _el_=caml_call2(Pervasives[16],cst_e,_ek_),
         _em_=caml_call2(String[1],prec,48),
         _en_=caml_call2(Pervasives[16],_em_,_el_),
         _eo_=caml_call2(Pervasives[16],cst_1,_en_);
        return caml_call2(Pervasives[16],sign,_eo_)}
      var
       _ep_=
        caml_call1
         (Pervasives[20],
          (n - (off + 1 | 0) | 0) + caml_ml_string_length(s) | 0),
       _eq_=caml_call2(Pervasives[16],cst_e$0,_ep_),
       _er_=caml_call3(Bytes[8],s,off + 1 | 0,prec - 1 | 0),
       _es_=caml_call2(Pervasives[16],_er_,_eq_),
       _et_=caml_call2(Pervasives[16],cst$1,_es_),
       _eu_=caml_call3(Bytes[8],s,off,1),
       _ev_=caml_call2(Pervasives[16],_eu_,_et_);
      return caml_call2(Pervasives[16],sign,_ev_)}
    function _ab_(bi,n)
     {if(0 <= n)
       {if(0 === n)return bi;
        if(0 === bi[1])return bi;
        var
         size_bi=num_digits_big_int(bi),
         size_res=size_bi + caml_div((n + _j_ | 0) - 1 | 0,_j_) | 0,
         res=runtime.create_nat(size_res),
         ndigits=caml_div(n,_j_);
        runtime.set_to_zero_nat(res,0,ndigits);
        runtime.blit_nat(res,ndigits,bi[2],0,size_bi);
        var nbits=caml_mod(n,_j_);
        if(0 < nbits)
         runtime.shift_left_nat
          (res,ndigits,size_bi,res,ndigits + size_bi | 0,nbits);
        return [0,bi[1],res]}
      return caml_call1(Pervasives[1],cst_shift_left_big_int)}
    function _ac_(bi,n)
     {if(0 <= n)
       {if(0 === n)return bi;
        if(0 === bi[1])return bi;
        var
         size_bi=num_digits_big_int(bi),
         ndigits=caml_div(n,_j_),
         nbits=caml_mod(n,_j_);
        if(size_bi <= ndigits)return zero_big_int;
        var size_res=size_bi - ndigits | 0,res=runtime.create_nat(size_res);
        runtime.blit_nat(res,0,bi[2],ndigits,size_res);
        if(0 < nbits)
         {var tmp=runtime.create_nat(1);
          runtime.shift_right_nat(res,0,size_res,tmp,0,nbits)}
        return is_zero_nat(res,0,size_res)?zero_big_int:[0,bi[1],res]}
      return caml_call1(Pervasives[1],cst_shift_right_towards_zero_big_int)}
    function _ad_(bi,n)
     {if(0 <= n)
       {if(0 <= bi[1])return _ac_(bi,n);
        if(0 <= n)
         if(0 === n)
          var _ef_=zero_big_int;
         else
          {var
            size_res=caml_div((n + _j_ | 0) - 1 | 0,_j_),
            res=make_nat(size_res),
            _ee_=1 << caml_mod(n,_j_);
           runtime.set_digit_nat_native(res,caml_div(n,_j_),_ee_);
           runtime.decr_nat(res,0,size_res,0);
           var _ef_=[0,1,res]}
        else
         var _ef_=caml_call1(Pervasives[1],cst_two_power_m1_big_int);
        return _ac_(sub_big_int(bi,_ef_),n)}
      return caml_call1(Pervasives[1],cst_shift_right_big_int)}
    function _ae_(bi,ofs,n)
     {if(0 <= ofs)
       if(0 <= n)
        {if(0 === bi[1])return bi;
         var
          size_bi=num_digits_big_int(bi),
          size_res=caml_div((n + _j_ | 0) - 1 | 0,_j_),
          ndigits=caml_div(ofs,_j_),
          nbits=caml_mod(ofs,_j_),
          res=make_nat(size_res);
         if(ndigits < size_bi)
          {var _d$_=caml_call2(Pervasives[4],size_res,size_bi - ndigits | 0);
           runtime.blit_nat(res,0,bi[2],ndigits,_d$_)}
         if(bi[1] < 0)
          {runtime.complement_nat(res,0,size_res);
           var i=0;
           for(;;)
            {var _ea_=ndigits <= i?1:0;
             if(_ea_)
              var _eb_=_ea_;
             else
              {var _ec_=size_bi <= i?1:0;
               if(_ec_)
                var _eb_=_ec_;
               else
                {var _ed_=runtime.is_digit_zero(bi[2],i);
                 if(_ed_){var i$0=i + 1 | 0,i=i$0;continue}
                 var _eb_=_ed_}}
             if(_eb_)runtime.incr_nat(res,0,size_res,1);
             break}}
         if(0 < nbits)
          {var tmp=runtime.create_nat(1);
           runtime.shift_right_nat(res,0,size_res,tmp,0,nbits)}
         var n$0=caml_mod(n,_j_);
         if(0 < n$0)
          {var tmp$0=runtime.create_nat(1);
           runtime.set_digit_nat_native(tmp$0,0,-1 >>> (_j_ - n$0 | 0) | 0);
           runtime.land_digit_nat(res,size_res - 1 | 0,tmp$0,0)}
         return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
      return caml_call1(Pervasives[1],cst_extract_big_int)}
    function _af_(a,b)
     {if(0 <= a[1])
       if(0 <= b[1])
        {if(0 !== a[1])
          if(0 !== b[1])
           {var
             size_a=num_digits_big_int(a),
             size_b=num_digits_big_int(b),
             size_res=caml_call2(Pervasives[4],size_a,size_b),
             res=runtime.create_nat(size_res);
            runtime.blit_nat(res,0,a[2],0,size_res);
            var _d9_=size_res - 1 | 0,_d8_=0;
            if(! (_d9_ < 0))
             {var i=_d8_;
              for(;;)
               {runtime.land_digit_nat(res,i,b[2],i);
                var _d__=i + 1 | 0;
                if(_d9_ !== i){var i=_d__;continue}
                break}}
            return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
         return zero_big_int}
      return caml_call1(Pervasives[1],cst_and_big_int)}
    function _ag_(a,b)
     {if(0 <= a[1])
       if(0 <= b[1])
        {if(0 === a[1])return b;
         if(0 === b[1])return a;
         var
          size_a=num_digits_big_int(a),
          size_b=num_digits_big_int(b),
          size_res=caml_call2(Pervasives[5],size_a,size_b),
          res=runtime.create_nat(size_res),
          or_aux=
           function(a,b,size_b)
            {runtime.blit_nat(res,0,a[2],0,size_res);
             var _d6_=size_b - 1 | 0,_d5_=0;
             if(! (_d6_ < 0))
              {var i=_d5_;
               for(;;)
                {runtime.lor_digit_nat(res,i,b[2],i);
                 var _d7_=i + 1 | 0;
                 if(_d6_ !== i){var i=_d7_;continue}
                 break}}
             return 0};
         if(size_b <= size_a)or_aux(a,b,size_b);else or_aux(b,a,size_a);
         return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
      return caml_call1(Pervasives[1],cst_or_big_int)}
    var
     Big_int=
      [0,
       zero_big_int,
       unit_big_int,
       minus_big_int,
       abs_big_int,
       add_big_int,
       succ_big_int,
       add_int_big_int,
       sub_big_int,
       pred_big_int,
       mult_big_int,
       mult_int_big_int,
       ___,
       _Z_,
       quomod_big_int,
       div_big_int,
       mod_big_int,
       gcd_big_int,
       _T_,
       _U_,
       _V_,
       _W_,
       sign_big_int,
       compare_big_int,
       eq_big_int,
       le_big_int,
       ge_big_int,
       lt_big_int,
       gt_big_int,
       max_big_int,
       min_big_int,
       num_digits_big_int,
       _O_,
       _S_,
       big_int_of_int,
       _w_,
       _x_,
       _A_,
       _y_,
       _C_,
       _B_,
       _z_,
       _G_,
       _Y_,
       _af_,
       _ag_,
       function(a,b)
        {if(0 <= a[1])
          if(0 <= b[1])
           {if(0 === a[1])return b;
            if(0 === b[1])return a;
            var
             size_a=num_digits_big_int(a),
             size_b=num_digits_big_int(b),
             size_res=caml_call2(Pervasives[5],size_a,size_b),
             res=runtime.create_nat(size_res),
             xor_aux=
              function(a,b,size_b)
               {runtime.blit_nat(res,0,a[2],0,size_res);
                var _d3_=size_b - 1 | 0,_d2_=0;
                if(! (_d3_ < 0))
                 {var i=_d2_;
                  for(;;)
                   {runtime.lxor_digit_nat(res,i,b[2],i);
                    var _d4_=i + 1 | 0;
                    if(_d3_ !== i){var i=_d4_;continue}
                    break}}
                return 0};
            if(size_b <= size_a)xor_aux(a,b,size_b);else xor_aux(b,a,size_a);
            return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
         return caml_call1(Pervasives[1],cst_xor_big_int)},
       _ab_,
       _ad_,
       _ac_,
       _ae_,
       _L_,
       _N_,
       _X_,
       _R_,
       _$_,
       _aa_];
    caml_register_global(131,Big_int,"Big_int");
    var
     _ah_=[0,1],
     _ai_=[0,0],
     _aj_=[0,1],
     _ak_=[0,12],
     _al_=[0,0],
     Arith_flags=[0,_ah_,_ai_,_aj_,_ak_,_al_];
    caml_register_global(132,Arith_flags,"Arith_flags");
    function _am_(name)
     {if(0 === caml_ml_string_length(name))
       var s$0=s;
      else
       var
        _d1_=caml_call2(Pervasives[16],cst$3,s),
        s$0=caml_call2(Pervasives[16],name,_d1_);
      return caml_call1(Pervasives[2],s$0)}
    function _an_(r){return r[1]}
    function _ao_(r){return r[2]}
    function _ap_(r){return 0 === r[2][1]?1:0}
    function _aq_(r){return 0 === r[2][1]?_ah_[1]?_am_(cst$4):1:0}
    function _ar_(r){return r[1][1]}
    function _as_(r)
     {if(r[3])return r;
      if(_aq_(r)){r[1] = big_int_of_int(r[1][1]);r[3] = 1;return r}
      var p=gcd_big_int(r[1],r[2]);
      return eq_big_int(p,unit_big_int)
              ?(r[3] = 1,r)
              :(r[1]
                =
                div_big_int(r[1],p),
                r[2]
                =
                div_big_int(r[2],p),
                r[3]
                =
                1,
                r)}
    function _at_(r){return _ai_[1]?_as_(r):r}
    function _au_(r){return _aj_[1]?_as_(r):r}
    function _av_(bi1,bi2)
     {var match=bi2[1];
      if(-1 === match)
       {var _d0_=minus_big_int(bi2);
        return _at_([0,minus_big_int(bi1),_d0_,0])}
      return 0 === match
              ?_ah_[1]?_am_(cst_create_ratio):_at_([0,bi1,bi2,0])
              :_at_([0,bi1,bi2,0])}
    function _aw_(bi1,bi2)
     {var match=bi2[1];
      if(-1 === match)
       {var _dZ_=minus_big_int(bi2);return [0,minus_big_int(bi1),_dZ_,1]}
      return 0 === match
              ?_ah_[1]?_am_(cst_create_normalized_ratio):[0,bi1,bi2,1]
              :[0,bi1,bi2,1]}
    function _ax_(r){return r[3]}
    function _ay_(r,bi){return -1 === _ar_(r)?minus_big_int(bi):bi}
    function _az_(r)
     {var _dX_=r[3],_dY_=r[2];return [0,abs_big_int(r[1]),_dY_,_dX_]}
    function _aA_(r){return eq_big_int(_as_(r)[2],unit_big_int)}
    function _aB_(r1,r2)
     {if(_ai_[1])
       {var _dQ_=_as_(r2)[2],p=gcd_big_int(_as_(r1)[2],_dQ_);
        if(eq_big_int(p,unit_big_int))
         {var _dR_=mult_big_int(r1[2],r2[2]),_dS_=mult_big_int(r2[1],r1[2]);
          return [0,add_big_int(mult_big_int(r1[1],r2[2]),_dS_),_dR_,1]}
        var
         d1=div_big_int(r1[2],p),
         d2=div_big_int(r2[2],p),
         _dT_=mult_big_int(d1,r2[1]),
         n=add_big_int(mult_big_int(r1[1],d2),_dT_),
         p$0=gcd_big_int(n,p),
         _dU_=mult_big_int(d1,div_big_int(r2[2],p$0));
        return [0,div_big_int(n,p$0),_dU_,1]}
      var _dV_=mult_big_int(r1[2],r2[2]),_dW_=mult_big_int(r1[2],r2[1]);
      return [0,add_big_int(mult_big_int(r1[1],r2[2]),_dW_),_dV_,0]}
    function _aC_(r)
     {var _dO_=r[3],_dP_=r[2];return [0,minus_big_int(r[1]),_dP_,_dO_]}
    function _aD_(i,r)
     {_at_(r);
      var _dL_=r[3],_dM_=r[2],_dN_=r[1];
      return [0,add_big_int(mult_int_big_int(i,r[2]),_dN_),_dM_,_dL_]}
    function _aE_(bi,r)
     {_at_(r);
      var _dI_=r[3],_dJ_=r[2],_dK_=r[1];
      return [0,add_big_int(mult_big_int(bi,r[2]),_dK_),_dJ_,_dI_]}
    function _aF_(r1,r2){return _aB_(r1,_aC_(r2))}
    function _aG_(r1,r2)
     {if(_ai_[1])
       {var
         _dA_=_as_(r2)[2],
         p1=gcd_big_int(_as_(r1)[1],_dA_),
         p2=gcd_big_int(r2[1],r1[2]);
        if(eq_big_int(p1,unit_big_int))
         var _dB_=[0,r1[1],r2[2]];
        else
         var _dG_=div_big_int(r2[2],p1),_dB_=[0,div_big_int(r1[1],p1),_dG_];
        var _dC_=_dB_[2],_dD_=_dB_[1];
        if(eq_big_int(p2,unit_big_int))
         var match=[0,r2[1],r1[2]];
        else
         var _dF_=div_big_int(r1[2],p2),match=[0,div_big_int(r2[1],p2),_dF_];
        var d1=match[2],n2=match[1],_dE_=mult_big_int(d1,_dC_);
        return [0,mult_big_int(_dD_,n2),_dE_,1]}
      var _dH_=mult_big_int(r1[2],r2[2]);
      return [0,mult_big_int(r1[1],r2[1]),_dH_,0]}
    function _aH_(i,r)
     {if(_ai_[1])
       {var _du_=big_int_of_int(i),p=gcd_big_int(_as_(r)[2],_du_);
        if(eq_big_int(p,unit_big_int))
         {var _dv_=r[2],_dw_=r[1];
          return [0,mult_big_int(big_int_of_int(i),_dw_),_dv_,1]}
        var _dx_=div_big_int(r[2],p),_dy_=r[1];
        return [0,mult_big_int(div_big_int(big_int_of_int(i),p),_dy_),_dx_,1]}
      var _dz_=r[2];
      return [0,mult_int_big_int(i,r[1]),_dz_,0]}
    function _aI_(bi,r)
     {if(_ai_[1])
       {var p=gcd_big_int(_as_(r)[2],bi);
        if(eq_big_int(p,unit_big_int))
         {var _dq_=r[2];return [0,mult_big_int(bi,r[1]),_dq_,1]}
        var _dr_=div_big_int(r[2],p),_ds_=r[1];
        return [0,mult_big_int(div_big_int(bi,p),_ds_),_dr_,1]}
      var _dt_=r[2];
      return [0,mult_big_int(bi,r[1]),_dt_,0]}
    function _aJ_(r)
     {_at_(r);var _do_=r[3],_dp_=___(r[2]);return [0,___(r[1]),_dp_,_do_]}
    function _aK_(r)
     {if(_ah_[1])if(0 === r[1][1])return _am_(cst_inverse_ratio);
      var _dm_=r[3],_dn_=abs_big_int(r[1]);
      return [0,_ay_(r,r[2]),_dn_,_dm_]}
    function _aL_(r1,r2){return _aG_(r1,_aK_(r2))}
    function _aM_(r)
     {if(_ap_(r))return _am_(cst_integer_ratio);
      if(0 === _ar_(r))return zero_big_int;
      var _dl_=abs_big_int(r[2]);
      return _ay_(r,div_big_int(abs_big_int(r[1]),_dl_))}
    function _aN_(r){_aq_(r);return div_big_int(r[1],r[2])}
    function _aO_(r)
     {_aq_(r);
      var
       abs_num=abs_big_int(r[1]),
       bi=div_big_int(abs_num,r[2]),
       _dk_=r[2],
       bi$0=
        -1
         ===
         sub_big_int
           (mult_int_big_int(2,sub_big_int(abs_num,mult_big_int(r[2],bi))),
            _dk_)
          [1]
         ?bi
         :succ_big_int(bi);
      return _ay_(r,bi$0)}
    function _aP_(r){return _aA_(r)?r[1]:succ_big_int(_aN_(r))}
    function _aQ_(r1,r2)
     {_as_(r1);
      _as_(r2);
      var _dj_=eq_big_int(r1[1],r2[1]);
      return _dj_?eq_big_int(r1[2],r2[2]):_dj_}
    function _aR_(r1,r2)
     {if(_aq_(r1))
       {var sign_num_r1=r1[1][1];
        if(_aq_(r2))
         {var sign_num_r2=r2[1][1];
          if(1 === sign_num_r1)if(-1 === sign_num_r2)return 1;
          if(-1 === sign_num_r1)if(1 === sign_num_r2)return -1;
          return 0}
        return sign_num_r1}
      if(_aq_(r2))return - r2[1][1] | 0;
      var match=_i_(r1[1][1],r2[1][1]),switcher=match + 1 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher){case 0:return -1;case 1:break;default:return 1}
      if(eq_big_int(r1[2],r2[2]))return compare_big_int(r1[1],r2[1]);
      var _di_=mult_big_int(r1[2],r2[1]);
      return compare_big_int(mult_big_int(r1[1],r2[2]),_di_)}
    function _aS_(r1,r2){return _aR_(r1,r2) < 0?1:0}
    function _aT_(r1,r2){return _aR_(r1,r2) <= 0?1:0}
    function _aU_(r1,r2){return 0 < _aR_(r1,r2)?1:0}
    function _aV_(r1,r2){return 0 <= _aR_(r1,r2)?1:0}
    function _aW_(r1,r2){return _aS_(r1,r2)?r2:r1}
    function _aX_(r1,r2){return _aU_(r1,r2)?r2:r1}
    function _aY_(bi,r){var _dh_=_aA_(r);return _dh_?eq_big_int(bi,r[1]):_dh_}
    function _aZ_(bi,r)
     {_as_(r);
      if(_aq_(r))return - r[1][1] | 0;
      var _dg_=r[1];
      return compare_big_int(mult_big_int(bi,r[2]),_dg_)}
    function _a0_(bi,r){return _aZ_(bi,r) < 0?1:0}
    function _a1_(bi,r){return _aZ_(bi,r) <= 0?1:0}
    function _a2_(bi,r){return 0 < _aZ_(bi,r)?1:0}
    function _a3_(bi,r){return 0 <= _aZ_(bi,r)?1:0}
    function _a4_(r)
     {if(_aA_(r))if(_w_(r[1]))return _x_(r[1]);
      return caml_call1(Pervasives[2],cst_integer_argument_required)}
    function _a5_(i){return [0,big_int_of_int(i),unit_big_int,1]}
    function _a6_(nat){return [0,_N_(nat),unit_big_int,1]}
    function _a7_(r)
     {_as_(r);
      return _aA_(r)
              ?-1 < r[1][1]
                ?_L_(r[1])
                :caml_call1(Pervasives[2],cst_nat_of_ratio)
              :caml_call1(Pervasives[2],cst_nat_of_ratio$0)}
    function _a8_(bi){return [0,bi,unit_big_int,1]}
    function _a9_(r)
     {_as_(r);
      return _aA_(r)?r[1]:caml_call1(Pervasives[2],cst_big_int_of_ratio)}
    function _a__(i,r){_aq_(r);return _aH_(i,_aK_(r))}
    function _a$_(r,i){return _aL_(r,_a5_(i))}
    function _ba_(bi,r){_aq_(r);return _aI_(bi,_aK_(r))}
    function _bb_(r,bi){return _aL_(r,_a8_(bi))}
    function _bc_(n,r)
     {if(_ap_(r))return _am_(cst_approx_ratio_fix);
      var sign_r=_ar_(r);
      if(0 === sign_r)return cst_0;
      if(0 <= n)
       {var
         _db_=r[2],
         s1=_r_(_L_(div_big_int(_X_(10,n + 1 | 0,abs_big_int(r[1])),_db_))),
         s2=
          _$_(caml_call1(Bytes[34],s1),0,caml_ml_string_length(s1))
           ?caml_call2(Pervasives[16],cst_1$0,s1)
           :s1,
         l2=caml_ml_string_length(s2) - 1 | 0;
        if(n < l2)
         {var s=caml_call2(Bytes[1],l2 + 2 | 0,48),_dc_=-1 === sign_r?45:43;
          caml_string_set(s,0,_dc_);
          caml_call5(String[6],s2,0,s,1,l2 - n | 0);
          caml_string_set(s,(l2 - n | 0) + 1 | 0,46);
          caml_call5(String[6],s2,l2 - n | 0,s,(l2 - n | 0) + 2 | 0,n);
          return caml_call1(Bytes[33],s)}
        var s$0=caml_call2(Bytes[1],n + 3 | 0,48),_dd_=-1 === sign_r?45:43;
        caml_string_set(s$0,0,_dd_);
        caml_string_set(s$0,2,46);
        caml_call5(String[6],s2,0,s$0,(n + 3 | 0) - l2 | 0,l2);
        return caml_call1(Bytes[33],s$0)}
      var
       _de_=_X_(10,- n | 0,r[2]),
       s$1=_O_(div_big_int(abs_big_int(r[1]),_de_)),
       len=caml_ml_string_length(s$1) + 1 | 0,
       s$2=caml_call2(Bytes[1],len,48),
       _df_=-1 === sign_r?45:43;
      caml_string_set(s$2,0,_df_);
      caml_call5(String[6],s$1,0,s$2,1,len - 1 | 0);
      return caml_call1(Bytes[33],s$2)}
    function _bd_(n)
     {return caml_ml_string_length(caml_call1(Pervasives[20],n))}
    function _be_(n,r)
     {if(_ap_(r))return _am_(cst_approx_ratio_exp);
      if(0 < n)
       {var sign_r=_ar_(r),i$4=[0,n + 3 | 0];
        if(0 === sign_r)
         {var _cY_=[0,cst_0$0,[0,caml_call2(String[1],n,48),_bf_]];
          return caml_call2(String[7],cst$5,_cY_)}
        var r$0=_az_(r);
        _at_(r$0);
        if(_ap_(r$0))
         var msd=_am_(cst_msd_ratio);
        else
         if(0 === r$0[1][1])
          var msd=0;
         else
          {var
            s1=_O_(r$0[1]),
            s=_O_(r$0[2]),
            size_num=caml_ml_string_length(s1),
            lim=caml_ml_string_length(s),
            i$3=caml_call2(Pervasives[4],size_num,lim),
            m=size_num - lim | 0,
            i=0;
           for(;;)
            {if(i$3 <= i)
              var cmp=0;
             else
              {var
                c1=caml_string_get(s1,i),
                c2=caml_string_get(s,i),
                c=_i_(c1,c2);
               if(0 === c){var i$0=i + 1 | 0,i=i$0;continue}
               var cmp=c}
             var switcher=cmp + 1 | 0;
             if(2 < switcher >>> 0)
              var switch$0=0;
             else
              switch(switcher)
               {case 0:var msd=m - 1 | 0,switch$0=1;break;
                case 1:var switch$0=0;break;
                default:var msd=m,switch$0=1}
             if(! switch$0)
              if(0 <= m)
               var msd=m;
              else
               {var i$1=i$3;
                for(;;)
                 {var _cV_=lim <= i$1?1:0;
                  if(_cV_)
                   var _cW_=_cV_;
                  else
                   {var _cX_=48 === caml_string_get(s,i$1)?1:0;
                    if(_cX_){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
                    var _cW_=_cX_}
                  var msd=_cW_?m:m - 1 | 0;
                  break}}
             break}}
        var k=n - msd | 0;
        if(0 <= k)
         var _cZ_=r[2],_c0_=div_big_int(_X_(10,k,abs_big_int(r[1])),_cZ_);
        else
         var
          _da_=_X_(10,- k | 0,r[2]),
          _c0_=div_big_int(abs_big_int(r[1]),_da_);
        var nat=_L_(_c0_),s$0=_r_(nat);
        if(_$_(caml_call1(Bytes[34],s$0),0,caml_ml_string_length(s$0)))
         {var
           m$0=_bd_(msd + 1 | 0),
           str=caml_call2(Bytes[1],(n + m$0 | 0) + 4 | 0,48),
           _c1_=3,
           _c2_=0,
           _c3_=0,
           _c4_=-1 === sign_r?cst_1$1:cst_1$2;
          caml_call5(String[6],_c4_,_c3_,str,_c2_,_c1_);
          caml_string_set(str,i$4[1],101);
          i$4[1]++;
          if(0 === m$0)
           caml_string_set(str,i$4[1],48);
          else
           {var _c5_=i$4[1],_c6_=caml_call1(Pervasives[20],msd + 1 | 0);
            caml_call5(String[6],_c6_,0,str,_c5_,m$0)}
          return caml_call1(Bytes[33],str)}
        var
         m$1=_bd_(msd + 1 | 0),
         p=n + 3 | 0,
         str$0=caml_call2(Bytes[1],(m$1 + p | 0) + 1 | 0,48),
         _c7_=3,
         _c8_=0,
         _c9_=0,
         _c__=-1 === sign_r?cst_0$1:cst_0$2;
        caml_call5(String[6],_c__,_c9_,str$0,_c8_,_c7_);
        caml_call5(String[6],s$0,0,str$0,3,n);
        caml_string_set(str$0,p,101);
        if(0 === m$1)
         caml_string_set(str$0,p + 1 | 0,48);
        else
         {var _c$_=caml_call1(Pervasives[20],msd + 1 | 0);
          caml_call5(String[6],_c$_,0,str$0,p + 1 | 0,m$1)}
        return caml_call1(Bytes[33],str$0)}
      return caml_call1(Pervasives[1],cst_approx_ratio_exp$0)}
    function _bg_(r)
     {var s=_be_(_ak_[1],r);
      return 43 === caml_string_get(s,0)
              ?caml_call3(String[4],s,1,caml_ml_string_length(s) - 1 | 0)
              :s}
    function _bh_(r)
     {_au_(r);
      if(_al_[1])return _bg_(r);
      var
       _cS_=_O_(r[2]),
       _cT_=caml_call2(Pervasives[16],cst$6,_cS_),
       _cU_=_O_(r[1]);
      return caml_call2(Pervasives[16],_cU_,_cT_)}
    function _bi_(s)
     {try
       {var
         n=caml_call2(String[14],s,47),
         _cP_=_R_(s,n + 1 | 0,(caml_ml_string_length(s) - n | 0) - 1 | 0),
         _cQ_=_av_(_R_(s,0,n),_cP_);
        return _cQ_}
      catch(_cR_)
       {_cR_ = caml_wrap_exception(_cR_);
        if(_cR_ === Not_found)return [0,_S_(s),unit_big_int,1];
        throw _cR_}}
    function _bj_(r){return caml_float_of_string(_bg_(r))}
    function _bk_(r,n){var _cO_=_U_(r[2],n);return _av_(_U_(r[1],n),_cO_)}
    function _bl_(r,bi){var _cN_=_W_(r[2],bi);return _av_(_W_(r[1],bi),_cN_)}
    var
     Ratio=
      [0,
       _ap_,
       _an_,
       _ao_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _be_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_];
    caml_register_global(134,Ratio,"Ratio");
    var biggest_INT=big_int_of_int(_g_),_bm_=big_int_of_int(_h_);
    function _bn_(bi)
     {if(le_big_int(bi,biggest_INT))if(ge_big_int(bi,_bm_))return [0,_x_(bi)];
      return [1,bi]}
    function _bo_(r)
     {_as_(r);return _aA_(r)?_w_(r[1])?[0,_x_(r[1])]:[1,r[1]]:[2,r]}
    function _bp_(a,match)
     {switch(a[0])
       {case 0:
         var _cJ_=a[1];
         switch(match[0])
          {case 0:
            var int2=match[1],r=_cJ_ + int2 | 0;
            if(0 <= (_cJ_ ^ int2 | _cJ_ ^ r ^ -1))
             {var _cK_=big_int_of_int(int2);
              return [1,add_big_int(big_int_of_int(_cJ_),_cK_)]}
            return [0,r];
           case 1:var bi=match[1];return _bn_(add_int_big_int(_cJ_,bi));
           default:var r$0=match[1];return [2,_aD_(_cJ_,r$0)]}
        case 1:
         var _cL_=a[1];
         switch(match[0])
          {case 0:var i=match[1];return _bn_(add_int_big_int(i,_cL_));
           case 1:var bi2=match[1];return _bn_(add_big_int(_cL_,bi2));
           default:var r$1=match[1];return [2,_aE_(_cL_,r$1)]}
        default:
         var _cM_=a[1];
         switch(match[0])
          {case 0:var i$0=match[1];return [2,_aD_(i$0,_cM_)];
           case 1:var bi$0=match[1];return [2,_aE_(bi$0,_cM_)];
           default:var r2=match[1];return _bo_(_aB_(_cM_,r2))}}}
    function _bq_(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === _f_?[1,minus_big_int(big_int_of_int(i))]:[0,- i | 0];
        case 1:var bi=param[1];return [1,minus_big_int(bi)];
        default:var r=param[1];return [2,_aC_(r)]}}
    function _br_(n1,n2){return _bp_(n1,_bq_(n2))}
    function _bs_(a,match)
     {switch(a[0])
       {case 0:
         var _cE_=a[1];
         switch(match[0])
          {case 0:
            var int2=match[1],_cF_=_c_(int2);
            if((_c_(_cE_) + _cF_ | 0) < _e_)return [0,caml_mul(_cE_,int2)];
            var _cG_=big_int_of_int(int2);
            return _bn_(mult_big_int(big_int_of_int(_cE_),_cG_));
           case 1:var bi=match[1];return _bn_(mult_int_big_int(_cE_,bi));
           default:var r=match[1];return _bo_(_aH_(_cE_,r))}
        case 1:
         var _cH_=a[1];
         switch(match[0])
          {case 0:var i=match[1];return _bn_(mult_int_big_int(i,_cH_));
           case 1:var bi2=match[1];return _bn_(mult_big_int(_cH_,bi2));
           default:var r$0=match[1];return _bo_(_aI_(_cH_,r$0))}
        default:
         var _cI_=a[1];
         switch(match[0])
          {case 0:var i$0=match[1];return _bo_(_aH_(i$0,_cI_));
           case 1:var bi$0=match[1];return _bo_(_aI_(bi$0,_cI_));
           default:var r2=match[1];return _bo_(_aG_(_cI_,r2))}}}
    function _bt_(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return (2 * _c_(i) | 0) < _e_
                 ?[0,caml_mul(i,i)]
                 :_bn_(___(big_int_of_int(i)));
        case 1:var bi=param[1];return [1,___(bi)];
        default:var r=param[1];return [2,_aJ_(r)]}}
    function _bu_(n1,n2)
     {switch(n1[0])
       {case 0:
         var i1=n1[1];
         switch(n2[0])
          {case 0:
            var i2=n2[1],_cD_=big_int_of_int(i2);
            return _bo_(_av_(big_int_of_int(i1),_cD_));
           case 1:var bi2=n2[1];return _bo_(_av_(big_int_of_int(i1),bi2));
           default:var r2=n2[1];return _bo_(_a__(i1,r2))}
        case 1:
         var bi1=n1[1];
         switch(n2[0])
          {case 0:var i2$0=n2[1];return _bo_(_av_(bi1,big_int_of_int(i2$0)));
           case 1:var bi2$0=n2[1];return _bo_(_av_(bi1,bi2$0));
           default:var r2$0=n2[1];return _bo_(_ba_(bi1,r2$0))}
        default:
         var r1=n1[1];
         switch(n2[0])
          {case 0:var i2$1=n2[1];return _bo_(_a$_(r1,i2$1));
           case 1:var bi2$1=n2[1];return _bo_(_bb_(r1,bi2$1));
           default:var r2$1=n2[1];return _bo_(_aL_(r1,r2$1))}}}
    function _bv_(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return _bn_(_aN_(r))}}
    function _bw_(param)
     {switch(param[0])
       {case 0:var i=param[1];return _a5_(i);
        case 1:var bi=param[1];return _a8_(bi);
        default:var r=param[1];return r}}
    function _bx_(n1,n2)
     {switch(n1[0])
       {case 0:
         var _cB_=n1[1];
         switch(n2[0])
          {case 0:
            var
             i2=n2[1],
             q=caml_div(_cB_,i2),
             r=caml_mod(_cB_,i2),
             q$0=0 <= r?q:0 < i2?q - 1 | 0:q + 1 | 0;
            return [0,q$0];
           case 1:
            var bi2=n2[1];return _bn_(div_big_int(big_int_of_int(_cB_),bi2));
           default:
            var r2=n2[1];return _bn_(_ay_(r2,_aN_(_a__(_cB_,_az_(r2)))))}
        case 1:
         var _cC_=n1[1];
         switch(n2[0])
          {case 0:
            var i2$0=n2[1];
            return _bn_(div_big_int(_cC_,big_int_of_int(i2$0)));
           case 1:var bi2$0=n2[1];return _bn_(div_big_int(_cC_,bi2$0));
           default:
            var r2$0=n2[1];return _bn_(_ay_(r2$0,_aN_(_ba_(_cC_,_az_(r2$0)))))}
        default:
         var r1=n1[1],r2$1=_bw_(n2);
         return _bn_(_ay_(r2$1,_aN_(_aL_(r1,_az_(r2$1)))))}}
    function _by_(n1,n2)
     {switch(n1[0])
       {case 0:
         var _cz_=n1[1];
         switch(n2[0])
          {case 0:
            var
             i2=n2[1],
             r=caml_mod(_cz_,i2),
             r$0=0 <= r?r:0 < i2?r + i2 | 0:r - i2 | 0;
            return [0,r$0];
           case 1:
            var bi2=n2[1];return _bn_(mod_big_int(big_int_of_int(_cz_),bi2))
           }
         break;
        case 1:
         var _cA_=n1[1];
         switch(n2[0])
          {case 0:
            var i2$0=n2[1];
            return _bn_(mod_big_int(_cA_,big_int_of_int(i2$0)));
           case 1:var bi2$0=n2[1];return _bn_(mod_big_int(_cA_,bi2$0))
           }
         break
        }
      return _br_(n1,_bs_(n2,_bx_(n1,n2)))}
    function _bF_(n,match$5)
     {switch(match$5[0])
       {case 0:
         var i$1=match$5[1];
         switch(n[0])
          {case 0:
            var i=n[1],match=_d_(i$1);
            return 0 === match
                    ?_bz_
                    :1 === match
                      ?_bn_(_T_(i,i$1))
                      :[2,_aw_(unit_big_int,_T_(i,- i$1 | 0))];
           case 1:
            var bi=n[1],match$0=_d_(i$1);
            return 0 === match$0
                    ?_bA_
                    :1 === match$0
                      ?_bn_(_U_(bi,i$1))
                      :[2,_aw_(unit_big_int,_U_(bi,- i$1 | 0))];
           default:
            var r=n[1],match$1=_d_(i$1);
            return 0 === match$1
                    ?_bB_
                    :1 === match$1?[2,_bk_(r,i$1)]:[2,_bk_(_aK_(r),- i$1 | 0)]}
        case 1:
         var bi$1=match$5[1];
         switch(n[0])
          {case 0:
            var i$0=n[1],match$2=bi$1[1];
            return 0 === match$2
                    ?_bC_
                    :1 === match$2
                      ?_bn_(_V_(i$0,bi$1))
                      :[2,_aw_(unit_big_int,_V_(i$0,minus_big_int(bi$1)))];
           case 1:
            var bi$0=n[1],match$3=bi$1[1];
            return 0 === match$3
                    ?_bD_
                    :1 === match$3
                      ?_bn_(_W_(bi$0,bi$1))
                      :[2,_aw_(unit_big_int,_W_(bi$0,minus_big_int(bi$1)))];
           default:
            var r$0=n[1],match$4=bi$1[1];
            if(0 === match$4)return _bE_;
            if(1 === match$4)return [2,_bl_(r$0,bi$1)];
            var _cy_=minus_big_int(bi$1);
            return [2,_bl_(_aK_(r$0),_cy_)]}
        default:return caml_call1(Pervasives[1],cst_power_num)}}
    function _bG_(param)
     {switch(param[0])
       {case 0:return 1;case 1:return 1;default:var r=param[1];return _aA_(r)}}
    function _bH_(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return _bn_(_aM_(r))}}
    function _bI_(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return _bn_(_aO_(r))}}
    function _bJ_(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return _bn_(_aP_(r))}}
    function _bK_(param)
     {switch(param[0])
       {case 0:var i=param[1];return _d_(i);
        case 1:var bi=param[1];return bi[1];
        default:var r=param[1];return _ar_(r)}}
    function _bL_(a,match)
     {switch(a[0])
       {case 0:
         var _cv_=a[1];
         switch(match[0])
          {case 0:var int2=match[1];return _cv_ === int2?1:0;
           case 1:var bi=match[1];return eq_big_int(big_int_of_int(_cv_),bi);
           default:var r=match[1];return _aY_(big_int_of_int(_cv_),r)}
        case 1:
         var _cw_=a[1];
         switch(match[0])
          {case 0:var i=match[1];return eq_big_int(big_int_of_int(i),_cw_);
           case 1:var bi2=match[1];return eq_big_int(_cw_,bi2);
           default:var r$0=match[1];return _aY_(_cw_,r$0)}
        default:
         var _cx_=a[1];
         switch(match[0])
          {case 0:var i$0=match[1];return _aY_(big_int_of_int(i$0),_cx_);
           case 1:var bi$0=match[1];return _aY_(bi$0,_cx_);
           default:var r2=match[1];return _aQ_(_cx_,r2)}}}
    function _bM_(a,b){return 1 - _bL_(a,b)}
    function _bN_(a,match)
     {switch(a[0])
       {case 0:
         var _cs_=a[1];
         switch(match[0])
          {case 0:var int2=match[1];return _i_(_cs_,int2);
           case 1:
            var bi=match[1];return compare_big_int(big_int_of_int(_cs_),bi);
           default:var r=match[1];return _aZ_(big_int_of_int(_cs_),r)}
        case 1:
         var _ct_=a[1];
         switch(match[0])
          {case 0:
            var i=match[1];return compare_big_int(_ct_,big_int_of_int(i));
           case 1:var bi2=match[1];return compare_big_int(_ct_,bi2);
           default:var r$0=match[1];return _aZ_(_ct_,r$0)}
        default:
         var _cu_=a[1];
         switch(match[0])
          {case 0:
            var i$0=match[1];return - _aZ_(big_int_of_int(i$0),_cu_) | 0;
           case 1:var bi$0=match[1];return - _aZ_(bi$0,_cu_) | 0;
           default:var r2=match[1];return _aR_(_cu_,r2)}}}
    function _bO_(num1,num2){return _bN_(num1,num2) < 0?1:0}
    function _bP_(num1,num2){return _bN_(num1,num2) <= 0?1:0}
    function _bQ_(num1,num2){return 0 < _bN_(num1,num2)?1:0}
    function _bR_(num1,num2){return 0 <= _bN_(num1,num2)?1:0}
    function _bS_(num1,num2){return _bO_(num1,num2)?num2:num1}
    function _bT_(num1,num2){return _bQ_(num1,num2)?num2:num1}
    function _bU_(param)
     {switch(param[0])
       {case 0:var i=param[1];return i;
        case 1:var bi=param[1];return _x_(bi);
        default:var r=param[1];return _a4_(r)}}
    function _bV_(i){return i === _f_?[1,big_int_of_int(i)]:[0,i]}
    function _bW_(param)
     {switch(param[0])
       {case 0:var i=param[1];return nat_of_int(i);
        case 1:var bi=param[1];return _L_(bi);
        default:var r=param[1];return _a7_(r)}}
    function _bX_(nat)
     {return is_nat_int(nat,0,length_nat(nat))
              ?[0,runtime.nth_digit_nat(nat,0)]
              :[1,_N_(nat)]}
    function _bY_(param)
     {switch(param[0])
       {case 0:var i=param[1];return big_int_of_int(i);
        case 1:var bi=param[1];return bi;
        default:var r=param[1];return _a9_(r)}}
    function _bZ_(n)
     {if(_aj_[1])
       switch(n[0])
        {case 0:var i=n[1],_cr_=[0,i];break;
         case 1:var bi=n[1],_cr_=_bn_(bi);break;
         default:var r=n[1],_cr_=_aA_(r)?_bn_(r[1]):[2,r]}
      else
       var _cr_=n;
      switch(_cr_[0])
       {case 0:var i$0=_cr_[1];return caml_call1(Pervasives[20],i$0);
        case 1:var bi$0=_cr_[1];return _al_[1]?_aa_(_ak_[1],bi$0):_O_(bi$0);
        default:var r$0=_cr_[1];return _bh_(r$0)}}
    function _b0_(s)
     {try
       {var flag=_ai_[1];
        _ai_[1] = 1;
        var r=_bi_(s);
        _ai_[1] = flag;
        var _cp_=eq_big_int(r[2],unit_big_int)?_bn_(r[1]):[2,r];
        return _cp_}
      catch(_cq_)
       {_cq_ = caml_wrap_exception(_cq_);
        if(_cq_[1] === Failure)
         return caml_call1(Pervasives[2],cst_num_of_string);
        throw _cq_}}
    function _b1_(param)
     {switch(param[0])
       {case 0:var i=param[1];return i;
        case 1:var bi=param[1];return _Y_(bi);
        default:var r=param[1];return _bj_(r)}}
    function _b2_(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === _g_?[1,succ_big_int(big_int_of_int(i))]:[0,i + 1 | 0];
        case 1:var bi=param[1];return _bn_(succ_big_int(bi));
        default:var r=param[1];return [2,_aD_(1,r)]}}
    function _b3_(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === _f_?[1,pred_big_int(big_int_of_int(i))]:[0,i - 1 | 0];
        case 1:var bi=param[1];return _bn_(pred_big_int(bi));
        default:var r=param[1];return [2,_aD_(-1,r)]}}
    function _b4_(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === _f_
                 ?[1,minus_big_int(big_int_of_int(i))]
                 :[0,caml_call1(Pervasives[6],i)];
        case 1:var bi=param[1];return [1,abs_big_int(bi)];
        default:var r=param[1];return [2,_az_(r)]}}
    function _b5_(n,num){return _bc_(n,_bw_(num))}
    function _b6_(n,num){return _be_(n,_bw_(num))}
    function _b7_(r){r[1] = _b2_(r[1]);return 0}
    var
     Num=
      [0,
       _bp_,
       _bp_,
       _bq_,
       _br_,
       _br_,
       _bs_,
       _bs_,
       _bt_,
       _bu_,
       _bu_,
       _bx_,
       _by_,
       _bF_,
       _bF_,
       _b4_,
       _b2_,
       _b3_,
       _b7_,
       function(r){r[1] = _b3_(r[1]);return 0},
       _bG_,
       _bH_,
       _bv_,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bO_,
       _bQ_,
       _bP_,
       _bR_,
       _bM_,
       _bL_,
       _bO_,
       _bP_,
       _bQ_,
       _bR_,
       _bN_,
       _bS_,
       _bT_,
       _bZ_,
       _b5_,
       _b6_,
       _b0_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bn_,
       _bY_,
       _bw_,
       _bo_,
       _b1_];
    caml_register_global(135,Num,"Num");
    function _b8_(param){return _ah_[1]}
    function _b9_(choice){_ah_[1] = choice;return 0}
    function _b__(param){return _ai_[1]}
    function _b$_(choice){_ai_[1] = choice;return 0}
    function _ca_(param){return _aj_[1]}
    function _cb_(choice){_aj_[1] = choice;return 0}
    function _cc_(param){return _ak_[1]}
    function _cd_(i){_ak_[1] = i;return 0}
    function _ce_(param){return _al_[1]}
    function _cf_(b){_al_[1] = b;return 0}
    function _cg_(s)
     {caml_call1(Pervasives[27],s);return caml_call1(Pervasives[27],cst$7)}
    function _ch_(param)
     {return 0 === param
              ?caml_call1(Pervasives[27],cst_OFF)
              :caml_call1(Pervasives[27],cst_ON)}
    var
     Arith_status=
      [0,
       function(param)
        {caml_call1(Pervasives[32],0);
         _cg_(cst_Normalization_during_computation);
         _ch_(_b__(0));
         caml_call1(Pervasives[32],0);
         caml_call1(Pervasives[27],cst_returned_by_get_normalize_ratio);
         caml_call1(Pervasives[32],0);
         caml_call1
          (Pervasives[27],cst_modifiable_with_set_normalize_ratio_your_choice);
         caml_call1(Pervasives[32],0);
         caml_call1(Pervasives[32],0);
         _cg_(cst_Normalization_when_printing);
         _ch_(_ca_(0));
         caml_call1(Pervasives[32],0);
         caml_call1
          (Pervasives[27],cst_returned_by_get_normalize_ratio_when_printing);
         caml_call1(Pervasives[32],0);
         caml_call1
          (Pervasives[27],
           cst_modifiable_with_set_normalize_ratio_when_printing_your_choice);
         caml_call1(Pervasives[32],0);
         caml_call1(Pervasives[32],0);
         _cg_(cst_Floating_point_approximation_when_printing_rational_numbers);
         _ch_(_ce_(0));
         caml_call1(Pervasives[32],0);
         caml_call1(Pervasives[27],cst_returned_by_get_approx_printing);
         caml_call1(Pervasives[32],0);
         caml_call1
          (Pervasives[27],cst_modifiable_with_set_approx_printing_your_choice);
         caml_call1(Pervasives[32],0);
         if(_ce_(0))
          {caml_call1(Pervasives[27],cst_Default_precision);
           var _co_=_cc_(0);
           caml_call1(Pervasives[29],_co_);
           caml_call1(Pervasives[32],0);
           caml_call1(Pervasives[27],cst_returned_by_get_floating_precision);
           caml_call1(Pervasives[32],0);
           caml_call1
            (Pervasives[27],
             cst_modifiable_with_set_floating_precision_your_choice);
           caml_call1(Pervasives[32],0);
           caml_call1(Pervasives[32],0)}
         else
          caml_call1(Pervasives[32],0);
         _cg_(cst_Error_when_a_rational_denominator_is_null);
         _ch_(_b8_(0));
         caml_call1(Pervasives[32],0);
         caml_call1
          (Pervasives[27],cst_returned_by_get_error_when_null_denominator);
         caml_call1(Pervasives[32],0);
         caml_call1
          (Pervasives[27],
           cst_modifiable_with_set_error_when_null_denominator_your_choice);
         return caml_call1(Pervasives[32],0)},
       _b8_,
       _b9_,
       _b__,
       _b$_,
       _ca_,
       _cb_,
       _ce_,
       _cf_,
       _cc_,
       _cd_];
    caml_register_global(136,Arith_status,"Arith_status");
    return}
  (function(){return this}()));


//# 1 "../.js/General/General.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_create_string=runtime.caml_create_string,
     caml_div=runtime.caml_div,
     caml_equal=runtime.caml_equal,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_frexp_float=runtime.caml_frexp_float,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_ldexp_float=runtime.caml_ldexp_float,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_new_string=runtime.caml_new_string,
     caml_notequal=runtime.caml_notequal,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_set=runtime.caml_string_set,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_IsMaxHeap=caml_new_string("IsMaxHeap"),
     cst_HasBlackRoot=caml_new_string("HasBlackRoot"),
     cst_IsRedBlack=caml_new_string("IsRedBlack"),
     cst_IsBlackBalanced=caml_new_string("IsBlackBalanced"),
     cst_IsBinarySearchTree=caml_new_string("IsBinarySearchTree"),
     cst_Empty=caml_new_string("Empty"),
     cst_EmptyPlus=caml_new_string("EmptyPlus"),
     cst_def$0=caml_new_string("def"),
     cst_def$1=caml_new_string("def"),
     cst_def=caml_new_string("def"),
     cst_val$0=caml_new_string("val"),
     cst_val=caml_new_string("val"),
     cst_Option_value$0=caml_new_string("Option.value"),
     cst_Nope=caml_new_string("Nope"),
     cst_Nope$0=caml_new_string("Nope"),
     cst_None$0=caml_new_string("None"),
     cst_NativeInt_exponentiate_Negative_exponent_4=
      caml_new_string("NativeInt.exponentiate: Negative exponent: -4"),
     cst_nope=caml_new_string("nope"),
     cst_You_called_me=caml_new_string("You called me!"),
     cst_42=caml_new_string("42"),
     cst_2_7_5=caml_new_string("2 7 5"),
     cst_7_2_4=caml_new_string("7 2 4"),
     cst_2_7_5_9=caml_new_string("2 7 5 9"),
     cst_7_2_4_5=caml_new_string("7 2 4 5"),
     cst_2_7_5_9_3=caml_new_string("2 7 5 9 3"),
     cst_7_2_4_5_3=caml_new_string("7 2 4 5 3"),
     cst_Raised_by_primitive_operation_at_file_Implementation_CallStack_ml_line_3_characters_15_49=
      caml_new_string
       ('Raised by primitive operation at file "Implementation/CallStack.ml", line 3, characters 15-49'),
     cst_Called_from_file_Implementation_CallStack_ml_line_3_characters_15_49=
      caml_new_string
       ('Called from file "Implementation/CallStack.ml", line 3, characters 15-49'),
     cst_List_head=caml_new_string("List.head"),
     cst_List_tail=caml_new_string("List.tail"),
     cst_init=caml_new_string("init"),
     cst_init_3_4=caml_new_string("init-3-4"),
     cst_Int_exponentiate_Negative_exponent_4=
      caml_new_string("Int.exponentiate: Negative exponent: -4"),
     cst_BigInt_exponentiate_Negative_exponent_4=
      caml_new_string("BigInt.exponentiate: Negative exponent: -4"),
     cst_Int64_exponentiate_Negative_exponent_4=
      caml_new_string("Int64.exponentiate: Negative exponent: -4"),
     cst_Int32_exponentiate_Negative_exponent_4=
      caml_new_string("Int32.exponentiate: Negative exponent: -4"),
     cst_bar$0=caml_new_string("bar"),
     cst_Foo_bar_42=caml_new_string("Foo bar 42"),
     cst_baz=caml_new_string("baz"),
     cst_Grmbl_baz_43=caml_new_string("Grmbl baz 43"),
     cst_List_nth=caml_new_string("List.nth"),
     cst_foo$3=caml_new_string("foo"),
     cst_foo$4=caml_new_string("foo"),
     cst_Integer=caml_new_string("Integer"),
     cst_to_float_one=caml_new_string("to_float one"),
     cst_to_int_one=caml_new_string("to_int one"),
     cst_to_float_zero=caml_new_string("to_float zero"),
     cst_to_int_zero=caml_new_string("to_int zero"),
     cst_RealNumber=caml_new_string("RealNumber"),
     cst_1=caml_new_string("1"),
     cst_0=caml_new_string("0"),
     cst_Number=caml_new_string("Number"),
     cst_Able$4=caml_new_string("Able"),
     cst_Able$3=caml_new_string("Able"),
     cst_Able$2=caml_new_string("Able"),
     cst_Able$1=caml_new_string("Able"),
     cst_Able$0=caml_new_string("Able"),
     cst_Able=caml_new_string("Able"),
     cst_Identifiable$4=caml_new_string("Identifiable"),
     cst_Identifiable$3=caml_new_string("Identifiable"),
     cst_Identifiable$2=caml_new_string("Identifiable"),
     cst_Identifiable$1=caml_new_string("Identifiable"),
     cst_Identifiable$0=caml_new_string("Identifiable"),
     cst_Identifiable=caml_new_string("Identifiable"),
     cst_flat_map_acc=caml_new_string("flat_map_acc"),
     cst_flat_map_i=caml_new_string("flat_map_i"),
     cst_flat_map=caml_new_string("flat_map"),
     cst_filter_map_acc=caml_new_string("filter_map_acc"),
     cst_filter_map_i=caml_new_string("filter_map_i"),
     cst_filter_map=caml_new_string("filter_map"),
     cst_filter_acc=caml_new_string("filter_acc"),
     cst_filter_i=caml_new_string("filter_i"),
     cst_filter=caml_new_string("filter"),
     cst_map_acc=caml_new_string("map_acc"),
     cst_map_i=caml_new_string("map_i"),
     cst_map=caml_new_string("map"),
     cst_FilterMapable_ToContainer=
      caml_new_string("FilterMapable.ToContainer"),
     cst_Ringoid=caml_new_string("Ringoid"),
     cst_PredSucc=caml_new_string("PredSucc"),
     cst_Parsable=caml_new_string("Parsable"),
     cst_Displayable=caml_new_string("Displayable"),
     cst_Comparable=caml_new_string("Comparable"),
     cst_Equatable=caml_new_string("Equatable"),
     cst_Representable=caml_new_string("Representable"),
     cst_verbose=caml_new_string("--verbose"),
     cst$3=caml_new_string("  "),
     cst$4=caml_new_string(""),
     cst_OK=caml_new_string("OK"),
     cst_Success=caml_new_string("Success"),
     partial=[12,41,0],
     cst$2=caml_new_string("[]"),
     cst$1=caml_new_string(""),
     cst_Normal=caml_new_string("Normal"),
     cst_SubNormal=caml_new_string("SubNormal"),
     cst_Zero=caml_new_string("Zero"),
     cst_Infinite=caml_new_string("Infinite"),
     cst_NotANumber=caml_new_string("NotANumber"),
     cst=caml_new_string(""),
     cst$0=caml_new_string(""),
     cst_Option_value=caml_new_string("Option.value"),
     cst_None=caml_new_string("None"),
     cst_General_Testing_TestFailure=
      caml_new_string("General.Testing.TestFailure"),
     cst_js=caml_new_string(".js"),
     cst_General_Testing_NoExceptionRaised=
      caml_new_string("General.Testing.NoExceptionRaised"),
     cst_General_Exception_Tests_TestException=
      caml_new_string("General.Exception.Tests.TestException"),
     cst_foo=caml_new_string("foo"),
     cst_foo$0=caml_new_string("foo"),
     cst_foo$1=caml_new_string("foo"),
     cst_bar=caml_new_string("bar"),
     cst_foo$2=caml_new_string("foo"),
     cst_Division_by_zero=caml_new_string("Division_by_zero"),
     cst_Exit_Pervasives_Exit=caml_new_string("Exit = Pervasives.Exit"),
     cst_DivisionByZero_Division_by_zero=
      caml_new_string("DivisionByZero = Division_by_zero"),
     cst_StackOverflow_Stack_overflow=
      caml_new_string("StackOverflow = Stack_overflow"),
     cst_NotFound_Not_found=caml_new_string("NotFound = Not_found"),
     cst_Failure_Failure=caml_new_string("Failure = Failure"),
     cst_InvalidArgument_Invalid_argument=
      caml_new_string("InvalidArgument = Invalid_argument"),
     cst_AssertFailure_Assert_failure=
      caml_new_string("AssertFailure = Assert_failure"),
     cst_MatchFailure_Match_failure=
      caml_new_string("MatchFailure = Match_failure"),
     cst_Aliases=caml_new_string("Aliases"),
     cst_invalid_argument=caml_new_string("invalid_argument"),
     cst_failure=caml_new_string("failure"),
     cst_raise_without_backtrace=caml_new_string("raise_without_backtrace"),
     cst_raise=caml_new_string("raise"),
     cst_Exception=caml_new_string("Exception"),
     cst_Int32=caml_new_string("Int32"),
     cst_l=caml_new_string("l"),
     _ni_=
      [0,[0,caml_new_string("43"),43],[0,[0,caml_new_string("-12"),-12],0]],
     cst_exponentiate_2l_4=caml_new_string("exponentiate 2l (-4)"),
     cst_Int32$0=caml_new_string("Int32"),
     cst_Int64=caml_new_string("Int64"),
     cst_L=caml_new_string("L"),
     _n7_=
      [0,
       [0,caml_new_string("43"),[255,43,0,0]],
       [0,[0,caml_new_string("-12"),[255,16777204,16777215,65535]],0]],
     cst_exponentiate_2L_4=caml_new_string("exponentiate 2L (-4)"),
     cst_Int64$0=caml_new_string("Int64"),
     _oq_=
      [0,
       [0,-3,caml_new_string("-3.")],
       [0,
        [0,-0,caml_new_string("-0.")],
        [0,
         [0,0,caml_new_string("0.")],
         [0,[0,1,caml_new_string("1.")],[0,[0,15,caml_new_string("15.")],0]]]]],
     _or_=
      [0,
       [0,caml_new_string("0"),0],
       [0,
        [0,caml_new_string("1"),1],
        [0,
         [0,caml_new_string("1.0"),1],
         [0,
          [0,caml_new_string("-1"),-1],
          [0,[0,caml_new_string("1_000"),1e3],0]]]]],
     _oG_=[0,[0,0,0],[0,[0,1,0],[0,[0,2,0],[0,[0,3,0],[0,[0,4,0],0]]]]],
     cst_NotANumber$0=caml_new_string("NotANumber-"),
     cst_NotANumber$1=caml_new_string("NotANumber"),
     cst_NotANumber$2=caml_new_string("NotANumber"),
     cst_Infinite$0=caml_new_string("Infinite-"),
     cst_Infinite$1=caml_new_string("Infinite-"),
     cst_Infinite$2=caml_new_string("Infinite+"),
     cst_Infinite$3=caml_new_string("Infinite+"),
     cst_Zero$0=caml_new_string("Zero-"),
     cst_Zero$1=caml_new_string("Zero"),
     cst_SubNormal$0=caml_new_string("SubNormal"),
     cst_Normal$0=caml_new_string("Normal"),
     cst_of_float=caml_new_string("of_float"),
     cst_Class=caml_new_string("Class"),
     cst_ceil=caml_new_string("ceil"),
     cst_Float=caml_new_string("Float"),
     cst_10000000000000000000000000000000000000000=
      caml_new_string("10000000000000000000000000000000000000000"),
     cst_10000000000=caml_new_string("10000000000"),
     cst_10000000000000000000000000000000000000000$0=
      caml_new_string("10000000000000000000000000000000000000000"),
     cst_10000000000000000000000000000000000000000$1=
      caml_new_string("10000000000000000000000000000000000000000"),
     cst_10=caml_new_string("10"),
     cst_100000=caml_new_string("100000"),
     cst_89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608=
      caml_new_string
       ("89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608"),
     cst_6739986666787659948666753771754907668409286105635143120275902562304=
      caml_new_string
       ("6739986666787659948666753771754907668409286105635143120275902562304"),
     cst_3369993333393829974333376885877453834204643052817571560137951281152=
      caml_new_string
       ("3369993333393829974333376885877453834204643052817571560137951281152"),
     cst_1684996666696914987166688442938726917102321526408785780068975640576=
      caml_new_string
       ("1684996666696914987166688442938726917102321526408785780068975640576"),
     cst_842498333348457493583344221469363458551160763204392890034487820288=
      caml_new_string
       ("842498333348457493583344221469363458551160763204392890034487820288"),
     cst_421249166674228746791672110734681729275580381602196445017243910144=
      caml_new_string
       ("421249166674228746791672110734681729275580381602196445017243910144"),
     cst_210624583337114373395836055367340864637790190801098222508621955072=
      caml_new_string
       ("210624583337114373395836055367340864637790190801098222508621955072"),
     cst_105312291668557186697918027683670432318895095400549111254310977536=
      caml_new_string
       ("105312291668557186697918027683670432318895095400549111254310977536"),
     cst_52656145834278593348959013841835216159447547700274555627155488768=
      caml_new_string
       ("52656145834278593348959013841835216159447547700274555627155488768"),
     cst_26328072917139296674479506920917608079723773850137277813577744384=
      caml_new_string
       ("26328072917139296674479506920917608079723773850137277813577744384"),
     cst_13164036458569648337239753460458804039861886925068638906788872192=
      caml_new_string
       ("13164036458569648337239753460458804039861886925068638906788872192"),
     cst_6582018229284824168619876730229402019930943462534319453394436096=
      caml_new_string
       ("6582018229284824168619876730229402019930943462534319453394436096"),
     cst_3291009114642412084309938365114701009965471731267159726697218048=
      caml_new_string
       ("3291009114642412084309938365114701009965471731267159726697218048"),
     cst_1645504557321206042154969182557350504982735865633579863348609024=
      caml_new_string
       ("1645504557321206042154969182557350504982735865633579863348609024"),
     cst_822752278660603021077484591278675252491367932816789931674304512=
      caml_new_string
       ("822752278660603021077484591278675252491367932816789931674304512"),
     cst_411376139330301510538742295639337626245683966408394965837152256=
      caml_new_string
       ("411376139330301510538742295639337626245683966408394965837152256"),
     cst_205688069665150755269371147819668813122841983204197482918576128=
      caml_new_string
       ("205688069665150755269371147819668813122841983204197482918576128"),
     cst_102844034832575377634685573909834406561420991602098741459288064=
      caml_new_string
       ("102844034832575377634685573909834406561420991602098741459288064"),
     cst_51422017416287688817342786954917203280710495801049370729644032=
      caml_new_string
       ("51422017416287688817342786954917203280710495801049370729644032"),
     cst_25711008708143844408671393477458601640355247900524685364822016=
      caml_new_string
       ("25711008708143844408671393477458601640355247900524685364822016"),
     cst_12855504354071922204335696738729300820177623950262342682411008=
      caml_new_string
       ("12855504354071922204335696738729300820177623950262342682411008"),
     cst_6427752177035961102167848369364650410088811975131171341205504=
      caml_new_string
       ("6427752177035961102167848369364650410088811975131171341205504"),
     cst_3213876088517980551083924184682325205044405987565585670602752=
      caml_new_string
       ("3213876088517980551083924184682325205044405987565585670602752"),
     cst_1606938044258990275541962092341162602522202993782792835301376=
      caml_new_string
       ("1606938044258990275541962092341162602522202993782792835301376"),
     cst_803469022129495137770981046170581301261101496891396417650688=
      caml_new_string
       ("803469022129495137770981046170581301261101496891396417650688"),
     cst_401734511064747568885490523085290650630550748445698208825344=
      caml_new_string
       ("401734511064747568885490523085290650630550748445698208825344"),
     cst_200867255532373784442745261542645325315275374222849104412672=
      caml_new_string
       ("200867255532373784442745261542645325315275374222849104412672"),
     cst_100433627766186892221372630771322662657637687111424552206336=
      caml_new_string
       ("100433627766186892221372630771322662657637687111424552206336"),
     cst_50216813883093446110686315385661331328818843555712276103168=
      caml_new_string
       ("50216813883093446110686315385661331328818843555712276103168"),
     cst_25108406941546723055343157692830665664409421777856138051584=
      caml_new_string
       ("25108406941546723055343157692830665664409421777856138051584"),
     cst_12554203470773361527671578846415332832204710888928069025792=
      caml_new_string
       ("12554203470773361527671578846415332832204710888928069025792"),
     cst_6277101735386680763835789423207666416102355444464034512896=
      caml_new_string
       ("6277101735386680763835789423207666416102355444464034512896"),
     cst_3138550867693340381917894711603833208051177722232017256448=
      caml_new_string
       ("3138550867693340381917894711603833208051177722232017256448"),
     cst_1569275433846670190958947355801916604025588861116008628224=
      caml_new_string
       ("1569275433846670190958947355801916604025588861116008628224"),
     cst_784637716923335095479473677900958302012794430558004314112=
      caml_new_string
       ("784637716923335095479473677900958302012794430558004314112"),
     cst_392318858461667547739736838950479151006397215279002157056=
      caml_new_string
       ("392318858461667547739736838950479151006397215279002157056"),
     cst_196159429230833773869868419475239575503198607639501078528=
      caml_new_string
       ("196159429230833773869868419475239575503198607639501078528"),
     cst_98079714615416886934934209737619787751599303819750539264=
      caml_new_string
       ("98079714615416886934934209737619787751599303819750539264"),
     cst_49039857307708443467467104868809893875799651909875269632=
      caml_new_string
       ("49039857307708443467467104868809893875799651909875269632"),
     cst_24519928653854221733733552434404946937899825954937634816=
      caml_new_string
       ("24519928653854221733733552434404946937899825954937634816"),
     cst_12259964326927110866866776217202473468949912977468817408=
      caml_new_string
       ("12259964326927110866866776217202473468949912977468817408"),
     cst_6129982163463555433433388108601236734474956488734408704=
      caml_new_string
       ("6129982163463555433433388108601236734474956488734408704"),
     cst_3064991081731777716716694054300618367237478244367204352=
      caml_new_string
       ("3064991081731777716716694054300618367237478244367204352"),
     cst_1532495540865888858358347027150309183618739122183602176=
      caml_new_string
       ("1532495540865888858358347027150309183618739122183602176"),
     cst_766247770432944429179173513575154591809369561091801088=
      caml_new_string
       ("766247770432944429179173513575154591809369561091801088"),
     cst_383123885216472214589586756787577295904684780545900544=
      caml_new_string
       ("383123885216472214589586756787577295904684780545900544"),
     cst_191561942608236107294793378393788647952342390272950272=
      caml_new_string
       ("191561942608236107294793378393788647952342390272950272"),
     cst_95780971304118053647396689196894323976171195136475136=
      caml_new_string("95780971304118053647396689196894323976171195136475136"),
     cst_47890485652059026823698344598447161988085597568237568=
      caml_new_string("47890485652059026823698344598447161988085597568237568"),
     cst_23945242826029513411849172299223580994042798784118784=
      caml_new_string("23945242826029513411849172299223580994042798784118784"),
     cst_11972621413014756705924586149611790497021399392059392=
      caml_new_string("11972621413014756705924586149611790497021399392059392"),
     cst_5986310706507378352962293074805895248510699696029696=
      caml_new_string("5986310706507378352962293074805895248510699696029696"),
     cst_2993155353253689176481146537402947624255349848014848=
      caml_new_string("2993155353253689176481146537402947624255349848014848"),
     cst_1496577676626844588240573268701473812127674924007424=
      caml_new_string("1496577676626844588240573268701473812127674924007424"),
     cst_748288838313422294120286634350736906063837462003712=
      caml_new_string("748288838313422294120286634350736906063837462003712"),
     cst_374144419156711147060143317175368453031918731001856=
      caml_new_string("374144419156711147060143317175368453031918731001856"),
     cst_187072209578355573530071658587684226515959365500928=
      caml_new_string("187072209578355573530071658587684226515959365500928"),
     cst_93536104789177786765035829293842113257979682750464=
      caml_new_string("93536104789177786765035829293842113257979682750464"),
     cst_46768052394588893382517914646921056628989841375232=
      caml_new_string("46768052394588893382517914646921056628989841375232"),
     cst_23384026197294446691258957323460528314494920687616=
      caml_new_string("23384026197294446691258957323460528314494920687616"),
     cst_11692013098647223345629478661730264157247460343808=
      caml_new_string("11692013098647223345629478661730264157247460343808"),
     cst_5846006549323611672814739330865132078623730171904=
      caml_new_string("5846006549323611672814739330865132078623730171904"),
     cst_2923003274661805836407369665432566039311865085952=
      caml_new_string("2923003274661805836407369665432566039311865085952"),
     cst_1461501637330902918203684832716283019655932542976=
      caml_new_string("1461501637330902918203684832716283019655932542976"),
     cst_730750818665451459101842416358141509827966271488=
      caml_new_string("730750818665451459101842416358141509827966271488"),
     cst_365375409332725729550921208179070754913983135744=
      caml_new_string("365375409332725729550921208179070754913983135744"),
     cst_182687704666362864775460604089535377456991567872=
      caml_new_string("182687704666362864775460604089535377456991567872"),
     cst_91343852333181432387730302044767688728495783936=
      caml_new_string("91343852333181432387730302044767688728495783936"),
     cst_45671926166590716193865151022383844364247891968=
      caml_new_string("45671926166590716193865151022383844364247891968"),
     cst_22835963083295358096932575511191922182123945984=
      caml_new_string("22835963083295358096932575511191922182123945984"),
     cst_11417981541647679048466287755595961091061972992=
      caml_new_string("11417981541647679048466287755595961091061972992"),
     cst_5708990770823839524233143877797980545530986496=
      caml_new_string("5708990770823839524233143877797980545530986496"),
     cst_2854495385411919762116571938898990272765493248=
      caml_new_string("2854495385411919762116571938898990272765493248"),
     cst_1427247692705959881058285969449495136382746624=
      caml_new_string("1427247692705959881058285969449495136382746624"),
     cst_713623846352979940529142984724747568191373312=
      caml_new_string("713623846352979940529142984724747568191373312"),
     cst_356811923176489970264571492362373784095686656=
      caml_new_string("356811923176489970264571492362373784095686656"),
     cst_178405961588244985132285746181186892047843328=
      caml_new_string("178405961588244985132285746181186892047843328"),
     cst_89202980794122492566142873090593446023921664=
      caml_new_string("89202980794122492566142873090593446023921664"),
     cst_44601490397061246283071436545296723011960832=
      caml_new_string("44601490397061246283071436545296723011960832"),
     cst_22300745198530623141535718272648361505980416=
      caml_new_string("22300745198530623141535718272648361505980416"),
     cst_11150372599265311570767859136324180752990208=
      caml_new_string("11150372599265311570767859136324180752990208"),
     cst_5575186299632655785383929568162090376495104=
      caml_new_string("5575186299632655785383929568162090376495104"),
     cst_2787593149816327892691964784081045188247552=
      caml_new_string("2787593149816327892691964784081045188247552"),
     cst_1393796574908163946345982392040522594123776=
      caml_new_string("1393796574908163946345982392040522594123776"),
     cst_696898287454081973172991196020261297061888=
      caml_new_string("696898287454081973172991196020261297061888"),
     cst_348449143727040986586495598010130648530944=
      caml_new_string("348449143727040986586495598010130648530944"),
     cst_174224571863520493293247799005065324265472=
      caml_new_string("174224571863520493293247799005065324265472"),
     cst_87112285931760246646623899502532662132736=
      caml_new_string("87112285931760246646623899502532662132736"),
     cst_43556142965880123323311949751266331066368=
      caml_new_string("43556142965880123323311949751266331066368"),
     cst_21778071482940061661655974875633165533184=
      caml_new_string("21778071482940061661655974875633165533184"),
     cst_10889035741470030830827987437816582766592=
      caml_new_string("10889035741470030830827987437816582766592"),
     cst_5444517870735015415413993718908291383296=
      caml_new_string("5444517870735015415413993718908291383296"),
     cst_2722258935367507707706996859454145691648=
      caml_new_string("2722258935367507707706996859454145691648"),
     cst_1361129467683753853853498429727072845824=
      caml_new_string("1361129467683753853853498429727072845824"),
     cst_680564733841876926926749214863536422912=
      caml_new_string("680564733841876926926749214863536422912"),
     cst_340282366920938463463374607431768211456=
      caml_new_string("340282366920938463463374607431768211456"),
     cst_170141183460469231731687303715884105728=
      caml_new_string("170141183460469231731687303715884105728"),
     cst_85070591730234615865843651857942052864=
      caml_new_string("85070591730234615865843651857942052864"),
     cst_42535295865117307932921825928971026432=
      caml_new_string("42535295865117307932921825928971026432"),
     cst_21267647932558653966460912964485513216=
      caml_new_string("21267647932558653966460912964485513216"),
     cst_10633823966279326983230456482242756608=
      caml_new_string("10633823966279326983230456482242756608"),
     cst_5316911983139663491615228241121378304=
      caml_new_string("5316911983139663491615228241121378304"),
     cst_2658455991569831745807614120560689152=
      caml_new_string("2658455991569831745807614120560689152"),
     cst_1329227995784915872903807060280344576=
      caml_new_string("1329227995784915872903807060280344576"),
     cst_664613997892457936451903530140172288=
      caml_new_string("664613997892457936451903530140172288"),
     cst_332306998946228968225951765070086144=
      caml_new_string("332306998946228968225951765070086144"),
     cst_166153499473114484112975882535043072=
      caml_new_string("166153499473114484112975882535043072"),
     cst_83076749736557242056487941267521536=
      caml_new_string("83076749736557242056487941267521536"),
     cst_41538374868278621028243970633760768=
      caml_new_string("41538374868278621028243970633760768"),
     cst_20769187434139310514121985316880384=
      caml_new_string("20769187434139310514121985316880384"),
     cst_10384593717069655257060992658440192=
      caml_new_string("10384593717069655257060992658440192"),
     cst_5192296858534827628530496329220096=
      caml_new_string("5192296858534827628530496329220096"),
     cst_2596148429267413814265248164610048=
      caml_new_string("2596148429267413814265248164610048"),
     cst_1298074214633706907132624082305024=
      caml_new_string("1298074214633706907132624082305024"),
     cst_649037107316853453566312041152512=
      caml_new_string("649037107316853453566312041152512"),
     cst_324518553658426726783156020576256=
      caml_new_string("324518553658426726783156020576256"),
     cst_162259276829213363391578010288128=
      caml_new_string("162259276829213363391578010288128"),
     cst_81129638414606681695789005144064=
      caml_new_string("81129638414606681695789005144064"),
     cst_40564819207303340847894502572032=
      caml_new_string("40564819207303340847894502572032"),
     cst_20282409603651670423947251286016=
      caml_new_string("20282409603651670423947251286016"),
     cst_10141204801825835211973625643008=
      caml_new_string("10141204801825835211973625643008"),
     cst_5070602400912917605986812821504=
      caml_new_string("5070602400912917605986812821504"),
     cst_2535301200456458802993406410752=
      caml_new_string("2535301200456458802993406410752"),
     cst_1267650600228229401496703205376=
      caml_new_string("1267650600228229401496703205376"),
     cst_633825300114114700748351602688=
      caml_new_string("633825300114114700748351602688"),
     cst_316912650057057350374175801344=
      caml_new_string("316912650057057350374175801344"),
     cst_158456325028528675187087900672=
      caml_new_string("158456325028528675187087900672"),
     cst_79228162514264337593543950336=
      caml_new_string("79228162514264337593543950336"),
     cst_39614081257132168796771975168=
      caml_new_string("39614081257132168796771975168"),
     cst_19807040628566084398385987584=
      caml_new_string("19807040628566084398385987584"),
     cst_9903520314283042199192993792=
      caml_new_string("9903520314283042199192993792"),
     cst_4951760157141521099596496896=
      caml_new_string("4951760157141521099596496896"),
     cst_2475880078570760549798248448=
      caml_new_string("2475880078570760549798248448"),
     cst_1237940039285380274899124224=
      caml_new_string("1237940039285380274899124224"),
     cst_618970019642690137449562112=
      caml_new_string("618970019642690137449562112"),
     cst_309485009821345068724781056=
      caml_new_string("309485009821345068724781056"),
     cst_154742504910672534362390528=
      caml_new_string("154742504910672534362390528"),
     cst_77371252455336267181195264=
      caml_new_string("77371252455336267181195264"),
     cst_38685626227668133590597632=
      caml_new_string("38685626227668133590597632"),
     cst_19342813113834066795298816=
      caml_new_string("19342813113834066795298816"),
     cst_9671406556917033397649408=
      caml_new_string("9671406556917033397649408"),
     cst_4835703278458516698824704=
      caml_new_string("4835703278458516698824704"),
     cst_2417851639229258349412352=
      caml_new_string("2417851639229258349412352"),
     cst_1208925819614629174706176=
      caml_new_string("1208925819614629174706176"),
     cst_604462909807314587353088=caml_new_string("604462909807314587353088"),
     cst_302231454903657293676544=caml_new_string("302231454903657293676544"),
     cst_151115727451828646838272=caml_new_string("151115727451828646838272"),
     cst_75557863725914323419136=caml_new_string("75557863725914323419136"),
     cst_37778931862957161709568=caml_new_string("37778931862957161709568"),
     cst_18889465931478580854784=caml_new_string("18889465931478580854784"),
     cst_9444732965739290427392=caml_new_string("9444732965739290427392"),
     cst_4722366482869645213696=caml_new_string("4722366482869645213696"),
     cst_2361183241434822606848=caml_new_string("2361183241434822606848"),
     cst_1180591620717411303424=caml_new_string("1180591620717411303424"),
     cst_590295810358705651712=caml_new_string("590295810358705651712"),
     cst_295147905179352825856=caml_new_string("295147905179352825856"),
     cst_147573952589676412928=caml_new_string("147573952589676412928"),
     cst_73786976294838206464=caml_new_string("73786976294838206464"),
     cst_36893488147419103232=caml_new_string("36893488147419103232"),
     cst_18446744073709551616=caml_new_string("18446744073709551616"),
     cst_9223372036854775808=caml_new_string("9223372036854775808"),
     cst_4611686018427387904=caml_new_string("4611686018427387904"),
     cst_2305843009213693952=caml_new_string("2305843009213693952"),
     cst_1152921504606846976=caml_new_string("1152921504606846976"),
     cst_576460752303423488=caml_new_string("576460752303423488"),
     cst_288230376151711744=caml_new_string("288230376151711744"),
     cst_144115188075855872=caml_new_string("144115188075855872"),
     cst_72057594037927936=caml_new_string("72057594037927936"),
     cst_36028797018963968=caml_new_string("36028797018963968"),
     cst_18014398509481984=caml_new_string("18014398509481984"),
     cst_9007199254740992=caml_new_string("9007199254740992"),
     cst_4503599627370496=caml_new_string("4503599627370496"),
     cst_2251799813685248=caml_new_string("2251799813685248"),
     cst_1125899906842624=caml_new_string("1125899906842624"),
     cst_562949953421312=caml_new_string("562949953421312"),
     cst_281474976710656=caml_new_string("281474976710656"),
     cst_140737488355328=caml_new_string("140737488355328"),
     cst_70368744177664=caml_new_string("70368744177664"),
     cst_35184372088832=caml_new_string("35184372088832"),
     cst_17592186044416=caml_new_string("17592186044416"),
     cst_8796093022208=caml_new_string("8796093022208"),
     cst_4398046511104=caml_new_string("4398046511104"),
     cst_2199023255552=caml_new_string("2199023255552"),
     cst_1099511627776=caml_new_string("1099511627776"),
     cst_549755813888=caml_new_string("549755813888"),
     cst_274877906944=caml_new_string("274877906944"),
     cst_137438953472=caml_new_string("137438953472"),
     cst_68719476736=caml_new_string("68719476736"),
     cst_34359738368=caml_new_string("34359738368"),
     cst_17179869184=caml_new_string("17179869184"),
     cst_8589934592=caml_new_string("8589934592"),
     cst_4294967296=caml_new_string("4294967296"),
     cst_2147483648=caml_new_string("2147483648"),
     cst_1073741824=caml_new_string("1073741824"),
     cst_536870912=caml_new_string("536870912"),
     cst_268435456=caml_new_string("268435456"),
     cst_134217728=caml_new_string("134217728"),
     cst_67108864=caml_new_string("67108864"),
     cst_33554432=caml_new_string("33554432"),
     cst_16777216=caml_new_string("16777216"),
     cst_8388608=caml_new_string("8388608"),
     cst_4194304=caml_new_string("4194304"),
     cst_2097152=caml_new_string("2097152"),
     cst_1048576=caml_new_string("1048576"),
     cst_524288=caml_new_string("524288"),
     cst_262144=caml_new_string("262144"),
     cst_131072=caml_new_string("131072"),
     cst_65536=caml_new_string("65536"),
     cst_32768=caml_new_string("32768"),
     cst_16384=caml_new_string("16384"),
     cst_8192=caml_new_string("8192"),
     cst_4096=caml_new_string("4096"),
     cst_2048=caml_new_string("2048"),
     cst_1024=caml_new_string("1024"),
     cst_512=caml_new_string("512"),
     cst_256=caml_new_string("256"),
     cst_128=caml_new_string("128"),
     cst_64=caml_new_string("64"),
     cst_32=caml_new_string("32"),
     cst_16=caml_new_string("16"),
     cst_8=caml_new_string("8"),
     cst_4=caml_new_string("4"),
     cst_2=caml_new_string("2"),
     cst_39614081257132164398725464064=
      caml_new_string("39614081257132164398725464064"),
     cst_144115188075855856=caml_new_string("144115188075855856"),
     cst_72057594037927928=caml_new_string("72057594037927928"),
     cst_36028797018963964=caml_new_string("36028797018963964"),
     cst_18014398509481982=caml_new_string("18014398509481982"),
     cst_9007199254740991=caml_new_string("9007199254740991"),
     cst_4503599627370495=caml_new_string("4503599627370495"),
     cst_2251799813685247=caml_new_string("2251799813685247"),
     cst_1125899906842623=caml_new_string("1125899906842623"),
     cst_7=caml_new_string("7"),
     cst_3=caml_new_string("3"),
     cst_1$0=caml_new_string("1"),
     cst_0$0=caml_new_string("0"),
     cst_of_float$0=caml_new_string("of_float"),
     cst_exponentiate_of_int_2_4=
      caml_new_string("exponentiate (of_int 2) (-4)"),
     cst_BigInt=caml_new_string("BigInt"),
     _t1_=
      [0,[0,0,caml_new_string("false")],[0,[0,1,caml_new_string("true")],0]],
     cst_xor_false_false=caml_new_string("xor false false"),
     cst_xor_true_false=caml_new_string("xor true false"),
     cst_xor_false_true=caml_new_string("xor false true"),
     cst_xor_true_true=caml_new_string("xor true true"),
     cst_false_false=caml_new_string("false || false"),
     cst_false_true=caml_new_string("false || true"),
     cst_true_whatever=caml_new_string("true || whatever"),
     cst_or_false_false=caml_new_string("or_ false false"),
     cst_or_true_false=caml_new_string("or_ true false"),
     cst_or_false_true=caml_new_string("or_ false true"),
     cst_or_true_true=caml_new_string("or_ true true"),
     cst_false_whatever=caml_new_string("false && whatever"),
     cst_true_false=caml_new_string("true && false"),
     cst_true_true=caml_new_string("true && true"),
     cst_and_false_false=caml_new_string("and_ false false"),
     cst_and_true_false=caml_new_string("and_ true false"),
     cst_and_false_true=caml_new_string("and_ false true"),
     cst_and_true_true=caml_new_string("and_ true true"),
     cst_not_false=caml_new_string("not false"),
     cst_not_true=caml_new_string("not true"),
     cst_Bool=caml_new_string("Bool"),
     _uB_=
      [0,
       [0,-3,caml_new_string("-3")],
       [0,
        [0,0,caml_new_string("0")],
        [0,
         [0,0,caml_new_string("0")],
         [0,[0,1,caml_new_string("1")],[0,[0,15,caml_new_string("15")],0]]]]],
     _uC_=
      [0,
       [0,caml_new_string("0"),0],
       [0,
        [0,caml_new_string("1"),1],
        [0,
         [0,caml_new_string("-1"),-1],
         [0,[0,caml_new_string("1_000"),1e3],0]]]],
     cst_exponentiate_2_4=caml_new_string("exponentiate 2 (-4)"),
     cst_Int=caml_new_string("Int"),
     cst_iter=caml_new_string("iter"),
     cst_try_reduce=caml_new_string("try_reduce []"),
     cst_try_reduce$0=caml_new_string("try_reduce"),
     cst_reduce=caml_new_string("reduce"),
     cst_reduce_0=caml_new_string("reduce [0]"),
     cst_fold=caml_new_string("fold"),
     cst_fold$0=caml_new_string("fold []"),
     cst_tail=caml_new_string("tail []"),
     cst_tail$0=caml_new_string("tail"),
     cst_head=caml_new_string("head []"),
     cst_head$0=caml_new_string("head"),
     cst_try_tail=caml_new_string("try_tail []"),
     cst_try_tail$0=caml_new_string("try_tail"),
     cst_try_head=caml_new_string("try_head []"),
     cst_try_head$0=caml_new_string("try_head"),
     cst_prepend=caml_new_string("prepend"),
     cst_concat=caml_new_string("concat"),
     cst_reverse=caml_new_string("reverse"),
     cst_List=caml_new_string("List"),
     cst$5=caml_new_string(""),
     cst_Raised_by_primitive_operation_at_file_Implementation_CallStack_ml_line_3_characters_15_49_Called_from_file_Implementation_CallStack_ml_line_4_characters_15_30_Called_from_file_Implementation_CallStack_ml_line_4_characters_15_30_Called_from_file_Implementation_CallStack_ml_line_7_characters_2_9=
      caml_new_string
       ('Raised by primitive operation at file "Implementation/CallStack.ml", line 3, characters 15-49\nCalled from file "Implementation/CallStack.ml", line 4, characters 15-30\nCalled from file "Implementation/CallStack.ml", line 4, characters 15-30\nCalled from file "Implementation/CallStack.ml", line 7, characters 2-9\n'),
     cst_location=caml_new_string("location"),
     cst_format_1=caml_new_string("format 1"),
     cst_format_0=caml_new_string("format 0"),
     cst_Frame=caml_new_string("Frame"),
     cst_Location=caml_new_string("Location"),
     cst_frames=caml_new_string("frames"),
     cst_CallStack=caml_new_string("CallStack"),
     cst_uncurry=caml_new_string("uncurry"),
     cst_curry=caml_new_string("curry"),
     cst_flip=caml_new_string("flip"),
     cst_Function5=caml_new_string("Function5"),
     cst_uncurry$0=caml_new_string("uncurry"),
     cst_curry$0=caml_new_string("curry"),
     cst_flip$0=caml_new_string("flip"),
     cst_Function4=caml_new_string("Function4"),
     cst_uncurry$1=caml_new_string("uncurry"),
     cst_curry$1=caml_new_string("curry"),
     cst_flip$1=caml_new_string("flip"),
     cst_Function3=caml_new_string("Function3"),
     cst_uncurry$2=caml_new_string("uncurry"),
     cst_curry$2=caml_new_string("curry"),
     cst_flip$2=caml_new_string("flip"),
     cst_Function2=caml_new_string("Function2"),
     cst_compose=caml_new_string("compose"),
     cst_rev_apply=caml_new_string("rev_apply"),
     cst_apply=caml_new_string("apply"),
     cst_identity_42=caml_new_string("identity 42"),
     cst_Function1=caml_new_string("Function1"),
     cst_Functions=caml_new_string("Functions"),
     cst_3_to_23_step_4=caml_new_string("[3 to 23 step 4]"),
     cst_0_down_to_12_step_3=caml_new_string("[0 down to -12 step -3]"),
     cst_0_to_4_step_1=caml_new_string("[0 to 4 step 1]"),
     cst$6=caml_new_string("[]"),
     cst$7=caml_new_string("[]"),
     cst_with_step_0_and_start=caml_new_string("with step < 0 and start"),
     cst_with_step_0_and_start$0=caml_new_string("with step < 0 and start"),
     cst_with_step_0=caml_new_string("with step < 0"),
     cst_with_step_0$0=caml_new_string("with step < 0"),
     cst_with_step_0$1=caml_new_string("with step < 0"),
     cst_with_start_and_step=caml_new_string("with start and step"),
     cst_with_start_and_step$0=caml_new_string("with start and step"),
     cst_with_start_and_step$1=caml_new_string("with start and step"),
     cst_with_start_and_step$2=caml_new_string("with start and step"),
     cst_with_step_0$2=caml_new_string("with step = 0"),
     cst_with_step=caml_new_string("with step"),
     cst_with_step$0=caml_new_string("with step"),
     cst_with_stop_start=caml_new_string("with stop <= start"),
     cst_with_stop_start$0=caml_new_string("with stop <= start"),
     cst_with_stop_start$1=caml_new_string("with stop <= start"),
     cst_with_stop_0=caml_new_string("with stop < 0"),
     cst_with_start=caml_new_string("with start"),
     cst_simplest=caml_new_string("simplest"),
     cst_to_list=caml_new_string("to_list"),
     cst_IntRange=caml_new_string("IntRange"),
     cst_map_is_lazy=caml_new_string("map is lazy"),
     cst_map$0=caml_new_string("map"),
     cst_is_value=caml_new_string("is_value"),
     cst_value_exc=caml_new_string("value exc"),
     cst_value=caml_new_string("value"),
     cst_Lazy=caml_new_string("Lazy"),
     cst_NativeInt=caml_new_string("NativeInt"),
     cst_n=caml_new_string("n"),
     _yW_=
      [0,[0,caml_new_string("43"),43],[0,[0,caml_new_string("-12"),-12],0]],
     cst_exponentiate_2n_4=caml_new_string("exponentiate 2n (-4)"),
     cst_NativeInt$0=caml_new_string("NativeInt"),
     _zc_=[0,[0,0,0],[0,[0,[0,42],0],0]],
     cst_filter_map_Some_false=caml_new_string("filter_map Some false"),
     cst_filter_map_Some_true=caml_new_string("filter_map Some true"),
     cst_filter_map_None=caml_new_string("filter_map None"),
     cst_filter_Some_false=caml_new_string("filter Some false"),
     cst_filter_Some_true=caml_new_string("filter Some true"),
     cst_filter_None=caml_new_string("filter None"),
     cst_iter_Some=caml_new_string("iter Some"),
     cst_iter_None=caml_new_string("iter None"),
     cst_value_map_Some=caml_new_string("value_map Some"),
     cst_value_map_None=caml_new_string("value_map None"),
     cst_map_Some=caml_new_string("map Some"),
     cst_map_None=caml_new_string("map None"),
     cst_repr_None=caml_new_string("repr None"),
     cst_value_exc_None=caml_new_string("value ~exc None"),
     cst_value_None=caml_new_string("value None"),
     cst_value_Some=caml_new_string("value Some"),
     cst_value_def_Some=caml_new_string("value_def Some"),
     cst_value_def_None=caml_new_string("value_def None"),
     cst_is_none_Some=caml_new_string("is_none Some"),
     cst_is_none_None=caml_new_string("is_none None"),
     cst_is_some_Some=caml_new_string("is_some Some"),
     cst_is_some_None=caml_new_string("is_some None"),
     cst_some_if_false=caml_new_string("some_if' false"),
     cst_some_if_true=caml_new_string("some_if' true"),
     cst_some_if_false$0=caml_new_string("some_if false"),
     cst_some_if_true$0=caml_new_string("some_if true"),
     cst_Option=caml_new_string("Option"),
     _z9_=[0,[0,[0,1,caml_new_string("a")],0],0],
     _Ab_=[0,[0,[0,1,caml_new_string("a"),2],0],0],
     _Af_=[0,[0,[0,1,caml_new_string("a"),2,3],0],0],
     _Aj_=[0,[0,[0,1,caml_new_string("a"),2,3,4],0],0],
     cst_get_4=caml_new_string("get_4"),
     cst_get_3=caml_new_string("get_3"),
     cst_get_2=caml_new_string("get_2"),
     cst_get_1=caml_new_string("get_1"),
     cst_get_0=caml_new_string("get_0"),
     cst_flip$3=caml_new_string("flip"),
     cst_make=caml_new_string("make"),
     cst_Tuple5=caml_new_string("Tuple5"),
     cst_get_3$0=caml_new_string("get_3"),
     cst_get_2$0=caml_new_string("get_2"),
     cst_get_1$0=caml_new_string("get_1"),
     cst_get_0$0=caml_new_string("get_0"),
     cst_flip$4=caml_new_string("flip"),
     cst_make$0=caml_new_string("make"),
     cst_Tuple4=caml_new_string("Tuple4"),
     cst_get_2$1=caml_new_string("get_2"),
     cst_get_1$1=caml_new_string("get_1"),
     cst_get_0$1=caml_new_string("get_0"),
     cst_flip$5=caml_new_string("flip"),
     cst_make$1=caml_new_string("make"),
     cst_Tuple3=caml_new_string("Tuple3"),
     cst_get_1$2=caml_new_string("get_1"),
     cst_get_0$2=caml_new_string("get_0"),
     cst_flip$6=caml_new_string("flip"),
     cst_make$2=caml_new_string("make"),
     cst_Tuple2=caml_new_string("Tuple2"),
     cst_Tuples=caml_new_string("Tuples"),
     cst_General_RedBlackTree_Invariants_BrokenInvariants=
      caml_new_string("General.RedBlackTree.Invariants.BrokenInvariants"),
     b1=[0,[0,0,1,0]],
     b1r3=[0,[0,0,1,[2,[0,0,3,0]]]],
     br13=[0,[0,[2,[0,0,1,0]],3,0]],
     bb13b5=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],
     br13r5=[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],
     bb13b5r7=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,5,[2,[0,0,7,0]]]]]],
     bb13br57=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,0]]]],
     bb1r35b7=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,7,0]]]],
     bbr135b7=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,7,0]]]],
     bb13br57r9=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,[2,[0,0,9,0]]]]]],
     bb13rb57b9=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     bb1r35b7r9=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     bb1r35br79=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     bbr135b7r9=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     bbr135br79=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     bbr13r57b9=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     brb13b57b9=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     bb13rb57b9r11=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]]]],
     bb13rb57br911=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,[2,[0,0,9,0]],11,0]]]]]],
     bb13rb5r79b11=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,[2,[0,0,7,0]]]],9,[0,[0,0,11,0]]]]]],
     bb13rbr579b11=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,[2,[0,0,5,0]],7,0]],9,[0,[0,0,11,0]]]]]],
     bb1r35br79r11=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,11,0]]]]]],
     bb1r35rb79b11=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     bbr135br79r11=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,11,0]]]]]],
     bbr135rb79b11=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     bbr13r57b9r11=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     bbr13r57br911=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     brb13b57b9r11=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     brb13b57br911=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     brb13b5r79b11=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,[2,[0,0,7,0]]]]]],9,[0,[0,0,11,0]]]],
     brb13br579b11=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,0]]]],9,[0,[0,0,11,0]]]],
     brb1r35b79b11=
      [0,
       [0,[2,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     brbr135b79b11=
      [0,
       [0,[2,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     cst_size=caml_new_string("size"),
     cst_to_list$0=caml_new_string("to_list"),
     cst_remove=caml_new_string("remove"),
     cst_try_get=caml_new_string("try_get"),
     cst_heterogeneous=caml_new_string("heterogeneous"),
     cst_remove$0=caml_new_string("remove"),
     cst_not_empty=caml_new_string("not empty"),
     cst_empty=caml_new_string("empty"),
     cst_is_empty=caml_new_string("is_empty"),
     cst_try_get$0=caml_new_string("try_get"),
     cst_replace=caml_new_string("replace"),
     cst_add=caml_new_string("add"),
     cst_validate=caml_new_string("validate"),
     cst_Invariants=caml_new_string("Invariants"),
     cst_RedBlackTree=caml_new_string("RedBlackTree"),
     cst_General_BinaryHeap_Invariants_BrokenInvariants=
      caml_new_string("General.BinaryHeap.Invariants.BrokenInvariants"),
     cst_pop_max=caml_new_string("pop_max"),
     cst_add$0=caml_new_string("add"),
     cst_empty$0=caml_new_string("empty"),
     cst_BinaryHeap=caml_new_string("BinaryHeap"),
     cst_Stream=caml_new_string("Stream"),
     cst_xabxxcdx=caml_new_string("xabxxcdx"),
     cst_abcdefghfj=caml_new_string("abcdefghfj"),
     cst_split=caml_new_string("split'"),
     cst_String=caml_new_string("String"),
     cst_General_TestingTests_Tests_TestException0=
      caml_new_string("General.TestingTests.Tests.TestException0"),
     cst_General_TestingTests_Tests_TestException0$0=
      caml_new_string("General.TestingTests.Tests.TestException0'"),
     cst_General_TestingTests_Tests_TestException1=
      caml_new_string("General.TestingTests.Tests.TestException1"),
     cst_Single_label_foo_status_Error_TestingTests_Tests_TestException0_None=
      caml_new_string
       ('Single {label="foo"; status=Error (TestingTests.Tests.TestException0, None)}'),
     cst_foo$5=caml_new_string("foo"),
     cst_Single_label_foo_status_Failure_WrongExceptionNamed_Foo_TestingTests_Tests_TestException0_None=
      caml_new_string
       ('Single {label="foo"; status=Failure (WrongExceptionNamed ("Foo", TestingTests.Tests.TestException0\', None))}'),
     cst_Foo=caml_new_string("Foo"),
     cst_foo$6=caml_new_string("foo"),
     cst_Single_label_foo_status_Failure_WrongException_TestingTests_Tests_TestException0_TestingTests_Tests_TestException0_None=
      caml_new_string
       ('Single {label="foo"; status=Failure (WrongException (TestingTests.Tests.TestException0, TestingTests.Tests.TestException0\', None))}'),
     cst_foo$7=caml_new_string("foo"),
     cst_Single_label_foo_status_Failure_NoException_TestingTests_Tests_TestException0=
      caml_new_string
       ('Single {label="foo"; status=Failure (NoException TestingTests.Tests.TestException0)}'),
     cst_foo$8=caml_new_string("foo"),
     cst_error=caml_new_string("error"),
     cst_error$0=caml_new_string("error"),
     cst_custom_failure=caml_new_string("custom failure"),
     cst_wrong_exception=caml_new_string("wrong exception"),
     cst_wrong_exception$0=caml_new_string("wrong exception"),
     cst_no_exception=caml_new_string("no exception"),
     cst_no_exception$0=caml_new_string("no exception"),
     cst_not_equal_failure=caml_new_string("not equal failure"),
     cst_child=caml_new_string("child"),
     cst_group_success=caml_new_string("group success"),
     cst_single_success=caml_new_string("single success"),
     cst_n$0=caml_new_string("n"),
     cst_Test=caml_new_string("Test"),
     cst_bar$1=caml_new_string("bar"),
     cst_foo$9=caml_new_string("foo"),
     cst_bad=caml_new_string("bad"),
     cst_bar_7=caml_new_string("bar 7"),
     cst_bar_7_ERROR_exception_TestingTests_Tests_TestException1_bad_raised=
      caml_new_string
       ('"bar 7": ERROR: exception TestingTests.Tests.TestException1("bad") raised\n'),
     cst_bar_7_ERROR_exception_TestingTests_Tests_TestException1_bad_raised_Raised_by_primitive_operation_at_file_Implementation_TestingTests_ml_line_2_characters_16_36=
      caml_new_string
       ('"bar 7": ERROR: exception TestingTests.Tests.TestException1("bad") raised\nRaised by primitive operation at file "Implementation/TestingTests.ml", line 2, characters 16-36\n'),
     cst_bar_6=caml_new_string("bar 6"),
     cst_too_bad=caml_new_string("too bad"),
     cst_Foo$0=caml_new_string("Foo"),
     cst_bar_4=caml_new_string("bar 4'"),
     cst_bar_4_FAILED_expected_exception_Foo_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised=
      caml_new_string
       ('"bar 4\'": FAILED: expected exception Foo not raised, but exception TestingTests.Tests.TestException1("too bad") raised\n'),
     cst_bar_4_FAILED_expected_exception_Foo_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised_Raised_by_primitive_operation_at_file_Implementation_TestingTests_ml_line_2_characters_16_36=
      caml_new_string
       ('"bar 4\'": FAILED: expected exception Foo not raised, but exception TestingTests.Tests.TestException1("too bad") raised\nRaised by primitive operation at file "Implementation/TestingTests.ml", line 2, characters 16-36\n'),
     cst_too_bad$0=caml_new_string("too bad"),
     cst_bad$0=caml_new_string("bad"),
     cst_bar_4$0=caml_new_string("bar 4"),
     cst_bar_4_FAILED_expected_exception_TestingTests_Tests_TestException1_bad_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised=
      caml_new_string
       ('"bar 4": FAILED: expected exception TestingTests.Tests.TestException1("bad") not raised, but exception TestingTests.Tests.TestException1("too bad") raised\n'),
     cst_bar_4_FAILED_expected_exception_TestingTests_Tests_TestException1_bad_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised_Raised_by_primitive_operation_at_file_Implementation_TestingTests_ml_line_2_characters_16_36=
      caml_new_string
       ('"bar 4": FAILED: expected exception TestingTests.Tests.TestException1("bad") not raised, but exception TestingTests.Tests.TestException1("too bad") raised\nRaised by primitive operation at file "Implementation/TestingTests.ml", line 2, characters 16-36\n'),
     cst_Foo$1=caml_new_string("Foo"),
     cst_bar_3=caml_new_string("bar 3'"),
     cst_bar_3$0=caml_new_string("bar 3"),
     cst_bar_2=caml_new_string("bar 2"),
     cst_to_indented_strings=caml_new_string("to_indented_strings"),
     cst_Result=caml_new_string("Result"),
     cst_Testing=caml_new_string("Testing"),
     cst_General=caml_new_string("General"),
     ArrayLabels=global_data.ArrayLabels,
     Pervasives=global_data.Pervasives,
     Printf=global_data.Printf,
     String=global_data.String,
     ListLabels=global_data.ListLabels,
     Array=global_data.Array,
     Big_int=global_data.Big_int,
     InvalidArgument=global_data.Invalid_argument,
     List=global_data.List,
     AssertFailure=global_data.Assert_failure,
     MatchFailure=global_data.Match_failure,
     Stream=global_data.Stream,
     Printexc=global_data.Printexc,
     Failure=global_data.Failure,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Scanf=global_data.Scanf,
     Lazy=global_data.Lazy,
     NotFound=global_data.Not_found,
     OutOfMemory=global_data.Out_of_memory,
     StackOverflow=global_data.Stack_overflow,
     SysError=global_data.Sys_error,
     EndOfFile=global_data.End_of_file,
     DivisionByZero=global_data.Division_by_zero,
     SysBlockedIO=global_data.Sys_blocked_io,
     UndefinedRecursiveModule=global_data.Undefined_recursive_module,
     Bytes=global_data.Bytes,
     Sys=global_data.Sys,
     Int32=global_data.Int32,
     Int64=global_data.Int64,
     Nativeint=global_data.Nativeint,
     Arith_status=global_data.Arith_status,
     Num=global_data.Num,
     Weak=global_data.Weak,
     StringLabels=global_data.StringLabels,
     BytesLabels=global_data.BytesLabels,
     Stack=global_data.Stack,
     Sort=global_data.Sort,
     Set=global_data.Set,
     Random=global_data.Random,
     Queue=global_data.Queue,
     Parsing=global_data.Parsing,
     Oo=global_data.Oo,
     MoreLabels=global_data.MoreLabels,
     Marshal=global_data.Marshal,
     Map=global_data.Map,
     Lexing=global_data.Lexing,
     Hashtbl=global_data.Hashtbl,
     Genlex=global_data.Genlex,
     Gc=global_data.Gc,
     Format=global_data.Format,
     Filename=global_data.Filename,
     Digest=global_data.Digest,
     Complex=global_data.Complex,
     Char=global_data.Char,
     Callback=global_data.Callback,
     Buffer=global_data.Buffer,
     Arg=global_data.Arg,
     _RB_=[0,caml_new_string("\n")],
     _Rn_=[0,[11,caml_new_string("bad"),0],caml_new_string("bad")],
     _Rk_=[0,0],
     _Ra_=[0,caml_new_string("TestingTests.Tests.TestException0")],
     _Rb_=[0,caml_new_string("TestingTests.Tests.TestException0'")],
     _Rc_=
      [0,
       [11,
        caml_new_string("TestingTests.Tests.TestException1("),
        [3,0,[12,41,0]]],
       caml_new_string("TestingTests.Tests.TestException1(%S)")],
     _Q4_=[0,[3,0,[12,32,[3,0,0]]],caml_new_string("%S %S")],
     _QY_=[0,0,0],
     _Qx_=[0,0,caml_new_string("")],
     _Qv_=[0,0,caml_new_string("")],
     _Pf_=[0,caml_new_string(", ")],
     _Pg_=
      [0,
       [11,caml_new_string("Broken binary heap invariants: "),[2,0,0]],
       caml_new_string("Broken binary heap invariants: %s")],
     _K7_=
      [0,
       [11,caml_new_string("add "),[2,0,[12,32,[4,3,0,0,0]]]],
       caml_new_string("add %s %i")],
     _Kk_=
      [0,
       [11,caml_new_string("replace "),[2,0,[12,32,[4,3,0,0,0]]]],
       caml_new_string("replace %s %i")],
     _J8_=
      [0,
       [11,caml_new_string("try_get "),[2,0,[12,32,[4,3,0,0,0]]]],
       caml_new_string("try_get %s %i")],
     _BU_=
      [0,
       [11,caml_new_string("remove "),[2,0,[12,32,[4,3,0,0,0]]]],
       caml_new_string("remove %s %i")],
     _BR_=[0,3654863,42],
     _BS_=[0,[0,0,42,0]],
     _BN_=[0,3654863,42],
     _BO_=[0,[0,0,42,0]],
     _BP_=[0,1,0],
     _BF_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _BE_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _Bx_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _By_=[0,0,0],
     _BA_=[0,1,1],
     _BB_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _BC_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _BD_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _Bz_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _Bw_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _Bv_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _Bs_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _Bq_=
      [0,
       [11,caml_new_string("broken invariants"),0],
       caml_new_string("broken invariants")],
     _Bk_=[0,0],
     _Bl_=[0,1],
     _Bi_=[0,caml_new_string(", ")],
     _Bj_=
      [0,
       [11,caml_new_string("Broken red-black tree invariants: "),[2,0,0]],
       caml_new_string("Broken red-black tree invariants: %s")],
     _Bf_=
      [0,
       [11,
        caml_new_string("Black {l="),
        [2,
         0,
         [11,
          caml_new_string("; v="),
          [2,0,[11,caml_new_string("; r="),[2,0,[12,125,0]]]]]]],
       caml_new_string("Black {l=%s; v=%s; r=%s}")],
     _Bg_=
      [0,
       [11,
        caml_new_string("BlackPlus {l="),
        [2,
         0,
         [11,
          caml_new_string("; v="),
          [2,0,[11,caml_new_string("; r="),[2,0,[12,125,0]]]]]]],
       caml_new_string("BlackPlus {l=%s; v=%s; r=%s}")],
     _Bh_=
      [0,
       [11,
        caml_new_string("Red {l="),
        [2,
         0,
         [11,
          caml_new_string("; v="),
          [2,0,[11,caml_new_string("; r="),[2,0,[12,125,0]]]]]]],
       caml_new_string("Red {l=%s; v=%s; r=%s}")],
     _Bc_=[0,1,2],
     _A$_=[0,2,1],
     _Ba_=[0,1,2],
     _A9_=[0,42,0],
     _A7_=[0,0,42],
     _A3_=[0,1,2,3],
     _A0_=[0,3,2,1],
     _A1_=[0,1,2,3],
     _AY_=[0,42,0,0],
     _AW_=[0,0,42,0],
     _AU_=[0,0,0,42],
     _AQ_=[0,1,2,3,4],
     _AN_=[0,4,3,2,1],
     _AO_=[0,1,2,3,4],
     _AL_=[0,42,0,0,0],
     _AJ_=[0,0,42,0,0],
     _AH_=[0,0,0,42,0],
     _AF_=[0,0,0,0,42],
     _AB_=[0,1,2,3,4,5],
     _Ay_=[0,5,4,3,2,1],
     _Az_=[0,1,2,3,4,5],
     _Aw_=[0,42,0,0,0,0],
     _Au_=[0,0,42,0,0,0],
     _As_=[0,0,0,42,0,0],
     _Aq_=[0,0,0,0,42,0],
     _Ao_=[0,0,0,0,0,42],
     _zW_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _zR_=[0,42],
     _zO_=[0,42],
     _zL_=[0,caml_new_string("val")],
     _zJ_=[0,caml_new_string("val")],
     _zF_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _zD_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _zB_=[0,21],
     _zz_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _zx_=[0,21],
     _zv_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _zt_=[0,42],
     _zr_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _zp_=[0,42],
     _zn_=[0,42],
     _zl_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _zi_=[0,57],
     _zj_=[0,42],
     _zg_=[0,42],
     _x2_=[0,[11,caml_new_string("nope"),0],caml_new_string("nope")],
     _xY_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _xX_=
      [0,
       [11,caml_new_string("You called me!"),0],
       caml_new_string("You called me!")],
     _xS_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xP_=[0,2],
     _xQ_=[0,2,[0,3,[0,4,0]]],
     _xK_=[0,5],
     _xH_=[0,2],
     _xI_=[0,0,[0,2,[0,4,0]]],
     _xE_=[0,2],
     _xF_=[0,0,[0,2,[0,4,0]]],
     _xC_=[0,0],
     _xy_=[0,2],
     _xz_=[0,2],
     _xA_=[0,2,[0,4,[0,6,0]]],
     _xu_=[0,2],
     _xv_=[0,2],
     _xw_=[0,2,[0,4,[0,6,0]]],
     _xq_=[0,2],
     _xr_=[0,3],
     _xs_=[0,3,[0,5,[0,7,0]]],
     _xm_=[0,2],
     _xn_=[0,3],
     _xo_=[0,3,[0,5,[0,7,0]]],
     _xk_=[0,-1],
     _xh_=[0,-1],
     _xi_=[0,0,[0,-1,[0,-2,[0,-3,[0,-4,[0,-5,0]]]]]],
     _xe_=[0,-2],
     _xf_=[0,0,[0,-2,[0,-4,0]]],
     _xa_=[0,-2],
     _xb_=[0,-3],
     _xc_=[0,-3,[0,-5,[0,-7,[0,-9,0]]]],
     _w8_=[0,-2],
     _w9_=[0,-3],
     _w__=[0,-3,[0,-5,[0,-7,[0,-9,0]]]],
     _wl_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _wg_=[0,7,2],
     _wd_=
      [0,
       [4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,0]]]]],
       caml_new_string("%d %d %d")],
     _v$_=[0,7,2,4],
     _wa_=
      [0,
       [4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,0]]]]],
       caml_new_string("%d %d %d")],
     _v8_=
      [0,
       [4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,0]]]]]]],
       caml_new_string("%d %d %d %d")],
     _v4_=[0,7,2,4,5],
     _v5_=
      [0,
       [4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,0]]]]]]],
       caml_new_string("%d %d %d %d")],
     _v1_=
      [0,
       [4,
        0,
        0,
        0,
        [12,
         32,
         [4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,0]]]]]]]]],
       caml_new_string("%d %d %d %d %d")],
     _vX_=[0,7,2,4,5,3],
     _vY_=
      [0,
       [4,
        0,
        0,
        0,
        [12,
         32,
         [4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,[12,32,[4,0,0,0,0]]]]]]]]],
       caml_new_string("%d %d %d %d %d")],
     _vI_=[0,caml_new_string("Implementation/CallStack.ml"),3,15,49],
     _vv_=
      [0,
       caml_new_string("1"),
       [0,caml_new_string("2"),[0,caml_new_string("3"),0]]],
     _vw_=
      [0,
       caml_new_string("3"),
       [0,caml_new_string("2"),[0,caml_new_string("1"),0]]],
     _vr_=[0,4,[0,5,[0,6,0]]],
     _vs_=[0,1,[0,2,[0,3,0]]],
     _vt_=[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]],
     _vo_=[0,2,[0,3,0]],
     _vp_=[0,1,[0,2,[0,3,0]]],
     _vm_=[0,1,[0,2,[0,3,0]]],
     _vi_=[0,1,[0,2,[0,3,0]]],
     _vj_=[0,2,[0,3,0]],
     _vf_=[0,1,[0,2,[0,3,0]]],
     _vb_=[0,1,[0,2,[0,3,0]]],
     _vc_=[0,2,[0,3,0]],
     _u__=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _u7_=[0,[2,0,[12,45,[4,0,0,0,0]]],caml_new_string("%s-%d")],
     _u8_=[0,3,[0,4,0]],
     _u4_=
      [0,
       [11,caml_new_string("Don't call me"),0],
       caml_new_string("Don't call me")],
     _u5_=[0,0,0],
     _u2_=[0,2,[0,3,[0,4,0]]],
     _u0_=[0,2,[0,3,[0,4,0]]],
     _uX_=[0,3,[0,4,0]],
     _uz_=
      [0,
       [11,
        caml_new_string("Int.exponentiate: Negative exponent: "),
        [4,3,0,0,0]],
       caml_new_string("Int.exponentiate: Negative exponent: %i")],
     _qf_=
      [0,
       [11,
        caml_new_string("2 ^ "),
        [4,3,0,0,[11,caml_new_string(" - 2 ^ "),[4,3,0,0,0]]]],
       caml_new_string("2 ^ %i - 2 ^ %i")],
     _qe_=
      [0,[11,caml_new_string("2 ^ "),[4,3,0,0,0]],caml_new_string("2 ^ %i")],
     _pn_=
      [0,
       [11,
        caml_new_string("BigInt.exponentiate: Negative exponent: "),
        [4,3,0,0,0]],
       caml_new_string("BigInt.exponentiate: Negative exponent: %i")],
     _o0_=[0,[8,0,0,0,0],caml_new_string("%f")],
     _oi_=[255,2,0,0],
     _mq_=
      [0,
       [2,
        0,
        [11,caml_new_string(".exponentiate: Negative exponent: "),[4,3,0,0,0]]],
       caml_new_string("%s.exponentiate: Negative exponent: %i")],
     _mp_=[0,[2,0,[2,0,0]],caml_new_string("%s%s")],
     _mi_=
      [0,
       [11,caml_new_string("Foo "),[2,0,[12,32,[21,1,0]]]],
       caml_new_string("Foo %s %n")],
     _mg_=
      [0,
       [11,caml_new_string("Grmbl "),[2,0,[12,32,[21,1,0]]]],
       caml_new_string("Grmbl %s %n")],
     _me_=[0,caml_new_string("Implementation/Exception.ml"),3,30],
     _mc_=[0,caml_new_string("Implementation/Exception.ml"),5,26],
     _l2_=[0,caml_new_string("Implementation/Exception.ml"),5,26],
     _l1_=[0,caml_new_string("Implementation/Exception.ml"),3,30],
     _lV_=[0,[11,caml_new_string("abs "),[2,0,0]],caml_new_string("abs %s")],
     _lW_=[0,[11,caml_new_string("abs "),[2,0,0]],caml_new_string("abs %s")],
     _lj_=[0,1,[0,6,[0,3,[0,-1,0]]]],
     _lk_=[0,2,[0,7,[0,4,[0,0,0]]]],
     _lh_=[0,1,[0,6,[0,3,[0,-1,0]]]],
     _li_=[0,1,[0,7,[0,5,[0,2,0]]]],
     _lf_=[0,1,[0,6,[0,3,[0,-1,0]]]],
     _lg_=[0,43,[0,48,[0,255,[0,755,0]]]],
     _ld_=[0,1,[0,3,[0,4,[0,15,[0,9,[0,7,0]]]]]],
     _le_=[0,3,[0,15,[0,9,0]]],
     _lb_=[0,3,[0,4,[0,15,[0,9,[0,7,0]]]]],
     _lc_=[0,3,[0,15,0]],
     _k$_=[0,2,[0,3,[0,4,[0,15,[0,9,[0,7,0]]]]]],
     _la_=[0,3,[0,9,0]],
     _k9_=[0,1,[0,3,[0,4,[0,15,[0,9,[0,7,0]]]]]],
     _k__=[0,4,[0,16,[0,10,0]]],
     _k7_=[0,3,[0,4,[0,15,[0,9,[0,7,0]]]]],
     _k8_=[0,4,[0,16,0]],
     _k5_=[0,2,[0,3,[0,4,[0,15,[0,9,[0,7,0]]]]]],
     _k6_=[0,4,[0,10,0]],
     _k3_=[0,1,[0,2,[0,0,[0,3,[0,4,0]]]]],
     _k4_=[0,1,[0,2,[0,4,[0,3,[0,6,[0,9,[0,4,[0,8,[0,12,[0,16,0]]]]]]]]]],
     _k1_=[0,1,[0,2,[0,0,[0,3,[0,4,0]]]]],
     _k2_=[0,1,[0,3,[0,6,[0,6,[0,12,[0,18,[0,8,[0,16,[0,24,[0,32,0]]]]]]]]]],
     _kZ_=[0,1,[0,2,[0,0,[0,3,[0,4,0]]]]],
     _k0_=
      [0,
       43,
       [0,
        86,
        [0,88,[0,255,[0,258,[0,261,[0,1012,[0,1016,[0,1020,[0,1024,0]]]]]]]]]],
     _kQ_=
      [0,[2,0,[11,caml_new_string(" - "),[2,0,0]]],caml_new_string("%s - %s")],
     _kR_=
      [0,
       [11,caml_new_string("sub "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("sub %s %s")],
     _kS_=
      [0,[2,0,[11,caml_new_string(" - "),[2,0,0]]],caml_new_string("%s - %s")],
     _kT_=
      [0,
       [11,caml_new_string("sub "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("sub %s %s")],
     _kU_=
      [0,[2,0,[11,caml_new_string(" + "),[2,0,0]]],caml_new_string("%s + %s")],
     _kV_=
      [0,[2,0,[11,caml_new_string(" + "),[2,0,0]]],caml_new_string("%s + %s")],
     _kW_=
      [0,
       [11,caml_new_string("add "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("add %s %s")],
     _kX_=
      [0,
       [11,caml_new_string("add "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("add %s %s")],
     _kC_=
      [0,[11,caml_new_string("square "),[2,0,0]],caml_new_string("square %s")],
     _kD_=
      [0,[11,caml_new_string("square "),[2,0,0]],caml_new_string("square %s")],
     _kE_=
      [0,[2,0,[11,caml_new_string(" + "),[2,0,0]]],caml_new_string("%s + %s")],
     _kF_=
      [0,[2,0,[11,caml_new_string(" + "),[2,0,0]]],caml_new_string("%s + %s")],
     _kG_=
      [0,
       [11,caml_new_string("add "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("add %s %s")],
     _kH_=
      [0,
       [11,caml_new_string("add "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("add %s %s")],
     _kI_=
      [0,[11,caml_new_string("zero - "),[2,0,0]],caml_new_string("zero - %s")],
     _kJ_=
      [0,[11,caml_new_string("zero - "),[2,0,0]],caml_new_string("zero - %s")],
     _kK_=
      [0,
       [11,caml_new_string("substract zero "),[2,0,0]],
       caml_new_string("substract zero %s")],
     _kL_=
      [0,
       [11,caml_new_string("substract zero "),[2,0,0]],
       caml_new_string("substract zero %s")],
     _kM_=[0,[12,45,[2,0,0]],caml_new_string("-%s")],
     _kN_=[0,[12,45,[2,0,0]],caml_new_string("-%s")],
     _kO_=
      [0,[11,caml_new_string("negate "),[2,0,0]],caml_new_string("negate %s")],
     _kP_=
      [0,[11,caml_new_string("negate "),[2,0,0]],caml_new_string("negate %s")],
     _kA_=
      [0,[2,0,[11,caml_new_string(" * "),[2,0,0]]],caml_new_string("%s * %s")],
     _kB_=
      [0,
       [11,caml_new_string("multiply "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("multiply %s %s")],
     _ky_=
      [0,[2,0,[11,caml_new_string(" / "),[2,0,0]]],caml_new_string("%s / %s")],
     _kz_=
      [0,
       [11,caml_new_string("divide "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("divide %s %s")],
     _kw_=
      [0,
       [2,0,[11,caml_new_string(" ** "),[21,1,0]]],
       caml_new_string("%s ** %n")],
     _kx_=
      [0,
       [11,caml_new_string("exponentiate "),[2,0,[12,32,[21,1,0]]]],
       caml_new_string("exponentiate %s %n")],
     _kr_=[0,[11,caml_new_string("pred "),[2,0,0]],caml_new_string("pred %s")],
     _ks_=[0,[11,caml_new_string("succ "),[2,0,0]],caml_new_string("succ %s")],
     _kp_=
      [0,
       [11,caml_new_string("try_of_string "),[3,0,0]],
       caml_new_string("try_of_string %S")],
     _kq_=
      [0,
       [11,caml_new_string("of_string "),[3,0,0]],
       caml_new_string("of_string %S")],
     _kn_=
      [0,
       [11,caml_new_string("to_string "),[2,0,0]],
       caml_new_string("to_string %s")],
     _jc_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _jd_=
      [0,
       [11,caml_new_string("max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("max %s %s")],
     _je_=
      [0,
       [11,caml_new_string("min "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min %s %s")],
     _jf_=
      [0,[2,0,[11,caml_new_string(" > "),[2,0,0]]],caml_new_string("%s > %s")],
     _jg_=
      [0,
       [2,0,[11,caml_new_string(" >= "),[2,0,0]]],
       caml_new_string("%s >= %s")],
     _jh_=
      [0,
       [2,0,[11,caml_new_string(" <= "),[2,0,0]]],
       caml_new_string("%s <= %s")],
     _ji_=
      [0,[2,0,[11,caml_new_string(" < "),[2,0,0]]],caml_new_string("%s < %s")],
     _jj_=
      [0,
       [11,caml_new_string("greater_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_than %s %s")],
     _jk_=
      [0,
       [11,caml_new_string("greater_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_or_equal %s %s")],
     _jl_=
      [0,
       [11,caml_new_string("less_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_or_equal %s %s")],
     _jm_=
      [0,
       [11,caml_new_string("less_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_than %s %s")],
     _jn_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _jo_=
      [0,
       [11,caml_new_string("max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("max %s %s")],
     _jp_=
      [0,
       [11,caml_new_string("min "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min %s %s")],
     _jq_=
      [0,[2,0,[11,caml_new_string(" > "),[2,0,0]]],caml_new_string("%s > %s")],
     _jr_=
      [0,
       [2,0,[11,caml_new_string(" >= "),[2,0,0]]],
       caml_new_string("%s >= %s")],
     _js_=
      [0,
       [2,0,[11,caml_new_string(" <= "),[2,0,0]]],
       caml_new_string("%s <= %s")],
     _jt_=
      [0,[2,0,[11,caml_new_string(" < "),[2,0,0]]],caml_new_string("%s < %s")],
     _ju_=
      [0,
       [11,caml_new_string("greater_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_than %s %s")],
     _jv_=
      [0,
       [11,caml_new_string("greater_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_or_equal %s %s")],
     _jw_=
      [0,
       [11,caml_new_string("less_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_or_equal %s %s")],
     _jx_=
      [0,
       [11,caml_new_string("less_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_than %s %s")],
     _iI_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _iJ_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _iK_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _iL_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _iM_=
      [0,
       [11,caml_new_string("max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("max %s %s")],
     _iN_=
      [0,
       [11,caml_new_string("max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("max %s %s")],
     _iO_=
      [0,
       [11,caml_new_string("min "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min %s %s")],
     _iP_=
      [0,
       [11,caml_new_string("min "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min %s %s")],
     _iQ_=
      [0,[2,0,[11,caml_new_string(" > "),[2,0,0]]],caml_new_string("%s > %s")],
     _iR_=
      [0,
       [2,0,[11,caml_new_string(" >= "),[2,0,0]]],
       caml_new_string("%s >= %s")],
     _iS_=
      [0,
       [2,0,[11,caml_new_string(" <= "),[2,0,0]]],
       caml_new_string("%s <= %s")],
     _iT_=
      [0,[2,0,[11,caml_new_string(" < "),[2,0,0]]],caml_new_string("%s < %s")],
     _iU_=
      [0,
       [11,caml_new_string("greater_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_than %s %s")],
     _iV_=
      [0,
       [11,caml_new_string("greater_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_or_equal %s %s")],
     _iW_=
      [0,
       [11,caml_new_string("less_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_or_equal %s %s")],
     _iX_=
      [0,
       [11,caml_new_string("less_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_than %s %s")],
     _iY_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _iZ_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _i0_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _i1_=
      [0,
       [11,caml_new_string("min_max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min_max %s %s")],
     _i2_=
      [0,
       [11,caml_new_string("max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("max %s %s")],
     _i3_=
      [0,
       [11,caml_new_string("max "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("max %s %s")],
     _i4_=
      [0,
       [11,caml_new_string("min "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min %s %s")],
     _i5_=
      [0,
       [11,caml_new_string("min "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("min %s %s")],
     _i6_=
      [0,[2,0,[11,caml_new_string(" > "),[2,0,0]]],caml_new_string("%s > %s")],
     _i7_=
      [0,
       [2,0,[11,caml_new_string(" >= "),[2,0,0]]],
       caml_new_string("%s >= %s")],
     _i8_=
      [0,
       [2,0,[11,caml_new_string(" <= "),[2,0,0]]],
       caml_new_string("%s <= %s")],
     _i9_=
      [0,[2,0,[11,caml_new_string(" < "),[2,0,0]]],caml_new_string("%s < %s")],
     _i__=
      [0,
       [11,caml_new_string("greater_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_than %s %s")],
     _i$_=
      [0,
       [11,caml_new_string("greater_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("greater_or_equal %s %s")],
     _ja_=
      [0,
       [11,caml_new_string("less_or_equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_or_equal %s %s")],
     _jb_=
      [0,
       [11,caml_new_string("less_than "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("less_than %s %s")],
     _g9_=
      [0,
       [2,0,[11,caml_new_string(" <> "),[2,0,0]]],
       caml_new_string("%s <> %s")],
     _g__=
      [0,[2,0,[11,caml_new_string(" = "),[2,0,0]]],caml_new_string("%s = %s")],
     _g$_=
      [0,
       [11,caml_new_string("different "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("different %s %s")],
     _ha_=
      [0,
       [11,caml_new_string("equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("equal %s %s")],
     _hb_=
      [0,
       [2,0,[11,caml_new_string(" <> "),[2,0,0]]],
       caml_new_string("%s <> %s")],
     _hc_=
      [0,[2,0,[11,caml_new_string(" = "),[2,0,0]]],caml_new_string("%s = %s")],
     _hd_=
      [0,
       [11,caml_new_string("different "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("different %s %s")],
     _he_=
      [0,
       [11,caml_new_string("equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("equal %s %s")],
     _g1_=
      [0,
       [2,0,[11,caml_new_string(" <> "),[2,0,0]]],
       caml_new_string("%s <> %s")],
     _g2_=
      [0,[2,0,[11,caml_new_string(" = "),[2,0,0]]],caml_new_string("%s = %s")],
     _g3_=
      [0,
       [11,caml_new_string("different "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("different %s %s")],
     _g4_=
      [0,
       [11,caml_new_string("equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("equal %s %s")],
     _g5_=
      [0,
       [2,0,[11,caml_new_string(" <> "),[2,0,0]]],
       caml_new_string("%s <> %s")],
     _g6_=
      [0,[2,0,[11,caml_new_string(" = "),[2,0,0]]],caml_new_string("%s = %s")],
     _g7_=
      [0,
       [11,caml_new_string("different "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("different %s %s")],
     _g8_=
      [0,
       [11,caml_new_string("equal "),[2,0,[12,32,[2,0,0]]]],
       caml_new_string("equal %s %s")],
     _gH_=[0,[11,caml_new_string("repr "),[2,0,0]],caml_new_string("repr %s")],
     _ge_=[5,caml_new_string("not in")],
     _fV_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _fW_=[0,1],
     _fO_=
      [0,
       [11,
        caml_new_string("Single {label="),
        [3,0,[11,caml_new_string("; status="),[2,0,[12,125,0]]]]],
       caml_new_string("Single {label=%S; status=%s}")],
     _fP_=
      [0,
       [11,
        caml_new_string("Group {name="),
        [3,
         0,
         [11,
          caml_new_string("; children="),
          [2,0,[11,caml_new_string("; counts="),[2,0,[12,125,0]]]]]]],
       caml_new_string("Group {name=%S; children=%s; counts=%s}")],
     _fS_=
      [0,
       [2,0,[3,0,[11,caml_new_string(": "),[2,0,0]]]],
       caml_new_string("%s%S: %s")],
     _fT_=
      [0,
       [2,0,[3,0,[11,caml_new_string(" (Successes: "),[4,3,0,0,[12,41,0]]]]],
       caml_new_string("%s%S (Successes: %i)")],
     _fU_=
      [0,
       [2,
        0,
        [3,
         0,
         [11,
          caml_new_string(" (Successes: "),
          [4,
           3,
           0,
           0,
           [11,
            caml_new_string(", failures: "),
            [4,3,0,0,[11,caml_new_string(", errors: "),[4,3,0,0,[12,41,0]]]]]]]]],
       caml_new_string("%s%S (Successes: %i, failures: %i, errors: %i)")],
     _fM_=
      [0,
       [11,
        caml_new_string("{successes="),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string("; failures="),
          [4,3,0,0,[11,caml_new_string("; errors="),[4,3,0,0,[12,125,0]]]]]]],
       caml_new_string("{successes=%i; failures=%i; errors=%i}")],
     _fJ_=[0,1,0,0],
     _fK_=[0,0,1,0],
     _fL_=[0,0,0,1],
     _fy_=
      [0,
       [11,
        caml_new_string("FAILED: expected "),
        [2,0,[11,caml_new_string(", but got "),[2,0,0]]]],
       caml_new_string("FAILED: expected %s, but got %s")],
     _fz_=
      [0,
       [11,
        caml_new_string("FAILED: expected exception "),
        [2,0,[11,caml_new_string(" not raised"),0]]],
       caml_new_string("FAILED: expected exception %s not raised")],
     _fA_=
      [0,
       [11,
        caml_new_string("FAILED: expected exception "),
        [2,0,[11,caml_new_string(" not raised"),0]]],
       caml_new_string("FAILED: expected exception %s not raised")],
     _fB_=
      [0,
       [11,
        caml_new_string("FAILED: expected exception "),
        [2,
         0,
         [11,
          caml_new_string(" not raised, but exception "),
          [2,0,[11,caml_new_string(" raised\n"),[2,0,0]]]]]],
       caml_new_string
        ("FAILED: expected exception %s not raised, but exception %s raised\n%s")],
     _fC_=
      [0,
       [11,
        caml_new_string("FAILED: expected exception "),
        [2,
         0,
         [11,
          caml_new_string(" not raised, but exception "),
          [2,0,[11,caml_new_string(" raised (no backtrace)"),0]]]]],
       caml_new_string
        ("FAILED: expected exception %s not raised, but exception %s raised (no backtrace)")],
     _fD_=
      [0,
       [11,
        caml_new_string("FAILED: expected exception "),
        [2,
         0,
         [11,
          caml_new_string(" not raised, but exception "),
          [2,0,[11,caml_new_string(" raised\n"),[2,0,0]]]]]],
       caml_new_string
        ("FAILED: expected exception %s not raised, but exception %s raised\n%s")],
     _fE_=
      [0,
       [11,
        caml_new_string("FAILED: expected exception "),
        [2,
         0,
         [11,
          caml_new_string(" not raised, but exception "),
          [2,0,[11,caml_new_string(" raised (no backtrace)"),0]]]]],
       caml_new_string
        ("FAILED: expected exception %s not raised, but exception %s raised (no backtrace)")],
     _fF_=
      [0,
       [11,caml_new_string("FAILED: "),[2,0,0]],
       caml_new_string("FAILED: %s")],
     _fG_=
      [0,
       [11,
        caml_new_string("ERROR: exception "),
        [2,0,[11,caml_new_string(" raised\n"),[2,0,0]]]],
       caml_new_string("ERROR: exception %s raised\n%s")],
     _fH_=
      [0,
       [11,
        caml_new_string("ERROR: exception "),
        [2,0,[11,caml_new_string(" raised (no backtrace)"),0]]],
       caml_new_string("ERROR: exception %s raised (no backtrace)")],
     _fv_=
      [0,
       [11,caml_new_string("Failure ("),[2,0,[12,41,0]]],
       caml_new_string("Failure (%s)")],
     _fw_=
      [0,
       [11,
        caml_new_string("Error ("),
        [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]],
       caml_new_string("Error (%s, %s)")],
     _fp_=
      [0,
       [11,
        caml_new_string("NotEqual ("),
        [3,0,[11,caml_new_string(", "),[3,0,[12,41,0]]]]],
       caml_new_string("NotEqual (%S, %S)")],
     _fq_=
      [0,
       [11,caml_new_string("NoException "),[2,0,0]],
       caml_new_string("NoException %s")],
     _fr_=
      [0,
       [11,caml_new_string("NoExceptionNamed "),[3,0,0]],
       caml_new_string("NoExceptionNamed %S")],
     _fs_=
      [0,
       [11,
        caml_new_string("WrongException ("),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]]]],
       caml_new_string("WrongException (%s, %s, %s)")],
     _ft_=
      [0,
       [11,
        caml_new_string("WrongExceptionNamed ("),
        [3,
         0,
         [11,
          caml_new_string(", "),
          [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]]]],
       caml_new_string("WrongExceptionNamed (%S, %s, %s)")],
     _fu_=
      [0,[11,caml_new_string("Custom "),[3,0,0]],caml_new_string("Custom %S")],
     _cL_=
      [0,
       [12,
        40,
        [2,
         0,
         [11,
          caml_new_string(", "),
          [2,
           0,
           [11,
            caml_new_string(", "),
            [2,
             0,
             [11,
              caml_new_string(", "),
              [2,0,[11,caml_new_string(", "),[2,0,partial]]]]]]]]]],
       caml_new_string("(%s, %s, %s, %s, %s)")],
     _cA_=
      [0,
       [12,
        40,
        [2,
         0,
         [11,
          caml_new_string(", "),
          [2,
           0,
           [11,
            caml_new_string(", "),
            [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]]]]]],
       caml_new_string("(%s, %s, %s, %s)")],
     _cq_=
      [0,
       [12,
        40,
        [2,
         0,
         [11,
          caml_new_string(", "),
          [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]]]],
       caml_new_string("(%s, %s, %s)")],
     _ch_=
      [0,
       [12,40,[2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]],
       caml_new_string("(%s, %s)")],
     _bU_=[0,caml_new_string("Foundations/IntRange.ml"),54,6],
     _bT_=[0,caml_new_string("Foundations/IntRange.ml"),48,6],
     _bO_=
      [0,
       [12,
        91,
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" to "),
          [4,3,0,0,[11,caml_new_string(" step "),[4,3,0,0,[12,93,0]]]]]]],
       caml_new_string("[%i to %i step %i]")],
     _bP_=
      [0,
       [12,
        91,
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" down to "),
          [4,3,0,0,[11,caml_new_string(" step -"),[4,3,0,0,[12,93,0]]]]]]],
       caml_new_string("[%i down to %i step -%i]")],
     _bM_=[0,caml_new_string("Foundations/IntRange.ml"),25,4],
     _bN_=[0,caml_new_string("Foundations/IntRange.ml"),31,4],
     _bL_=
      [0,
       [11,caml_new_string("String.split: empty separator"),0],
       caml_new_string("String.split: empty separator")],
     _bK_=
      [0,
       [11,caml_new_string("String.drop_prefix"),0],
       caml_new_string("String.drop_prefix")],
     _bJ_=
      [0,
       [11,caml_new_string("String.drop_suffix"),0],
       caml_new_string("String.drop_suffix")],
     _bD_=[0,[3,0,0],caml_new_string("%S")],
     _aQ_=
      [0,
       [11,
        caml_new_string("{filename="),
        [3,
         0,
         [11,
          caml_new_string("; line_number="),
          [21,
           1,
           [11,
            caml_new_string("; start_char="),
            [21,1,[11,caml_new_string("; end_char="),[21,1,[12,125,0]]]]]]]]],
       caml_new_string
        ("{filename=%S; line_number=%n; start_char=%n; end_char=%n}")],
     _aN_=
      [0,
       [11,caml_new_string("List.Two.to_pair_list"),0],
       caml_new_string("List.Two.to_pair_list")],
     _aK_=[0,[12,91,[2,0,[12,93,0]]],caml_new_string("[%s]")],
     _aL_=[0,caml_new_string("; ")],
     _aJ_=[0,[2,0,[2,0,[2,0,0]]],caml_new_string("%s%s%s")],
     _aI_=
      [0,
       [11,caml_new_string("List.reduce_short_i"),0],
       caml_new_string("List.reduce_short_i")],
     _aH_=
      [0,
       [11,caml_new_string("List.reduce_short"),0],
       caml_new_string("List.reduce_short")],
     _aG_=
      [0,
       [11,caml_new_string("List.reduce_short_acc"),0],
       caml_new_string("List.reduce_short_acc")],
     _aF_=
      [0,
       [11,caml_new_string("List.reduce_i"),0],
       caml_new_string("List.reduce_i")],
     _aE_=
      [0,[11,caml_new_string("List.reduce"),0],caml_new_string("List.reduce")],
     _aD_=
      [0,
       [11,caml_new_string("List.reduce_acc"),0],
       caml_new_string("List.reduce_acc")],
     _aC_=[0,[11,caml_new_string("List.tail"),0],caml_new_string("List.tail")],
     _aB_=[0,[11,caml_new_string("List.head"),0],caml_new_string("List.head")],
     _aw_=[0,[11,caml_new_string("Some "),[2,0,0]],caml_new_string("Some %s")],
     _fI_=[0,0,0,0],
     _nj_=
      [0,
       [0,-3,caml_new_string("-3l")],
       [0,
        [0,0,caml_new_string("0l")],
        [0,
         [0,0,caml_new_string("0l")],
         [0,[0,1,caml_new_string("1l")],[0,[0,15,caml_new_string("15l")],0]]]]],
     _nk_=
      [0,
       [0,-3,caml_new_string("-3")],
       [0,
        [0,0,caml_new_string("0")],
        [0,
         [0,0,caml_new_string("0")],
         [0,[0,1,caml_new_string("1")],[0,[0,15,caml_new_string("15")],0]]]]],
     _nl_=[0,[0,0,0],[0,[0,1,0],[0,[0,2,0],0]]],
     _nm_=[0,[0,0,1],[0,[0,1,-1],0]],
     _nn_=[0,[0,-10,[0,-5,[0,-1,[0,0,[0,1,[0,2,[0,5,0]]]]]]],0],
     _no_=[0,[0,4,3,7],[0,[0,4,-2,2],[0,[0,5,-7,-2],0]]],
     _np_=[0,[0,4,-4],[0,[0,-7,7],0]],
     _nq_=[0,[0,4,3,12],[0,[0,4,-3,-12],[0,[0,-4,-3,12],0]]],
     _nr_=
      [0,[0,5,2,2],[0,[0,4,2,2],[0,[0,4,3,1],[0,[0,4,4,1],[0,[0,4,5,0],0]]]]],
     _ns_=[0,[0,3,3,27],[0,[0,2,7,128],0]],
     _nt_=[0,[0,1,2],[0,[0,42,43],[0,[0,-121,-120],0]]],
     _n8_=
      [0,
       [0,[255,16777213,16777215,65535],caml_new_string("-3L")],
       [0,
        [0,[255,0,0,0],caml_new_string("0L")],
        [0,
         [0,[255,0,0,0],caml_new_string("0L")],
         [0,
          [0,[255,1,0,0],caml_new_string("1L")],
          [0,[0,[255,15,0,0],caml_new_string("15L")],0]]]]],
     _n9_=
      [0,
       [0,[255,16777213,16777215,65535],caml_new_string("-3")],
       [0,
        [0,[255,0,0,0],caml_new_string("0")],
        [0,
         [0,[255,0,0,0],caml_new_string("0")],
         [0,
          [0,[255,1,0,0],caml_new_string("1")],
          [0,[0,[255,15,0,0],caml_new_string("15")],0]]]]],
     _n__=[0,[0,[255,0,0,0],0],[0,[0,[255,1,0,0],0],[0,[0,[255,2,0,0],0],0]]],
     _n$_=
      [0,
       [0,[255,0,0,0],[255,1,0,0]],
       [0,[0,[255,1,0,0],[255,16777215,16777215,65535]],0]],
     _oa_=
      [0,
       [0,
        [255,16777206,16777215,65535],
        [0,
         [255,16777211,16777215,65535],
         [0,
          [255,16777215,16777215,65535],
          [0,[255,0,0,0],[0,[255,1,0,0],[0,[255,2,0,0],[0,[255,5,0,0],0]]]]]]],
       0],
     _ob_=
      [0,
       [0,[255,4,0,0],[255,3,0,0],[255,7,0,0]],
       [0,
        [0,[255,4,0,0],[255,16777214,16777215,65535],[255,2,0,0]],
        [0,
         [0,
          [255,5,0,0],
          [255,16777209,16777215,65535],
          [255,16777214,16777215,65535]],
         0]]],
     _oc_=
      [0,
       [0,[255,4,0,0],[255,16777212,16777215,65535]],
       [0,[0,[255,16777209,16777215,65535],[255,7,0,0]],0]],
     _od_=
      [0,
       [0,[255,4,0,0],[255,3,0,0],[255,12,0,0]],
       [0,
        [0,
         [255,4,0,0],
         [255,16777213,16777215,65535],
         [255,16777204,16777215,65535]],
        [0,
         [0,
          [255,16777212,16777215,65535],
          [255,16777213,16777215,65535],
          [255,12,0,0]],
         0]]],
     _oe_=
      [0,
       [0,[255,5,0,0],[255,2,0,0],[255,2,0,0]],
       [0,
        [0,[255,4,0,0],[255,2,0,0],[255,2,0,0]],
        [0,
         [0,[255,4,0,0],[255,3,0,0],[255,1,0,0]],
         [0,
          [0,[255,4,0,0],[255,4,0,0],[255,1,0,0]],
          [0,[0,[255,4,0,0],[255,5,0,0],[255,0,0,0]],0]]]]],
     _of_=
      [0,[0,[255,3,0,0],3,[255,27,0,0]],[0,[0,[255,2,0,0],7,[255,128,0,0]],0]],
     _og_=
      [0,
       [0,[255,1,0,0],[255,2,0,0]],
       [0,
        [0,[255,42,0,0],[255,43,0,0]],
        [0,[0,[255,16777095,16777215,65535],[255,16777096,16777215,65535]],0]]],
     _os_=[0,2,0],
     _ot_=[0,1,0],
     _ou_=[0,0,0],
     _ow_=[0,1,-1],
     _ox_=[0,0,1],
     _oz_=
      [0,[0,-10,[0,-5,[0,-1,[0,-0.2,[0,0,[0,0.7,[0,1,[0,2,[0,5,0]]]]]]]]],0],
     _oA_=[0,[0,4,3,7],[0,[0,4,-2,2],[0,[0,5,-7,-2],0]]],
     _oB_=[0,[0,4,-4],[0,[0,-7,7],0]],
     _oC_=[0,[0,4,3,12],[0,[0,4,-3,-12],[0,[0,-4,-3,12],0]]],
     _oD_=
      [0,
       [0,5,2,2.5],
       [0,[0,4,2,2],[0,[0,1,4,0.25],[0,[0,4,4,1],[0,[0,4,5,0.8],0]]]]],
     _oE_=
      [0,
       [0,3,3,27],
       [0,[0,2,7,128],[0,[0,0.5,4,0.0625],[0,[0,2,-4,0.0625],0]]]],
     _oF_=
      [0,
       [0,0,caml_new_string("Normal")],
       [0,
        [0,1,caml_new_string("SubNormal")],
        [0,
         [0,2,caml_new_string("Zero")],
         [0,
          [0,3,caml_new_string("Infinite")],
          [0,[0,4,caml_new_string("NotANumber")],0]]]]],
     _oH_=[0,[0,0,1],0],
     _oI_=[0,[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],0],
     _t2_=
      [0,[0,caml_new_string("false"),0],[0,[0,caml_new_string("true"),1],0]],
     _t3_=[0,[0,1,0],[0,[0,0,0],0]],
     _t4_=[0,[0,1,0],0],
     _t5_=[0,[0,0,[0,1,0]],0],
     _uD_=[0,[0,0,0],[0,[0,1,0],[0,[0,2,0],0]]],
     _uE_=[0,[0,0,1],[0,[0,1,-1],0]],
     _uF_=[0,[0,-10,[0,-5,[0,-1,[0,0,[0,1,[0,2,[0,5,0]]]]]]],0],
     _uG_=[0,[0,4,3,7],[0,[0,4,-2,2],[0,[0,5,-7,-2],0]]],
     _uH_=[0,[0,4,-4],[0,[0,-7,7],0]],
     _uI_=[0,[0,4,3,12],[0,[0,4,-3,-12],[0,[0,-4,-3,12],0]]],
     _uJ_=
      [0,[0,5,2,2],[0,[0,4,2,2],[0,[0,4,3,1],[0,[0,4,4,1],[0,[0,4,5,0],0]]]]],
     _uK_=[0,[0,3,3,27],[0,[0,2,7,128],0]],
     _uL_=[0,[0,1,2],[0,[0,42,43],[0,[0,-121,-120],0]]],
     _uR_=
      [0,
       [0,0,caml_new_string("[]")],
       [0,
        [0,[0,1,0],caml_new_string("[1]")],
        [0,[0,[0,1,[0,2,[0,3,0]]],caml_new_string("[1; 2; 3]")],0]]],
     _uS_=[0,[0,[0,1,0],0],[0,[0,[0,1,[0,2,[0,3,0]]],0],0]],
     _uT_=[0,0,0],
     _uV_=
      [0,
       [0,0,[0,1,0]],
       [0,
        [0,[0,1,0],[0,2,0]],
        [0,
         [0,[0,1,[0,1,[0,1,0]]],[0,1,[0,1,[0,2,0]]]],
         [0,[0,[0,1,[0,1,[0,1,0]]],[0,1,[0,1,[0,1,[0,1,0]]]]],0]]]],
     _vF_=
      [0,
       [0,
        [0,caml_new_string("Implementation/CallStack.ml"),3,15,49],
        caml_new_string
         ('{filename="Implementation/CallStack.ml"; line_number=3; start_char=15; end_char=49}')],
       0],
     _wv_=[0,4],
     _ww_=[0,3],
     _wy_=[0,-3],
     _wC_=[0,3],
     _wD_=[0,5],
     _wF_=[0,3],
     _wG_=[0,5],
     _wI_=[0,3],
     _wJ_=[0,5],
     _wL_=[0,1],
     _wM_=[0,0],
     _wP_=[0,5],
     _wR_=[0,-1],
     _wT_=[0,0],
     _wW_=[0,2],
     _wY_=[0,3],
     _wZ_=[0,5],
     _w1_=[0,3],
     _w2_=[0,5],
     _yX_=
      [0,
       [0,-3,caml_new_string("-3n")],
       [0,
        [0,0,caml_new_string("0n")],
        [0,
         [0,0,caml_new_string("0n")],
         [0,[0,1,caml_new_string("1n")],[0,[0,15,caml_new_string("15n")],0]]]]],
     _yY_=
      [0,
       [0,-3,caml_new_string("-3")],
       [0,
        [0,0,caml_new_string("0")],
        [0,
         [0,0,caml_new_string("0")],
         [0,[0,1,caml_new_string("1")],[0,[0,15,caml_new_string("15")],0]]]]],
     _yZ_=[0,[0,0,0],[0,[0,1,0],[0,[0,2,0],0]]],
     _y0_=[0,[0,0,1],[0,[0,1,-1],0]],
     _y1_=[0,[0,-10,[0,-5,[0,-1,[0,0,[0,1,[0,2,[0,5,0]]]]]]],0],
     _y2_=[0,[0,4,3,7],[0,[0,4,-2,2],[0,[0,5,-7,-2],0]]],
     _y3_=[0,[0,4,-4],[0,[0,-7,7],0]],
     _y4_=[0,[0,4,3,12],[0,[0,4,-3,-12],[0,[0,-4,-3,12],0]]],
     _y5_=
      [0,[0,5,2,2],[0,[0,4,2,2],[0,[0,4,3,1],[0,[0,4,4,1],[0,[0,4,5,0],0]]]]],
     _y6_=[0,[0,3,3,27],[0,[0,2,7,128],0]],
     _y7_=[0,[0,1,2],[0,[0,42,43],[0,[0,-121,-120],0]]],
     _zb_=
      [0,
       [0,0,caml_new_string("None")],
       [0,[0,[0,42],caml_new_string("Some 42")],0]],
     _zd_=[0,[0,0,[0,42]],[0,[0,[0,42],[0,43]],0]],
     _ze_=[0,[0,0,[0,[0,0],[0,[0,1],0]]],0],
     _z8_=[0,[0,[0,1,caml_new_string("a")],caml_new_string('(1, "a")')],0],
     _z__=
      [0,
       [0,[0,1,caml_new_string("a")],[0,1,caml_new_string("b")]],
       [0,[0,[0,1,caml_new_string("a")],[0,2,caml_new_string("a")]],0]],
     _z$_=
      [0,
       [0,
        [0,0,caml_new_string("a")],
        [0,[0,0,caml_new_string("b")],[0,[0,1,caml_new_string("a")],0]]],
       0],
     _Aa_=
      [0,[0,[0,1,caml_new_string("a"),2],caml_new_string('(1, "a", 2.)')],0],
     _Ac_=
      [0,
       [0,[0,1,caml_new_string("a"),2],[0,1,caml_new_string("a"),3]],
       [0,
        [0,[0,1,caml_new_string("a"),2],[0,1,caml_new_string("b"),2]],
        [0,[0,[0,1,caml_new_string("a"),2],[0,2,caml_new_string("a"),2]],0]]],
     _Ad_=
      [0,
       [0,
        [0,0,caml_new_string("a"),0],
        [0,
         [0,0,caml_new_string("a"),1],
         [0,[0,0,caml_new_string("b"),0],[0,[0,1,caml_new_string("a"),0],0]]]],
       0],
     _Ae_=
      [0,
       [0,[0,1,caml_new_string("a"),2,3],caml_new_string('(1, "a", 2., 3)')],
       0],
     _Ag_=
      [0,
       [0,[0,1,caml_new_string("a"),2,3],[0,1,caml_new_string("a"),2,4]],
       [0,
        [0,[0,1,caml_new_string("a"),2,3],[0,1,caml_new_string("a"),3,3]],
        [0,
         [0,[0,1,caml_new_string("a"),2,3],[0,1,caml_new_string("b"),2,3]],
         [0,
          [0,[0,1,caml_new_string("a"),2,3],[0,0,caml_new_string("a"),2,3]],
          0]]]],
     _Ah_=
      [0,
       [0,
        [0,1,caml_new_string("a"),2,3],
        [0,
         [0,1,caml_new_string("a"),2,4],
         [0,
          [0,1,caml_new_string("a"),3,3],
          [0,
           [0,1,caml_new_string("b"),2,3],
           [0,[0,2,caml_new_string("a"),2,3],0]]]]],
       0],
     _Ai_=
      [0,
       [0,
        [0,1,caml_new_string("a"),2,3,4],
        caml_new_string('(1, "a", 2., 3, 4)')],
       0],
     _Ak_=
      [0,
       [0,[0,1,caml_new_string("a"),2,3,4],[0,1,caml_new_string("a"),2,3,5]],
       [0,
        [0,[0,1,caml_new_string("a"),2,3,4],[0,1,caml_new_string("a"),2,4,4]],
        [0,
         [0,[0,1,caml_new_string("a"),2,3,4],[0,1,caml_new_string("a"),3,3,4]],
         [0,
          [0,
           [0,1,caml_new_string("a"),2,3,4],
           [0,1,caml_new_string("b"),2,3,4]],
          [0,
           [0,
            [0,1,caml_new_string("a"),2,3,4],
            [0,0,caml_new_string("a"),2,3,4]],
           0]]]]],
     _Al_=
      [0,
       [0,
        [0,1,caml_new_string("a"),2,3,4],
        [0,
         [0,1,caml_new_string("a"),2,3,5],
         [0,
          [0,1,caml_new_string("a"),2,4,4],
          [0,
           [0,1,caml_new_string("a"),3,3,4],
           [0,
            [0,1,caml_new_string("b"),2,3,4],
            [0,[0,2,caml_new_string("a"),2,3,4],0]]]]]],
       0],
     _BJ_=[0,1,[0,3,[0,5,[0,7,[0,9,0]]]]],
     _BW_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _BZ_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],11,0]]]],
     _B2_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _B5_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _B8_=[0,[0,[2,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _B$_=[0,[0,[2,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _Cd_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _Cg_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],11,0]]]],
     _Cj_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _Cm_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _Cp_=[0,[0,[2,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _Cs_=[0,[0,[2,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _Cw_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _Cz_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,11,0]]]]]],
     _CC_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _CF_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _CI_=[0,[0,[2,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _CL_=[0,[0,[2,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _CP_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _CS_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,11,0]]]]]],
     _CV_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _CY_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _C1_=[0,[0,[2,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _C4_=[0,[0,[2,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _C8_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _C$_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,11,0]]]],
     _Dc_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _Df_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     _Di_=[0,[0,[0,[0,[2,[0,0,1,0]],5,0]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     _Dl_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     _Dp_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _Ds_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,11,0]]]],
     _Dv_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _Dy_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _DB_=[0,[0,[0,[0,[2,[0,0,1,0]],5,0]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _DE_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _DI_=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _DL_=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,0,11,0]]]],
     _DO_=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _DR_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     _DU_=[0,[0,[0,[0,[2,[0,0,1,0]],5,0]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     _DX_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     _D1_=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _D4_=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,0,11,0]]]],
     _D7_=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],9,[0,[0,0,11,0]]]],
     _D__=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _Eb_=[0,[0,[0,[0,[2,[0,0,1,0]],5,0]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _Ee_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _Ei_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _El_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],11,0]]]],
     _Eo_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _Er_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _Eu_=[0,[0,[0,[0,0,1,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _Ex_=[0,[0,[0,[0,0,3,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _EB_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _EE_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],11,0]]]],
     _EH_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _EK_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _EN_=[0,[0,[0,[0,0,1,0]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,11,0]]]]]],
     _EQ_=[0,[0,[0,[0,0,3,0]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,11,0]]]]]],
     _EU_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _EX_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],11,0]]]],
     _E0_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _E3_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _E6_=[0,[0,[0,[0,0,1,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _E9_=[0,[0,[0,[0,0,3,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _Fb_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _Fe_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],11,0]]]],
     _Fh_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _Fk_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _Fn_=[0,[0,[0,[0,0,1,0]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,11,0]]]]]],
     _Fq_=[0,[0,[0,[0,0,3,0]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,11,0]]]]]],
     _Fu_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _Fx_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,11,0]]]]]],
     _FA_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],9,[0,[0,0,11,0]]]]]],
     _FD_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _FG_=[0,[0,[0,[0,0,1,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _FJ_=[0,[0,[2,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _FN_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _FQ_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,11,0]]]]]],
     _FT_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],9,[0,[0,0,11,0]]]]]],
     _FW_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _FZ_=[0,[0,[0,[0,0,1,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _F2_=[0,[0,[2,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],9,[0,[0,0,11,0]]]],
     _F6_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _F9_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,11,0]]]]]],
     _Ga_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],9,[0,[0,0,11,0]]]]]],
     _Gd_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _Gg_=[0,[0,[0,[0,0,1,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _Gj_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,[2,[0,0,9,0]],11,0]]]],
     _Gn_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _Gq_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,11,0]]]]]],
     _Gt_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],9,[0,[0,0,11,0]]]]]],
     _Gw_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _Gz_=[0,[0,[0,[0,0,1,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,11,0]]]]]],
     _GC_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,0,9,[2,[0,0,11,0]]]]]],
     _GG_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,0]]]],
     _GJ_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],9,0]]]],
     _GM_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,0]]]],
     _GP_=[0,[0,[0,[0,[2,[0,0,1,0]],5,0]],7,[0,[0,0,9,0]]]],
     _GS_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _GW_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,0]]]],
     _GZ_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],9,0]]]],
     _G2_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,0]]]],
     _G5_=[0,[0,[0,[0,[2,[0,0,1,0]],5,0]],7,[0,[0,0,9,0]]]],
     _G8_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _Ha_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,7,0]]]],
     _Hd_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,9,0]]]],
     _Hg_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,0]]]],
     _Hj_=[0,[0,[0,[0,0,1,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _Hm_=[0,[0,[0,[0,0,3,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _Hq_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,7,0]]]],
     _Ht_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,9,0]]]],
     _Hw_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],7,[0,[0,0,9,0]]]],
     _Hz_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _HC_=[0,[0,[0,[0,0,3,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _HG_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,7,0]]]],
     _HJ_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,9,0]]]],
     _HM_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],7,[0,[0,0,9,0]]]],
     _HP_=[0,[0,[0,[0,0,1,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _HS_=[0,[0,[0,[0,0,3,0]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _HW_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,7,0]]]],
     _HZ_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,9,0]]]],
     _H2_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],7,[0,[0,0,9,0]]]],
     _H5_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _H8_=[0,[0,[0,[0,0,3,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _Ia_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,0]]]],
     _Id_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],9,0]]]],
     _Ig_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _Ij_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _Im_=[0,[0,[0,[0,0,3,[2,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _Iq_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,0]]]],
     _It_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],9,0]]]],
     _Iw_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _Iz_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _IC_=[0,[0,[0,[0,0,3,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _IG_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],
     _IJ_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],
     _IM_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],
     _IP_=[0,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],
     _IT_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],
     _IW_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],
     _IZ_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],
     _I2_=[0,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],
     _I6_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],
     _I9_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],
     _Ja_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],
     _Jd_=[0,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],
     _Jh_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],
     _Jk_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,7,0]]]],
     _Jn_=[0,[0,[0,[0,0,1,0]],5,[0,[0,0,7,0]]]],
     _Jq_=[0,[0,[0,[0,0,3,0]],5,[0,[0,0,7,0]]]],
     _Ju_=[0,[0,[2,[0,0,1,0]],3,0]],
     _Jx_=[0,[0,[2,[0,0,1,0]],5,0]],
     _JA_=[0,[0,0,3,[2,[0,0,5,0]]]],
     _JE_=[0,[0,[2,[0,0,1,0]],3,0]],
     _JH_=[0,[0,[2,[0,0,1,0]],5,0]],
     _JK_=[0,[0,0,3,[2,[0,0,5,0]]]],
     _JO_=[0,[0,0,1,0]],
     _JR_=[0,[0,0,3,0]],
     _JV_=[0,[0,0,1,0]],
     _JY_=[0,[0,0,3,0]],
     _Kl_=[0,[0,[2,[0,0,1,0]],3,[2,[0,0,4,0]]]],
     _Kn_=[0,[0,[2,[0,0,1,0]],3,0]],
     _Kp_=[0,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],
     _Kr_=[0,[0,[2,[0,0,1,0]],3,0]],
     _Kt_=[0,[0,[0,[0,0,0,0]],1,[0,[0,0,3,0]]]],
     _Kv_=[0,[0,[2,[0,0,-1,0]],3,0]],
     _Kx_=[0,[0,[0,[0,0,1,0]],-2,[0,[0,0,3,0]]]],
     _Kz_=[0,[0,[2,[0,0,1,0]],-3,0]],
     _KB_=[0,[0,[2,[0,0,1,0]],3,[2,[0,0,-4,0]]]],
     _KD_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,4,0]]]],
     _KF_=[0,[0,0,1,[2,[0,0,3,0]]]],
     _KH_=[0,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],
     _KJ_=[0,[0,0,1,[2,[0,0,3,0]]]],
     _KL_=[0,[0,[2,[0,0,0,0]],1,[2,[0,0,3,0]]]],
     _KN_=[0,[0,0,-1,[2,[0,0,3,0]]]],
     _KP_=[0,[0,[0,[0,0,1,0]],-2,[0,[0,0,3,0]]]],
     _KR_=[0,[0,0,1,[2,[0,0,-3,0]]]],
     _KT_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,-4,0]]]],
     _KV_=[0,[0,0,1,[2,[0,0,2,0]]]],
     _KX_=[0,[0,0,1,0]],
     _KZ_=[0,[0,[2,[0,0,0,0]],1,0]],
     _K1_=[0,[0,0,-1,0]],
     _K3_=[0,[0,0,1,[2,[0,0,-2,0]]]],
     _K5_=[0,[0,0,0,0]],
     _K8_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,9,[2,[0,0,10,0]]]]]],
     _K$_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,[2,[0,0,8,0]],9,0]]]],
     _Lc_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,5,[2,[0,0,6,0]]]]]],7,[0,[0,0,9,0]]]],
     _Lf_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,4,0]],5,0]]]],7,[0,[0,0,9,0]]]],
     _Li_=
      [0,
       [0,[2,[0,[0,[0,0,1,[2,[0,0,2,0]]]],3,[0,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _Ll_=
      [0,
       [0,[2,[0,[0,[0,[2,[0,0,0,0]],1,0]],3,[0,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _Ln_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,0,9,[2,[0,0,10,0]]]]]],
     _Lq_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,5,0]]]],7,[0,[0,[2,[0,0,8,0]],9,0]]]],
     _Lt_=
      [0,
       [0,[2,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,6,0]]]],7,[0,[0,0,9,0]]]],
     _Lw_=
      [0,
       [0,[2,[0,[0,[0,[2,[0,0,1,0]],3,0]],4,[0,[0,0,5,0]]]],7,[0,[0,0,9,0]]]],
     _Lz_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],2,[0,[0,0,3,[2,[0,0,5,0]]]]]],7,[0,[0,0,9,0]]]],
     _LC_=
      [0,
       [0,[2,[0,[0,[0,0,0,0]],1,[0,[0,0,3,[2,[0,0,5,0]]]]]],7,[0,[0,0,9,0]]]],
     _LE_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,10,0]]]]]],
     _LH_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[2,[0,[0,[0,0,7,0]],8,[0,[0,0,9,0]]]]]],
     _LK_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[2,[0,[0,[0,0,6,0]],7,[0,[0,0,9,0]]]]]],
     _LN_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,4,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _LQ_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _LT_=
      [0,
       [0,[2,[0,[0,[0,0,0,0]],1,[0,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _LV_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,10,0]]]]]],
     _LY_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[2,[0,[0,[0,0,7,0]],8,[0,[0,0,9,0]]]]]],
     _L1_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,6,0]],7,[2,[0,0,9,0]]]]]],
     _L4_=
      [0,
       [0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,4,0]]]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _L7_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _L__=
      [0,
       [0,[2,[0,[0,[0,0,0,0]],1,[0,[0,0,3,0]]]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _Ma_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,[2,[0,0,10,0]]]]]],
     _Md_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[2,[0,[0,[0,0,7,0]],8,[0,[0,0,9,0]]]]]],
     _Mg_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[2,[0,[0,[0,0,6,0]],7,[0,[0,0,9,0]]]]]],
     _Mj_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,4,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _Mm_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _Mp_=
      [0,
       [0,[0,[0,[2,[0,0,0,0]],1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,7,0]],9,0]]]],
     _Mr_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[2,[0,[0,[0,0,7,0]],9,[0,[0,0,10,0]]]]]],
     _Mu_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[2,[0,[0,[0,0,7,0]],8,[0,[0,0,9,0]]]]]],
     _Mx_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,6,0]],7,[2,[0,0,9,0]]]]]],
     _MA_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,4,0]]]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _MD_=
      [0,
       [0,[2,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _MG_=
      [0,
       [0,[0,[0,[2,[0,0,0,0]],1,[2,[0,0,3,0]]]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]],
     _MI_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,[2,[0,0,10,0]]]]]]]],
     _ML_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,[2,[0,0,8,0]],9,0]]]]]],
     _MO_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,[2,[0,0,6,0]]]],7,[0,[0,0,9,0]]]]]],
     _MR_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,[2,[0,0,4,0]],5,0]],7,[0,[0,0,9,0]]]]]],
     _MU_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,2,0]]]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _MX_=
      [0,
       [0,[0,[0,[2,[0,0,0,0]],1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,9,0]]]]]],
     _MZ_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,[2,[0,0,5,0]],7,0]],9,[0,[0,0,10,0]]]]]],
     _M2_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,[2,[0,0,5,0]],7,0]],8,[0,[0,0,9,0]]]]]],
     _M5_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],6,[0,[0,0,7,[2,[0,0,9,0]]]]]]]],
     _M8_=
      [0,
       [0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,4,0]],5,[0,[0,0,7,[2,[0,0,9,0]]]]]]]],
     _M$_=
      [0,
       [0,[0,[0,0,1,[2,[0,0,2,0]]]],3,[0,[0,[2,[0,0,5,0]],7,[2,[0,0,9,0]]]]]],
     _Nc_=
      [0,
       [0,[0,[0,[2,[0,0,0,0]],1,0]],3,[0,[0,[2,[0,0,5,0]],7,[2,[0,0,9,0]]]]]],
     _Ne_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,7,[2,[0,0,8,0]]]]]],
     _Nh_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,[2,[0,0,6,0]],7,0]]]],
     _Nk_=[0,[0,[0,[0,[2,[0,0,1,0]],3,[2,[0,0,4,0]]]],5,[0,[0,0,7,0]]]],
     _Nn_=[0,[0,[2,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],5,[0,[0,0,7,0]]]],
     _Nq_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,0,7,[2,[0,0,8,0]]]]]],
     _Nt_=[0,[0,[0,[0,0,1,[2,[0,0,3,0]]]],5,[0,[0,[2,[0,0,6,0]],7,0]]]],
     _Nw_=[0,[0,[2,[0,[0,[0,0,1,0]],3,[0,[0,0,4,0]]]],5,[0,[0,0,7,0]]]],
     _Nz_=[0,[0,[2,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],5,[0,[0,0,7,0]]]],
     _NC_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,5,0]],7,[2,[0,0,8,0]]]]]],
     _NF_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],6,[0,[0,0,7,0]]]]]],
     _NI_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,4,0]],5,[0,[0,0,7,0]]]]]],
     _NL_=[0,[0,[0,[0,0,1,[2,[0,0,2,0]]]],3,[0,[0,[2,[0,0,5,0]],7,0]]]],
     _NO_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],7,[0,[0,0,8,0]]]]]],
     _NR_=[0,[0,[0,[0,0,1,0]],3,[2,[0,[0,[0,0,5,0]],6,[0,[0,0,7,0]]]]]],
     _NU_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,4,0]],5,[2,[0,0,7,0]]]]]],
     _NX_=[0,[0,[0,[0,0,1,[2,[0,0,2,0]]]],3,[0,[0,0,5,[2,[0,0,7,0]]]]]],
     _N0_=[0,[0,[0,[0,[2,[0,0,0,0]],1,0]],3,[0,[0,0,5,[2,[0,0,7,0]]]]]],
     _N2_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],5,[0,[0,0,6,0]]]],
     _N5_=[0,[0,[0,[0,[2,[0,0,1,0]],3,0]],4,[0,[0,0,5,0]]]],
     _N8_=[0,[0,[0,[0,0,1,0]],2,[0,[0,0,3,[2,[0,0,5,0]]]]]],
     _N$_=[0,[0,[0,[0,0,0,0]],1,[0,[0,0,3,[2,[0,0,5,0]]]]]],
     _Ob_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,5,[2,[0,0,6,0]]]]]],
     _Oe_=[0,[0,[0,[0,0,1,0]],3,[0,[0,[2,[0,0,4,0]],5,0]]]],
     _Oh_=[0,[0,[0,[0,0,1,[2,[0,0,2,0]]]],3,[0,[0,0,5,0]]]],
     _Ok_=[0,[0,[0,[0,[2,[0,0,0,0]],1,0]],3,[0,[0,0,5,0]]]],
     _Om_=[0,[0,[2,[0,0,1,0]],3,[2,[0,0,4,0]]]],
     _Op_=[0,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],
     _Os_=[0,[0,[0,[0,0,0,0]],1,[0,[0,0,3,0]]]],
     _Ou_=[0,[0,[0,[0,0,1,0]],3,[0,[0,0,4,0]]]],
     _Ox_=[0,[0,[0,[0,0,1,0]],2,[0,[0,0,3,0]]]],
     _OA_=[0,[0,[2,[0,0,0,0]],1,[2,[0,0,3,0]]]],
     _OC_=[0,[0,0,1,[2,[0,0,2,0]]]],
     _OF_=[0,[0,[2,[0,0,0,0]],1,0]],
     _OH_=[0,[0,0,0,0]],
     _OK_=[0,2,0],
     _OL_=[0,[0,[0,[0,0,0,0]],1,[2,[0,0,2,0]]]],
     _ON_=[0,2,0],
     _OO_=[0,[0,[2,[0,0,0,0]],1,[0,[0,0,2,0]]]],
     _OQ_=[0,3,0],
     _OR_=[0,[0,[2,[0,0,0,0]],1,[2,[0,0,1,0]]]],
     _OT_=[0,3,0],
     _OU_=[0,[0,[2,[0,0,1,0]],1,[2,[0,0,2,0]]]],
     _OW_=[0,[0,[2,[0,0,0,0]],1,[2,[0,0,2,0]]]],
     _OY_=[0,0,[0,1,0]],
     _OZ_=[2,[0,0,0,[2,[0,0,1,0]]]],
     _O1_=[0,0,[0,1,0]],
     _O2_=[2,[0,[2,[0,0,0,0]],1,0]],
     _O4_=[0,[0,[2,[0,0,0,0]],1,0]],
     _O6_=[0,0,0],
     _O7_=[2,[0,0,0,0]],
     _O9_=[0,0,[0,1,0]],
     _O__=[1,[0,0,0,0]],
     _Pa_=[0,[0,0,0,0]],
     _Pc_=[0,0,[0,1,0]],
     _Pl_=[0,3,[0,2,[0,1,0]]],
     _Pm_=[0,4,[0,2,[0,3,[0,1,0]]]],
     _Po_=[0,3,[0,2,[0,1,0]]],
     _Pp_=[0,4,[0,3,[0,1,[0,2,0]]]],
     _Pr_=[0,3,[0,1,[0,2,0]]],
     _Ps_=[0,4,[0,3,[0,2,[0,1,0]]]],
     _Pu_=[0,2,[0,1,0]],
     _Pv_=[0,3,[0,1,[0,2,0]]],
     _Px_=[0,2,[0,1,0]],
     _Py_=[0,3,[0,2,[0,1,0]]],
     _PA_=[0,1,0],
     _PB_=[0,2,[0,1,0]],
     _PD_=[0,1,0],
     _PF_=[0,1,[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,0]]]]]]]],
     _PG_=[0,1,[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,0]]]]]]]],
     _PI_=[0,1,[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,0]]]]]]]],
     _PJ_=[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,[0,0,[0,1,0]]]]]]]],
     _PL_=[0,2,[0,1,[0,0,0]]],
     _PM_=[0,2,[0,1,[0,0,0]]],
     _PO_=[0,2,[0,0,[0,1,0]]],
     _PP_=[0,2,[0,0,[0,1,0]]],
     _PR_=[0,2,[0,1,[0,0,0]]],
     _PS_=[0,1,[0,2,[0,0,0]]],
     _PU_=[0,2,[0,0,[0,1,0]]],
     _PV_=[0,1,[0,0,[0,2,0]]],
     _PX_=[0,2,[0,0,[0,1,0]]],
     _PY_=[0,0,[0,2,[0,1,0]]],
     _P0_=[0,2,[0,0,[0,1,0]]],
     _P1_=[0,0,[0,1,[0,2,0]]],
     _P3_=[0,1,[0,0,0]],
     _P4_=[0,1,[0,0,0]],
     _P6_=[0,1,[0,0,0]],
     _P7_=[0,0,[0,1,0]],
     _P9_=[0,0,0],
     _P__=[0,0,0],
     _QZ_=
      [0,
       [0,caml_new_string("foo"),caml_new_string('"foo"')],
       [0,[0,caml_new_string('bar"baz'),caml_new_string('"bar\\"baz"')],0]],
     _Q0_=[0,[0,caml_new_string("foo"),0],0],
     _Q1_=[0,[0,caml_new_string("foo"),caml_new_string("bar")],0],
     _Q2_=
      [0,
       [0,
        caml_new_string("aaaa"),
        [0,
         caml_new_string("aaaaa"),
         [0,
          caml_new_string("aaaab"),
          [0,caml_new_string("ab"),[0,caml_new_string("b"),0]]]]],
       0],
     _Q5_=
      [0,
       caml_new_string(""),
       [0,
        caml_new_string("ab"),
        [0,
         caml_new_string(""),
         [0,caml_new_string("cd"),[0,caml_new_string(""),0]]]]],
     _Q6_=[0,120,0],
     _Q8_=
      [0,
       caml_new_string("ab"),
       [0,
        caml_new_string("de"),
        [0,caml_new_string("gh"),[0,caml_new_string("j"),0]]]],
     _Q9_=[0,99,[0,102,0]],
     _Rd_=
      [0,
       [0,
        [1,
         [0,
          caml_new_string("bar"),
          [0,[0,[0,caml_new_string("foo"),0]],0],
          [0,1,2,3]]],
        caml_new_string
         ('Group {name="bar"; children=[Single {label="foo"; status=Success}]; counts={successes=1; failures=2; errors=3}}')],
       0],
     _Re_=
      [0,
       [0,[0,caml_new_string("foo"),[0,[5,caml_new_string("bad")]]]],
       caml_new_string('Single {label="foo"; status=Failure (Custom "bad")}')],
     _Rf_=
      [0,
       [0,[0,caml_new_string("foo"),[0,[2,caml_new_string("Foo")]]]],
       caml_new_string
        ('Single {label="foo"; status=Failure (NoExceptionNamed "Foo")}')],
     _Rg_=
      [0,
       [0,
        [0,
         caml_new_string("foo"),
         [0,[0,[0,caml_new_string("a"),caml_new_string("b")]]]]],
       caml_new_string
        ('Single {label="foo"; status=Failure (NotEqual ("a", "b"))}')],
     _Rh_=
      [0,
       [0,[0,caml_new_string("foo"),0]],
       caml_new_string('Single {label="foo"; status=Success}')],
     _Ro_=
      [0,[0,caml_new_string("custom failure"),[0,[5,caml_new_string("bad")]]]],
     _Rs_=
      [0,
       [0,
        caml_new_string("not equal failure"),
        [0,[0,[0,caml_new_string("42"),caml_new_string("43")]]]]],
     _Ru_=
      [1,
       [0,
        caml_new_string("group success"),
        [0,[0,[0,caml_new_string("child"),0]],0],
        [0,1,0,0]]],
     _Rw_=[0,[0,caml_new_string("single success"),0]],
     _Ry_=[0,[11,caml_new_string("ru"),[2,0,0]],caml_new_string("ru%s")],
     _RC_=[0,0,0,1],
     _RD_=
      [0,
       caml_new_string('"foo" (Successes: 0, failures: 0, errors: 1)'),
       [0,
        caml_new_string
         ('  "bar": ERROR: exception TestingTests.Tests.TestException0 raised (no backtrace)'),
        0]],
     _RF_=
      [1,
       [0,
        caml_new_string("foo"),
        [0,
         [0,[0,caml_new_string("bar"),[0,[5,caml_new_string("nope")]]]],
         [0,[0,[0,caml_new_string("baz"),0]],0]],
        [0,1,1,0]]],
     _RG_=
      [0,
       caml_new_string('"foo" (Successes: 1, failures: 1, errors: 0)'),
       [0,caml_new_string('  "bar": FAILED: nope'),0]],
     _RH_=[0,0],
     _RJ_=
      [1,
       [0,
        caml_new_string("foo"),
        [0,
         [0,[0,caml_new_string("bar"),[0,[5,caml_new_string("nope")]]]],
         [0,[0,[0,caml_new_string("baz"),0]],0]],
        [0,1,1,0]]],
     _RK_=
      [0,
       caml_new_string('"foo" (Successes: 1, failures: 1, errors: 0)'),
       [0,
        caml_new_string('  "bar": FAILED: nope'),
        [0,caml_new_string('  "baz": OK'),0]]],
     _RL_=[0,1],
     _RN_=
      [1,
       [0,
        caml_new_string("foo"),
        [0,
         [0,[0,caml_new_string("bar"),0]],
         [0,[0,[0,caml_new_string("baz"),0]],0]],
        [0,2,0,0]]],
     _RO_=[0,caml_new_string('"foo" (Successes: 2)'),0],
     _RP_=[0,0],
     _RR_=
      [1,
       [0,
        caml_new_string("foo"),
        [0,
         [0,[0,caml_new_string("bar"),0]],
         [0,[0,[0,caml_new_string("baz"),0]],0]],
        [0,2,0,0]]],
     _RS_=
      [0,
       caml_new_string('"foo" (Successes: 2)'),
       [0,caml_new_string('  "bar": OK'),[0,caml_new_string('  "baz": OK'),0]]],
     _RT_=[0,1],
     _RZ_=
      [0,
       caml_new_string
        ('"bar 6": ERROR: exception TestingTests.Tests.TestException0 raised (no backtrace)'),
       0],
     _R1_=[0,[0,caml_new_string("bar 5"),[0,[5,caml_new_string("too bad")]]]],
     _R2_=[0,caml_new_string('"bar 5": FAILED: too bad'),0],
     _Sa_=
      [0,
       caml_new_string
        ("\"bar 3'\": FAILED: expected exception Foo not raised, but exception TestingTests.Tests.TestException0' raised (no backtrace)"),
       0],
     _Sc_=
      [0,
       caml_new_string
        ('"bar 3": FAILED: expected exception TestingTests.Tests.TestException0 not raised, but exception TestingTests.Tests.TestException0\' raised (no backtrace)'),
       0],
     _Se_=[0,[0,caml_new_string("bar 2'"),[0,[2,caml_new_string("Foo")]]]],
     _Sf_=
      [0,
       caml_new_string('"bar 2\'": FAILED: expected exception Foo not raised'),
       0],
     _Sh_=
      [0,
       caml_new_string
        ('"bar 2": FAILED: expected exception TestingTests.Tests.TestException0 not raised'),
       0],
     _Sj_=
      [0,
       [0,
        caml_new_string("bar 1"),
        [0,[0,[0,caml_new_string("a"),caml_new_string("b")]]]]],
     _Sk_=[0,caml_new_string('"bar 1": FAILED: expected a, but got b'),0],
     _Sm_=[0,[0,caml_new_string("foo"),0]],
     _Sn_=[0,caml_new_string('"foo": OK'),0],
     _So_=[0,1],
     _a_=
      [0,
       603653176,
       -158992896,
       883015737,
       -463930730,
       434128324,
       -1043620471,
       767157169,
       -196902948,
       795263144,
       858345043,
       801400975,
       87663740,
       87661966,
       921347838,
       -279436349,
       -649727666,
       995400973,
       -649677289,
       995400973,
       -649677289,
       109194772,
       -914302928,
       -201814058,
       549754812,
       254970070,
       221552629,
       -673853555,
       121605421,
       409656632,
       -873366131,
       -843939126,
       -673853986,
       245122605,
       599754995,
       -977353436,
       168959862,
       -976209432,
       -976706720,
       170944887,
       -684135316,
       280038311,
       40945859,
       549754812,
       -564105088,
       -194910624,
       -535499931,
       -630606214,
       686359289,
       -1041121119,
       -563901700,
       -563555613,
       -395461502,
       -426139360,
       -395461438,
       -564003162,
       -563208841,
       -563160896,
       906053447,
       906847768,
       906895713,
       374281137,
       561420099,
       928830210,
       -1041519855,
       -1030828120,
       928330694,
       -233773589,
       -564105519,
       62025702,
       -601179209,
       -244378275,
       -583946759,
       68393955,
       -152104568,
       -152104568,
       -624372664,
       -624372664,
       535896105,
       -1024968751,
       -136251436,
       -345401568,
       -700033958,
       -33730743,
       -1052814517,
       -95094752,
       -750489640,
       27817532,
       -682072047,
       351322320,
       -210521932,
       105382081,
       -456462171,
       -772978216,
       -211133964,
       586122818,
       586122819,
       993358829,
       -988860586,
       444809757,
       98093158,
       -304763129,
       -304763129,
       -304763129,
       -304763129,
       -304763129,
       -304763129,
       -304763129,
       -4988656,
       -4988656,
       -4988656,
       -4988656,
       -4988656,
       -4988656,
       -4988656,
       -1562623,
       -1562623,
       -1562623,
       945861926,
       945861926,
       945861926,
       627890996,
       -1562623,
       -346238819,
       -346238819,
       -520554351,
       -520554351,
       -520554351,
       -520554351,
       -520554351,
       -520554351,
       -414304121,
       -926482075,
       -414100528,
       945861926,
       -1562623,
       -1562623,
       781150425,
       781150425,
       781150425,
       -1562623,
       -1562623,
       -1562623,
       -1562623,
       -1562623,
       -1562623,
       -1562623,
       -1562623,
       828514740,
       -766829352,
       828718333,
       781150425,
       -1562623,
       -1562623,
       [0,-414304121,-926482075,-414100528,828514740,-766829352,828718333],
       -609162286,
       56633290,
       -741647137,
       -852524488,
       733114908,
       -400010717,
       -961854969,
       817443974,
       -556125065,
       131255665,
       -980596598,
       1006759384,
       -295440787],
     _b_=
      [0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0],
     _c_=[0],
     _d_=[0];
    function _e_(_aDa_,_aC$_){return caml_check_bound(_aDa_,_aC$_)[_aC$_ + 1]}
    var
     Reset=
      [0,
       _a_,
       [0,
        _b_,
        _c_,
        _d_,
        [0,
         _e_,
         function(_aC__,_aC9_,_aC8_)
          {return caml_check_bound(_aC__,_aC9_)[_aC9_ + 1] = _aC8_}],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0,caml_string_get,caml_string_set],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0]]],
     _f_=[0,caml_equal,caml_notequal,[0,caml_equal,caml_notequal]];
    function _g_(_aC7_,_aC6_){return _aC7_ === _aC6_?1:0}
    var
     Equate=
      [0,_f_,[0,_g_,function(_aC5_,_aC4_){return _aC5_ !== _aC4_?1:0}]];
    function _h_(compare,x,y)
     {var c=caml_call2(compare,x,y);return 0 === c?1:0 <= c?2:0}
    function compare(x,y){return _h_(runtime.caml_compare,x,y)}
    var
     less_than=caml_lessthan,
     less_or_equal=caml_lessequal,
     greater_or_equal=caml_greaterequal,
     greater_than=caml_greaterthan;
    function between(x,low,high)
     {var _aC3_=caml_lessthan(low,x);
      return _aC3_?caml_greaterthan(high,x):_aC3_}
    function between_or_equal(x,low,high)
     {var _aC2_=caml_lessequal(low,x);
      return _aC2_?caml_greaterequal(high,x):_aC2_}
    var min=Pervasives[4],max=Pervasives[5];
    function min_max(x,y)
     {var match=compare(x,y);return 0 === match?[0,x,y]:[0,y,x]}
    var
     _i_=caml_lessthan,
     _j_=caml_lessequal,
     _k_=caml_greaterequal,
     _l_=caml_greaterthan,
     Shorten=[0];
    function _m_(format,f){return caml_call2(Printf[9],f,format)}
    function _n_(format){return caml_call1(Printf[4],format)}
    function _o_(_aC1_){return _aC1_}
    var _p_=Pervasives[80],_q_=Pervasives[81];
    function _r_(format,f,s){return caml_call3(Scanf[5],s,format,f)}
    function value(_aCZ_)
     {var _aC0_=runtime.caml_obj_tag(_aCZ_);
      return 250 === _aC0_
              ?_aCZ_[1]
              :246 === _aC0_?caml_call1(CamlinternalLazy[2],_aCZ_):_aCZ_}
    var _s_=Lazy[5];
    function map(x,f)
     {return [246,function(_aCY_){return caml_call1(f,value(x))}]}
    var _t_=Printexc[8],_u_=Equate[1],_v_=_u_[1],_w_=_u_[2],_x_=Pervasives[3];
    function raise(_aCX_){throw _aCX_}
    function raise_without_backtrace(_aCW_){throw _aCW_}
    function invalid_argument(format)
     {return _m_
              (format,
               function(message){return raise([0,InvalidArgument,message])})}
    function failure(format)
     {return _m_(format,function(message){return raise([0,Failure,message])})}
    var _y_=Printexc[1],_z_=Printexc[20],_A_=Printexc[6],_B_=Printexc[7];
    function most_recent_backtrace(param)
     {return caml_call1(_B_,0)?[0,caml_call1(Printexc[9],0)]:0}
    function or_none(x)
     {try {var _aCU_=[0,value(x)];return _aCU_}catch(_aCV_){return 0}}
    function _C_(x){return x}
    function _D_(f,x){return caml_call1(f,x)}
    function _E_(x,f){return caml_call1(f,x)}
    function _F_(f,g,x){return caml_call1(f,caml_call1(g,x))}
    var Function1=[0,_C_,_D_,_E_,_F_,[0,_D_,_E_,_F_]];
    function _G_(f,x,y){return caml_call2(f,y,x)}
    function _H_(f,x,y){return caml_call1(f,[0,x,y])}
    var
     Function2=
      [0,
       _G_,
       _H_,
       function(f,param){var y=param[2],x=param[1];return caml_call2(f,x,y)}];
    function _I_(f,x,y,z){return caml_call3(f,z,y,x)}
    function _J_(f,x,y,z){return caml_call1(f,[0,x,y,z])}
    var
     Function3=
      [0,
       _I_,
       _J_,
       function(f,param)
        {var z=param[3],y=param[2],x=param[1];return caml_call3(f,x,y,z)}];
    function _K_(f,x,y,z,u){return caml_call4(f,u,z,y,x)}
    function _L_(f,x,y,z,u){return caml_call1(f,[0,x,y,z,u])}
    var
     Function4=
      [0,
       _K_,
       _L_,
       function(f,param)
        {var u=param[4],z=param[3],y=param[2],x=param[1];
         return caml_call4(f,x,y,z,u)}];
    function _M_(f,x,y,z,u,v){return caml_call5(f,v,u,z,y,x)}
    function _N_(f,x,y,z,u,v){return caml_call1(f,[0,x,y,z,u,v])}
    var
     Function5=
      [0,
       _M_,
       _N_,
       function(f,param)
        {var v=param[5],u=param[4],z=param[3],y=param[2],x=param[1];
         return caml_call5(f,x,y,z,u,v)}],
     _P_=Pervasives[7],
     _Q_=Function1[1],
     _R_=Function1[1],
     zero=0,
     one=1,
     _O_=Pervasives[8];
    function of_float(_aCT_){return _aCT_ | 0}
    function to_float(_aCS_){return _aCS_}
    var of_string=caml_int_of_string;
    function try_of_string(s)
     {return or_none([246,function(_aCR_){return caml_int_of_string(s)}])}
    var _S_=Pervasives[20],_T_=Pervasives[20];
    function add(_aCQ_,_aCP_){return _aCQ_ + _aCP_ | 0}
    function substract(_aCO_,_aCN_){return _aCO_ - _aCN_ | 0}
    function negate(_aCM_){return - _aCM_ | 0}
    function multiply(_aCL_,_aCK_){return caml_mul(_aCL_,_aCK_)}
    var divide=caml_div;
    function square(x){return caml_mul(x,x)}
    var _U_=Pervasives[6],modulo=caml_mod;
    function pred(_aCJ_){return _aCJ_ - 1 | 0}
    function succ(_aCI_){return _aCI_ + 1 | 0}
    var _V_=Equate[1][3],_W_=_V_[1],_X_=_V_[2];
    function _Y_(_aCH_){return - _aCH_ | 0}
    function _Z_(_aCG_){return _aCG_}
    function ___(_aCF_,_aCE_){return _aCF_ + _aCE_ | 0}
    function _$_(_aCD_,_aCC_){return _aCD_ - _aCC_ | 0}
    function _aa_(_aCB_,_aCA_){return caml_mul(_aCB_,_aCA_)}
    var _ab_=caml_div,_ac_=caml_mod,_ad_=Equate[1],_ae_=_ad_[2],_af_=_ad_[1];
    function _ag_(_aCz_,_aCy_){return _aCz_ & _aCy_}
    function _ah_(_aCx_,_aCw_){return _aCx_ | _aCw_}
    function _ai_(_aCv_,_aCu_){return _aCv_ ^ _aCu_}
    var _aj_=Pervasives[9];
    function _ak_(n,shift){return n << shift}
    function _al_(n,shift){return n >>> shift | 0}
    var
     Bitwise=
      [0,_ag_,_ah_,_ai_,_aj_,_ak_,_al_,function(n,shift){return n >> shift}],
     _am_=Pervasives[19];
    function try_of_string$0(s)
     {return or_none([246,function(_aCt_){return caml_call1(_am_,s)}])}
    var _an_=Pervasives[18],_ao_=Pervasives[18];
    function xor(x,y)
     {var switch$0=0 === x?0 === y?1:0:0 === y?0:1;return switch$0?0:1}
    var _ap_=Equate[1][3],_aq_=_ap_[1],_ar_=_ap_[2];
    function _as_(_aCs_){return 1 - _aCs_}
    var _at_=Equate[1],_au_=_at_[2],_av_=_at_[1];
    function not(_aCr_){return 1 - _aCr_}
    function and(_aCp_,_aCo_){var _aCq_=_aCp_?_aCo_:_aCp_;return _aCq_}
    function or(_aCm_,_aCl_){var _aCn_=_aCm_ || _aCl_;return _aCn_}
    function equal(x,y,equal_a)
     {if(x)
       {if(y){var y$0=y[1],x$0=x[1];return caml_call2(equal_a,x$0,y$0)}}
      else
       if(! y)return 1;
      return 0}
    function compare$0(x,y,compare_a)
     {if(x)
       {var _aCk_=x[1];
        if(y){var y$0=y[1];return caml_call2(compare_a,_aCk_,y$0)}
        return 2}
      return y?0:1}
    function repr(x,repr_a)
     {if(x)
       {var x$0=x[1],_aCj_=caml_call1(repr_a,x$0);
        return caml_call1(_n_(_aw_),_aCj_)}
      return cst_None}
    var none=0;
    function try_of_string$1(x){return [0,x]}
    function some_if(condition,value$0){return condition?[0,value(value$0)]:0}
    function some_if$0(condition,value){return condition?[0,value]:0}
    function value_def(x,def){if(x){var x$0=x[1];return x$0}return def}
    function value$0(opt,x)
     {if(opt)var sth=opt[1],exc=sth;else var exc=[0,Failure,cst_Option_value];
      if(x){var x$0=x[1];return x$0}
      throw exc}
    function or_failure(format)
     {return _m_
              (format,
               function(message,param)
                {if(param){var x=param[1];return x}
                 return raise([0,Failure,message])})}
    function func(x,f)
     {if(x){var x$0=x[1];return [0,caml_call1(f,x$0)]}return 0}
    function value_map(x,def,f)
     {if(x){var x$0=x[1];return caml_call1(f,x$0)}return def}
    function is_some(param){return param?1:0}
    function is_none(param){return param?0:1}
    function iter(x,f){if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
    function filter(x,f)
     {if(x){var x$0=x[1];return some_if$0(caml_call1(f,x$0),x$0)}return 0}
    function filter_map(x,f)
     {if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
    var empty=0;
    function singleton(x){return [0,x,0]}
    function prepend(x,xs){return [0,x,xs]}
    var _ax_=Function1[1],_ay_=Function1[1],_az_=Array[10],_aA_=Array[11];
    function is_empty(param){return param?0:1}
    function try_head(param){if(param){var x=param[1];return [0,x]}return 0}
    function try_tail(param){if(param){var xs=param[2];return [0,xs]}return 0}
    function head(xs)
     {var _aCh_=or_failure(_aB_),_aCi_=try_head(xs);
      return caml_call2(Function1[5][2],_aCi_,_aCh_)}
    function tail(xs)
     {var _aCf_=or_failure(_aC_),_aCg_=try_tail(xs);
      return caml_call2(Function1[5][2],_aCg_,_aCf_)}
    function reverse(param)
     {var ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           x=param$0[1],
           ys$0=[0,x,ys],
           ys=ys$0,
           param$0=param$1;
          continue}
        return ys}}
    function rev_concat(param,ys)
     {var ys$0=ys,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           x=param$0[1],
           ys$1=[0,x,ys$0],
           ys$0=ys$1,
           param$0=param$1;
          continue}
        return ys$0}}
    function concat(xs,ys){return rev_concat(reverse(xs),ys)}
    var O=[0,concat];
    function map$0(param,f)
     {var ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           y=caml_call1(f,x),
           ys$0=[0,y,ys],
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse(ys)}}
    function map_acc(acc,param,f)
     {var acc$0=acc,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,acc$0,x),
           y=match[2],
           acc$1=match[1],
           ys$0=[0,y,ys],
           acc$0=acc$1,
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse(ys)}}
    function map_i(xs,f)
     {return map_acc
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function flat_map(param,f)
     {var ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           y=caml_call1(f,x),
           ys$0=rev_concat(y,ys),
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse(ys)}}
    function flat_map_acc(acc,param,f)
     {var acc$0=acc,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,acc$0,x),
           y=match[2],
           acc$1=match[1],
           ys$0=rev_concat(y,ys),
           acc$0=acc$1,
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse(ys)}}
    function flat_map_i(xs,f)
     {return flat_map_acc
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function filter$0(param,f)
     {var ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           b=caml_call1(f,x),
           ys$0=b?[0,x,ys]:ys,
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse(ys)}}
    function filter_acc(acc,param,f)
     {var acc$0=acc,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,acc$0,x),
           b=match[2],
           acc$1=match[1],
           ys$0=b?[0,x,ys]:ys,
           acc$0=acc$1,
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse(ys)}}
    function filter_i(xs,f)
     {return filter_acc
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function filter_map$0(param,f)
     {var ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var xs=param$0[2],x=param$0[1],y=caml_call1(f,x);
          if(y)var y$0=y[1],ys$0=[0,y$0,ys];else var ys$0=ys;
          var ys=ys$0,param$0=xs;
          continue}
        return reverse(ys)}}
    function filter_map_acc(acc,param,f)
     {var acc$0=acc,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,acc$0,x),
           y=match[2],
           acc$1=match[1];
          if(y)var y$0=y[1],ys$0=[0,y$0,ys];else var ys$0=ys;
          var acc$0=acc$1,ys=ys$0,param$0=xs;
          continue}
        return reverse(ys)}}
    function filter_map_i(xs,f)
     {return filter_map_acc
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function fold(y,param,f)
     {var y$0=y,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           y$1=caml_call2(f,y$0,x),
           y$0=y$1,
           param$0=xs;
          continue}
        return y$0}}
    function fold_acc(acc,y,param,f)
     {var acc$0=acc,y$0=y,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call3(f,acc$0,y$0,x),
           y$1=match[2],
           acc$1=match[1],
           acc$0=acc$1,
           y$0=y$1,
           param$0=xs;
          continue}
        return y$0}}
    function fold_i(init,xs,f)
     {return fold_acc
              (0,
               init,
               xs,
               function(i,y,x){return [0,i + 1 | 0,caml_call3(f,i,y,x)]})}
    function try_reduce_acc(acc,xs,f)
     {if(xs){var xs$0=xs[2],init=xs[1];return [0,fold_acc(acc,init,xs$0,f)]}
      return 0}
    function try_reduce(xs,f)
     {if(xs){var xs$0=xs[2],init=xs[1];return [0,fold(init,xs$0,f)]}return 0}
    function try_reduce_i(xs,f)
     {if(xs){var xs$0=xs[2],init=xs[1];return [0,fold_i(init,xs$0,f)]}
      return 0}
    function reduce_acc(acc,xs,f)
     {var _aCd_=or_failure(_aD_),_aCe_=try_reduce_acc(acc,xs,f);
      return caml_call2(Function1[5][2],_aCe_,_aCd_)}
    function reduce(xs,f)
     {var _aCb_=or_failure(_aE_),_aCc_=try_reduce(xs,f);
      return caml_call2(Function1[5][2],_aCc_,_aCb_)}
    function reduce_i(xs,f)
     {var _aB$_=or_failure(_aF_),_aCa_=try_reduce_i(xs,f);
      return caml_call2(Function1[5][2],_aCa_,_aB$_)}
    function scan(y,param,f)
     {var y$0=y,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           y$1=caml_call2(f,y$0,x),
           ys$0=[0,y$1,ys],
           y$0=y$1,
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse([0,y$0,ys])}}
    function scan_acc(acc,y,param,f)
     {var acc$0=acc,y$0=y,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call3(f,acc$0,y$0,x),
           y$1=match[2],
           acc$1=match[1],
           ys$0=[0,y$1,ys],
           acc$0=acc$1,
           y$0=y$1,
           ys=ys$0,
           param$0=xs;
          continue}
        return reverse([0,y$0,ys])}}
    function scan_i(init,xs,f)
     {return scan_acc
              (0,
               init,
               xs,
               function(i,y,x){return [0,i + 1 | 0,caml_call3(f,i,y,x)]})}
    function iter$0(param,f)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var xs=param$0[2],x=param$0[1];
          caml_call1(f,x);
          var param$0=xs;
          continue}
        return 0}}
    function iter_acc(acc,param,f)
     {var acc$0=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           param$0=xs;
          continue}
        return 0}}
    function iter_i(xs,f)
     {return iter_acc(0,xs,function(i,x){caml_call2(f,i,x);return i + 1 | 0})}
    function count(xs,f)
     {return fold
              (0,xs,function(n,x){var b=caml_call1(f,x);return b?n + 1 | 0:n})}
    function count_acc(acc,xs,f)
     {return fold_acc
              (acc,
               0,
               xs,
               function(acc,n,x)
                {var
                  match=caml_call2(f,acc,x),
                  b=match[2],
                  acc$0=match[1],
                  _aB__=b?n + 1 | 0:n;
                 return [0,acc$0,_aB__]})}
    function count_i(xs,f)
     {return fold_i
              (0,
               xs,
               function(i,n,x){var b=caml_call2(f,i,x);return b?n + 1 | 0:n})}
    function try_find(param,f)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var xs=param$0[2],x=param$0[1],b=caml_call1(f,x);
          if(b)return [0,x];
          var param$0=xs;
          continue}
        return 0}}
    function try_find_acc(acc,param,f)
     {var acc$0=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,acc$0,x),
           b=match[2],
           acc$1=match[1];
          if(b)return [0,x];
          var acc$0=acc$1,param$0=xs;
          continue}
        return 0}}
    function try_find_i(xs,f)
     {return try_find_acc
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function find(xs,f)
     {var _aB6_=[0,NotFound];
      function _aB7_(_aB9_){return value$0(_aB6_,_aB9_)}
      var _aB8_=try_find(xs,f);
      return caml_call2(Function1[5][2],_aB8_,_aB7_)}
    function find_acc(acc,xs,f)
     {var _aB2_=[0,NotFound];
      function _aB3_(_aB5_){return value$0(_aB2_,_aB5_)}
      var _aB4_=try_find_acc(acc,xs,f);
      return caml_call2(Function1[5][2],_aB4_,_aB3_)}
    function find_i(xs,f)
     {var _aBY_=[0,NotFound];
      function _aBZ_(_aB1_){return value$0(_aBY_,_aB1_)}
      var _aB0_=try_find_i(xs,f);
      return caml_call2(Function1[5][2],_aB0_,_aBZ_)}
    function there_exists(xs,f)
     {var _aBX_=try_find(xs,f);
      return caml_call2(Function1[5][2],_aBX_,is_some)}
    function there_exists_acc(acc,xs,f)
     {var _aBW_=try_find_acc(acc,xs,f);
      return caml_call2(Function1[5][2],_aBW_,is_some)}
    function there_exists_i(xs,f)
     {var _aBV_=try_find_i(xs,f);
      return caml_call2(Function1[5][2],_aBV_,is_some)}
    function for_all(xs,f)
     {return 1 - there_exists(xs,caml_call2(Function1[5][3],_as_,f))}
    function for_all_acc(acc,xs,f)
     {return 1
             -
             there_exists_acc
              (acc,
               xs,
               function(acc,x)
                {var match=caml_call2(f,acc,x),b=match[2],acc$0=match[1];
                 return [0,acc$0,1 - b]})}
    function for_all_i(xs,f)
     {return 1
             -
             there_exists_i(xs,function(i,x){return 1 - caml_call2(f,i,x)})}
    function try_find_map(param,f)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var xs=param$0[2],x=param$0[1],b=caml_call1(f,x);
          if(is_some(b))return b;
          var param$0=xs;
          continue}
        return 0}}
    function try_find_map_acc(acc,param,f)
     {var acc$0=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,acc$0,x),
           b=match[2],
           acc$1=match[1];
          if(is_some(b))return b;
          var acc$0=acc$1,param$0=xs;
          continue}
        return 0}}
    function try_find_map_i(xs,f)
     {return try_find_map_acc
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function find_map(xs,f)
     {var _aBR_=[0,NotFound];
      function _aBS_(_aBU_){return value$0(_aBR_,_aBU_)}
      var _aBT_=try_find_map(xs,f);
      return caml_call2(Function1[5][2],_aBT_,_aBS_)}
    function find_map_acc(acc,xs,f)
     {var _aBN_=[0,NotFound];
      function _aBO_(_aBQ_){return value$0(_aBN_,_aBQ_)}
      var _aBP_=try_find_map_acc(acc,xs,f);
      return caml_call2(Function1[5][2],_aBP_,_aBO_)}
    function find_map_i(xs,f)
     {var _aBJ_=[0,NotFound];
      function _aBK_(_aBM_){return value$0(_aBJ_,_aBM_)}
      var _aBL_=try_find_map_i(xs,f);
      return caml_call2(Function1[5][2],_aBL_,_aBK_)}
    function fold_short(y,param,f)
     {var y$0=y,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,y$0,x),
           y$1=match[2],
           s=match[1];
          if(0 === s){var y$0=y$1,param$0=xs;continue}
          return y$1}
        return y$0}}
    function fold_short_acc(acc,y,param,f)
     {var acc$0=acc,y$0=y,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call3(f,acc$0,y$0,x),
           y$1=match[3],
           s=match[2],
           acc$1=match[1];
          if(0 === s){var acc$0=acc$1,y$0=y$1,param$0=xs;continue}
          return y$1}
        return y$0}}
    function fold_short_i(init,xs,f)
     {return fold_short_acc
              (0,
               init,
               xs,
               function(i,y,x)
                {var match=caml_call3(f,i,y,x),y$0=match[2],s=match[1];
                 return [0,i + 1 | 0,s,y$0]})}
    function try_reduce_short_acc(acc,xs,f)
     {if(xs)
       {var xs$0=xs[2],init=xs[1];return [0,fold_short_acc(acc,init,xs$0,f)]}
      return 0}
    function try_reduce_short(xs,f)
     {if(xs){var xs$0=xs[2],init=xs[1];return [0,fold_short(init,xs$0,f)]}
      return 0}
    function try_reduce_short_i(xs,f)
     {if(xs){var xs$0=xs[2],init=xs[1];return [0,fold_short_i(init,xs$0,f)]}
      return 0}
    function reduce_short_acc(acc,xs,f)
     {var _aBH_=or_failure(_aG_),_aBI_=try_reduce_short_acc(acc,xs,f);
      return caml_call2(Function1[5][2],_aBI_,_aBH_)}
    function reduce_short(xs,f)
     {var _aBF_=or_failure(_aH_),_aBG_=try_reduce_short(xs,f);
      return caml_call2(Function1[5][2],_aBG_,_aBF_)}
    function reduce_short_i(xs,f)
     {var _aBD_=or_failure(_aI_),_aBE_=try_reduce_short_i(xs,f);
      return caml_call2(Function1[5][2],_aBE_,_aBD_)}
    function scan_short(y,param,f)
     {var y$0=y,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,y$0,x),
           y$1=match[2],
           s=match[1];
          if(0 === s){var ys$0=[0,y$1,ys],y$0=y$1,ys=ys$0,param$0=xs;continue}
          return reverse([0,y$1,ys])}
        return reverse([0,y$0,ys])}}
    function scan_short_acc(acc,y,param,f)
     {var acc$0=acc,y$0=y,ys=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call3(f,acc$0,y$0,x),
           y$1=match[3],
           s=match[2],
           acc$1=match[1];
          if(0 === s)
           {var ys$0=[0,y$1,ys],acc$0=acc$1,y$0=y$1,ys=ys$0,param$0=xs;
            continue}
          return reverse([0,y$1,ys])}
        return reverse([0,y$0,ys])}}
    function scan_short_i(init,xs,f)
     {return scan_short_acc
              (0,
               init,
               xs,
               function(i,y,x)
                {var match=caml_call3(f,i,y,x),y$0=match[2],s=match[1];
                 return [0,i + 1 | 0,s,y$0]})}
    function iter_short(param,f)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var xs=param$0[2],x=param$0[1],match=caml_call1(f,x);
          if(0 === match){var param$0=xs;continue}
          return 0}
        return 0}}
    function iter_short_acc(acc,param,f)
     {var acc$0=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var
           xs=param$0[2],
           x=param$0[1],
           match=caml_call2(f,acc$0,x),
           s=match[2],
           acc$1=match[1];
          if(0 === s){var acc$0=acc$1,param$0=xs;continue}
          return 0}
        return 0}}
    function iter_short_i(xs,f)
     {return iter_short_acc
              (0,
               xs,
               function(i,x){var s=caml_call2(f,i,x);return [0,i + 1 | 0,s]})}
    function contains(xs,x,equal_a)
     {return there_exists(xs,caml_call1(equal_a,x))}
    var
     Poly=
      [0,
       function(param,x)
        {var param$0=param;
         for(;;)
          {if(param$0)
            {var xs=param$0[2],x$0=param$0[1];
             if(caml_call2(Equate[1][1],x$0,x))return 1;
             var param$0=xs;
             continue}
           return 0}}];
    function size(param)
     {var s=0,param$0=param;
      for(;;)
       {if(param$0){var xs=param$0[2],s$0=s + 1 | 0,s=s$0,param$0=xs;continue}
        return s}}
    function join_string_list(opt,xs)
     {if(opt)var sth=opt[1],sep=sth;else var sep=cst$0;
      function _aBx_(_aBC_){return value_def(_aBC_,cst)}
      function _aBy_(a,b){return caml_call3(_n_(_aJ_),a,sep,b)}
      function _aBz_(_aBB_){return try_reduce(_aBB_,_aBy_)}
      var _aBA_=caml_call2(Function1[5][2],xs,_aBz_);
      return caml_call2(Function1[5][2],_aBA_,_aBx_)}
    function repr$0(xs,repr_a)
     {var _aBq_=_n_(_aK_);
      function _aBr_(_aBw_){return join_string_list(_aL_,_aBw_)}
      function _aBs_(_aBv_){return map$0(_aBv_,repr_a)}
      var
       _aBt_=caml_call2(Function1[5][2],xs,_aBs_),
       _aBu_=caml_call2(Function1[5][2],_aBt_,_aBr_);
      return caml_call2(Function1[5][2],_aBu_,_aBq_)}
    function _aM_(xs,ys)
     {var param$1=[0,xs,ys],zs=0,param=param$1;
      for(;;)
       {var _aBo_=param[1];
        if(_aBo_)
         {var _aBp_=param[2];
          if(_aBp_)
           {var
             ys$0=_aBp_[2],
             y=_aBp_[1],
             xs$0=_aBo_[2],
             x=_aBo_[1],
             param$0=[0,xs$0,ys$0],
             zs$0=[0,[0,x,y],zs],
             zs=zs$0,
             param=param$0;
            continue}}
        else
         if(! param[2])return reverse(zs);
        return invalid_argument(_aN_)}}
    var
     Two=
      [0,
       _aM_,
       function(xs,ys)
        {var param$1=[0,xs,ys],zs=0,param=param$1;
         for(;;)
          {var _aBm_=param[1];
           if(_aBm_)
            {var _aBn_=param[2];
             if(_aBn_)
              {var
                ys$0=_aBn_[2],
                y=_aBn_[1],
                xs$0=_aBm_[2],
                x=_aBm_[1],
                param$0=[0,xs$0,ys$0],
                zs$0=[0,[0,x,y],zs],
                zs=zs$0,
                param=param$0;
               continue}}
           return reverse(zs)}}];
    function equal$0(xs,ys,equal_a)
     {try
       {var _aBk_=caml_call3(ListLabels[24],equal_a,xs,ys);return _aBk_}
      catch(_aBl_)
       {_aBl_ = caml_wrap_exception(_aBl_);
        if(_aBl_[1] === InvalidArgument)return 0;
        throw _aBl_}}
    function cartesian_product(xs,ys)
     {if(xs)
       {var
         xs$0=xs[2],
         x=xs[1],
         _aBh_=cartesian_product(xs$0,ys),
         _aBi_=function(y){return [0,x,y]},
         _aBj_=caml_call2(ListLabels[12],_aBi_,ys);
        return caml_call2(ListLabels[6],_aBj_,_aBh_)}
      return 0}
    function current(opt,param)
     {if(opt)var sth=opt[1],max_size=sth;else var max_size=_P_;
      return caml_call1(Printexc[12],max_size)}
    var _aO_=Printexc[11];
    function _aP_(param)
     {var
       end_char=param[4],
       start_char=param[3],
       line_number=param[2],
       filename=param[1];
      return caml_call4(_n_(_aQ_),filename,line_number,start_char,end_char)}
    var
     _aR_=Equate[1][3],
     _aU_=Equate[1],
     _aW_=_aU_[1],
     Frame=[0,Printexc[15][1],Printexc[15][2],Printexc[15][3]],
     _aS_=_aR_[1],
     _aT_=_aR_[2],
     _aV_=_aU_[2];
    function frames(bt)
     {var match=caml_call1(Printexc[14],bt);
      if(match){var frames=match[1];return caml_call1(_az_,frames)}
      return 0}
    var
     _aY_=Pervasives[13],
     _a0_=Pervasives[10],
     _a1_=Pervasives[11],
     _a2_=Pervasives[12],
     zero$0=0,
     one$0=1,
     pi=3.14159265358979312,
     e=2.71828182845904509,
     _aX_=Pervasives[14],
     _aZ_=Pervasives[15];
    function of_int(_aBg_){return _aBg_}
    function to_int(_aBf_){return _aBf_ | 0}
    var _a3_=Function1[1],_a4_=Function1[1],of_string$0=caml_float_of_string;
    function try_of_string$2(s)
     {return or_none([246,function(_aBe_){return caml_float_of_string(s)}])}
    var
     _a5_=Pervasives[21],
     of_parts=caml_ldexp_float,
     to_parts=caml_frexp_float,
     to_fractional_and_integral=runtime.caml_modf_float,
     _a6_=Pervasives[21];
    function add$0(_aBd_,_aBc_){return _aBd_ + _aBc_}
    function substract$0(_aBb_,_aBa_){return _aBb_ - _aBa_}
    function negate$0(_aA$_){return - _aA$_}
    function multiply$0(_aA__,_aA9_){return _aA__ * _aA9_}
    function divide$0(_aA8_,_aA7_){return _aA8_ / _aA7_}
    function square$0(x){return x * x}
    function abs(_aA6_){return Math.abs(_aA6_)}
    function modulo$0(_aA5_,_aA4_){return _aA5_ % _aA4_}
    function sqrt(_aA3_){return Math.sqrt(_aA3_)}
    function exp(_aA2_){return Math.exp(_aA2_)}
    function log(_aA1_){return Math.log(_aA1_)}
    var
     log10=runtime.caml_log10_float,
     expm1=runtime.caml_expm1_float,
     log1p=runtime.caml_log1p_float;
    function cos(_aA0_){return Math.cos(_aA0_)}
    function sin(_aAZ_){return Math.sin(_aAZ_)}
    function tan(_aAY_){return Math.tan(_aAY_)}
    function acos(_aAX_){return Math.acos(_aAX_)}
    function asin(_aAW_){return Math.asin(_aAW_)}
    function atan(_aAV_){return Math.atan(_aAV_)}
    function atan2(y,x){return Math.atan2(y,x)}
    var
     hypot=runtime.caml_hypot_float,
     cosh=runtime.caml_cosh_float,
     sinh=runtime.caml_sinh_float,
     tanh=runtime.caml_tanh_float;
    function ceil(_aAU_){return Math.ceil(_aAU_)}
    function floor(_aAT_){return Math.floor(_aAT_)}
    var
     copy_sign=runtime.caml_copysign_float,
     _a7_=Equate[1][3],
     _a8_=_a7_[1],
     _a9_=_a7_[2];
    function _a__(_aAS_){return - _aAS_}
    function _a$_(_aAR_){return _aAR_}
    function _ba_(_aAQ_,_aAP_){return _aAQ_ + _aAP_}
    function _bb_(_aAO_,_aAN_){return _aAO_ - _aAN_}
    function _bc_(_aAM_,_aAL_){return _aAM_ * _aAL_}
    function _bd_(_aAK_,_aAJ_){return _aAK_ / _aAJ_}
    function _be_(_aAI_,_aAH_){return _aAI_ % _aAH_}
    var _bf_=Equate[1],_bg_=_bf_[2],_bh_=_bf_[1];
    function approx_equal(opt,a,b)
     {if(opt)var sth=opt[1],precision=sth;else var precision=1e-10;
      return caml_lessthan(Math.abs(a - b),precision)}
    function _bi_(_aAG_){return - _aAG_}
    function _bj_(_aAF_){return _aAF_}
    function _bk_(_aAE_,_aAD_){return _aAE_ + _aAD_}
    function _bl_(_aAC_,_aAB_){return _aAC_ - _aAB_}
    function _bm_(_aAA_,_aAz_){return _aAA_ * _aAz_}
    function _bn_(_aAy_,_aAx_){return _aAy_ / _aAx_}
    function _bo_(_aAw_,_aAv_){return Math.pow(_aAw_,_aAv_)}
    function _bp_(x)
     {var match=runtime.caml_classify_float(x);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        default:return 4}}
    function _bq_(param)
     {switch(param)
       {case 0:return cst_Normal;
        case 1:return cst_SubNormal;
        case 2:return cst_Zero;
        case 3:return cst_Infinite;
        default:return cst_NotANumber}}
    var
     _br_=Equate[1][3],
     _bu_=Equate[1],
     _bw_=_bu_[1],
     _bs_=_br_[1],
     _bt_=_br_[2],
     _bv_=_bu_[2];
    function _bx_(_aAu_){return [0,_aAu_]}
    function _by_(_aAt_){return _aAt_[1]}
    function _bz_(_aAs_,_aAr_){_aAs_[1] = _aAr_;return 0}
    function _bA_(_aAq_){return [0,_aAq_]}
    function _bB_(_aAp_){return _aAp_[1]}
    var _bC_=[0,_bA_,_bB_,function(_aAo_,_aAn_){_aAo_[1] = _aAn_;return 0}];
    function repr$1(x){return caml_call1(_n_(_bD_),x)}
    var
     to_string=Function1[1],
     of_string$1=Function1[1],
     of_bytes=Bytes[6],
     to_bytes=Bytes[5],
     get=caml_string_get,
     set=caml_string_set,
     concat$0=Pervasives[16],
     _bE_=Equate[1][3],
     _bF_=_bE_[1],
     _bG_=_bE_[2],
     _bH_=Pervasives[16],
     _bI_=Equate[1],
     different=_bI_[2],
     equal$1=_bI_[1],
     size$0=caml_ml_string_length;
    function of_char(c){return caml_call2(String[1],1,c)}
    function to_list(s)
     {var r=caml_call1(_bC_[1],0),_aAj_=caml_ml_string_length(s) - 1 | 0;
      if(! (_aAj_ < 0))
       {var i=_aAj_;
        for(;;)
         {var
           _aAk_=caml_call1(_bC_[2],r),
           _aAl_=[0,caml_call2(Reset[2][40][1],s,i),_aAk_];
          caml_call2(_bC_[3],r,_aAl_);
          var _aAm_=i - 1 | 0;
          if(0 !== i){var i=_aAm_;continue}
          break}}
      return caml_call1(_bC_[2],r)}
    function of_list(xs)
     {var len=size(xs),r=caml_create_string(len);
      function _aAg_(i,x){return caml_string_set(r,i,x)}
      function _aAh_(_aAi_){return iter_i(_aAi_,_aAg_)}
      caml_call2(Function1[5][2],xs,_aAh_);
      return caml_call1(of_bytes,r)}
    function substring(s,pos,len){return caml_call3(String[4],s,pos,len)}
    function prefix(s,len){return substring(s,0,len)}
    function suffix(s,len)
     {return substring(s,caml_ml_string_length(s) - len | 0,len)}
    function has_prefix(s,pre)
     {var
       _aAf_=
        caml_greaterequal(caml_ml_string_length(s),caml_ml_string_length(pre));
      return _aAf_
              ?caml_call2(_aq_,pre,prefix(s,caml_ml_string_length(pre)))
              :_aAf_}
    function has_suffix(s,suf)
     {var
       _aAe_=
        caml_greaterequal(caml_ml_string_length(s),caml_ml_string_length(suf));
      return _aAe_
              ?caml_call2(_aq_,suf,suffix(s,caml_ml_string_length(suf)))
              :_aAe_}
    function drop_prefix(s,len)
     {return substring(s,len,caml_ml_string_length(s) - len | 0)}
    function drop_suffix(s,len)
     {return substring(s,0,caml_ml_string_length(s) - len | 0)}
    function try_drop_suffix(s,suf)
     {var
       _aAc_=
        [246,
         function(_aAd_){return drop_suffix(s,caml_ml_string_length(suf))}];
      return some_if(has_suffix(s,suf),_aAc_)}
    function try_drop_prefix(s,pre)
     {var
       _aAa_=
        [246,
         function(_aAb_){return drop_prefix(s,caml_ml_string_length(pre))}];
      return some_if(has_prefix(s,pre),_aAa_)}
    function drop_suffix$0(s,suf)
     {var _az__=or_failure(_bJ_),_az$_=try_drop_suffix(s,suf);
      return caml_call2(Function1[5][2],_az$_,_az__)}
    function drop_prefix$0(s,pre)
     {var _az8_=or_failure(_bK_),_az9_=try_drop_prefix(s,pre);
      return caml_call2(Function1[5][2],_az9_,_az8_)}
    function split(s,sep)
     {var len=caml_ml_string_length(sep);
      if(caml_call2(_aq_,len,0))invalid_argument(_bL_);
      var
       pos$2=caml_ml_string_length(s) - len | 0,
       last_pos$0=caml_ml_string_length(s),
       ret=0,
       last_pos=last_pos$0,
       pos=pos$2;
      for(;;)
       {var
         _az6_=caml_greaterequal(pos,0),
         _az7_=_az6_?caml_call2(_aq_,substring(s,pos,len),sep):_az6_;
        if(_az7_)
         {var
           pos$0=pos - len | 0,
           ret$0=
            [0,substring(s,pos + len | 0,(last_pos - pos | 0) - len | 0),ret],
           ret=ret$0,
           last_pos=pos,
           pos=pos$0;
          continue}
        if(caml_lessequal(pos,0))
         {var parts=[0,substring(s,0,last_pos),ret];
          if(parts)
           if(! caml_string_notequal(parts[1],cst$1))if(! parts[2])return 0;
          return parts}
        var pos$1=pos - 1 | 0,pos=pos$1;
        continue}}
    function fold$0(init,s,f)
     {function _az3_(_az5_){return fold(init,_az5_,f)}
      var _az4_=caml_call2(Function1[5][2],s,to_list);
      return caml_call2(Function1[5][2],_az4_,_az3_)}
    function filter$1(s,f)
     {function _azZ_(_az2_){return filter$0(_az2_,f)}
      var
       _az0_=caml_call2(Function1[5][2],s,to_list),
       _az1_=caml_call2(Function1[5][2],_az0_,_azZ_);
      return caml_call2(Function1[5][2],_az1_,of_list)}
    var empty$0=0;
    function make(opt,_azY_,stop)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(_azY_)var sth$0=_azY_[1],step=sth$0;else var step=1;
      if(caml_lessequal(caml_mul(stop - start | 0,step),0))return 0;
      if(caml_greaterthan(step,0))
       {var
         max=
          (stop - 1 | 0) - caml_mod((stop - 1 | 0) - start | 0,step) | 0;
        if(caml_call2(_aq_,caml_mod(max - start | 0,step),0))
         return [0,[0,start,max,step]];
        throw [0,AssertFailure,_bM_]}
      var
       step$0=- step | 0,
       min=(stop + 1 | 0) - caml_mod((stop + 1 | 0) - start | 0,step$0) | 0;
      if(caml_call2(_aq_,caml_mod(start - min | 0,step$0),0))
       return [1,[0,min,start,step$0]];
      throw [0,AssertFailure,_bN_]}
    function repr$2(param)
     {if(typeof param === "number")
       return cst$2;
      else
       {if(0 === param[0])
         {var match=param[1],step=match[3],max=match[2],min=match[1];
          return caml_call3(_n_(_bO_),min,max,step)}
        var
         match$0=param[1],
         step$0=match$0[3],
         max$0=match$0[2],
         min$0=match$0[1];
        return caml_call3(_n_(_bP_),max$0,min$0,step$0)}}
    var _bQ_=Equate[1],_bR_=_bQ_[1],_bS_=_bQ_[2];
    function to_list$0(param)
     {if(typeof param === "number")
       return 0;
      else
       {if(0 === param[0])
         {var
           match=param[1],
           step=match[3],
           max=match[2],
           min=match[1],
           xs=0,
           x=max;
          for(;;)
           {if(caml_greaterequal(x,min))
             {if(caml_call2(_aq_,x,min))return [0,x,xs];
              var x$0=x - step | 0,xs$0=[0,x,xs],xs=xs$0,x=x$0;
              continue}
            throw [0,AssertFailure,_bT_]}}
        var
         match$0=param[1],
         step$0=match$0[3],
         max$0=match$0[2],
         min$0=match$0[1],
         xs$1=0,
         x$1=min$0;
        for(;;)
         {if(caml_lessequal(x$1,max$0))
           {if(caml_call2(_aq_,x$1,max$0))return [0,x$1,xs$1];
            var x$2=x$1 + step$0 | 0,xs$2=[0,x$1,xs$1],xs$1=xs$2,x$1=x$2;
            continue}
          throw [0,AssertFailure,_bU_]}}}
    function to_array(r)
     {var _azX_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azX_,_aA_)}
    function fold$1(init,r,f)
     {function _azU_(_azW_){return fold(init,_azW_,f)}
      var _azV_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azV_,_azU_)}
    function fold_i$0(init,r,f)
     {function _azR_(_azT_){return fold_i(init,_azT_,f)}
      var _azS_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azS_,_azR_)}
    function fold_acc$0(acc,init,r,f)
     {function _azO_(_azQ_){return fold_acc(acc,init,_azQ_,f)}
      var _azP_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azP_,_azO_)}
    function reduce$0(r,f)
     {function _azL_(_azN_){return reduce(_azN_,f)}
      var _azM_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azM_,_azL_)}
    function reduce_i$0(r,f)
     {function _azI_(_azK_){return reduce_i(_azK_,f)}
      var _azJ_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azJ_,_azI_)}
    function reduce_acc$0(acc,r,f)
     {function _azF_(_azH_){return reduce_acc(acc,_azH_,f)}
      var _azG_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azG_,_azF_)}
    function try_reduce$0(r,f)
     {function _azC_(_azE_){return try_reduce(_azE_,f)}
      var _azD_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azD_,_azC_)}
    function try_reduce_i$0(r,f)
     {function _azz_(_azB_){return try_reduce_i(_azB_,f)}
      var _azA_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azA_,_azz_)}
    function try_reduce_acc$0(acc,r,f)
     {function _azw_(_azy_){return try_reduce_acc(acc,_azy_,f)}
      var _azx_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azx_,_azw_)}
    function iter$1(r,f)
     {function _azt_(_azv_){return iter$0(_azv_,f)}
      var _azu_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azu_,_azt_)}
    function iter_i$0(r,f)
     {function _azq_(_azs_){return iter_i(_azs_,f)}
      var _azr_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azr_,_azq_)}
    function iter_acc$0(acc,r,f)
     {function _azn_(_azp_){return iter_acc(acc,_azp_,f)}
      var _azo_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azo_,_azn_)}
    function count$0(r,f)
     {function _azk_(_azm_){return count(_azm_,f)}
      var _azl_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azl_,_azk_)}
    function count_i$0(r,f)
     {function _azh_(_azj_){return count_i(_azj_,f)}
      var _azi_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azi_,_azh_)}
    function count_acc$0(acc,r,f)
     {function _aze_(_azg_){return count_acc(acc,_azg_,f)}
      var _azf_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azf_,_aze_)}
    function fold_short$0(init,r,f)
     {function _azb_(_azd_){return fold_short(init,_azd_,f)}
      var _azc_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_azc_,_azb_)}
    function fold_short_i$0(init,r,f)
     {function _ay__(_aza_){return fold_short_i(init,_aza_,f)}
      var _ay$_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ay$_,_ay__)}
    function fold_short_acc$0(acc,init,r,f)
     {function _ay7_(_ay9_){return fold_short_acc(acc,init,_ay9_,f)}
      var _ay8_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ay8_,_ay7_)}
    function reduce_short$0(r,f)
     {function _ay4_(_ay6_){return reduce_short(_ay6_,f)}
      var _ay5_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ay5_,_ay4_)}
    function reduce_short_i$0(r,f)
     {function _ay1_(_ay3_){return reduce_short_i(_ay3_,f)}
      var _ay2_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ay2_,_ay1_)}
    function reduce_short_acc$0(acc,r,f)
     {function _ayY_(_ay0_){return reduce_short_acc(acc,_ay0_,f)}
      var _ayZ_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayZ_,_ayY_)}
    function try_reduce_short$0(r,f)
     {function _ayV_(_ayX_){return try_reduce_short(_ayX_,f)}
      var _ayW_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayW_,_ayV_)}
    function try_reduce_short_i$0(r,f)
     {function _ayS_(_ayU_){return try_reduce_short_i(_ayU_,f)}
      var _ayT_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayT_,_ayS_)}
    function try_reduce_short_acc$0(acc,r,f)
     {function _ayP_(_ayR_){return try_reduce_short_acc(acc,_ayR_,f)}
      var _ayQ_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayQ_,_ayP_)}
    function iter_short$0(r,f)
     {function _ayM_(_ayO_){return iter_short(_ayO_,f)}
      var _ayN_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayN_,_ayM_)}
    function iter_short_i$0(r,f)
     {function _ayJ_(_ayL_){return iter_short_i(_ayL_,f)}
      var _ayK_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayK_,_ayJ_)}
    function iter_short_acc$0(acc,r,f)
     {function _ayG_(_ayI_){return iter_short_acc(acc,_ayI_,f)}
      var _ayH_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayH_,_ayG_)}
    function for_all$0(r,f)
     {function _ayD_(_ayF_){return for_all(_ayF_,f)}
      var _ayE_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayE_,_ayD_)}
    function for_all_i$0(r,f)
     {function _ayA_(_ayC_){return for_all_i(_ayC_,f)}
      var _ayB_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayB_,_ayA_)}
    function for_all_acc$0(acc,r,f)
     {function _ayx_(_ayz_){return for_all_acc(acc,_ayz_,f)}
      var _ayy_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayy_,_ayx_)}
    function there_exists$0(r,f)
     {function _ayu_(_ayw_){return there_exists(_ayw_,f)}
      var _ayv_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayv_,_ayu_)}
    function there_exists_i$0(r,f)
     {function _ayr_(_ayt_){return there_exists_i(_ayt_,f)}
      var _ays_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ays_,_ayr_)}
    function there_exists_acc$0(acc,r,f)
     {function _ayo_(_ayq_){return there_exists_acc(acc,_ayq_,f)}
      var _ayp_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayp_,_ayo_)}
    function find$0(r,f)
     {function _ayl_(_ayn_){return find(_ayn_,f)}
      var _aym_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_aym_,_ayl_)}
    function find_i$0(r,f)
     {function _ayi_(_ayk_){return find_i(_ayk_,f)}
      var _ayj_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayj_,_ayi_)}
    function find_acc$0(acc,r,f)
     {function _ayf_(_ayh_){return find_acc(acc,_ayh_,f)}
      var _ayg_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayg_,_ayf_)}
    function try_find$0(r,f)
     {function _ayc_(_aye_){return try_find(_aye_,f)}
      var _ayd_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ayd_,_ayc_)}
    function try_find_i$0(r,f)
     {function _ax$_(_ayb_){return try_find_i(_ayb_,f)}
      var _aya_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_aya_,_ax$_)}
    function try_find_acc$0(acc,r,f)
     {function _ax8_(_ax__){return try_find_acc(acc,_ax__,f)}
      var _ax9_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ax9_,_ax8_)}
    function find_map$0(r,f)
     {function _ax5_(_ax7_){return find_map(_ax7_,f)}
      var _ax6_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ax6_,_ax5_)}
    function find_map_i$0(r,f)
     {function _ax2_(_ax4_){return find_map_i(_ax4_,f)}
      var _ax3_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ax3_,_ax2_)}
    function find_map_acc$0(acc,r,f)
     {function _axZ_(_ax1_){return find_map_acc(acc,_ax1_,f)}
      var _ax0_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_ax0_,_axZ_)}
    function try_find_map$0(r,f)
     {function _axW_(_axY_){return try_find_map(_axY_,f)}
      var _axX_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axX_,_axW_)}
    function try_find_map_i$0(r,f)
     {function _axT_(_axV_){return try_find_map_i(_axV_,f)}
      var _axU_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axU_,_axT_)}
    function try_find_map_acc$0(acc,r,f)
     {function _axQ_(_axS_){return try_find_map_acc(acc,_axS_,f)}
      var _axR_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axR_,_axQ_)}
    function _bV_(r,f)
     {function _axN_(_axP_){return map$0(_axP_,f)}
      var _axO_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axO_,_axN_)}
    function _bW_(r,f)
     {function _axK_(_axM_){return map_i(_axM_,f)}
      var _axL_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axL_,_axK_)}
    function _bX_(acc,r,f)
     {function _axH_(_axJ_){return map_acc(acc,_axJ_,f)}
      var _axI_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axI_,_axH_)}
    function _bY_(r,f)
     {function _axE_(_axG_){return filter$0(_axG_,f)}
      var _axF_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axF_,_axE_)}
    function _bZ_(r,f)
     {function _axB_(_axD_){return filter_i(_axD_,f)}
      var _axC_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axC_,_axB_)}
    function _b0_(acc,r,f)
     {function _axy_(_axA_){return filter_acc(acc,_axA_,f)}
      var _axz_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axz_,_axy_)}
    function _b1_(r,f)
     {function _axv_(_axx_){return filter_map$0(_axx_,f)}
      var _axw_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axw_,_axv_)}
    function _b2_(r,f)
     {function _axs_(_axu_){return filter_map_i(_axu_,f)}
      var _axt_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axt_,_axs_)}
    function _b3_(acc,r,f)
     {function _axp_(_axr_){return filter_map_acc(acc,_axr_,f)}
      var _axq_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axq_,_axp_)}
    function _b4_(r,f)
     {function _axm_(_axo_){return flat_map(_axo_,f)}
      var _axn_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axn_,_axm_)}
    function _b5_(r,f)
     {function _axj_(_axl_){return flat_map_i(_axl_,f)}
      var _axk_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axk_,_axj_)}
    function _b6_(acc,r,f)
     {function _axg_(_axi_){return flat_map_acc(acc,_axi_,f)}
      var _axh_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axh_,_axg_)}
    function _b7_(init,r,f)
     {function _axd_(_axf_){return scan(init,_axf_,f)}
      var _axe_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axe_,_axd_)}
    function _b8_(init,r,f)
     {function _axa_(_axc_){return scan_i(init,_axc_,f)}
      var _axb_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_axb_,_axa_)}
    function _b9_(acc,init,r,f)
     {function _aw9_(_aw$_){return scan_acc(acc,init,_aw$_,f)}
      var _aw__=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_aw__,_aw9_)}
    function _b__(init,r,f)
     {function _aw6_(_aw8_){return scan_short(init,_aw8_,f)}
      var _aw7_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_aw7_,_aw6_)}
    function _b$_(init,r,f)
     {function _aw3_(_aw5_){return scan_short_i(init,_aw5_,f)}
      var _aw4_=caml_call2(Function1[5][2],r,to_list$0);
      return caml_call2(Function1[5][2],_aw4_,_aw3_)}
    var
     ToList=
      [0,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_,
       _b1_,
       _b2_,
       _b3_,
       _b4_,
       _b5_,
       _b6_,
       _b7_,
       _b8_,
       _b9_,
       _b__,
       _b$_,
       function(acc,init,r,f)
        {function _aw0_(_aw2_){return scan_short_acc(acc,init,_aw2_,f)}
         var _aw1_=caml_call2(Function1[5][2],r,to_list$0);
         return caml_call2(Function1[5][2],_aw1_,_aw0_)}];
    function _ca_(x,y){return [0,x,y]}
    function _cb_(param){var x=param[1];return x}
    function _cc_(param){var y=param[2];return y}
    function _cd_(param){var y=param[2],x=param[1];return [0,y,x]}
    function _ce_(param,_awZ_,compare_a,compare_b)
     {var
       y=_awZ_[2],
       x=_awZ_[1],
       y$0=param[2],
       x$0=param[1],
       match=caml_call2(compare_a,x$0,x);
      switch(match)
       {case 0:return 0;
        case 1:return caml_call2(compare_b,y$0,y);
        default:return 2}}
    function _cf_(param,_awX_,equal_a,equal_b)
     {var
       y=_awX_[2],
       x=_awX_[1],
       y$0=param[2],
       x$0=param[1],
       _awY_=caml_call2(equal_a,x$0,x);
      return _awY_?caml_call2(equal_b,y$0,y):_awY_}
    function _cg_(param,repr_a,repr_b)
     {var
       y=param[2],
       x=param[1],
       _awV_=caml_call1(repr_b,y),
       _awW_=caml_call1(repr_a,x);
      return caml_call2(_n_(_ch_),_awW_,_awV_)}
    function _ci_(x,y,z){return [0,x,y,z]}
    function _cj_(param){var x=param[1];return x}
    function _ck_(param){var y=param[2];return y}
    function _cl_(param){var z=param[3];return z}
    function _cm_(param)
     {var z=param[3],y=param[2],x=param[1];return [0,z,y,x]}
    function _cn_(param,_awU_,compare_a,compare_b,compare_c)
     {var
       z=_awU_[3],
       y=_awU_[2],
       x=_awU_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       match=caml_call2(compare_a,x$0,x);
      switch(match)
       {case 0:return 0;
        case 1:
         var match$0=caml_call2(compare_b,y$0,y);
         switch(match$0)
          {case 0:return 0;
           case 1:return caml_call2(compare_c,z$0,z);
           default:return 2}
        default:return 2}}
    function _co_(param,_awQ_,equal_a,equal_b,equal_c)
     {var
       z=_awQ_[3],
       y=_awQ_[2],
       x=_awQ_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       _awR_=caml_call2(equal_a,x$0,x);
      if(_awR_)
       {var _awS_=caml_call2(equal_b,y$0,y);
        if(_awS_)return caml_call2(equal_c,z$0,z);
        var _awT_=_awS_}
      else
       var _awT_=_awR_;
      return _awT_}
    function _cp_(param,repr_a,repr_b,repr_c)
     {var
       z=param[3],
       y=param[2],
       x=param[1],
       _awN_=caml_call1(repr_c,z),
       _awO_=caml_call1(repr_b,y),
       _awP_=caml_call1(repr_a,x);
      return caml_call3(_n_(_cq_),_awP_,_awO_,_awN_)}
    function _cr_(x,y,z,u){return [0,x,y,z,u]}
    function _cs_(param){var x=param[1];return x}
    function _ct_(param){var y=param[2];return y}
    function _cu_(param){var z=param[3];return z}
    function _cv_(param){var u=param[4];return u}
    function _cw_(param)
     {var u=param[4],z=param[3],y=param[2],x=param[1];return [0,u,z,y,x]}
    function _cx_(param,_awM_,compare_a,compare_b,compare_c,compare_d)
     {var
       u=_awM_[4],
       z=_awM_[3],
       y=_awM_[2],
       x=_awM_[1],
       u$0=param[4],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       match=caml_call2(compare_a,x$0,x);
      switch(match)
       {case 0:return 0;
        case 1:
         var match$0=caml_call2(compare_b,y$0,y);
         switch(match$0)
          {case 0:return 0;
           case 1:
            var match$1=caml_call2(compare_c,z$0,z);
            switch(match$1)
             {case 0:return 0;
              case 1:return caml_call2(compare_d,u$0,u);
              default:return 2}
           default:return 2}
        default:return 2}}
    function _cy_(param,_awH_,equal_a,equal_b,equal_c,equal_d)
     {var
       u=_awH_[4],
       z=_awH_[3],
       y=_awH_[2],
       x=_awH_[1],
       u$0=param[4],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       _awI_=caml_call2(equal_a,x$0,x);
      if(_awI_)
       {var _awJ_=caml_call2(equal_b,y$0,y);
        if(_awJ_)
         {var _awK_=caml_call2(equal_c,z$0,z);
          if(_awK_)return caml_call2(equal_d,u$0,u);
          var _awL_=_awK_}
        else
         var _awL_=_awJ_}
      else
       var _awL_=_awI_;
      return _awL_}
    function _cz_(param,repr_a,repr_b,repr_c,repr_d)
     {var
       u=param[4],
       z=param[3],
       y=param[2],
       x=param[1],
       _awD_=caml_call1(repr_d,u),
       _awE_=caml_call1(repr_c,z),
       _awF_=caml_call1(repr_b,y),
       _awG_=caml_call1(repr_a,x);
      return caml_call4(_n_(_cA_),_awG_,_awF_,_awE_,_awD_)}
    function _cB_(x,y,z,u,v){return [0,x,y,z,u,v]}
    function _cC_(param){var x=param[1];return x}
    function _cD_(param){var y=param[2];return y}
    function _cE_(param){var z=param[3];return z}
    function _cF_(param){var u=param[4];return u}
    function _cG_(param){var v=param[5];return v}
    function _cH_(param)
     {var v=param[5],u=param[4],z=param[3],y=param[2],x=param[1];
      return [0,v,u,z,y,x]}
    function _cI_
     (param,_awC_,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var
       v=_awC_[5],
       u=_awC_[4],
       z=_awC_[3],
       y=_awC_[2],
       x=_awC_[1],
       v$0=param[5],
       u$0=param[4],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       match=caml_call2(compare_a,x$0,x);
      switch(match)
       {case 0:return 0;
        case 1:
         var match$0=caml_call2(compare_b,y$0,y);
         switch(match$0)
          {case 0:return 0;
           case 1:
            var match$1=caml_call2(compare_c,z$0,z);
            switch(match$1)
             {case 0:return 0;
              case 1:
               var match$2=caml_call2(compare_d,u$0,u);
               switch(match$2)
                {case 0:return 0;
                 case 1:return caml_call2(compare_e,v$0,v);
                 default:return 2}
              default:return 2}
           default:return 2}
        default:return 2}}
    function _cJ_(param,_aww_,equal_a,equal_b,equal_c,equal_d,equal_e)
     {var
       v=_aww_[5],
       u=_aww_[4],
       z=_aww_[3],
       y=_aww_[2],
       x=_aww_[1],
       v$0=param[5],
       u$0=param[4],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       _awx_=caml_call2(equal_a,x$0,x);
      if(_awx_)
       {var _awy_=caml_call2(equal_b,y$0,y);
        if(_awy_)
         {var _awz_=caml_call2(equal_c,z$0,z);
          if(_awz_)
           {var _awA_=caml_call2(equal_d,u$0,u);
            if(_awA_)return caml_call2(equal_e,v$0,v);
            var _awB_=_awA_}
          else
           var _awB_=_awz_}
        else
         var _awB_=_awy_}
      else
       var _awB_=_awx_;
      return _awB_}
    function _cK_(param,repr_a,repr_b,repr_c,repr_d,repr_e)
     {var
       v=param[5],
       u=param[4],
       z=param[3],
       y=param[2],
       x=param[1],
       _awr_=caml_call1(repr_e,v),
       _aws_=caml_call1(repr_d,u),
       _awt_=caml_call1(repr_c,z),
       _awu_=caml_call1(repr_b,y),
       _awv_=caml_call1(repr_a,x);
      return caml_call5(_n_(_cL_),_awv_,_awu_,_awt_,_aws_,_awr_)}
    function _cM_(n){return 0 === n?0:[0,n]}
    function _cN_(param)
     {if(param)var n=param[1],_awq_=n;else var _awq_=0;
      return caml_call1(Pervasives[82],_awq_)}
    var _cQ_=Stream[4],_cO_=Pervasives[83],_cP_=Stream[21],_cR_=Stream[17];
    function to_list$1(xs)
     {var ys=caml_call1(_bC_[1],0);
      function _awo_(x)
       {var _awp_=[0,x,caml_call1(_bC_[2],ys)];
        return caml_call2(_bC_[3],ys,_awp_)}
      caml_call2(Stream[8],_awo_,xs);
      return reverse(caml_call1(_bC_[2],ys))}
    var _cS_=Stream[15],_cT_=Stream[16];
    function try_next(xs)
     {function _awk_(x){caml_call1(Stream[12],xs);return x}
      function _awl_(_awn_){return func(_awn_,_awk_)}
      var _awm_=caml_call1(Stream[11],xs);
      return caml_call2(Function1[5][2],_awm_,_awl_)}
    function map_next(xs,f)
     {function _awg_(x){caml_call1(Stream[12],xs);return caml_call1(f,x)}
      function _awh_(_awj_){return func(_awj_,_awg_)}
      var _awi_=caml_call1(Stream[11],xs);
      return caml_call2(Function1[5][2],_awi_,_awh_)}
    function map$1(xs,f)
     {function aux(param){return map_next(xs,f)}
      return caml_call1(Stream[3],aux)}
    function map_acc$0(acc,xs,f)
     {var acc$0=caml_call1(_bC_[1],acc);
      function aux(param)
       {return map_next
                (xs,
                 function(x)
                  {var
                    match=caml_call2(f,caml_call1(_bC_[2],acc$0),x),
                    y=match[2],
                    acc=match[1];
                   caml_call2(_bC_[3],acc$0,acc);
                   return y})}
      return caml_call1(Stream[3],aux)}
    function map_i$0(xs,f)
     {return map_acc$0
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function filter_next(xs,f)
     {function aux(param)
       {function _awc_(x)
         {caml_call1(Stream[12],xs);return caml_call1(f,x)?[0,x]:aux(0)}
        function _awd_(_awf_){return filter_map(_awf_,_awc_)}
        var _awe_=caml_call1(Stream[11],xs);
        return caml_call2(Function1[5][2],_awe_,_awd_)}
      return aux(0)}
    function filter$2(xs,f)
     {function aux(param){return filter_next(xs,f)}
      return caml_call1(Stream[3],aux)}
    function filter_acc$0(acc,xs,f)
     {var acc$0=caml_call1(_bC_[1],acc);
      function aux(param)
       {return filter_next
                (xs,
                 function(x)
                  {var
                    match=caml_call2(f,caml_call1(_bC_[2],acc$0),x),
                    y=match[2],
                    acc=match[1];
                   caml_call2(_bC_[3],acc$0,acc);
                   return y})}
      return caml_call1(Stream[3],aux)}
    function filter_i$0(xs,f)
     {return filter_acc$0
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function filter_map_next(xs,f)
     {function aux(param)
       {function _av__(x)
         {caml_call1(Stream[12],xs);var y=caml_call1(f,x);return y?y:aux(0)}
        function _av$_(_awb_){return filter_map(_awb_,_av__)}
        var _awa_=caml_call1(Stream[11],xs);
        return caml_call2(Function1[5][2],_awa_,_av$_)}
      return aux(0)}
    function filter_map$1(xs,f)
     {function aux(param){return filter_map_next(xs,f)}
      return caml_call1(Stream[3],aux)}
    function filter_map_acc$0(acc,xs,f)
     {var acc$0=caml_call1(_bC_[1],acc);
      function aux(param)
       {return filter_map_next
                (xs,
                 function(x)
                  {var
                    match=caml_call2(f,caml_call1(_bC_[2],acc$0),x),
                    y=match[2],
                    acc=match[1];
                   caml_call2(_bC_[3],acc$0,acc);
                   return y})}
      return caml_call1(Stream[3],aux)}
    function filter_map_i$0(xs,f)
     {return filter_map_acc$0
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function flat_map$0(xs,f)
     {var current=caml_call1(_bC_[1],0);
      function aux(n)
       {for(;;)
         {if(is_none(caml_call1(_bC_[2],current)))
           {var _av9_=map_next(xs,f);caml_call2(_bC_[3],current,_av9_)}
          var match=caml_call1(_bC_[2],current);
          if(match)
           {var ys=match[1],x=caml_call1(Stream[11],ys);
            if(x){caml_call1(Stream[12],ys);return x}
            caml_call2(_bC_[3],current,0);
            continue}
          return 0}}
      return caml_call1(Stream[3],aux)}
    function flat_map_acc$0(acc,xs,f)
     {var acc$0=caml_call1(_bC_[1],acc),current=caml_call1(_bC_[1],0);
      function aux(n)
       {for(;;)
         {if(is_none(caml_call1(_bC_[2],current)))
           {var
             _av8_=
              map_next
               (xs,
                function(x)
                 {var
                   match=caml_call2(f,caml_call1(_bC_[2],acc$0),x),
                   y=match[2],
                   acc=match[1];
                  caml_call2(_bC_[3],acc$0,acc);
                  return y});
            caml_call2(_bC_[3],current,_av8_)}
          var match=caml_call1(_bC_[2],current);
          if(match)
           {var ys=match[1],x=caml_call1(Stream[11],ys);
            if(x){caml_call1(Stream[12],ys);return x}
            caml_call2(_bC_[3],current,0);
            continue}
          return 0}}
      return caml_call1(Stream[3],aux)}
    function flat_map_i$0(xs,f)
     {return flat_map_acc$0
              (0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function _cU_(xs,f)
     {var ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match){var x=match[1],ys$0=[0,caml_call1(f,x),ys],ys=ys$0;continue}
        return reverse(ys)}}
    function _cV_(acc,xs,f)
     {var acc$0=acc,ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match)
         {var
           x=match[1],
           match$0=caml_call2(f,acc$0,x),
           y=match$0[2],
           acc$1=match$0[1],
           ys$0=[0,y,ys],
           acc$0=acc$1,
           ys=ys$0;
          continue}
        return reverse(ys)}}
    function _cW_(xs,f)
     {return _cV_(0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function _cX_(xs,f)
     {var ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match)
         {var x=match[1],ys$0=caml_call1(f,x)?[0,x,ys]:ys,ys=ys$0;continue}
        return reverse(ys)}}
    function _cY_(acc,xs,f)
     {var acc$0=acc,ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match)
         {var
           x=match[1],
           match$0=caml_call2(f,acc$0,x),
           b=match$0[2],
           acc$1=match$0[1],
           ys$0=b?[0,x,ys]:ys,
           acc$0=acc$1,
           ys=ys$0;
          continue}
        return reverse(ys)}}
    function _cZ_(xs,f)
     {return _cY_(0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function _c0_(xs,f)
     {var ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match)
         {var x=match[1],match$0=caml_call1(f,x);
          if(match$0)var y=match$0[1],ys$0=[0,y,ys];else var ys$0=ys;
          var ys=ys$0;
          continue}
        return reverse(ys)}}
    function _c1_(acc,xs,f)
     {var acc$0=acc,ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match)
         {var
           x=match[1],
           match$0=caml_call2(f,acc$0,x),
           y=match$0[2],
           acc$1=match$0[1];
          if(y)var y$0=y[1],ys$0=[0,y$0,ys];else var ys$0=ys;
          var acc$0=acc$1,ys=ys$0;
          continue}
        return reverse(ys)}}
    function _c2_(xs,f)
     {return _c1_(0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function _c3_(xs,f)
     {var ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match)
         {var x=match[1],ys$0=rev_concat(caml_call1(f,x),ys),ys=ys$0;continue}
        return reverse(ys)}}
    function _c4_(acc,xs,f)
     {var acc$0=acc,ys=0;
      for(;;)
       {var match=try_next(xs);
        if(match)
         {var
           x=match[1],
           match$0=caml_call2(f,acc$0,x),
           y=match$0[2],
           acc$1=match$0[1],
           ys$0=rev_concat(y,ys),
           acc$0=acc$1,
           ys=ys$0;
          continue}
        return reverse(ys)}}
    function _c5_(xs,f)
     {return _c4_(0,xs,function(i,x){return [0,i + 1 | 0,caml_call2(f,i,x)]})}
    function _c6_(_av7_){return 0}
    var
     _c7_=Function1[5],
     _c8_=_c7_[1],
     _c9_=_c7_[2],
     _c__=_c7_[3],
     _c$_=O[1],
     _da_=_bC_[1],
     _db_=_bC_[2],
     _dc_=_bC_[3],
     _dd_=Equate[1][3],
     _de_=_dd_[1],
     _df_=_dd_[2],
     _dg_=Function1[1],
     _dh_=Reset[1],
     _di_=_dh_[1],
     _dj_=_dh_[2],
     _dk_=_dh_[3],
     _dl_=_dh_[4],
     _dm_=_dh_[11],
     _dn_=_dh_[12],
     _do_=_dh_[13],
     _dp_=_dh_[14],
     _dq_=_dh_[15],
     _dr_=_dh_[19],
     _ds_=_dh_[20],
     _dt_=_dh_[25],
     _du_=_dh_[26],
     _dv_=_dh_[32],
     _dw_=_dh_[33],
     _dx_=_dh_[34],
     _dy_=_dh_[35],
     _dz_=_dh_[36],
     _dA_=_dh_[37],
     _dB_=_dh_[38],
     _dC_=_dh_[39],
     _dD_=_dh_[40],
     _dE_=_dh_[41],
     _dF_=_dh_[49],
     _dG_=_dh_[50],
     _dH_=_dh_[51],
     _dI_=_dh_[52],
     _dJ_=_dh_[53],
     _dK_=_dh_[54],
     _dL_=_dh_[55],
     _dM_=_dh_[56],
     _dN_=_dh_[57],
     _dO_=_dh_[58],
     _dP_=_dh_[59],
     _dQ_=_dh_[60],
     _dR_=_dh_[61],
     _dS_=_dh_[62],
     _dT_=_dh_[63],
     _dU_=_dh_[64],
     _dV_=_dh_[65],
     _dW_=_dh_[66],
     _dX_=_dh_[67],
     _dY_=_dh_[68],
     _dZ_=_dh_[69],
     _d0_=_dh_[70],
     _d1_=_dh_[71],
     _d2_=_dh_[72],
     _d3_=_dh_[73],
     _d4_=_dh_[74],
     _d5_=_dh_[75],
     _d6_=_dh_[76],
     _d7_=_dh_[77],
     _d8_=_dh_[78],
     _d9_=_dh_[79],
     _d__=_dh_[80],
     _d$_=_dh_[81],
     _ea_=_dh_[82],
     _eb_=_dh_[83],
     _ec_=_dh_[84],
     _ed_=_dh_[86],
     _ee_=_dh_[87],
     _ef_=_dh_[89],
     _eg_=_dh_[90],
     _eh_=_dh_[91],
     _ei_=_dh_[92],
     _ej_=_dh_[93],
     _ek_=_dh_[94],
     _el_=_dh_[95],
     _em_=_dh_[96],
     _en_=_dh_[98],
     _eo_=_dh_[99],
     _ep_=_dh_[100],
     _eq_=_dh_[101],
     _er_=_dh_[102],
     _es_=_dh_[103],
     _et_=_dh_[104],
     _eu_=_dh_[105],
     _ev_=_dh_[106],
     _ew_=_dh_[107],
     _ex_=_dh_[108],
     _ey_=_dh_[109],
     _ez_=_dh_[110],
     _eA_=_dh_[111],
     _eB_=_dh_[112],
     _eC_=_dh_[113],
     _eD_=_dh_[114],
     _eE_=_dh_[115],
     _eF_=_dh_[116],
     _eG_=_dh_[117],
     _eH_=_dh_[118],
     _eI_=_dh_[119],
     _eJ_=_dh_[120],
     _eK_=_dh_[121],
     _eL_=_dh_[122],
     _eM_=_dh_[123],
     _eN_=_dh_[124],
     _eO_=_dh_[125],
     _eP_=_dh_[126],
     _eQ_=_dh_[127],
     _eR_=_dh_[128],
     _eS_=_dh_[129],
     _eT_=_dh_[130],
     _eU_=_dh_[131],
     _eV_=_dh_[132],
     _eW_=_dh_[133],
     _eX_=_dh_[134],
     _eY_=_dh_[135],
     _eZ_=_dh_[136],
     _e0_=_dh_[137],
     _e1_=_dh_[138],
     _e2_=_dh_[139],
     _e3_=_dh_[140],
     _e4_=_dh_[141],
     _e5_=_dh_[142],
     _e6_=_dh_[143],
     _e7_=_dh_[144],
     _e8_=_dh_[145],
     _e9_=_dh_[146],
     _e__=_dh_[147],
     _e$_=_dh_[148],
     _fa_=_dh_[149],
     _fb_=_dh_[150],
     _fc_=_dh_[151],
     _fd_=_dh_[152],
     _fe_=_dh_[153],
     _ff_=_dh_[158],
     _fg_=_dh_[159],
     _fh_=_dh_[160],
     _fi_=_dh_[161],
     _fj_=_dh_[162],
     _fk_=_dh_[163],
     _fl_=_dh_[164],
     _fm_=_dh_[165],
     _fn_=_dh_[166],
     _fo_=_dh_[167];
    function _fx_(param)
     {if(typeof param === "number")
       return cst_OK;
      else
       {if(0 === param[0])
         {var _avM_=param[1];
          switch(_avM_[0])
           {case 0:
             var match=_avM_[1],actual=match[2],expected=match[1];
             return caml_call2(_n_(_fy_),expected,actual);
            case 1:
             var expected$0=_avM_[1],_avN_=caml_call1(_y_,expected$0);
             return caml_call1(_n_(_fz_),_avN_);
            case 2:
             var expected$1=_avM_[1];return caml_call1(_n_(_fA_),expected$1);
            case 3:
             var _avO_=_avM_[3],_avP_=_avM_[2],_avQ_=_avM_[1];
             if(_avO_)
              {var
                bt=_avO_[1],
                _avR_=caml_call1(_aO_,bt),
                _avS_=caml_call1(_y_,_avP_),
                _avT_=caml_call1(_y_,_avQ_);
               return caml_call3(_n_(_fB_),_avT_,_avS_,_avR_)}
             var _avU_=caml_call1(_y_,_avP_),_avV_=caml_call1(_y_,_avQ_);
             return caml_call2(_n_(_fC_),_avV_,_avU_);
            case 4:
             var _avW_=_avM_[3],_avX_=_avM_[2],_avY_=_avM_[1];
             if(_avW_)
              {var
                bt$0=_avW_[1],
                _avZ_=caml_call1(_aO_,bt$0),
                _av0_=caml_call1(_y_,_avX_);
               return caml_call3(_n_(_fD_),_avY_,_av0_,_avZ_)}
             var _av1_=caml_call1(_y_,_avX_);
             return caml_call2(_n_(_fE_),_avY_,_av1_);
            default:var message=_avM_[1];return caml_call1(_n_(_fF_),message)}}
        var _av2_=param[2],_av3_=param[1];
        if(_av2_)
         {var
           bt$1=_av2_[1],
           _av4_=caml_call1(_aO_,bt$1),
           _av5_=caml_call1(_y_,_av3_);
          return caml_call2(_n_(_fG_),_av5_,_av4_)}
        var _av6_=caml_call1(_y_,_av3_);
        return caml_call1(_n_(_fH_),_av6_)}}
    function _fN_(param)
     {if(0 === param[0])
       {var match$0=param[1],status=match$0[2],label=match$0[1];
        if(typeof status === "number")
         var _avK_=cst_Success;
        else
         if(0 === status[0])
          {var reason=status[1];
           switch(reason[0])
            {case 0:
              var
               match=reason[1],
               y=match[2],
               x=match[1],
               _avG_=caml_call2(_n_(_fp_),x,y);
              break;
             case 1:
              var
               exc=reason[1],
               _avA_=caml_call1(_y_,exc),
               _avG_=caml_call1(_n_(_fq_),_avA_);
              break;
             case 2:
              var exc$0=reason[1],_avG_=caml_call1(_n_(_fr_),exc$0);break;
             case 3:
              var
               bt=reason[3],
               exc$1=reason[2],
               expected=reason[1],
               _avB_=repr(bt,_aO_),
               _avC_=caml_call1(_y_,exc$1),
               _avD_=caml_call1(_y_,expected),
               _avG_=caml_call3(_n_(_fs_),_avD_,_avC_,_avB_);
              break;
             case 4:
              var
               bt$0=reason[3],
               exc$2=reason[2],
               expected$0=reason[1],
               _avE_=repr(bt$0,_aO_),
               _avF_=caml_call1(_y_,exc$2),
               _avG_=caml_call3(_n_(_ft_),expected$0,_avF_,_avE_);
              break;
             default:var x$0=reason[1],_avG_=caml_call1(_n_(_fu_),x$0)}
           var _avK_=caml_call1(_n_(_fv_),_avG_)}
         else
          var
           bt$1=status[2],
           exc$3=status[1],
           _avH_=repr(bt$1,_aO_),
           _avI_=caml_call1(_y_,exc$3),
           _avK_=caml_call2(_n_(_fw_),_avI_,_avH_);
        return caml_call2(_n_(_fO_),label,_avK_)}
      var
       match$1=param[1],
       counts=match$1[3],
       children=match$1[2],
       name=match$1[1],
       errors=counts[3],
       failures=counts[2],
       successes=counts[1],
       _avJ_=caml_call3(_n_(_fM_),successes,failures,errors),
       _avL_=repr$0(children,_fN_);
      return caml_call3(_n_(_fP_),name,_avL_,_avJ_)}
    function _fQ_(x,y){return caml_call2(Equate[1][1],x,y)}
    function _fR_(verbose)
     {function aux(indent,param)
       {if(0 === param[0])
         {var match=param[1],status=match[2],label=match[1];
          if(! verbose)if(! caml_call2(_df_,status,0))return 0;
          var _avu_=_fx_(status);
          return [0,caml_call3(_n_(_fS_),indent,label,_avu_),0]}
        var
         _avv_=param[1],
         match$0=_avv_[3],
         errors=match$0[3],
         failures=match$0[2],
         successes=match$0[1],
         children=_avv_[2],
         name=_avv_[1],
         _avw_=caml_call2(_bH_,indent,cst$3);
        function _avx_(_avz_){return aux(_avw_,_avz_)}
        var
         children$0=
          caml_call2
           (_c9_,children,function(_avy_){return flat_map(_avy_,_avx_)}),
         line=
          caml_call2(_W_,failures + errors | 0,0)
           ?caml_call3(_n_(_fT_),indent,name,successes)
           :caml_call5(_n_(_fU_),indent,name,successes,failures,errors);
        if(! verbose)
         if(! caml_call2(_X_,failures + errors | 0,0))return [0,line,0];
        return [0,line,children$0]}
      return function(result)
       {return caml_call2
                (_c9_,result,function(_avt_){return aux(cst$4,_avt_)})}}
    var
     TestFailure=caml_set_oo_id([248,cst_General_Testing_TestFailure,0]),
     Test=
      [0,
       function(opt,test)
        {if(opt)
          var sth=opt[1],record_backtrace=sth;
         else
          var record_backtrace=1;
         caml_call1(_A_,record_backtrace);
         function aux(param)
          {if(0 === param[0])
            {var match=param[1],check=match[2],label=match[1];
             try
              {value(check);var _avp_=[0,[0,label,0]];return _avp_}
             catch(exc)
              {exc = caml_wrap_exception(exc);
               if(exc[1] === TestFailure)
                {var reason=exc[2];return [0,[0,label,[0,reason]]]}
               return [0,[0,label,[1,exc,most_recent_backtrace(0)]]]}}
           var
            match$0=param[1],
            tests=match$0[2],
            name=match$0[1],
            children=map$0(tests,aux);
           function _avq_(counts,result)
            {if(0 === result[0])
              var
               match=result[1],
               status=match[2],
               _avs_=typeof status === "number"?_fJ_:0 === status[0]?_fK_:_fL_,
               counts$0=_avs_;
             else
              var match$0=result[1],counts$1=match$0[3],counts$0=counts$1;
             var
              errors=counts$0[3],
              failures=counts$0[2],
              successes=counts$0[1],
              errors$0=counts[3],
              failures$0=counts[2],
              successes$0=counts[1];
             return [0,
                     successes$0 + successes | 0,
                     failures$0 + failures | 0,
                     errors$0 + errors | 0]}
           var
            counts=
             caml_call2
              (_c9_,children,function(_avr_){return fold(_fI_,_avr_,_avq_)});
           return [1,[0,name,children,counts]]}
         return aux(test)}];
    function command_line_main(argv,test)
     {if(argv)
       {var _avk_=argv[2];
        if(_avk_)
         if(caml_string_notequal(_avk_[1],cst_verbose))
          var switch$0=0;
         else
          if(_avk_[2])var switch$0=0;else var verbose=1,switch$0=1;
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(! switch$0)var verbose=0;
      var result=caml_call2(Test[1],0,test),_avl_=caml_call1(Printf[2],_fV_);
      function _avm_(_avo_){return iter$0(_avo_,_avl_)}
      caml_call2(_c9_,caml_call2(_c9_,result,_fR_(verbose)),_avm_);
      if(0 === result[0])
       var switch$1=typeof result[1][2] === "number"?1:0;
      else
       var _avn_=result[1][3],switch$1=0 === _avn_[2]?0 === _avn_[3]?1:0:0;
      return switch$1?0:_fW_}
    function _fX_(name,tests){return [1,[0,name,tests]]}
    function _fY_(label,check){return [0,[0,label,check]]}
    function _fZ_(format){return _m_(format,_fX_)}
    function _f0_(format){return _m_(format,_fY_)}
    var _f1_=has_suffix(caml_call2(Reset[2][4][1],Sys[1],0),cst_js);
    function _f2_(format)
     {return _m_
              (format,
               function(message){return raise([0,TestFailure,[5,message]])})}
    var _f3_=caml_set_oo_id([248,cst_General_Testing_NoExceptionRaised,0]);
    function _f4_(expected,x)
     {try
       {value(x);var _avj_=raise(_f3_);return _avj_}
      catch(exc)
       {exc = caml_wrap_exception(exc);
        return exc === _f3_
                ?raise([0,TestFailure,[1,expected]])
                :caml_call2(_v_,exc,expected)
                  ?0
                  :raise
                    ([0,TestFailure,[3,expected,exc,most_recent_backtrace(0)]])}}
    function _f5_(expected,x)
     {try
       {value(x);var _avi_=raise(_f3_);return _avi_}
      catch(exc)
       {exc = caml_wrap_exception(exc);
        return exc === _f3_
                ?raise([0,TestFailure,[2,expected]])
                :caml_call2(equal$1,caml_call1(_z_,exc),expected)
                  ?0
                  :raise
                    ([0,TestFailure,[4,expected,exc,most_recent_backtrace(0)]])}}
    function _f6_(repr,equal,expected,actual)
     {var _avg_=1 - caml_call2(equal,expected,actual);
      if(_avg_)
       {var _avh_=caml_call1(repr,actual);
        return raise([0,TestFailure,[0,[0,caml_call1(repr,expected),_avh_]]])}
      return _avg_}
    function _f7_(repr,expected,actual)
     {return _f6_(repr,Equate[1][1],expected,actual)}
    function _f8_(expected,actual){return _f6_(_ao_,_av_,expected,actual)}
    function _f9_(actual){return _f8_(1,actual)}
    function _f__(actual){return _f8_(0,actual)}
    function _f$_(expected,actual)
     {return _f6_(repr$1,equal$1,expected,actual)}
    function _ga_(expected,actual){return _f6_(_T_,_af_,expected,actual)}
    function _gb_(actual){return _f6_(_T_,_af_,42,actual)}
    function _gc_(precision,expected,actual)
     {return _f6_
              (_a6_,
               function(_ave_,_avf_)
                {return approx_equal(precision,_ave_,_avf_)},
               expected,
               actual)}
    function _gd_(low,high,actual)
     {var
       _avc_=caml_lessthan(actual,low),
       _avd_=_avc_ || caml_greaterthan(actual,high);
      return _avd_?raise([0,TestFailure,_ge_]):_avd_}
    function _gf_(expected,actual){return _f6_(_a6_,_bh_,expected,actual)}
    function _gg_(repr$0,equal$0,expected,actual)
     {function _au__(_ava_)
       {return function(_avb_){return equal(_ava_,_avb_,equal$0)}}
      return _f6_
              (function(_au$_){return repr(_au$_,repr$0)},
               _au__,
               expected,
               actual)}
    function _gh_(repr,equal,expected,actual)
     {return _gg_(repr,equal,[0,expected],actual)}
    function _gi_(repr,equal,actual){return _gg_(repr,equal,0,actual)}
    function _gj_(repr,expected,actual)
     {return _gg_(repr,Equate[1][1],expected,actual)}
    function _gk_(repr,expected,actual){return _gj_(repr,[0,expected],actual)}
    function _gl_(repr,actual){return _gj_(repr,0,actual)}
    function _gm_(expected,actual){return _gg_(_T_,_af_,expected,actual)}
    function _gn_(expected,actual){return _gm_([0,expected],actual)}
    function _go_(actual){return _gn_(42,actual)}
    function _gp_(actual){return _gm_(0,actual)}
    function _gq_(expected,actual)
     {return _gg_(repr$1,equal$1,expected,actual)}
    function _gr_(expected,actual){return _gq_([0,expected],actual)}
    function _gs_(actual){return _gq_(0,actual)}
    function _gt_(repr,equal,expected,actual)
     {function _au6_(_au8_)
       {return function(_au9_){return equal$0(_au8_,_au9_,equal)}}
      return _f6_
              (function(_au7_){return repr$0(_au7_,repr)},
               _au6_,
               expected,
               actual)}
    function _gu_(repr,expected,actual)
     {return _gt_(repr,Equate[1][1],expected,actual)}
    function _gv_(expected,actual)
     {return _gt_(repr$1,equal$1,expected,actual)}
    function _gw_(expected,actual){return _gt_(_T_,_af_,expected,actual)}
    function _gx_(expected,actual)
     {function _au2_(_au4_)
       {return function(_au5_){return _cf_(_au4_,_au5_,_af_,_af_)}}
      return _f6_
              (function(_au3_){return _cg_(_au3_,_T_,_T_)},
               _au2_,
               expected,
               actual)}
    function _gy_(expected,actual)
     {function _auY_(_au0_)
       {return function(_au1_){return _co_(_au0_,_au1_,_af_,_af_,_af_)}}
      return _f6_
              (function(_auZ_){return _cp_(_auZ_,_T_,_T_,_T_)},
               _auY_,
               expected,
               actual)}
    function _gz_(expected,actual)
     {function _auU_(_auW_)
       {return function(_auX_){return _cy_(_auW_,_auX_,_af_,_af_,_af_,_af_)}}
      return _f6_
              (function(_auV_){return _cz_(_auV_,_T_,_T_,_T_,_T_)},
               _auU_,
               expected,
               actual)}
    function _gA_(expected,actual)
     {function _auQ_(_auS_)
       {return function(_auT_)
         {return _cJ_(_auS_,_auT_,_af_,_af_,_af_,_af_,_af_)}}
      return _f6_
              (function(_auR_){return _cK_(_auR_,_T_,_T_,_T_,_T_,_T_)},
               _auQ_,
               expected,
               actual)}
    function _gB_(_auO_)
     {return function(_auP_)
       {return [0,function(x){return caml_call2(_auO_[1],x,_auP_[1])}]}}
    function _gC_(_auL_)
     {return function(_auM_)
       {return function(_auN_)
         {return [0,
                  function(x){return caml_call3(_auL_[1],x,_auM_[1],_auN_[1])}]}}}
    function _gD_(_auH_)
     {return function(_auI_)
       {return function(_auJ_)
         {return function(_auK_)
           {return [0,
                    function(x)
                     {return caml_call4(_auH_[1],x,_auI_[1],_auJ_[1],_auK_[1])}]}}}}
    function _gE_(_auC_)
     {return function(_auD_)
       {return function(_auE_)
         {return function(_auF_)
           {return function(_auG_)
             {return [0,
                      function(x)
                       {return caml_call5
                                (_auC_[1],x,_auD_[1],_auE_[1],_auF_[1],_auG_[1])}]}}}}}
    function _gF_(_auw_)
     {return function(_aux_)
       {return function(_auy_)
         {return function(_auz_)
           {return function(_auA_)
             {return function(_auB_)
               {return [0,
                        function(x)
                         {return caml_call6
                                  (_auw_[1],x,_aux_[1],_auy_[1],_auz_[1],_auA_[1],_auB_[1])}]}}}}}}
    function _gG_(_auq_)
     {return function(E)
       {function _aur_(param)
         {var
           expected=param[2],
           v=param[1],
           _auu_=
            [246,
             function(_auv_){return _f$_(expected,caml_call1(_auq_[1],v))}];
          return caml_call2(_f0_(_gH_),expected,_auu_)}
        function _aus_(_aut_){return map$0(_aut_,_aur_)}
        return [0,_fX_(cst_Representable,caml_call2(_c9_,E[1],_aus_))]}}
    function _gI_(_aum_)
     {return function(_aun_)
       {var _auo_=[0,_aun_[2]],_aup_=_aun_[1];
        return caml_call1(_gG_(caml_call1(_gB_(_aum_),_aup_)),_auo_)}}
    function _gJ_(_auk_)
     {return function(_aul_)
       {return [0,function(x,y){return caml_call3(_auk_[1],x,y,_aul_[1])}]}}
    function _gK_(_auh_)
     {return function(_aui_)
       {return function(_auj_)
         {return [0,
                  function(x,y)
                   {return caml_call4(_auh_[1],x,y,_aui_[1],_auj_[1])}]}}}
    function _gL_(_aud_)
     {return function(_aue_)
       {return function(_auf_)
         {return function(_aug_)
           {return [0,
                    function(x,y)
                     {return caml_call5(_aud_[1],x,y,_aue_[1],_auf_[1],_aug_[1])}]}}}}
    function _gM_(_at__)
     {return function(_at$_)
       {return function(_aua_)
         {return function(_aub_)
           {return function(_auc_)
             {return [0,
                      function(x,y)
                       {return caml_call6
                                (_at__[1],x,y,_at$_[1],_aua_[1],_aub_[1],_auc_[1])}]}}}}}
    function _gN_(_at4_)
     {return function(_at5_)
       {return function(_at6_)
         {return function(_at7_)
           {return function(_at8_)
             {return function(_at9_)
               {return [0,
                        function(x,y)
                         {return caml_call7
                                  (_at4_[1],x,y,_at5_[1],_at6_[1],_at7_[1],_at8_[1],_at9_[1])}]}}}}}}
    function _gO_(_at2_)
     {function _at3_(x,y){return caml_call2(_at2_[1],x,y)}
      return [0,_at3_,function(x,y){return caml_call2(_at2_[2],x,y)}]}
    function _gP_(_at1_)
     {return [0,function(x,y){return 1 - caml_call2(_at1_[1],x,y)}]}
    function _gQ_(_at0_)
     {return [0,
              function(x,y,equal_a)
               {return 1 - caml_call3(_at0_[1],x,y,equal_a)}]}
    function _g0_(_as5_)
     {return function(E)
       {function _as6_(param)
         {var
           y=param[2],
           x=param[1],
           rx=caml_call1(_as5_[4],x),
           ry=caml_call1(_as5_[4],y),
           _atC_=0,
           _atD_=
            [246,function(_atZ_){return _f9_(caml_call2(_as5_[3][2],y,x))}],
           _atE_=[0,caml_call3(_f0_(_g1_),ry,rx,_atD_),_atC_],
           _atF_=
            [246,function(_atY_){return _f__(caml_call2(_as5_[3][1],y,x))}],
           _atG_=[0,caml_call3(_f0_(_g2_),ry,rx,_atF_),_atE_],
           _atH_=[246,function(_atX_){return _f9_(caml_call2(_as5_[2],y,x))}],
           _atI_=[0,caml_call3(_f0_(_g3_),ry,rx,_atH_),_atG_],
           _atJ_=[246,function(_atW_){return _f__(caml_call2(_as5_[1],y,x))}],
           _atK_=[0,caml_call3(_f0_(_g4_),ry,rx,_atJ_),_atI_],
           _atL_=
            [246,function(_atV_){return _f9_(caml_call2(_as5_[3][2],x,y))}],
           _atM_=[0,caml_call3(_f0_(_g5_),rx,ry,_atL_),_atK_],
           _atN_=
            [246,function(_atU_){return _f__(caml_call2(_as5_[3][1],x,y))}],
           _atO_=[0,caml_call3(_f0_(_g6_),rx,ry,_atN_),_atM_],
           _atP_=[246,function(_atT_){return _f9_(caml_call2(_as5_[2],x,y))}],
           _atQ_=[0,caml_call3(_f0_(_g7_),rx,ry,_atP_),_atO_],
           _atR_=[246,function(_atS_){return _f__(caml_call2(_as5_[1],x,y))}];
          return [0,caml_call3(_f0_(_g8_),rx,ry,_atR_),_atQ_]}
        function _as7_(_atB_){return flat_map(_atB_,_as6_)}
        var _as8_=caml_call2(_c9_,E[2],_as7_);
        function _as9_(xs)
         {function _ata_(param)
           {var
             y=param[2],
             x=param[1],
             rx=caml_call1(_as5_[4],x),
             ry=caml_call1(_as5_[4],y),
             _atd_=0,
             _ate_=
              [246,function(_atA_){return _f__(caml_call2(_as5_[3][2],y,x))}],
             _atf_=[0,caml_call3(_f0_(_g9_),ry,rx,_ate_),_atd_],
             _atg_=
              [246,function(_atz_){return _f9_(caml_call2(_as5_[3][1],y,x))}],
             _ath_=[0,caml_call3(_f0_(_g__),ry,rx,_atg_),_atf_],
             _ati_=
              [246,function(_aty_){return _f__(caml_call2(_as5_[2],y,x))}],
             _atj_=[0,caml_call3(_f0_(_g$_),ry,rx,_ati_),_ath_],
             _atk_=
              [246,function(_atx_){return _f9_(caml_call2(_as5_[1],y,x))}],
             _atl_=[0,caml_call3(_f0_(_ha_),ry,rx,_atk_),_atj_],
             _atm_=
              [246,function(_atw_){return _f__(caml_call2(_as5_[3][2],x,y))}],
             _atn_=[0,caml_call3(_f0_(_hb_),rx,ry,_atm_),_atl_],
             _ato_=
              [246,function(_atv_){return _f9_(caml_call2(_as5_[3][1],x,y))}],
             _atp_=[0,caml_call3(_f0_(_hc_),rx,ry,_ato_),_atn_],
             _atq_=
              [246,function(_atu_){return _f__(caml_call2(_as5_[2],x,y))}],
             _atr_=[0,caml_call3(_f0_(_hd_),rx,ry,_atq_),_atp_],
             _ats_=
              [246,function(_att_){return _f9_(caml_call2(_as5_[1],x,y))}];
            return [0,caml_call3(_f0_(_he_),rx,ry,_ats_),_atr_]}
          function _atb_(_atc_){return flat_map(_atc_,_ata_)}
          return caml_call2(_c9_,cartesian_product(xs,xs),_atb_)}
        function _as__(_as$_){return flat_map(_as$_,_as9_)}
        return [0,
                _fX_
                 (cst_Equatable,
                  caml_call2(_c$_,caml_call2(_c9_,E[1],_as__),_as8_))]}}
    function _hf_(_asU_)
     {return function(_as0_)
       {var
         _as2_=[0,_as0_[1][1]],
         _as1_=[0,_as0_[2],_as0_[3]],
         _as3_=_asU_[2],
         _asV_=caml_call1(_gJ_([0,_asU_[1]]),_as2_)[1],
         _asW_=[0,_asV_,function(x,y){return caml_call3(_as3_,x,y,_as2_[1])}],
         _asX_=_gO_(_asW_),
         _asY_=_asW_[1],
         _asZ_=_asW_[2],
         _as4_=[0,_as0_[1][2]];
        return caml_call1
                (_g0_
                  ([0,
                    _asY_,
                    _asZ_,
                    _asX_,
                    caml_call1(_gB_([0,_asU_[3]]),_as4_)[1]]),
                 _as1_)}}
    function _hM_(_asQ_)
     {function _asR_(x,y){return caml_call2(_asQ_[1],x,y)}
      function _asS_(x,y){return caml_call2(_asQ_[2],x,y)}
      function _asT_(x,y){return caml_call2(_asQ_[3],x,y)}
      return [0,
              _asR_,
              _asS_,
              _asT_,
              function(x,y){return caml_call2(_asQ_[4],x,y)}]}
    function _h3_(_asM_)
     {function _asN_(x,low,high)
       {var _asP_=caml_call2(_asM_[1],low,x);
        return _asP_?caml_call2(_asM_[3],high,x):_asP_}
      return [0,
              _asN_,
              function(x,low,high)
               {var _asO_=caml_call2(_asM_[2],low,x);
                return _asO_?caml_call2(_asM_[4],high,x):_asO_}]}
    function _ia_(_asJ_)
     {function _asK_(x,y)
       {var match=caml_call2(_asJ_[1],x,y);return 0 === match?x:y}
      function _asL_(x,y)
       {var match=caml_call2(_asJ_[1],x,y);return 2 <= match?x:y}
      return [0,
              _asK_,
              _asL_,
              function(x,y)
               {var match=caml_call2(_asJ_[1],x,y);
                return 0 === match?[0,x,y]:[0,y,x]}]}
    function _iH_(_apL_)
     {return function(E)
       {var _apM_=_apL_[13],_apN_=_apL_[13];
        function _apO_(_asH_)
         {return function(_asI_){return _cf_(_asH_,_asI_,_apM_,_apN_)}}
        var _apP_=_apL_[12],_apQ_=_apL_[12];
        function _apR_(_asG_){return _cg_(_asG_,_apP_,_apQ_)}
        function check_pair(_asE_,_asF_){return _f6_(_apR_,_apO_,_asE_,_asF_)}
        var _apS_=_apL_[13],_apT_=_apL_[12];
        function check(_asC_,_asD_){return _f6_(_apT_,_apS_,_asC_,_asD_)}
        function _apU_(xs)
         {function _aq5_(param)
           {var
             y=param[2],
             x=param[1],
             rx=caml_call1(_apL_[12],x),
             ry=caml_call1(_apL_[12],y),
             _aq8_=0,
             _aq9_=
              [246,
               function(_asB_)
                {return check_pair([0,y,y],caml_call2(_apL_[10],y,x))}],
             _aq__=[0,caml_call3(_f0_(_iI_),ry,rx,_aq9_),_aq8_],
             _aq$_=
              [246,
               function(_asA_)
                {return check_pair([0,x,x],caml_call2(_apL_[10],y,x))}],
             _ara_=[0,caml_call3(_f0_(_iJ_),ry,rx,_aq$_),_aq__],
             _arb_=
              [246,
               function(_asz_)
                {return check_pair([0,y,x],caml_call2(_apL_[10],y,x))}],
             _arc_=[0,caml_call3(_f0_(_iK_),ry,rx,_arb_),_ara_],
             _ard_=
              [246,
               function(_asy_)
                {return check_pair([0,x,y],caml_call2(_apL_[10],y,x))}],
             _are_=[0,caml_call3(_f0_(_iL_),ry,rx,_ard_),_arc_],
             _arf_=
              [246,function(_asx_){return check(y,caml_call2(_apL_[9],y,x))}],
             _arg_=[0,caml_call3(_f0_(_iM_),ry,rx,_arf_),_are_],
             _arh_=
              [246,function(_asw_){return check(x,caml_call2(_apL_[9],y,x))}],
             _ari_=[0,caml_call3(_f0_(_iN_),ry,rx,_arh_),_arg_],
             _arj_=
              [246,function(_asv_){return check(y,caml_call2(_apL_[8],y,x))}],
             _ark_=[0,caml_call3(_f0_(_iO_),ry,rx,_arj_),_ari_],
             _arl_=
              [246,function(_asu_){return check(x,caml_call2(_apL_[8],y,x))}],
             _arm_=[0,caml_call3(_f0_(_iP_),ry,rx,_arl_),_ark_],
             _arn_=
              [246,function(_ast_){return _f__(caml_call2(_apL_[11][3],y,x))}],
             _aro_=[0,caml_call3(_f0_(_iQ_),ry,rx,_arn_),_arm_],
             _arp_=
              [246,function(_ass_){return _f9_(caml_call2(_apL_[11][4],y,x))}],
             _arq_=[0,caml_call3(_f0_(_iR_),ry,rx,_arp_),_aro_],
             _arr_=
              [246,function(_asr_){return _f9_(caml_call2(_apL_[11][2],y,x))}],
             _ars_=[0,caml_call3(_f0_(_iS_),ry,rx,_arr_),_arq_],
             _art_=
              [246,function(_asq_){return _f__(caml_call2(_apL_[11][1],y,x))}],
             _aru_=[0,caml_call3(_f0_(_iT_),ry,rx,_art_),_ars_],
             _arv_=
              [246,function(_asp_){return _f__(caml_call2(_apL_[4],y,x))}],
             _arw_=[0,caml_call3(_f0_(_iU_),ry,rx,_arv_),_aru_],
             _arx_=
              [246,function(_aso_){return _f9_(caml_call2(_apL_[5],y,x))}],
             _ary_=[0,caml_call3(_f0_(_iV_),ry,rx,_arx_),_arw_],
             _arz_=
              [246,function(_asn_){return _f9_(caml_call2(_apL_[3],y,x))}],
             _arA_=[0,caml_call3(_f0_(_iW_),ry,rx,_arz_),_ary_],
             _arB_=
              [246,function(_asm_){return _f__(caml_call2(_apL_[2],y,x))}],
             _arC_=[0,caml_call3(_f0_(_iX_),ry,rx,_arB_),_arA_],
             _arD_=
              [246,
               function(_asl_)
                {return check_pair([0,y,y],caml_call2(_apL_[10],x,y))}],
             _arE_=[0,caml_call3(_f0_(_iY_),rx,ry,_arD_),_arC_],
             _arF_=
              [246,
               function(_ask_)
                {return check_pair([0,x,x],caml_call2(_apL_[10],x,y))}],
             _arG_=[0,caml_call3(_f0_(_iZ_),rx,ry,_arF_),_arE_],
             _arH_=
              [246,
               function(_asj_)
                {return check_pair([0,y,x],caml_call2(_apL_[10],x,y))}],
             _arI_=[0,caml_call3(_f0_(_i0_),rx,ry,_arH_),_arG_],
             _arJ_=
              [246,
               function(_asi_)
                {return check_pair([0,x,y],caml_call2(_apL_[10],x,y))}],
             _arK_=[0,caml_call3(_f0_(_i1_),rx,ry,_arJ_),_arI_],
             _arL_=
              [246,function(_ash_){return check(y,caml_call2(_apL_[9],x,y))}],
             _arM_=[0,caml_call3(_f0_(_i2_),rx,ry,_arL_),_arK_],
             _arN_=
              [246,function(_asg_){return check(x,caml_call2(_apL_[9],x,y))}],
             _arO_=[0,caml_call3(_f0_(_i3_),rx,ry,_arN_),_arM_],
             _arP_=
              [246,function(_asf_){return check(y,caml_call2(_apL_[8],x,y))}],
             _arQ_=[0,caml_call3(_f0_(_i4_),rx,ry,_arP_),_arO_],
             _arR_=
              [246,function(_ase_){return check(x,caml_call2(_apL_[8],x,y))}],
             _arS_=[0,caml_call3(_f0_(_i5_),rx,ry,_arR_),_arQ_],
             _arT_=
              [246,function(_asd_){return _f__(caml_call2(_apL_[11][3],x,y))}],
             _arU_=[0,caml_call3(_f0_(_i6_),rx,ry,_arT_),_arS_],
             _arV_=
              [246,function(_asc_){return _f9_(caml_call2(_apL_[11][4],x,y))}],
             _arW_=[0,caml_call3(_f0_(_i7_),rx,ry,_arV_),_arU_],
             _arX_=
              [246,function(_asb_){return _f9_(caml_call2(_apL_[11][2],x,y))}],
             _arY_=[0,caml_call3(_f0_(_i8_),rx,ry,_arX_),_arW_],
             _arZ_=
              [246,function(_asa_){return _f__(caml_call2(_apL_[11][1],x,y))}],
             _ar0_=[0,caml_call3(_f0_(_i9_),rx,ry,_arZ_),_arY_],
             _ar1_=
              [246,function(_ar$_){return _f__(caml_call2(_apL_[4],x,y))}],
             _ar2_=[0,caml_call3(_f0_(_i__),rx,ry,_ar1_),_ar0_],
             _ar3_=
              [246,function(_ar__){return _f9_(caml_call2(_apL_[5],x,y))}],
             _ar4_=[0,caml_call3(_f0_(_i$_),rx,ry,_ar3_),_ar2_],
             _ar5_=
              [246,function(_ar9_){return _f9_(caml_call2(_apL_[3],x,y))}],
             _ar6_=[0,caml_call3(_f0_(_ja_),rx,ry,_ar5_),_ar4_],
             _ar7_=
              [246,function(_ar8_){return _f__(caml_call2(_apL_[2],x,y))}];
            return [0,caml_call3(_f0_(_jb_),rx,ry,_ar7_),_ar6_]}
          function _aq6_(_aq7_){return flat_map(_aq7_,_aq5_)}
          return caml_call2(_c9_,cartesian_product(xs,xs),_aq6_)}
        function _apV_(_aq4_){return flat_map(_aq4_,_apU_)}
        var _apW_=caml_call2(_c9_,E[2],_apV_);
        function _apX_(xs)
         {function _ap0_(param,y)
           {var
             tests=param[2],
             x=param[1],
             rx=caml_call1(_apL_[12],x),
             ry=caml_call1(_apL_[12],y),
             _ap2_=0,
             _ap3_=
              [246,
               function(_aq3_)
                {return check_pair([0,x,y],caml_call2(_apL_[10],y,x))}],
             _ap4_=[0,caml_call3(_f0_(_jc_),ry,rx,_ap3_),_ap2_],
             _ap5_=
              [246,function(_aq2_){return check(y,caml_call2(_apL_[9],y,x))}],
             _ap6_=[0,caml_call3(_f0_(_jd_),ry,rx,_ap5_),_ap4_],
             _ap7_=
              [246,function(_aq1_){return check(x,caml_call2(_apL_[8],y,x))}],
             _ap8_=[0,caml_call3(_f0_(_je_),ry,rx,_ap7_),_ap6_],
             _ap9_=
              [246,function(_aq0_){return _f9_(caml_call2(_apL_[11][3],y,x))}],
             _ap__=[0,caml_call3(_f0_(_jf_),ry,rx,_ap9_),_ap8_],
             _ap$_=
              [246,function(_aqZ_){return _f9_(caml_call2(_apL_[11][4],y,x))}],
             _aqa_=[0,caml_call3(_f0_(_jg_),ry,rx,_ap$_),_ap__],
             _aqb_=
              [246,function(_aqY_){return _f__(caml_call2(_apL_[11][2],y,x))}],
             _aqc_=[0,caml_call3(_f0_(_jh_),ry,rx,_aqb_),_aqa_],
             _aqd_=
              [246,function(_aqX_){return _f__(caml_call2(_apL_[11][1],y,x))}],
             _aqe_=[0,caml_call3(_f0_(_ji_),ry,rx,_aqd_),_aqc_],
             _aqf_=
              [246,function(_aqW_){return _f9_(caml_call2(_apL_[4],y,x))}],
             _aqg_=[0,caml_call3(_f0_(_jj_),ry,rx,_aqf_),_aqe_],
             _aqh_=
              [246,function(_aqV_){return _f9_(caml_call2(_apL_[5],y,x))}],
             _aqi_=[0,caml_call3(_f0_(_jk_),ry,rx,_aqh_),_aqg_],
             _aqj_=
              [246,function(_aqU_){return _f__(caml_call2(_apL_[3],y,x))}],
             _aqk_=[0,caml_call3(_f0_(_jl_),ry,rx,_aqj_),_aqi_],
             _aql_=
              [246,function(_aqT_){return _f__(caml_call2(_apL_[2],y,x))}],
             _aqm_=[0,caml_call3(_f0_(_jm_),ry,rx,_aql_),_aqk_],
             _aqn_=
              [246,
               function(_aqS_)
                {return check_pair([0,x,y],caml_call2(_apL_[10],x,y))}],
             _aqo_=[0,caml_call3(_f0_(_jn_),rx,ry,_aqn_),_aqm_],
             _aqp_=
              [246,function(_aqR_){return check(y,caml_call2(_apL_[9],x,y))}],
             _aqq_=[0,caml_call3(_f0_(_jo_),rx,ry,_aqp_),_aqo_],
             _aqr_=
              [246,function(_aqQ_){return check(x,caml_call2(_apL_[8],x,y))}],
             _aqs_=[0,caml_call3(_f0_(_jp_),rx,ry,_aqr_),_aqq_],
             _aqt_=
              [246,function(_aqP_){return _f__(caml_call2(_apL_[11][3],x,y))}],
             _aqu_=[0,caml_call3(_f0_(_jq_),rx,ry,_aqt_),_aqs_],
             _aqv_=
              [246,function(_aqO_){return _f__(caml_call2(_apL_[11][4],x,y))}],
             _aqw_=[0,caml_call3(_f0_(_jr_),rx,ry,_aqv_),_aqu_],
             _aqx_=
              [246,function(_aqN_){return _f9_(caml_call2(_apL_[11][2],x,y))}],
             _aqy_=[0,caml_call3(_f0_(_js_),rx,ry,_aqx_),_aqw_],
             _aqz_=
              [246,function(_aqM_){return _f9_(caml_call2(_apL_[11][1],x,y))}],
             _aqA_=[0,caml_call3(_f0_(_jt_),rx,ry,_aqz_),_aqy_],
             _aqB_=
              [246,function(_aqL_){return _f__(caml_call2(_apL_[4],x,y))}],
             _aqC_=[0,caml_call3(_f0_(_ju_),rx,ry,_aqB_),_aqA_],
             _aqD_=
              [246,function(_aqK_){return _f__(caml_call2(_apL_[5],x,y))}],
             _aqE_=[0,caml_call3(_f0_(_jv_),rx,ry,_aqD_),_aqC_],
             _aqF_=
              [246,function(_aqJ_){return _f9_(caml_call2(_apL_[3],x,y))}],
             _aqG_=[0,caml_call3(_f0_(_jw_),rx,ry,_aqF_),_aqE_],
             _aqH_=
              [246,function(_aqI_){return _f9_(caml_call2(_apL_[2],x,y))}],
             new_tests=[0,caml_call3(_f0_(_jx_),rx,ry,_aqH_),_aqG_];
            return [0,y,caml_call2(_c$_,new_tests,tests)]}
          var _ap1_=tail(xs);
          return caml_call2(_c9_,fold([0,head(xs),0],_ap1_,_ap0_),_cc_)}
        function _apY_(_apZ_){return flat_map(_apZ_,_apX_)}
        return [0,
                _fX_
                 (cst_Comparable,
                  caml_call2(_c$_,caml_call2(_c9_,E[1],_apY_),_apW_))]}}
    function _km_(_apF_)
     {return function(E)
       {function _apG_(param)
         {var
           expected=param[2],
           v=param[1],
           _apJ_=
            [246,
             function(_apK_){return _f$_(expected,caml_call1(_apF_[1],v))}];
          return caml_call2(_f0_(_kn_),expected,_apJ_)}
        function _apH_(_apI_){return map$0(_apI_,_apG_)}
        return [0,_fX_(cst_Displayable,caml_call2(_c9_,E[1],_apH_))]}}
    function _ko_(_apt_)
     {return function(E)
       {function _apu_(param)
         {var
           expected=param[2],
           s=param[1],
           _apx_=0,
           _apy_=
            [246,
             function(_apD_)
              {var _apE_=caml_call1(_apt_[1],s);
               return _gh_(_apt_[4],_apt_[3],expected,_apE_)}],
           _apz_=[0,caml_call2(_f0_(_kp_),s,_apy_),_apx_],
           _apA_=
            [246,
             function(_apB_)
              {var _apC_=caml_call1(_apt_[2],s);
               return _f6_(_apt_[4],_apt_[3],expected,_apC_)}];
          return [0,caml_call2(_f0_(_kq_),s,_apA_),_apz_]}
        function _apv_(_apw_){return flat_map(_apw_,_apu_)}
        return [0,_fX_(cst_Parsable,caml_call2(_c9_,E[1],_apv_))]}}
    var _kt_=[0];
    function _ku_(_apm_)
     {function _apn_(x){return caml_call1(_dg_,x)}
      function _apo_(x){return caml_call1(_apm_[1],x)}
      function _app_(x,y){return caml_call2(_apm_[2],x,y)}
      function _apq_(x,y){return caml_call2(_apm_[3],x,y)}
      function _apr_(x,y){return caml_call2(_apm_[4],x,y)}
      function _aps_(x,y){return caml_call2(_apm_[5],x,y)}
      return [0,
              _apn_,
              _apo_,
              _app_,
              _apq_,
              _apr_,
              _aps_,
              function(x,n){return caml_call2(_apm_[6],x,n)}]}
    function _kv_(_aph_)
     {return [0,
              function(x,n)
               {function aux(y,x,n)
                 {var y$0=y,x$0=x,n$0=n;
                  for(;;)
                   {if(caml_lessthan(n$0,0))
                     {var
                       _api_=_aph_[1],
                       _apj_=function(_apk_,_apl_){return aux(_api_,_apk_,_apl_)};
                      return caml_call3(_aph_[4],_apj_,x$0,n$0)}
                    if(caml_call2(_W_,n$0,0))return y$0;
                    if(caml_call2(_W_,n$0,1))
                     return caml_call2(_aph_[3],x$0,y$0);
                    if(caml_call2(_W_,n$0 % 2 | 0,0))
                     {var
                       n$1=n$0 / 2 | 0,
                       x$1=caml_call1(_aph_[2],x$0),
                       x$0=x$1,
                       n$0=n$1;
                      continue}
                    var
                     n$2=(n$0 - 1 | 0) / 2 | 0,
                     x$2=caml_call1(_aph_[2],x$0),
                     y$1=caml_call2(_aph_[3],x$0,y$0),
                     y$0=y$1,
                     x$0=x$2,
                     n$0=n$2;
                    continue}}
                return aux(_aph_[1],x,n)}]}
    function _kY_(_anI_)
     {return [0,
              [0,
               function(_anJ_)
                {return function(_anK_)
                  {return function(Container)
                    {var
                      _anL_=0,
                      _anM_=
                       [0,
                        _fY_
                         (cst_flat_map_acc,
                          [246,
                           function(param)
                            {var _ao9_=Container[2],_ao__=caml_call1(_anK_[12],42);
                             function _ao$_(acc,x)
                              {var
                                acc$0=caml_mul(acc,x + 1 | 0),
                                _apc_=Container[1],
                                _apd_=ToList[1];
                               function _ape_(n){return acc + caml_mul(x,n + 1 | 0) | 0}
                               function _apf_(_apg_){return caml_call2(_apd_,_apg_,_ape_)}
                               var
                                ys=
                                 caml_call2(_c9_,caml_call2(_c9_,make(0,0,x),_apf_),_apc_);
                               return [0,acc$0,ys]}
                             function _apa_(_apb_){return caml_call2(_ao__,_apb_,_ao$_)}
                             return _gw_
                                     (_k0_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_kZ_,_anJ_[1]),_apa_),
                                        _ao9_))}]),
                        _anL_],
                      _anN_=
                       [0,
                        _fY_
                         (cst_flat_map_i,
                          [246,
                           function(param)
                            {var _aoZ_=Container[2],_ao0_=_anK_[11];
                             function _ao1_(i,x)
                              {var _ao4_=Container[1],_ao5_=ToList[1];
                               function _ao6_(n){return caml_mul(x + i | 0,n + 1 | 0)}
                               function _ao7_(_ao8_){return caml_call2(_ao5_,_ao8_,_ao6_)}
                               return caml_call2
                                       (_c9_,caml_call2(_c9_,make(0,0,x),_ao7_),_ao4_)}
                             function _ao2_(_ao3_){return caml_call2(_ao0_,_ao3_,_ao1_)}
                             return _gw_
                                     (_k2_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_k1_,_anJ_[1]),_ao2_),
                                        _aoZ_))}]),
                        _anM_],
                      _anO_=
                       [0,
                        _fY_
                         (cst_flat_map,
                          [246,
                           function(param)
                            {var _aoP_=Container[2],_aoQ_=_anK_[10];
                             function _aoR_(x)
                              {var _aoU_=Container[1],_aoV_=ToList[1];
                               function _aoW_(n){return caml_mul(x,n + 1 | 0)}
                               function _aoX_(_aoY_){return caml_call2(_aoV_,_aoY_,_aoW_)}
                               return caml_call2
                                       (_c9_,caml_call2(_c9_,make(0,0,x),_aoX_),_aoU_)}
                             function _aoS_(_aoT_){return caml_call2(_aoQ_,_aoT_,_aoR_)}
                             return _gw_
                                     (_k4_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_k3_,_anJ_[1]),_aoS_),
                                        _aoP_))}]),
                        _anN_],
                      _anP_=
                       [0,
                        _fY_
                         (cst_filter_map_acc,
                          [246,
                           function(param)
                            {var _aoH_=Container[2],_aoI_=caml_call1(_anK_[9],42);
                             function _aoJ_(acc,x)
                              {var
                                _aoN_=caml_call2(_de_,acc % 2 | 0,0),
                                _aoM_=x + 1 | 0,
                                _aoO_=_aoN_?caml_call2(_de_,x % 3 | 0,0):_aoN_;
                               return [0,acc + x | 0,some_if$0(_aoO_,_aoM_)]}
                             function _aoK_(_aoL_){return caml_call2(_aoI_,_aoL_,_aoJ_)}
                             return _gw_
                                     (_k6_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_k5_,_anJ_[1]),_aoK_),
                                        _aoH_))}]),
                        _anO_],
                      _anQ_=
                       [0,
                        _fY_
                         (cst_filter_map_i,
                          [246,
                           function(param)
                            {var _aoz_=Container[2],_aoA_=_anK_[8];
                             function _aoB_(i,x)
                              {var
                                _aoF_=caml_call2(_de_,i % 2 | 0,0),
                                _aoE_=x + 1 | 0,
                                _aoG_=_aoF_?caml_call2(_de_,x % 3 | 0,0):_aoF_;
                               return some_if$0(_aoG_,_aoE_)}
                             function _aoC_(_aoD_){return caml_call2(_aoA_,_aoD_,_aoB_)}
                             return _gw_
                                     (_k8_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_k7_,_anJ_[1]),_aoC_),
                                        _aoz_))}]),
                        _anP_],
                      _anR_=
                       [0,
                        _fY_
                         (cst_filter_map,
                          [246,
                           function(param)
                            {var _aou_=Container[2],_aov_=_anK_[7];
                             function _aow_(x)
                              {return some_if$0(caml_call2(_de_,x % 3 | 0,0),x + 1 | 0)}
                             function _aox_(_aoy_){return caml_call2(_aov_,_aoy_,_aow_)}
                             return _gw_
                                     (_k__,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_k9_,_anJ_[1]),_aox_),
                                        _aou_))}]),
                        _anQ_],
                      _anS_=
                       [0,
                        _fY_
                         (cst_filter_acc,
                          [246,
                           function(param)
                            {var _aon_=Container[2],_aoo_=caml_call1(_anK_[6],42);
                             function _aop_(acc,x)
                              {var
                                _aos_=caml_call2(_de_,acc % 2 | 0,0),
                                _aot_=_aos_?caml_call2(_de_,x % 3 | 0,0):_aos_;
                               return [0,acc + x | 0,_aot_]}
                             function _aoq_(_aor_){return caml_call2(_aoo_,_aor_,_aop_)}
                             return _gw_
                                     (_la_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_k$_,_anJ_[1]),_aoq_),
                                        _aon_))}]),
                        _anR_],
                      _anT_=
                       [0,
                        _fY_
                         (cst_filter_i,
                          [246,
                           function(param)
                            {var _aoh_=Container[2],_aoi_=_anK_[5];
                             function _aoj_(i,x)
                              {var _aom_=caml_call2(_de_,i % 2 | 0,0);
                               return _aom_?caml_call2(_de_,x % 3 | 0,0):_aom_}
                             function _aok_(_aol_){return caml_call2(_aoi_,_aol_,_aoj_)}
                             return _gw_
                                     (_lc_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_lb_,_anJ_[1]),_aok_),
                                        _aoh_))}]),
                        _anS_],
                      _anU_=
                       [0,
                        _fY_
                         (cst_filter,
                          [246,
                           function(param)
                            {var _aoc_=Container[2],_aod_=_anK_[4];
                             function _aoe_(x){return caml_call2(_de_,x % 3 | 0,0)}
                             function _aof_(_aog_){return caml_call2(_aod_,_aog_,_aoe_)}
                             return _gw_
                                     (_le_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_ld_,_anJ_[1]),_aof_),
                                        _aoc_))}]),
                        _anT_],
                      _anV_=
                       [0,
                        _fY_
                         (cst_map_acc,
                          [246,
                           function(param)
                            {var _an9_=Container[2],_an__=caml_call1(_anK_[3],42);
                             function _an$_(acc,x)
                              {return [0,caml_mul(acc,x),x + acc | 0]}
                             function _aoa_(_aob_){return caml_call2(_an__,_aob_,_an$_)}
                             return _gw_
                                     (_lg_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_lf_,_anJ_[1]),_aoa_),
                                        _an9_))}]),
                        _anU_],
                      _anW_=
                       [0,
                        _fY_
                         (cst_map_i,
                          [246,
                           function(param)
                            {var _an4_=Container[2],_an5_=_anK_[2];
                             function _an6_(i,x){return i + x | 0}
                             function _an7_(_an8_){return caml_call2(_an5_,_an8_,_an6_)}
                             return _gw_
                                     (_li_,
                                      caml_call2
                                       (_c9_,
                                        caml_call2(_c9_,caml_call2(_c9_,_lh_,_anJ_[1]),_an7_),
                                        _an4_))}]),
                        _anV_];
                     return [0,
                             _fX_
                              (cst_FilterMapable_ToContainer,
                               [0,
                                _fY_
                                 (cst_map,
                                  [246,
                                   function(_anX_)
                                    {var _anY_=Container[2],_anZ_=_anK_[1];
                                     function _an0_(_an3_){return 1 + _an3_ | 0}
                                     function _an1_(_an2_){return caml_call2(_anZ_,_an2_,_an0_)}
                                     return _gw_
                                             (_lk_,
                                              caml_call2
                                               (_c9_,
                                                caml_call2(_c9_,caml_call2(_c9_,_lj_,_anJ_[1]),_an1_),
                                                _anY_))}]),
                                _anW_])]}}}]]}
    var _ll_=_kY_([0]);
    function _lm_(_anE_)
     {var
       _anF_=_kY_([0]),
       _anG_=[0,_anE_[14],_anE_[13]],
       _anH_=
        [0,
         _anE_[1],
         _anE_[2],
         _anE_[3],
         _anE_[4],
         _anE_[5],
         _anE_[6],
         _anE_[7],
         _anE_[8],
         _anE_[9],
         _anE_[10],
         _anE_[11],
         _anE_[12]];
      return [0,
              caml_call1
                (caml_call1(caml_call1(_anF_[1][1],[0,_anE_[14]]),_anH_),
                 _anG_)
               [1]]}
    var _ln_=[0,[0],[0,[0]],[0,[0],[0,[0]]]];
    function _lo_(_anD_){return [0]}
    var _lp_=[0],_lq_=[0],_lr_=[0,function(_anC_){return [0]},[0],[0]];
    function _ls_(_anB_){return [0]}
    var
     _lt_=[0],
     _lu_=[0],
     _lv_=
      [0,
       _lo_,
       _lp_,
       _lq_,
       _lr_,
       [0,_ls_,_lt_,_lu_,[0,function(_anA_){return [0]},[0],[0]]]],
     _lw_=0;
    function _lx_(_anv_)
     {return function(_anw_)
       {var
         _anx_=[0,_anw_[3]],
         _any_=[0,caml_call1(_gG_([0,_anv_[4]]),_anx_)[1],0],
         _anz_=[0,_anw_[1],_anw_[2]];
        return [0,
                _fX_
                 (cst_Identifiable,[0,caml_call1(_g0_(_anv_),_anz_)[1],_any_])]}}
    var _lE_=[0];
    function _lF_(_ano_)
     {return function(_anp_)
       {var
         _anr_=_ano_[1],
         _anq_=[0,_anp_[3],_anp_[4]],
         _ans_=
          [0,
           caml_call1
             (_iH_
               ([0,
                 _ano_[5],
                 _ano_[6],
                 _ano_[7],
                 _ano_[8],
                 _ano_[9],
                 _ano_[10],
                 _ano_[11],
                 _ano_[12],
                 _ano_[13],
                 _ano_[14],
                 [0,_anr_[3],_anr_[4],_anr_[5],_anr_[6]],
                 _ano_[4],
                 _ano_[2]]),
              _anq_)
            [1],
           0],
         _anu_=_ano_[1],
         _ant_=[0,_anp_[4],_anp_[1],_anp_[2]];
        return [0,
                _fX_
                 (cst_Able,
                  [0,
                   caml_call1
                     (_lx_([0,_ano_[2],_ano_[3],[0,_anu_[1],_anu_[2]],_ano_[4]]),
                      _ant_)
                    [1],
                   _ans_])]}}
    var _lS_=[0],_lT_=[0];
    function _lU_(_akB_)
     {return function(_akX_)
       {var
         _ak3_=_akX_[6],
         _ak7_=_akX_[11],
         _akY_=_akX_[1],
         _akZ_=_akX_[2],
         _ak0_=_akX_[3],
         _ak1_=_akX_[4],
         _ak2_=_akX_[5],
         _ak4_=_akX_[7],
         _ak5_=_akX_[8],
         _ak6_=_akX_[9],
         _ak8_=caml_call2(_c$_,_akX_[10],[0,[0,_akB_[8],[0,_akB_[9],0]],0]),
         _ak9_=_akB_[3],
         _ak__=_akB_[7];
        function check$0(_anm_,_ann_){return _f6_(_ak__,_ak9_,_anm_,_ann_)}
        var
         _ak$_=0,
         _ala_=
          [0,
           _fY_
            (cst_to_float_one,
             [246,
              function(_anl_){return _gf_(1,caml_call1(_akB_[32],_akB_[9]))}]),
           _ak$_],
         _alb_=
          [0,
           _fY_
            (cst_to_int_one,
             [246,
              function(_ank_){return _ga_(1,caml_call1(_akB_[31],_akB_[9]))}]),
           _ala_],
         _alc_=
          [0,
           _fY_
            (cst_to_float_zero,
             [246,
              function(_anj_){return _gf_(0,caml_call1(_akB_[32],_akB_[8]))}]),
           _alb_],
         _ald_=
          [0,
           _fY_
            (cst_to_int_zero,
             [246,
              function(_ani_){return _ga_(0,caml_call1(_akB_[31],_akB_[8]))}]),
           _alc_];
        function _ale_(param)
         {var
           y=param[2],
           x=param[1],
           x$0=caml_call2(_akB_[23],x,_akB_[8])?x:y,
           abs_y=caml_call2(_akB_[23],y,_akB_[8])?y:x,
           _ana_=0,
           _anb_=
            [246,
             function(_anh_){return check$0(abs_y,caml_call1(_akB_[29],y))}],
           _anc_=caml_call1(_akB_[7],y),
           _and_=[0,caml_call2(_f0_(_lV_),_anc_,_anb_),_ana_],
           _ane_=
            [246,function(_ang_){return check$0(x$0,caml_call1(_akB_[29],x))}],
           _anf_=caml_call1(_akB_[7],x);
          return [0,caml_call2(_f0_(_lW_),_anf_,_ane_),_and_]}
        var
         _alf_=
          caml_call2
           (_c$_,
            caml_call2
             (_c9_,_ak3_,function(_am$_){return flat_map(_am$_,_ale_)}),
            _ald_),
         _alg_=_akB_[1],
         _alh_=
          [0,
           caml_call1
             (_iH_
               ([0,
                 _akB_[19],
                 _akB_[20],
                 _akB_[21],
                 _akB_[22],
                 _akB_[23],
                 _akB_[24],
                 _akB_[25],
                 _akB_[26],
                 _akB_[27],
                 _akB_[28],
                 [0,_alg_[10],_alg_[11],_alg_[12],_alg_[13]],
                 _akB_[7],
                 _akB_[3]]),
              [0,_ak8_,_ak7_])
            [1],
           0],
         _ali_=_akB_[18],
         _alj_=_akB_[17],
         _all_=_akB_[15],
         _aln_=_akB_[13],
         _alo_=_akB_[12],
         _alp_=_akB_[11],
         _alq_=_akB_[10],
         _alr_=_akB_[9],
         _als_=_akB_[8],
         _alt_=_akB_[7],
         _alu_=_akB_[6],
         _alx_=_akB_[3],
         _alz_=_akB_[1],
         _alD_=_alz_[6],
         _alE_=_alz_[5],
         _alF_=_alz_[4],
         _alk_=_akB_[16],
         _alm_=_akB_[14],
         _alv_=_akB_[5],
         _alw_=_akB_[4],
         _aly_=_akB_[2],
         _alA_=_alz_[9],
         _alB_=_alz_[8],
         _alC_=_alz_[7],
         _alG_=_alz_[2],
         _alH_=_alz_[1],
         _akM_=[0,caml_call1(_alu_,cst_1),0],
         _akN_=[0,caml_call1(_ali_,1),_akM_],
         _akO_=[0,[0,_alr_,[0,caml_call1(_alj_,1),_akN_]],0],
         _akP_=[0,caml_call1(_alu_,cst_0),0],
         _akQ_=[0,caml_call1(_ali_,0),_akP_],
         equal=
          caml_call2
           (_c$_,_ak7_,[0,[0,_als_,[0,caml_call1(_alj_,0),_akQ_]],_akO_]),
         _akR_=caml_call2(_c$_,_akZ_,[0,[0,_als_,_alr_],0]),
         add_substract=
          caml_call2
           (_c$_,_ak2_,[0,[0,_als_,_als_,_als_],[0,[0,_alr_,_als_,_alr_],0]]),
         negate=caml_call2(_c$_,_ak3_,[0,[0,_als_,_als_],0]),
         multiply=
          caml_call2
           (_c$_,_ak4_,[0,[0,_als_,_als_,_als_],[0,[0,_alr_,_als_,_als_],0]]),
         divide=
          caml_call2
           (_c$_,_ak5_,[0,[0,_als_,_alr_,_als_],[0,[0,_alr_,_alr_,_alr_],0]]),
         _akS_=0,
         _akC_=
          caml_call2
           (_c$_,
            _ak6_,
            [0,
             [0,_als_,0,_alr_],
             [0,
              [0,_als_,1,_als_],
              [0,
               [0,_als_,7,_als_],
               [0,
                [0,_alr_,0,_alr_],
                [0,[0,_alr_,1,_alr_],[0,[0,_alr_,7,_alr_],0]]]]]]);
        function check(_am9_,_am__){return _f6_(_alt_,_alx_,_am9_,_am__)}
        function _akD_(param)
         {var
           expected=param[3],
           n=param[2],
           x=param[1],
           rx=caml_call1(_alt_,x),
           _am3_=0,
           _am4_=
            [246,
             function(_am8_){return check(expected,caml_call2(_alA_,x,n))}],
           _am5_=[0,caml_call3(_f0_(_kw_),rx,n,_am4_),_am3_],
           _am6_=
            [246,
             function(_am7_){return check(expected,caml_call2(_alk_,x,n))}];
          return [0,caml_call3(_f0_(_kx_),rx,n,_am6_),_am5_]}
        var
         _akE_=
          caml_call2(_c9_,_akC_,function(_am2_){return flat_map(_am2_,_akD_)});
        function _akF_(param)
         {var
           expected=param[3],
           y=param[2],
           x=param[1],
           rx=caml_call1(_alt_,x),
           ry=caml_call1(_alt_,y),
           _amW_=0,
           _amX_=
            [246,
             function(_am1_){return check(expected,caml_call2(_alB_,x,y))}],
           _amY_=[0,caml_call3(_f0_(_ky_),rx,ry,_amX_),_amW_],
           _amZ_=
            [246,
             function(_am0_){return check(expected,caml_call2(_alm_,x,y))}];
          return [0,caml_call3(_f0_(_kz_),rx,ry,_amZ_),_amY_]}
        var
         _akG_=
          caml_call2
           (_c$_,
            caml_call2
             (_c9_,divide,function(_amV_){return flat_map(_amV_,_akF_)}),
            _akE_);
        function _akH_(param)
         {var
           expected=param[3],
           y=param[2],
           x=param[1],
           rx=caml_call1(_alt_,x),
           ry=caml_call1(_alt_,y),
           _amP_=0,
           _amQ_=
            [246,
             function(_amU_){return check(expected,caml_call2(_alC_,x,y))}],
           _amR_=[0,caml_call3(_f0_(_kA_),rx,ry,_amQ_),_amP_],
           _amS_=
            [246,
             function(_amT_){return check(expected,caml_call2(_aln_,x,y))}];
          return [0,caml_call3(_f0_(_kB_),rx,ry,_amS_),_amR_]}
        var
         _akI_=
          caml_call2
           (_c$_,
            caml_call2
             (_c9_,multiply,function(_amO_){return flat_map(_amO_,_akH_)}),
            _akG_);
        function _akJ_(param)
         {var
           y=param[2],
           x=param[1],
           rx=caml_call1(_alt_,x),
           ry=caml_call1(_alt_,y),
           _al8_=0,
           _al9_=
            [246,
             function(_amM_)
              {var _amN_=caml_call1(_all_,y);
               return check(caml_call1(_alq_,caml_call2(_aln_,x,y)),_amN_)}],
           _al__=[0,caml_call2(_f0_(_kC_),ry,_al9_),_al8_],
           _al$_=
            [246,
             function(_amK_)
              {var _amL_=caml_call1(_all_,x);
               return check(caml_call1(_alq_,caml_call2(_aln_,x,y)),_amL_)}],
           _ama_=[0,caml_call2(_f0_(_kD_),rx,_al$_),_al__],
           _amb_=
            [246,function(_amJ_){return check(_als_,caml_call2(_alE_,y,x))}],
           _amc_=[0,caml_call3(_f0_(_kE_),ry,rx,_amb_),_ama_],
           _amd_=
            [246,function(_amI_){return check(_als_,caml_call2(_alE_,x,y))}],
           _ame_=[0,caml_call3(_f0_(_kF_),rx,ry,_amd_),_amc_],
           _amf_=
            [246,function(_amH_){return check(_als_,caml_call2(_alp_,y,x))}],
           _amg_=[0,caml_call3(_f0_(_kG_),ry,rx,_amf_),_ame_],
           _amh_=
            [246,function(_amG_){return check(_als_,caml_call2(_alp_,x,y))}],
           _ami_=[0,caml_call3(_f0_(_kH_),rx,ry,_amh_),_amg_],
           _amj_=
            [246,function(_amF_){return check(x,caml_call2(_alD_,_als_,y))}],
           _amk_=[0,caml_call2(_f0_(_kI_),ry,_amj_),_ami_],
           _aml_=
            [246,function(_amE_){return check(y,caml_call2(_alD_,_als_,x))}],
           _amm_=[0,caml_call2(_f0_(_kJ_),rx,_aml_),_amk_],
           _amn_=
            [246,function(_amD_){return check(x,caml_call2(_alo_,_als_,y))}],
           _amo_=[0,caml_call2(_f0_(_kK_),ry,_amn_),_amm_],
           _amp_=
            [246,function(_amC_){return check(y,caml_call2(_alo_,_als_,x))}],
           _amq_=[0,caml_call2(_f0_(_kL_),rx,_amp_),_amo_],
           _amr_=[246,function(_amB_){return check(x,caml_call1(_alF_,y))}],
           _ams_=[0,caml_call2(_f0_(_kM_),ry,_amr_),_amq_],
           _amt_=[246,function(_amA_){return check(y,caml_call1(_alF_,x))}],
           _amu_=[0,caml_call2(_f0_(_kN_),rx,_amt_),_ams_],
           _amv_=[246,function(_amz_){return check(x,caml_call1(_alq_,y))}],
           _amw_=[0,caml_call2(_f0_(_kO_),ry,_amv_),_amu_],
           _amx_=[246,function(_amy_){return check(y,caml_call1(_alq_,x))}];
          return [0,caml_call2(_f0_(_kP_),rx,_amx_),_amw_]}
        var
         _akK_=
          caml_call2
           (_c$_,
            caml_call2
             (_c9_,negate,function(_al7_){return flat_map(_al7_,_akJ_)}),
            _akI_);
        function _akL_(param)
         {var
           z=param[3],
           y=param[2],
           x=param[1],
           rx=caml_call1(_alt_,x),
           ry=caml_call1(_alt_,y),
           rz=caml_call1(_alt_,z),
           _alJ_=0,
           _alK_=[246,function(_al6_){return check(y,caml_call2(_alD_,z,x))}],
           _alL_=[0,caml_call3(_f0_(_kQ_),rz,rx,_alK_),_alJ_],
           _alM_=[246,function(_al5_){return check(y,caml_call2(_alo_,z,x))}],
           _alN_=[0,caml_call3(_f0_(_kR_),rz,rx,_alM_),_alL_],
           _alO_=[246,function(_al4_){return check(x,caml_call2(_alD_,z,y))}],
           _alP_=[0,caml_call3(_f0_(_kS_),rz,ry,_alO_),_alN_],
           _alQ_=[246,function(_al3_){return check(x,caml_call2(_alo_,z,y))}],
           _alR_=[0,caml_call3(_f0_(_kT_),rz,ry,_alQ_),_alP_],
           _alS_=[246,function(_al2_){return check(z,caml_call2(_alE_,y,x))}],
           _alT_=[0,caml_call3(_f0_(_kU_),ry,rx,_alS_),_alR_],
           _alU_=[246,function(_al1_){return check(z,caml_call2(_alE_,x,y))}],
           _alV_=[0,caml_call3(_f0_(_kV_),rx,ry,_alU_),_alT_],
           _alW_=[246,function(_al0_){return check(z,caml_call2(_alp_,y,x))}],
           _alX_=[0,caml_call3(_f0_(_kW_),ry,rx,_alW_),_alV_],
           _alY_=[246,function(_alZ_){return check(z,caml_call2(_alp_,x,y))}];
          return [0,caml_call3(_f0_(_kX_),rx,ry,_alY_),_alX_]}
        var
         _akT_=
          [0,
           _fX_
            (cst_Ringoid,
             caml_call2
              (_c$_,
               caml_call2
                (_c9_,
                 add_substract,
                 function(_alI_){return flat_map(_alI_,_akL_)}),
               _akK_)),
           _akS_],
         _akU_=[0,caml_call1(_gG_([0,_alt_]),[0,_ak1_])[1],_akT_],
         _akV_=
          [0,caml_call1(_ko_([0,_alv_,_alu_,_alx_,_alt_]),[0,_ak0_])[1],_akU_],
         _akW_=
          [0,
           caml_call1
             (_g0_([0,_alx_,_alw_,[0,_alH_,_alG_],_alt_]),[0,equal,_akR_])
            [1],
           _akV_];
        return [0,
                _fX_
                 (cst_RealNumber,
                  caml_call2
                   (_c$_,
                    [0,
                     _fX_
                      (cst_Number,
                       [0,caml_call1(_km_([0,_aly_]),[0,_akY_])[1],_akW_]),
                     _alh_],
                    _alf_))]}}
    function _lX_(_aj$_)
     {return function(_akb_)
       {var
         _akc_=_akb_[1],
         _akd_=_akb_[2],
         _ake_=_akb_[3],
         _akf_=_akb_[4],
         _akg_=_akb_[5],
         _akh_=_akb_[6],
         _aki_=_akb_[7],
         _akj_=_akb_[8],
         _akk_=_akb_[9],
         _akl_=_akb_[10],
         _akm_=_akb_[11],
         _akn_=caml_call2(_c$_,_akb_[12],[0,[0,_aj$_[8],_aj$_[9]],0]),
         _akp_=_aj$_[7],
         _akq_=_aj$_[3],
         _ako_=0,
         _akr_=_aj$_[34],
         _aks_=_aj$_[33];
        function _aka_(param)
         {var
           s=param[2],
           p=param[1],
           rp=caml_call1(_akp_,p),
           rs=caml_call1(_akp_,s),
           _akv_=0,
           _akw_=
            [246,
             function(_akA_){return _f6_(_akp_,_akq_,p,caml_call1(_akr_,s))}],
           _akx_=[0,caml_call2(_f0_(_kr_),rs,_akw_),_akv_],
           _aky_=
            [246,
             function(_akz_){return _f6_(_akp_,_akq_,s,caml_call1(_aks_,p))}];
          return [0,caml_call2(_f0_(_ks_),rp,_aky_),_akx_]}
        var
         _akt_=
          [0,
           _fX_
            (cst_PredSucc,
             caml_call2
              (_c9_,_akn_,function(_aku_){return flat_map(_aku_,_aka_)})),
           _ako_];
        return [0,
                _fX_
                 (cst_Integer,
                  [0,
                   caml_call1
                     (_lU_
                       ([0,
                         _aj$_[1],
                         _aj$_[2],
                         _aj$_[3],
                         _aj$_[4],
                         _aj$_[5],
                         _aj$_[6],
                         _aj$_[7],
                         _aj$_[8],
                         _aj$_[9],
                         _aj$_[10],
                         _aj$_[11],
                         _aj$_[12],
                         _aj$_[13],
                         _aj$_[14],
                         _aj$_[15],
                         _aj$_[16],
                         _aj$_[17],
                         _aj$_[18],
                         _aj$_[19],
                         _aj$_[20],
                         _aj$_[21],
                         _aj$_[22],
                         _aj$_[23],
                         _aj$_[24],
                         _aj$_[25],
                         _aj$_[26],
                         _aj$_[27],
                         _aj$_[28],
                         _aj$_[29],
                         _aj$_[30],
                         _aj$_[31],
                         _aj$_[32]]),
                      [0,
                       _akc_,
                       _akd_,
                       _ake_,
                       _akf_,
                       _akg_,
                       _akh_,
                       _aki_,
                       _akj_,
                       _akk_,
                       _akl_,
                       _akm_])
                    [1],
                   _akt_])]}}
    function _lY_(_aj__,_aj9_)
     {return caml_check_bound(_aj__,_aj9_)[_aj9_ + 1]}
    function _lZ_(_aj8_,_aj7_,_aj6_)
     {return caml_check_bound(_aj8_,_aj7_)[_aj7_ + 1] = _aj6_}
    function _l0_(_aj5_){return _aj5_.length - 1}
    var
     match_failure=[246,function(_aj4_){throw [0,MatchFailure,_l1_]}],
     assert_failure=[246,function(param){throw [0,AssertFailure,_l2_]}];
    function failure_if(condition,format)
     {return _m_
              (format,
               function(message)
                {return condition?raise([0,Failure,message]):condition})}
    function failure_unless(condition,format)
     {return _m_
              (format,
               function(message)
                {var _aj3_=1 - condition;
                 return _aj3_?raise([0,Failure,message]):_aj3_})}
    var
     TestException=
      caml_set_oo_id([248,cst_General_Exception_Tests_TestException,0]),
     _l5_=[0,[0,DivisionByZero,cst_Division_by_zero],0],
     _l3_=[0,[0,[0,Failure,cst_foo],0],0],
     _l4_=
      [0,
       [0,[0,Failure,cst_foo$2],[0,Failure,cst_bar]],
       [0,[0,[0,Failure,cst_foo$1],[0,InvalidArgument,cst_foo$0]],0]],
     _l6_=0,
     _l7_=0,
     _l8_=
      [0,
       _fY_
        (cst_Exit_Pervasives_Exit,
         [246,
          function(_aj1_)
           {return _f4_(_x_,[246,function(_aj2_){return raise(_x_)}])}]),
       _l7_],
     _l9_=
      [0,
       _fY_
        (cst_DivisionByZero_Division_by_zero,
         [246,
          function(_ajZ_)
           {return _f4_
                    (DivisionByZero,[246,function(_aj0_){return caml_div(1,0)}])}]),
       _l8_],
     _l__=
      [0,
       _fY_
        (cst_StackOverflow_Stack_overflow,
         [246,
          function(_ajY_)
           {return _f4_
                    (StackOverflow,
                     [246,
                      function(param)
                       {function f(x){return 1 + f(x) | 0}return f(0)}])}]),
       _l9_],
     _l$_=
      [0,
       _fY_
        (cst_NotFound_Not_found,
         [246,
          function(_ajU_)
           {return _f4_
                    (NotFound,
                     [246,
                      function(_ajV_)
                       {var _ajW_=0;
                        function _ajX_(param){return 1}
                        return caml_call2(List[28],_ajX_,_ajW_)}])}]),
       _l__],
     _ma_=
      [0,
       _fY_
        (cst_Failure_Failure,
         [246,
          function(_ajS_)
           {return _f4_
                    ([0,Failure,cst_foo$4],
                     [246,
                      function(_ajT_){return caml_call1(Pervasives[2],cst_foo$3)}])}]),
       _l$_],
     _mb_=
      [0,
       _fY_
        (cst_InvalidArgument_Invalid_argument,
         [246,
          function(_ajQ_)
           {return _f4_
                    ([0,InvalidArgument,cst_List_nth],
                     [246,function(_ajR_){return caml_call2(List[4],0,-1)}])}]),
       _ma_],
     _md_=
      [0,
       _fY_
        (cst_AssertFailure_Assert_failure,
         [246,
          function(_ajP_){return _f4_([0,AssertFailure,_mc_],assert_failure)}]),
       _mb_],
     _mf_=
      [0,
       _fX_
        (cst_Aliases,
         [0,
          _fY_
           (cst_MatchFailure_Match_failure,
            [246,
             function(_ajO_){return _f4_([0,MatchFailure,_me_],match_failure)}]),
          _md_]),
       _l6_],
     _mh_=
      [0,
       _fY_
        (cst_invalid_argument,
         [246,
          function(_ajM_)
           {return _f4_
                    ([0,InvalidArgument,cst_Grmbl_baz_43],
                     [246,
                      function(_ajN_)
                       {return caml_call2(invalid_argument(_mg_),cst_baz,43)}])}]),
       _mf_],
     _mj_=
      [0,
       _fY_
        (cst_failure,
         [246,
          function(_ajK_)
           {return _f4_
                    ([0,Failure,cst_Foo_bar_42],
                     [246,
                      function(_ajL_)
                       {return caml_call2(failure(_mi_),cst_bar$0,42)}])}]),
       _mh_],
     _mk_=
      [0,
       _fY_
        (cst_raise_without_backtrace,
         [246,
          function(_ajI_)
           {return _f4_
                    (TestException,
                     [246,
                      function(_ajJ_)
                       {return raise_without_backtrace(TestException)}])}]),
       _mj_],
     _ml_=
      [0,
       _fY_
        (cst_raise,
         [246,
          function(_ajG_)
           {return _f4_
                    (TestException,
                     [246,function(_ajH_){return raise(TestException)}])}]),
       _mk_],
     _mm_=[0,caml_call1(_km_([0,_y_]),[0,_l5_])[1],_ml_],
     _mn_=
      _fX_
       (cst_Exception,
        [0,
         caml_call1(_lx_([0,_v_,_w_,Equate[1][3],_y_]),[0,_l3_,_l4_,_l5_])[1],
         _mm_]);
    function _mo_(M)
     {var
       _aiY_=M[4],
       _ai5_=M[20],
       _aiX_=M[3],
       _aiZ_=M[14],
       _ai0_=M[15],
       _ai1_=M[18],
       _ai2_=M[19],
       _ai3_=M[16],
       _ai4_=M[17];
      function try_of_string(s)
       {return or_none([246,function(_ajF_){return caml_call1(_ai5_,s)}])}
      var _ai6_=M[21];
      function repr(n)
       {var _ajD_=M[2],_ajE_=caml_call1(_ai6_,n);
        return caml_call2(_n_(_mp_),_ajE_,_ajD_)}
      var
       _ai__=M[5],
       _ai$_=M[6],
       _aja_=M[7],
       _ajb_=M[8],
       _ajc_=M[9],
       _ajd_=M[10],
       _ai7_=M[13],
       _ai8_=M[11],
       _ai9_=M[12],
       _aje_=M[22];
      function _ajf_(_ajB_,_ajC_){return _h_(_aje_,_ajB_,_ajC_)}
      var _ajg_=M[23];
      function _aiS_(x,y){var match=_ajf_(x,y);return 0 === match?1:0}
      function _aiT_(x,y){var match=_ajf_(x,y);return 2 <= match?0:1}
      function _aiU_(x,y){var match=_ajf_(x,y);return 2 <= match?1:0}
      function _aiV_(x,y){var match=_ajf_(x,y);return 0 === match?0:1}
      var
       _ajh_=_ia_([0,_ajf_]),
       _aji_=_ajh_[1],
       _ajj_=_ajh_[2],
       _ajk_=_ajh_[3],
       _ajl_=_gP_([0,_ajg_])[1];
      function _aiW_(x){return caml_call2(_ajb_,x,x)}
      var
       _ajm_=
        _kv_
          ([0,
            _aiY_,
            _aiW_,
            _ajb_,
            function(param,_ajz_,n)
             {var _ajA_=M[1];
              return caml_call2(invalid_argument(_mq_),_ajA_,n)}])
         [1],
       _ajn_=_h3_([0,_aiS_,_aiT_,_aiU_,_aiV_]),
       _ajo_=_ajn_[1],
       _ajp_=_ajn_[2],
       _ajq_=_hM_([0,_aiS_,_aiT_,_aiU_,_aiV_]),
       _ajr_=_ajq_[1],
       _ajs_=_ajq_[2],
       _ajt_=_ajq_[3],
       _aju_=_ajq_[4],
       _ajv_=_gO_([0,_ajg_,_ajl_]),
       _ajw_=_ajv_[1],
       _ajx_=_ajv_[2],
       _ajy_=_ku_([0,_ai__,_ai$_,_aja_,_ajb_,_ajc_,_ajm_]);
      return [0,
              [0,
               _ajw_,
               _ajx_,
               _ajy_[1],
               _ajy_[2],
               _ajy_[3],
               _ajy_[4],
               _ajy_[5],
               _ajy_[6],
               _ajy_[7],
               _ajr_,
               _ajs_,
               _ajt_,
               _aju_,
               _ajd_],
              _ai6_,
              _ajg_,
              _ajl_,
              try_of_string,
              _ai5_,
              repr,
              _aiX_,
              _aiY_,
              _ai__,
              _ai$_,
              _aja_,
              _ajb_,
              _ajc_,
              _aiW_,
              _ajm_,
              _ai3_,
              _ai1_,
              _ajf_,
              _aiS_,
              _aiT_,
              _aiU_,
              _aiV_,
              _ajo_,
              _ajp_,
              _aji_,
              _ajj_,
              _ajk_,
              _ai7_,
              _ajd_,
              _ai4_,
              _ai2_,
              _ai8_,
              _ai9_,
              _ai0_,
              _aiZ_]}
    var
     _mr_=Int32[1],
     _ms_=Int32[2],
     _mt_=Int32[4],
     _mu_=Int32[5],
     _mv_=Int32[6],
     _mw_=Int32[7],
     _mx_=Int32[8],
     _my_=Int32[10],
     _mz_=Int32[11],
     _mA_=Equate[1][1],
     _mB_=caml_int_of_string;
    function _mC_(_aiR_){return _aiR_}
    function _mD_(_aiQ_){return _aiQ_ | 0}
    function _mE_(_aiP_){return _aiP_}
    function _mF_(_aiO_){return _aiO_}
    var _mG_=caml_mod,_mH_=caml_div;
    function _mI_(_aiN_,_aiM_){return caml_mul(_aiN_,_aiM_)}
    function _mJ_(_aiL_,_aiK_){return _aiL_ - _aiK_ | 0}
    function _mK_(_aiJ_,_aiI_){return _aiJ_ + _aiI_ | 0}
    var
     include=
      _mo_
       ([0,
         cst_Int32,
         cst_l,
         _mr_,
         _ms_,
         function(_aiH_){return - _aiH_ | 0},
         _mK_,
         _mJ_,
         _mI_,
         _mH_,
         _mG_,
         _mt_,
         _mu_,
         _mv_,
         _mw_,
         _mx_,
         _mF_,
         _mE_,
         _mD_,
         _mC_,
         _mB_,
         _my_,
         _mz_,
         _mA_]),
     _mZ_=include[16],
     _mL_=include[2],
     _mM_=include[3],
     _mN_=include[4],
     _mO_=include[5],
     _mP_=include[6],
     _mQ_=include[7],
     _mR_=include[8],
     _mS_=include[9],
     _mT_=include[10],
     _mU_=include[11],
     _mV_=include[12],
     _mW_=include[13],
     _mX_=include[14],
     _mY_=include[15],
     _m0_=include[17],
     _m1_=include[18],
     _m2_=include[19],
     _m3_=include[20],
     _m4_=include[21],
     _m5_=include[22],
     _m6_=include[23],
     _m7_=include[24],
     _m8_=include[25],
     _m9_=include[26],
     _m__=include[27],
     _m$_=include[28],
     _na_=include[29],
     _nb_=include[30],
     _nc_=include[31],
     _nd_=include[32],
     _ne_=include[33],
     _nf_=include[34],
     _ng_=include[35],
     _nh_=include[36],
     _nu_=0,
     _nv_=
      [0,
       _fY_
        (cst_exponentiate_2l_4,
         [246,
          function(_aiF_)
           {return _f4_
                    ([0,
                      InvalidArgument,
                      cst_Int32_exponentiate_Negative_exponent_4],
                     [246,function(_aiG_){return caml_call2(_mZ_,2,-4)}])}]),
       _nu_],
     _nw_=
      [0,
       caml_call1
         (_ko_([0,include[5],include[6],include[3],include[7]]),[0,_ni_])
        [1],
       _nv_],
     _nx_=
      _fX_
       (cst_Int32$0,
        [0,
         caml_call1
           (_lX_
             ([0,
               include[1],
               include[2],
               include[3],
               include[4],
               include[5],
               include[6],
               include[7],
               include[8],
               include[9],
               include[10],
               include[11],
               include[12],
               include[13],
               include[14],
               include[15],
               include[16],
               include[17],
               include[18],
               include[19],
               include[20],
               include[21],
               include[22],
               include[23],
               include[24],
               include[25],
               include[26],
               include[27],
               include[28],
               include[29],
               include[30],
               include[31],
               include[32],
               include[33],
               include[34]]),
            [0,_nk_,_nm_,_ni_,_nj_,_no_,_np_,_nq_,_nr_,_ns_,_nn_,_nl_,_nt_])
          [1],
         _nw_]),
     include$0=
      _mo_
       ([0,
         cst_Int64,
         cst_L,
         Int64[1],
         Int64[2],
         runtime.caml_int64_neg,
         runtime.caml_int64_add,
         runtime.caml_int64_sub,
         runtime.caml_int64_mul,
         runtime.caml_int64_div,
         runtime.caml_int64_mod,
         Int64[4],
         Int64[5],
         Int64[6],
         Int64[7],
         Int64[8],
         runtime.caml_int64_of_int32,
         runtime.caml_int64_to_int32,
         runtime.caml_int64_of_float,
         runtime.caml_int64_to_float,
         runtime.caml_int64_of_string,
         Int64[10],
         Int64[11],
         Equate[1][1]]),
     _nM_=include$0[16],
     _nO_=include$0[18],
     _ny_=include$0[2],
     _nz_=include$0[3],
     _nA_=include$0[4],
     _nB_=include$0[5],
     _nC_=include$0[6],
     _nD_=include$0[7],
     _nE_=include$0[8],
     _nF_=include$0[9],
     _nG_=include$0[10],
     _nH_=include$0[11],
     _nI_=include$0[12],
     _nJ_=include$0[13],
     _nK_=include$0[14],
     _nL_=include$0[15],
     _nN_=include$0[17],
     _nP_=include$0[19],
     _nQ_=include$0[20],
     _nR_=include$0[21],
     _nS_=include$0[22],
     _nT_=include$0[23],
     _nU_=include$0[24],
     _nV_=include$0[25],
     _nW_=include$0[26],
     _nX_=include$0[27],
     _nY_=include$0[28],
     _nZ_=include$0[29],
     _n0_=include$0[30],
     _n1_=include$0[31],
     _n2_=include$0[32],
     _n3_=include$0[33],
     _n4_=include$0[34],
     _n5_=include$0[35],
     _n6_=include$0[36],
     _oh_=0,
     _oj_=
      [0,
       _fY_
        (cst_exponentiate_2L_4,
         [246,
          function(_aiD_)
           {return _f4_
                    ([0,
                      InvalidArgument,
                      cst_Int64_exponentiate_Negative_exponent_4],
                     [246,function(_aiE_){return caml_call2(_nM_,_oi_,-4)}])}]),
       _oh_],
     _ok_=
      [0,
       caml_call1
         (_ko_([0,include$0[5],include$0[6],include$0[3],include$0[7]]),
          [0,_n7_])
        [1],
       _oj_],
     _ol_=
      _fX_
       (cst_Int64$0,
        [0,
         caml_call1
           (_lX_
             ([0,
               include$0[1],
               include$0[2],
               include$0[3],
               include$0[4],
               include$0[5],
               include$0[6],
               include$0[7],
               include$0[8],
               include$0[9],
               include$0[10],
               include$0[11],
               include$0[12],
               include$0[13],
               include$0[14],
               include$0[15],
               include$0[16],
               include$0[17],
               include$0[18],
               include$0[19],
               include$0[20],
               include$0[21],
               include$0[22],
               include$0[23],
               include$0[24],
               include$0[25],
               include$0[26],
               include$0[27],
               include$0[28],
               include$0[29],
               include$0[30],
               include$0[31],
               include$0[32],
               include$0[33],
               include$0[34]]),
            [0,_n9_,_n$_,_n7_,_n8_,_ob_,_oc_,_od_,_oe_,_of_,_oa_,_n__,_og_])
          [1],
         _ok_]),
     _om_=
      _kv_
        ([0,
          one$0,
          square$0,
          multiply$0,
          function(exponentiate,x,n)
           {return caml_call2(exponentiate,1 / x,- n | 0)}])
       [1],
     _on_=_h3_([0,less_than,less_or_equal,greater_than,greater_or_equal]),
     _oo_=_on_[1],
     _op_=_on_[2],
     _ov_=[0,_ou_,[0,_ot_,[0,_os_,[0,[0,_a0_,0],[0,[0,_a1_,0],0]]]]],
     _oy_=
      [0,
       _ox_,
       [0,
        _ow_,
        [0,
         [0,_a2_,_a0_],
         [0,[0,_a2_,_a1_],[0,[0,_a2_,1],[0,[0,_a2_,0],[0,[0,_a2_,_a2_],0]]]]]]],
     _oJ_=0,
     _oK_=0;
    function check(_aiB_,_aiC_){return _f6_(_bq_,_bw_,_aiB_,_aiC_)}
    var
     _oL_=0,
     _oM_=
      [0,
       _fY_(cst_NotANumber$0,[246,function(_aiA_){return check(4,_bp_(NaN))}]),
       _oL_],
     _oN_=
      [0,
       _fY_
        (cst_NotANumber$1,[246,function(_aiz_){return check(4,_bp_(_a2_))}]),
       _oM_],
     _oO_=
      [0,
       _fY_(cst_NotANumber$2,[246,function(_aiy_){return check(4,_bp_(NaN))}]),
       _oN_],
     _oP_=
      [0,
       _fY_(cst_Infinite$0,[246,function(_aix_){return check(3,_bp_(_a1_))}]),
       _oO_],
     _oQ_=
      [0,
       _fY_
        (cst_Infinite$1,
         [246,function(_aiw_){return check(3,_bp_(-Infinity))}]),
       _oP_],
     _oR_=
      [0,
       _fY_(cst_Infinite$2,[246,function(_aiv_){return check(3,_bp_(_a0_))}]),
       _oQ_],
     _oS_=
      [0,
       _fY_
        (cst_Infinite$3,[246,function(_aiu_){return check(3,_bp_(Infinity))}]),
       _oR_],
     _oT_=
      [0,
       _fY_(cst_Zero$0,[246,function(_ait_){return check(2,_bp_(-0))}]),
       _oS_],
     _oU_=
      [0,_fY_(cst_Zero$1,[246,function(_ais_){return check(2,_bp_(0))}]),_oT_],
     _oV_=
      [0,
       _fY_
        (cst_SubNormal$0,
         [246,function(_air_){return check(1,_bp_(1 / _aY_))}]),
       _oU_],
     _oW_=
      [0,
       _fX_
        (cst_of_float,
         [0,
          _fY_(cst_Normal$0,[246,function(_aiq_){return check(0,_bp_(1))}]),
          _oV_]),
       _oK_],
     _oX_=[0,caml_call1(_gG_([0,_bq_]),[0,_oF_])[1],_oW_],
     _oY_=
      [0,
       caml_call1(_g0_([0,_bw_,_bv_,[0,_bs_,_bt_],_bq_]),[0,_oG_,_oH_])[1],
       _oX_],
     _oZ_=
      [0,
       _fX_
        (cst_Class,
         [0,
          caml_call1
            (_iH_
              ([0,
                compare,
                less_than,
                less_or_equal,
                greater_than,
                greater_or_equal,
                between,
                between_or_equal,
                min,
                max,
                min_max,
                [0,_i_,_j_,_l_,_k_],
                _bq_,
                _bw_]),
             [0,_oI_,_oG_])
           [1],
          _oY_]),
       _oJ_];
    function make$0(x,expected)
     {var _aio_=[246,function(_aip_){return _gf_(expected,Math.ceil(x))}];
      return caml_call2(_f0_(_o0_),x,_aio_)}
    var
     _o1_=[0,make$0(1,1),0],
     _o2_=[0,make$0(0.99,1),_o1_],
     _o3_=[0,make$0(0.01,1),_o2_],
     _o4_=[0,make$0(0,0),_o3_],
     _o5_=[0,make$0(-0.1,0),_o4_],
     _o6_=[0,make$0(-0.99,0),_o5_],
     _o7_=[0,_fX_(cst_ceil,[0,make$0(-1,-1),_o6_]),_oZ_],
     _o8_=
      [0,
       caml_call1(_ko_([0,try_of_string$2,of_string$0,_bh_,_a6_]),[0,_or_])[1],
       _o7_],
     _o9_=
      _fX_
       (cst_Float,
        [0,
         caml_call1
           (_lU_
             ([0,
               [0,
                _a8_,
                _a9_,
                _a$_,
                _a__,
                _ba_,
                _bb_,
                _bc_,
                _bd_,
                _om_,
                _i_,
                _j_,
                _l_,
                _k_,
                _be_],
               _a5_,
               _bh_,
               _bg_,
               try_of_string$2,
               of_string$0,
               _a6_,
               zero$0,
               one$0,
               negate$0,
               add$0,
               substract$0,
               multiply$0,
               divide$0,
               square$0,
               _om_,
               of_int,
               _a3_,
               compare,
               less_than,
               less_or_equal,
               greater_than,
               greater_or_equal,
               _oo_,
               _op_,
               min,
               max,
               min_max,
               abs,
               modulo$0,
               to_int,
               _a4_]),
            [0,_oq_,_oy_,_or_,_oq_,_oA_,_oB_,_oC_,_oD_,_oE_,_oz_,_ov_])
          [1],
         _o8_]),
     _o__=Big_int[1],
     _o$_=Big_int[2],
     _pa_=Big_int[34],
     _pb_=Big_int[36];
    function of_float$0(x)
     {function of_small_float(x)
       {var _ain_=Big_int[39];
        return caml_call2(_c9_,caml_call2(_c9_,x,_nO_),_ain_)}
      var match=caml_frexp_float(x),exponent=match[2],significand=match[1];
      if(caml_lessequal(exponent,58))return of_small_float(x);
      var _aim_=of_small_float(caml_ldexp_float(significand,58));
      return caml_call2(Big_int[47],_aim_,exponent - 58 | 0)}
    var _pc_=Big_int[43],_pd_=Big_int[33];
    function try_of_string$3(s)
     {return or_none([246,function(_ail_){return caml_call1(_pd_,s)}])}
    var
     _pe_=Big_int[32],
     _pf_=Big_int[4],
     _pg_=Big_int[3],
     _ph_=Big_int[5],
     _pi_=Big_int[8],
     _pj_=Big_int[10],
     _pk_=Big_int[15],
     _pl_=Big_int[16],
     _pm_=Big_int[12];
    function exponentiate(x,n)
     {return caml_lessthan(n,0)
              ?caml_call1(invalid_argument(_pn_),n)
              :caml_call2(Big_int[19],x,n)}
    var _po_=Big_int[9],_pp_=Big_int[6],_pq_=Big_int[24],_pr_=Big_int[23];
    function compare$1(_aij_,_aik_){return _h_(_pr_,_aij_,_aik_)}
    var
     _ps_=Big_int[27],
     _pt_=Big_int[25],
     _pu_=Big_int[28],
     _pv_=Big_int[26],
     _pw_=_h3_([0,_ps_,_pt_,_pu_,_pv_]),
     _px_=_pw_[1],
     _py_=_pw_[2],
     _pz_=_ia_([0,compare$1]),
     _pA_=_pz_[1],
     _pB_=_pz_[2],
     _pC_=_pz_[3],
     _pD_=_gP_([0,_pq_])[1],
     _pE_=_hM_([0,_ps_,_pt_,_pu_,_pv_]),
     _pF_=_pE_[1],
     _pG_=_pE_[2],
     _pH_=_pE_[3],
     _pI_=_pE_[4],
     _pJ_=_gO_([0,_pq_,_pD_]),
     _pK_=_pJ_[1],
     _pL_=_pJ_[2],
     _pM_=_ku_([0,_pg_,_ph_,_pi_,_pj_,_pk_,exponentiate]),
     _pN_=_pM_[1],
     _pO_=_pM_[2],
     _pP_=_pM_[3],
     _pQ_=_pM_[4],
     _pR_=_pM_[5],
     _pS_=_pM_[6],
     _pT_=_pM_[7],
     _pU_=Big_int[34],
     _pV_=Big_int[33],
     _pW_=caml_call1(_pU_,-5),
     _pX_=[0,[0,caml_call1(_pU_,-6),_pW_],0],
     _pY_=caml_call1(_pU_,5),
     succ$0=[0,[0,caml_call1(_pU_,4),_pY_],_pX_],
     _pZ_=[0,[0,caml_call1(_pU_,-10),0],0],
     equal$2=[0,[0,caml_call1(_pU_,4),0],_pZ_],
     _p0_=[0,_o__,[0,_o$_,[0,caml_call1(_pU_,5),0]]],
     _p1_=[0,caml_call1(_pU_,-1),_p0_],
     ordered=[0,[0,caml_call1(_pU_,-3),_p1_],0],
     _p2_=caml_call1(_pV_,cst_10000000000000000000000000000000000000000),
     _p3_=[0,[0,caml_call1(_pU_,10),40,_p2_],0],
     _p4_=caml_call1(_pV_,cst_10000000000),
     exponentiate$0=[0,[0,caml_call1(_pU_,10),10,_p4_],_p3_],
     _p5_=caml_call1(_pU_,5),
     _p6_=caml_call1(_pU_,9),
     divide$1=[0,[0,caml_call1(_pU_,45),_p6_,_p5_],0],
     _p7_=caml_call1(_pU_,21),
     _p8_=caml_call1(_pU_,3),
     multiply$1=[0,[0,caml_call1(_pU_,7),_p8_,_p7_],0],
     _p9_=caml_call1(_pU_,12),
     negate$1=[0,[0,caml_call1(_pU_,-12),_p9_],0],
     _p__=caml_call1(_pU_,127),
     _p$_=caml_call1(_pU_,27),
     add_substract=[0,[0,caml_call1(_pU_,100),_p$_,_p__],0],
     _qa_=
      [0,
       [0,
        caml_call1(_pV_,cst_10000000000000000000000000000000000000000$1),
        cst_10000000000000000000000000000000000000000$0],
       0],
     to_string$0=[0,[0,caml_call1(_pU_,10),cst_10],_qa_],
     _qb_=caml_call1(_pU_,11),
     different$0=[0,[0,caml_call1(_pU_,10),_qb_],0],
     _qc_=[0,[0,cst_100000,caml_call1(_pU_,1e5)],0],
     _qd_=0;
    function check$0(expected,x)
     {var _aii_=of_float$0(x);
      return _f6_(_pe_,_pq_,caml_call1(_pd_,expected),_aii_)}
    function make_2p(p,expected)
     {var _aig_=[246,function(_aih_){return check$0(expected,Math.pow(2,p))}];
      return caml_call2(_f0_(_qe_),p,_aig_)}
    function make_2pm2q(p,q,expected)
     {var
       _aie_=
        [246,
         function(_aif_)
          {return check$0(expected,Math.pow(2,p) - Math.pow(2,q))}];
      return caml_call3(_f0_(_qf_),p,q,_aie_)}
    var
     _qg_=
      [0,
       make_2p
        (1023,
         cst_89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608),
       0],
     _qh_=
      [0,
       make_2p
        (222,
         cst_6739986666787659948666753771754907668409286105635143120275902562304),
       _qg_],
     _qi_=
      [0,
       make_2p
        (221,
         cst_3369993333393829974333376885877453834204643052817571560137951281152),
       _qh_],
     _qj_=
      [0,
       make_2p
        (220,
         cst_1684996666696914987166688442938726917102321526408785780068975640576),
       _qi_],
     _qk_=
      [0,
       make_2p
        (219,
         cst_842498333348457493583344221469363458551160763204392890034487820288),
       _qj_],
     _ql_=
      [0,
       make_2p
        (218,
         cst_421249166674228746791672110734681729275580381602196445017243910144),
       _qk_],
     _qm_=
      [0,
       make_2p
        (217,
         cst_210624583337114373395836055367340864637790190801098222508621955072),
       _ql_],
     _qn_=
      [0,
       make_2p
        (216,
         cst_105312291668557186697918027683670432318895095400549111254310977536),
       _qm_],
     _qo_=
      [0,
       make_2p
        (215,
         cst_52656145834278593348959013841835216159447547700274555627155488768),
       _qn_],
     _qp_=
      [0,
       make_2p
        (214,
         cst_26328072917139296674479506920917608079723773850137277813577744384),
       _qo_],
     _qq_=
      [0,
       make_2p
        (213,
         cst_13164036458569648337239753460458804039861886925068638906788872192),
       _qp_],
     _qr_=
      [0,
       make_2p
        (212,
         cst_6582018229284824168619876730229402019930943462534319453394436096),
       _qq_],
     _qs_=
      [0,
       make_2p
        (211,
         cst_3291009114642412084309938365114701009965471731267159726697218048),
       _qr_],
     _qt_=
      [0,
       make_2p
        (210,
         cst_1645504557321206042154969182557350504982735865633579863348609024),
       _qs_],
     _qu_=
      [0,
       make_2p
        (209,
         cst_822752278660603021077484591278675252491367932816789931674304512),
       _qt_],
     _qv_=
      [0,
       make_2p
        (208,
         cst_411376139330301510538742295639337626245683966408394965837152256),
       _qu_],
     _qw_=
      [0,
       make_2p
        (207,
         cst_205688069665150755269371147819668813122841983204197482918576128),
       _qv_],
     _qx_=
      [0,
       make_2p
        (206,
         cst_102844034832575377634685573909834406561420991602098741459288064),
       _qw_],
     _qy_=
      [0,
       make_2p
        (205,
         cst_51422017416287688817342786954917203280710495801049370729644032),
       _qx_],
     _qz_=
      [0,
       make_2p
        (204,
         cst_25711008708143844408671393477458601640355247900524685364822016),
       _qy_],
     _qA_=
      [0,
       make_2p
        (203,
         cst_12855504354071922204335696738729300820177623950262342682411008),
       _qz_],
     _qB_=
      [0,
       make_2p
        (202,
         cst_6427752177035961102167848369364650410088811975131171341205504),
       _qA_],
     _qC_=
      [0,
       make_2p
        (201,
         cst_3213876088517980551083924184682325205044405987565585670602752),
       _qB_],
     _qD_=
      [0,
       make_2p
        (200,
         cst_1606938044258990275541962092341162602522202993782792835301376),
       _qC_],
     _qE_=
      [0,
       make_2p
        (199,cst_803469022129495137770981046170581301261101496891396417650688),
       _qD_],
     _qF_=
      [0,
       make_2p
        (198,cst_401734511064747568885490523085290650630550748445698208825344),
       _qE_],
     _qG_=
      [0,
       make_2p
        (197,cst_200867255532373784442745261542645325315275374222849104412672),
       _qF_],
     _qH_=
      [0,
       make_2p
        (196,cst_100433627766186892221372630771322662657637687111424552206336),
       _qG_],
     _qI_=
      [0,
       make_2p
        (195,cst_50216813883093446110686315385661331328818843555712276103168),
       _qH_],
     _qJ_=
      [0,
       make_2p
        (194,cst_25108406941546723055343157692830665664409421777856138051584),
       _qI_],
     _qK_=
      [0,
       make_2p
        (193,cst_12554203470773361527671578846415332832204710888928069025792),
       _qJ_],
     _qL_=
      [0,
       make_2p
        (192,cst_6277101735386680763835789423207666416102355444464034512896),
       _qK_],
     _qM_=
      [0,
       make_2p
        (191,cst_3138550867693340381917894711603833208051177722232017256448),
       _qL_],
     _qN_=
      [0,
       make_2p
        (190,cst_1569275433846670190958947355801916604025588861116008628224),
       _qM_],
     _qO_=
      [0,
       make_2p
        (189,cst_784637716923335095479473677900958302012794430558004314112),
       _qN_],
     _qP_=
      [0,
       make_2p
        (188,cst_392318858461667547739736838950479151006397215279002157056),
       _qO_],
     _qQ_=
      [0,
       make_2p
        (187,cst_196159429230833773869868419475239575503198607639501078528),
       _qP_],
     _qR_=
      [0,
       make_2p
        (186,cst_98079714615416886934934209737619787751599303819750539264),
       _qQ_],
     _qS_=
      [0,
       make_2p
        (185,cst_49039857307708443467467104868809893875799651909875269632),
       _qR_],
     _qT_=
      [0,
       make_2p
        (184,cst_24519928653854221733733552434404946937899825954937634816),
       _qS_],
     _qU_=
      [0,
       make_2p
        (183,cst_12259964326927110866866776217202473468949912977468817408),
       _qT_],
     _qV_=
      [0,
       make_2p
        (182,cst_6129982163463555433433388108601236734474956488734408704),
       _qU_],
     _qW_=
      [0,
       make_2p
        (181,cst_3064991081731777716716694054300618367237478244367204352),
       _qV_],
     _qX_=
      [0,
       make_2p
        (180,cst_1532495540865888858358347027150309183618739122183602176),
       _qW_],
     _qY_=
      [0,
       make_2p(179,cst_766247770432944429179173513575154591809369561091801088),
       _qX_],
     _qZ_=
      [0,
       make_2p(178,cst_383123885216472214589586756787577295904684780545900544),
       _qY_],
     _q0_=
      [0,
       make_2p(177,cst_191561942608236107294793378393788647952342390272950272),
       _qZ_],
     _q1_=
      [0,
       make_2p(176,cst_95780971304118053647396689196894323976171195136475136),
       _q0_],
     _q2_=
      [0,
       make_2p(175,cst_47890485652059026823698344598447161988085597568237568),
       _q1_],
     _q3_=
      [0,
       make_2p(174,cst_23945242826029513411849172299223580994042798784118784),
       _q2_],
     _q4_=
      [0,
       make_2p(173,cst_11972621413014756705924586149611790497021399392059392),
       _q3_],
     _q5_=
      [0,
       make_2p(172,cst_5986310706507378352962293074805895248510699696029696),
       _q4_],
     _q6_=
      [0,
       make_2p(171,cst_2993155353253689176481146537402947624255349848014848),
       _q5_],
     _q7_=
      [0,
       make_2p(170,cst_1496577676626844588240573268701473812127674924007424),
       _q6_],
     _q8_=
      [0,
       make_2p(169,cst_748288838313422294120286634350736906063837462003712),
       _q7_],
     _q9_=
      [0,
       make_2p(168,cst_374144419156711147060143317175368453031918731001856),
       _q8_],
     _q__=
      [0,
       make_2p(167,cst_187072209578355573530071658587684226515959365500928),
       _q9_],
     _q$_=
      [0,
       make_2p(166,cst_93536104789177786765035829293842113257979682750464),
       _q__],
     _ra_=
      [0,
       make_2p(165,cst_46768052394588893382517914646921056628989841375232),
       _q$_],
     _rb_=
      [0,
       make_2p(164,cst_23384026197294446691258957323460528314494920687616),
       _ra_],
     _rc_=
      [0,
       make_2p(163,cst_11692013098647223345629478661730264157247460343808),
       _rb_],
     _rd_=
      [0,
       make_2p(162,cst_5846006549323611672814739330865132078623730171904),
       _rc_],
     _re_=
      [0,
       make_2p(161,cst_2923003274661805836407369665432566039311865085952),
       _rd_],
     _rf_=
      [0,
       make_2p(160,cst_1461501637330902918203684832716283019655932542976),
       _re_],
     _rg_=
      [0,
       make_2p(159,cst_730750818665451459101842416358141509827966271488),
       _rf_],
     _rh_=
      [0,
       make_2p(158,cst_365375409332725729550921208179070754913983135744),
       _rg_],
     _ri_=
      [0,
       make_2p(157,cst_182687704666362864775460604089535377456991567872),
       _rh_],
     _rj_=
      [0,
       make_2p(156,cst_91343852333181432387730302044767688728495783936),
       _ri_],
     _rk_=
      [0,
       make_2p(155,cst_45671926166590716193865151022383844364247891968),
       _rj_],
     _rl_=
      [0,
       make_2p(154,cst_22835963083295358096932575511191922182123945984),
       _rk_],
     _rm_=
      [0,
       make_2p(153,cst_11417981541647679048466287755595961091061972992),
       _rl_],
     _rn_=
      [0,make_2p(152,cst_5708990770823839524233143877797980545530986496),_rm_],
     _ro_=
      [0,make_2p(151,cst_2854495385411919762116571938898990272765493248),_rn_],
     _rp_=
      [0,make_2p(150,cst_1427247692705959881058285969449495136382746624),_ro_],
     _rq_=
      [0,make_2p(149,cst_713623846352979940529142984724747568191373312),_rp_],
     _rr_=
      [0,make_2p(148,cst_356811923176489970264571492362373784095686656),_rq_],
     _rs_=
      [0,make_2p(147,cst_178405961588244985132285746181186892047843328),_rr_],
     _rt_=
      [0,make_2p(146,cst_89202980794122492566142873090593446023921664),_rs_],
     _ru_=
      [0,make_2p(145,cst_44601490397061246283071436545296723011960832),_rt_],
     _rv_=
      [0,make_2p(144,cst_22300745198530623141535718272648361505980416),_ru_],
     _rw_=
      [0,make_2p(143,cst_11150372599265311570767859136324180752990208),_rv_],
     _rx_=
      [0,make_2p(142,cst_5575186299632655785383929568162090376495104),_rw_],
     _ry_=
      [0,make_2p(141,cst_2787593149816327892691964784081045188247552),_rx_],
     _rz_=
      [0,make_2p(140,cst_1393796574908163946345982392040522594123776),_ry_],
     _rA_=[0,make_2p(139,cst_696898287454081973172991196020261297061888),_rz_],
     _rB_=[0,make_2p(138,cst_348449143727040986586495598010130648530944),_rA_],
     _rC_=[0,make_2p(137,cst_174224571863520493293247799005065324265472),_rB_],
     _rD_=[0,make_2p(136,cst_87112285931760246646623899502532662132736),_rC_],
     _rE_=[0,make_2p(135,cst_43556142965880123323311949751266331066368),_rD_],
     _rF_=[0,make_2p(134,cst_21778071482940061661655974875633165533184),_rE_],
     _rG_=[0,make_2p(133,cst_10889035741470030830827987437816582766592),_rF_],
     _rH_=[0,make_2p(132,cst_5444517870735015415413993718908291383296),_rG_],
     _rI_=[0,make_2p(131,cst_2722258935367507707706996859454145691648),_rH_],
     _rJ_=[0,make_2p(130,cst_1361129467683753853853498429727072845824),_rI_],
     _rK_=[0,make_2p(129,cst_680564733841876926926749214863536422912),_rJ_],
     _rL_=[0,make_2p(128,cst_340282366920938463463374607431768211456),_rK_],
     _rM_=[0,make_2p(127,cst_170141183460469231731687303715884105728),_rL_],
     _rN_=[0,make_2p(126,cst_85070591730234615865843651857942052864),_rM_],
     _rO_=[0,make_2p(125,cst_42535295865117307932921825928971026432),_rN_],
     _rP_=[0,make_2p(124,cst_21267647932558653966460912964485513216),_rO_],
     _rQ_=[0,make_2p(123,cst_10633823966279326983230456482242756608),_rP_],
     _rR_=[0,make_2p(122,cst_5316911983139663491615228241121378304),_rQ_],
     _rS_=[0,make_2p(121,cst_2658455991569831745807614120560689152),_rR_],
     _rT_=[0,make_2p(120,cst_1329227995784915872903807060280344576),_rS_],
     _rU_=[0,make_2p(119,cst_664613997892457936451903530140172288),_rT_],
     _rV_=[0,make_2p(118,cst_332306998946228968225951765070086144),_rU_],
     _rW_=[0,make_2p(117,cst_166153499473114484112975882535043072),_rV_],
     _rX_=[0,make_2p(116,cst_83076749736557242056487941267521536),_rW_],
     _rY_=[0,make_2p(115,cst_41538374868278621028243970633760768),_rX_],
     _rZ_=[0,make_2p(114,cst_20769187434139310514121985316880384),_rY_],
     _r0_=[0,make_2p(113,cst_10384593717069655257060992658440192),_rZ_],
     _r1_=[0,make_2p(112,cst_5192296858534827628530496329220096),_r0_],
     _r2_=[0,make_2p(111,cst_2596148429267413814265248164610048),_r1_],
     _r3_=[0,make_2p(110,cst_1298074214633706907132624082305024),_r2_],
     _r4_=[0,make_2p(109,cst_649037107316853453566312041152512),_r3_],
     _r5_=[0,make_2p(108,cst_324518553658426726783156020576256),_r4_],
     _r6_=[0,make_2p(107,cst_162259276829213363391578010288128),_r5_],
     _r7_=[0,make_2p(106,cst_81129638414606681695789005144064),_r6_],
     _r8_=[0,make_2p(105,cst_40564819207303340847894502572032),_r7_],
     _r9_=[0,make_2p(104,cst_20282409603651670423947251286016),_r8_],
     _r__=[0,make_2p(103,cst_10141204801825835211973625643008),_r9_],
     _r$_=[0,make_2p(102,cst_5070602400912917605986812821504),_r__],
     _sa_=[0,make_2p(101,cst_2535301200456458802993406410752),_r$_],
     _sb_=[0,make_2p(100,cst_1267650600228229401496703205376),_sa_],
     _sc_=[0,make_2p(99,cst_633825300114114700748351602688),_sb_],
     _sd_=[0,make_2p(98,cst_316912650057057350374175801344),_sc_],
     _se_=[0,make_2p(97,cst_158456325028528675187087900672),_sd_],
     _sf_=[0,make_2p(96,cst_79228162514264337593543950336),_se_],
     _sg_=[0,make_2p(95,cst_39614081257132168796771975168),_sf_],
     _sh_=[0,make_2p(94,cst_19807040628566084398385987584),_sg_],
     _si_=[0,make_2p(93,cst_9903520314283042199192993792),_sh_],
     _sj_=[0,make_2p(92,cst_4951760157141521099596496896),_si_],
     _sk_=[0,make_2p(91,cst_2475880078570760549798248448),_sj_],
     _sl_=[0,make_2p(90,cst_1237940039285380274899124224),_sk_],
     _sm_=[0,make_2p(89,cst_618970019642690137449562112),_sl_],
     _sn_=[0,make_2p(88,cst_309485009821345068724781056),_sm_],
     _so_=[0,make_2p(87,cst_154742504910672534362390528),_sn_],
     _sp_=[0,make_2p(86,cst_77371252455336267181195264),_so_],
     _sq_=[0,make_2p(85,cst_38685626227668133590597632),_sp_],
     _sr_=[0,make_2p(84,cst_19342813113834066795298816),_sq_],
     _ss_=[0,make_2p(83,cst_9671406556917033397649408),_sr_],
     _st_=[0,make_2p(82,cst_4835703278458516698824704),_ss_],
     _su_=[0,make_2p(81,cst_2417851639229258349412352),_st_],
     _sv_=[0,make_2p(80,cst_1208925819614629174706176),_su_],
     _sw_=[0,make_2p(79,cst_604462909807314587353088),_sv_],
     _sx_=[0,make_2p(78,cst_302231454903657293676544),_sw_],
     _sy_=[0,make_2p(77,cst_151115727451828646838272),_sx_],
     _sz_=[0,make_2p(76,cst_75557863725914323419136),_sy_],
     _sA_=[0,make_2p(75,cst_37778931862957161709568),_sz_],
     _sB_=[0,make_2p(74,cst_18889465931478580854784),_sA_],
     _sC_=[0,make_2p(73,cst_9444732965739290427392),_sB_],
     _sD_=[0,make_2p(72,cst_4722366482869645213696),_sC_],
     _sE_=[0,make_2p(71,cst_2361183241434822606848),_sD_],
     _sF_=[0,make_2p(70,cst_1180591620717411303424),_sE_],
     _sG_=[0,make_2p(69,cst_590295810358705651712),_sF_],
     _sH_=[0,make_2p(68,cst_295147905179352825856),_sG_],
     _sI_=[0,make_2p(67,cst_147573952589676412928),_sH_],
     _sJ_=[0,make_2p(66,cst_73786976294838206464),_sI_],
     _sK_=[0,make_2p(65,cst_36893488147419103232),_sJ_],
     _sL_=[0,make_2p(64,cst_18446744073709551616),_sK_],
     _sM_=[0,make_2p(63,cst_9223372036854775808),_sL_],
     _sN_=[0,make_2p(62,cst_4611686018427387904),_sM_],
     _sO_=[0,make_2p(61,cst_2305843009213693952),_sN_],
     _sP_=[0,make_2p(60,cst_1152921504606846976),_sO_],
     _sQ_=[0,make_2p(59,cst_576460752303423488),_sP_],
     _sR_=[0,make_2p(58,cst_288230376151711744),_sQ_],
     _sS_=[0,make_2p(57,cst_144115188075855872),_sR_],
     _sT_=[0,make_2p(56,cst_72057594037927936),_sS_],
     _sU_=[0,make_2p(55,cst_36028797018963968),_sT_],
     _sV_=[0,make_2p(54,cst_18014398509481984),_sU_],
     _sW_=[0,make_2p(53,cst_9007199254740992),_sV_],
     _sX_=[0,make_2p(52,cst_4503599627370496),_sW_],
     _sY_=[0,make_2p(51,cst_2251799813685248),_sX_],
     _sZ_=[0,make_2p(50,cst_1125899906842624),_sY_],
     _s0_=[0,make_2p(49,cst_562949953421312),_sZ_],
     _s1_=[0,make_2p(48,cst_281474976710656),_s0_],
     _s2_=[0,make_2p(47,cst_140737488355328),_s1_],
     _s3_=[0,make_2p(46,cst_70368744177664),_s2_],
     _s4_=[0,make_2p(45,cst_35184372088832),_s3_],
     _s5_=[0,make_2p(44,cst_17592186044416),_s4_],
     _s6_=[0,make_2p(43,cst_8796093022208),_s5_],
     _s7_=[0,make_2p(42,cst_4398046511104),_s6_],
     _s8_=[0,make_2p(41,cst_2199023255552),_s7_],
     _s9_=[0,make_2p(40,cst_1099511627776),_s8_],
     _s__=[0,make_2p(39,cst_549755813888),_s9_],
     _s$_=[0,make_2p(38,cst_274877906944),_s__],
     _ta_=[0,make_2p(37,cst_137438953472),_s$_],
     _tb_=[0,make_2p(36,cst_68719476736),_ta_],
     _tc_=[0,make_2p(35,cst_34359738368),_tb_],
     _td_=[0,make_2p(34,cst_17179869184),_tc_],
     _te_=[0,make_2p(33,cst_8589934592),_td_],
     _tf_=[0,make_2p(32,cst_4294967296),_te_],
     _tg_=[0,make_2p(31,cst_2147483648),_tf_],
     _th_=[0,make_2p(30,cst_1073741824),_tg_],
     _ti_=[0,make_2p(29,cst_536870912),_th_],
     _tj_=[0,make_2p(28,cst_268435456),_ti_],
     _tk_=[0,make_2p(27,cst_134217728),_tj_],
     _tl_=[0,make_2p(26,cst_67108864),_tk_],
     _tm_=[0,make_2p(25,cst_33554432),_tl_],
     _tn_=[0,make_2p(24,cst_16777216),_tm_],
     _to_=[0,make_2p(23,cst_8388608),_tn_],
     _tp_=[0,make_2p(22,cst_4194304),_to_],
     _tq_=[0,make_2p(21,cst_2097152),_tp_],
     _tr_=[0,make_2p(20,cst_1048576),_tq_],
     _ts_=[0,make_2p(19,cst_524288),_tr_],
     _tt_=[0,make_2p(18,cst_262144),_ts_],
     _tu_=[0,make_2p(17,cst_131072),_tt_],
     _tv_=[0,make_2p(16,cst_65536),_tu_],
     _tw_=[0,make_2p(15,cst_32768),_tv_],
     _tx_=[0,make_2p(14,cst_16384),_tw_],
     _ty_=[0,make_2p(13,cst_8192),_tx_],
     _tz_=[0,make_2p(12,cst_4096),_ty_],
     _tA_=[0,make_2p(11,cst_2048),_tz_],
     _tB_=[0,make_2p(10,cst_1024),_tA_],
     _tC_=[0,make_2p(9,cst_512),_tB_],
     _tD_=[0,make_2p(8,cst_256),_tC_],
     _tE_=[0,make_2p(7,cst_128),_tD_],
     _tF_=[0,make_2p(6,cst_64),_tE_],
     _tG_=[0,make_2p(5,cst_32),_tF_],
     _tH_=[0,make_2p(4,cst_16),_tG_],
     _tI_=[0,make_2p(3,cst_8),_tH_],
     _tJ_=[0,make_2p(2,cst_4),_tI_],
     _tK_=[0,make_2p(1,cst_2),_tJ_],
     _tL_=[0,make_2pm2q(95,42,cst_39614081257132164398725464064),_tK_],
     _tM_=[0,make_2pm2q(57,4,cst_144115188075855856),_tL_],
     _tN_=[0,make_2pm2q(56,3,cst_72057594037927928),_tM_],
     _tO_=[0,make_2pm2q(55,2,cst_36028797018963964),_tN_],
     _tP_=[0,make_2pm2q(54,1,cst_18014398509481982),_tO_],
     _tQ_=[0,make_2pm2q(53,0,cst_9007199254740991),_tP_],
     _tR_=[0,make_2pm2q(52,0,cst_4503599627370495),_tQ_],
     _tS_=[0,make_2pm2q(51,0,cst_2251799813685247),_tR_],
     _tT_=[0,make_2pm2q(50,0,cst_1125899906842623),_tS_],
     _tU_=[0,make_2pm2q(3,0,cst_7),_tT_],
     _tV_=[0,make_2pm2q(2,0,cst_3),_tU_],
     _tW_=[0,make_2pm2q(1,0,cst_1$0),_tV_],
     _tX_=[0,_fX_(cst_of_float$0,[0,make_2pm2q(0,0,cst_0$0),_tW_]),_qd_],
     _tY_=
      [0,
       _fY_
        (cst_exponentiate_of_int_2_4,
         [246,
          function(_aic_)
           {return _f4_
                    ([0,
                      InvalidArgument,
                      cst_BigInt_exponentiate_Negative_exponent_4],
                     [246,
                      function(_aid_){return exponentiate(caml_call1(_pa_,2),-4)}])}]),
       _tX_],
     _tZ_=
      [0,
       caml_call1(_ko_([0,try_of_string$3,_pd_,_pq_,_pe_]),[0,_qc_])[1],
       _tY_],
     _t0_=
      _fX_
       (cst_BigInt,
        [0,
         caml_call1
           (_lX_
             ([0,
               [0,
                _pK_,
                _pL_,
                _pN_,
                _pO_,
                _pP_,
                _pQ_,
                _pR_,
                _pS_,
                _pT_,
                _pF_,
                _pG_,
                _pH_,
                _pI_,
                _pl_],
               _pe_,
               _pq_,
               _pD_,
               try_of_string$3,
               _pd_,
               _pe_,
               _o__,
               _o$_,
               _pg_,
               _ph_,
               _pi_,
               _pj_,
               _pk_,
               _pm_,
               exponentiate,
               _pa_,
               of_float$0,
               compare$1,
               _ps_,
               _pt_,
               _pu_,
               _pv_,
               _px_,
               _py_,
               _pA_,
               _pB_,
               _pC_,
               _pf_,
               _pl_,
               _pb_,
               _pc_,
               _pp_,
               _po_]),
            [0,
             to_string$0,
             different$0,
             _qc_,
             to_string$0,
             add_substract,
             negate$1,
             multiply$1,
             divide$1,
             exponentiate$0,
             ordered,
             equal$2,
             succ$0])
          [1],
         _tZ_]),
     _t6_=0,
     _t7_=
      [0,
       _fY_(cst_xor_false_false,[246,function(_aib_){return _f__(xor(0,0))}]),
       _t6_],
     _t8_=
      [0,
       _fY_(cst_xor_true_false,[246,function(_aia_){return _f9_(xor(1,0))}]),
       _t7_],
     _t9_=
      [0,
       _fY_(cst_xor_false_true,[246,function(_ah$_){return _f9_(xor(0,1))}]),
       _t8_],
     _t__=
      [0,
       _fY_(cst_xor_true_true,[246,function(_ah__){return _f__(xor(1,1))}]),
       _t9_],
     _t$_=[0,_fY_(cst_false_false,[246,function(_ah9_){return _f__(0)}]),_t__],
     _ua_=[0,_fY_(cst_false_true,[246,function(_ah8_){return _f9_(1)}]),_t$_],
     _ub_=
      [0,_fY_(cst_true_whatever,[246,function(_ah7_){return _f9_(1)}]),_ua_],
     _uc_=
      [0,
       _fY_(cst_or_false_false,[246,function(_ah6_){return _f__(or(0,0))}]),
       _ub_],
     _ud_=
      [0,
       _fY_(cst_or_true_false,[246,function(_ah5_){return _f9_(or(1,0))}]),
       _uc_],
     _ue_=
      [0,
       _fY_(cst_or_false_true,[246,function(_ah4_){return _f9_(or(0,1))}]),
       _ud_],
     _uf_=
      [0,
       _fY_(cst_or_true_true,[246,function(_ah3_){return _f9_(or(1,1))}]),
       _ue_],
     _ug_=
      [0,_fY_(cst_false_whatever,[246,function(_ah2_){return _f__(0)}]),_uf_],
     _uh_=[0,_fY_(cst_true_false,[246,function(_ah1_){return _f__(0)}]),_ug_],
     _ui_=[0,_fY_(cst_true_true,[246,function(_ah0_){return _f9_(1)}]),_uh_],
     _uj_=
      [0,
       _fY_(cst_and_false_false,[246,function(_ahZ_){return _f__(and(0,0))}]),
       _ui_],
     _uk_=
      [0,
       _fY_(cst_and_true_false,[246,function(_ahY_){return _f__(and(1,0))}]),
       _uj_],
     _ul_=
      [0,
       _fY_(cst_and_false_true,[246,function(_ahX_){return _f__(and(0,1))}]),
       _uk_],
     _um_=
      [0,
       _fY_(cst_and_true_true,[246,function(_ahW_){return _f9_(and(1,1))}]),
       _ul_],
     _un_=[0,_fY_(cst_not_false,[246,function(_ahV_){return _f9_(1)}]),_um_],
     _uo_=[0,_fY_(cst_not_true,[246,function(_ahU_){return _f__(0)}]),_un_],
     _up_=
      [0,
       caml_call1(_ko_([0,try_of_string$0,_am_,_av_,_ao_]),[0,_t2_])[1],
       _uo_],
     _uq_=[0,caml_call1(_km_([0,_an_]),[0,_t1_])[1],_up_],
     _ur_=
      _fX_
       (cst_Bool,
        [0,
         caml_call1
           (_lF_
             ([0,
               [0,_aq_,_ar_,_i_,_j_,_l_,_k_],
               _av_,
               _au_,
               _ao_,
               compare,
               less_than,
               less_or_equal,
               greater_than,
               greater_or_equal,
               between,
               between_or_equal,
               min,
               max,
               min_max]),
            [0,_t4_,_t1_,_t5_,_t3_])
          [1],
         _uq_]),
     _us_=Bytes[5],
     _ut_=Bytes[6],
     _uu_=caml_string_get,
     _uv_=caml_string_set,
     _uw_=caml_ml_string_length,
     _ux_=Bytes[3],
     _uy_=caml_create_string,
     _uA_=
      _kv_
        ([0,
          one,
          square,
          multiply,
          function(param,_ahT_,n){return caml_call1(invalid_argument(_uz_),n)}])
       [1],
     _uM_=0,
     _uN_=
      [0,
       _fY_
        (cst_exponentiate_2_4,
         [246,
          function(_ahR_)
           {return _f4_
                    ([0,
                      InvalidArgument,
                      cst_Int_exponentiate_Negative_exponent_4],
                     [246,function(_ahS_){return caml_call2(_uA_,2,-4)}])}]),
       _uM_],
     _uO_=
      [0,
       caml_call1(_ko_([0,try_of_string,of_string,_af_,_T_]),[0,_uC_])[1],
       _uN_],
     _uP_=
      _fX_
       (cst_Int,
        [0,
         caml_call1
           (_lX_
             ([0,
               [0,_W_,_X_,_Z_,_Y_,___,_$_,_aa_,_ab_,_uA_,_i_,_j_,_l_,_k_,_ac_],
               _S_,
               _af_,
               _ae_,
               try_of_string,
               of_string,
               _T_,
               zero,
               one,
               negate,
               add,
               substract,
               multiply,
               divide,
               square,
               _uA_,
               _Q_,
               of_float,
               compare,
               less_than,
               less_or_equal,
               greater_than,
               greater_or_equal,
               between,
               between_or_equal,
               min,
               max,
               min_max,
               _U_,
               modulo,
               _R_,
               to_float,
               succ,
               pred]),
            [0,_uB_,_uE_,_uC_,_uB_,_uG_,_uH_,_uI_,_uJ_,_uK_,_uF_,_uD_,_uL_])
          [1],
         _uO_]),
     _uQ_=_gQ_([0,equal$0])[1];
    function Specialize(_ahQ_)
     {return [0,
              _uQ_,
              Array,
              empty,
              singleton,
              prepend,
              _ax_,
              _ay_,
              _az_,
              _aA_,
              is_empty,
              try_head,
              try_tail,
              head,
              tail,
              reverse,
              rev_concat,
              concat,
              O,
              map$0,
              map_acc,
              map_i,
              flat_map,
              flat_map_acc,
              flat_map_i,
              filter$0,
              filter_acc,
              filter_i,
              filter_map$0,
              filter_map_acc,
              filter_map_i,
              fold,
              fold_acc,
              fold_i,
              try_reduce_acc,
              try_reduce,
              try_reduce_i,
              reduce_acc,
              reduce,
              reduce_i,
              scan,
              scan_acc,
              scan_i,
              iter$0,
              iter_acc,
              iter_i,
              count,
              count_acc,
              count_i,
              try_find,
              try_find_acc,
              try_find_i,
              find,
              find_acc,
              find_i,
              there_exists,
              there_exists_acc,
              there_exists_i,
              for_all,
              for_all_acc,
              for_all_i,
              try_find_map,
              try_find_map_acc,
              try_find_map_i,
              find_map,
              find_map_acc,
              find_map_i,
              fold_short,
              fold_short_acc,
              fold_short_i,
              try_reduce_short_acc,
              try_reduce_short,
              try_reduce_short_i,
              reduce_short_acc,
              reduce_short,
              reduce_short_i,
              scan_short,
              scan_short_acc,
              scan_short_i,
              iter_short,
              iter_short_acc,
              iter_short_i,
              contains,
              Poly,
              size,
              join_string_list,
              repr$0,
              Two,
              ListLabels,
              equal$0,
              cartesian_product,
              [0,
               map$0,
               map_acc,
               map_i,
               filter$0,
               filter_acc,
               filter_i,
               filter_map$0,
               filter_map_acc,
               filter_map_i,
               flat_map,
               flat_map_acc,
               flat_map_i,
               scan,
               scan_acc,
               scan_i,
               scan_short,
               scan_short_acc,
               scan_short_i]]}
    function SpecializeEquatable(_ahP_)
     {return [0,function(xs,x){return contains(xs,x,_ahP_[1])}]}
    var
     _uU_=[0,[0,empty,_uT_],_uS_],
     _uW_=0,
     _uY_=
      [0,
       _fY_
        (cst_iter,
         [246,
          function(_ahO_)
           {var p=caml_call1(_da_,2);
            iter$0
             (_uX_,
              function(n)
               {return caml_call2
                        (_dc_,p,caml_call2(_uA_,caml_call1(_db_,p),n))});
            return _ga_(4096,caml_call1(_db_,p))}]),
       _uW_],
     _uZ_=
      [0,
       _fY_
        (cst_try_reduce,
         [246,function(_ahN_){return _gp_(try_reduce(0,_uA_))}]),
       _uY_],
     _u1_=
      [0,
       _fY_
        (cst_try_reduce$0,
         [246,function(_ahM_){return _gn_(4096,try_reduce(_u0_,_uA_))}]),
       _uZ_],
     _u3_=
      [0,
       _fY_
        (cst_reduce,
         [246,function(_ahL_){return _ga_(4096,reduce(_u2_,_uA_))}]),
       _u1_],
     _u6_=
      [0,
       _fY_
        (cst_reduce_0,
         [246,
          function(_ahK_)
           {return _ga_(0,reduce(_u5_,function(param){return failure(_u4_)}))}]),
       _u3_],
     _u9_=
      [0,
       _fY_
        (cst_fold,
         [246,
          function(_ahJ_)
           {return _f$_(cst_init_3_4,fold(cst_init,_u8_,_n_(_u7_)))}]),
       _u6_],
     _u$_=
      [0,
       _fY_
        (cst_fold$0,
         [246,
          function(_ahI_)
           {return _ga_(0,fold(0,0,function(param){return failure(_u__)}))}]),
       _u9_],
     _va_=
      [0,
       _fY_
        (cst_tail,
         [246,
          function(_ahG_)
           {return _f4_
                    ([0,Failure,cst_List_tail],
                     [246,function(_ahH_){return tail(0)}])}]),
       _u$_],
     _vd_=
      [0,
       _fY_(cst_tail$0,[246,function(_ahF_){return _gw_(_vc_,tail(_vb_))}]),
       _va_],
     _ve_=
      [0,
       _fY_
        (cst_head,
         [246,
          function(_ahD_)
           {return _f4_
                    ([0,Failure,cst_List_head],
                     [246,function(_ahE_){return head(0)}])}]),
       _vd_],
     _vg_=
      [0,
       _fY_(cst_head$0,[246,function(_ahC_){return _ga_(1,head(_vf_))}]),
       _ve_],
     _vh_=
      [0,
       _fY_
        (cst_try_tail,
         [246,
          function(_ahw_)
           {var _ahx_=try_tail(0);
            function _ahy_(_ahA_)
             {return function(_ahB_){return equal$0(_ahA_,_ahB_,_bh_)}}
            return _gi_
                    (function(_ahz_){return repr$0(_ahz_,_a6_)},_ahy_,_ahx_)}]),
       _vg_],
     _vk_=
      [0,
       _fY_
        (cst_try_tail$0,
         [246,
          function(_ahq_)
           {var _ahr_=try_tail(_vi_);
            function _ahs_(_ahu_)
             {return function(_ahv_){return equal$0(_ahu_,_ahv_,_af_)}}
            return _gh_
                    (function(_aht_){return repr$0(_aht_,_T_)},_ahs_,_vj_,_ahr_)}]),
       _vh_],
     _vl_=
      [0,
       _fY_(cst_try_head,[246,function(_ahp_){return _gp_(try_head(0))}]),
       _vk_],
     _vn_=
      [0,
       _fY_
        (cst_try_head$0,[246,function(_aho_){return _gn_(1,try_head(_vm_))}]),
       _vl_],
     _vq_=
      [0,
       _fY_(cst_prepend,[246,function(_ahn_){return _gw_(_vp_,[0,1,_vo_])}]),
       _vn_],
     _vu_=
      [0,
       _fY_
        (cst_concat,
         [246,function(_ahm_){return _gw_(_vt_,concat(_vs_,_vr_))}]),
       _vq_],
     _vx_=
      [0,
       _fY_
        (cst_reverse,[246,function(_ahl_){return _gv_(_vw_,reverse(_vv_))}]),
       _vu_],
     _vy_=
      [0,
       _lm_
         ([0,
           map$0,
           map_i,
           map_acc,
           filter$0,
           filter_i,
           filter_acc,
           filter_map$0,
           filter_map_i,
           filter_map_acc,
           flat_map,
           flat_map_i,
           flat_map_acc,
           _ay_,
           _ax_])
        [1],
       _vx_],
     _vz_=
      [0,
       caml_call1(_hf_([0,equal$0,_uQ_,repr$0]),[0,[0,_af_,_T_],_uU_,_uV_])[1],
       _vy_],
     _vA_=
      _fX_(cst_List,[0,caml_call1(_gI_([0,repr$0]),[0,[0,_T_],_uR_])[1],_vz_]);
    function stack(n)
     {return 0 === n?[0,[0,current(0,0)],0]:[0,0,stack(n - 1 | 0)]}
    function _vB_(_ahk_){return filter_map$0(_ahk_,_dg_)}
    var
     stack$0=caml_call2(_c9_,caml_call2(_c9_,stack(2),_vB_),head),
     _vC_=0,
     _vD_=
      _f1_
       ?cst$5
       :cst_Raised_by_primitive_operation_at_file_Implementation_CallStack_ml_line_3_characters_15_49_Called_from_file_Implementation_CallStack_ml_line_4_characters_15_30_Called_from_file_Implementation_CallStack_ml_line_4_characters_15_30_Called_from_file_Implementation_CallStack_ml_line_7_characters_2_9,
     _vE_=[0,[0,stack$0,_vD_],_vC_],
     LocationExamples=[0,_vF_],
     match=frames(stack$0),
     _vG_=0;
    if(match)
     var
      frame=match[1],
      _vH_=0,
      _vJ_=
       [0,
        _fY_
         (cst_location,
          [246,
           function(_ahj_)
            {return _gh_(_aP_,_aW_,_vI_,caml_call1(Frame[2],frame))}]),
        _vH_],
      _vK_=
       [0,
        _fY_
         (cst_format_1,
          [246,
           function(_ahi_)
            {return _gr_
                     (cst_Called_from_file_Implementation_CallStack_ml_line_3_characters_15_49,
                      caml_call2(Frame[3],1,frame))}]),
        _vJ_],
      _vL_=
       [0,
        _fY_
         (cst_format_0,
          [246,
           function(_ahh_)
            {return _gr_
                     (cst_Raised_by_primitive_operation_at_file_Implementation_CallStack_ml_line_3_characters_15_49,
                      caml_call2(Frame[3],0,frame))}]),
        _vK_];
    else
     var _vL_=0;
    var
     _vM_=[0,_fX_(cst_Frame,_vL_),_vG_],
     _vN_=
      [0,
       _fX_(cst_Location,[0,caml_call1(_gG_([0,_aP_]),LocationExamples)[1],0]),
       _vM_],
     _vO_=
      [0,
       _fY_
        (cst_frames,
         [246,
          function(_ahe_)
           {var
             _ahf_=caml_call2(_c9_,caml_call2(_c9_,stack$0,frames),size),
             _ahg_=_f1_?0:4;
            return _ga_(_ahg_,_ahf_)}]),
       _vN_],
     _vP_=[0,caml_call1(_gG_([0,_aO_]),[0,_vE_])[1],_vO_],
     _vQ_=_fX_(cst_CallStack,[0,caml_call1(_km_([0,_aO_]),[0,_vE_])[1],_vP_]),
     _vR_=Pervasives[17];
    function _vS_(_ahd_){return _ahd_}
    function _vT_(c,len){return caml_call2(String[1],len,c)}
    function _vU_(c){return caml_call2(String[1],1,c)}
    var
     _vV_=0,
     _vW_=0,
     _vZ_=
      [0,
       _fY_
        (cst_uncurry,
         [246,
          function(_ahb_)
           {var _ahc_=_n_(_vY_);
            return _f$_
                    (cst_7_2_4_5_3,
                     caml_call1(caml_call1(Function5[3],_ahc_),_vX_))}]),
       _vW_],
     _v0_=
      [0,
       _fY_
        (cst_curry,
         [246,
          function(_ag6_)
           {var _ag7_=2,_ag8_=5,_ag9_=3,_ag__=2,_ag$_=7;
            function _aha_(param)
             {var v=param[5],u=param[4],z=param[3],y=param[2],x=param[1];
              return ((x - caml_mul(y,z) | 0) + u | 0) - v | 0}
            return _ga_
                    (4,
                     caml_call5
                      (caml_call1(Function5[2],_aha_),
                       _ag$_,
                       _ag__,
                       _ag9_,
                       _ag8_,
                       _ag7_))}]),
       _vZ_],
     _v2_=
      [0,
       _fX_
        (cst_Function5,
         [0,
          _fY_
           (cst_flip,
            [246,
             function(_ag4_)
              {var _ag5_=_n_(_v1_);
               return _f$_
                       (cst_2_7_5_9_3,
                        caml_call5(caml_call1(Function5[1],_ag5_),3,9,5,7,2))}]),
          _v0_]),
       _vV_],
     _v3_=0,
     _v6_=
      [0,
       _fY_
        (cst_uncurry$0,
         [246,
          function(_ag2_)
           {var _ag3_=_n_(_v5_);
            return _f$_
                    (cst_7_2_4_5,
                     caml_call1(caml_call1(Function4[3],_ag3_),_v4_))}]),
       _v3_],
     _v7_=
      [0,
       _fY_
        (cst_curry$0,
         [246,
          function(_agW_)
           {var _agX_=5,_agY_=3,_agZ_=2,_ag0_=7;
            function _ag1_(param)
             {var u=param[4],z=param[3],y=param[2],x=param[1];
              return (x - caml_mul(y,z) | 0) + u | 0}
            return _ga_
                    (6,
                     caml_call4
                      (caml_call1(Function4[2],_ag1_),_ag0_,_agZ_,_agY_,_agX_))}]),
       _v6_],
     _v9_=
      [0,
       _fX_
        (cst_Function4,
         [0,
          _fY_
           (cst_flip$0,
            [246,
             function(_agU_)
              {var _agV_=_n_(_v8_);
               return _f$_
                       (cst_2_7_5_9,
                        caml_call4(caml_call1(Function4[1],_agV_),9,5,7,2))}]),
          _v7_]),
       _v2_],
     _v__=0,
     _wb_=
      [0,
       _fY_
        (cst_uncurry$1,
         [246,
          function(_agS_)
           {var _agT_=_n_(_wa_);
            return _f$_
                    (cst_7_2_4,caml_call1(caml_call1(Function3[3],_agT_),_v$_))}]),
       _v__],
     _wc_=
      [0,
       _fY_
        (cst_curry$1,
         [246,
          function(_agN_)
           {var _agO_=3,_agP_=2,_agQ_=7;
            function _agR_(param)
             {var z=param[3],y=param[2],x=param[1];
              return x - caml_mul(y,z) | 0}
            return _ga_
                    (1,
                     caml_call3(caml_call1(Function3[2],_agR_),_agQ_,_agP_,_agO_))}]),
       _wb_],
     _we_=
      [0,
       _fX_
        (cst_Function3,
         [0,
          _fY_
           (cst_flip$1,
            [246,
             function(_agL_)
              {var _agM_=_n_(_wd_);
               return _f$_
                       (cst_2_7_5,caml_call3(caml_call1(Function3[1],_agM_),5,7,2))}]),
          _wc_]),
       _v9_],
     _wf_=0,
     _wh_=
      [0,
       _fY_
        (cst_uncurry$2,
         [246,
          function(_agK_)
           {return _ga_(5,caml_call1(caml_call1(Function2[3],_$_),_wg_))}]),
       _wf_],
     _wi_=
      [0,
       _fY_
        (cst_curry$2,
         [246,
          function(_agG_)
           {var _agH_=2,_agI_=7;
            function _agJ_(param){var y=param[2],x=param[1];return x - y | 0}
            return _ga_
                    (5,caml_call2(caml_call1(Function2[2],_agJ_),_agI_,_agH_))}]),
       _wh_],
     _wj_=
      [0,
       _fX_
        (cst_Function2,
         [0,
          _fY_
           (cst_flip$2,
            [246,
             function(_agF_)
              {return _ga_(128,caml_call2(caml_call1(Function2[1],_uA_),7,2))}]),
          _wi_]),
       _we_],
     _wk_=0,
     _wm_=
      [0,
       _fY_
        (cst_compose,
         [246,
          function(_agA_)
           {var _agB_=21;
            function _agC_(_agE_){return 2 * _agE_ | 0}
            var _agD_=_n_(_wl_);
            return _f$_
                    (cst_42,
                     caml_call1(caml_call2(Function1[4],_agD_,_agC_),_agB_))}]),
       _wk_],
     _wn_=
      [0,
       _fY_
        (cst_rev_apply,
         [246,
          function(_agx_)
           {function _agy_(_agz_){return 2 * _agz_ | 0}
            return _gb_(caml_call2(Function1[3],21,_agy_))}]),
       _wm_],
     _wo_=
      [0,
       _fY_
        (cst_apply,
         [246,
          function(_agt_)
           {var _agu_=21;
            function _agv_(_agw_){return 2 * _agw_ | 0}
            return _gb_(caml_call2(Function1[2],_agv_,_agu_))}]),
       _wn_],
     _wp_=
      _fX_
       (cst_Functions,
        [0,
         _fX_
          (cst_Function1,
           [0,
            _fY_
             (cst_identity_42,
              [246,function(_ags_){return _gb_(caml_call1(Function1[1],42))}]),
            _wo_]),
         _wj_]);
    function _wq_(x,pos){return caml_call2(Pervasives[79][4],x,pos)}
    var _wr_=Pervasives[79][5],_ws_=Pervasives[79][6];
    function _wt_(s,f)
     {var file=caml_call1(Pervasives[62],s);
      try
       {var r=caml_call1(f,file);caml_call1(Pervasives[76],file);return r}
      catch(ex)
       {ex = caml_wrap_exception(ex);
        caml_call1(Pervasives[76],file);
        return raise(ex)}}
    function _wu_(s,f){return _wt_(s,caml_call2(_c__,f,_dg_))}
    var
     _wx_=[0,[0,make(_ww_,_wv_,25),cst_3_to_23_step_4],0],
     _wz_=[0,[0,make(0,_wy_,-15),cst_0_down_to_12_step_3],_wx_],
     _wA_=[0,[0,make(0,0,5),cst_0_to_4_step_1],_wz_],
     _wB_=[0,[0,make(0,0,-5),cst$6],_wA_],
     repr$3=[0,[0,make(0,0,0),cst$7],_wB_],
     _wE_=[0,make(_wD_,_wC_,11),0],
     _wH_=[0,make(_wG_,_wF_,10),_wE_],
     _wK_=[0,[0,make(_wJ_,_wI_,9),_wH_],0],
     _wN_=[0,make(_wM_,_wL_,10),0],
     _wO_=[0,[0,make(0,0,10),_wN_],_wK_],
     _wQ_=[0,make(_wP_,0,3),[0,empty$0,0]],
     _wS_=[0,make(0,_wR_,10),_wQ_],
     _wU_=[0,make(0,_wT_,10),_wS_],
     _wV_=[0,make(0,0,-4),_wU_],
     _wX_=[0,make(0,_wW_,0),_wV_],
     equal$3=[0,[0,make(0,0,0),_wX_],_wO_],
     _w0_=make(_wZ_,_wY_,12),
     _w3_=[0,[0,make(_w2_,_w1_,11),_w0_],0],
     _w4_=make(0,0,1),
     _w5_=[0,[0,make(0,0,0),_w4_],_w3_],
     _w6_=0,
     _w7_=0,
     _w$_=
      [0,
       _fY_
        (cst_with_step_0_and_start,
         [246,
          function(_agr_){return _gw_(_w__,to_list$0(make(_w9_,_w8_,-11)))}]),
       _w7_],
     _xd_=
      [0,
       _fY_
        (cst_with_step_0_and_start$0,
         [246,
          function(_agq_){return _gw_(_xc_,to_list$0(make(_xb_,_xa_,-10)))}]),
       _w$_],
     _xg_=
      [0,
       _fY_
        (cst_with_step_0,
         [246,function(_agp_){return _gw_(_xf_,to_list$0(make(0,_xe_,-6)))}]),
       _xd_],
     _xj_=
      [0,
       _fY_
        (cst_with_step_0$0,
         [246,function(_ago_){return _gw_(_xi_,to_list$0(make(0,_xh_,-6)))}]),
       _xg_],
     _xl_=
      [0,
       _fY_
        (cst_with_step_0$1,
         [246,function(_agn_){return _gw_(0,to_list$0(make(0,_xk_,6)))}]),
       _xj_],
     _xp_=
      [0,
       _fY_
        (cst_with_start_and_step,
         [246,function(_agm_){return _gw_(_xo_,to_list$0(make(_xn_,_xm_,9)))}]),
       _xl_],
     _xt_=
      [0,
       _fY_
        (cst_with_start_and_step$0,
         [246,function(_agl_){return _gw_(_xs_,to_list$0(make(_xr_,_xq_,8)))}]),
       _xp_],
     _xx_=
      [0,
       _fY_
        (cst_with_start_and_step$1,
         [246,function(_agk_){return _gw_(_xw_,to_list$0(make(_xv_,_xu_,8)))}]),
       _xt_],
     _xB_=
      [0,
       _fY_
        (cst_with_start_and_step$2,
         [246,function(_agj_){return _gw_(_xA_,to_list$0(make(_xz_,_xy_,7)))}]),
       _xx_],
     _xD_=
      [0,
       _fY_
        (cst_with_step_0$2,
         [246,function(_agi_){return _gw_(0,to_list$0(make(0,_xC_,6)))}]),
       _xB_],
     _xG_=
      [0,
       _fY_
        (cst_with_step,
         [246,function(_agh_){return _gw_(_xF_,to_list$0(make(0,_xE_,6)))}]),
       _xD_],
     _xJ_=
      [0,
       _fY_
        (cst_with_step$0,
         [246,function(_agg_){return _gw_(_xI_,to_list$0(make(0,_xH_,5)))}]),
       _xG_],
     _xL_=
      [0,
       _fY_
        (cst_with_stop_start,
         [246,function(_agf_){return _gw_(0,to_list$0(make(_xK_,0,5)))}]),
       _xJ_],
     _xM_=
      [0,
       _fY_
        (cst_with_stop_start$0,
         [246,function(_age_){return _gw_(0,to_list$0(make(0,0,-5)))}]),
       _xL_],
     _xN_=
      [0,
       _fY_
        (cst_with_stop_start$1,
         [246,function(_agd_){return _gw_(0,to_list$0(make(0,0,0)))}]),
       _xM_],
     _xO_=
      [0,
       _fY_
        (cst_with_stop_0,
         [246,function(_agc_){return _gw_(0,to_list$0(make(0,0,-5)))}]),
       _xN_],
     _xR_=
      [0,
       _fY_
        (cst_with_start,
         [246,function(_agb_){return _gw_(_xQ_,to_list$0(make(_xP_,0,5)))}]),
       _xO_],
     _xT_=
      [0,
       _fX_
        (cst_to_list,
         [0,
          _fY_
           (cst_simplest,
            [246,function(_aga_){return _gw_(_xS_,to_list$0(make(0,0,5)))}]),
          _xR_]),
       _w6_],
     _xU_=
      [0,
       caml_call1(_g0_([0,_bR_,_bS_,Equate[1][3],repr$2]),[0,equal$3,_w5_])[1],
       _xT_],
     _xV_=
      _fX_(cst_IntRange,[0,caml_call1(_gG_([0,repr$2]),[0,repr$3])[1],_xU_]),
     _xW_=0,
     _xZ_=
      [0,
       _fY_
        (cst_map_is_lazy,
         [246,
          function(param)
           {var
             x=[246,function(_af$_){return failure(_xX_)}],
             y=map(x,function(param){return failure(_xY_)});
            return _f4_
                    ([0,Failure,cst_You_called_me],
                     [246,function(_af__){return value(y)}])}]),
       _xW_],
     _x0_=
      [0,
       _fY_
        (cst_map$0,
         [246,
          function(_af8_)
           {return _gb_(value(map(21,function(_af9_){return 2 * _af9_ | 0})))}]),
       _xZ_],
     _x1_=
      [0,
       _fY_
        (cst_is_value,
         [246,
          function(param)
           {var x=[246,function(_af7_){return 42}];
            _f__(caml_call1(_s_,x));
            _gb_(value(x));
            return _f9_(caml_call1(_s_,x))}]),
       _x0_],
     _x3_=
      [0,
       _fY_
        (cst_value_exc,
         [246,
          function(_af4_)
           {return _f4_
                    ([0,Failure,cst_nope],
                     [246,
                      function(_af5_)
                       {return value([246,function(_af6_){return failure(_x2_)}])}])}]),
       _x1_],
     _x4_=
      _fX_
       (cst_Lazy,
        [0,_fY_(cst_value,[246,function(_af3_){return _gb_(value(42))}]),_x3_]),
     _x5_=Nativeint[1],
     _x6_=Nativeint[2],
     _x7_=Nativeint[4],
     _x8_=Nativeint[5],
     _x9_=Nativeint[6],
     _x__=Nativeint[8],
     _x$_=Nativeint[9],
     _ya_=Nativeint[11],
     _yb_=Nativeint[12],
     _yc_=Equate[1][1],
     _yd_=caml_int_of_string;
    function _ye_(_af2_){return _af2_}
    function _yf_(_af1_){return _af1_ | 0}
    function _yg_(_af0_){return _af0_}
    function _yh_(_afZ_){return _afZ_}
    var _yi_=caml_mod,_yj_=caml_div;
    function _yk_(_afY_,_afX_){return caml_mul(_afY_,_afX_)}
    function _yl_(_afW_,_afV_){return _afW_ - _afV_ | 0}
    function _ym_(_afU_,_afT_){return _afU_ + _afT_ | 0}
    var
     include$1=
      _mo_
       ([0,
         cst_NativeInt,
         cst_n,
         _x5_,
         _x6_,
         function(_afS_){return - _afS_ | 0},
         _ym_,
         _yl_,
         _yk_,
         _yj_,
         _yi_,
         _x7_,
         _x8_,
         _x9_,
         _x__,
         _x$_,
         _yh_,
         _yg_,
         _yf_,
         _ye_,
         _yd_,
         _ya_,
         _yb_,
         _yc_]),
     _yB_=include$1[16],
     _yn_=include$1[2],
     _yo_=include$1[3],
     _yp_=include$1[4],
     _yq_=include$1[5],
     _yr_=include$1[6],
     _ys_=include$1[7],
     _yt_=include$1[8],
     _yu_=include$1[9],
     _yv_=include$1[10],
     _yw_=include$1[11],
     _yx_=include$1[12],
     _yy_=include$1[13],
     _yz_=include$1[14],
     _yA_=include$1[15],
     _yC_=include$1[17],
     _yD_=include$1[18],
     _yE_=include$1[19],
     _yF_=include$1[20],
     _yG_=include$1[21],
     _yH_=include$1[22],
     _yI_=include$1[23],
     _yJ_=include$1[24],
     _yK_=include$1[25],
     _yL_=include$1[26],
     _yM_=include$1[27],
     _yN_=include$1[28],
     _yO_=include$1[29],
     _yP_=include$1[30],
     _yQ_=include$1[31],
     _yR_=include$1[32],
     _yS_=include$1[33],
     _yT_=include$1[34],
     _yU_=include$1[35],
     _yV_=include$1[36],
     _y8_=0,
     _y9_=
      [0,
       _fY_
        (cst_exponentiate_2n_4,
         [246,
          function(_afQ_)
           {return _f4_
                    ([0,
                      InvalidArgument,
                      cst_NativeInt_exponentiate_Negative_exponent_4],
                     [246,function(_afR_){return caml_call2(_yB_,2,-4)}])}]),
       _y8_],
     _y__=
      [0,
       caml_call1
         (_ko_([0,include$1[5],include$1[6],include$1[3],include$1[7]]),
          [0,_yW_])
        [1],
       _y9_],
     _y$_=
      _fX_
       (cst_NativeInt$0,
        [0,
         caml_call1
           (_lX_
             ([0,
               include$1[1],
               include$1[2],
               include$1[3],
               include$1[4],
               include$1[5],
               include$1[6],
               include$1[7],
               include$1[8],
               include$1[9],
               include$1[10],
               include$1[11],
               include$1[12],
               include$1[13],
               include$1[14],
               include$1[15],
               include$1[16],
               include$1[17],
               include$1[18],
               include$1[19],
               include$1[20],
               include$1[21],
               include$1[22],
               include$1[23],
               include$1[24],
               include$1[25],
               include$1[26],
               include$1[27],
               include$1[28],
               include$1[29],
               include$1[30],
               include$1[31],
               include$1[32],
               include$1[33],
               include$1[34]]),
            [0,_yY_,_y0_,_yW_,_yX_,_y2_,_y3_,_y4_,_y5_,_y6_,_y1_,_yZ_,_y7_])
          [1],
         _y__]),
     _za_=_gQ_([0,equal])[1];
    function less_than$0(x,y,compare_a)
     {var match=compare$0(x,y,compare_a);return 0 === match?1:0}
    function less_or_equal$0(x,y,compare_a)
     {var match=compare$0(x,y,compare_a);return 2 <= match?0:1}
    function greater_than$0(x,y,compare_a)
     {var match=compare$0(x,y,compare_a);return 2 <= match?1:0}
    function greater_or_equal$0(x,y,compare_a)
     {var match=compare$0(x,y,compare_a);return 0 === match?0:1}
    function min$0(x,y,compare_a)
     {var match=compare$0(x,y,compare_a);return 0 === match?x:y}
    function max$0(x,y,compare_a)
     {var match=compare$0(x,y,compare_a);return 2 <= match?x:y}
    function min_max$0(x,y,compare_a)
     {var match=compare$0(x,y,compare_a);return 0 === match?[0,x,y]:[0,y,x]}
    function between$0(x,low,high,compare_a)
     {var _afP_=less_than$0(low,x,compare_a);
      return _afP_?greater_than$0(high,x,compare_a):_afP_}
    function between_or_equal$0(x,low,high,compare_a)
     {var _afO_=less_or_equal$0(low,x,compare_a);
      return _afO_?greater_or_equal$0(high,x,compare_a):_afO_}
    function Specialize$0(_afN_)
     {return [0,
              equal,
              compare$0,
              repr,
              none,
              try_of_string$1,
              some_if,
              some_if$0,
              value_def,
              value$0,
              or_failure,
              func,
              value_map,
              is_some,
              is_none,
              iter,
              filter,
              filter_map,
              _za_,
              less_than$0,
              less_or_equal$0,
              greater_than$0,
              greater_or_equal$0,
              min$0,
              max$0,
              min_max$0,
              between$0,
              between_or_equal$0]}
    var
     _zf_=0,
     _zh_=
      [0,
       _fY_
        (cst_filter_map_Some_false,
         [246,
          function(_afM_)
           {return _gp_(filter_map(_zg_,function(param){return 0}))}]),
       _zf_],
     _zk_=
      [0,
       _fY_
        (cst_filter_map_Some_true,
         [246,
          function(_afL_)
           {return _gn_(57,filter_map(_zj_,function(param){return _zi_}))}]),
       _zh_],
     _zm_=
      [0,
       _fY_
        (cst_filter_map_None,
         [246,
          function(_afK_)
           {return _gp_(filter_map(0,function(param){return failure(_zl_)}))}]),
       _zk_],
     _zo_=
      [0,
       _fY_
        (cst_filter_Some_false,
         [246,
          function(_afJ_){return _gp_(filter(_zn_,function(param){return 0}))}]),
       _zm_],
     _zq_=
      [0,
       _fY_
        (cst_filter_Some_true,
         [246,
          function(_afI_){return _go_(filter(_zp_,function(param){return 1}))}]),
       _zo_],
     _zs_=
      [0,
       _fY_
        (cst_filter_None,
         [246,
          function(_afH_)
           {return _gp_(filter(0,function(param){return failure(_zr_)}))}]),
       _zq_],
     _zu_=
      [0,
       _fY_
        (cst_iter_Some,
         [246,
          function(_afG_)
           {var x=caml_call1(_da_,0);
            iter(_zt_,function(n){return caml_call2(_dc_,x,n)});
            return _gb_(caml_call1(_db_,x))}]),
       _zs_],
     _zw_=
      [0,
       _fY_
        (cst_iter_None,
         [246,
          function(_afF_)
           {return iter(0,function(param){return failure(_zv_)})}]),
       _zu_],
     _zy_=
      [0,
       _fY_
        (cst_value_map_Some,
         [246,
          function(_afD_)
           {return _gb_
                    (value_map(_zx_,57,function(_afE_){return 2 * _afE_ | 0}))}]),
       _zw_],
     _zA_=
      [0,
       _fY_
        (cst_value_map_None,
         [246,
          function(_afC_)
           {return _gb_(value_map(0,42,function(param){return failure(_zz_)}))}]),
       _zy_],
     _zC_=
      [0,
       _fY_
        (cst_map_Some,
         [246,
          function(_afA_)
           {return _go_(func(_zB_,function(_afB_){return 2 * _afB_ | 0}))}]),
       _zA_],
     _zE_=
      [0,
       _fY_
        (cst_map_None,
         [246,
          function(_afz_)
           {return _gp_(func(0,function(param){return failure(_zD_)}))}]),
       _zC_],
     _zG_=
      [0,
       _fY_
        (cst_repr_None,
         [246,
          function(_afy_)
           {return _f$_
                    (cst_None$0,repr(0,function(param){return failure(_zF_)}))}]),
       _zE_],
     _zH_=
      [0,
       _fY_
        (cst_value_exc_None,
         [246,
          function(_afw_)
           {return _f4_
                    ([0,Failure,cst_Nope$0],
                     [246,
                      function(_afx_){return value$0([0,[0,Failure,cst_Nope]],0)}])}]),
       _zG_],
     _zI_=
      [0,
       _fY_
        (cst_value_None,
         [246,
          function(_afu_)
           {return _f4_
                    ([0,Failure,cst_Option_value$0],
                     [246,function(_afv_){return value$0(0,0)}])}]),
       _zH_],
     _zK_=
      [0,
       _fY_
        (cst_value_Some,
         [246,function(_aft_){return _f$_(cst_val,value$0(0,_zJ_))}]),
       _zI_],
     _zM_=
      [0,
       _fY_
        (cst_value_def_Some,
         [246,function(_afs_){return _f$_(cst_val$0,value_def(_zL_,cst_def))}]),
       _zK_],
     _zN_=
      [0,
       _fY_
        (cst_value_def_None,
         [246,function(_afr_){return _f$_(cst_def$1,value_def(0,cst_def$0))}]),
       _zM_],
     _zP_=
      [0,
       _fY_
        (cst_is_none_Some,[246,function(_afq_){return _f__(is_none(_zO_))}]),
       _zN_],
     _zQ_=
      [0,
       _fY_(cst_is_none_None,[246,function(_afp_){return _f9_(is_none(0))}]),
       _zP_],
     _zS_=
      [0,
       _fY_
        (cst_is_some_Some,[246,function(_afo_){return _f9_(is_some(_zR_))}]),
       _zQ_],
     _zT_=
      [0,
       _fY_(cst_is_some_None,[246,function(_afn_){return _f__(is_some(0))}]),
       _zS_],
     _zU_=
      [0,
       _fY_
        (cst_some_if_false,
         [246,function(_afm_){return _gp_(some_if$0(0,42))}]),
       _zT_],
     _zV_=
      [0,
       _fY_
        (cst_some_if_true,[246,function(_afl_){return _go_(some_if$0(1,42))}]),
       _zU_],
     _zX_=
      [0,
       _fY_
        (cst_some_if_false$0,
         [246,
          function(_afj_)
           {return _gp_
                    (some_if(0,[246,function(_afk_){return failure(_zW_)}]))}]),
       _zV_],
     _zY_=
      [0,
       _fY_
        (cst_some_if_true$0,[246,function(_afi_){return _go_(some_if(1,42))}]),
       _zX_],
     _lG_=0,
     _jy_=[0,_ze_,_zc_];
    function _hK_(x,y){return compare$0(x,y,compare)}
    function _in_(x,y){return less_than$0(x,y,compare)}
    function _io_(x,y){return less_or_equal$0(x,y,compare)}
    function _ip_(x,y){return greater_than$0(x,y,compare)}
    function _iq_(x,y){return greater_or_equal$0(x,y,compare)}
    function _ir_(x,low,high){return between$0(x,low,high,compare)}
    function _is_(x,low,high){return between_or_equal$0(x,low,high,compare)}
    function _it_(x,y){return min$0(x,y,compare)}
    function _iu_(x,y){return max$0(x,y,compare)}
    function _iv_(x,y){return min_max$0(x,y,compare)}
    var
     _iw_=_hM_([0,_in_,_io_,_ip_,_iq_]),
     _jz_=caml_call1(_gB_([0,repr]),[0,_T_])[1],
     _lI_=[0,_af_,_T_],
     _lJ_=[0,equal,_za_,repr],
     _lH_=
      [0,
       caml_call1
         (_iH_
           ([0,
             _hK_,
             _in_,
             _io_,
             _ip_,
             _iq_,
             _ir_,
             _is_,
             _it_,
             _iu_,
             _iv_,
             _iw_,
             _jz_,
             caml_call1(_gJ_([0,equal]),[0,_af_])[1]]),
          _jy_)
        [1],
       _lG_],
     _ly_=[0,[0,_lI_[2]],_zb_],
     _lz_=[0,caml_call1(_gI_([0,_lJ_[3]]),_ly_)[1],0],
     _zZ_=
      _fX_
       (cst_Option,
        [0,
         _fX_
          (cst_Able$0,
           [0,
            _fX_
             (cst_Identifiable$0,
              [0,caml_call1(_hf_(_lJ_),[0,_lI_,_zc_,_zd_])[1],_lz_]),
            _lH_]),
         _zY_]),
     _z0_=Pervasives[46];
    function _z1_(opt,channel,format)
     {if(opt)var sth=opt[1],do_flush=sth;else var do_flush=0;
      function _afh_(channel)
       {return do_flush?caml_call1(_z0_,channel):do_flush}
      return caml_call3(Printf[7],_afh_,channel,format)}
    var _z2_=Pervasives[50];
    function _z3_(x,pos){return caml_call2(Pervasives[79][1],x,pos)}
    var _z4_=Pervasives[79][2],_z5_=Pervasives[79][3];
    function _z6_(s,f)
     {var file=caml_call1(Pervasives[43],s);
      try
       {var r=caml_call1(f,file);caml_call1(Pervasives[59],file);return r}
      catch(ex)
       {ex = caml_wrap_exception(ex);
        caml_call1(Pervasives[59],file);
        return raise(ex)}}
    function _z7_(s,f){return _z6_(s,caml_call2(_c__,f,_dg_))}
    function _hN_(x,y,compare_a,compare_b)
     {var match=_ce_(x,y,compare_a,compare_b);return 0 === match?1:0}
    function _hO_(x,y,compare_a,compare_b)
     {var match=_ce_(x,y,compare_a,compare_b);return 2 <= match?0:1}
    function _hP_(x,y,compare_a,compare_b)
     {var match=_ce_(x,y,compare_a,compare_b);return 2 <= match?1:0}
    function _hQ_(x,y,compare_a,compare_b)
     {var match=_ce_(x,y,compare_a,compare_b);return 0 === match?0:1}
    function _ib_(x,y,compare_a,compare_b)
     {var match=_ce_(x,y,compare_a,compare_b);return 0 === match?x:y}
    function _ic_(x,y,compare_a,compare_b)
     {var match=_ce_(x,y,compare_a,compare_b);return 2 <= match?x:y}
    function _id_(x,y,compare_a,compare_b)
     {var match=_ce_(x,y,compare_a,compare_b);
      return 0 === match?[0,x,y]:[0,y,x]}
    function _gR_(x,y,equal_a,equal_b){return 1 - _cf_(x,y,equal_a,equal_b)}
    function _h4_(x,low,high,compare_a,compare_b)
     {var _afg_=_hN_(low,x,compare_a,compare_b);
      return _afg_?_hP_(high,x,compare_a,compare_b):_afg_}
    function _h5_(x,low,high,compare_a,compare_b)
     {var _aff_=_hO_(low,x,compare_a,compare_b);
      return _aff_?_hQ_(high,x,compare_a,compare_b):_aff_}
    function _hR_(x,y,compare_a,compare_b,compare_c)
     {var match=_cn_(x,y,compare_a,compare_b,compare_c);
      return 0 === match?1:0}
    function _hS_(x,y,compare_a,compare_b,compare_c)
     {var match=_cn_(x,y,compare_a,compare_b,compare_c);return 2 <= match?0:1}
    function _hT_(x,y,compare_a,compare_b,compare_c)
     {var match=_cn_(x,y,compare_a,compare_b,compare_c);return 2 <= match?1:0}
    function _hU_(x,y,compare_a,compare_b,compare_c)
     {var match=_cn_(x,y,compare_a,compare_b,compare_c);
      return 0 === match?0:1}
    function _ie_(x,y,compare_a,compare_b,compare_c)
     {var match=_cn_(x,y,compare_a,compare_b,compare_c);
      return 0 === match?x:y}
    function _if_(x,y,compare_a,compare_b,compare_c)
     {var match=_cn_(x,y,compare_a,compare_b,compare_c);return 2 <= match?x:y}
    function _ig_(x,y,compare_a,compare_b,compare_c)
     {var match=_cn_(x,y,compare_a,compare_b,compare_c);
      return 0 === match?[0,x,y]:[0,y,x]}
    function _gS_(x,y,equal_a,equal_b,equal_c)
     {return 1 - _co_(x,y,equal_a,equal_b,equal_c)}
    function _h6_(x,low,high,compare_a,compare_b,compare_c)
     {var _afe_=_hR_(low,x,compare_a,compare_b,compare_c);
      return _afe_?_hT_(high,x,compare_a,compare_b,compare_c):_afe_}
    function _h7_(x,low,high,compare_a,compare_b,compare_c)
     {var _afd_=_hS_(low,x,compare_a,compare_b,compare_c);
      return _afd_?_hU_(high,x,compare_a,compare_b,compare_c):_afd_}
    function _hV_(x,y,compare_a,compare_b,compare_c,compare_d)
     {var match=_cx_(x,y,compare_a,compare_b,compare_c,compare_d);
      return 0 === match?1:0}
    function _hW_(x,y,compare_a,compare_b,compare_c,compare_d)
     {var match=_cx_(x,y,compare_a,compare_b,compare_c,compare_d);
      return 2 <= match?0:1}
    function _hX_(x,y,compare_a,compare_b,compare_c,compare_d)
     {var match=_cx_(x,y,compare_a,compare_b,compare_c,compare_d);
      return 2 <= match?1:0}
    function _hY_(x,y,compare_a,compare_b,compare_c,compare_d)
     {var match=_cx_(x,y,compare_a,compare_b,compare_c,compare_d);
      return 0 === match?0:1}
    function _ih_(x,y,compare_a,compare_b,compare_c,compare_d)
     {var match=_cx_(x,y,compare_a,compare_b,compare_c,compare_d);
      return 0 === match?x:y}
    function _ii_(x,y,compare_a,compare_b,compare_c,compare_d)
     {var match=_cx_(x,y,compare_a,compare_b,compare_c,compare_d);
      return 2 <= match?x:y}
    function _ij_(x,y,compare_a,compare_b,compare_c,compare_d)
     {var match=_cx_(x,y,compare_a,compare_b,compare_c,compare_d);
      return 0 === match?[0,x,y]:[0,y,x]}
    function _gT_(x,y,equal_a,equal_b,equal_c,equal_d)
     {return 1 - _cy_(x,y,equal_a,equal_b,equal_c,equal_d)}
    function _h8_(x,low,high,compare_a,compare_b,compare_c,compare_d)
     {var _afc_=_hV_(low,x,compare_a,compare_b,compare_c,compare_d);
      return _afc_?_hX_(high,x,compare_a,compare_b,compare_c,compare_d):_afc_}
    function _h9_(x,low,high,compare_a,compare_b,compare_c,compare_d)
     {var _afb_=_hW_(low,x,compare_a,compare_b,compare_c,compare_d);
      return _afb_?_hY_(high,x,compare_a,compare_b,compare_c,compare_d):_afb_}
    function _hZ_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var match=_cI_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e);
      return 0 === match?1:0}
    function _h0_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var match=_cI_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e);
      return 2 <= match?0:1}
    function _h1_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var match=_cI_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e);
      return 2 <= match?1:0}
    function _h2_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var match=_cI_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e);
      return 0 === match?0:1}
    function _ik_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var match=_cI_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e);
      return 0 === match?x:y}
    function _il_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var match=_cI_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e);
      return 2 <= match?x:y}
    function _im_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var match=_cI_(x,y,compare_a,compare_b,compare_c,compare_d,compare_e);
      return 0 === match?[0,x,y]:[0,y,x]}
    function _gU_(x,y,equal_a,equal_b,equal_c,equal_d,equal_e)
     {return 1 - _cJ_(x,y,equal_a,equal_b,equal_c,equal_d,equal_e)}
    function _h__
     (x,low,high,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var _afa_=_hZ_(low,x,compare_a,compare_b,compare_c,compare_d,compare_e);
      return _afa_
              ?_h1_(high,x,compare_a,compare_b,compare_c,compare_d,compare_e)
              :_afa_}
    function _h$_
     (x,low,high,compare_a,compare_b,compare_c,compare_d,compare_e)
     {var _ae$_=_h0_(low,x,compare_a,compare_b,compare_c,compare_d,compare_e);
      return _ae$_
              ?_h2_(high,x,compare_a,compare_b,compare_c,compare_d,compare_e)
              :_ae$_}
    var
     _Am_=0,
     _An_=0,
     _Ap_=[0,_fY_(cst_get_4,[246,function(_ae__){return _gb_(_Ao_[5])}]),_An_],
     _Ar_=[0,_fY_(cst_get_3,[246,function(_ae9_){return _gb_(_Aq_[4])}]),_Ap_],
     _At_=[0,_fY_(cst_get_2,[246,function(_ae8_){return _gb_(_As_[3])}]),_Ar_],
     _Av_=[0,_fY_(cst_get_1,[246,function(_ae7_){return _gb_(_Au_[2])}]),_At_],
     _Ax_=[0,_fY_(cst_get_0,[246,function(_ae6_){return _gb_(_Aw_[1])}]),_Av_],
     _AA_=
      [0,
       _fY_(cst_flip$3,[246,function(_ae5_){return _gA_(_Az_,_cH_(_Ay_))}]),
       _Ax_],
     _AC_=
      [0,
       _fY_(cst_make,[246,function(_ae4_){return _gA_(_AB_,[0,1,2,3,4,5])}]),
       _AA_],
     _lQ_=0,
     _j7_=[0,_Al_,_Aj_],
     _j8_=[0,compare],
     _j9_=[0,compare],
     _j__=[0,compare],
     _j$_=
      caml_call1
       (caml_call1
         (function(_aeO_)
            {return function(_aeP_)
              {return function(_aeQ_)
                {var
                  _aeR_=
                   caml_call1
                     (caml_call1
                       (function(_ae1_)
                          {return function(_ae2_)
                            {return function(_ae3_)
                              {return [0,
                                       function(x,y)
                                        {return _cI_(x,y,compare,compare,_ae1_[1],_ae2_[1],_ae3_[1])}]}}}
                         (_aeO_),
                        _aeP_),
                      _aeQ_)
                    [1];
                 function _aeS_(x,y)
                  {return _hZ_(x,y,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _aeT_(x,y)
                  {return _h0_(x,y,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _aeU_(x,y)
                  {return _h1_(x,y,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _aeV_(x,y)
                  {return _h2_(x,y,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _aeW_(x,low,high)
                  {return _h__
                           (x,low,high,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _aeX_(x,low,high)
                  {return _h$_
                           (x,low,high,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _aeY_(x,y)
                  {return _ik_(x,y,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _aeZ_(x,y)
                  {return _il_(x,y,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 function _ae0_(x,y)
                  {return _im_(x,y,compare,compare,_aeO_[1],_aeP_[1],_aeQ_[1])}
                 return [0,
                         _aeR_,
                         _aeS_,
                         _aeT_,
                         _aeU_,
                         _aeV_,
                         _aeW_,
                         _aeX_,
                         _aeY_,
                         _aeZ_,
                         _ae0_,
                         _hM_([0,_aeS_,_aeT_,_aeU_,_aeV_])]}}}
           (_j__),
          _j9_),
        _j8_),
     _ka_=_j$_[1],
     _kb_=_j$_[2],
     _kc_=_j$_[3],
     _kd_=_j$_[4],
     _ke_=_j$_[5],
     _kf_=_j$_[6],
     _kg_=_j$_[7],
     _kh_=_j$_[8],
     _ki_=_j$_[9],
     _kj_=_j$_[10],
     _kk_=_j$_[11],
     _kl_=
      caml_call1
        (caml_call1
          (caml_call1
            (caml_call1(caml_call1(_gF_([0,_cK_]),[0,_T_]),[0,repr$1]),
             [0,_a6_]),
           [0,_T_]),
         [0,_T_])
       [1],
     _lR_=
      [0,
       caml_call1
         (_iH_
           ([0,
             _ka_,
             _kb_,
             _kc_,
             _kd_,
             _ke_,
             _kf_,
             _kg_,
             _kh_,
             _ki_,
             _kj_,
             _kk_,
             _kl_,
             caml_call1
               (caml_call1
                 (caml_call1
                   (caml_call1(caml_call1(_gN_([0,_cJ_]),[0,_af_]),[0,equal$1]),
                    [0,_bh_]),
                  [0,_af_]),
                [0,_af_])
              [1]]),
          _j7_)
        [1],
       _lQ_],
     _hE_=[0,equal$1],
     _hF_=[0,_af_],
     _lD_=
      [0,
       caml_call1
         (_gG_
           (caml_call1
             (caml_call1
               (caml_call1
                 (caml_call1(caml_call1(_gF_([0,_cK_]),[0,_T_]),[0,repr$1]),
                  [0,_a6_]),
                [0,_T_]),
              [0,_T_])),
          [0,_Ai_])
        [1],
       0],
     _hA_=[0,_Aj_,_Ak_],
     _hB_=[0,_af_],
     _hC_=[0,_af_],
     _hD_=[0,_bh_],
     _hG_=
      caml_call1
       (caml_call1
         (function(_aeI_)
            {return function(_aeJ_)
              {return function(_aeK_)
                {var
                  _aeL_=
                   caml_call1
                     (caml_call1
                       (caml_call1
                         (caml_call1(caml_call1(_gN_([0,_cJ_]),_hF_),_hE_),_aeI_),
                        _aeJ_),
                      _aeK_)
                    [1],
                  _aeM_=
                   [0,
                    _aeL_,
                    function(x,y)
                     {return _gU_(x,y,_hF_[1],_hE_[1],_aeI_[1],_aeJ_[1],_aeK_[1])}],
                  _aeN_=_gO_(_aeM_);
                 return [0,_aeM_[1],_aeM_[2],_aeN_]}}}
           (_hD_),
          _hC_),
        _hB_),
     _hH_=_hG_[1],
     _hI_=_hG_[2],
     _hJ_=_hG_[3],
     _AD_=
      [0,
       _fX_
        (cst_Tuple5,
         [0,
          _fX_
           (cst_Able$4,
            [0,
             _fX_
              (cst_Identifiable$4,
               [0,
                caml_call1
                  (_g0_
                    ([0,
                      _hH_,
                      _hI_,
                      _hJ_,
                      caml_call1
                        (caml_call1
                          (caml_call1
                            (caml_call1(caml_call1(_gF_([0,_cK_]),[0,_T_]),[0,repr$1]),
                             [0,_a6_]),
                           [0,_T_]),
                         [0,_T_])
                       [1]]),
                   _hA_)
                 [1],
                _lD_]),
             _lR_]),
          _AC_]),
       _Am_],
     _AE_=0,
     _AG_=
      [0,_fY_(cst_get_3$0,[246,function(_aeH_){return _gb_(_AF_[4])}]),_AE_],
     _AI_=
      [0,_fY_(cst_get_2$0,[246,function(_aeG_){return _gb_(_AH_[3])}]),_AG_],
     _AK_=
      [0,_fY_(cst_get_1$0,[246,function(_aeF_){return _gb_(_AJ_[2])}]),_AI_],
     _AM_=
      [0,_fY_(cst_get_0$0,[246,function(_aeE_){return _gb_(_AL_[1])}]),_AK_],
     _AP_=
      [0,
       _fY_(cst_flip$4,[246,function(_aeD_){return _gz_(_AO_,_cw_(_AN_))}]),
       _AM_],
     _AR_=
      [0,
       _fY_(cst_make$0,[246,function(_aeC_){return _gz_(_AQ_,[0,1,2,3,4])}]),
       _AP_],
     _lO_=0,
     _jR_=[0,_Ah_,_Af_],
     _jS_=[0,compare],
     _jT_=[0,compare],
     _jU_=
      caml_call1
       (function(_aeo_)
          {return function(_aep_)
            {var
              _aeq_=
               caml_call1
                 (function(_aeA_)
                    {return function(_aeB_)
                      {return [0,
                               function(x,y)
                                {return _cx_(x,y,compare,compare,_aeA_[1],_aeB_[1])}]}}
                   (_aeo_),
                  _aep_)
                [1];
             function _aer_(x,y)
              {return _hV_(x,y,compare,compare,_aeo_[1],_aep_[1])}
             function _aes_(x,y)
              {return _hW_(x,y,compare,compare,_aeo_[1],_aep_[1])}
             function _aet_(x,y)
              {return _hX_(x,y,compare,compare,_aeo_[1],_aep_[1])}
             function _aeu_(x,y)
              {return _hY_(x,y,compare,compare,_aeo_[1],_aep_[1])}
             function _aev_(x,low,high)
              {return _h8_(x,low,high,compare,compare,_aeo_[1],_aep_[1])}
             function _aew_(x,low,high)
              {return _h9_(x,low,high,compare,compare,_aeo_[1],_aep_[1])}
             function _aex_(x,y)
              {return _ih_(x,y,compare,compare,_aeo_[1],_aep_[1])}
             function _aey_(x,y)
              {return _ii_(x,y,compare,compare,_aeo_[1],_aep_[1])}
             function _aez_(x,y)
              {return _ij_(x,y,compare,compare,_aeo_[1],_aep_[1])}
             return [0,
                     _aeq_,
                     _aer_,
                     _aes_,
                     _aet_,
                     _aeu_,
                     _aev_,
                     _aew_,
                     _aex_,
                     _aey_,
                     _aez_,
                     _hM_([0,_aer_,_aes_,_aet_,_aeu_])]}}
         (_jT_),
        _jS_),
     _jV_=_jU_[1],
     _jW_=_jU_[2],
     _jX_=_jU_[3],
     _jY_=_jU_[4],
     _jZ_=_jU_[5],
     _j0_=_jU_[6],
     _j1_=_jU_[7],
     _j2_=_jU_[8],
     _j3_=_jU_[9],
     _j4_=_jU_[10],
     _j5_=_jU_[11],
     _j6_=
      caml_call1
        (caml_call1
          (caml_call1(caml_call1(_gE_([0,_cz_]),[0,_T_]),[0,repr$1]),[0,_a6_]),
         [0,_T_])
       [1],
     _lP_=
      [0,
       caml_call1
         (_iH_
           ([0,
             _jV_,
             _jW_,
             _jX_,
             _jY_,
             _jZ_,
             _j0_,
             _j1_,
             _j2_,
             _j3_,
             _j4_,
             _j5_,
             _j6_,
             caml_call1
               (caml_call1
                 (caml_call1(caml_call1(_gM_([0,_cy_]),[0,_af_]),[0,equal$1]),
                  [0,_bh_]),
                [0,_af_])
              [1]]),
          _jR_)
        [1],
       _lO_],
     _hu_=[0,equal$1],
     _hv_=[0,_af_],
     _lC_=
      [0,
       caml_call1
         (_gG_
           (caml_call1
             (caml_call1
               (caml_call1(caml_call1(_gE_([0,_cz_]),[0,_T_]),[0,repr$1]),
                [0,_a6_]),
              [0,_T_])),
          [0,_Ae_])
        [1],
       0],
     _hr_=[0,_Af_,_Ag_],
     _hs_=[0,_af_],
     _ht_=[0,_bh_],
     _hw_=
      caml_call1
       (function(_aej_)
          {return function(_aek_)
            {var
              _ael_=
               caml_call1
                 (caml_call1
                   (caml_call1(caml_call1(_gM_([0,_cy_]),_hv_),_hu_),_aej_),
                  _aek_)
                [1],
              _aem_=
               [0,
                _ael_,
                function(x,y)
                 {return _gT_(x,y,_hv_[1],_hu_[1],_aej_[1],_aek_[1])}],
              _aen_=_gO_(_aem_);
             return [0,_aem_[1],_aem_[2],_aen_]}}
         (_ht_),
        _hs_),
     _hx_=_hw_[1],
     _hy_=_hw_[2],
     _hz_=_hw_[3],
     _AS_=
      [0,
       _fX_
        (cst_Tuple4,
         [0,
          _fX_
           (cst_Able$3,
            [0,
             _fX_
              (cst_Identifiable$3,
               [0,
                caml_call1
                  (_g0_
                    ([0,
                      _hx_,
                      _hy_,
                      _hz_,
                      caml_call1
                        (caml_call1
                          (caml_call1(caml_call1(_gE_([0,_cz_]),[0,_T_]),[0,repr$1]),
                           [0,_a6_]),
                         [0,_T_])
                       [1]]),
                   _hr_)
                 [1],
                _lC_]),
             _lP_]),
          _AR_]),
       _AD_],
     _AT_=0,
     _AV_=
      [0,_fY_(cst_get_2$1,[246,function(_aei_){return _gb_(_AU_[3])}]),_AT_],
     _AX_=
      [0,_fY_(cst_get_1$1,[246,function(_aeh_){return _gb_(_AW_[2])}]),_AV_],
     _AZ_=
      [0,_fY_(cst_get_0$1,[246,function(_aeg_){return _gb_(_AY_[1])}]),_AX_],
     _A2_=
      [0,
       _fY_(cst_flip$5,[246,function(_aef_){return _gy_(_A1_,_cm_(_A0_))}]),
       _AZ_],
     _A4_=
      [0,
       _fY_(cst_make$1,[246,function(_aee_){return _gy_(_A3_,[0,1,2,3])}]),
       _A2_],
     _lM_=0,
     _jC_=[0,_Ad_,_Ab_],
     _jD_=[0,compare],
     _jE_=
      function(_ad4_)
        {var
          _ad5_=
           function(_aed_)
              {return [0,
                       function(x,y){return _cn_(x,y,compare,compare,_aed_[1])}]}
             (_ad4_)
            [1];
         function _ad6_(x,y){return _hR_(x,y,compare,compare,_ad4_[1])}
         function _ad7_(x,y){return _hS_(x,y,compare,compare,_ad4_[1])}
         function _ad8_(x,y){return _hT_(x,y,compare,compare,_ad4_[1])}
         function _ad9_(x,y){return _hU_(x,y,compare,compare,_ad4_[1])}
         function _ad__(x,low,high)
          {return _h6_(x,low,high,compare,compare,_ad4_[1])}
         function _ad$_(x,low,high)
          {return _h7_(x,low,high,compare,compare,_ad4_[1])}
         function _aea_(x,y){return _ie_(x,y,compare,compare,_ad4_[1])}
         function _aeb_(x,y){return _if_(x,y,compare,compare,_ad4_[1])}
         function _aec_(x,y){return _ig_(x,y,compare,compare,_ad4_[1])}
         return [0,
                 _ad5_,
                 _ad6_,
                 _ad7_,
                 _ad8_,
                 _ad9_,
                 _ad__,
                 _ad$_,
                 _aea_,
                 _aeb_,
                 _aec_,
                 _hM_([0,_ad6_,_ad7_,_ad8_,_ad9_])]}
       (_jD_),
     _jF_=_jE_[1],
     _jG_=_jE_[2],
     _jH_=_jE_[3],
     _jI_=_jE_[4],
     _jJ_=_jE_[5],
     _jK_=_jE_[6],
     _jL_=_jE_[7],
     _jM_=_jE_[8],
     _jN_=_jE_[9],
     _jO_=_jE_[10],
     _jP_=_jE_[11],
     _jQ_=
      caml_call1
        (caml_call1(caml_call1(_gD_([0,_cp_]),[0,_T_]),[0,repr$1]),[0,_a6_])
       [1],
     _lN_=
      [0,
       caml_call1
         (_iH_
           ([0,
             _jF_,
             _jG_,
             _jH_,
             _jI_,
             _jJ_,
             _jK_,
             _jL_,
             _jM_,
             _jN_,
             _jO_,
             _jP_,
             _jQ_,
             caml_call1
               (caml_call1(caml_call1(_gL_([0,_co_]),[0,_af_]),[0,equal$1]),
                [0,_bh_])
              [1]]),
          _jC_)
        [1],
       _lM_],
     _hl_=[0,equal$1],
     _hm_=[0,_af_],
     _lB_=
      [0,
       caml_call1
         (_gG_
           (caml_call1
             (caml_call1(caml_call1(_gD_([0,_cp_]),[0,_T_]),[0,repr$1]),
              [0,_a6_])),
          [0,_Aa_])
        [1],
       0],
     _hj_=[0,_Ab_,_Ac_],
     _hk_=[0,_bh_],
     _hn_=
      function(_ad0_)
        {var
          _ad1_=
           caml_call1(caml_call1(caml_call1(_gL_([0,_co_]),_hm_),_hl_),_ad0_)
            [1],
          _ad2_=
           [0,_ad1_,function(x,y){return _gS_(x,y,_hm_[1],_hl_[1],_ad0_[1])}],
          _ad3_=_gO_(_ad2_);
         return [0,_ad2_[1],_ad2_[2],_ad3_]}
       (_hk_),
     _ho_=_hn_[1],
     _hp_=_hn_[2],
     _hq_=_hn_[3],
     _A5_=
      [0,
       _fX_
        (cst_Tuple3,
         [0,
          _fX_
           (cst_Able$2,
            [0,
             _fX_
              (cst_Identifiable$2,
               [0,
                caml_call1
                  (_g0_
                    ([0,
                      _ho_,
                      _hp_,
                      _hq_,
                      caml_call1
                        (caml_call1(caml_call1(_gD_([0,_cp_]),[0,_T_]),[0,repr$1]),
                         [0,_a6_])
                       [1]]),
                   _hj_)
                 [1],
                _lB_]),
             _lN_]),
          _A4_]),
       _AS_],
     _A6_=0,
     _A8_=
      [0,_fY_(cst_get_1$2,[246,function(_adZ_){return _gb_(_A7_[2])}]),_A6_],
     _A__=
      [0,_fY_(cst_get_0$2,[246,function(_adY_){return _gb_(_A9_[1])}]),_A8_],
     _Bb_=
      [0,
       _fY_(cst_flip$6,[246,function(_adX_){return _gx_(_Ba_,_cd_(_A$_))}]),
       _A__],
     _Bd_=
      [0,
       _fY_(cst_make$2,[246,function(_adW_){return _gx_(_Bc_,[0,1,2])}]),
       _Bb_],
     _lK_=0,
     _jA_=[0,_z$_,_z9_];
    function _hL_(x,y){return _ce_(x,y,compare,compare)}
    function _ix_(x,y){return _hN_(x,y,compare,compare)}
    function _iy_(x,y){return _hO_(x,y,compare,compare)}
    function _iz_(x,y){return _hP_(x,y,compare,compare)}
    function _iA_(x,y){return _hQ_(x,y,compare,compare)}
    function _iB_(x,low,high){return _h4_(x,low,high,compare,compare)}
    function _iC_(x,low,high){return _h5_(x,low,high,compare,compare)}
    function _iD_(x,y){return _ib_(x,y,compare,compare)}
    function _iE_(x,y){return _ic_(x,y,compare,compare)}
    function _iF_(x,y){return _id_(x,y,compare,compare)}
    var
     _iG_=_hM_([0,_ix_,_iy_,_iz_,_iA_]),
     _jB_=caml_call1(caml_call1(_gC_([0,_cg_]),[0,_T_]),[0,repr$1])[1],
     _lL_=
      [0,
       caml_call1
         (_iH_
           ([0,
             _hL_,
             _ix_,
             _iy_,
             _iz_,
             _iA_,
             _iB_,
             _iC_,
             _iD_,
             _iE_,
             _iF_,
             _iG_,
             _jB_,
             caml_call1(caml_call1(_gK_([0,_cf_]),[0,_af_]),[0,equal$1])[1]]),
          _jA_)
        [1],
       _lK_],
     _hh_=[0,equal$1],
     _hi_=[0,_af_],
     _lA_=
      [0,
       caml_call1
         (_gG_(caml_call1(caml_call1(_gC_([0,_cg_]),[0,_T_]),[0,repr$1])),
          [0,_z8_])
        [1],
       0],
     _hg_=[0,_z9_,_z__],
     _gV_=caml_call1(caml_call1(_gK_([0,_cf_]),_hi_),_hh_)[1],
     _gW_=[0,_gV_,function(x,y){return _gR_(x,y,_hi_[1],_hh_[1])}],
     _gX_=_gO_(_gW_),
     _gY_=_gW_[1],
     _gZ_=_gW_[2],
     _Be_=
      _fX_
       (cst_Tuples,
        [0,
         _fX_
          (cst_Tuple2,
           [0,
            _fX_
             (cst_Able$1,
              [0,
               _fX_
                (cst_Identifiable$1,
                 [0,
                  caml_call1
                    (_g0_
                      ([0,
                        _gY_,
                        _gZ_,
                        _gX_,
                        caml_call1(caml_call1(_gC_([0,_cg_]),[0,_T_]),[0,repr$1])[1]]),
                     _hg_)
                   [1],
                  _lA_]),
               _lL_]),
            _Bd_]),
         _A5_]),
     BrokenInvariants=
      caml_set_oo_id
       ([248,cst_General_RedBlackTree_Invariants_BrokenInvariants,0]);
    function repr$5(param)
     {switch(param)
       {case 0:return cst_HasBlackRoot;
        case 1:return cst_IsRedBlack;
        case 2:return cst_IsBlackBalanced;
        default:return cst_IsBinarySearchTree}}
    caml_call1
     (_t_,
      function(param)
       {if(param[1] === BrokenInvariants)
         {var
           broken_invariants=param[2],
           _adS_=function(_adV_){return join_string_list(_Bi_,_adV_)},
           _adT_=
            caml_call2
             (_c9_,
              caml_call2
               (_c9_,
                broken_invariants,
                function(_adU_){return map$0(_adU_,repr$5)}),
              _adS_);
          return [0,caml_call1(_n_(_Bj_),_adT_)]}
        return 0});
    function has_black_root(param)
     {var
       switch$0=
        typeof param === "number"?0 === param?0:1:0 === param[0]?0:1;
      return switch$0?0:1}
    function is_red_black(t)
     {function aux(param)
       {var param$0=param;
        for(;;)
         {if(typeof param$0 === "number")
           {if(0 === param$0)return 1;var switch$0=0}
          else
           switch(param$0[0])
            {case 0:
              var _adN_=param$0[1],r=_adN_[3],l=_adN_[1],switch$0=1;break;
             case 2:
              var _adP_=param$0[1],_adQ_=_adP_[1];
              if(typeof _adQ_ === "number")
               var switch$1=1;
              else
               if(2 === _adQ_[0])
                var switch$0=0,switch$1=0;
               else
                var switch$1=1;
              if(switch$1)
               {var _adR_=_adP_[3];
                if(typeof _adR_ === "number")
                 var switch$2=1;
                else
                 if(2 === _adR_[0])
                  var switch$0=0,switch$2=0;
                 else
                  var switch$2=1;
                if(switch$2)var r=_adR_,l=_adQ_,switch$0=1}
              break;
             default:var switch$0=0}
          if(switch$0)
           {var _adO_=aux(l);if(_adO_){var param$0=r;continue}return _adO_}
          return 0}}
      return aux(t)}
    var black_height=function _adM_(_adL_){return _adM_.fun(_adL_)};
    function common_height(l,r)
     {var match=caml_call1(black_height,l),match$0=caml_call1(black_height,r);
      if(match)
       if(match$0)
        {var hr=match$0[1],hl=match[1];
         if(caml_call2(_de_,hl,hr))return [0,hl]}
      return 0}
    runtime.caml_update_dummy
     (black_height,
      function(param)
       {if(typeof param === "number")
         return 0 === param?_Bk_:_Bl_;
        else
         switch(param[0])
          {case 0:
            var
             match=param[1],
             r=match[3],
             l=match[1],
             _adD_=function(_adK_){return 1 + _adK_ | 0},
             _adE_=function(_adJ_){return func(_adJ_,_adD_)};
            return caml_call2(_c9_,common_height(l,r),_adE_);
           case 1:
            var
             match$0=param[1],
             r$0=match$0[3],
             l$0=match$0[1],
             _adF_=function(_adI_){return 2 + _adI_ | 0},
             _adG_=function(_adH_){return func(_adH_,_adF_)};
            return caml_call2(_c9_,common_height(l$0,r$0),_adG_);
           default:
            var match$1=param[1],r$1=match$1[3],l$1=match$1[1];
            return common_height(l$1,r$1)}});
    function _Bm_(t)
     {return caml_call2(_c9_,caml_call2(_c9_,t,black_height),is_some)}
    function _Bn_(t,cmp)
     {function _ado_(param)
       {var invariant=param[2],predicate=param[1];
        return some_if$0(1 - caml_call1(predicate,t),invariant)}
      function _adp_(_adC_){return filter_map$0(_adC_,_ado_)}
      var
       _adq_=0,
       _adr_=3,
       broken_invariants=
        caml_call2
         (_c9_,
          [0,
           [0,has_black_root,0],
           [0,
            [0,is_red_black,1],
            [0,
             [0,_Bm_,2],
             [0,
              [0,
               function(t)
                {function aux(min,max,param)
                  {var min$0=min,param$0=param;
                   for(;;)
                    {if(typeof param$0 === "number")return 1;
                     var
                      match=param$0[1],
                      r=match[3],
                      v=match[2],
                      l=match[1],
                      _adv_=aux(min$0,[0,v],l);
                     if(_adv_)
                      {var
                        _ads_=
                         function(v)
                           {return function(min)
                             {var match=caml_call2(cmp,v,min);return 2 <= match?1:0}}
                          (v),
                        _adt_=
                         caml_call2
                          (_c9_,
                           min$0,
                           function(_adA_)
                             {return function(_adB_){return value_map(_adB_,1,_adA_)}}
                            (_ads_));
                       if(_adt_)
                        var
                         _adu_=
                          function(v)
                            {return function(max)
                              {var match=caml_call2(cmp,v,max);return 0 === match?1:0}}
                           (v),
                         _adw_=
                          caml_call2
                           (_c9_,
                            max,
                            function(_ady_)
                              {return function(_adz_){return value_map(_adz_,1,_ady_)}}
                             (_adu_));
                       else
                        var _adw_=_adt_;
                       if(_adw_){var min$1=[0,v],min$0=min$1,param$0=r;continue}
                       var _adx_=_adw_}
                     else
                      var _adx_=_adv_;
                     return _adx_}}
                 return aux(0,0,t)},
               _adr_],
              _adq_]]]],
          _adp_);
      return broken_invariants?raise([0,BrokenInvariants,broken_invariants]):t}
    function _Bo_(t)
     {if(typeof t === "number")
       return 0;
      else
       {if(0 === t[0])return t;var node=t[1];return [0,node]}}
    function _Bp_(t)
     {if(typeof t !== "number")
       switch(t[0])
        {case 0:
          var _ade_=t[1],_adf_=_ade_[1];
          if(typeof _adf_ !== "number" && 2 === _adf_[0])
           {var _adg_=_adf_[1],_adh_=_adg_[1];
            if(typeof _adh_ !== "number" && 2 === _adh_[0])
             {var
               d$0=_ade_[3],
               z$0=_ade_[2],
               c$0=_adg_[3],
               y$0=_adg_[2],
               match$0=_adh_[1],
               b$0=match$0[3],
               x$0=match$0[2],
               a=match$0[1];
              return [2,[0,[0,[0,a,x$0,b$0]],y$0,[0,[0,c$0,z$0,d$0]]]]}
            var _adi_=_adg_[3];
            if(typeof _adi_ !== "number" && 2 === _adi_[0])
             {var
               d=_ade_[3],
               z=_ade_[2],
               match=_adi_[1],
               c=match[3],
               y=match[2],
               b=match[1],
               x=_adg_[2];
              return [2,[0,[0,[0,_adh_,x,b]],y,[0,[0,c,z,d]]]]}}
          return t;
         case 1:
          var _adj_=t[1],_adk_=_adj_[1];
          if(typeof _adk_ !== "number" && 2 === _adk_[0])
           {var _adl_=_adk_[1],_adm_=_adl_[1];
            if(typeof _adm_ !== "number" && 2 === _adm_[0])
             {var
               d$2=_adj_[3],
               z$2=_adj_[2],
               c$2=_adl_[3],
               y$2=_adl_[2],
               match$2=_adm_[1],
               b$2=match$2[3],
               x$2=match$2[2],
               a$0=match$2[1];
              return [0,[0,[0,[0,a$0,x$2,b$2]],y$2,[0,[0,c$2,z$2,d$2]]]]}
            var _adn_=_adl_[3];
            if(typeof _adn_ !== "number" && 2 === _adn_[0])
             {var
               d$1=_adj_[3],
               z$1=_adj_[2],
               match$1=_adn_[1],
               c$1=match$1[3],
               y$1=match$1[2],
               b$1=match$1[1],
               x$1=_adl_[2];
              return [0,[0,[0,[0,_adm_,x$1,b$1]],y$1,[0,[0,c$1,z$1,d$1]]]]}}
          return t
         }
      return failure(_Bq_)}
    function _Br_(t)
     {if(typeof t !== "number")
       switch(t[0])
        {case 0:
          var _ac2_=t[1],_ac3_=_ac2_[3],_ac4_=_ac2_[2],_ac5_=_ac2_[1];
          if(typeof _ac3_ !== "number" && 2 === _ac3_[0])
           {var _ac6_=_ac3_[1],_ac7_=_ac6_[1];
            if(typeof _ac7_ !== "number" && 2 === _ac7_[0])
             {var
               d$0=_ac6_[3],
               z$0=_ac6_[2],
               match$0=_ac7_[1],
               c$0=match$0[3],
               y$0=match$0[2],
               b=match$0[1];
              return [2,[0,[0,[0,_ac5_,_ac4_,b]],y$0,[0,[0,c$0,z$0,d$0]]]]}
            var _ac8_=_ac6_[3];
            if(typeof _ac8_ !== "number" && 2 === _ac8_[0])
             {var match=_ac8_[1],d=match[3],z=match[2],c=match[1],y=_ac6_[2];
              return [2,[0,[0,[0,_ac5_,_ac4_,_ac7_]],y,[0,[0,c,z,d]]]]}}
          return t;
         case 1:
          var _ac9_=t[1],_ac__=_ac9_[3],_ac$_=_ac9_[2],_ada_=_ac9_[1];
          if(typeof _ac__ !== "number" && 2 === _ac__[0])
           {var _adb_=_ac__[1],_adc_=_adb_[1];
            if(typeof _adc_ !== "number" && 2 === _adc_[0])
             {var
               d$2=_adb_[3],
               z$2=_adb_[2],
               match$2=_adc_[1],
               c$2=match$2[3],
               y$2=match$2[2],
               b$0=match$2[1];
              return [0,[0,[0,[0,_ada_,_ac$_,b$0]],y$2,[0,[0,c$2,z$2,d$2]]]]}
            var _add_=_adb_[3];
            if(typeof _add_ !== "number" && 2 === _add_[0])
             {var
               match$1=_add_[1],
               d$1=match$1[3],
               z$1=match$1[2],
               c$1=match$1[1],
               y$1=_adb_[2];
              return [0,[0,[0,[0,_ada_,_ac$_,_adc_]],y$1,[0,[0,c$1,z$1,d$1]]]]}}
          return t
         }
      return failure(_Bs_)}
    function _Bt_(t)
     {if(typeof t !== "number")
       switch(t[0])
        {case 0:
          var _acT_=t[1],_acU_=_acT_[1];
          if(typeof _acU_ === "number")
           var switch$0=0;
          else
           switch(_acU_[0])
            {case 1:var switch$0=0;break;
             case 0:
              var _acV_=_acT_[3];
              if(typeof _acV_ === "number")
               {if(0 !== _acV_)
                 {var
                   y=_acT_[2],
                   match=_acU_[1],
                   b=match[3],
                   x=match[2],
                   a=match[1];
                  return _Bp_([1,[0,[2,[0,a,x,b]],y,0]])}
                var switch$0=1}
              else
               var switch$0=1;
              break;
             default:
              var _acW_=_acU_[1],_acX_=_acW_[3];
              if(typeof _acX_ === "number")
               var switch$1=1;
              else
               if(0 === _acX_[0])
                {var _acY_=_acT_[3];
                 if(typeof _acY_ === "number")
                  {if(0 !== _acY_)
                    {var
                      z=_acT_[2],
                      match$0=_acX_[1],
                      c=match$0[3],
                      y$0=match$0[2],
                      b$0=match$0[1],
                      x$0=_acW_[2],
                      a$0=_acW_[1];
                     return [0,[0,a$0,x$0,_Bp_([0,[0,[2,[0,b$0,y$0,c]],z,0]])]]}
                   var switch$0=1,switch$1=0}
                 else
                  var switch$0=1,switch$1=0}
               else
                var switch$1=1;
              if(switch$1)var switch$0=1}
          break;
         case 2:
          var _acZ_=t[1],_ac0_=_acZ_[1];
          if(typeof _ac0_ === "number")
           var switch$2=0;
          else
           if(0 === _ac0_[0])
            {var _ac1_=_acZ_[3];
             if(typeof _ac1_ === "number")
              {if(0 !== _ac1_)
                {var
                  y$1=_acZ_[2],
                  match$1=_ac0_[1],
                  b$1=match$1[3],
                  x$1=match$1[2],
                  a$1=match$1[1];
                 return _Bp_([0,[0,[2,[0,a$1,x$1,b$1]],y$1,0]])}
               var switch$2=1}
             else
              var switch$2=1}
           else
            var switch$2=0;
          break
         }
      return t}
    function _Bu_(t)
     {if(typeof t !== "number")
       switch(t[0])
        {case 0:
          var _acK_=t[1],_acL_=_acK_[1];
          if(typeof _acL_ === "number")
           if(0 !== _acL_)
            {var _acM_=_acK_[3],_acN_=_acK_[2];
             if(typeof _acM_ === "number")
              var switch$0=0;
             else
              switch(_acM_[0])
               {case 1:var switch$0=0;break;
                case 0:
                 var match=_acM_[1],c=match[3],y=match[2],b=match[1];
                 return _Br_([1,[0,0,_acN_,[2,[0,b,y,c]]]]);
                default:
                 var _acO_=_acM_[1],_acP_=_acO_[1];
                 if(typeof _acP_ !== "number" && 0 === _acP_[0])
                  {var
                    d=_acO_[3],
                    z=_acO_[2],
                    match$0=_acP_[1],
                    c$0=match$0[3],
                    y$0=match$0[2],
                    b$0=match$0[1];
                   return [0,[0,_Br_([0,[0,0,_acN_,[2,[0,b$0,y$0,c$0]]]]),z,d]]}
                 var switch$0=1}}
          break;
         case 2:
          var _acQ_=t[1],_acR_=_acQ_[1];
          if(typeof _acR_ === "number")
           if(0 !== _acR_)
            {var _acS_=_acQ_[3];
             if(typeof _acS_ !== "number" && 0 === _acS_[0])
              {var
                match$1=_acS_[1],
                c$1=match$1[3],
                y$1=match$1[2],
                b$1=match$1[1],
                x=_acQ_[2];
               return _Br_([0,[0,0,x,[2,[0,b$1,y$1,c$1]]]])}}
          break
         }
      return t}
    var empty$1=0;
    function add$1(xs,cmp,x)
     {function aux(t)
       {if(typeof t === "number")
         {if(0 === t)return [0,1,[2,[0,0,x,0]]]}
        else
         switch(t[0])
          {case 0:
            var
             match=t[1],
             r=match[3],
             v=match[2],
             l=match[1],
             match$0=caml_call2(cmp,x,v);
            switch(match$0)
             {case 0:
               var match$1=aux(l),l$0=match$1[2],modified=match$1[1];
               return modified?[0,1,_Bp_([0,[0,l$0,v,r]])]:[0,0,t];
              case 1:return [0,0,t];
              default:
               var match$2=aux(r),r$0=match$2[2],modified$0=match$2[1];
               return modified$0?[0,1,_Br_([0,[0,l,v,r$0]])]:[0,0,t]}
           case 2:
            var
             match$3=t[1],
             r$1=match$3[3],
             v$0=match$3[2],
             l$1=match$3[1],
             match$4=caml_call2(cmp,x,v$0);
            switch(match$4)
             {case 0:
               var match$5=aux(l$1),l$2=match$5[2],modified$1=match$5[1];
               return modified$1?[0,1,[2,[0,l$2,v$0,r$1]]]:[0,0,t];
              case 1:return [0,0,t];
              default:
               var match$6=aux(r$1),r$2=match$6[2],modified$2=match$6[1];
               return modified$2?[0,1,[2,[0,l$1,v$0,r$2]]]:[0,0,t]}
           }
        return failure(_Bv_)}
      var
       match=caml_call2(_c9_,xs,aux),
       t=match[2],
       modified=match[1],
       t$0=caml_call2(_c9_,t,_Bo_);
      return [0,modified,t$0]}
    function replace(xs,cmp,x)
     {function aux(param)
       {if(typeof param === "number")
         {if(0 === param)return [2,[0,0,x,0]]}
        else
         switch(param[0])
          {case 0:
            var
             match=param[1],
             r=match[3],
             v=match[2],
             l=match[1],
             match$0=caml_call2(cmp,x,v);
            switch(match$0)
             {case 0:return _Bp_([0,[0,aux(l),v,r]]);
              case 1:return [0,[0,l,x,r]];
              default:return _Br_([0,[0,l,v,aux(r)]])}
           case 2:
            var
             match$1=param[1],
             r$0=match$1[3],
             v$0=match$1[2],
             l$0=match$1[1],
             match$2=caml_call2(cmp,x,v$0);
            switch(match$2)
             {case 0:return [2,[0,aux(l$0),v$0,r$0]];
              case 1:return [2,[0,l$0,x,r$0]];
              default:return [2,[0,l$0,v$0,aux(r$0)]]}
           }
        return failure(_Bw_)}
      return caml_call2(_c9_,caml_call2(_c9_,xs,aux),_Bo_)}
    function remove(xs,cmp,cmp_k,x)
     {function remove_min(param)
       {if(typeof param !== "number")
         switch(param[0])
          {case 0:
            var _acE_=param[1],_acF_=_acE_[1];
            if(typeof _acF_ === "number")
             if(0 === _acF_)
              {var _acG_=_acE_[3],_acH_=_acE_[2];
               if(typeof _acG_ === "number")
                {if(1 !== _acG_)return [0,1,_acH_]}
               else
                if(2 === _acG_[0])
                 {var
                   match$0=_acG_[1],
                   r$0=match$0[3],
                   y=match$0[2],
                   l$0=match$0[1];
                  return [0,[0,[0,l$0,y,r$0]],_acH_]}}
            var
             r=_acE_[3],
             v=_acE_[2],
             match=remove_min(_acF_),
             min=match[2],
             l=match[1],
             t=[0,[0,l,v,r]];
            return [0,_Bu_(t),min];
           case 2:
            var _acI_=param[1],_acJ_=_acI_[1];
            if(typeof _acJ_ === "number")
             if(0 === _acJ_){var r$1=_acI_[3],v$0=_acI_[2];return [0,r$1,v$0]}
            var
             r$2=_acI_[3],
             v$1=_acI_[2],
             match$1=remove_min(_acJ_),
             min$0=match$1[2],
             l$1=match$1[1],
             t$0=[2,[0,l$1,v$1,r$2]];
            return [0,_Bu_(t$0),min$0]
           }
        return failure(_Bx_)}
      function aux(t)
       {if(typeof t === "number")
         {if(0 === t)return _By_}
        else
         switch(t[0])
          {case 0:
            var
             match=t[1],
             r=match[3],
             v=match[2],
             l=match[1],
             match$0=caml_call2(cmp_k,x,v);
            switch(match$0)
             {case 0:
               var match$1=aux(l),l$0=match$1[2],modified=match$1[1];
               return modified?[0,1,_Bu_([0,[0,l$0,v,r]])]:[0,0,t];
              case 1:
               if(typeof r === "number")
                {if(0 === r)
                  {if(typeof l === "number")
                    {if(0 === l)return _BA_}
                   else
                    if(2 === l[0]){var node=l[1];return [0,1,[0,node]]}
                   return failure(_BB_)}}
               else
                if(1 !== r[0])
                 {var match$2=remove_min(r),min=match$2[2],r$0=match$2[1];
                  return [0,1,_Bt_([0,[0,l,min,r$0]])]}
               return failure(_BC_);
              default:
               var match$3=aux(r),r$1=match$3[2],modified$0=match$3[1];
               return modified$0?[0,1,_Bt_([0,[0,l,v,r$1]])]:[0,0,t]}
           case 2:
            var
             match$4=t[1],
             r$2=match$4[3],
             v$0=match$4[2],
             l$1=match$4[1],
             match$5=caml_call2(cmp_k,x,v$0);
            switch(match$5)
             {case 0:
               var match$6=aux(l$1),l$2=match$6[2],modified$1=match$6[1];
               return modified$1?[0,1,_Bu_([2,[0,l$2,v$0,r$2]])]:[0,0,t];
              case 1:
               if(typeof r$2 === "number")
                {if(0 === r$2)return [0,1,l$1]}
               else
                if(0 === r$2[0])
                 {var match$7=remove_min(r$2),min$0=match$7[2],r$3=match$7[1];
                  return [0,1,_Bt_([2,[0,l$1,min$0,r$3]])]}
               return failure(_BD_);
              default:
               var match$8=aux(r$2),r$4=match$8[2],modified$2=match$8[1];
               return modified$2?[0,1,_Bt_([2,[0,l$1,v$0,r$4]])]:[0,0,t]}
           }
        return failure(_Bz_)}
      var
       match=caml_call2(_c9_,xs,aux),
       t=match[2],
       modified=match[1],
       t$0=caml_call2(_c9_,t,_Bo_);
      return [0,modified,t$0]}
    function is_empty$0(param)
     {if(typeof param === "number")if(0 === param)return 1;return 0}
    function try_get(xs,cmp,cmp_k,x)
     {function aux(param)
       {var param$0=param;
        for(;;)
         {if(typeof param$0 === "number")
           {if(0 === param$0)return 0}
          else
           if(1 !== param$0[0])
            {var
              match=param$0[1],
              r=match[3],
              v=match[2],
              l=match[1],
              match$0=caml_call2(cmp_k,x,v);
             switch(match$0)
              {case 0:var param$0=l;continue;
               case 1:return [0,v];
               default:var param$0=r;continue}}
          return failure(_BE_)}}
      return caml_call2(_c9_,xs,aux)}
    function fold$2(xs,cmp,init,f)
     {function aux(acc,param)
       {var acc$0=acc,param$0=param;
        for(;;)
         {if(typeof param$0 === "number")
           {if(0 === param$0)return acc$0}
          else
           if(1 !== param$0[0])
            {var
              match=param$0[1],
              r=match[3],
              v=match[2],
              l=match[1],
              acc$1=caml_call2(f,aux(acc$0,l),v),
              acc$0=acc$1,
              param$0=r;
             continue}
          return failure(_BF_)}}
      return caml_call2(_c9_,xs,function(_acD_){return aux(init,_acD_)})}
    function to_list$2(xs,cmp)
     {return caml_call2
              (_c9_,fold$2(xs,cmp,0,caml_call1(Function2[1],prepend)),reverse)}
    function size$1(xs,cmp)
     {return fold$2(xs,cmp,0,function(n,param){return n + 1 | 0})}
    function repr$4(param)
     {if(typeof param === "number")
       return 0 === param?cst_Empty:cst_EmptyPlus;
      else
       switch(param[0])
        {case 0:
          var
           match=param[1],
           r=match[3],
           v=match[2],
           l=match[1],
           _acu_=repr$4(r),
           _acv_=caml_call1(_T_,v),
           _acw_=repr$4(l);
          return caml_call3(_n_(_Bf_),_acw_,_acv_,_acu_);
         case 1:
          var
           match$0=param[1],
           r$0=match$0[3],
           v$0=match$0[2],
           l$0=match$0[1],
           _acx_=repr$4(r$0),
           _acy_=caml_call1(_T_,v$0),
           _acz_=repr$4(l$0);
          return caml_call3(_n_(_Bg_),_acz_,_acy_,_acx_);
         default:
          var
           match$1=param[1],
           r$1=match$1[3],
           v$1=match$1[2],
           l$1=match$1[1],
           _acA_=repr$4(r$1),
           _acB_=caml_call1(_T_,v$1),
           _acC_=repr$4(l$1);
          return caml_call3(_n_(_Bh_),_acC_,_acB_,_acA_)}}
    function cmp(a,b)
     {var _act_=caml_call1(_U_,b);return compare(caml_call1(_U_,a),_act_)}
    var _BG_=0;
    function make$1(t,expected)
     {var _acr_=[246,function(_acs_){return _ga_(expected,size$1(t,cmp))}];
      return _fY_(repr$4(t),_acr_)}
    var
     _BH_=[0,make$1(bb13br57r9,5),0],
     _BI_=[0,_fX_(cst_size,[0,make$1(empty$1,0),_BH_]),_BG_];
    function make$2(t,expected)
     {var _acp_=[246,function(_acq_){return _gw_(expected,to_list$2(t,cmp))}];
      return _fY_(repr$4(t),_acp_)}
    var
     _BK_=[0,make$2(bb13br57r9,_BJ_),0],
     _BL_=[0,_fX_(cst_to_list$0,[0,make$2(empty$1,0),_BK_]),_BI_];
    function cmp_k(param,y){var x=param[2];return compare(x,y)}
    var
     _BM_=0,
     _BQ_=
      [0,
       _fY_
        (cst_remove,
         [246,
          function(_acm_)
           {var _acn_=remove(_BO_,cmp,cmp_k,_BN_);
            return _f7_
                    (function(_aco_){return _cg_(_aco_,_ao_,repr$4)},_BP_,_acn_)}]),
       _BM_],
     _BT_=
      [0,
       _fX_
        (cst_heterogeneous,
         [0,
          _fY_
           (cst_try_get,
            [246,function(_acl_){return _go_(try_get(_BS_,cmp,cmp_k,_BR_))}]),
          _BQ_]),
       _BL_];
    function make$3(t,x,expected)
     {var
       _acg_=
        [246,
         function(_aci_)
          {var _acj_=remove(t,cmp,cmp,x);
           return _f7_
                   (function(_ack_){return _cg_(_ack_,_ao_,repr$4)},
                    expected,
                    _acj_)}],
       _ach_=repr$4(t);
      return caml_call3(_f0_(_BU_),_ach_,x,_acg_)}
    function make_t(t,x,expected){return make$3(t,x,[0,1,expected])}
    function make_f(t,x){return make$3(t,x,[0,0,t])}
    var
     _BV_=[0,make_f(brbr135b79b11,12),0],
     _BX_=[0,make_t(brbr135b79b11,11,_BW_),_BV_],
     _BY_=[0,make_f(brbr135b79b11,10),_BX_],
     _B0_=[0,make_t(brbr135b79b11,9,_BZ_),_BY_],
     _B1_=[0,make_f(brbr135b79b11,8),_B0_],
     _B3_=[0,make_t(brbr135b79b11,7,_B2_),_B1_],
     _B4_=[0,make_f(brbr135b79b11,6),_B3_],
     _B6_=[0,make_t(brbr135b79b11,5,_B5_),_B4_],
     _B7_=[0,make_f(brbr135b79b11,4),_B6_],
     _B9_=[0,make_t(brbr135b79b11,3,_B8_),_B7_],
     _B__=[0,make_f(brbr135b79b11,2),_B9_],
     _Ca_=[0,make_t(brbr135b79b11,1,_B$_),_B__],
     _Cb_=[0,make_f(brbr135b79b11,0),_Ca_],
     _Cc_=[0,make_f(brb1r35b79b11,12),_Cb_],
     _Ce_=[0,make_t(brb1r35b79b11,11,_Cd_),_Cc_],
     _Cf_=[0,make_f(brb1r35b79b11,10),_Ce_],
     _Ch_=[0,make_t(brb1r35b79b11,9,_Cg_),_Cf_],
     _Ci_=[0,make_f(brb1r35b79b11,8),_Ch_],
     _Ck_=[0,make_t(brb1r35b79b11,7,_Cj_),_Ci_],
     _Cl_=[0,make_f(brb1r35b79b11,6),_Ck_],
     _Cn_=[0,make_t(brb1r35b79b11,5,_Cm_),_Cl_],
     _Co_=[0,make_f(brb1r35b79b11,4),_Cn_],
     _Cq_=[0,make_t(brb1r35b79b11,3,_Cp_),_Co_],
     _Cr_=[0,make_f(brb1r35b79b11,2),_Cq_],
     _Ct_=[0,make_t(brb1r35b79b11,1,_Cs_),_Cr_],
     _Cu_=[0,make_f(brb1r35b79b11,0),_Ct_],
     _Cv_=[0,make_f(brb13br579b11,12),_Cu_],
     _Cx_=[0,make_t(brb13br579b11,11,_Cw_),_Cv_],
     _Cy_=[0,make_f(brb13br579b11,10),_Cx_],
     _CA_=[0,make_t(brb13br579b11,9,_Cz_),_Cy_],
     _CB_=[0,make_f(brb13br579b11,8),_CA_],
     _CD_=[0,make_t(brb13br579b11,7,_CC_),_CB_],
     _CE_=[0,make_f(brb13br579b11,6),_CD_],
     _CG_=[0,make_t(brb13br579b11,5,_CF_),_CE_],
     _CH_=[0,make_f(brb13br579b11,4),_CG_],
     _CJ_=[0,make_t(brb13br579b11,3,_CI_),_CH_],
     _CK_=[0,make_f(brb13br579b11,2),_CJ_],
     _CM_=[0,make_t(brb13br579b11,1,_CL_),_CK_],
     _CN_=[0,make_f(brb13br579b11,0),_CM_],
     _CO_=[0,make_f(brb13b5r79b11,12),_CN_],
     _CQ_=[0,make_t(brb13b5r79b11,11,_CP_),_CO_],
     _CR_=[0,make_f(brb13b5r79b11,10),_CQ_],
     _CT_=[0,make_t(brb13b5r79b11,9,_CS_),_CR_],
     _CU_=[0,make_f(brb13b5r79b11,8),_CT_],
     _CW_=[0,make_t(brb13b5r79b11,7,_CV_),_CU_],
     _CX_=[0,make_f(brb13b5r79b11,6),_CW_],
     _CZ_=[0,make_t(brb13b5r79b11,5,_CY_),_CX_],
     _C0_=[0,make_f(brb13b5r79b11,4),_CZ_],
     _C2_=[0,make_t(brb13b5r79b11,3,_C1_),_C0_],
     _C3_=[0,make_f(brb13b5r79b11,2),_C2_],
     _C5_=[0,make_t(brb13b5r79b11,1,_C4_),_C3_],
     _C6_=[0,make_f(brb13b5r79b11,0),_C5_],
     _C7_=[0,make_f(brb13b57br911,12),_C6_],
     _C9_=[0,make_t(brb13b57br911,11,_C8_),_C7_],
     _C__=[0,make_f(brb13b57br911,10),_C9_],
     _Da_=[0,make_t(brb13b57br911,9,_C$_),_C__],
     _Db_=[0,make_f(brb13b57br911,8),_Da_],
     _Dd_=[0,make_t(brb13b57br911,7,_Dc_),_Db_],
     _De_=[0,make_f(brb13b57br911,6),_Dd_],
     _Dg_=[0,make_t(brb13b57br911,5,_Df_),_De_],
     _Dh_=[0,make_f(brb13b57br911,4),_Dg_],
     _Dj_=[0,make_t(brb13b57br911,3,_Di_),_Dh_],
     _Dk_=[0,make_f(brb13b57br911,2),_Dj_],
     _Dm_=[0,make_t(brb13b57br911,1,_Dl_),_Dk_],
     _Dn_=[0,make_f(brb13b57br911,0),_Dm_],
     _Do_=[0,make_f(brb13b57b9r11,12),_Dn_],
     _Dq_=[0,make_t(brb13b57b9r11,11,_Dp_),_Do_],
     _Dr_=[0,make_f(brb13b57b9r11,10),_Dq_],
     _Dt_=[0,make_t(brb13b57b9r11,9,_Ds_),_Dr_],
     _Du_=[0,make_f(brb13b57b9r11,8),_Dt_],
     _Dw_=[0,make_t(brb13b57b9r11,7,_Dv_),_Du_],
     _Dx_=[0,make_f(brb13b57b9r11,6),_Dw_],
     _Dz_=[0,make_t(brb13b57b9r11,5,_Dy_),_Dx_],
     _DA_=[0,make_f(brb13b57b9r11,4),_Dz_],
     _DC_=[0,make_t(brb13b57b9r11,3,_DB_),_DA_],
     _DD_=[0,make_f(brb13b57b9r11,2),_DC_],
     _DF_=[0,make_t(brb13b57b9r11,1,_DE_),_DD_],
     _DG_=[0,make_f(brb13b57b9r11,0),_DF_],
     _DH_=[0,make_f(bbr13r57br911,12),_DG_],
     _DJ_=[0,make_t(bbr13r57br911,11,_DI_),_DH_],
     _DK_=[0,make_f(bbr13r57br911,10),_DJ_],
     _DM_=[0,make_t(bbr13r57br911,9,_DL_),_DK_],
     _DN_=[0,make_f(bbr13r57br911,8),_DM_],
     _DP_=[0,make_t(bbr13r57br911,7,_DO_),_DN_],
     _DQ_=[0,make_f(bbr13r57br911,6),_DP_],
     _DS_=[0,make_t(bbr13r57br911,5,_DR_),_DQ_],
     _DT_=[0,make_f(bbr13r57br911,4),_DS_],
     _DV_=[0,make_t(bbr13r57br911,3,_DU_),_DT_],
     _DW_=[0,make_f(bbr13r57br911,2),_DV_],
     _DY_=[0,make_t(bbr13r57br911,1,_DX_),_DW_],
     _DZ_=[0,make_f(bbr13r57br911,0),_DY_],
     _D0_=[0,make_f(bbr13r57b9r11,12),_DZ_],
     _D2_=[0,make_t(bbr13r57b9r11,11,_D1_),_D0_],
     _D3_=[0,make_f(bbr13r57b9r11,10),_D2_],
     _D5_=[0,make_t(bbr13r57b9r11,9,_D4_),_D3_],
     _D6_=[0,make_f(bbr13r57b9r11,8),_D5_],
     _D8_=[0,make_t(bbr13r57b9r11,7,_D7_),_D6_],
     _D9_=[0,make_f(bbr13r57b9r11,6),_D8_],
     _D$_=[0,make_t(bbr13r57b9r11,5,_D__),_D9_],
     _Ea_=[0,make_f(bbr13r57b9r11,4),_D$_],
     _Ec_=[0,make_t(bbr13r57b9r11,3,_Eb_),_Ea_],
     _Ed_=[0,make_f(bbr13r57b9r11,2),_Ec_],
     _Ef_=[0,make_t(bbr13r57b9r11,1,_Ee_),_Ed_],
     _Eg_=[0,make_f(bbr13r57b9r11,0),_Ef_],
     _Eh_=[0,make_f(bbr135rb79b11,12),_Eg_],
     _Ej_=[0,make_t(bbr135rb79b11,11,_Ei_),_Eh_],
     _Ek_=[0,make_f(bbr135rb79b11,10),_Ej_],
     _Em_=[0,make_t(bbr135rb79b11,9,_El_),_Ek_],
     _En_=[0,make_f(bbr135rb79b11,8),_Em_],
     _Ep_=[0,make_t(bbr135rb79b11,7,_Eo_),_En_],
     _Eq_=[0,make_f(bbr135rb79b11,6),_Ep_],
     _Es_=[0,make_t(bbr135rb79b11,5,_Er_),_Eq_],
     _Et_=[0,make_f(bbr135rb79b11,4),_Es_],
     _Ev_=[0,make_t(bbr135rb79b11,3,_Eu_),_Et_],
     _Ew_=[0,make_f(bbr135rb79b11,2),_Ev_],
     _Ey_=[0,make_t(bbr135rb79b11,1,_Ex_),_Ew_],
     _Ez_=[0,make_f(bbr135rb79b11,0),_Ey_],
     _EA_=[0,make_f(bbr135br79r11,12),_Ez_],
     _EC_=[0,make_t(bbr135br79r11,11,_EB_),_EA_],
     _ED_=[0,make_f(bbr135br79r11,10),_EC_],
     _EF_=[0,make_t(bbr135br79r11,9,_EE_),_ED_],
     _EG_=[0,make_f(bbr135br79r11,8),_EF_],
     _EI_=[0,make_t(bbr135br79r11,7,_EH_),_EG_],
     _EJ_=[0,make_f(bbr135br79r11,6),_EI_],
     _EL_=[0,make_t(bbr135br79r11,5,_EK_),_EJ_],
     _EM_=[0,make_f(bbr135br79r11,4),_EL_],
     _EO_=[0,make_t(bbr135br79r11,3,_EN_),_EM_],
     _EP_=[0,make_f(bbr135br79r11,2),_EO_],
     _ER_=[0,make_t(bbr135br79r11,1,_EQ_),_EP_],
     _ES_=[0,make_f(bbr135br79r11,0),_ER_],
     _ET_=[0,make_f(bb1r35rb79b11,12),_ES_],
     _EV_=[0,make_t(bb1r35rb79b11,11,_EU_),_ET_],
     _EW_=[0,make_f(bb1r35rb79b11,10),_EV_],
     _EY_=[0,make_t(bb1r35rb79b11,9,_EX_),_EW_],
     _EZ_=[0,make_f(bb1r35rb79b11,8),_EY_],
     _E1_=[0,make_t(bb1r35rb79b11,7,_E0_),_EZ_],
     _E2_=[0,make_f(bb1r35rb79b11,6),_E1_],
     _E4_=[0,make_t(bb1r35rb79b11,5,_E3_),_E2_],
     _E5_=[0,make_f(bb1r35rb79b11,4),_E4_],
     _E7_=[0,make_t(bb1r35rb79b11,3,_E6_),_E5_],
     _E8_=[0,make_f(bb1r35rb79b11,2),_E7_],
     _E__=[0,make_t(bb1r35rb79b11,1,_E9_),_E8_],
     _E$_=[0,make_f(bb1r35rb79b11,0),_E__],
     _Fa_=[0,make_f(bb1r35br79r11,12),_E$_],
     _Fc_=[0,make_t(bb1r35br79r11,11,_Fb_),_Fa_],
     _Fd_=[0,make_f(bb1r35br79r11,10),_Fc_],
     _Ff_=[0,make_t(bb1r35br79r11,9,_Fe_),_Fd_],
     _Fg_=[0,make_f(bb1r35br79r11,8),_Ff_],
     _Fi_=[0,make_t(bb1r35br79r11,7,_Fh_),_Fg_],
     _Fj_=[0,make_f(bb1r35br79r11,6),_Fi_],
     _Fl_=[0,make_t(bb1r35br79r11,5,_Fk_),_Fj_],
     _Fm_=[0,make_f(bb1r35br79r11,4),_Fl_],
     _Fo_=[0,make_t(bb1r35br79r11,3,_Fn_),_Fm_],
     _Fp_=[0,make_f(bb1r35br79r11,2),_Fo_],
     _Fr_=[0,make_t(bb1r35br79r11,1,_Fq_),_Fp_],
     _Fs_=[0,make_f(bb1r35br79r11,0),_Fr_],
     _Ft_=[0,make_f(bb13rbr579b11,12),_Fs_],
     _Fv_=[0,make_t(bb13rbr579b11,11,_Fu_),_Ft_],
     _Fw_=[0,make_f(bb13rbr579b11,10),_Fv_],
     _Fy_=[0,make_t(bb13rbr579b11,9,_Fx_),_Fw_],
     _Fz_=[0,make_f(bb13rbr579b11,8),_Fy_],
     _FB_=[0,make_t(bb13rbr579b11,7,_FA_),_Fz_],
     _FC_=[0,make_f(bb13rbr579b11,6),_FB_],
     _FE_=[0,make_t(bb13rbr579b11,5,_FD_),_FC_],
     _FF_=[0,make_f(bb13rbr579b11,4),_FE_],
     _FH_=[0,make_t(bb13rbr579b11,3,_FG_),_FF_],
     _FI_=[0,make_f(bb13rbr579b11,2),_FH_],
     _FK_=[0,make_t(bb13rbr579b11,1,_FJ_),_FI_],
     _FL_=[0,make_f(bb13rbr579b11,0),_FK_],
     _FM_=[0,make_f(bb13rb5r79b11,12),_FL_],
     _FO_=[0,make_t(bb13rb5r79b11,11,_FN_),_FM_],
     _FP_=[0,make_f(bb13rb5r79b11,10),_FO_],
     _FR_=[0,make_t(bb13rb5r79b11,9,_FQ_),_FP_],
     _FS_=[0,make_f(bb13rb5r79b11,8),_FR_],
     _FU_=[0,make_t(bb13rb5r79b11,7,_FT_),_FS_],
     _FV_=[0,make_f(bb13rb5r79b11,6),_FU_],
     _FX_=[0,make_t(bb13rb5r79b11,5,_FW_),_FV_],
     _FY_=[0,make_f(bb13rb5r79b11,4),_FX_],
     _F0_=[0,make_t(bb13rb5r79b11,3,_FZ_),_FY_],
     _F1_=[0,make_f(bb13rb5r79b11,2),_F0_],
     _F3_=[0,make_t(bb13rb5r79b11,1,_F2_),_F1_],
     _F4_=[0,make_f(bb13rb5r79b11,0),_F3_],
     _F5_=[0,make_f(bb13rb57br911,12),_F4_],
     _F7_=[0,make_t(bb13rb57br911,11,_F6_),_F5_],
     _F8_=[0,make_f(bb13rb57br911,10),_F7_],
     _F__=[0,make_t(bb13rb57br911,9,_F9_),_F8_],
     _F$_=[0,make_f(bb13rb57br911,8),_F__],
     _Gb_=[0,make_t(bb13rb57br911,7,_Ga_),_F$_],
     _Gc_=[0,make_f(bb13rb57br911,6),_Gb_],
     _Ge_=[0,make_t(bb13rb57br911,5,_Gd_),_Gc_],
     _Gf_=[0,make_f(bb13rb57br911,4),_Ge_],
     _Gh_=[0,make_t(bb13rb57br911,3,_Gg_),_Gf_],
     _Gi_=[0,make_f(bb13rb57br911,2),_Gh_],
     _Gk_=[0,make_t(bb13rb57br911,1,_Gj_),_Gi_],
     _Gl_=[0,make_f(bb13rb57br911,0),_Gk_],
     _Gm_=[0,make_f(bb13rb57b9r11,12),_Gl_],
     _Go_=[0,make_t(bb13rb57b9r11,11,_Gn_),_Gm_],
     _Gp_=[0,make_f(bb13rb57b9r11,10),_Go_],
     _Gr_=[0,make_t(bb13rb57b9r11,9,_Gq_),_Gp_],
     _Gs_=[0,make_f(bb13rb57b9r11,8),_Gr_],
     _Gu_=[0,make_t(bb13rb57b9r11,7,_Gt_),_Gs_],
     _Gv_=[0,make_f(bb13rb57b9r11,6),_Gu_],
     _Gx_=[0,make_t(bb13rb57b9r11,5,_Gw_),_Gv_],
     _Gy_=[0,make_f(bb13rb57b9r11,4),_Gx_],
     _GA_=[0,make_t(bb13rb57b9r11,3,_Gz_),_Gy_],
     _GB_=[0,make_f(bb13rb57b9r11,2),_GA_],
     _GD_=[0,make_t(bb13rb57b9r11,1,_GC_),_GB_],
     _GE_=[0,make_f(bb13rb57b9r11,0),_GD_],
     _GF_=[0,make_f(brb13b57b9,10),_GE_],
     _GH_=[0,make_t(brb13b57b9,9,_GG_),_GF_],
     _GI_=[0,make_f(brb13b57b9,8),_GH_],
     _GK_=[0,make_t(brb13b57b9,7,_GJ_),_GI_],
     _GL_=[0,make_f(brb13b57b9,6),_GK_],
     _GN_=[0,make_t(brb13b57b9,5,_GM_),_GL_],
     _GO_=[0,make_f(brb13b57b9,4),_GN_],
     _GQ_=[0,make_t(brb13b57b9,3,_GP_),_GO_],
     _GR_=[0,make_f(brb13b57b9,2),_GQ_],
     _GT_=[0,make_t(brb13b57b9,1,_GS_),_GR_],
     _GU_=[0,make_f(brb13b57b9,0),_GT_],
     _GV_=[0,make_f(bbr13r57b9,10),_GU_],
     _GX_=[0,make_t(bbr13r57b9,9,_GW_),_GV_],
     _GY_=[0,make_f(bbr13r57b9,8),_GX_],
     _G0_=[0,make_t(bbr13r57b9,7,_GZ_),_GY_],
     _G1_=[0,make_f(bbr13r57b9,6),_G0_],
     _G3_=[0,make_t(bbr13r57b9,5,_G2_),_G1_],
     _G4_=[0,make_f(bbr13r57b9,4),_G3_],
     _G6_=[0,make_t(bbr13r57b9,3,_G5_),_G4_],
     _G7_=[0,make_f(bbr13r57b9,2),_G6_],
     _G9_=[0,make_t(bbr13r57b9,1,_G8_),_G7_],
     _G__=[0,make_f(bbr13r57b9,0),_G9_],
     _G$_=[0,make_f(bbr135br79,10),_G__],
     _Hb_=[0,make_t(bbr135br79,9,_Ha_),_G$_],
     _Hc_=[0,make_f(bbr135br79,8),_Hb_],
     _He_=[0,make_t(bbr135br79,7,_Hd_),_Hc_],
     _Hf_=[0,make_f(bbr135br79,6),_He_],
     _Hh_=[0,make_t(bbr135br79,5,_Hg_),_Hf_],
     _Hi_=[0,make_f(bbr135br79,4),_Hh_],
     _Hk_=[0,make_t(bbr135br79,3,_Hj_),_Hi_],
     _Hl_=[0,make_f(bbr135br79,2),_Hk_],
     _Hn_=[0,make_t(bbr135br79,1,_Hm_),_Hl_],
     _Ho_=[0,make_f(bbr135br79,0),_Hn_],
     _Hp_=[0,make_f(bbr135b7r9,10),_Ho_],
     _Hr_=[0,make_t(bbr135b7r9,9,_Hq_),_Hp_],
     _Hs_=[0,make_f(bbr135b7r9,8),_Hr_],
     _Hu_=[0,make_t(bbr135b7r9,7,_Ht_),_Hs_],
     _Hv_=[0,make_f(bbr135b7r9,6),_Hu_],
     _Hx_=[0,make_t(bbr135b7r9,5,_Hw_),_Hv_],
     _Hy_=[0,make_f(bbr135b7r9,4),_Hx_],
     _HA_=[0,make_t(bbr135b7r9,3,_Hz_),_Hy_],
     _HB_=[0,make_f(bbr135b7r9,2),_HA_],
     _HD_=[0,make_t(bbr135b7r9,1,_HC_),_HB_],
     _HE_=[0,make_f(bbr135b7r9,0),_HD_],
     _HF_=[0,make_f(bb1r35br79,10),_HE_],
     _HH_=[0,make_t(bb1r35br79,9,_HG_),_HF_],
     _HI_=[0,make_f(bb1r35br79,8),_HH_],
     _HK_=[0,make_t(bb1r35br79,7,_HJ_),_HI_],
     _HL_=[0,make_f(bb1r35br79,6),_HK_],
     _HN_=[0,make_t(bb1r35br79,5,_HM_),_HL_],
     _HO_=[0,make_f(bb1r35br79,4),_HN_],
     _HQ_=[0,make_t(bb1r35br79,3,_HP_),_HO_],
     _HR_=[0,make_f(bb1r35br79,2),_HQ_],
     _HT_=[0,make_t(bb1r35br79,1,_HS_),_HR_],
     _HU_=[0,make_f(bb1r35br79,0),_HT_],
     _HV_=[0,make_f(bb1r35b7r9,10),_HU_],
     _HX_=[0,make_t(bb1r35b7r9,9,_HW_),_HV_],
     _HY_=[0,make_f(bb1r35b7r9,8),_HX_],
     _H0_=[0,make_t(bb1r35b7r9,7,_HZ_),_HY_],
     _H1_=[0,make_f(bb1r35b7r9,6),_H0_],
     _H3_=[0,make_t(bb1r35b7r9,5,_H2_),_H1_],
     _H4_=[0,make_f(bb1r35b7r9,4),_H3_],
     _H6_=[0,make_t(bb1r35b7r9,3,_H5_),_H4_],
     _H7_=[0,make_f(bb1r35b7r9,2),_H6_],
     _H9_=[0,make_t(bb1r35b7r9,1,_H8_),_H7_],
     _H__=[0,make_f(bb1r35b7r9,0),_H9_],
     _H$_=[0,make_f(bb13rb57b9,10),_H__],
     _Ib_=[0,make_t(bb13rb57b9,9,_Ia_),_H$_],
     _Ic_=[0,make_f(bb13rb57b9,8),_Ib_],
     _Ie_=[0,make_t(bb13rb57b9,7,_Id_),_Ic_],
     _If_=[0,make_f(bb13rb57b9,6),_Ie_],
     _Ih_=[0,make_t(bb13rb57b9,5,_Ig_),_If_],
     _Ii_=[0,make_f(bb13rb57b9,4),_Ih_],
     _Ik_=[0,make_t(bb13rb57b9,3,_Ij_),_Ii_],
     _Il_=[0,make_f(bb13rb57b9,2),_Ik_],
     _In_=[0,make_t(bb13rb57b9,1,_Im_),_Il_],
     _Io_=[0,make_f(bb13rb57b9,0),_In_],
     _Ip_=[0,make_f(bb13br57r9,10),_Io_],
     _Ir_=[0,make_t(bb13br57r9,9,_Iq_),_Ip_],
     _Is_=[0,make_f(bb13br57r9,8),_Ir_],
     _Iu_=[0,make_t(bb13br57r9,7,_It_),_Is_],
     _Iv_=[0,make_f(bb13br57r9,6),_Iu_],
     _Ix_=[0,make_t(bb13br57r9,5,_Iw_),_Iv_],
     _Iy_=[0,make_f(bb13br57r9,4),_Ix_],
     _IA_=[0,make_t(bb13br57r9,3,_Iz_),_Iy_],
     _IB_=[0,make_f(bb13br57r9,2),_IA_],
     _ID_=[0,make_t(bb13br57r9,1,_IC_),_IB_],
     _IE_=[0,make_f(bb13br57r9,0),_ID_],
     _IF_=[0,make_f(bbr135b7,8),_IE_],
     _IH_=[0,make_t(bbr135b7,7,_IG_),_IF_],
     _II_=[0,make_f(bbr135b7,6),_IH_],
     _IK_=[0,make_t(bbr135b7,5,_IJ_),_II_],
     _IL_=[0,make_f(bbr135b7,4),_IK_],
     _IN_=[0,make_t(bbr135b7,3,_IM_),_IL_],
     _IO_=[0,make_f(bbr135b7,2),_IN_],
     _IQ_=[0,make_t(bbr135b7,1,_IP_),_IO_],
     _IR_=[0,make_f(bbr135b7,0),_IQ_],
     _IS_=[0,make_f(bb1r35b7,8),_IR_],
     _IU_=[0,make_t(bb1r35b7,7,_IT_),_IS_],
     _IV_=[0,make_f(bb1r35b7,6),_IU_],
     _IX_=[0,make_t(bb1r35b7,5,_IW_),_IV_],
     _IY_=[0,make_f(bb1r35b7,4),_IX_],
     _I0_=[0,make_t(bb1r35b7,3,_IZ_),_IY_],
     _I1_=[0,make_f(bb1r35b7,2),_I0_],
     _I3_=[0,make_t(bb1r35b7,1,_I2_),_I1_],
     _I4_=[0,make_f(bb1r35b7,0),_I3_],
     _I5_=[0,make_f(bb13br57,8),_I4_],
     _I7_=[0,make_t(bb13br57,7,_I6_),_I5_],
     _I8_=[0,make_f(bb13br57,6),_I7_],
     _I__=[0,make_t(bb13br57,5,_I9_),_I8_],
     _I$_=[0,make_f(bb13br57,4),_I__],
     _Jb_=[0,make_t(bb13br57,3,_Ja_),_I$_],
     _Jc_=[0,make_f(bb13br57,2),_Jb_],
     _Je_=[0,make_t(bb13br57,1,_Jd_),_Jc_],
     _Jf_=[0,make_f(bb13br57,0),_Je_],
     _Jg_=[0,make_f(bb13b5r7,8),_Jf_],
     _Ji_=[0,make_t(bb13b5r7,7,_Jh_),_Jg_],
     _Jj_=[0,make_f(bb13b5r7,6),_Ji_],
     _Jl_=[0,make_t(bb13b5r7,5,_Jk_),_Jj_],
     _Jm_=[0,make_f(bb13b5r7,4),_Jl_],
     _Jo_=[0,make_t(bb13b5r7,3,_Jn_),_Jm_],
     _Jp_=[0,make_f(bb13b5r7,2),_Jo_],
     _Jr_=[0,make_t(bb13b5r7,1,_Jq_),_Jp_],
     _Js_=[0,make_f(bb13b5r7,0),_Jr_],
     _Jt_=[0,make_f(br13r5,6),_Js_],
     _Jv_=[0,make_t(br13r5,5,_Ju_),_Jt_],
     _Jw_=[0,make_f(br13r5,4),_Jv_],
     _Jy_=[0,make_t(br13r5,3,_Jx_),_Jw_],
     _Jz_=[0,make_f(br13r5,2),_Jy_],
     _JB_=[0,make_t(br13r5,1,_JA_),_Jz_],
     _JC_=[0,make_f(br13r5,0),_JB_],
     _JD_=[0,make_f(bb13b5,6),_JC_],
     _JF_=[0,make_t(bb13b5,5,_JE_),_JD_],
     _JG_=[0,make_f(bb13b5,4),_JF_],
     _JI_=[0,make_t(bb13b5,3,_JH_),_JG_],
     _JJ_=[0,make_f(bb13b5,2),_JI_],
     _JL_=[0,make_t(bb13b5,1,_JK_),_JJ_],
     _JM_=[0,make_f(bb13b5,0),_JL_],
     _JN_=[0,make_f(br13,4),_JM_],
     _JP_=[0,make_t(br13,3,_JO_),_JN_],
     _JQ_=[0,make_f(br13,2),_JP_],
     _JS_=[0,make_t(br13,1,_JR_),_JQ_],
     _JT_=[0,make_f(br13,0),_JS_],
     _JU_=[0,make_f(b1r3,4),_JT_],
     _JW_=[0,make_t(b1r3,3,_JV_),_JU_],
     _JX_=[0,make_f(b1r3,2),_JW_],
     _JZ_=[0,make_t(b1r3,1,_JY_),_JX_],
     _J0_=[0,make_f(b1r3,0),_JZ_],
     _J1_=[0,make_f(b1,2),_J0_],
     _J2_=[0,make_t(b1,1,0),_J1_],
     _J3_=[0,make_f(b1,0),_J2_],
     _J4_=[0,_fX_(cst_remove$0,[0,make_f(0,0),_J3_]),_BT_],
     _J5_=0,
     _J6_=
      [0,
       _fY_
        (cst_not_empty,
         [246,function(_acf_){return _f__(is_empty$0(bb13b5r7))}]),
       _J5_],
     _J7_=
      [0,
       _fX_
        (cst_is_empty,
         [0,
          _fY_(cst_empty,[246,function(_ace_){return _f9_(is_empty$0(0))}]),
          _J6_]),
       _J4_];
    function make$4(t,x,expected)
     {var
       _acb_=[246,function(_acd_){return _gm_(expected,try_get(t,cmp,cmp,x))}],
       _acc_=repr$4(t);
      return caml_call3(_f0_(_J8_),_acc_,x,_acb_)}
    function make_t$0(t,x){return make$4(t,x,[0,caml_call1(_U_,x)])}
    function make_f$0(t,x){return make$4(t,x,0)}
    var
     _J9_=[0,make_f$0(br13r5,6),0],
     _J__=[0,make_t$0(br13r5,5),_J9_],
     _J$_=[0,make_f$0(br13r5,4),_J__],
     _Ka_=[0,make_t$0(br13r5,3),_J$_],
     _Kb_=[0,make_f$0(br13r5,2),_Ka_],
     _Kc_=[0,make_t$0(br13r5,1),_Kb_],
     _Kd_=[0,make_f$0(br13r5,0),_Kc_],
     _Ke_=[0,make_t$0(br13r5,-1),_Kd_],
     _Kf_=[0,make_f$0(br13r5,-2),_Ke_],
     _Kg_=[0,make_t$0(br13r5,-3),_Kf_],
     _Kh_=[0,make_f$0(br13r5,-4),_Kg_],
     _Ki_=[0,make_t$0(br13r5,-5),_Kh_],
     _Kj_=[0,_fX_(cst_try_get$0,[0,make_f$0(br13r5,-6),_Ki_]),_J7_];
    function make$5(t,x,expected)
     {var
       _ab__=
        [246,function(_aca_){return _f7_(repr$4,expected,replace(t,cmp,x))}],
       _ab$_=repr$4(t);
      return caml_call3(_f0_(_Kk_),_ab$_,x,_ab__)}
    var
     _Km_=[0,make$5(br13,4,_Kl_),0],
     _Ko_=[0,make$5(br13,3,_Kn_),_Km_],
     _Kq_=[0,make$5(br13,2,_Kp_),_Ko_],
     _Ks_=[0,make$5(br13,1,_Kr_),_Kq_],
     _Ku_=[0,make$5(br13,0,_Kt_),_Ks_],
     _Kw_=[0,make$5(br13,-1,_Kv_),_Ku_],
     _Ky_=[0,make$5(br13,-2,_Kx_),_Kw_],
     _KA_=[0,make$5(br13,-3,_Kz_),_Ky_],
     _KC_=[0,make$5(br13,-4,_KB_),_KA_],
     _KE_=[0,make$5(b1r3,4,_KD_),_KC_],
     _KG_=[0,make$5(b1r3,3,_KF_),_KE_],
     _KI_=[0,make$5(b1r3,2,_KH_),_KG_],
     _KK_=[0,make$5(b1r3,1,_KJ_),_KI_],
     _KM_=[0,make$5(b1r3,0,_KL_),_KK_],
     _KO_=[0,make$5(b1r3,-1,_KN_),_KM_],
     _KQ_=[0,make$5(b1r3,-2,_KP_),_KO_],
     _KS_=[0,make$5(b1r3,-3,_KR_),_KQ_],
     _KU_=[0,make$5(b1r3,-4,_KT_),_KS_],
     _KW_=[0,make$5(b1,2,_KV_),_KU_],
     _KY_=[0,make$5(b1,1,_KX_),_KW_],
     _K0_=[0,make$5(b1,0,_KZ_),_KY_],
     _K2_=[0,make$5(b1,-1,_K1_),_K0_],
     _K4_=[0,make$5(b1,-2,_K3_),_K2_],
     _K6_=[0,_fX_(cst_replace,[0,make$5(0,0,_K5_),_K4_]),_Kj_];
    function make$6(t,x,expected)
     {var
       _ab5_=
        [246,
         function(_ab7_)
          {var _ab8_=add$1(t,cmp,x);
           return _f7_
                   (function(_ab9_){return _cg_(_ab9_,_ao_,repr$4)},
                    expected,
                    _ab8_)}],
       _ab6_=repr$4(t);
      return caml_call3(_f0_(_K7_),_ab6_,x,_ab5_)}
    function make_t$1(t,x,expected){return make$6(t,x,[0,1,expected])}
    function make_f$1(t,x){return make$6(t,x,[0,0,t])}
    var
     _K9_=[0,make_t$1(brb13b57b9,10,_K8_),0],
     _K__=[0,make_f$1(brb13b57b9,9),_K9_],
     _La_=[0,make_t$1(brb13b57b9,8,_K$_),_K__],
     _Lb_=[0,make_f$1(brb13b57b9,7),_La_],
     _Ld_=[0,make_t$1(brb13b57b9,6,_Lc_),_Lb_],
     _Le_=[0,make_f$1(brb13b57b9,5),_Ld_],
     _Lg_=[0,make_t$1(brb13b57b9,4,_Lf_),_Le_],
     _Lh_=[0,make_f$1(brb13b57b9,3),_Lg_],
     _Lj_=[0,make_t$1(brb13b57b9,2,_Li_),_Lh_],
     _Lk_=[0,make_f$1(brb13b57b9,1),_Lj_],
     _Lm_=[0,make_t$1(brb13b57b9,0,_Ll_),_Lk_],
     _Lo_=[0,make_t$1(bbr13r57b9,10,_Ln_),_Lm_],
     _Lp_=[0,make_f$1(bbr13r57b9,9),_Lo_],
     _Lr_=[0,make_t$1(bbr13r57b9,8,_Lq_),_Lp_],
     _Ls_=[0,make_f$1(bbr13r57b9,7),_Lr_],
     _Lu_=[0,make_t$1(bbr13r57b9,6,_Lt_),_Ls_],
     _Lv_=[0,make_f$1(bbr13r57b9,5),_Lu_],
     _Lx_=[0,make_t$1(bbr13r57b9,4,_Lw_),_Lv_],
     _Ly_=[0,make_f$1(bbr13r57b9,3),_Lx_],
     _LA_=[0,make_t$1(bbr13r57b9,2,_Lz_),_Ly_],
     _LB_=[0,make_f$1(bbr13r57b9,1),_LA_],
     _LD_=[0,make_t$1(bbr13r57b9,0,_LC_),_LB_],
     _LF_=[0,make_t$1(bbr135br79,10,_LE_),_LD_],
     _LG_=[0,make_f$1(bbr135br79,9),_LF_],
     _LI_=[0,make_t$1(bbr135br79,8,_LH_),_LG_],
     _LJ_=[0,make_f$1(bbr135br79,7),_LI_],
     _LL_=[0,make_t$1(bbr135br79,6,_LK_),_LJ_],
     _LM_=[0,make_f$1(bbr135br79,5),_LL_],
     _LO_=[0,make_t$1(bbr135br79,4,_LN_),_LM_],
     _LP_=[0,make_f$1(bbr135br79,3),_LO_],
     _LR_=[0,make_t$1(bbr135br79,2,_LQ_),_LP_],
     _LS_=[0,make_f$1(bbr135br79,1),_LR_],
     _LU_=[0,make_t$1(bbr135br79,0,_LT_),_LS_],
     _LW_=[0,make_t$1(bbr135b7r9,10,_LV_),_LU_],
     _LX_=[0,make_f$1(bbr135b7r9,9),_LW_],
     _LZ_=[0,make_t$1(bbr135b7r9,8,_LY_),_LX_],
     _L0_=[0,make_f$1(bbr135b7r9,7),_LZ_],
     _L2_=[0,make_t$1(bbr135b7r9,6,_L1_),_L0_],
     _L3_=[0,make_f$1(bbr135b7r9,5),_L2_],
     _L5_=[0,make_t$1(bbr135b7r9,4,_L4_),_L3_],
     _L6_=[0,make_f$1(bbr135b7r9,3),_L5_],
     _L8_=[0,make_t$1(bbr135b7r9,2,_L7_),_L6_],
     _L9_=[0,make_f$1(bbr135b7r9,1),_L8_],
     _L$_=[0,make_t$1(bbr135b7r9,0,_L__),_L9_],
     _Mb_=[0,make_t$1(bb1r35br79,10,_Ma_),_L$_],
     _Mc_=[0,make_f$1(bb1r35br79,9),_Mb_],
     _Me_=[0,make_t$1(bb1r35br79,8,_Md_),_Mc_],
     _Mf_=[0,make_f$1(bb1r35br79,7),_Me_],
     _Mh_=[0,make_t$1(bb1r35br79,6,_Mg_),_Mf_],
     _Mi_=[0,make_f$1(bb1r35br79,5),_Mh_],
     _Mk_=[0,make_t$1(bb1r35br79,4,_Mj_),_Mi_],
     _Ml_=[0,make_f$1(bb1r35br79,3),_Mk_],
     _Mn_=[0,make_t$1(bb1r35br79,2,_Mm_),_Ml_],
     _Mo_=[0,make_f$1(bb1r35br79,1),_Mn_],
     _Mq_=[0,make_t$1(bb1r35br79,0,_Mp_),_Mo_],
     _Ms_=[0,make_t$1(bb1r35b7r9,10,_Mr_),_Mq_],
     _Mt_=[0,make_f$1(bb1r35b7r9,9),_Ms_],
     _Mv_=[0,make_t$1(bb1r35b7r9,8,_Mu_),_Mt_],
     _Mw_=[0,make_f$1(bb1r35b7r9,7),_Mv_],
     _My_=[0,make_t$1(bb1r35b7r9,6,_Mx_),_Mw_],
     _Mz_=[0,make_f$1(bb1r35b7r9,5),_My_],
     _MB_=[0,make_t$1(bb1r35b7r9,4,_MA_),_Mz_],
     _MC_=[0,make_f$1(bb1r35b7r9,3),_MB_],
     _ME_=[0,make_t$1(bb1r35b7r9,2,_MD_),_MC_],
     _MF_=[0,make_f$1(bb1r35b7r9,1),_ME_],
     _MH_=[0,make_t$1(bb1r35b7r9,0,_MG_),_MF_],
     _MJ_=[0,make_t$1(bb13rb57b9,10,_MI_),_MH_],
     _MK_=[0,make_f$1(bb13rb57b9,9),_MJ_],
     _MM_=[0,make_t$1(bb13rb57b9,8,_ML_),_MK_],
     _MN_=[0,make_f$1(bb13rb57b9,7),_MM_],
     _MP_=[0,make_t$1(bb13rb57b9,6,_MO_),_MN_],
     _MQ_=[0,make_f$1(bb13rb57b9,5),_MP_],
     _MS_=[0,make_t$1(bb13rb57b9,4,_MR_),_MQ_],
     _MT_=[0,make_f$1(bb13rb57b9,3),_MS_],
     _MV_=[0,make_t$1(bb13rb57b9,2,_MU_),_MT_],
     _MW_=[0,make_f$1(bb13rb57b9,1),_MV_],
     _MY_=[0,make_t$1(bb13rb57b9,0,_MX_),_MW_],
     _M0_=[0,make_t$1(bb13br57r9,10,_MZ_),_MY_],
     _M1_=[0,make_f$1(bb13br57r9,9),_M0_],
     _M3_=[0,make_t$1(bb13br57r9,8,_M2_),_M1_],
     _M4_=[0,make_f$1(bb13br57r9,7),_M3_],
     _M6_=[0,make_t$1(bb13br57r9,6,_M5_),_M4_],
     _M7_=[0,make_f$1(bb13br57r9,5),_M6_],
     _M9_=[0,make_t$1(bb13br57r9,4,_M8_),_M7_],
     _M__=[0,make_f$1(bb13br57r9,3),_M9_],
     _Na_=[0,make_t$1(bb13br57r9,2,_M$_),_M__],
     _Nb_=[0,make_f$1(bb13br57r9,1),_Na_],
     _Nd_=[0,make_t$1(bb13br57r9,0,_Nc_),_Nb_],
     _Nf_=[0,make_t$1(bbr135b7,8,_Ne_),_Nd_],
     _Ng_=[0,make_f$1(bbr135b7,7),_Nf_],
     _Ni_=[0,make_t$1(bbr135b7,6,_Nh_),_Ng_],
     _Nj_=[0,make_f$1(bbr135b7,5),_Ni_],
     _Nl_=[0,make_t$1(bbr135b7,4,_Nk_),_Nj_],
     _Nm_=[0,make_f$1(bbr135b7,3),_Nl_],
     _No_=[0,make_t$1(bbr135b7,2,_Nn_),_Nm_],
     _Np_=[0,make_f$1(bbr135b7,1),_No_],
     _Nr_=[0,make_t$1(bb1r35b7,8,_Nq_),_Np_],
     _Ns_=[0,make_f$1(bb1r35b7,7),_Nr_],
     _Nu_=[0,make_t$1(bb1r35b7,6,_Nt_),_Ns_],
     _Nv_=[0,make_f$1(bb1r35b7,5),_Nu_],
     _Nx_=[0,make_t$1(bb1r35b7,4,_Nw_),_Nv_],
     _Ny_=[0,make_f$1(bb1r35b7,3),_Nx_],
     _NA_=[0,make_t$1(bb1r35b7,2,_Nz_),_Ny_],
     _NB_=[0,make_f$1(bb1r35b7,1),_NA_],
     _ND_=[0,make_t$1(bb13br57,8,_NC_),_NB_],
     _NE_=[0,make_f$1(bb13br57,7),_ND_],
     _NG_=[0,make_t$1(bb13br57,6,_NF_),_NE_],
     _NH_=[0,make_f$1(bb13br57,5),_NG_],
     _NJ_=[0,make_t$1(bb13br57,4,_NI_),_NH_],
     _NK_=[0,make_f$1(bb13br57,3),_NJ_],
     _NM_=[0,make_t$1(bb13br57,2,_NL_),_NK_],
     _NN_=[0,make_f$1(bb13br57,1),_NM_],
     _NP_=[0,make_t$1(bb13b5r7,8,_NO_),_NN_],
     _NQ_=[0,make_f$1(bb13b5r7,7),_NP_],
     _NS_=[0,make_t$1(bb13b5r7,6,_NR_),_NQ_],
     _NT_=[0,make_f$1(bb13b5r7,5),_NS_],
     _NV_=[0,make_t$1(bb13b5r7,4,_NU_),_NT_],
     _NW_=[0,make_f$1(bb13b5r7,3),_NV_],
     _NY_=[0,make_t$1(bb13b5r7,2,_NX_),_NW_],
     _NZ_=[0,make_f$1(bb13b5r7,1),_NY_],
     _N1_=[0,make_t$1(bb13b5r7,0,_N0_),_NZ_],
     _N3_=[0,make_t$1(br13r5,6,_N2_),_N1_],
     _N4_=[0,make_f$1(br13r5,5),_N3_],
     _N6_=[0,make_t$1(br13r5,4,_N5_),_N4_],
     _N7_=[0,make_f$1(br13r5,3),_N6_],
     _N9_=[0,make_t$1(br13r5,2,_N8_),_N7_],
     _N__=[0,make_f$1(br13r5,1),_N9_],
     _Oa_=[0,make_t$1(br13r5,0,_N$_),_N__],
     _Oc_=[0,make_t$1(bb13b5,6,_Ob_),_Oa_],
     _Od_=[0,make_f$1(bb13b5,5),_Oc_],
     _Of_=[0,make_t$1(bb13b5,4,_Oe_),_Od_],
     _Og_=[0,make_f$1(bb13b5,3),_Of_],
     _Oi_=[0,make_t$1(bb13b5,2,_Oh_),_Og_],
     _Oj_=[0,make_f$1(bb13b5,1),_Oi_],
     _Ol_=[0,make_t$1(bb13b5,0,_Ok_),_Oj_],
     _On_=[0,make_t$1(br13,4,_Om_),_Ol_],
     _Oo_=[0,make_f$1(br13,3),_On_],
     _Oq_=[0,make_t$1(br13,2,_Op_),_Oo_],
     _Or_=[0,make_f$1(br13,1),_Oq_],
     _Ot_=[0,make_t$1(br13,0,_Os_),_Or_],
     _Ov_=[0,make_t$1(b1r3,4,_Ou_),_Ot_],
     _Ow_=[0,make_f$1(b1r3,3),_Ov_],
     _Oy_=[0,make_t$1(b1r3,2,_Ox_),_Ow_],
     _Oz_=[0,make_f$1(b1r3,1),_Oy_],
     _OB_=[0,make_t$1(b1r3,0,_OA_),_Oz_],
     _OD_=[0,make_t$1(b1,2,_OC_),_OB_],
     _OE_=[0,make_f$1(b1,1),_OD_],
     _OG_=[0,make_t$1(b1,0,_OF_),_OE_],
     _OI_=[0,_fX_(cst_add,[0,make_t$1(0,0,_OH_),_OG_]),_K6_],
     _OJ_=0;
    function make$7(t,expected)
     {var
       _ab1_=
        expected
         ?[246,
           function(_ab2_)
            {return _f4_
                     ([0,BrokenInvariants,expected],
                      [246,function(_ab3_){return _Bn_(t,cmp)}])}]
         :[246,function(_ab4_){return caml_call2(_c9_,_Bn_(t,cmp),_c6_)}];
      return _fY_(repr$4(t),_ab1_)}
    var
     _OM_=[0,make$7(_OL_,_OK_),0],
     _OP_=[0,make$7(_OO_,_ON_),_OM_],
     _OS_=[0,make$7(_OR_,_OQ_),_OP_],
     _OV_=[0,make$7(_OU_,_OT_),_OS_],
     _OX_=[0,make$7(_OW_,0),_OV_],
     _O0_=[0,make$7(_OZ_,_OY_),_OX_],
     _O3_=[0,make$7(_O2_,_O1_),_O0_],
     _O5_=[0,make$7(_O4_,0),_O3_],
     _O8_=[0,make$7(_O7_,_O6_),_O5_],
     _O$_=[0,make$7(_O__,_O9_),_O8_],
     _Pb_=[0,make$7(_Pa_,0),_O$_],
     _Pd_=[0,make$7(1,_Pc_),_Pb_],
     empty$2=[0],
     _Pe_=
      _fX_
       (cst_RedBlackTree,
        [0,
         _fX_(cst_Invariants,[0,_fX_(cst_validate,[0,make$7(0,0),_Pd_]),_OJ_]),
         _OI_]);
    function parent(i){return (i - 1 | 0) / 2 | 0}
    var
     BrokenInvariants$0=
      caml_set_oo_id
       ([248,cst_General_BinaryHeap_Invariants_BrokenInvariants,0]);
    function repr$6(param){return cst_IsMaxHeap}
    caml_call1
     (_t_,
      function(param)
       {if(param[1] === BrokenInvariants$0)
         {var
           broken_invariants=param[2],
           _abX_=function(_ab0_){return join_string_list(_Pf_,_ab0_)},
           _abY_=
            caml_call2
             (_c9_,
              caml_call2
               (_c9_,
                broken_invariants,
                function(_abZ_){return map$0(_abZ_,repr$6)}),
              _abX_);
          return [0,caml_call1(_n_(_Pg_),_abY_)]}
        return 0});
    function _Ph_(xs,cmp)
     {function _abO_(param)
       {var invariant=param[2],predicate=param[1];
        return some_if$0(1 - caml_call1(predicate,xs),invariant)}
      function _abP_(_abW_){return filter_map$0(_abW_,_abO_)}
      var
       _abQ_=0,
       _abR_=0,
       broken_invariants=
        caml_call2
         (_c9_,
          [0,
           [0,
            function(xs)
             {function _abS_(i)
               {var
                 _abV_=_lY_(xs,parent(i)),
                 match=caml_call2(cmp,_lY_(xs,i),_abV_);
                return 2 <= match?0:1}
              function _abT_(_abU_){return for_all$0(_abU_,_abS_)}
              return caml_call2(_c9_,make(0,0,xs.length - 1),_abT_)},
            _abR_],
           _abQ_],
          _abP_);
      return broken_invariants
              ?raise([0,BrokenInvariants$0,broken_invariants])
              :xs}
    function swap(xs,i,j)
     {var x=_lY_(xs,i);_lZ_(xs,i,_lY_(xs,j));return _lZ_(xs,j,x)}
    function _Pi_(xs$0,cmp,x)
     {var
       xs$1=_Ph_(xs$0,cmp),
       xs=caml_call2(ArrayLabels[4],xs$1,[0,x]),
       i$0=xs.length - 1 - 1 | 0,
       i=i$0;
      for(;;)
       {if(0 !== i)
         {var
           p=parent(i),
           _abN_=_lY_(xs,p),
           match=caml_call2(cmp,_lY_(xs,i),_abN_);
          if(2 <= match){swap(xs,i,p);var i=p;continue}}
        return _Ph_(xs,cmp)}}
    function max$1(xs){return _lY_(xs,0)}
    function _Pj_(xs,cmp)
     {function _abF_(_abM_){return _Ph_(_abM_,cmp)}
      function _abG_(xs$0)
       {var len=xs$0.length - 1 - 1 | 0;
        if(caml_call2(_de_,len,0))return empty$2;
        var last=_lY_(xs$0,len),xs=caml_call3(ArrayLabels[6],xs$0,0,len);
        _lZ_(xs,0,last);
        var i=0;
        for(;;)
         {var r=(2 * i | 0) + 2 | 0,l=(2 * i | 0) + 1 | 0;
          if(caml_lessthan(r,len))
           {var
             _abI_=_lY_(xs,l),
             match=caml_call2(cmp,_lY_(xs,i),_abI_),
             _abJ_=_lY_(xs,r),
             match$0=caml_call2(cmp,_lY_(xs,i),_abJ_),
             switch$0=0 === match?0:0 === match$0?0:1;
            if(! switch$0)
             {var
               _abK_=_lY_(xs,r),
               match$1=caml_call2(cmp,_lY_(xs,l),_abK_),
               c=2 <= match$1?l:r;
              swap(xs,i,c);
              var i=c;
              continue}}
          else
           if(caml_lessthan(l,len))
            {var _abL_=_lY_(xs,l),match$2=caml_call2(cmp,_lY_(xs,i),_abL_);
             if(0 === match$2){swap(xs,i,l);var i=l;continue}}
          return xs}}
      return caml_call2
              (_c9_,
               caml_call2
                (_c9_,
                 caml_call2(_c9_,xs,function(_abH_){return _Ph_(_abH_,cmp)}),
                 _abG_),
               _abF_)}
    function make$8(name,opt,fs,expected)
     {if(opt)var sth=opt[1],init=sth;else var init=empty$2;
      return _fY_
              (name,
               [246,
                function(_abE_)
                 {var
                   heap=
                    fold(init,fs,function(heap,f){return caml_call1(f,heap)});
                  return _gw_(expected,caml_call1(ArrayLabels[10],heap))}])}
    function pop_max(xs){return _Pj_(xs,compare)}
    var _Pk_=0;
    function make$9(xs,expected)
     {var name=repr$0(xs,_T_);
      return make$8
              (name,[0,caml_call1(ArrayLabels[11],xs)],[0,pop_max,0],expected)}
    var
     _Pn_=[0,make$9(_Pm_,_Pl_),0],
     _Pq_=[0,make$9(_Pp_,_Po_),_Pn_],
     _Pt_=[0,make$9(_Ps_,_Pr_),_Pq_],
     _Pw_=[0,make$9(_Pv_,_Pu_),_Pt_],
     _Pz_=[0,make$9(_Py_,_Px_),_Pw_],
     _PC_=[0,make$9(_PB_,_PA_),_Pz_],
     _PE_=[0,_fX_(cst_pop_max,[0,make$9(_PD_,0),_PC_]),_Pk_];
    function make$10(xs,expected)
     {var
       name=repr$0(xs,_T_),
       fs=
        map$0(xs,function(x){return function(xs){return _Pi_(xs,compare,x)}});
      return make$8(name,0,fs,expected)}
    var
     _PH_=[0,make$10(_PG_,_PF_),0],
     _PK_=[0,make$10(_PJ_,_PI_),_PH_],
     _PN_=[0,make$10(_PM_,_PL_),_PK_],
     _PQ_=[0,make$10(_PP_,_PO_),_PN_],
     _PT_=[0,make$10(_PS_,_PR_),_PQ_],
     _PW_=[0,make$10(_PV_,_PU_),_PT_],
     _PZ_=[0,make$10(_PY_,_PX_),_PW_],
     _P2_=[0,make$10(_P1_,_P0_),_PZ_],
     _P5_=[0,make$10(_P4_,_P3_),_P2_],
     _P8_=[0,make$10(_P7_,_P6_),_P5_],
     _P$_=[0,_fX_(cst_add$0,[0,make$10(_P__,_P9_),_P8_]),_PE_],
     _Qa_=_fX_(cst_BinaryHeap,[0,make$8(cst_empty$0,0,0,0),_P$_]);
    function _Qb_(param,_abD_){var y=_abD_[1],x=param[1];return compare(x,y)}
    function _Qc_(xs,k,v){return _Pi_(xs,_Qb_,[0,k,v])}
    function _Qd_(xs){return max$1(xs)}
    function _Qe_(xs){return _Pj_(xs,_Qb_)}
    function _Qf_(_abC_){return [0,_bC_[1],_bC_[2],_bC_[3]]}
    function _Qg_(_abB_){return [0,_bx_,_by_,_bz_,_bC_]}
    function _Qh_(_abv_)
     {function _abw_(r)
       {var _abz_=caml_call1(_bC_[2],r),_abA_=caml_call1(_abv_[1],_abz_);
        return caml_call2(_bC_[3],r,_abA_)}
      return [0,
              _abw_,
              function(r)
               {var
                 _abx_=caml_call1(_bC_[2],r),
                 _aby_=caml_call1(_abv_[2],_abx_);
                return caml_call2(_bC_[3],r,_aby_)}]}
    function _Qi_(_abj_)
     {function _abk_(r,v)
       {var _abt_=caml_call1(_bC_[2],r),_abu_=caml_call2(_abj_[4],_abt_,v);
        return caml_call2(_bC_[3],r,_abu_)}
      function _abl_(r,v)
       {var _abr_=caml_call1(_bC_[2],r),_abs_=caml_call2(_abj_[5],_abr_,v);
        return caml_call2(_bC_[3],r,_abs_)}
      function _abm_(r,v)
       {var _abp_=caml_call1(_bC_[2],r),_abq_=caml_call2(_abj_[6],_abp_,v);
        return caml_call2(_bC_[3],r,_abq_)}
      return [0,
              _abk_,
              _abl_,
              _abm_,
              function(r,v)
               {var
                 _abn_=caml_call1(_bC_[2],r),
                 _abo_=caml_call2(_abj_[7],_abn_,v);
                return caml_call2(_bC_[3],r,_abo_)}]}
    function _Qj_(_abi_){return [0,_Qi_(_abi_)]}
    function _Qk_(param,_abh_){var y=_abh_[1],x=param[1];return compare(x,y)}
    function _Ql_(x,param){var y=param[1];return compare(x,y)}
    function _Qm_(t){return size$1(t,_Qk_)}
    function _Qn_(t,k,v){return add$1(t,_Qk_,[0,k,v])}
    function _Qo_(vs)
     {function _abf_(t,param)
       {var v=param[2],k=param[1];return caml_call2(_c9_,_Qn_(t,k,v),_cc_)}
      return caml_call2
              (_c9_,vs,function(_abg_){return fold(empty$1,_abg_,_abf_)})}
    function _Qp_(t,k,v){return replace(t,_Qk_,[0,k,v])}
    function _Qq_(vs)
     {function _abd_(t,param){var v=param[2],k=param[1];return _Qp_(t,k,v)}
      return caml_call2
              (_c9_,vs,function(_abe_){return fold(empty$1,_abe_,_abd_)})}
    function _Qr_(t,k){return remove(t,_Qk_,_Ql_,k)}
    function _Qs_(t){return to_list$2(t,_Qk_)}
    function _Qt_(t,k)
     {function _abb_(_abc_){return func(_abc_,_cc_)}
      return caml_call2(_c9_,try_get(t,_Qk_,_Ql_,k),_abb_)}
    function _Qu_(t,k)
     {var _aba_=or_failure(_Qv_);return caml_call2(_c9_,_Qt_(t,k),_aba_)}
    function _Qw_(_aaT_)
     {function _aaU_(param,_aa$_)
       {var y=_aa$_[1],x=param[1];return caml_call2(_aaT_[1],x,y)}
      function _aaV_(x,param){var y=param[1];return caml_call2(_aaT_[1],x,y)}
      function _aaW_(t){return size$1(t,_aaU_)}
      function _aaX_(t,k,v){return add$1(t,_aaU_,[0,k,v])}
      function _aaY_(vs)
       {function _aa9_(t,param)
         {var v=param[2],k=param[1];return caml_call2(_c9_,_aaX_(t,k,v),_cc_)}
        return caml_call2
                (_c9_,vs,function(_aa__){return fold(empty$1,_aa__,_aa9_)})}
      function _aaZ_(t,k,v){return replace(t,_aaU_,[0,k,v])}
      function _aa0_(vs)
       {function _aa7_(t,param){var v=param[2],k=param[1];return _aaZ_(t,k,v)}
        return caml_call2
                (_c9_,vs,function(_aa8_){return fold(empty$1,_aa8_,_aa7_)})}
      function _aa1_(t,k){return remove(t,_aaU_,_aaV_,k)}
      function _aa2_(t){return to_list$2(t,_aaU_)}
      function _aa3_(t,k)
       {function _aa5_(_aa6_){return func(_aa6_,_cc_)}
        return caml_call2(_c9_,try_get(t,_aaU_,_aaV_,k),_aa5_)}
      return [0,
              _aaU_,
              _aaV_,
              empty$1,
              is_empty$0,
              _aaW_,
              _aaX_,
              _aaY_,
              _aaZ_,
              _aa0_,
              _aa1_,
              _aa2_,
              _aa3_,
              function(t,k)
               {var _aa4_=or_failure(_Qx_);
                return caml_call2(_c9_,_aa3_(t,k),_aa4_)}]}
    function _Qy_(t){return size$1(t,compare)}
    function _Qz_(t,v){return add$1(t,compare,v)}
    function _QA_(vs)
     {function _aaR_(t,v){return caml_call2(_c9_,_Qz_(t,v),_cc_)}
      return caml_call2
              (_c9_,vs,function(_aaS_){return fold(empty$1,_aaS_,_aaR_)})}
    function _QB_(t,v){return replace(t,compare,v)}
    function _QC_(t,v){return remove(t,compare,compare,v)}
    function _QD_(t){return to_list$2(t,compare)}
    function _QE_(t,v)
     {return caml_call2(_c9_,try_get(t,compare,compare,v),is_some)}
    function _QF_(_aaH_)
     {var _aaI_=_aaH_[1];
      function _aaJ_(t){return size$1(t,_aaI_)}
      function _aaK_(t,v){return add$1(t,_aaI_,v)}
      function _aaL_(vs)
       {function _aaP_(t,v){return caml_call2(_c9_,_aaK_(t,v),_cc_)}
        return caml_call2
                (_c9_,vs,function(_aaQ_){return fold(empty$1,_aaQ_,_aaP_)})}
      function _aaM_(t,v){return replace(t,_aaI_,v)}
      function _aaN_(t,v){return remove(t,_aaI_,_aaI_,v)}
      function _aaO_(t){return to_list$2(t,_aaI_)}
      return [0,
              _aaI_,
              _aaI_,
              empty$1,
              is_empty$0,
              _aaJ_,
              _aaK_,
              _aaL_,
              _aaM_,
              _aaN_,
              _aaO_,
              function(t,v)
               {return caml_call2(_c9_,try_get(t,_aaI_,_aaI_,v),is_some)}]}
    function _QG_(x,y){return compare(x,y)}
    function _QH_(xs,v){return _Pi_(xs,_QG_,v)}
    function _QI_(xs){return max$1(xs)}
    function _QJ_(xs){return _Pj_(xs,_QG_)}
    function _QK_(_aaD_)
     {var _aaE_=_aaD_[1];
      function _aaF_(opt,format)
       {if(opt)var sth=opt[1],flush=sth;else var flush=_aaD_[2];
        return _z1_([0,flush],_aaE_,format)}
      function _aaG_(x){return caml_call2(_z2_,_aaE_,x)}
      return [0,
              _aaE_,
              _aaF_,
              _aaG_,
              function(param){return caml_call1(_z0_,_aaE_)}]}
    var
     _QL_=_QK_([0,Pervasives[25],1]),
     _QM_=_QL_[1],
     _QN_=_QL_[2],
     _QO_=_QL_[3],
     _QP_=_QL_[4],
     _QQ_=Pervasives[23],
     _QR_=_QK_([0,Pervasives[24],0]),
     _QS_=_QR_[1],
     _QT_=_QR_[2],
     _QU_=_QR_[3],
     _QV_=_QR_[4],
     _QW_=
      [0,
       caml_call1
         (caml_call1
           (caml_call1(_ll_[1][1],[0,_cQ_]),
            [0,_cU_,_cW_,_cV_,_cX_,_cZ_,_cY_,_c0_,_c2_,_c1_,_c3_,_c5_,_c4_]),
          [0,_ax_,_ay_])
        [1],
       0],
     _QX_=
      _fX_
       (cst_Stream,
        [0,
         _lm_
           ([0,
             map$1,
             map_i$0,
             map_acc$0,
             filter$2,
             filter_i$0,
             filter_acc$0,
             filter_map$1,
             filter_map_i$0,
             filter_map_acc$0,
             flat_map$0,
             flat_map_i$0,
             flat_map_acc$0,
             to_list$1,
             _cQ_])
          [1],
         _QW_]);
    function split$0(s,seps)
     {var seps$0=_QA_(seps);
      function _aay_(param,c)
       {var current_part=param[2],parts=param[1];
        return _QE_(seps$0,c)
                ?[0,[0,current_part,parts],0]
                :[0,parts,[0,c,current_part]]}
      var
       match=
        caml_call2(_c9_,s,function(_aaC_){return fold$0(_QY_,_aaC_,_aay_)}),
       last_part=match[2],
       parts=match[1];
      function _aaz_(_aaB_){return map$0(_aaB_,of_list)}
      return caml_call2
              (_c9_,
               caml_call2
                (_c9_,
                 caml_call2
                  (_c9_,
                   [0,last_part,parts],
                   function(_aaA_){return map$0(_aaA_,reverse)}),
                 _aaz_),
               reverse)}
    var _Q3_=0;
    function make$11(s,seps,expected)
     {var
       _aav_=[246,function(_aax_){return _gv_(expected,split$0(s,seps))}],
       _aaw_=of_list(seps);
      return caml_call3(_f0_(_Q4_),s,_aaw_,_aav_)}
    var
     _Q7_=[0,make$11(cst_xabxxcdx,_Q6_,_Q5_),0],
     _Q__=[0,_fX_(cst_split,[0,make$11(cst_abcdefghfj,_Q9_,_Q8_),_Q7_]),_Q3_],
     _Q$_=
      _fX_
       (cst_String,
        [0,
         caml_call1
           (_lF_
             ([0,
               [0,_bF_,_bG_,_i_,_j_,_l_,_k_],
               equal$1,
               different,
               repr$1,
               compare,
               less_than,
               less_or_equal,
               greater_than,
               greater_or_equal,
               between,
               between_or_equal,
               min,
               max,
               min_max]),
            [0,_Q1_,_QZ_,_Q2_,_Q0_])
          [1],
         _Q__]),
     callstack=current(0,0),
     TestException0=
      caml_set_oo_id([248,cst_General_TestingTests_Tests_TestException0,0]),
     TestException0$0=
      caml_set_oo_id([248,cst_General_TestingTests_Tests_TestException0$0,0]),
     TestException1=
      caml_set_oo_id([248,cst_General_TestingTests_Tests_TestException1,0]);
    caml_call1
     (_t_,
      function(param)
       {if(param === TestException0)return _Ra_;
        if(param === TestException0$0)return _Rb_;
        if(param[1] === TestException1)
         {var s=param[2];return [0,caml_call1(_n_(_Rc_),s)]}
        return 0});
    var
     ResultExamples=
      [0,
       [0,
        _Rh_,
        [0,
         _Rg_,
         [0,
          [0,
           [0,[0,cst_foo$8,[0,[1,TestException0]]]],
           cst_Single_label_foo_status_Failure_NoException_TestingTests_Tests_TestException0],
          [0,
           _Rf_,
           [0,
            [0,
             [0,[0,cst_foo$7,[0,[3,TestException0,TestException0$0,0]]]],
             cst_Single_label_foo_status_Failure_WrongException_TestingTests_Tests_TestException0_TestingTests_Tests_TestException0_None],
            [0,
             [0,
              [0,[0,cst_foo$6,[0,[4,cst_Foo,TestException0$0,0]]]],
              cst_Single_label_foo_status_Failure_WrongExceptionNamed_Foo_TestingTests_Tests_TestException0_None],
             [0,
              _Re_,
              [0,
               [0,
                [0,[0,cst_foo$5,[1,TestException0,0]]],
                cst_Single_label_foo_status_Error_TestingTests_Tests_TestException0_None],
               _Rd_]]]]]]]]],
     _Ri_=0,
     _Rj_=0;
    function make$12(expected,test)
     {if(0 === test[0])
       var match=test[1],label=match[1],name=label;
      else
       var match$0=test[1],name$0=match$0[1],name=name$0;
      return _fY_
              (name,
               [246,
                function(_aau_)
                 {return _f6_
                          (_fN_,_fQ_,expected,caml_call2(Test[1],_Rk_,test))}])}
    var
     _Rl_=0,
     _Rm_=
      [0,
       make$12
        ([0,[0,cst_error$0,[1,TestException0,0]]],
         _fY_(cst_error,[246,function(_aat_){return raise(TestException0)}])),
       _Rl_],
     _Rp_=
      [0,
       make$12
        (_Ro_,
         _fY_(cst_custom_failure,[246,function(_aas_){return _f2_(_Rn_)}])),
       _Rm_],
     _Rq_=
      [0,
       make$12
        ([0,
          [0,cst_wrong_exception$0,[0,[3,TestException0,TestException0$0,0]]]],
         _fY_
          (cst_wrong_exception,
           [246,
            function(_aaq_)
             {return _f4_
                      (TestException0,
                       [246,function(_aar_){return raise(TestException0$0)}])}])),
       _Rp_],
     _Rr_=
      [0,
       make$12
        ([0,[0,cst_no_exception$0,[0,[1,TestException0]]]],
         _fY_
          (cst_no_exception,
           [246,function(_aap_){return _f4_(TestException0,0)}])),
       _Rq_],
     _Rt_=
      [0,
       make$12
        (_Rs_,
         _fY_(cst_not_equal_failure,[246,function(_aao_){return _gb_(43)}])),
       _Rr_],
     _Rv_=
      [0,make$12(_Ru_,_fX_(cst_group_success,[0,_fY_(cst_child,0),0])),_Rt_],
     _Rx_=[0,make$12(_Rw_,_fY_(cst_single_success,0)),_Rv_],
     _Rz_=[0,_fX_(cst_Test,[0,caml_call2(_fZ_(_Ry_),cst_n$0,_Rx_),_Rj_]),_Ri_],
     _RA_=0;
    function make$13(opt,expected,result)
     {if(opt)var sth=opt[1],verbose=sth;else var verbose=0;
      var
       _aal_=
        [246,
         function(_aan_)
          {var actual=caml_call2(_c9_,result,_fR_(verbose));
           return _gv_(expected,actual)}];
      return _fY_
              (caml_call2
                (_c9_,
                 expected,
                 function(_aam_){return join_string_list(_RB_,_aam_)}),
               _aal_)}
    var
     _RE_=
      [0,
       make$13
        (0,
         _RD_,
         [1,[0,cst_foo$9,[0,[0,[0,cst_bar$1,[1,TestException0,0]]],0],_RC_]]),
       0],
     _RI_=[0,make$13(_RH_,_RG_,_RF_),_RE_],
     _RM_=[0,make$13(_RL_,_RK_,_RJ_),_RI_],
     _RQ_=[0,make$13(_RP_,_RO_,_RN_),_RM_],
     _RU_=[0,make$13(_RT_,_RS_,_RR_),_RQ_],
     _RV_=[0,[0,cst_bar_7,[1,[0,TestException1,cst_bad],[0,callstack]]]],
     _RW_=0,
     _RX_=
      _f1_
       ?cst_bar_7_ERROR_exception_TestingTests_Tests_TestException1_bad_raised
       :cst_bar_7_ERROR_exception_TestingTests_Tests_TestException1_bad_raised_Raised_by_primitive_operation_at_file_Implementation_TestingTests_ml_line_2_characters_16_36,
     _RY_=[0,make$13(0,[0,_RX_,_RW_],_RV_),_RU_],
     _R0_=[0,make$13(0,_RZ_,[0,[0,cst_bar_6,[1,TestException0,0]]]),_RY_],
     _R3_=[0,make$13(0,_R2_,_R1_),_R0_],
     _R4_=
      [0,
       [0,
        cst_bar_4,
        [0,[4,cst_Foo$0,[0,TestException1,cst_too_bad],[0,callstack]]]]],
     _R5_=0,
     _R6_=
      _f1_
       ?cst_bar_4_FAILED_expected_exception_Foo_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised
       :cst_bar_4_FAILED_expected_exception_Foo_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised_Raised_by_primitive_operation_at_file_Implementation_TestingTests_ml_line_2_characters_16_36,
     _R7_=[0,make$13(0,[0,_R6_,_R5_],_R4_),_R3_],
     _R8_=
      [0,
       [0,
        cst_bar_4$0,
        [0,
         [3,
          [0,TestException1,cst_bad$0],
          [0,TestException1,cst_too_bad$0],
          [0,callstack]]]]],
     _R9_=0,
     _R__=
      _f1_
       ?cst_bar_4_FAILED_expected_exception_TestingTests_Tests_TestException1_bad_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised
       :cst_bar_4_FAILED_expected_exception_TestingTests_Tests_TestException1_bad_not_raised_but_exception_TestingTests_Tests_TestException1_too_bad_raised_Raised_by_primitive_operation_at_file_Implementation_TestingTests_ml_line_2_characters_16_36,
     _R$_=[0,make$13(0,[0,_R__,_R9_],_R8_),_R7_],
     _Sb_=
      [0,
       make$13(0,_Sa_,[0,[0,cst_bar_3,[0,[4,cst_Foo$1,TestException0$0,0]]]]),
       _R$_],
     _Sd_=
      [0,
       make$13
        (0,_Sc_,[0,[0,cst_bar_3$0,[0,[3,TestException0,TestException0$0,0]]]]),
       _Sb_],
     _Sg_=[0,make$13(0,_Sf_,_Se_),_Sd_],
     _Si_=[0,make$13(0,_Sh_,[0,[0,cst_bar_2,[0,[1,TestException0]]]]),_Sg_],
     _Sl_=[0,make$13(0,_Sk_,_Sj_),_Si_],
     _Sp_=
      [0,_fX_(cst_to_indented_strings,[0,make$13(_So_,_Sn_,_Sm_),_Sl_]),_RA_],
     Unit=[0,_c6_],
     _Sq_=
      _fX_
       (cst_Testing,
        [0,
         _fX_
          (cst_Result,[0,caml_call1(_gG_([0,_fN_]),ResultExamples)[1],_Sp_]),
         _Rz_]),
     _Sr_=Specialize([0]),
     _TH_=_Sr_[91],
     _Ss_=_Sr_[3],
     _St_=_Sr_[4],
     _Su_=_Sr_[5],
     _Sv_=_Sr_[6],
     _Sw_=_Sr_[7],
     _Sx_=_Sr_[8],
     _Sy_=_Sr_[9],
     _Sz_=_Sr_[10],
     _SA_=_Sr_[11],
     _SB_=_Sr_[12],
     _SC_=_Sr_[13],
     _SD_=_Sr_[14],
     _SE_=_Sr_[15],
     _SF_=_Sr_[17],
     _SG_=_Sr_[18],
     _SH_=_Sr_[19],
     _SI_=_Sr_[20],
     _SJ_=_Sr_[21],
     _SK_=_Sr_[22],
     _SL_=_Sr_[23],
     _SM_=_Sr_[24],
     _SN_=_Sr_[25],
     _SO_=_Sr_[26],
     _SP_=_Sr_[27],
     _SQ_=_Sr_[28],
     _SR_=_Sr_[29],
     _SS_=_Sr_[30],
     _ST_=_Sr_[31],
     _SU_=_Sr_[32],
     _SV_=_Sr_[33],
     _SW_=_Sr_[34],
     _SX_=_Sr_[35],
     _SY_=_Sr_[36],
     _SZ_=_Sr_[37],
     _S0_=_Sr_[38],
     _S1_=_Sr_[39],
     _S2_=_Sr_[40],
     _S3_=_Sr_[41],
     _S4_=_Sr_[42],
     _S5_=_Sr_[43],
     _S6_=_Sr_[44],
     _S7_=_Sr_[45],
     _S8_=_Sr_[46],
     _S9_=_Sr_[47],
     _S__=_Sr_[48],
     _S$_=_Sr_[49],
     _Ta_=_Sr_[50],
     _Tb_=_Sr_[51],
     _Tc_=_Sr_[52],
     _Td_=_Sr_[53],
     _Te_=_Sr_[54],
     _Tf_=_Sr_[55],
     _Tg_=_Sr_[56],
     _Th_=_Sr_[57],
     _Ti_=_Sr_[58],
     _Tj_=_Sr_[59],
     _Tk_=_Sr_[60],
     _Tl_=_Sr_[61],
     _Tm_=_Sr_[62],
     _Tn_=_Sr_[63],
     _To_=_Sr_[64],
     _Tp_=_Sr_[65],
     _Tq_=_Sr_[66],
     _Tr_=_Sr_[67],
     _Ts_=_Sr_[68],
     _Tt_=_Sr_[69],
     _Tu_=_Sr_[70],
     _Tv_=_Sr_[71],
     _Tw_=_Sr_[72],
     _Tx_=_Sr_[73],
     _Ty_=_Sr_[74],
     _Tz_=_Sr_[75],
     _TA_=_Sr_[76],
     _TB_=_Sr_[77],
     _TC_=_Sr_[78],
     _TD_=_Sr_[79],
     _TE_=_Sr_[80],
     _TF_=_Sr_[81],
     _TG_=_Sr_[84],
     _TI_=SpecializeEquatable([0,_af_])[1],
     _TJ_=Specialize([0]),
     _UZ_=_TJ_[91],
     _TK_=_TJ_[3],
     _TL_=_TJ_[4],
     _TM_=_TJ_[5],
     _TN_=_TJ_[6],
     _TO_=_TJ_[7],
     _TP_=_TJ_[8],
     _TQ_=_TJ_[9],
     _TR_=_TJ_[10],
     _TS_=_TJ_[11],
     _TT_=_TJ_[12],
     _TU_=_TJ_[13],
     _TV_=_TJ_[14],
     _TW_=_TJ_[15],
     _TX_=_TJ_[17],
     _TY_=_TJ_[18],
     _TZ_=_TJ_[19],
     _T0_=_TJ_[20],
     _T1_=_TJ_[21],
     _T2_=_TJ_[22],
     _T3_=_TJ_[23],
     _T4_=_TJ_[24],
     _T5_=_TJ_[25],
     _T6_=_TJ_[26],
     _T7_=_TJ_[27],
     _T8_=_TJ_[28],
     _T9_=_TJ_[29],
     _T__=_TJ_[30],
     _T$_=_TJ_[31],
     _Ua_=_TJ_[32],
     _Ub_=_TJ_[33],
     _Uc_=_TJ_[34],
     _Ud_=_TJ_[35],
     _Ue_=_TJ_[36],
     _Uf_=_TJ_[37],
     _Ug_=_TJ_[38],
     _Uh_=_TJ_[39],
     _Ui_=_TJ_[40],
     _Uj_=_TJ_[41],
     _Uk_=_TJ_[42],
     _Ul_=_TJ_[43],
     _Um_=_TJ_[44],
     _Un_=_TJ_[45],
     _Uo_=_TJ_[46],
     _Up_=_TJ_[47],
     _Uq_=_TJ_[48],
     _Ur_=_TJ_[49],
     _Us_=_TJ_[50],
     _Ut_=_TJ_[51],
     _Uu_=_TJ_[52],
     _Uv_=_TJ_[53],
     _Uw_=_TJ_[54],
     _Ux_=_TJ_[55],
     _Uy_=_TJ_[56],
     _Uz_=_TJ_[57],
     _UA_=_TJ_[58],
     _UB_=_TJ_[59],
     _UC_=_TJ_[60],
     _UD_=_TJ_[61],
     _UE_=_TJ_[62],
     _UF_=_TJ_[63],
     _UG_=_TJ_[64],
     _UH_=_TJ_[65],
     _UI_=_TJ_[66],
     _UJ_=_TJ_[67],
     _UK_=_TJ_[68],
     _UL_=_TJ_[69],
     _UM_=_TJ_[70],
     _UN_=_TJ_[71],
     _UO_=_TJ_[72],
     _UP_=_TJ_[73],
     _UQ_=_TJ_[74],
     _UR_=_TJ_[75],
     _US_=_TJ_[76],
     _UT_=_TJ_[77],
     _UU_=_TJ_[78],
     _UV_=_TJ_[79],
     _UW_=_TJ_[80],
     _UX_=_TJ_[81],
     _UY_=_TJ_[84],
     _U0_=SpecializeEquatable([0,_bh_])[1],
     _U1_=Specialize([0]),
     _Wf_=_U1_[91],
     _U2_=_U1_[3],
     _U3_=_U1_[4],
     _U4_=_U1_[5],
     _U5_=_U1_[6],
     _U6_=_U1_[7],
     _U7_=_U1_[8],
     _U8_=_U1_[9],
     _U9_=_U1_[10],
     _U__=_U1_[11],
     _U$_=_U1_[12],
     _Va_=_U1_[13],
     _Vb_=_U1_[14],
     _Vc_=_U1_[15],
     _Vd_=_U1_[17],
     _Ve_=_U1_[18],
     _Vf_=_U1_[19],
     _Vg_=_U1_[20],
     _Vh_=_U1_[21],
     _Vi_=_U1_[22],
     _Vj_=_U1_[23],
     _Vk_=_U1_[24],
     _Vl_=_U1_[25],
     _Vm_=_U1_[26],
     _Vn_=_U1_[27],
     _Vo_=_U1_[28],
     _Vp_=_U1_[29],
     _Vq_=_U1_[30],
     _Vr_=_U1_[31],
     _Vs_=_U1_[32],
     _Vt_=_U1_[33],
     _Vu_=_U1_[34],
     _Vv_=_U1_[35],
     _Vw_=_U1_[36],
     _Vx_=_U1_[37],
     _Vy_=_U1_[38],
     _Vz_=_U1_[39],
     _VA_=_U1_[40],
     _VB_=_U1_[41],
     _VC_=_U1_[42],
     _VD_=_U1_[43],
     _VE_=_U1_[44],
     _VF_=_U1_[45],
     _VG_=_U1_[46],
     _VH_=_U1_[47],
     _VI_=_U1_[48],
     _VJ_=_U1_[49],
     _VK_=_U1_[50],
     _VL_=_U1_[51],
     _VM_=_U1_[52],
     _VN_=_U1_[53],
     _VO_=_U1_[54],
     _VP_=_U1_[55],
     _VQ_=_U1_[56],
     _VR_=_U1_[57],
     _VS_=_U1_[58],
     _VT_=_U1_[59],
     _VU_=_U1_[60],
     _VV_=_U1_[61],
     _VW_=_U1_[62],
     _VX_=_U1_[63],
     _VY_=_U1_[64],
     _VZ_=_U1_[65],
     _V0_=_U1_[66],
     _V1_=_U1_[67],
     _V2_=_U1_[68],
     _V3_=_U1_[69],
     _V4_=_U1_[70],
     _V5_=_U1_[71],
     _V6_=_U1_[72],
     _V7_=_U1_[73],
     _V8_=_U1_[74],
     _V9_=_U1_[75],
     _V__=_U1_[76],
     _V$_=_U1_[77],
     _Wa_=_U1_[78],
     _Wb_=_U1_[79],
     _Wc_=_U1_[80],
     _Wd_=_U1_[81],
     _We_=_U1_[84],
     _Wg_=SpecializeEquatable([0,equal$1])[1],
     _Wh_=Specialize$0([0]),
     _Wi_=_Wh_[6],
     _Wj_=_Wh_[7],
     _Wk_=_Wh_[8],
     _Wl_=_Wh_[9],
     _Wm_=_Wh_[10],
     _Wn_=_Wh_[11],
     _Wo_=_Wh_[12],
     _Wp_=_Wh_[13],
     _Wq_=_Wh_[14],
     _Wr_=_Wh_[15],
     _Ws_=_Wh_[16],
     _Wt_=_Wh_[17],
     _Wu_=Specialize$0([0]),
     _Wv_=_Wu_[6],
     _Ww_=_Wu_[7],
     _Wx_=_Wu_[8],
     _Wy_=_Wu_[9],
     _Wz_=_Wu_[10],
     _WA_=_Wu_[11],
     _WB_=_Wu_[12],
     _WC_=_Wu_[13],
     _WD_=_Wu_[14],
     _WE_=_Wu_[15],
     _WF_=_Wu_[16],
     _WG_=_Wu_[17],
     _WH_=Specialize$0([0]),
     _WI_=_WH_[6],
     _WJ_=_WH_[7],
     _WK_=_WH_[8],
     _WL_=_WH_[9],
     _WM_=_WH_[10],
     _WN_=_WH_[11],
     _WO_=_WH_[12],
     _WP_=_WH_[13],
     _WQ_=_WH_[14],
     _WR_=_WH_[15],
     _WS_=_WH_[16],
     _WT_=_WH_[17],
     _WU_=_Qg_([0]),
     _WV_=_Qj_([0,zero,one,negate,add,substract,multiply,divide]),
     _WW_=_WU_[4],
     _WX_=_WV_[1],
     _WY_=[0,_WW_[1],_WW_[2],_WW_[3],_WX_[1],_WX_[2],_WX_[3],_WX_[4]],
     _WZ_=_WU_[3],
     _W0_=_WU_[2],
     _W1_=_WU_[1];
    function _W2_(_aak_){_aak_[1]++;return 0}
    function _W3_(_aaj_){_aaj_[1] += -1;return 0}
    var
     _W4_=_Qg_([0]),
     _W5_=
      _Qj_([0,zero$0,one$0,negate$0,add$0,substract$0,multiply$0,divide$0]),
     _W6_=_W4_[4],
     _W7_=_W5_[1],
     _W8_=[0,_W6_[1],_W6_[2],_W6_[3],_W7_[1],_W7_[2],_W7_[3],_W7_[4]],
     _W9_=_W4_[3],
     _W__=_W4_[2],
     _W$_=_W4_[1],
     _Xa_=_Qg_([0]),
     _Xb_=_Xa_[4],
     _Xd_=_Xb_[2],
     _Xe_=_Xb_[3],
     _Xc_=_Xb_[1],
     _Xf_=
      [0,
       _Xc_,
       _Xd_,
       _Xe_,
       function(r,x)
        {return caml_call2(_Xe_,r,caml_call2(_bH_,caml_call1(_Xd_,r),x))}],
     _Xg_=_Xa_[3],
     _Xh_=_Xa_[2],
     _Xi_=_Xa_[1],
     _Xj_=_Qw_([0,compare]),
     _Xk_=_Qw_([0,compare]),
     _Xl_=_Qw_([0,compare]),
     _Xm_=_Qw_([0,compare]),
     _Xn_=_QF_([0,compare]),
     _Xo_=_QF_([0,compare]),
     _Xp_=_QF_([0,compare]),
     _Xq_=_QF_([0,compare]),
     _Yn_=Reset[2][46],
     _Yo_=Reset[2][45],
     _Yp_=Reset[2][44],
     _Yq_=Reset[2][43],
     _Yr_=Reset[2][42],
     _Ys_=Reset[2][41],
     _Yt_=Reset[2][38],
     _Yu_=Reset[2][37],
     _Yv_=Reset[2][36],
     _Yw_=Reset[2][35],
     _Yx_=Reset[2][34],
     _Yy_=Reset[2][33],
     _Yz_=Reset[2][32],
     _YA_=Reset[2][31],
     _YB_=Reset[2][30],
     _YC_=Reset[2][29],
     _YD_=Reset[2][28],
     _YE_=Reset[2][27],
     _YF_=Reset[2][26],
     _YG_=Reset[2][25],
     _YH_=Reset[2][24],
     _YI_=Reset[2][23],
     _YJ_=Reset[2][21],
     _YK_=Reset[2][17],
     _YL_=Reset[2][16],
     _YM_=Reset[2][15],
     _YN_=Reset[2][13],
     _YO_=Reset[2][12],
     _YP_=Reset[2][11],
     _YQ_=Reset[2][9],
     _YR_=Reset[2][8],
     _YS_=Reset[2][6],
     _YT_=Reset[2][5],
     _YU_=Reset[2][3],
     _YV_=Reset[2][2],
     _YX_=Reset[1][154],
     _ZU_=Reset[2][46],
     _ZV_=Reset[2][45],
     _ZW_=Reset[2][44],
     _ZX_=Reset[2][43],
     _ZY_=Reset[2][42],
     _ZZ_=Reset[2][41],
     _Z0_=Reset[2][40],
     _Z1_=Reset[2][39],
     _Z2_=Reset[2][38],
     _Z3_=Reset[2][37],
     _Z4_=Reset[2][36],
     _Z5_=Reset[2][35],
     _Z6_=Reset[2][34],
     _Z7_=Reset[2][33],
     _Z8_=Reset[2][32],
     _Z9_=Reset[2][31],
     _Z__=Reset[2][30],
     _Z$_=Reset[2][29],
     __a_=Reset[2][28],
     __b_=Reset[2][27],
     __c_=Reset[2][26],
     __d_=Reset[2][25],
     __e_=Reset[2][24],
     __f_=Reset[2][23],
     __g_=Reset[2][22],
     __h_=Reset[2][21],
     __i_=Reset[2][20],
     __j_=Reset[2][17],
     __k_=Reset[2][16],
     __l_=Reset[2][15],
     __m_=Reset[2][14],
     __n_=Reset[2][13],
     __o_=Reset[2][12],
     __p_=Reset[2][11],
     __q_=Reset[2][10],
     __r_=Reset[2][9],
     __s_=Reset[2][8],
     __t_=Reset[2][7],
     __u_=Reset[2][6],
     __v_=Reset[2][5],
     __w_=Reset[2][4],
     __x_=Reset[2][3],
     __y_=Reset[2][2],
     __A_=Reset[1][154],
     _Xr_=0,
     _Xs_=0,
     _Xt_=0,
     _Xu_=0,
     _Xv_=0,
     _Xw_=0,
     _Xx_=0,
     _Xy_=0,
     _Xz_=0,
     _XA_=0,
     _XB_=0,
     _XC_=0,
     _XD_=0,
     _XE_=0,
     _XF_=0,
     _XG_=0,
     _XH_=0,
     _XI_=0,
     _XJ_=0,
     _XK_=0,
     _XL_=0,
     _XM_=0,
     _XN_=0,
     _XO_=0,
     _XP_=0,
     _XQ_=0,
     _XR_=0,
     _XS_=0,
     _XT_=0,
     _XU_=0,
     _XV_=0,
     _XW_=0,
     _XX_=0,
     _XY_=0,
     _XZ_=0,
     _X0_=0,
     _X1_=0,
     _X2_=0,
     _X3_=0,
     _X4_=0,
     _X5_=0,
     _X6_=0,
     _X7_=0,
     _X8_=0,
     _X9_=0,
     _X__=0,
     _X$_=0,
     _Ya_=0,
     _Yb_=0,
     _Yc_=0,
     _Yd_=0,
     _Ye_=0,
     _Yf_=0,
     _Yg_=0,
     _Yh_=0,
     _Yi_=0,
     _Yj_=0,
     _Yk_=0,
     _Yl_=0,
     _Ym_=0,
     _YW_=
      [0,
       Pervasives,
       Arg,
       Array,
       ArrayLabels,
       Buffer,
       Bytes,
       BytesLabels,
       Callback,
       Char,
       Complex,
       Digest,
       Filename,
       Format,
       Gc,
       Genlex,
       Hashtbl,
       Int32,
       Int64,
       Lazy,
       Lexing,
       List,
       ListLabels,
       Map,
       Marshal,
       MoreLabels,
       Nativeint,
       Oo,
       Parsing,
       Printexc,
       Printf,
       Queue,
       Random,
       Scanf,
       Set,
       Sort,
       Stack,
       [0,ArrayLabels,BytesLabels,ListLabels,StringLabels],
       Stream,
       String,
       StringLabels,
       Sys,
       Weak,
       Num,
       Big_int,
       Arith_status],
     _YY_=0,
     _YZ_=0,
     _Y0_=0,
     _Y1_=0,
     _Y2_=0,
     _Y3_=0,
     _Y4_=0,
     _Y5_=0,
     _Y6_=0,
     _Y7_=0,
     _Y8_=0,
     _Y9_=0,
     _Y__=0,
     _Y$_=0,
     _Za_=0,
     _Zb_=0,
     _Zc_=0,
     _Zd_=0,
     _Ze_=0,
     _Zf_=0,
     _Zg_=0,
     _Zh_=0,
     _Zi_=0,
     _Zj_=0,
     _Zk_=0,
     _Zl_=0,
     _Zm_=0,
     _Zn_=0,
     _Zo_=0,
     _Zp_=0,
     _Zq_=0,
     _Zr_=0,
     _Zs_=0,
     _Zt_=0,
     _Zu_=0,
     _Zv_=0,
     _Zw_=0,
     _Zx_=0,
     _Zy_=0,
     _Zz_=0,
     _ZA_=0,
     _ZB_=0,
     _ZC_=0,
     _ZD_=0,
     _ZE_=0,
     _ZF_=0,
     _ZG_=0,
     _ZH_=0,
     _ZI_=0,
     _ZJ_=0,
     _ZK_=0,
     _ZL_=0,
     _ZM_=0,
     _ZN_=0,
     _ZO_=0,
     _ZP_=0,
     _ZQ_=0,
     _ZR_=0,
     _ZS_=0,
     _ZT_=0,
     __z_=
      [0,
       Pervasives,
       Arg,
       Array,
       ArrayLabels,
       Buffer,
       Bytes,
       BytesLabels,
       Callback,
       Char,
       Complex,
       Digest,
       Filename,
       Format,
       Gc,
       Genlex,
       Hashtbl,
       Int32,
       Int64,
       Lazy,
       Lexing,
       List,
       ListLabels,
       Map,
       Marshal,
       MoreLabels,
       Nativeint,
       Oo,
       Parsing,
       Printexc,
       Printf,
       Queue,
       Random,
       Scanf,
       Set,
       Sort,
       Stack,
       [0,ArrayLabels,BytesLabels,ListLabels,StringLabels],
       Stream,
       String,
       StringLabels,
       Sys,
       Weak,
       Num,
       Big_int,
       Arith_status],
     __B_=
      [0,
       _fX_
        (cst_General,
         [0,
          _t0_,
          [0,
           _Qa_,
           [0,
            _ur_,
            [0,
             _vQ_,
             [0,
              _mn_,
              [0,
               _o9_,
               [0,
                _wp_,
                [0,
                 _uP_,
                 [0,
                  _nx_,
                  [0,
                   _ol_,
                   [0,
                    _x4_,
                    [0,
                     _vA_,
                     [0,
                      _y$_,
                      [0,
                       _zZ_,
                       [0,_Pe_,[0,_QX_,[0,_Q$_,[0,_Be_,[0,_xV_,[0,_Sq_,0]]]]]]]]]]]]]]]]]]]])];
    function __C_(_aah_,_aag_){var _aai_=_aah_ || _aag_;return _aai_}
    var
     __D_=
      [0,
       _YY_,
       _YZ_,
       _Y0_,
       _Y1_,
       _Y2_,
       _Y3_,
       _Y4_,
       _Y5_,
       _Y6_,
       _Y7_,
       _Y8_,
       _Y9_,
       _Y__,
       _Y$_,
       _Za_,
       _Zb_,
       _Zc_,
       _Zd_,
       _Ze_,
       _Zf_,
       _Zg_,
       _Zh_,
       _Zi_,
       _Zj_,
       _Zk_,
       _Zl_,
       _Zm_,
       _Zn_,
       _Zo_,
       _Zp_,
       _Zq_,
       _Zr_,
       _Zs_,
       _Zt_,
       _Zu_,
       _Zv_,
       _Zw_,
       _Zx_,
       _Zy_,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       _dp_,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       _dB_,
       _dC_,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       _dN_,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       _eg_,
       _eh_,
       _ei_,
       _ej_,
       _ek_,
       _el_,
       _em_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       _es_,
       _et_,
       _eu_,
       _ev_,
       _ew_,
       _ex_,
       _ey_,
       _ez_,
       _eA_,
       _eB_,
       _eC_,
       _eD_,
       _eE_,
       _eF_,
       _eG_,
       _eH_,
       _eI_,
       _eJ_,
       _eK_,
       _eL_,
       _eM_,
       _eN_,
       _eO_,
       _eP_,
       _eQ_,
       _eR_,
       _eS_,
       _eT_,
       _eU_,
       _eV_,
       _eW_,
       _eX_,
       _eY_,
       _eZ_,
       _e0_,
       _e1_,
       _e2_,
       _e3_,
       _e4_,
       _e5_,
       _e6_,
       _e7_,
       _e8_,
       _e9_,
       _e__,
       _e$_,
       _fa_,
       _fb_,
       _fc_,
       _fd_,
       _fe_,
       __A_,
       _ff_,
       _fg_,
       _fh_,
       _fi_,
       _fj_,
       _fk_,
       _fl_,
       _fm_,
       _fn_,
       _fo_,
       __z_,
       __y_,
       __x_,
       __w_,
       __v_,
       __u_,
       __t_,
       __s_,
       __r_,
       __q_,
       __p_,
       __o_,
       __n_,
       __m_,
       __l_,
       __k_,
       __j_,
       __i_,
       __h_,
       __g_,
       __f_,
       __e_,
       __d_,
       __c_,
       __b_,
       __a_,
       _Z$_,
       _Z__,
       _Z9_,
       _Z8_,
       _Z7_,
       _Z6_,
       _Z5_,
       _Z4_,
       _Z3_,
       _Z2_,
       _Z1_,
       _Z0_,
       _ZZ_,
       _ZY_,
       _ZX_,
       _ZW_,
       _ZV_,
       _ZU_,
       _as_,
       function(_aae_,_aad_){var _aaf_=_aae_?_aad_:_aae_;return _aaf_},
       __C_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _c8_,
       _c9_,
       _c__,
       _da_,
       _dc_,
       _db_,
       _de_,
       _df_,
       _i_,
       _j_,
       _k_,
       _l_,
       _c6_,
       _dg_,
       _c$_,
       _bH_];
    function __E_(_aab_,_aaa_){var _aac_=_aab_ || _aaa_;return _aac_}
    var
     __F_=
      [0,
       _Xr_,
       _Xs_,
       _Xt_,
       _Xu_,
       _Xv_,
       _Xw_,
       _Xx_,
       _Xy_,
       _Xz_,
       _XA_,
       _XB_,
       _XC_,
       _XD_,
       _XE_,
       _XF_,
       _XG_,
       _XH_,
       _XI_,
       _XJ_,
       _XK_,
       _XL_,
       _XM_,
       _XN_,
       _XO_,
       _XP_,
       _XQ_,
       _XR_,
       _XS_,
       _XT_,
       _XU_,
       _XV_,
       _XW_,
       _XX_,
       _XY_,
       _XZ_,
       _X0_,
       _X1_,
       _X2_,
       _X3_,
       _X4_,
       _X5_,
       _X6_,
       _X7_,
       _X8_,
       _X9_,
       _X__,
       _X$_,
       _Ya_,
       _Yb_,
       _Yc_,
       _Yd_,
       _Ye_,
       _Yf_,
       _Yg_,
       _Yh_,
       _Yi_,
       _Yj_,
       _Yk_,
       _Yl_,
       _Ym_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       _dp_,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       _dB_,
       _dC_,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       _dN_,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       _eg_,
       _eh_,
       _ei_,
       _ej_,
       _ek_,
       _el_,
       _em_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       _es_,
       _et_,
       _eu_,
       _ev_,
       _ew_,
       _ex_,
       _ey_,
       _ez_,
       _eA_,
       _eB_,
       _eC_,
       _eD_,
       _eE_,
       _eF_,
       _eG_,
       _eH_,
       _eI_,
       _eJ_,
       _eK_,
       _eL_,
       _eM_,
       _eN_,
       _eO_,
       _eP_,
       _eQ_,
       _eR_,
       _eS_,
       _eT_,
       _eU_,
       _eV_,
       _eW_,
       _eX_,
       _eY_,
       _eZ_,
       _e0_,
       _e1_,
       _e2_,
       _e3_,
       _e4_,
       _e5_,
       _e6_,
       _e7_,
       _e8_,
       _e9_,
       _e__,
       _e$_,
       _fa_,
       _fb_,
       _fc_,
       _fd_,
       _fe_,
       _YX_,
       _ff_,
       _fg_,
       _fh_,
       _fi_,
       _fj_,
       _fk_,
       _fl_,
       _fm_,
       _fn_,
       _fo_,
       _YW_,
       _YV_,
       _YU_,
       _YT_,
       _YS_,
       _YR_,
       _YQ_,
       _YP_,
       _YO_,
       _YN_,
       _YM_,
       _YL_,
       _YK_,
       _YJ_,
       _YI_,
       _YH_,
       _YG_,
       _YF_,
       _YE_,
       _YD_,
       _YC_,
       _YB_,
       _YA_,
       _Yz_,
       _Yy_,
       _Yx_,
       _Yw_,
       _Yv_,
       _Yu_,
       _Yt_,
       _Ys_,
       _Yr_,
       _Yq_,
       _Yp_,
       _Yo_,
       _Yn_,
       _as_,
       function(_$__,_$9_){var _$$_=_$__?_$9_:_$__;return _$$_},
       __E_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _c8_,
       _c9_,
       _c__,
       _da_,
       _dc_,
       _db_,
       _de_,
       _df_,
       _i_,
       _j_,
       _k_,
       _l_,
       _c6_,
       _dg_,
       _c$_,
       _bH_],
     __G_=
      [0,
       [0,[0,_fx_],[0]],
       Test,
       command_line_main,
       _fX_,
       _fY_,
       _f0_,
       _fZ_,
       _f2_,
       _f4_,
       _f5_,
       _f6_,
       _f7_,
       _f$_,
       _f8_,
       _f9_,
       _f__,
       _ga_,
       _gc_,
       _gd_,
       _gf_,
       _gg_,
       _gj_,
       _gh_,
       _gi_,
       _gk_,
       _gl_,
       _gm_,
       _gn_,
       _gp_,
       _gq_,
       _gr_,
       _gs_,
       _gt_,
       _gu_,
       _gv_,
       _gw_],
     __H_=[0,_QM_,_QN_,_QO_,_QP_],
     __I_=[0,_QS_,_QT_,_QU_,_QV_],
     __J_=[0,_QQ_],
     __K_=[0,_z6_,_z7_,_dg_,_z3_,_z4_,_z5_],
     __L_=[0,_z1_,_z2_,_z0_],
     __M_=[0,_wt_,_wu_,_dg_,_wq_,_wr_,_ws_],
     __N_=[0],
     __O_=[0,_m_,_n_,_p_,_o_,_q_,_r_],
     __P_=
      [0,
       _Xm_[3],
       _Xm_[7],
       _Xm_[9],
       _Xm_[11],
       _Xm_[4],
       _Xm_[5],
       _Xm_[6],
       _Xm_[8],
       _Xm_[10],
       _Xm_[12],
       _Xm_[13]],
     __Q_=
      [0,
       _Xl_[3],
       _Xl_[7],
       _Xl_[9],
       _Xl_[11],
       _Xl_[4],
       _Xl_[5],
       _Xl_[6],
       _Xl_[8],
       _Xl_[10],
       _Xl_[12],
       _Xl_[13]],
     __R_=
      [0,
       _Xk_[3],
       _Xk_[7],
       _Xk_[9],
       _Xk_[11],
       _Xk_[4],
       _Xk_[5],
       _Xk_[6],
       _Xk_[8],
       _Xk_[10],
       _Xk_[12],
       _Xk_[13]],
     __S_=
      [0,
       _Xj_[3],
       _Xj_[7],
       _Xj_[9],
       _Xj_[11],
       _Xj_[4],
       _Xj_[5],
       _Xj_[6],
       _Xj_[8],
       _Xj_[10],
       _Xj_[12],
       _Xj_[13]],
     __T_=
      [0,
       _Xq_[3],
       _Xq_[7],
       _Xq_[10],
       _Xq_[4],
       _Xq_[5],
       _Xq_[6],
       _Xq_[8],
       _Xq_[9],
       _Xq_[11]],
     __U_=
      [0,
       _Xp_[3],
       _Xp_[7],
       _Xp_[10],
       _Xp_[4],
       _Xp_[5],
       _Xp_[6],
       _Xp_[8],
       _Xp_[9],
       _Xp_[11]],
     __V_=
      [0,
       _Xo_[3],
       _Xo_[7],
       _Xo_[10],
       _Xo_[4],
       _Xo_[5],
       _Xo_[6],
       _Xo_[8],
       _Xo_[9],
       _Xo_[11]],
     __W_=
      [0,
       _Xn_[3],
       _Xn_[7],
       _Xn_[10],
       _Xn_[4],
       _Xn_[5],
       _Xn_[6],
       _Xn_[8],
       _Xn_[9],
       _Xn_[11]],
     __X_=
      [0,
       _Ve_,
       _U2_,
       _U3_,
       _U5_,
       _U6_,
       _U7_,
       _U8_,
       _We_,
       _U9_,
       _Va_,
       _Vb_,
       _U__,
       _U$_,
       _U4_,
       _Vc_,
       _Vd_,
       _Vf_,
       _Vh_,
       _Vg_,
       _Vl_,
       _Vn_,
       _Vm_,
       _Vo_,
       _Vq_,
       _Vp_,
       _Vi_,
       _Vk_,
       _Vj_,
       _Vr_,
       _Vt_,
       _Vs_,
       _Vy_,
       _Vz_,
       _Vx_,
       _Vv_,
       _Vw_,
       _Vu_,
       _VD_,
       _VF_,
       _VE_,
       _VG_,
       _VI_,
       _VH_,
       _V1_,
       _V3_,
       _V2_,
       _V8_,
       _V9_,
       _V7_,
       _V5_,
       _V6_,
       _V4_,
       _Wb_,
       _Wd_,
       _Wc_,
       _VS_,
       _VU_,
       _VT_,
       _VP_,
       _VR_,
       _VQ_,
       _VM_,
       _VO_,
       _VN_,
       _VJ_,
       _VL_,
       _VK_,
       _VY_,
       _V0_,
       _VZ_,
       _VV_,
       _VX_,
       _VW_,
       _VA_,
       _VC_,
       _VB_,
       _V__,
       _Wa_,
       _V$_,
       [0,
        _Wf_[1],
        _Wf_[3],
        _Wf_[2],
        _Wf_[4],
        _Wf_[6],
        _Wf_[5],
        _Wf_[7],
        _Wf_[9],
        _Wf_[8],
        _Wf_[10],
        _Wf_[12],
        _Wf_[11],
        _Wf_[13],
        _Wf_[15],
        _Wf_[14],
        _Wf_[16],
        _Wf_[18],
        _Wf_[17]],
       _Wg_,
       join_string_list],
     __Y_=
      [0,
       _TY_,
       _TK_,
       _TL_,
       _TN_,
       _TO_,
       _TP_,
       _TQ_,
       _UY_,
       _TR_,
       _TU_,
       _TV_,
       _TS_,
       _TT_,
       _TM_,
       _TW_,
       _TX_,
       _TZ_,
       _T1_,
       _T0_,
       _T5_,
       _T7_,
       _T6_,
       _T8_,
       _T__,
       _T9_,
       _T2_,
       _T4_,
       _T3_,
       _T$_,
       _Ub_,
       _Ua_,
       _Ug_,
       _Uh_,
       _Uf_,
       _Ud_,
       _Ue_,
       _Uc_,
       _Ul_,
       _Un_,
       _Um_,
       _Uo_,
       _Uq_,
       _Up_,
       _UJ_,
       _UL_,
       _UK_,
       _UQ_,
       _UR_,
       _UP_,
       _UN_,
       _UO_,
       _UM_,
       _UV_,
       _UX_,
       _UW_,
       _UA_,
       _UC_,
       _UB_,
       _Ux_,
       _Uz_,
       _Uy_,
       _Uu_,
       _Uw_,
       _Uv_,
       _Ur_,
       _Ut_,
       _Us_,
       _UG_,
       _UI_,
       _UH_,
       _UD_,
       _UF_,
       _UE_,
       _Ui_,
       _Uk_,
       _Uj_,
       _US_,
       _UU_,
       _UT_,
       [0,
        _UZ_[1],
        _UZ_[3],
        _UZ_[2],
        _UZ_[4],
        _UZ_[6],
        _UZ_[5],
        _UZ_[7],
        _UZ_[9],
        _UZ_[8],
        _UZ_[10],
        _UZ_[12],
        _UZ_[11],
        _UZ_[13],
        _UZ_[15],
        _UZ_[14],
        _UZ_[16],
        _UZ_[18],
        _UZ_[17]],
       _U0_],
     __Z_=
      [0,
       _SG_,
       _Ss_,
       _St_,
       _Sv_,
       _Sw_,
       _Sx_,
       _Sy_,
       _TG_,
       _Sz_,
       _SC_,
       _SD_,
       _SA_,
       _SB_,
       _Su_,
       _SE_,
       _SF_,
       _SH_,
       _SJ_,
       _SI_,
       _SN_,
       _SP_,
       _SO_,
       _SQ_,
       _SS_,
       _SR_,
       _SK_,
       _SM_,
       _SL_,
       _ST_,
       _SV_,
       _SU_,
       _S0_,
       _S1_,
       _SZ_,
       _SX_,
       _SY_,
       _SW_,
       _S5_,
       _S7_,
       _S6_,
       _S8_,
       _S__,
       _S9_,
       _Tr_,
       _Tt_,
       _Ts_,
       _Ty_,
       _Tz_,
       _Tx_,
       _Tv_,
       _Tw_,
       _Tu_,
       _TD_,
       _TF_,
       _TE_,
       _Ti_,
       _Tk_,
       _Tj_,
       _Tf_,
       _Th_,
       _Tg_,
       _Tc_,
       _Te_,
       _Td_,
       _S$_,
       _Tb_,
       _Ta_,
       _To_,
       _Tq_,
       _Tp_,
       _Tl_,
       _Tn_,
       _Tm_,
       _S2_,
       _S4_,
       _S3_,
       _TA_,
       _TC_,
       _TB_,
       [0,
        _TH_[1],
        _TH_[3],
        _TH_[2],
        _TH_[4],
        _TH_[6],
        _TH_[5],
        _TH_[7],
        _TH_[9],
        _TH_[8],
        _TH_[10],
        _TH_[12],
        _TH_[11],
        _TH_[13],
        _TH_[15],
        _TH_[14],
        _TH_[16],
        _TH_[18],
        _TH_[17]],
       _TI_],
     __0_=
      [0,
       _bR_,
       _bS_,
       Equate[1][3],
       repr$2,
       empty$0,
       make,
       to_list$0,
       to_array,
       fold$1,
       fold_i$0,
       fold_acc$0,
       reduce$0,
       reduce_i$0,
       reduce_acc$0,
       try_reduce$0,
       try_reduce_i$0,
       try_reduce_acc$0,
       iter$1,
       iter_i$0,
       iter_acc$0,
       count$0,
       count_i$0,
       count_acc$0,
       fold_short$0,
       fold_short_i$0,
       fold_short_acc$0,
       reduce_short$0,
       reduce_short_i$0,
       reduce_short_acc$0,
       try_reduce_short$0,
       try_reduce_short_i$0,
       try_reduce_short_acc$0,
       iter_short$0,
       iter_short_i$0,
       iter_short_acc$0,
       for_all$0,
       for_all_i$0,
       for_all_acc$0,
       there_exists$0,
       there_exists_i$0,
       there_exists_acc$0,
       find$0,
       find_i$0,
       find_acc$0,
       try_find$0,
       try_find_i$0,
       try_find_acc$0,
       find_map$0,
       find_map_i$0,
       find_map_acc$0,
       try_find_map$0,
       try_find_map_i$0,
       try_find_map_acc$0,
       ToList],
     __1_=
      [0,
       [0,empty$2,_Qc_,_Qe_,_Qd_],
       function(_$7_)
        {function _$4_(param,_$8_)
          {var y=_$8_[1],x=param[1];return caml_call2(_$7_[1],x,y)}
         function _$5_(xs,k,v){return _Pi_(xs,_$4_,[0,k,v])}
         function _$6_(xs){return max$1(xs)}
         return [0,empty$2,_$5_,function(xs){return _Pj_(xs,_$4_)},_$6_]}],
     __2_=
      [0,
       [0,empty$2,_QH_,_QJ_,_QI_],
       function(_$3_)
        {function _$0_(x,y){return caml_call2(_$3_[1],x,y)}
         function _$1_(xs,v){return _Pi_(xs,_$0_,v)}
         function _$2_(xs){return max$1(xs)}
         return [0,empty$2,_$1_,function(xs){return _Pj_(xs,_$0_)},_$2_]}],
     __3_=
      [0,
       [0,empty$1,_Qo_,_Qq_,_Qs_,is_empty$0,_Qm_,_Qn_,_Qp_,_Qr_,_Qt_,_Qu_],
       function(_$Y_)
        {var _$Z_=_Qw_(_$Y_);
         return [0,
                 _$Z_[3],
                 _$Z_[7],
                 _$Z_[9],
                 _$Z_[11],
                 _$Z_[4],
                 _$Z_[5],
                 _$Z_[6],
                 _$Z_[8],
                 _$Z_[10],
                 _$Z_[12],
                 _$Z_[13]]}],
     __4_=
      [0,
       [0,empty$1,_QA_,_QD_,is_empty$0,_Qy_,_Qz_,_QB_,_QC_,_QE_],
       function(_$W_)
        {var _$X_=_QF_(_$W_);
         return [0,
                 _$X_[3],
                 _$X_[7],
                 _$X_[10],
                 _$X_[4],
                 _$X_[5],
                 _$X_[6],
                 _$X_[8],
                 _$X_[9],
                 _$X_[11]]}],
     __5_=
      [0,
       _cP_,
       _cR_,
       to_list$1,
       _cQ_,
       _cT_,
       _cS_,
       map$1,
       map_i$0,
       map_acc$0,
       filter$2,
       filter_i$0,
       filter_acc$0,
       filter_map$1,
       filter_map_i$0,
       filter_map_acc$0,
       flat_map$0,
       flat_map_i$0,
       flat_map_acc$0,
       [0,_cU_,_cW_,_cV_,_cX_,_cZ_,_cY_,_c0_,_c2_,_c1_,_c3_,_c5_,_c4_]],
     __6_=[0,_l0_,_lY_,_lZ_],
     __7_=
      [0,
       O,
       empty,
       singleton,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       size,
       is_empty,
       head,
       tail,
       try_head,
       try_tail,
       contains,
       Poly,
       prepend,
       reverse,
       concat,
       map$0,
       map_i,
       map_acc,
       filter$0,
       filter_i,
       filter_acc,
       filter_map$0,
       filter_map_i,
       filter_map_acc,
       flat_map,
       flat_map_i,
       flat_map_acc,
       fold,
       fold_i,
       fold_acc,
       reduce,
       reduce_i,
       reduce_acc,
       try_reduce,
       try_reduce_i,
       try_reduce_acc,
       iter$0,
       iter_i,
       iter_acc,
       count,
       count_i,
       count_acc,
       fold_short,
       fold_short_i,
       fold_short_acc,
       reduce_short,
       reduce_short_i,
       reduce_short_acc,
       try_reduce_short,
       try_reduce_short_i,
       try_reduce_short_acc,
       iter_short,
       iter_short_i,
       iter_short_acc,
       for_all,
       for_all_i,
       for_all_acc,
       there_exists,
       there_exists_i,
       there_exists_acc,
       find,
       find_i,
       find_acc,
       try_find,
       try_find_i,
       try_find_acc,
       find_map,
       find_map_i,
       find_map_acc,
       try_find_map,
       try_find_map_i,
       try_find_map_acc,
       scan,
       scan_i,
       scan_acc,
       scan_short,
       scan_short_i,
       scan_short_acc,
       Two,
       function(_$T_)
        {var _$U_=Specialize(_$T_),_$V_=_$U_[91];
         return [0,
                 _$U_[18],
                 _$U_[3],
                 _$U_[4],
                 _$U_[6],
                 _$U_[7],
                 _$U_[8],
                 _$U_[9],
                 _$U_[84],
                 _$U_[10],
                 _$U_[13],
                 _$U_[14],
                 _$U_[11],
                 _$U_[12],
                 _$U_[5],
                 _$U_[15],
                 _$U_[17],
                 _$U_[19],
                 _$U_[21],
                 _$U_[20],
                 _$U_[25],
                 _$U_[27],
                 _$U_[26],
                 _$U_[28],
                 _$U_[30],
                 _$U_[29],
                 _$U_[22],
                 _$U_[24],
                 _$U_[23],
                 _$U_[31],
                 _$U_[33],
                 _$U_[32],
                 _$U_[38],
                 _$U_[39],
                 _$U_[37],
                 _$U_[35],
                 _$U_[36],
                 _$U_[34],
                 _$U_[43],
                 _$U_[45],
                 _$U_[44],
                 _$U_[46],
                 _$U_[48],
                 _$U_[47],
                 _$U_[67],
                 _$U_[69],
                 _$U_[68],
                 _$U_[74],
                 _$U_[75],
                 _$U_[73],
                 _$U_[71],
                 _$U_[72],
                 _$U_[70],
                 _$U_[79],
                 _$U_[81],
                 _$U_[80],
                 _$U_[58],
                 _$U_[60],
                 _$U_[59],
                 _$U_[55],
                 _$U_[57],
                 _$U_[56],
                 _$U_[52],
                 _$U_[54],
                 _$U_[53],
                 _$U_[49],
                 _$U_[51],
                 _$U_[50],
                 _$U_[64],
                 _$U_[66],
                 _$U_[65],
                 _$U_[61],
                 _$U_[63],
                 _$U_[62],
                 _$U_[40],
                 _$U_[42],
                 _$U_[41],
                 _$U_[76],
                 _$U_[78],
                 _$U_[77],
                 [0,
                  _$V_[1],
                  _$V_[3],
                  _$V_[2],
                  _$V_[4],
                  _$V_[6],
                  _$V_[5],
                  _$V_[7],
                  _$V_[9],
                  _$V_[8],
                  _$V_[10],
                  _$V_[12],
                  _$V_[11],
                  _$V_[13],
                  _$V_[15],
                  _$V_[14],
                  _$V_[16],
                  _$V_[18],
                  _$V_[17]]]},
       SpecializeEquatable],
     __8_=[0,_Xf_,_Xi_,_Xh_,_Xg_],
     __9_=[0,_W8_,_W$_,_W__,_W9_],
     ____=[0,_WY_,_W1_,_W0_,_WZ_,_W2_,_W3_],
     __$_=[0,_WI_,_WJ_,_WP_,_WQ_,_WK_,_WL_,_WM_,_WN_,_WR_,_WS_,_WT_,_WO_],
     _$a_=[0,_Wv_,_Ww_,_WC_,_WD_,_Wx_,_Wy_,_Wz_,_WA_,_WE_,_WF_,_WG_,_WB_],
     _$b_=[0,_Wi_,_Wj_,_Wp_,_Wq_,_Wk_,_Wl_,_Wm_,_Wn_,_Wr_,_Ws_,_Wt_,_Wo_],
     _$c_=
      [0,
       _cJ_,
       _gU_,
       _cK_,
       _cI_,
       _hZ_,
       _h0_,
       _h1_,
       _h2_,
       _h__,
       _h$_,
       _ik_,
       _il_,
       _im_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cG_,
       _cH_],
     _$d_=
      [0,
       _cy_,
       _gT_,
       _cz_,
       _cx_,
       _hV_,
       _hW_,
       _hX_,
       _hY_,
       _h8_,
       _h9_,
       _ih_,
       _ii_,
       _ij_,
       _cr_,
       _cs_,
       _ct_,
       _cu_,
       _cv_,
       _cw_],
     _$e_=
      [0,
       _co_,
       _gS_,
       _cp_,
       _cn_,
       _hR_,
       _hS_,
       _hT_,
       _hU_,
       _h6_,
       _h7_,
       _ie_,
       _if_,
       _ig_,
       _ci_,
       _cj_,
       _ck_,
       _cl_,
       _cm_],
     _$f_=
      [0,
       _cf_,
       _gR_,
       _cg_,
       _ce_,
       _hN_,
       _hO_,
       _hP_,
       _hQ_,
       _h4_,
       _h5_,
       _ib_,
       _ic_,
       _id_,
       _ca_,
       _cb_,
       _cc_,
       _cd_],
     _$g_=[0,_bx_,_by_,_bz_,_bC_,_Qf_,_Qg_,_Qh_,_Qi_,_Qj_],
     _$h_=[0,_s_,value,map],
     _$i_=
      [0,
       equal,
       _za_,
       repr,
       compare$0,
       less_than$0,
       less_or_equal$0,
       greater_than$0,
       greater_or_equal$0,
       between$0,
       between_or_equal$0,
       min$0,
       max$0,
       min_max$0,
       none,
       try_of_string$1,
       some_if,
       some_if$0,
       is_some,
       is_none,
       value_def,
       value$0,
       or_failure,
       func,
       iter,
       filter,
       filter_map,
       value_map,
       function(_$R_)
        {var _$S_=Specialize$0(_$R_);
         return [0,
                 _$S_[6],
                 _$S_[7],
                 _$S_[13],
                 _$S_[14],
                 _$S_[8],
                 _$S_[9],
                 _$S_[10],
                 _$S_[11],
                 _$S_[15],
                 _$S_[16],
                 _$S_[17],
                 _$S_[12]]}],
     _$j_=[0,_uw_,_us_,_ut_,_uu_,_uv_,_ux_,_uy_],
     _$k_=
      [0,
       of_char,
       of_list,
       to_list,
       size$0,
       get,
       set,
       of_bytes,
       to_bytes,
       [0,_bF_,_bG_,_i_,_j_,_l_,_k_,_bH_],
       to_string,
       try_of_string$1,
       of_string$1,
       equal$1,
       different,
       repr$1,
       compare,
       less_than,
       less_or_equal,
       greater_than,
       greater_or_equal,
       between,
       between_or_equal,
       min,
       max,
       min_max,
       concat$0,
       substring,
       prefix,
       suffix,
       has_prefix,
       try_drop_prefix,
       drop_prefix$0,
       drop_prefix,
       has_suffix,
       try_drop_suffix,
       drop_suffix$0,
       drop_suffix,
       split,
       split$0,
       fold$0,
       filter$1],
     _$l_=
      [0,
       [0,_a8_,_a9_,_a$_,_a__,_ba_,_bb_,_bc_,_bd_,_om_,_i_,_j_,_l_,_k_,_be_],
       _a5_,
       _bh_,
       _bg_,
       try_of_string$2,
       of_string$0,
       _a6_,
       zero$0,
       one$0,
       negate$0,
       add$0,
       substract$0,
       multiply$0,
       divide$0,
       square$0,
       _om_,
       of_int,
       _a3_,
       compare,
       less_than,
       less_or_equal,
       greater_than,
       greater_or_equal,
       _oo_,
       _op_,
       min,
       max,
       min_max,
       abs,
       modulo$0,
       to_int,
       _a4_,
       approx_equal,
       _aZ_,
       _aX_,
       _aY_,
       _a0_,
       _a1_,
       _a2_,
       pi,
       e,
       of_parts,
       to_parts,
       to_fractional_and_integral,
       sqrt,
       exp,
       log,
       log10,
       expm1,
       log1p,
       cos,
       sin,
       tan,
       acos,
       asin,
       atan,
       atan2,
       hypot,
       cosh,
       sinh,
       tanh,
       ceil,
       floor,
       copy_sign,
       [0,_bq_,_bp_]],
     _$m_=
      [0,
       [0,
        _pK_,
        _pL_,
        _pN_,
        _pO_,
        _pP_,
        _pQ_,
        _pR_,
        _pS_,
        _pT_,
        _pF_,
        _pG_,
        _pH_,
        _pI_,
        _pl_],
       _pe_,
       _pq_,
       _pD_,
       try_of_string$3,
       _pd_,
       _pe_,
       _o__,
       _o$_,
       _pg_,
       _ph_,
       _pi_,
       _pj_,
       _pk_,
       _pm_,
       exponentiate,
       _pa_,
       of_float$0,
       compare$1,
       _ps_,
       _pt_,
       _pu_,
       _pv_,
       _px_,
       _py_,
       _pA_,
       _pB_,
       _pC_,
       _pf_,
       _pl_,
       _pb_,
       _pc_,
       _pp_,
       _po_],
     _$n_=
      [0,
       include$1[1],
       _yn_,
       _yo_,
       _yp_,
       _yq_,
       _yr_,
       _ys_,
       _yt_,
       _yu_,
       _yv_,
       _yw_,
       _yx_,
       _yy_,
       _yz_,
       _yA_,
       _yB_,
       _yC_,
       _yD_,
       _yE_,
       _yF_,
       _yG_,
       _yH_,
       _yI_,
       _yJ_,
       _yK_,
       _yL_,
       _yM_,
       _yN_,
       _yO_,
       _yP_,
       _yQ_,
       _yR_,
       _yS_,
       _yT_,
       _yU_,
       _yV_],
     _$o_=
      [0,
       include$0[1],
       _ny_,
       _nz_,
       _nA_,
       _nB_,
       _nC_,
       _nD_,
       _nE_,
       _nF_,
       _nG_,
       _nH_,
       _nI_,
       _nJ_,
       _nK_,
       _nL_,
       _nM_,
       _nN_,
       _nO_,
       _nP_,
       _nQ_,
       _nR_,
       _nS_,
       _nT_,
       _nU_,
       _nV_,
       _nW_,
       _nX_,
       _nY_,
       _nZ_,
       _n0_,
       _n1_,
       _n2_,
       _n3_,
       _n4_,
       _n5_,
       _n6_],
     _$p_=
      [0,
       include[1],
       _mL_,
       _mM_,
       _mN_,
       _mO_,
       _mP_,
       _mQ_,
       _mR_,
       _mS_,
       _mT_,
       _mU_,
       _mV_,
       _mW_,
       _mX_,
       _mY_,
       _mZ_,
       _m0_,
       _m1_,
       _m2_,
       _m3_,
       _m4_,
       _m5_,
       _m6_,
       _m7_,
       _m8_,
       _m9_,
       _m__,
       _m$_,
       _na_,
       _nb_,
       _nc_,
       _nd_,
       _ne_,
       _nf_,
       _ng_,
       _nh_],
     _$q_=
      [0,
       [0,_W_,_X_,_Z_,_Y_,___,_$_,_aa_,_ab_,_uA_,_i_,_j_,_l_,_k_,_ac_],
       _S_,
       _af_,
       _ae_,
       try_of_string,
       of_string,
       _T_,
       zero,
       one,
       negate,
       add,
       substract,
       multiply,
       divide,
       square,
       _uA_,
       _Q_,
       of_float,
       compare,
       less_than,
       less_or_equal,
       greater_than,
       greater_or_equal,
       between,
       between_or_equal,
       min,
       max,
       min_max,
       _U_,
       modulo,
       _R_,
       to_float,
       succ,
       pred,
       _O_,
       _P_,
       Bitwise],
     _$r_=
      [0,
       compare,
       less_than,
       less_or_equal,
       greater_than,
       greater_or_equal,
       between,
       between_or_equal,
       min,
       max,
       min_max,
       [0,_i_,_j_,_l_,_k_],
       _vR_,
       _vS_,
       _vU_,
       _vT_];
    function _$s_(_$P_,_$O_){var _$Q_=_$P_ || _$O_;return _$Q_}
    var
     _$t_=
      [0,
       [0,
        _aq_,
        _ar_,
        _i_,
        _j_,
        _l_,
        _k_,
        _as_,
        function(_$M_,_$L_){var _$N_=_$M_?_$L_:_$M_;return _$N_},
        _$s_],
       _av_,
       _au_,
       _ao_,
       compare,
       less_than,
       less_or_equal,
       greater_than,
       greater_or_equal,
       between,
       between_or_equal,
       min,
       max,
       min_max,
       _an_,
       try_of_string$0,
       _am_,
       not,
       and,
       or,
       xor],
     _$u_=[0,_cM_,_cN_,_cO_],
     _$v_=
      [0,
       _v_,
       _w_,
       Equate[1][3],
       _y_,
       _y_,
       _t_,
       _A_,
       _B_,
       most_recent_backtrace,
       MatchFailure,
       AssertFailure,
       InvalidArgument,
       Failure,
       NotFound,
       OutOfMemory,
       StackOverflow,
       SysError,
       EndOfFile,
       DivisionByZero,
       SysBlockedIO,
       UndefinedRecursiveModule,
       _x_,
       raise,
       raise_without_backtrace,
       invalid_argument,
       failure,
       failure_if,
       failure_unless,
       _z_,
       or_none],
     _$w_=
      [0,
       _aO_,
       _aO_,
       current,
       [0,
        [0,_aS_,_aT_,_i_,_j_,_l_,_k_],
        _aW_,
        _aV_,
        _aP_,
        compare,
        less_than,
        less_or_equal,
        greater_than,
        greater_or_equal,
        between,
        between_or_equal,
        min,
        max,
        min_max],
       Frame,
       frames],
     _$x_=[0,[0,_lw_],[0,_lE_],[0,_lS_],[0,_lT_],[0]],
     _$y_=[0],
     _$z_=[0],
     _$A_=
      [0,
       [0],
       [0],
       [0],
       [0,[0],[0]],
       [0,[0],[0]],
       [0,_kt_,[0]],
       [0],
       [0,function(_$K_){return [0]},_$z_,_$y_],
       _ln_,
       _lv_],
     _$B_=
      [0,
       [0,
        compare,
        less_than,
        less_or_equal,
        greater_than,
        greater_or_equal,
        between,
        between_or_equal,
        min,
        max,
        min_max,
        [0,_i_,_j_,_l_,_k_]]];
    function _$C_(_$I_,_$H_){var _$J_=_$I_ || _$H_;return _$J_}
    function _$D_(_$F_,_$E_){var _$G_=_$F_?_$E_:_$F_;return _$G_}
    var
     General=
      [0,
       Reset,
       [0,
        _di_,
        _dj_,
        _dk_,
        _dl_,
        _dm_,
        _dn_,
        _do_,
        _dp_,
        _dq_,
        _dr_,
        _ds_,
        _dt_,
        _du_,
        _dv_,
        _dw_,
        _dx_,
        _dy_,
        _dz_,
        _dA_,
        _dB_,
        _dC_,
        _dD_,
        _dE_,
        _dF_,
        _dG_,
        _dH_,
        _dI_,
        _dJ_,
        _dK_,
        _dL_,
        _dM_,
        _dN_,
        _dO_,
        _dP_,
        _dQ_,
        _dR_,
        _dS_,
        _dT_,
        _dU_,
        _dV_,
        _dW_,
        _dX_,
        _dY_,
        _dZ_,
        _d0_,
        _d1_,
        _d2_,
        _d3_,
        _d4_,
        _d5_,
        _d6_,
        _d7_,
        _d8_,
        _d9_,
        _d__,
        _d$_,
        _ea_,
        _eb_,
        _ec_,
        _ed_,
        _ee_,
        _ef_,
        _eg_,
        _eh_,
        _ei_,
        _ej_,
        _ek_,
        _el_,
        _em_,
        _en_,
        _eo_,
        _ep_,
        _eq_,
        _er_,
        _es_,
        _et_,
        _eu_,
        _ev_,
        _ew_,
        _ex_,
        _ey_,
        _ez_,
        _eA_,
        _eB_,
        _eC_,
        _eD_,
        _eE_,
        _eF_,
        _eG_,
        _eH_,
        _eI_,
        _eJ_,
        _eK_,
        _eL_,
        _eM_,
        _eN_,
        _eO_,
        _eP_,
        _eQ_,
        _eR_,
        _eS_,
        _eT_,
        _eU_,
        _eV_,
        _eW_,
        _eX_,
        _eY_,
        _eZ_,
        _e0_,
        _e1_,
        _e2_,
        _e3_,
        _e4_,
        _e5_,
        _e6_,
        _e7_,
        _e8_,
        _e9_,
        _e__,
        _e$_,
        _fa_,
        _fb_,
        _fc_,
        _fd_,
        _fe_,
        Reset[1][154],
        _ff_,
        _fg_,
        _fh_,
        _fi_,
        _fj_,
        _fk_,
        _fl_,
        _fm_,
        _fn_,
        _fo_,
        [0,
         Pervasives,
         Arg,
         Array,
         ArrayLabels,
         Buffer,
         Bytes,
         BytesLabels,
         Callback,
         Char,
         Complex,
         Digest,
         Filename,
         Format,
         Gc,
         Genlex,
         Hashtbl,
         Int32,
         Int64,
         Lazy,
         Lexing,
         List,
         ListLabels,
         Map,
         Marshal,
         MoreLabels,
         Nativeint,
         Oo,
         Parsing,
         Printexc,
         Printf,
         Queue,
         Random,
         Scanf,
         Set,
         Sort,
         Stack,
         [0,ArrayLabels,BytesLabels,ListLabels,StringLabels],
         Stream,
         String,
         StringLabels,
         Sys,
         Weak,
         Num,
         Big_int,
         Arith_status],
        Reset[2][2],
        Reset[2][3],
        Reset[2][4],
        Reset[2][5],
        Reset[2][6],
        Reset[2][7],
        Reset[2][8],
        Reset[2][9],
        Reset[2][10],
        Reset[2][11],
        Reset[2][12],
        Reset[2][13],
        Reset[2][14],
        Reset[2][15],
        Reset[2][16],
        Reset[2][17],
        Reset[2][18],
        Reset[2][19],
        Reset[2][20],
        Reset[2][21],
        Reset[2][22],
        Reset[2][23],
        Reset[2][24],
        Reset[2][25],
        Reset[2][26],
        Reset[2][27],
        Reset[2][28],
        Reset[2][29],
        Reset[2][30],
        Reset[2][31],
        Reset[2][32],
        Reset[2][33],
        Reset[2][34],
        Reset[2][35],
        Reset[2][36],
        Reset[2][37],
        Reset[2][38],
        Reset[2][39],
        Reset[2][40],
        Reset[2][41],
        Reset[2][42],
        Reset[2][43],
        Reset[2][44],
        Reset[2][45],
        Reset[2][46],
        _as_,
        _$D_,
        _$C_,
        _Y_,
        _Z_,
        ___,
        _$_,
        _aa_,
        _ab_,
        _ac_,
        _bi_,
        _bj_,
        _bk_,
        _bl_,
        _bm_,
        _bn_,
        _bo_,
        _c8_,
        _c9_,
        _c__,
        _da_,
        _dc_,
        _db_,
        _de_,
        _df_,
        _i_,
        _j_,
        _k_,
        _l_,
        _c6_,
        _dg_,
        _c$_,
        _bH_],
       Shorten,
       _$B_,
       Equate,
       _$A_,
       _$x_,
       _$w_,
       _$v_,
       _$u_,
       Function1,
       Function2,
       Function3,
       Function4,
       Function5,
       Unit,
       _$t_,
       _$r_,
       _$q_,
       _$p_,
       _$o_,
       _$n_,
       _$m_,
       _$l_,
       _$k_,
       _$j_,
       _$i_,
       _$h_,
       _$g_,
       _$f_,
       _$e_,
       _$d_,
       _$c_,
       _$b_,
       _$a_,
       __$_,
       ____,
       __9_,
       __8_,
       __7_,
       __6_,
       __5_,
       __4_,
       __3_,
       __2_,
       __1_,
       __0_,
       __Z_,
       __Y_,
       __X_,
       __W_,
       __V_,
       __U_,
       __T_,
       __S_,
       __R_,
       __Q_,
       __P_,
       __O_,
       __N_,
       __M_,
       __L_,
       __K_,
       __J_,
       __I_,
       __H_,
       __G_,
       __F_,
       __D_,
       __B_];
    runtime.caml_register_global(1605,General,"General");
    return}
  (function(){return this}()));


//# 1 "../src/JsOfOCairo.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_float_compare=runtime.caml_float_compare,
     caml_int_compare=runtime.caml_int_compare,
     caml_js_to_string=runtime.caml_js_to_string,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_weight=caml_new_string("weight"),
     cst_slant=caml_new_string("slant"),
     cst_ofs=caml_new_string("ofs"),
     cst_alpha=caml_new_string("alpha"),
     partial=[0,2],
     partial$0=[0,2],
     partial$1=[12,32,[8,0,0,[0,2],0]],
     partial$2=[0,2],
     partial$3=[12,32,[8,0,0,[0,2],0]],
     partial$4=[0,2],
     cst$3=caml_new_string(""),
     cst$2=caml_new_string(""),
     cst_Bold=caml_new_string("Bold"),
     cst_Normal=caml_new_string("Normal"),
     cst_Upright=caml_new_string("Upright"),
     cst_Italic=caml_new_string("Italic"),
     cst_Oblique=caml_new_string("Oblique"),
     partial$5=[11,caml_new_string("; y_advance="),[8,0,0,[0,2],[12,125,0]]],
     partial$6=[0,2],
     partial$7=[12,125,0],
     partial$8=[0,2],
     partial$9=[12,125,0],
     partial$10=[0,2],
     cst$1=caml_new_string("; "),
     partial$11=[11,caml_new_string("})"),0],
     partial$12=
      [11,
       caml_new_string("; r1"),
       [8,
        0,
        0,
        [0,2],
        [11,
         caml_new_string("; stop_points="),
         [2,0,[11,caml_new_string("})"),0]]]]],
     partial$13=[0,2],
     cst_CLEAR=caml_new_string("CLEAR"),
     cst_SOURCE=caml_new_string("SOURCE"),
     cst_OVER=caml_new_string("OVER"),
     cst_IN=caml_new_string("IN"),
     cst_OUT=caml_new_string("OUT"),
     cst_ATOP=caml_new_string("ATOP"),
     cst_DEST=caml_new_string("DEST"),
     cst_DEST_OVER=caml_new_string("DEST_OVER"),
     cst_DEST_IN=caml_new_string("DEST_IN"),
     cst_DEST_OUT=caml_new_string("DEST_OUT"),
     cst_DEST_ATOP=caml_new_string("DEST_ATOP"),
     cst_XOR=caml_new_string("XOR"),
     cst_ADD=caml_new_string("ADD"),
     cst_SATURATE=caml_new_string("SATURATE"),
     cst_JOIN_MITER=caml_new_string("JOIN_MITER"),
     cst_JOIN_ROUND=caml_new_string("JOIN_ROUND"),
     cst_JOIN_BEVEL=caml_new_string("JOIN_BEVEL"),
     cst_BUTT=caml_new_string("BUTT"),
     cst_ROUND=caml_new_string("ROUND"),
     cst_SQUARE=caml_new_string("SQUARE"),
     cst_EVEN_ODD=caml_new_string("EVEN_ODD"),
     cst_WINDING=caml_new_string("WINDING"),
     cst$0=caml_new_string("; "),
     partial$14=[11,caml_new_string("; y0="),[8,0,0,[0,2],[12,125,0]]],
     partial$15=[0,2],
     cst=caml_new_string(""),
     cst_INVALID_RESTORE=caml_new_string("INVALID_RESTORE"),
     cst_INVALID_POP_GROUP=caml_new_string("INVALID_POP_GROUP"),
     cst_NO_CURRENT_POINT=caml_new_string("NO_CURRENT_POINT"),
     cst_INVALID_MATRIX=caml_new_string("INVALID_MATRIX"),
     cst_INVALID_STATUS=caml_new_string("INVALID_STATUS"),
     cst_NULL_POINTER=caml_new_string("NULL_POINTER"),
     cst_INVALID_STRING=caml_new_string("INVALID_STRING"),
     cst_INVALID_PATH_DATA=caml_new_string("INVALID_PATH_DATA"),
     cst_READ_ERROR=caml_new_string("READ_ERROR"),
     cst_WRITE_ERROR=caml_new_string("WRITE_ERROR"),
     cst_SURFACE_FINISHED=caml_new_string("SURFACE_FINISHED"),
     cst_SURFACE_TYPE_MISMATCH=caml_new_string("SURFACE_TYPE_MISMATCH"),
     cst_PATTERN_TYPE_MISMATCH=caml_new_string("PATTERN_TYPE_MISMATCH"),
     cst_INVALID_CONTENT=caml_new_string("INVALID_CONTENT"),
     cst_INVALID_FORMAT=caml_new_string("INVALID_FORMAT"),
     cst_INVALID_VISUAL=caml_new_string("INVALID_VISUAL"),
     cst_FILE_NOT_FOUND=caml_new_string("FILE_NOT_FOUND"),
     cst_INVALID_DASH=caml_new_string("INVALID_DASH"),
     cst_INVALID_DSC_COMMENT=caml_new_string("INVALID_DSC_COMMENT"),
     cst_INVALID_INDEX=caml_new_string("INVALID_INDEX"),
     cst_CLIP_NOT_REPRESENTABLE=caml_new_string("CLIP_NOT_REPRESENTABLE"),
     cst_TEMP_FILE_ERROR=caml_new_string("TEMP_FILE_ERROR"),
     cst_INVALID_STRIDE=caml_new_string("INVALID_STRIDE"),
     cst_FONT_TYPE_MISMATCH=caml_new_string("FONT_TYPE_MISMATCH"),
     cst_USER_FONT_IMMUTABLE=caml_new_string("USER_FONT_IMMUTABLE"),
     cst_USER_FONT_ERROR=caml_new_string("USER_FONT_ERROR"),
     cst_NEGATIVE_COUNT=caml_new_string("NEGATIVE_COUNT"),
     cst_INVALID_CLUSTERS=caml_new_string("INVALID_CLUSTERS"),
     cst_INVALID_SLANT=caml_new_string("INVALID_SLANT"),
     cst_INVALID_WEIGHT=caml_new_string("INVALID_WEIGHT"),
     cst_INVALID_SIZE=caml_new_string("INVALID_SIZE"),
     cst_USER_FONT_NOT_IMPLEMENTED=
      caml_new_string("USER_FONT_NOT_IMPLEMENTED"),
     cst_DEVICE_TYPE_MISMATCH=caml_new_string("DEVICE_TYPE_MISMATCH"),
     cst_DEVICE_ERROR=caml_new_string("DEVICE_ERROR"),
     cst_INVALID_MESH_CONSTRUCTION=
      caml_new_string("INVALID_MESH_CONSTRUCTION"),
     cst_DEVICE_FINISHED=caml_new_string("DEVICE_FINISHED"),
     cst_JBIG2_GLOBAL_MISSING=caml_new_string("JBIG2_GLOBAL_MISSING"),
     cst_cairo_restore_without_matching_cairo_save=
      caml_new_string("cairo_restore() without matching cairo_save()"),
     cst_no_saved_group_to_pop_i_e_cairo_pop_group_without_matching_cairo_push_group=
      caml_new_string
       ("no saved group to pop, i.e. cairo_pop_group() without matching cairo_push_group()"),
     cst_no_current_point_defined=caml_new_string("no current point defined"),
     cst_invalid_matrix_not_invertible=
      caml_new_string("invalid matrix (not invertible)"),
     cst_invalid_value_for_an_input_cairo_status_t=
      caml_new_string("invalid value for an input cairo_status_t"),
     cst_NULL_pointer=caml_new_string("NULL pointer"),
     cst_input_string_not_valid_UTF_8=
      caml_new_string("input string not valid UTF-8"),
     cst_input_path_data_not_valid=
      caml_new_string("input path data not valid"),
     cst_error_while_reading_from_input_stream=
      caml_new_string("error while reading from input stream"),
     cst_error_while_writing_to_output_stream=
      caml_new_string("error while writing to output stream"),
     cst_the_target_surface_has_been_finished=
      caml_new_string("the target surface has been finished"),
     cst_the_surface_type_is_not_appropriate_for_the_operation=
      caml_new_string("the surface type is not appropriate for the operation"),
     cst_the_pattern_type_is_not_appropriate_for_the_operation=
      caml_new_string("the pattern type is not appropriate for the operation"),
     cst_invalid_value_for_an_input_cairo_content_t=
      caml_new_string("invalid value for an input cairo_content_t"),
     cst_invalid_value_for_an_input_cairo_format_t=
      caml_new_string("invalid value for an input cairo_format_t"),
     cst_invalid_value_for_an_input_Visual=
      caml_new_string("invalid value for an input Visual*"),
     cst_file_not_found=caml_new_string("file not found"),
     cst_invalid_value_for_a_dash_setting=
      caml_new_string("invalid value for a dash setting"),
     cst_invalid_value_for_a_DSC_comment=
      caml_new_string("invalid value for a DSC comment"),
     cst_invalid_index_passed_to_getter=
      caml_new_string("invalid index passed to getter"),
     cst_clip_region_not_representable_in_desired_format=
      caml_new_string("clip region not representable in desired format"),
     cst_error_creating_or_writing_to_a_temporary_file=
      caml_new_string("error creating or writing to a temporary file"),
     cst_invalid_value_for_stride=caml_new_string("invalid value for stride"),
     cst_the_font_type_is_not_appropriate_for_the_operation=
      caml_new_string("the font type is not appropriate for the operation"),
     cst_the_user_font_is_immutable=
      caml_new_string("the user-font is immutable"),
     cst_error_occurred_in_a_user_font_callback_function=
      caml_new_string("error occurred in a user-font callback function"),
     cst_negative_number_used_where_it_is_not_allowed=
      caml_new_string("negative number used where it is not allowed"),
     cst_input_clusters_do_not_represent_the_accompanying_text_and_glyph_arrays=
      caml_new_string
       ("input clusters do not represent the accompanying text and glyph arrays"),
     cst_invalid_value_for_an_input_cairo_font_slant_t=
      caml_new_string("invalid value for an input cairo_font_slant_t"),
     cst_invalid_value_for_an_input_cairo_font_weight_t=
      caml_new_string("invalid value for an input cairo_font_weight_t"),
     cst_invalid_value_typically_too_big_for_the_size_of_the_input_surface_pattern_etc=
      caml_new_string
       ("invalid value (typically too big) for the size of the input (surface, pattern, etc.)"),
     cst_user_font_method_not_implemented=
      caml_new_string("user-font method not implemented"),
     cst_the_device_type_is_not_appropriate_for_the_operation=
      caml_new_string("the device type is not appropriate for the operation"),
     cst_an_operation_to_the_device_caused_an_unspecified_error=
      caml_new_string
       ("an operation to the device caused an unspecified error"),
     cst_invalid_operation_during_mesh_pattern_construction=
      caml_new_string("invalid operation during mesh pattern construction"),
     cst_the_target_device_has_been_finished=
      caml_new_string("the target device has been finished"),
     cst_CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID_used_but_no_CAIRO_MIME_TYPE_JBIG2_GLOBAL_data_provided=
      caml_new_string
       ("CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID used but no CAIRO_MIME_TYPE_JBIG2_GLOBAL data provided"),
     point_definitions=
      caml_new_string
       ("\x84\x95\xa6\xbe\0\0\r\xe7\0\0\x01\xcd\0\0\x071\0\0\x071\b\0\x070\0\xa0\x01=\xc2e\xa0\x01=\xcf@\xa0\x01>\x16A\xa0\x01>\x83B\xa0\x01>\xb6C\xa0\x01>\xeeD\xa0\x01?0E\xa0\x01?SF\xa0\x01?\x88G\xa0\x01?\xbdH\xa0\x01?\xf7I\xa0\x01@1J\xa0\x01@pK\xa0\x01@\xc5L\xa0\x01A\x1aM\xa0\x01A^N\xa0\x01A\xa0O\xa0\x01A\xdbP\xa0\x01B\x02Q\xa0\x01B9R\xa0\x01BvS\xa0\x01B\xacT\xa0\x01B\xfcU\xa0\x01CCV\xa0\x01CtW\xa0\x01C\xc3X\xa0\x01C\xfbY\xa0\x01DDZ\xa0\x01D\x89[\xa0\x01D\xea\\\xa0\x01E/]\xa0\x01Ev^\xa0\x01E\xe1_\xa0\x01F%`\xa0\x01Fxa\xa0\x01F\xc5b\xa0\x01G\x1bc\xa0\x01GXd\xa0\x01G\xdch\xa0\x01G\xe9f\xa0\x01H\x12g\xa0\x01Pbi\xa0\x01P\xadj\xa0\x01P\xf2k\xa0\x01Q:l\xa0\x01Q\xedx\xa0\x01Q\xf5v\xa0\x01R\x11w\xa0\x01R t\xa0\x01RBu\xa0\x01RKm\xa0\x01R`n\xa0\x01Rxo\xa0\x01R\x90p\xa0\x01R\xa5q\xa0\x01R\xcer\xa0\x01R\xf1s\xa0\x01Sj\0@\xa0\x01Ssy\xa0\x01S\x97z\xa0\x01S\xbb{\xa0\x01S\xdf|\xa0\x01T\x03}\xa0\x01T-~\xa0\x01TQ\x7f\xa0\x01T\xa4\0A\xa0\x01U\x1e\0B\xa0\x01Uw\0H\xa0\x01U\x87\0G\xa0\x01U\x97\0F\xa0\x01U\xa7\0E\xa0\x01U\xb7\0D\xa0\x01U\xc7\0C\xa0\x01U\xeb\0I\xa0\x01V,\0J\xa0\x01Vp\0K\xa0\x01V\xad\0L\xa0\x01ZV\0O\xa0\x01Z\x8b\0M\xa0\x01Z\xb4\0N\xa0\x01Z\xf1\0P\xa0\x01[\x04\0Q\xa0\x01[3\0Z\xa0\x01[A\0X\xa0\x01[u\0Y\xa0\x01[\x83\0V\xa0\x01[\x96\0T\xa0\x01[\xb0\0U\xa0\x01[\xf1\0R\xa0\x01\\\x10\0S\xa0\x01\\*\0W\xa0\x01\\M\0\\\xa0\x01\\|\0[\xa0\x01\\\xa3\0_\xa0\x01\\\xc1\0]\xa0\x01\\\xd8\0^\xa0\x01]o\0a\xa0\x01]\xa0\0`\xa0\x01`\xda\0b\xa0\x01a\x10\0c\xa0\x01aC\0h\xa0\x01a_\0d\xa0\x01a{\0e\xa0\x01a\x94\0f\xa0\x01a\xad\0g\xa0\x01b\f\0i\xa0\x01b\x83\0n\xa0\x01b\x9f\0j\xa0\x01b\xcc\0k\xa0\x01b\xdb\0l\xa0\x01b\xf4\0m\xa0\x01c[\0o\xa0\x01c\xdc\0t\xa0\x01c\xf8\0p\xa0\x01d'\0q\xa0\x01d@\0r\xa0\x01dO\0s\xa0\x01d\xac\0|\xa0\x01d\xbe\0{\xa0\x01d\xcf\0y\xa0\x01d\xe8\0z\xa0\x01e\x04\0u\xa0\x01e\x99\0v\xa0\x01f.\0w\xa0\x01fX\0x\xa0\x01f\x9e\0}\xa0\x01f\xf2\x01\0\x82\xa0\x01g\x0e\0~\xa0\x01g0\0\x7f\xa0\x01gz\x01\0\x80\xa0\x01g\x89\x01\0\x81\xa0\x01g\xeb\x01\0\x87\xa0\x01h\x07\x01\0\x83\xa0\x01h)\x01\0\x84\xa0\x01hy\x01\0\x85\xa0\x01h\x88\x01\0\x86\xa0\x01m]\x01\0\x88\xa0\x01m\xbd\x01\0\x89\xa0\x01n:\x01\0\x8b\xa0\x01nZ\x01\0\x8a\xa0\x01n\xbb\x01\0\x8c\xa0\x01o\x06\x01\0\x8d\xa0\x01ot\x01\0\x8e\xa0\x01o\xb5\x01\0\x8f\xa0\x01o\xf8\x01\0\x92\xa0\x01p\x1a\x01\0\x90\xa0\x01p/\x01\0\x91\xa0\x01p\xb5\x01\0\x95\xa0\x01p\xdf\x01\0\x93\xa0\x01q6\x01\0\x94\xa0\x01r\xf7\x01\0\x96\xa0\x01u\x1a\x01\0\x97\xa0\x01uM\x01\0\x9a\xa0\x01uY\x01\0\x98\xa0\x01ur\x01\0\x99\xa0\x01u\xbf\x01\0\x9b\xa0\x01v\x0e\x01\0\xa0\xa0\x01v!\x01\0\x9e\xa0\x01v\xd2\x01\0\x9c\xa0\x01w\x01\x01\0\x9d\xa0\x01w \x01\0\x9f\xa0\x01wi\x01\0\xa2\xa0\x01w\x88\x01\0\xa1\xa0\x01w\xc1\x01\0\xa3\xa0\x01w\xfc\x01\0\xa4\xa0\x01xd\x01\0\xa5\xa0\x01x\xa7\x01\0\xa6\xa0\x01y\x04\x01\0\xa7\xa0\x01yd\x01\0\xa8\xa0\x01y\xc6\x01\0\xaa\xa0\x01y\xe5\x01\0\xa9\xa0\x01z>\x01\0\xab\xa0\x01z\xc1\x01\0\xac\xa0\x01{@\x01\0\xad\xa0\x01{\xad\x01\0\xae\xa0\x01|\"\x01\0\xc5\xa0\x01|7\x01\0\xc3\xa0\x01|]\x01\0\xc4\xa0\x01|\x7f\x01\0\xc1\xa0\x01|\x94\x01\0\xbf\xa0\x01|\xd9\x01\0\xbd\xa0\x01}\f\x01\0\xbe\xa0\x01}1\x01\0\xc0\xa0\x01}O\x01\0\xc2\xa0\x01}n\x01\0\xb7\xa0\x01}\x82\x01\0\xb8\xa0\x01}\xb6\x01\0\xb9\xa0\x01~\x0e\x01\0\xba\xa0\x01~[\x01\0\xbb\xa0\x01~\x86\x01\0\xb5\xa0\x01~\xa7\x01\0\xb6\xa0\x01~\xea\x01\0\xbc\xa0\x01\x7f\x0b\x01\0\xb1\xa0\x01\x7fA\x01\0\xb2\xa0\x01\x7f\x84\x01\0\xb3\xa0\x01\x7f\xd3\x01\0\xb4\xa0\x01\x7f\xfe\x01\0\xaf\xa0\x02\0\0\x80\x1f\x01\0\xb0\xa0\x02\0\0\x80\x81\x01\0\xc6\xa0\x02\0\0\x80\xe5\x01\0\xc7\xa0\x02\0\0\x81J\x01\0\xc8\xa0\x02\0\0\x81\xb4\x01\0\xc9\xa0\x02\0\0\x82,\x01\0\xca\xa0\x02\0\0\x82\xa7\x01\0\xcb\xa0\x02\0\0\x83\"\x01\0\xcc\xa0\x02\0\0\x83\x84\x01\0\xcd\xa0\x02\0\0\x84>\x01\0\xce\xa0\x02\0\0\x85\t\x01\0\xd3\xa0\x02\0\0\x85\x1e\x01\0\xd1\xa0\x02\0\0\x85F\x01\0\xd2\xa0\x02\0\0\x85\x89\x01\0\xcf\xa0\x02\0\0\x85\xa4\x01\0\xd0\xa0\x02\0\0\x85\xd9\x01\0\xd4\xa0\x02\0\0\x86,\x01\0\xd5\xa0\x02\0\0\x86\x88\x01\0\xd6\xa0\x02\0\0\x86\xa7\x01\0\xd7\xa0\x02\0\0\x86\xf8\x01\0\xd8\xa0\x02\0\0\x87\x15\x01\0\xd9\xa0\x02\0\0\x87f\x01\0\xda\xa0\x02\0\0\x87\x83\x01\0\xdb\xa0\x02\0\0\x87\xd5\x01\0\xdc\xa0\x02\0\0\x88\b\x01\0\xde\xa0\x02\0\0\x88'\x01\0\xdd\xa0\x02\0\0\x88`\x01\0\xdf\xa0\x02\0\0\x88\x99\x01\0\xe2\xa0\x02\0\0\x88\xaa\x01\0\xe1\xa0\x02\0\0\x88\xc9\x01\0\xe0\xa0\x02\0\0\x88\xfd\x01\0\xe5\xa0\x02\0\0\x89\t\x01\0\xe3\xa0\x02\0\0\x89\x1e\x01\0\xe4\xa0\x02\0\0\x89e\x01\0\xe7\xa0\x02\0\0\x89\x84\x01\0\xe6\xa0\x02\0\0\x89\xbb\x01\0\xe8\xa0\x02\0\0\x8a\0\x01\0\xea\xa0\x02\0\0\x8a\x1f\x01\0\xe9\xa0\x02\0\0\x8aT\x01\0\xeb\xa0\x02\0\0\x8a\x9a\x01\0\xed\xa0\x02\0\0\x8a\xb9\x01\0\xec\xa0\x02\0\0\x8a\xf0\x01\0\xee\xa0\x02\0\0\x8b;\x01\0\xf0\xa0\x02\0\0\x8bZ\x01\0\xef\xa0\x02\0\0\x8b\x95\x01\0\xf1\xa0\x02\0\0\x8b\xdc\x01\0\xf3\xa0\x02\0\0\x8b\xfb\x01\0\xf2\xa0\x02\0\0\x8c0\x01\0\xf4\xa0\x02\0\0\x8cr\x01\0\xf8\xa0\x02\0\0\x8c\x7f\x01\0\xf6\xa0\x02\0\0\x8c\x8f\x01\0\xf7\xa0\x02\0\0\x8c\xae\x01\0\xf5\xa0\x02\0\0\x8c\xdf\x01\0\xf9\xa0\x02\0\0\x8d$\x01\0\xfd\xa0\x02\0\0\x8d1\x01\0\xfb\xa0\x02\0\0\x8dT\x01\0\xfc\xa0\x02\0\0\x8ds\x01\0\xfa\xa0\x02\0\0\x8d\xb1\x01\x01\x01\xa0\x02\0\0\x8d\xbe\x01\0\xff\xa0\x02\0\0\x8d\xe4\x01\x01\0\xa0\x02\0\0\x8e\x03\x01\0\xfe\xa0\x02\0\0\x8e=\x01\x01\x05\xa0\x02\0\0\x8eO\x01\x01\x04\xa0\x02\0\0\x8ed\x01\x01\x03\xa0\x02\0\0\x8e\x83\x01\x01\x02\xa0\x02\0\0\x8e\xde\x01\x01\x07\xa0\x02\0\0\x8e\xfd\x01\x01\x06\xa0\x02\0\0\x8f@\x01\x01\x0b\xa0\x02\0\0\x8fS\x01\x01\b\xa0\x02\0\0\x8f\x88\x01\x01\t\xa0\x02\0\0\x8f\xd8\x01\x01\n\xa0\x02\0\0\x90=\x01\x01\x0e\xa0\x02\0\0\x90J\x01\x01\f\xa0\x02\0\0\x90k\x01\x01\r\xa0\x02\0\0\x91\x0e\x01\x01\x12\xa0\x02\0\0\x91 \x01\x01\x0f\xa0\x02\0\0\x91|\x01\x01\x10\xa0\x02\0\0\x91\xa1\x01\x01\x11\xa0\x02\0\0\x9a<\x01\x01\x13\xa0\x02\0\0\x9a\x88\x01\x01\x14\xa0\x02\0\0\x9a\xa4\x01\x01\x15\xa0\x02\0\0\x9a\xed\x01\x01\x16\xa0\x02\0\0\x9bf\x01\x01\x17\xa0\x02\0\0\x9b\xa7\x01\x01\x1c\xa0\x02\0\0\x9b\xb7\x01\x01\x18\xa0\x02\0\0\x9b\xce\x01\x01\x19\xa0\x02\0\0\x9b\xfb\x01\x01\x1a\xa0\x02\0\0\x9c\x1c\x01\x01\x1b\xa0\x02\0\0\x9cZ\x01\x01\x1d\xa0\x02\0\0\x9c\x9b\x01\x01 \xa0\x02\0\0\x9c\xac\x01\x01\x1e\xa0\x02\0\0\x9c\xc9\x01\x01\x1f\xa0\x02\0\0\x9c\xf4\x01\x01$\xa0\x02\0\0\x9d\x05\x01\x01!\xa0\x02\0\0\x9d\x1c\x01\x01\"\xa0\x02\0\0\x9d5\x01\x01#\xa0\x02\0\0\x9d]\x01\x01(\xa0\x02\0\0\x9dn\x01\x01%\xa0\x02\0\0\x9d\x91\x01\x01&\xa0\x02\0\0\x9d\xb4\x01\x01'\xa0\x02\0\0\x9d\xe3\x01\x017\xa0\x02\0\0\x9d\xf4\x01\x01)\xa0\x02\0\0\x9e\r\x01\x01*\xa0\x02\0\0\x9e(\x01\x01+\xa0\x02\0\0\x9e?\x01\x01,\xa0\x02\0\0\x9eR\x01\x01-\xa0\x02\0\0\x9eg\x01\x01.\xa0\x02\0\0\x9e~\x01\x01/\xa0\x02\0\0\x9e\x95\x01\x010\xa0\x02\0\0\x9e\xb6\x01\x011\xa0\x02\0\0\x9e\xd3\x01\x012\xa0\x02\0\0\x9e\xf2\x01\x013\xa0\x02\0\0\x9f\x13\x01\x014\xa0\x02\0\0\x9f(\x01\x015\xa0\x02\0\0\x9f=\x01\x016\xa0\x02\0\0\x9fm\x01\x01M\xa0\x02\0\0\x9f\x93\x01\x01?\xa0\x02\0\0\x9f\xae\x01\x01>\xa0\x02\0\0\x9f\xf5\x01\x01K\xa0\x02\0\0\xa0\x01\x01\x01I\xa0\x02\0\0\xa0(\x01\x01J\xa0\x02\0\0\xa0:\x01\x01G\xa0\x02\0\0\xa0k\x01\x01H\xa0\x02\0\0\xa0\x91\x01\x01E\xa0\x02\0\0\xa0\xdc\x01\x01F\xa0\x02\0\0\xa0\xf3\x01\x01@\xa0\x02\0\0\xa1\f\x01\x01B\xa0\x02\0\0\xa17\x01\x01A\xa0\x02\0\0\xa1\x95\x01\x01C\xa0\x02\0\0\xa1\xb8\x01\x01D\xa0\x02\0\0\xa1\xdd\x01\x01L\xa0\x02\0\0\xa1\xff\x01\x01<\xa0\x02\0\0\xa2i\x01\x01=\xa0\x02\0\0\xa2\x9e\x01\x01:\xa0\x02\0\0\xa3C\x01\x01;\xa0\x02\0\0\xa3v\x01\x018\xa0\x02\0\0\xa3\x9f\x01\x019\xa0\x02\0\0\xa4\x88\x01\x01N\xa0\x02\0\0\xa5z\x01\x01O\xa0\x02\0\0\xa6+\x01\x01S\xa0\x02\0\0\xa6<\x01\x01P\xa0\x02\0\0\xa6Y\x01\x01Q\xa0\x02\0\0\xa6t\x01\x01R\xa0\x02\0\0\xa6\x9b\x01\x01V\xa0\x02\0\0\xa6\xac\x01\x01T\xa0\x02\0\0\xa6\xc7\x01\x01U\xa0\x02\0\0\xa7\x0b\x01\x01W\xa0\x02\0\0\xa71\x01\x01X\xa0\x02\0\0\xa7Z\x01\x01Y\xa0\x02\0\0\xa7\x83\x01\x01Z\xa0\x02\0\0\xa7\xac\x01\x01[\xa0\x02\0\0\xa7\xd3\x01\x01\\\xa0\x02\0\0\xa7\xf7\x01\x01]\xa0\x02\0\0\xa8\x1c\x01\x01`\xa0\x02\0\0\xa8-\x01\x01^\xa0\x02\0\0\xa8@\x01\x01_\xa0\x02\0\0\xa9\xa9\x01\x01a\xa0\x02\0\0\xa9\xd9\x01\x01b\xa0\x02\0\0\xaa\r\x01\x01q\xa0\x02\0\0\xaa>\x01\x01p\xa0\x02\0\0\xaa\\\x01\x01m\xa0\x02\0\0\xaau\x01\x01n\xa0\x02\0\0\xaa\x87\x01\x01k\xa0\x02\0\0\xaa\xa2\x01\x01l\xa0\x02\0\0\xaa\xb9\x01\x01i\xa0\x02\0\0\xaa\xe1\x01\x01h\xa0\x02\0\0\xab+\x01\x01g\xa0\x02\0\0\xabG\x01\x01j\xa0\x02\0\0\xabw\x01\x01f\xa0\x02\0\0\xab\x98\x01\x01o\xa0\x02\0\0\xab\xbb\x01\x01d\xa0\x02\0\0\xac\t\x01\x01e\xa0\x02\0\0\xac;\x01\x01c\xa0\x02\0\0\xac\x93\x01\x01r\xa0\x02\0\0\xac\xb1\x01\x01s\xa0\x02\0\0\xad \x01\x01t\xa0\x02\0\0\xad\xb2\x01\x01u\xa0\x02\0\0\xaeP\x01\x01w\xa0\x02\0\0\xae\xb8\x01\x01v\xa0\x02\0\0\xaf\x0e\x01\x01x\xa0\x02\0\0\xaf\xb2\x01\x01z\xa0\x02\0\0\xb0\x19\x01\x01y\xa0\x02\0\0\xb0m\x01\x01|\xa0\x02\0\0\xb0\xd0\x01\x01{\xa0\x02\0\0\xb1&\x01\x01~\xa0\x02\0\0\xb1\x8d\x01\x01}\xa0\x02\0\0\xb1\xe6\x01\x01\x80\xa0\x02\0\0\xb2G\x01\x01\x7f\xa0\x02\0\0\xb2\xa2\x01\x01\x81\xa0\x02\0\0\xb3U\x01\x01\x83\xa0\x02\0\0\xb3\xc3\x01\x01\x82\xa0\x02\0\0\xb40\x01\x01\x85\xa0\x02\0\0\xb4\xa7\x01\x01\x84\xa0\x02\0\0\xb5\x14\x01\x01\x87\xa0\x02\0\0\xb5\x82\x01\x01\x86\xa0\x02\0\0\xb5\xef\x01\x01\x89\xa0\x02\0\0\xb6f\x01\x01\x88\xa0\x02\0\0\xb6\xcd\x01\x01\x8b\xa0\x02\0\0\xb72\x01\x01\x8a\xa0\x02\0\0\xb7\x8c\x01\x01\x8d\xa0\x02\0\0\xb7\xf5\x01\x01\x8c\xa0\x02\0\0\xb8O\x01\x01\x8f\xa0\x02\0\0\xb8\xb4\x01\x01\x8e\xa0\x02\0\0\xb9\x0e\x01\x01\x91\xa0\x02\0\0\xb9w\x01\x01\x90\xa0\x02\0\0\xb9\xe0\x01\x01\x93\xa0\x02\0\0\xbah\x01\x01\x92\xa0\x02\0\0\xba\xe0\x01\x01\x95\xa0\x02\0\0\xbbl\x01\x01\x94\xa0\x02\0\0\xbb\xdd\x01\x01\x97\xa0\x02\0\0\xbcX\x01\x01\x96\xa0\x02\0\0\xbc\xbd\x01\x01\x99\xa0\x02\0\0\xbd@\x01\x01\x98\xa0\x02\0\0\xbd\xad\x01\x01\x9b\xa0\x02\0\0\xbe9\x01\x01\x9a\xa0\x02\0\0\xbe\xc2\x01\x01\x9c\xa0\x02\0\0\xbf\x80\x01\x01\x9d\xa0\x02\0\0\xc0$\x01\x01\x9e\xa0\x02\0\0\xc0\xd2\x01\x01\x9f\xa0\x02\0\0\xc1y\x01\x01\xa0\xa0\x02\0\0\xc2\x15\x01\x01\xa1\xa0\x02\0\0\xc2\xb6\x01\x01\xa2\xa0\x02\0\0\xc3N\x01\x01\xa3\xa0\x02\0\0\xc3\xef\x01\x01\xa4\xa0\x02\0\0\xc4\x86\x01\x01\xa5\xa0\x02\0\0\xc5Y\x01\x01\xa7\xa0\x02\0\0\xc5\xc7\x01\x01\xa6\xa0\x02\0\0\xc6.\x01\x01\xa8\xa0\x02\0\0\xc6\xe2\x01\x01\xaa\xa0\x02\0\0\xc7l\x01\x01\xa9\xa0\x02\0\0\xc7\xc8\x01\x01\xab\xa0\x02\0\0\xc8x\x01\x01\xad\xa0\x02\0\0\xc8\xee\x01\x01\xac\xa0\x02\0\0\xc9R\x01\x01\xae\xa0\x02\0\0\xca\t\x01\x01\xb0\xa0\x02\0\0\xca|\x01\x01\xaf\xa0\x02\0\0\xca\xdd\x01\x01\xb1\xa0\x02\0\0\xcb\x93\x01\x01\xb3\xa0\x02\0\0\xcc\t\x01\x01\xb2\xa0\x02\0\0\xccm\x01\x01\xb4\xa0\x02\0\0\xcd*\x01\x01\xb6\xa0\x02\0\0\xcd\x9a\x01\x01\xb5\xa0\x02\0\0\xce\x04\x01\x01\xb7\xa0\x02\0\0\xce\xbb\x01\x01\xb9\xa0\x02\0\0\xcf.\x01\x01\xb8\xa0\x02\0\0\xcf\x8f\x01\x01\xba\xa0\x02\0\0\xd0@\x01\x01\xbc\xa0\x02\0\0\xd0\xb9\x01\x01\xbb\xa0\x02\0\0\xd1\x14\x01\x01\xbd\xa0\x02\0\0\xd1\xc1\x01\x01\xbf\xa0\x02\0\0\xd24\x01\x01\xbe\xa0\x02\0\0\xd2\x9f\x01\x01\xc1\xa0\x02\0\0\xd3\x1a\x01\x01\xc0\xa0\x02\0\0\xd3\x98\x01\x01\xc3\xa0\x02\0\0\xd4K\x01\x01\xc2\xa0\x02\0\0\xd4\xc8\x01\x01\xc5\xa0\x02\0\0\xd54\x01\x01\xc4\xa0\x02\0\0\xd5\x96\x01\x01\xc7\xa0\x02\0\0\xd5\xf4\x01\x01\xc6\xa0\x02\0\0\xd6K\x01\x01\xc8\xa0\x02\0\0\xd6\xfc\x01\x01\xca\xa0\x02\0\0\xd7e\x01\x01\xc9\xa0\x02\0\0\xd7\xa8\x01\x01\xcb"),
     cst_src_CairoMock_ml=caml_new_string("src/CairoMock.ml"),
     cst_CairoMock_Mock_Error=caml_new_string("CairoMock.Mock.Error"),
     cst_CairoMock_Mock_Unavailable=
      caml_new_string("CairoMock.Mock.Unavailable"),
     cst_normal=caml_new_string("normal"),
     cst_italic=caml_new_string("italic"),
     cst_oblique=caml_new_string("oblique"),
     cst_bold=caml_new_string("bold"),
     cst_normal$0=caml_new_string("normal"),
     cst_over=caml_new_string("over"),
     cst_add=caml_new_string("add"),
     cst_destination_atop$0=caml_new_string("destination-atop"),
     cst_destination_in$0=caml_new_string("destination-in"),
     cst_destination_out$0=caml_new_string("destination-out"),
     cst_destination_over$0=caml_new_string("destination-over"),
     cst_lighter$0=caml_new_string("lighter"),
     cst_source_atop$0=caml_new_string("source-atop"),
     cst_source_in$0=caml_new_string("source-in"),
     cst_source_out$0=caml_new_string("source-out"),
     cst_source_over$0=caml_new_string("source-over"),
     cst_xor$0=caml_new_string("xor"),
     cst_Unsupported_operator_CLEAR=
      caml_new_string("Unsupported operator CLEAR"),
     cst_Unsupported_operator_SOURCE=
      caml_new_string("Unsupported operator SOURCE"),
     cst_source_over=caml_new_string("source-over"),
     cst_source_in=caml_new_string("source-in"),
     cst_source_out=caml_new_string("source-out"),
     cst_source_atop=caml_new_string("source-atop"),
     cst_Unsupported_operator_DEST=
      caml_new_string("Unsupported operator DEST"),
     cst_destination_over=caml_new_string("destination-over"),
     cst_destination_in=caml_new_string("destination-in"),
     cst_destination_out=caml_new_string("destination-out"),
     cst_destination_atop=caml_new_string("destination-atop"),
     cst_xor=caml_new_string("xor"),
     cst_lighter=caml_new_string("lighter"),
     cst_Unsupported_operator_SATURATE=
      caml_new_string("Unsupported operator SATURATE"),
     cst_bevel$0=caml_new_string("bevel"),
     cst_round$2=caml_new_string("round"),
     cst_miter=caml_new_string("miter"),
     cst_round$1=caml_new_string("round"),
     cst_bevel=caml_new_string("bevel"),
     cst_round$0=caml_new_string("round"),
     cst_square$0=caml_new_string("square"),
     cst_butt=caml_new_string("butt"),
     cst_round=caml_new_string("round"),
     cst_square=caml_new_string("square"),
     cst_INVALID_RESTORE$0=caml_new_string("INVALID_RESTORE"),
     cst_INVALID_POP_GROUP$0=caml_new_string("INVALID_POP_GROUP"),
     cst_NO_CURRENT_POINT$0=caml_new_string("NO_CURRENT_POINT"),
     cst_INVALID_MATRIX$0=caml_new_string("INVALID_MATRIX"),
     cst_INVALID_STATUS$0=caml_new_string("INVALID_STATUS"),
     cst_NULL_POINTER$0=caml_new_string("NULL_POINTER"),
     cst_INVALID_STRING$0=caml_new_string("INVALID_STRING"),
     cst_INVALID_PATH_DATA$0=caml_new_string("INVALID_PATH_DATA"),
     cst_READ_ERROR$0=caml_new_string("READ_ERROR"),
     cst_WRITE_ERROR$0=caml_new_string("WRITE_ERROR"),
     cst_SURFACE_FINISHED$0=caml_new_string("SURFACE_FINISHED"),
     cst_SURFACE_TYPE_MISMATCH$0=caml_new_string("SURFACE_TYPE_MISMATCH"),
     cst_PATTERN_TYPE_MISMATCH$0=caml_new_string("PATTERN_TYPE_MISMATCH"),
     cst_INVALID_CONTENT$0=caml_new_string("INVALID_CONTENT"),
     cst_INVALID_FORMAT$0=caml_new_string("INVALID_FORMAT"),
     cst_INVALID_VISUAL$0=caml_new_string("INVALID_VISUAL"),
     cst_FILE_NOT_FOUND$0=caml_new_string("FILE_NOT_FOUND"),
     cst_INVALID_DASH$0=caml_new_string("INVALID_DASH"),
     cst_INVALID_DSC_COMMENT$0=caml_new_string("INVALID_DSC_COMMENT"),
     cst_INVALID_INDEX$0=caml_new_string("INVALID_INDEX"),
     cst_CLIP_NOT_REPRESENTABLE$0=caml_new_string("CLIP_NOT_REPRESENTABLE"),
     cst_TEMP_FILE_ERROR$0=caml_new_string("TEMP_FILE_ERROR"),
     cst_INVALID_STRIDE$0=caml_new_string("INVALID_STRIDE"),
     cst_FONT_TYPE_MISMATCH$0=caml_new_string("FONT_TYPE_MISMATCH"),
     cst_USER_FONT_IMMUTABLE$0=caml_new_string("USER_FONT_IMMUTABLE"),
     cst_USER_FONT_ERROR$0=caml_new_string("USER_FONT_ERROR"),
     cst_NEGATIVE_COUNT$0=caml_new_string("NEGATIVE_COUNT"),
     cst_INVALID_CLUSTERS$0=caml_new_string("INVALID_CLUSTERS"),
     cst_INVALID_SLANT$0=caml_new_string("INVALID_SLANT"),
     cst_INVALID_WEIGHT$0=caml_new_string("INVALID_WEIGHT"),
     cst_INVALID_SIZE$0=caml_new_string("INVALID_SIZE"),
     cst_USER_FONT_NOT_IMPLEMENTED$0=
      caml_new_string("USER_FONT_NOT_IMPLEMENTED"),
     cst_DEVICE_TYPE_MISMATCH$0=caml_new_string("DEVICE_TYPE_MISMATCH"),
     cst_DEVICE_ERROR$0=caml_new_string("DEVICE_ERROR"),
     cst_INVALID_MESH_CONSTRUCTION$0=
      caml_new_string("INVALID_MESH_CONSTRUCTION"),
     cst_DEVICE_FINISHED$0=caml_new_string("DEVICE_FINISHED"),
     cst_JBIG2_GLOBAL_MISSING$0=caml_new_string("JBIG2_GLOBAL_MISSING"),
     cst_cairo_restore_without_matching_cairo_save$0=
      caml_new_string("cairo_restore() without matching cairo_save()"),
     cst_no_saved_group_to_pop_i_e_cairo_pop_group_without_matching_cairo_push_group$0=
      caml_new_string
       ("no saved group to pop, i.e. cairo_pop_group() without matching cairo_push_group()"),
     cst_no_current_point_defined$0=
      caml_new_string("no current point defined"),
     cst_invalid_matrix_not_invertible$0=
      caml_new_string("invalid matrix (not invertible)"),
     cst_invalid_value_for_an_input_cairo_status_t$0=
      caml_new_string("invalid value for an input cairo_status_t"),
     cst_NULL_pointer$0=caml_new_string("NULL pointer"),
     cst_input_string_not_valid_UTF_8$0=
      caml_new_string("input string not valid UTF-8"),
     cst_input_path_data_not_valid$0=
      caml_new_string("input path data not valid"),
     cst_error_while_reading_from_input_stream$0=
      caml_new_string("error while reading from input stream"),
     cst_error_while_writing_to_output_stream$0=
      caml_new_string("error while writing to output stream"),
     cst_the_target_surface_has_been_finished$0=
      caml_new_string("the target surface has been finished"),
     cst_the_surface_type_is_not_appropriate_for_the_operation$0=
      caml_new_string("the surface type is not appropriate for the operation"),
     cst_the_pattern_type_is_not_appropriate_for_the_operation$0=
      caml_new_string("the pattern type is not appropriate for the operation"),
     cst_invalid_value_for_an_input_cairo_content_t$0=
      caml_new_string("invalid value for an input cairo_content_t"),
     cst_invalid_value_for_an_input_cairo_format_t$0=
      caml_new_string("invalid value for an input cairo_format_t"),
     cst_invalid_value_for_an_input_Visual$0=
      caml_new_string("invalid value for an input Visual*"),
     cst_file_not_found$0=caml_new_string("file not found"),
     cst_invalid_value_for_a_dash_setting$0=
      caml_new_string("invalid value for a dash setting"),
     cst_invalid_value_for_a_DSC_comment$0=
      caml_new_string("invalid value for a DSC comment"),
     cst_invalid_index_passed_to_getter$0=
      caml_new_string("invalid index passed to getter"),
     cst_clip_region_not_representable_in_desired_format$0=
      caml_new_string("clip region not representable in desired format"),
     cst_error_creating_or_writing_to_a_temporary_file$0=
      caml_new_string("error creating or writing to a temporary file"),
     cst_invalid_value_for_stride$0=
      caml_new_string("invalid value for stride"),
     cst_the_font_type_is_not_appropriate_for_the_operation$0=
      caml_new_string("the font type is not appropriate for the operation"),
     cst_the_user_font_is_immutable$0=
      caml_new_string("the user-font is immutable"),
     cst_error_occurred_in_a_user_font_callback_function$0=
      caml_new_string("error occurred in a user-font callback function"),
     cst_negative_number_used_where_it_is_not_allowed$0=
      caml_new_string("negative number used where it is not allowed"),
     cst_input_clusters_do_not_represent_the_accompanying_text_and_glyph_arrays$0=
      caml_new_string
       ("input clusters do not represent the accompanying text and glyph arrays"),
     cst_invalid_value_for_an_input_cairo_font_slant_t$0=
      caml_new_string("invalid value for an input cairo_font_slant_t"),
     cst_invalid_value_for_an_input_cairo_font_weight_t$0=
      caml_new_string("invalid value for an input cairo_font_weight_t"),
     cst_invalid_value_typically_too_big_for_the_size_of_the_input_surface_pattern_etc$0=
      caml_new_string
       ("invalid value (typically too big) for the size of the input (surface, pattern, etc.)"),
     cst_user_font_method_not_implemented$0=
      caml_new_string("user-font method not implemented"),
     cst_the_device_type_is_not_appropriate_for_the_operation$0=
      caml_new_string("the device type is not appropriate for the operation"),
     cst_an_operation_to_the_device_caused_an_unspecified_error$0=
      caml_new_string
       ("an operation to the device caused an unspecified error"),
     cst_invalid_operation_during_mesh_pattern_construction$0=
      caml_new_string("invalid operation during mesh pattern construction"),
     cst_the_target_device_has_been_finished$0=
      caml_new_string("the target device has been finished"),
     cst_CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID_used_but_no_CAIRO_MIME_TYPE_JBIG2_GLOBAL_data_provided$0=
      caml_new_string
       ("CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID used but no CAIRO_MIME_TYPE_JBIG2_GLOBAL data provided"),
     point_definitions$0=
      caml_new_string
       ('\x84\x95\xa6\xbe\0\0\t\xe8\0\0\x01\x86\0\0\x06\x15\0\0\x06\x15\b\0\x06\x14\0\xa0\x01\x05Ie\xa0\x01\x05V@\xa0\x01\x05\x9dA\xa0\x01\x06\nB\xa0\x01\x06=C\xa0\x01\x06uD\xa0\x01\x06\xb7E\xa0\x01\x06\xdaF\xa0\x01\x07\x0fG\xa0\x01\x07DH\xa0\x01\x07~I\xa0\x01\x07\xb8J\xa0\x01\x07\xf7K\xa0\x01\bLL\xa0\x01\b\xa1M\xa0\x01\b\xe5N\xa0\x01\t\'O\xa0\x01\tbP\xa0\x01\t\x89Q\xa0\x01\t\xc0R\xa0\x01\t\xfdS\xa0\x01\n3T\xa0\x01\n\x83U\xa0\x01\n\xcaV\xa0\x01\n\xfbW\xa0\x01\x0bJX\xa0\x01\x0b\x82Y\xa0\x01\x0b\xcbZ\xa0\x01\f\x10[\xa0\x01\fq\\\xa0\x01\f\xb6]\xa0\x01\f\xfd^\xa0\x01\rh_\xa0\x01\r\xac`\xa0\x01\r\xffa\xa0\x01\x0eLb\xa0\x01\x0e\xa2c\xa0\x01\x0e\xdfd\xa0\x01\x0fch\xa0\x01\x0fpf\xa0\x01\x0f\x99g\xa0\x01\x17\xe9i\xa0\x01\x184j\xa0\x01\x18yk\xa0\x01\x18\xc1l\xa0\x01\x19tx\xa0\x01\x19|v\xa0\x01\x19\x98w\xa0\x01\x19\xa7t\xa0\x01\x19\xc9u\xa0\x01\x19\xd2m\xa0\x01\x19\xe7n\xa0\x01\x19\xffo\xa0\x01\x1a\x17p\xa0\x01\x1a,q\xa0\x01\x1aUr\xa0\x01\x1axs\xa0\x01\x1a\xf1\0@\xa0\x01\x1a\xfay\xa0\x01\x1b\x1ez\xa0\x01\x1bB{\xa0\x01\x1bf|\xa0\x01\x1b\x8a}\xa0\x01\x1b\xb4~\xa0\x01\x1b\xd8\x7f\xa0\x01\x1c+\0A\xa0\x01\x1c\xa5\0B\xa0\x01\x1c\xfe\0H\xa0\x01\x1d\x0e\0G\xa0\x01\x1d\x1e\0F\xa0\x01\x1d.\0E\xa0\x01\x1d>\0D\xa0\x01\x1dN\0C\xa0\x01\x1dr\0I\xa0\x01\x1d\xb3\0J\xa0\x01\x1d\xf7\0K\xa0\x01\x1e4\0L\xa0\x01!\xdd\0O\xa0\x01"\x12\0M\xa0\x01";\0N\xa0\x01"x\0P\xa0\x01"\x8b\0Q\xa0\x01"\xba\0Z\xa0\x01"\xc8\0X\xa0\x01"\xfc\0Y\xa0\x01#\n\0V\xa0\x01#\x1d\0T\xa0\x01#7\0U\xa0\x01#x\0R\xa0\x01#\x97\0S\xa0\x01#\xb1\0W\xa0\x01#\xd4\0\\\xa0\x01$\x03\0[\xa0\x01$*\0_\xa0\x01$H\0]\xa0\x01$_\0^\xa0\x01$\xf6\0a\xa0\x01%\'\0`\xa0\x01(a\0b\xa0\x01(\x97\0c\xa0\x01(\xca\0h\xa0\x01(\xe6\0d\xa0\x01)\x02\0e\xa0\x01)\x1b\0f\xa0\x01)4\0g\xa0\x01)\x93\0i\xa0\x01*\n\0n\xa0\x01*&\0j\xa0\x01*S\0k\xa0\x01*b\0l\xa0\x01*{\0m\xa0\x01*\xe2\0o\xa0\x01+c\0t\xa0\x01+\x7f\0p\xa0\x01+\xae\0q\xa0\x01+\xc7\0r\xa0\x01+\xd6\0s\xa0\x01,3\0|\xa0\x01,E\0{\xa0\x01,V\0y\xa0\x01,o\0z\xa0\x01,\x8b\0u\xa0\x01- \0v\xa0\x01-\xb5\0w\xa0\x01-\xdf\0x\xa0\x01.%\0}\xa0\x01.y\x01\0\x82\xa0\x01.\x95\0~\xa0\x01.\xb7\0\x7f\xa0\x01/\x01\x01\0\x80\xa0\x01/\x10\x01\0\x81\xa0\x01/r\x01\0\x87\xa0\x01/\x8e\x01\0\x83\xa0\x01/\xb0\x01\0\x84\xa0\x010\0\x01\0\x85\xa0\x010\x0f\x01\0\x86\xa0\x014\xe4\x01\0\x88\xa0\x015D\x01\0\x89\xa0\x015\xc1\x01\0\x8b\xa0\x015\xe1\x01\0\x8a\xa0\x016B\x01\0\x8c\xa0\x016\x8d\x01\0\x8d\xa0\x016\xfb\x01\0\x8e\xa0\x017<\x01\0\x8f\xa0\x017\x7f\x01\0\x92\xa0\x017\xa1\x01\0\x90\xa0\x017\xb6\x01\0\x91\xa0\x0188\x01\0\x95\xa0\x018`\x01\0\x93\xa0\x018\xb6\x01\0\x94\xa0\x01=\x1a\x01\0\x96\xa0\x01>\x8a\x01\0\x97\xa0\x01>\xc6\x01\0\x98\xa0\x01?\x12\x01\0\x99\xa0\x01?a\x01\0\x9f\xa0\x01?t\x01\0\x9d\xa0\x01?\x98\x01\0\x9a\xa0\x01?\x9d\x01\0\x9b\xa0\x01?\xcc\x01\0\x9c\xa0\x01?\xeb\x01\0\x9e\xa0\x01@(\x01\0\xa0\xa0\x01@\x7f\x01\0\xa1\xa0\x01@\xd3\x01\0\xa2\xa0\x01A\f\x01\0\xa3\xa0\x01AX\x01\0\xa4\xa0\x01A\x97\x01\0\xa5\xa0\x01A\xe8\x01\0\xa6\xa0\x01B0\x01\0\xa7\xa0\x01B\x91\x01\0\xaa\xa0\x01B\xa6\x01\0\xa8\xa0\x01B\xc4\x01\0\xa9\xa0\x01C!\x01\0\xab\xa0\x01Cw\x01\0\xae\xa0\x01C\x8c\x01\0\xac\xa0\x01C\xaa\x01\0\xad\xa0\x01D\x1e\x01\0\xaf\xa0\x01Dn\x01\0\xb2\xa0\x01D\x83\x01\0\xb0\xa0\x01D\xa1\x01\0\xb1\xa0\x01D\xfd\x01\0\xb5\xa0\x01E\x12\x01\0\xb3\xa0\x01E0\x01\0\xb4\xa0\x01E\x91\x01\0\xb6\xa0\x01F\x06\x01\0\xb8\xa0\x01F\x1c\x01\0\xb7\xa0\x01FN\x01\0\xba\xa0\x01Fg\x01\0\xb9\xa0\x01F\xcd\x01\0\xbc\xa0\x01F\xfd\x01\0\xbb\xa0\x01GP\x01\0\xbd\xa0\x01G\x90\x01\0\xbe\xa0\x01G\xf7\x01\0\xbf\xa0\x01H@\x01\0\xc0\xa0\x01H\x8c\x01\0\xc1\xa0\x01H\xda\x01\0\xc2\xa0\x01I+\x01\0\xc3\xa0\x01I\xb0\x01\0\xc4\xa0\x01J1\x01\0\xc5\xa0\x01J\xa0\x01\0\xc6\xa0\x01K\x0e\x01\0\xc9\xa0\x01KA\x01\0\xc7\xa0\x01Kn\x01\0\xc8\xa0\x01K\xad\x01\0\xcc\xa0\x01K\xc9\x01\0\xcb\xa0\x01K\xf7\x01\0\xca\xa0\x01LM\x01\0\xcf\xa0\x01LZ\x01\0\xcd\xa0\x01Lv\x01\0\xce\xa0\x01L\xa7\x01\0\xd2\xa0\x01L\xc3\x01\0\xd1\xa0\x01L\xf9\x01\0\xd0\xa0\x01MG\x01\0\xd5\xa0\x01MT\x01\0\xd3\xa0\x01Mp\x01\0\xd4\xa0\x01M\xb0\x01\0\xd8\xa0\x01M\xe1\x01\0\xd7\xa0\x01N\x19\x01\0\xd6\xa0\x01Nx\x01\0\xdd\xa0\x01N\x87\x01\0\xd9\xa0\x01N\xb5\x01\0\xda\xa0\x01N\xe3\x01\0\xdb\xa0\x01O\x05\x01\0\xdc\xa0\x01OM\x01\0\xdf\xa0\x01O}\x01\0\xde\xa0\x01O\xc2\x01\0\xe2\xa0\x01O\xe7\x01\0\xe1\xa0\x01P?\x01\0\xe0\xa0\x01P\x99\x01\0\xe3\xa0\x01P\xc1\x01\0\xe4\xa0\x01Q\x10\x01\0\xe7\xa0\x01QE\x01\0\xe5\xa0\x01Q^\x01\0\xe6\xa0\x01Q\x8f\x01\0\xea\xa0\x01Q\xac\x01\0\xe9\xa0\x01Q\xd7\x01\0\xe8\xa0\x01R\x1a\x01\0\xec\xa0\x01R7\x01\0\xeb\xa0\x01R\x91\x01\0\xed\xa0\x01R\xbe\x01\0\xef\xa0\x01R\xd9\x01\0\xee\xa0\x01S\x0b\x01\0\xf2\xa0\x01S:\x01\0\xf0\xa0\x01S^\x01\0\xf1\xa0\x01S\xbc\x01\0\xf4\xa0\x01S\xd5\x01\0\xf3\xa0\x01T\x07\x01\0\xf5\xa0\x01T0\x01\0\xf7\xa0\x01TI\x01\0\xf6\xa0\x01To\x01\x01\0\xa0\x01T\x7f\x01\0\xff\xa0\x01T\x8f\x01\0\xfe\xa0\x01T\xb6\x01\0\xfd\xa0\x01T\xd1\x01\0\xfc\xa0\x01T\xdd\x01\0\xf9\xa0\x01U\x19\x01\0\xfa\xa0\x01UL\x01\0\xfb\xa0\x01Uy\x01\0\xf8\xa0\x01U\xb0\x01\x01\x01\xa0\x01U\xf2\x01\x01\x02\xa0\x01V\'\x01\x01\x07\xa0\x01V6\x01\x01\x06\xa0\x01VA\x01\x01\x04\xa0\x01Vd\x01\x01\x05\xa0\x01V\x84\x01\x01\x03\xa0\x01V\xc2\x01\x01\n\xa0\x01V\xcd\x01\x01\b\xa0\x01V\xf0\x01\x01\t\xa0\x01WR\x01\x01\x0b\xa0\x01W\x9e\x01\x01\f\xa0\x01W\xde\x01\x01\x12\xa0\x01W\xe8\x01\x01\x10\xa0\x01W\xfd\x01\x01\r\xa0\x01X\x12\x01\x01\x0e\xa0\x01X)\x01\x01\x0f\xa0\x01XC\x01\x01\x11\xa0\x01X\x89\x01\x01\x16\xa0\x01X\xbe\x01\x01\x13\xa0\x01X\xd5\x01\x01\x14\xa0\x01X\xee\x01\x01\x15\xa0\x01Y\x1c\x01\x01\x1c\xa0\x01Y\'\x01\x01\x1a\xa0\x01Y=\x01\x01\x17\xa0\x01YZ\x01\x01\x18\xa0\x01Yv\x01\x01\x19\xa0\x01Y\x93\x01\x01\x1b\xa0\x01Y\xdc\x01\x01 \xa0\x01Z\x12\x01\x01\x1d\xa0\x01Z.\x01\x01\x1e\xa0\x01ZJ\x01\x01\x1f\xa0\x01Z}\x01\x01!\xa0\x01Z\xbd\x01\x01"\xa0\x01Z\xfe\x01\x013\xa0\x01[\r\x01\x011\xa0\x01[\'\x01\x01#\xa0\x01[\\\x01\x01$\xa0\x01[\x93\x01\x01%\xa0\x01[\xaf\x01\x01&\xa0\x01[\xcb\x01\x01\'\xa0\x01[\xe3\x01\x01(\xa0\x01[\xfd\x01\x01)\xa0\x01\\#\x01\x01*\xa0\x01\\I\x01\x01+\xa0\x01\\k\x01\x01,\xa0\x01\\\x8f\x01\x01-\xa0\x01\\\xa6\x01\x01.\xa0\x01\\\xb9\x01\x01/\xa0\x01\\\xec\x01\x010\xa0\x01](\x01\x012\xa0\x01]\x84\x01\x01A\xa0\x01]\xca\x01\x014\xa0\x01^,\x01\x015\xa0\x01^b\x01\x016\xa0\x01^~\x01\x017\xa0\x01^\x9a\x01\x018\xa0\x01^\xb2\x01\x019\xa0\x01^\xcc\x01\x01:\xa0\x01^\xf2\x01\x01;\xa0\x01_\x18\x01\x01<\xa0\x01_:\x01\x01=\xa0\x01_^\x01\x01>\xa0\x01_u\x01\x01?\xa0\x01_\x88\x01\x01@\xa0\x01_\xf9\x01\x01^\xa0\x01`\t\x01\x01\\\xa0\x01`8\x01\x01]\xa0\x01`S\x01\x01Z\xa0\x01`\xb0\x01\x01[\xa0\x01`\xbd\x01\x01X\xa0\x01`\xcb\x01\x01Y\xa0\x01`\xf5\x01\x01W\xa0\x01a\r\x01\x01S\xa0\x01a<\x01\x01C\xa0\x01aZ\x01\x01D\xa0\x01a\x83\x01\x01B\xa0\x01a\xad\x01\x01T\xa0\x01b\x03\x01\x01J\xa0\x01b;\x01\x01K\xa0\x01bP\x01\x01F\xa0\x01bw\x01\x01H\xa0\x01b\xab\x01\x01G\xa0\x01b\xf1\x01\x01I\xa0\x01c&\x01\x01E\xa0\x01c\\\x01\x01U\xa0\x01c\xbb\x01\x01Q\xa0\x01c\xf9\x01\x01R\xa0\x01d\x0e\x01\x01M\xa0\x01d5\x01\x01O\xa0\x01di\x01\x01N\xa0\x01d\xaf\x01\x01P\xa0\x01d\xe4\x01\x01L\xa0\x01e\x1a\x01\x01V\xa0\x01eW\x01\x01_\xa0\x01e\x9e\x01\x01`\xa0\x01e\xf5\x01\x01a\xa0\x01fj\x01\x01m\xa0\x01f\x90\x01\x01l\xa0\x01f\xa1\x01\x01i\xa0\x01f\xb8\x01\x01d\xa0\x01f\xd2\x01\x01e\xa0\x01f\xeb\x01\x01f\xa0\x01g\x14\x01\x01j\xa0\x01g,\x01\x01g\xa0\x01gE\x01\x01h\xa0\x01g[\x01\x01k\xa0\x01gf\x01\x01b\xa0\x01g\xbc\x01\x01c\xa0\x01h\b\x01\x01p\xa0\x01h\x1a\x01\x01o\xa0\x01h-\x01\x01n\xa0\x01h\x9b\x01\x01q\xa0\x01h\xf1\x01\x01v\xa0\x01h\xfe\x01\x01s\xa0\x01i\'\x01\x01t\xa0\x01i^\x01\x01u\xa0\x01i\x93\x01\x01r\xa0\x01i\xda\x01\x01y\xa0\x01i\xea\x01\x01w\xa0\x01j\n\x01\x01x\xa0\x01j\xa8\x01\x01}\xa0\x01j\xb8\x01\x01z\xa0\x01j\xdd\x01\x01{\xa0\x01k\x14\x01\x01|\xa0\x01k\xa2\x01\x01\x84\xa0\x01k\xad\x01\x01\x81\xa0\x01k\xdc\x01\x01\x82\xa0\x01k\xf1\x01\x01\x83\xa0\x01k\xff\x01\x01\x7f\xa0\x01l\x1f\x01\x01\x80\xa0\x01l=\x01\x01~'),
     cst_src_JsOfOCairo_ml=caml_new_string("src/JsOfOCairo.ml"),
     cst_JsOfOCairo_Error=caml_new_string("JsOfOCairo.Error"),
     cst_JsOfOCairo_Unavailable=caml_new_string("JsOfOCairo.Unavailable"),
     Printf=global_data.Printf,
     Printexc=global_data.Printexc,
     ListLabels=global_data.ListLabels,
     ArrayLabels=global_data.ArrayLabels,
     StringLabels=global_data.StringLabels,
     Bisect_Runtime=global_data.Bisect__Runtime,
     Dom_html=global_data.Dom_html,
     Pervasives=global_data.Pervasives,
     Js=global_data.Js,
     match=
      caml_call3(Bisect_Runtime[1],cst_src_CairoMock_ml,460,point_definitions),
     cb=match[2],
     Error=caml_set_oo_id([248,cst_CairoMock_Mock_Error,0]);
    caml_call1(cb,37);
    var
     _bX_=
      [0,
       [11,caml_new_string("text_extents "),[3,0,0]],
       caml_new_string("text_extents %S")],
     _bW_=
      [0,
       [11,caml_new_string("font_extents"),0],
       caml_new_string("font_extents")],
     _bV_=
      [0,
       [11,caml_new_string("show_text "),[3,0,0]],
       caml_new_string("show_text %S")],
     _bU_=
      [0,
       [11,caml_new_string("set_font_size "),[8,0,0,[0,2],0]],
       caml_new_string("set_font_size %.2f")],
     _bT_=
      [0,
       [11,caml_new_string("select_font_face"),[15,[15,[12,32,[3,0,0]]]]],
       caml_new_string("select_font_face%a%a %S")],
     _bS_=
      [0,
       [11,
        caml_new_string("set_source_rgba "),
        [8,
         0,
         0,
         [0,2],
         [12,32,[8,0,0,[0,2],[12,32,[8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]]]]]],
       caml_new_string("set_source_rgba %.2f %.2f %.2f %.2f")],
     _bR_=
      [0,
       [11,
        caml_new_string("set_source_rgb "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]]]],
       caml_new_string("set_source_rgb %.2f %.2f %.2f")],
     _bQ_=
      [0,[11,caml_new_string("get_source"),0],caml_new_string("get_source")],
     _bP_=
      [0,
       [11,caml_new_string("set_source "),[15,0]],
       caml_new_string("set_source %a")],
     _bO_=
      [0,
       [11,caml_new_string("get_operator"),0],
       caml_new_string("get_operator")],
     _bN_=
      [0,
       [11,caml_new_string("set_operator "),[15,0]],
       caml_new_string("set_operator %a")],
     _bM_=
      [0,
       [11,caml_new_string("get_miter_limit"),0],
       caml_new_string("get_miter_limit")],
     _bL_=
      [0,
       [11,caml_new_string("set_miter_limit "),[8,0,0,[0,2],0]],
       caml_new_string("set_miter_limit %.2f")],
     _bK_=
      [0,
       [11,caml_new_string("get_line_join"),0],
       caml_new_string("get_line_join")],
     _bJ_=
      [0,
       [11,caml_new_string("set_line_join "),[15,0]],
       caml_new_string("set_line_join %a")],
     _bI_=
      [0,
       [11,caml_new_string("get_line_cap"),0],
       caml_new_string("get_line_cap")],
     _bH_=
      [0,
       [11,caml_new_string("set_line_cap "),[15,0]],
       caml_new_string("set_line_cap %a")],
     _bG_=
      [0,
       [11,caml_new_string("get_fill_rule"),0],
       caml_new_string("get_fill_rule")],
     _bF_=
      [0,
       [11,caml_new_string("set_fill_rule "),[15,0]],
       caml_new_string("set_fill_rule %a")],
     _bE_=[0,[11,caml_new_string("get_dash"),0],caml_new_string("get_dash")],
     _bD_=
      [0,
       [11,caml_new_string("set_dash"),[15,[12,32,[15,0]]]],
       caml_new_string("set_dash%a %a")],
     _bC_=
      [0,
       [11,caml_new_string("get_line_width"),0],
       caml_new_string("get_line_width")],
     _bB_=
      [0,
       [11,caml_new_string("set_line_width "),[8,0,0,[0,2],0]],
       caml_new_string("set_line_width %.2f")],
     _bA_=[0,[11,caml_new_string("paint"),[15,0]],caml_new_string("paint%a")],
     _bz_=[0,[11,caml_new_string("clip"),0],caml_new_string("clip")],
     _by_=
      [0,
       [11,caml_new_string("clip_preserve"),0],
       caml_new_string("clip_preserve")],
     _bx_=[0,[11,caml_new_string("fill"),0],caml_new_string("fill")],
     _bw_=
      [0,
       [11,caml_new_string("fill_preserve"),0],
       caml_new_string("fill_preserve")],
     _bv_=[0,[11,caml_new_string("stroke"),0],caml_new_string("stroke")],
     _bu_=
      [0,
       [11,caml_new_string("stroke_preserve"),0],
       caml_new_string("stroke_preserve")],
     _bt_=
      [0,[11,caml_new_string("Path.close"),0],caml_new_string("Path.close")],
     _bs_=
      [0,[11,caml_new_string("Path.clear"),0],caml_new_string("Path.clear")],
     _br_=
      [0,
       [11,caml_new_string("Path.get_current_point"),0],
       caml_new_string("Path.get_current_point")],
     _bq_=
      [0,
       [11,
        caml_new_string("arc_negative "),
        [8,
         0,
         0,
         [0,2],
         [12,
          32,
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string(" ~r:"),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string(" ~a1:"),
              [8,0,0,[0,2],[11,caml_new_string(" ~a2:"),[8,0,0,partial,0]]]]]]]]]],
       caml_new_string("arc_negative %.2f %.2f ~r:%.2f ~a1:%.2f ~a2:%.2f")],
     _bp_=
      [0,
       [11,
        caml_new_string("arc "),
        [8,
         0,
         0,
         [0,2],
         [12,
          32,
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string(" ~r:"),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string(" ~a1:"),
              [8,0,0,[0,2],[11,caml_new_string(" ~a2:"),[8,0,0,partial$0,0]]]]]]]]]],
       caml_new_string("arc %.2f %.2f ~r:%.2f ~a1:%.2f ~a2:%.2f")],
     _bo_=
      [0,
       [11,
        caml_new_string("rectangle "),
        [8,
         0,
         0,
         [0,2],
         [12,
          32,
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string(" ~w:"),
            [8,0,0,[0,2],[11,caml_new_string(" ~h:"),[8,0,0,[0,2],0]]]]]]]],
       caml_new_string("rectangle %.2f %.2f ~w:%.2f ~h:%.2f")],
     _bn_=
      [0,
       [11,
        caml_new_string("rel_curve_to "),
        [8,
         0,
         0,
         [0,2],
         [12,
          32,
          [8,
           0,
           0,
           [0,2],
           [12,
            32,
            [8,
             0,
             0,
             [0,2],
             [12,32,[8,0,0,[0,2],[12,32,[8,0,0,partial$2,partial$1]]]]]]]]]],
       caml_new_string("rel_curve_to %.2f %.2f %.2f %.2f %.2f %.2f")],
     _bm_=
      [0,
       [11,
        caml_new_string("curve_to "),
        [8,
         0,
         0,
         [0,2],
         [12,
          32,
          [8,
           0,
           0,
           [0,2],
           [12,
            32,
            [8,
             0,
             0,
             [0,2],
             [12,32,[8,0,0,[0,2],[12,32,[8,0,0,partial$4,partial$3]]]]]]]]]],
       caml_new_string("curve_to %.2f %.2f %.2f %.2f %.2f %.2f")],
     _bl_=
      [0,
       [11,
        caml_new_string("rel_line_to "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("rel_line_to %.2f %.2f")],
     _bk_=
      [0,
       [11,caml_new_string("line_to "),[8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("line_to %.2f %.2f")],
     _bj_=
      [0,
       [11,
        caml_new_string("rel_move_to "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("rel_move_to %.2f %.2f")],
     _bi_=
      [0,
       [11,caml_new_string("move_to "),[8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("move_to %.2f %.2f")],
     _bh_=
      [0,
       [11,
        caml_new_string("user_to_device_distance "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("user_to_device_distance %.2f %.2f")],
     _bg_=
      [0,
       [11,
        caml_new_string("user_to_device "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("user_to_device %.2f %.2f")],
     _bf_=
      [0,
       [11,
        caml_new_string("device_to_user_distance "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("device_to_user_distance %.2f %.2f")],
     _be_=
      [0,
       [11,
        caml_new_string("device_to_user "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("device_to_user %.2f %.2f")],
     _bd_=
      [0,
       [11,caml_new_string("identity_matrix"),0],
       caml_new_string("identity_matrix")],
     _bc_=
      [0,
       [11,caml_new_string("rotate "),[8,0,0,[0,2],0]],
       caml_new_string("rotate %.2f")],
     _bb_=
      [0,
       [11,
        caml_new_string("translate "),
        [8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("translate %.2f %.2f")],
     _ba_=
      [0,
       [11,caml_new_string("scale "),[8,0,0,[0,2],[12,32,[8,0,0,[0,2],0]]]],
       caml_new_string("scale %.2f %.2f")],
     _a$_=
      [0,
       [11,caml_new_string("transform "),[15,0]],
       caml_new_string("transform %a")],
     _a__=
      [0,[11,caml_new_string("get_matrix"),0],caml_new_string("get_matrix")],
     _a9_=
      [0,
       [11,caml_new_string("set_matrix "),[15,0]],
       caml_new_string("set_matrix %a")],
     _a8_=[0,[11,caml_new_string("restore"),0],caml_new_string("restore")],
     _a7_=[0,[11,caml_new_string("save"),0],caml_new_string("save")],
     _a6_=
      [0,
       [2,0,[11,caml_new_string(" -> "),[2,0,0]]],
       caml_new_string("%s -> %s")],
     _a5_=
      [0,
       [2,0,[11,caml_new_string(" -> raise ("),[2,0,[12,41,0]]]],
       caml_new_string("%s -> raise (%s)")],
     _a4_=
      [0,
       [11,caml_new_string(" ~"),[2,0,[12,58,[2,0,0]]]],
       caml_new_string(" ~%s:%s")],
     _a3_=
      [0,
       [11,
        caml_new_string("{x_bearing="),
        [8,
         0,
         0,
         [0,2],
         [11,
          caml_new_string("; y_bearing="),
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string("; width="),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string("; height="),
              [8,
               0,
               0,
               [0,2],
               [11,
                caml_new_string("; x_advance="),
                [8,0,0,partial$6,partial$5]]]]]]]]]],
       caml_new_string
        ("{x_bearing=%.2f; y_bearing=%.2f; width=%.2f; height=%.2f; x_advance=%.2f; y_advance=%.2f}")],
     _a2_=
      [0,
       [11,
        caml_new_string("{ascent="),
        [8,
         0,
         0,
         [0,2],
         [11,
          caml_new_string("; descent="),
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string("; baseline="),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string("; max_x_advance="),
              [8,
               0,
               0,
               [0,2],
               [11,
                caml_new_string("; max_y_advance="),
                [8,0,0,partial$8,partial$7]]]]]]]]]],
       caml_new_string
        ("{ascent=%.2f; descent=%.2f; baseline=%.2f; max_x_advance=%.2f; max_y_advance=%.2f}")],
     _aX_=
      [0,
       [11,
        caml_new_string("{position="),
        [8,
         0,
         0,
         [0,2],
         [11,
          caml_new_string("; r="),
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string("; g="),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string("; b="),
              [8,
               0,
               0,
               [0,2],
               [11,caml_new_string("; a="),[8,0,0,partial$10,partial$9]]]]]]]]]],
       caml_new_string("{position=%.2f; r=%.2f; g=%.2f; b=%.2f; a=%.2f}")],
     _aW_=[0,0,0,0,0,0],
     _aY_=[0,[12,91,[2,0,[12,93,0]]],caml_new_string("[%s]")],
     _aZ_=
      [0,
       [11,
        caml_new_string("(Rgba {r="),
        [8,
         0,
         0,
         [0,2],
         [11,
          caml_new_string("; g="),
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string("; b="),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string("; a="),
              [8,0,0,[0,2],[11,caml_new_string("})"),0]]]]]]]]],
       caml_new_string("(Rgba {r=%.2f; g=%.2f; b=%.2f; a=%.2f})")],
     _a0_=
      [0,
       [11,
        caml_new_string("(LinearGradient {x0="),
        [8,
         0,
         0,
         [0,2],
         [11,
          caml_new_string("; y0="),
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string("; x1="),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string("; y1="),
              [8,
               0,
               0,
               [0,2],
               [11,caml_new_string("; stop_points="),[2,0,partial$11]]]]]]]]]],
       caml_new_string
        ("(LinearGradient {x0=%.2f; y0=%.2f; x1=%.2f; y1=%.2f; stop_points=%s})")],
     _a1_=
      [0,
       [11,
        caml_new_string("(RadialGradient {x0="),
        [8,
         0,
         0,
         [0,2],
         [11,
          caml_new_string("; y0="),
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string("; r0="),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string("; x1="),
              [8,
               0,
               0,
               [0,2],
               [11,caml_new_string("; y1="),[8,0,0,partial$13,partial$12]]]]]]]]]],
       caml_new_string
        ("(RadialGradient {x0=%.2f; y0=%.2f; r0=%.2f; x1=%.2f; y1=%.2f; r1%.2f; stop_points=%s})")],
     _aV_=
      [0,
       [12,40,[2,0,[11,caml_new_string(", "),[8,0,0,[0,2],[12,41,0]]]]],
       caml_new_string("(%s, %.2f)")],
     _aT_=[0,[8,0,0,[0,2],0],caml_new_string("%.2f")],
     _aU_=
      [0,
       [11,caml_new_string("[|"),[2,0,[11,caml_new_string("|]"),0]]],
       caml_new_string("[|%s|]")],
     _aS_=
      [0,
       [12,
        40,
        [8,0,0,[0,2],[11,caml_new_string(", "),[8,0,0,[0,2],[12,41,0]]]]],
       caml_new_string("(%.2f, %.2f)")],
     _aR_=
      [0,
       [11,
        caml_new_string("{xx="),
        [8,
         0,
         0,
         [0,2],
         [11,
          caml_new_string("; xy="),
          [8,
           0,
           0,
           [0,2],
           [11,
            caml_new_string("; yx="),
            [8,
             0,
             0,
             [0,2],
             [11,
              caml_new_string("; yy="),
              [8,
               0,
               0,
               [0,2],
               [11,caml_new_string("; x0="),[8,0,0,partial$15,partial$14]]]]]]]]]],
       caml_new_string
        ("{xx=%.2f; xy=%.2f; yx=%.2f; yy=%.2f; x0=%.2f; y0=%.2f}")],
     _aQ_=[0,[8,0,0,[0,2],0],caml_new_string("%.2f")],
     _ai_=[0,0,0],
     _I_=[0,0,0,10,caml_new_string("sans-serif")],
     _G_=
      [0,
       [11,caml_new_string("CairoMock.Error("),[2,0,[12,41,0]]],
       caml_new_string("CairoMock.Error(%s)")],
     _q_=[0,0,0,0,0,0],
     _d8_=
      [0,
       [2,0,[12,32,[2,0,[12,32,[21,1,[11,caml_new_string("px "),[2,0,0]]]]]]],
       caml_new_string("%s %s %npx %s")],
     _d3_=
      [0,
       [11,
        caml_new_string("rgba("),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [2,
           0,
           [11,
            caml_new_string(", "),
            [2,0,[11,caml_new_string(", "),[8,0,0,0,[12,41,0]]]]]]]]],
       caml_new_string("rgba(%s, %s, %s, %f)")],
     _d1_=
      [0,
       [11,caml_new_string("Unexpected globalCompositeOperation "),[3,0,0]],
       caml_new_string("Unexpected globalCompositeOperation %S")],
     _dD_=[0,0,0],
     _dp_=[0,0,0,10,caml_new_string("sans-serif")],
     _do_=
      [0,
       [11,caml_new_string("JsOfOCairo.Error("),[2,0,[12,41,0]]],
       caml_new_string("JsOfOCairo.Error(%s)")],
     _da_=[0,0,0,0,0,0];
    function status_to_string(param)
     {switch(param)
       {case 0:
         caml_call1(cb,0);
         return cst_cairo_restore_without_matching_cairo_save;
        case 1:
         caml_call1(cb,1);
         return cst_no_saved_group_to_pop_i_e_cairo_pop_group_without_matching_cairo_push_group;
        case 2:caml_call1(cb,2);return cst_no_current_point_defined;
        case 3:caml_call1(cb,3);return cst_invalid_matrix_not_invertible;
        case 4:
         caml_call1(cb,4);
         return cst_invalid_value_for_an_input_cairo_status_t;
        case 5:caml_call1(cb,5);return cst_NULL_pointer;
        case 6:caml_call1(cb,6);return cst_input_string_not_valid_UTF_8;
        case 7:caml_call1(cb,7);return cst_input_path_data_not_valid;
        case 8:
         caml_call1(cb,8);return cst_error_while_reading_from_input_stream;
        case 9:
         caml_call1(cb,9);return cst_error_while_writing_to_output_stream;
        case 10:
         caml_call1(cb,10);return cst_the_target_surface_has_been_finished;
        case 11:
         caml_call1(cb,11);
         return cst_the_surface_type_is_not_appropriate_for_the_operation;
        case 12:
         caml_call1(cb,12);
         return cst_the_pattern_type_is_not_appropriate_for_the_operation;
        case 13:
         caml_call1(cb,13);
         return cst_invalid_value_for_an_input_cairo_content_t;
        case 14:
         caml_call1(cb,14);
         return cst_invalid_value_for_an_input_cairo_format_t;
        case 15:
         caml_call1(cb,15);return cst_invalid_value_for_an_input_Visual;
        case 16:caml_call1(cb,16);return cst_file_not_found;
        case 17:caml_call1(cb,17);return cst_invalid_value_for_a_dash_setting;
        case 18:caml_call1(cb,18);return cst_invalid_value_for_a_DSC_comment;
        case 19:caml_call1(cb,19);return cst_invalid_index_passed_to_getter;
        case 20:
         caml_call1(cb,20);
         return cst_clip_region_not_representable_in_desired_format;
        case 21:
         caml_call1(cb,21);
         return cst_error_creating_or_writing_to_a_temporary_file;
        case 22:caml_call1(cb,22);return cst_invalid_value_for_stride;
        case 23:
         caml_call1(cb,23);
         return cst_the_font_type_is_not_appropriate_for_the_operation;
        case 24:caml_call1(cb,24);return cst_the_user_font_is_immutable;
        case 25:
         caml_call1(cb,25);
         return cst_error_occurred_in_a_user_font_callback_function;
        case 26:
         caml_call1(cb,26);
         return cst_negative_number_used_where_it_is_not_allowed;
        case 27:
         caml_call1(cb,27);
         return cst_input_clusters_do_not_represent_the_accompanying_text_and_glyph_arrays;
        case 28:
         caml_call1(cb,28);
         return cst_invalid_value_for_an_input_cairo_font_slant_t;
        case 29:
         caml_call1(cb,29);
         return cst_invalid_value_for_an_input_cairo_font_weight_t;
        case 30:
         caml_call1(cb,30);
         return cst_invalid_value_typically_too_big_for_the_size_of_the_input_surface_pattern_etc;
        case 31:caml_call1(cb,31);return cst_user_font_method_not_implemented;
        case 32:
         caml_call1(cb,32);
         return cst_the_device_type_is_not_appropriate_for_the_operation;
        case 33:
         caml_call1(cb,33);
         return cst_an_operation_to_the_device_caused_an_unspecified_error;
        case 34:
         caml_call1(cb,34);
         return cst_invalid_operation_during_mesh_pattern_construction;
        case 35:
         caml_call1(cb,35);return cst_the_target_device_has_been_finished;
        default:
         caml_call1(cb,36);
         return cst_CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID_used_but_no_CAIRO_MIME_TYPE_JBIG2_GLOBAL_data_provided}}
    caml_call1(cb,40);
    var Unavailable=caml_set_oo_id([248,cst_CairoMock_Mock_Unavailable,0]);
    function _a_(param){caml_call1(cb,41);return [254,1,0,0,1,0,0]}
    function _b_(x,y){caml_call1(cb,42);return [254,1,0,0,1,x,y]}
    function _c_(x,y){caml_call1(cb,43);return [254,x,0,0,y,0,0]}
    function _d_(angle)
     {caml_call1(cb,44);
      return [254,
              Math.cos(angle),
              Math.sin(angle),
              - Math.sin(angle),
              Math.cos(angle),
              0,
              0]}
    function _e_(param)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6];
      caml_call1(cb,56);
      caml_call1(cb,54);
      var d=xx * yy - xy * yx;
      caml_call1(cb,55);
      if(d == 0){caml_call1(cb,52);throw [0,Error,3]}
      caml_call1(cb,53);
      caml_call1(cb,45);
      var xx$0=yy / d;
      caml_call1(cb,46);
      var xy$0=- xy / d;
      caml_call1(cb,47);
      var yx$0=- yx / d;
      caml_call1(cb,48);
      var yy$0=xx / d;
      caml_call1(cb,49);
      var x0$0=(xy * y0 - yy * x0) / d;
      caml_call1(cb,50);
      var y0$0=(yx * x0 - xx * y0) / d;
      caml_call1(cb,51);
      return [254,xx$0,yx$0,xy$0,yy$0,x0$0,y0$0]}
    function _f_(param,_ie_)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6],
       xx$0=_ie_[1],
       yx$0=_ie_[2],
       xy$0=_ie_[3],
       yy$0=_ie_[4],
       x0$0=_ie_[5],
       y0$0=_ie_[6];
      caml_call1(cb,64);
      caml_call1(cb,57);
      var xx$1=xx * xx$0 + xy * yx$0;
      caml_call1(cb,58);
      var xy$1=xx * xy$0 + xy * yy$0;
      caml_call1(cb,59);
      var yx$1=yx * xx$0 + yy * yx$0;
      caml_call1(cb,60);
      var yy$1=yx * xy$0 + yy * yy$0;
      caml_call1(cb,61);
      var x0$1=xx * x0$0 + xy * y0$0 + x0;
      caml_call1(cb,62);
      var y0$1=yx * x0$0 + yy * y0$0 + y0;
      caml_call1(cb,63);
      return [254,xx$1,yx$1,xy$1,yy$1,x0$1,y0$1]}
    function _g_(param,x,y)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6];
      caml_call1(cb,65);
      return [0,xx * x + xy * y + x0,yx * x + yy * y + y0]}
    function _h_(param,dx,dy)
     {var xx=param[1],yx=param[2],xy=param[3],yy=param[4];
      caml_call1(cb,66);
      return [0,xx * dx + xy * dy,yx * dx + yy * dy]}
    function _i_(m,param)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6];
      caml_call1(cb,72);
      m[1] = xx;
      caml_call1(cb,71);
      m[3] = xy;
      caml_call1(cb,70);
      m[2] = yx;
      caml_call1(cb,69);
      m[4] = yy;
      caml_call1(cb,68);
      m[5] = x0;
      caml_call1(cb,67);
      m[6] = y0;
      return 0}
    function _j_(m,x,y){caml_call1(cb,73);return _i_(m,_f_(m,_c_(x,y)))}
    function _k_(m,x,y){caml_call1(cb,74);return _i_(m,_f_(m,_b_(x,y)))}
    function _l_(m,angle){caml_call1(cb,75);return _i_(m,_f_(m,_d_(angle)))}
    function _m_(m){caml_call1(cb,76);return _i_(m,_e_(m))}
    caml_call1(cb,80);
    caml_call1(cb,81);
    var empty=0,_n_=ListLabels[1];
    function _o_(xs,stop_point)
     {caml_call1(cb,90);
      caml_call1(cb,88);
      var param=[0,caml_call1(ListLabels[1],xs),stop_point];
      caml_call1(cb,89);
      var aux=function _id_(_ic_){return _id_.fun(_ic_)};
      caml_call1(cb,86);
      caml_update_dummy
       (aux,
        function(xxs)
         {if(xxs)
           {var xs=xxs[2],x=xxs[1];
            caml_call1(cb,85);
            var
             position_b=x[2][1],
             added_b=x[1],
             match=param[2],
             position_a=match[1],
             added_a=param[1];
            caml_call1(cb,79);
            var
             n=caml_float_compare(position_a,position_b),
             match$0=
              0 === n
               ?(caml_call1(cb,77),caml_int_compare(added_a,added_b))
               :(caml_call1(cb,78),n);
            return -1 === match$0
                    ?(caml_call1(cb,82),[0,param,xxs])
                    :(caml_call1(cb,83),[0,x,caml_call1(aux,xs)])}
          caml_call1(cb,84);
          return [0,param,0]});
      caml_call1(cb,87);
      return caml_call1(aux,xs)}
    caml_call1(cb,97);
    var xs=_o_(empty,_q_);
    caml_call1(cb,96);
    caml_call1(cb,92);
    function _p_(param)
     {var stop_point=param[2];caml_call1(cb,91);return stop_point}
    caml_call2(ListLabels[12],_p_,xs);
    function _r_(r,g,b,a){caml_call1(cb,98);return [0,[0,[0,r,g,b,a]]]}
    function _s_(r,g,b){caml_call1(cb,99);return _r_(r,g,b,1)}
    function _t_(pattern)
     {caml_call1(cb,104);
      var _ib_=pattern[1];
      if(typeof _ib_ !== "number" && 0 === _ib_[0])
       {var color=_ib_[1];caml_call1(cb,100);return color}
      if(typeof _ib_ === "number")
       caml_call1(cb,103);
      else
       switch(_ib_[0])
        {case 0:break;
         case 1:caml_call1(cb,101);break;
         default:caml_call1(cb,102)}
      throw [0,Error,12]}
    function _u_(x0,y0,x1,y1)
     {caml_call1(cb,105);return [0,[1,[0,[0,x0,y0,x1,y1],empty]]]}
    function _v_(pattern)
     {caml_call1(cb,110);
      var _ia_=pattern[1];
      if(typeof _ia_ !== "number" && 1 === _ia_[0])
       {var match=_ia_[1],points=match[1];caml_call1(cb,106);return points}
      if(typeof _ia_ === "number")
       caml_call1(cb,109);
      else
       switch(_ia_[0])
        {case 0:caml_call1(cb,107);break;
         case 1:break;
         default:caml_call1(cb,108)}
      throw [0,Error,12]}
    function _w_(x0,y0,r0,x1,y1,r1)
     {caml_call1(cb,111);return [0,[2,[0,[0,x0,y0,r0,x1,y1,r1],empty]]]}
    function _x_(pattern)
     {caml_call1(cb,116);
      var _h$_=pattern[1];
      if(typeof _h$_ !== "number" && 2 === _h$_[0])
       {var match=_h$_[1],circles=match[1];caml_call1(cb,112);return circles}
      if(typeof _h$_ === "number")
       caml_call1(cb,115);
      else
       switch(_h$_[0])
        {case 0:caml_call1(cb,114);break;case 1:caml_call1(cb,113);break}
      throw [0,Error,12]}
    function _y_(pattern,opt,r,g,b,a)
     {if(opt)var sth=opt[1],ofs=sth;else{caml_call1(cb,124);var ofs=0}
      caml_call1(cb,123);
      caml_call1(cb,121);
      var stop_point=[0,ofs,r,g,b,a];
      caml_call1(cb,122);
      var _h8_=pattern[1];
      if(typeof _h8_ === "number")
       {caml_call1(cb,120);return 0}
      else
       switch(_h8_[0])
        {case 0:caml_call1(cb,119);pattern[1] = 0;return 0;
         case 1:
          var gradient=_h8_[1];
          caml_call1(cb,117);
          var _h9_=_o_(gradient[2],stop_point);
          pattern[1] = [1,[0,gradient[1],_h9_]];
          return 0;
         default:
          var gradient$0=_h8_[1];
          caml_call1(cb,118);
          var _h__=_o_(gradient$0[2],stop_point);
          pattern[1] = [2,[0,gradient$0[1],_h__]];
          return 0}}
    function _z_(pattern,ofs,r,g,b)
     {caml_call1(cb,125);return _y_(pattern,ofs,r,g,b,1)}
    function _A_(pattern)
     {caml_call1(cb,130);
      var _h7_=pattern[1];
      if(typeof _h7_ !== "number" && 0 !== _h7_[0])
       {var match=_h7_[1],stop_points=match[2];
        if(typeof _h7_ === "number")
         var switch$0=0;
        else
         switch(_h7_[0])
          {case 1:caml_call1(cb,126);var switch$0=1;break;
           case 2:caml_call1(cb,127);var switch$0=1;break;
           default:var switch$0=0}
        return caml_call1(_n_,stop_points)}
      if(typeof _h7_ === "number")
       caml_call1(cb,129);
      else
       if(0 === _h7_[0])caml_call1(cb,128);
      throw [0,Error,12]}
    function _B_(pattern,idx)
     {caml_call1(cb,135);
      var _h6_=pattern[1];
      if(typeof _h6_ !== "number" && 0 !== _h6_[0])
       {var match$0=_h6_[1],stop_points=match$0[2];
        if(typeof _h6_ === "number")
         var switch$0=0;
        else
         switch(_h6_[0])
          {case 1:caml_call1(cb,131);var switch$0=1;break;
           case 2:caml_call1(cb,132);var switch$0=1;break;
           default:var switch$0=0}
        caml_call1(cb,95);
        caml_call1(cb,93);
        var
         match=caml_call2(ListLabels[4],stop_points,idx),
         stop_point=match[2];
        caml_call1(cb,94);
        return stop_point}
      if(typeof _h6_ === "number")
       caml_call1(cb,134);
      else
       if(0 === _h6_[0])caml_call1(cb,133);
      throw [0,Error,12]}
    function _C_(points,transformation,x,y)
     {caml_call1(cb,137);points[1] = [0,_g_(transformation,x,y)];return 0}
    function _D_(points,transformation,x,y)
     {caml_call1(cb,141);points[2] = [0,_g_(transformation,x,y)];return 0}
    function _E_(points,transformation)
     {caml_call1(cb,146);
      var _h5_=points[2];
      if(_h5_)
       {var match=_h5_[1],y=match[2],x=match[1];
        caml_call1(cb,145);
        return [0,_g_(_e_(transformation),x,y)]}
      caml_call1(cb,144);
      return 0}
    caml_call1(cb,149);
    function _F_(param)
     {if(param[1] === Error)
       {var status=param[2];
        caml_call1(cb,147);
        switch(status)
         {case 0:caml_call1(cb,38);var _h4_=cst_INVALID_RESTORE;break;
          case 1:var _h4_=cst_INVALID_POP_GROUP;break;
          case 2:caml_call1(cb,39);var _h4_=cst_NO_CURRENT_POINT;break;
          case 3:var _h4_=cst_INVALID_MATRIX;break;
          case 4:var _h4_=cst_INVALID_STATUS;break;
          case 5:var _h4_=cst_NULL_POINTER;break;
          case 6:var _h4_=cst_INVALID_STRING;break;
          case 7:var _h4_=cst_INVALID_PATH_DATA;break;
          case 8:var _h4_=cst_READ_ERROR;break;
          case 9:var _h4_=cst_WRITE_ERROR;break;
          case 10:var _h4_=cst_SURFACE_FINISHED;break;
          case 11:var _h4_=cst_SURFACE_TYPE_MISMATCH;break;
          case 12:var _h4_=cst_PATTERN_TYPE_MISMATCH;break;
          case 13:var _h4_=cst_INVALID_CONTENT;break;
          case 14:var _h4_=cst_INVALID_FORMAT;break;
          case 15:var _h4_=cst_INVALID_VISUAL;break;
          case 16:var _h4_=cst_FILE_NOT_FOUND;break;
          case 17:var _h4_=cst_INVALID_DASH;break;
          case 18:var _h4_=cst_INVALID_DSC_COMMENT;break;
          case 19:var _h4_=cst_INVALID_INDEX;break;
          case 20:var _h4_=cst_CLIP_NOT_REPRESENTABLE;break;
          case 21:var _h4_=cst_TEMP_FILE_ERROR;break;
          case 22:var _h4_=cst_INVALID_STRIDE;break;
          case 23:var _h4_=cst_FONT_TYPE_MISMATCH;break;
          case 24:var _h4_=cst_USER_FONT_IMMUTABLE;break;
          case 25:var _h4_=cst_USER_FONT_ERROR;break;
          case 26:var _h4_=cst_NEGATIVE_COUNT;break;
          case 27:var _h4_=cst_INVALID_CLUSTERS;break;
          case 28:var _h4_=cst_INVALID_SLANT;break;
          case 29:var _h4_=cst_INVALID_WEIGHT;break;
          case 30:var _h4_=cst_INVALID_SIZE;break;
          case 31:var _h4_=cst_USER_FONT_NOT_IMPLEMENTED;break;
          case 32:var _h4_=cst_DEVICE_TYPE_MISMATCH;break;
          case 33:var _h4_=cst_DEVICE_ERROR;break;
          case 34:var _h4_=cst_INVALID_MESH_CONSTRUCTION;break;
          case 35:var _h4_=cst_DEVICE_FINISHED;break;
          default:var _h4_=cst_JBIG2_GLOBAL_MISSING}
        return [0,caml_call2(Printf[4],_G_,_h4_)]}
      caml_call1(cb,148);
      return 0}
    caml_call1(Printexc[8],_F_);
    function _H_(param)
     {caml_call1(cb,150);
      caml_call1(cb,136);
      var _h3_=_a_(0);
      return [0,[0,[0,[0],0,_I_,0,0,2,10,0,2,_s_(0,0,0)[1],_h3_],0],[0,0,0]]}
    function _J_(param)
     {var states=param[1];
      caml_call1(cb,151);
      return caml_call1(ListLabels[2],states)}
    function _K_(context,f)
     {caml_call1(cb,154);
      caml_call1(cb,152);
      var state=caml_call1(f,_J_(context));
      caml_call1(cb,153);
      context[1] = [0,state,caml_call1(ListLabels[3],context[1])];
      return 0}
    function _L_(context)
     {caml_call1(cb,155);
      var _h2_=context[1];
      context[1] = [0,_J_(context),_h2_];
      return 0}
    function _M_(context)
     {caml_call1(cb,160);
      caml_call1(cb,158);
      var _h0_=context[1];
      if(_h0_)
       {var _h1_=_h0_[2];
        if(_h1_)
         {caml_call1(cb,157);caml_call1(cb,159);context[1] = _h1_;return 0}}
      if(_h0_)if(! _h0_[2])caml_call1(cb,156);
      throw [0,Error,0]}
    function _N_(context,transformation)
     {caml_call1(cb,162);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,161);
                 var _hZ_=s.slice();
                 _hZ_[11] = transformation;
                 return _hZ_})}
    function _O_(context){caml_call1(cb,163);return _J_(context)[11]}
    function _P_(m,s)
     {caml_call1(cb,164);
      var newrecord=s.slice();
      newrecord[11] = _f_(s[11],m);
      return newrecord}
    function _Q_(context,m)
     {caml_call1(cb,165);
      return _K_(context,function(_hY_){return _P_(m,_hY_)})}
    function _R_(context,x,y)
     {caml_call1(cb,166);
      var _hW_=_c_(x,y);
      return _K_(context,function(_hX_){return _P_(_hW_,_hX_)})}
    function _S_(context,x,y)
     {caml_call1(cb,167);
      var _hU_=_b_(x,y);
      return _K_(context,function(_hV_){return _P_(_hU_,_hV_)})}
    function _T_(context,angle)
     {caml_call1(cb,168);
      var _hS_=_d_(angle);
      return _K_(context,function(_hT_){return _P_(_hS_,_hT_)})}
    function _U_(context)
     {caml_call1(cb,170);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,169);
                 var newrecord=s.slice();
                 newrecord[11] = _a_(0);
                 return newrecord})}
    function _V_(context,x,y)
     {caml_call1(cb,171);return _g_(_e_(_J_(context)[11]),x,y)}
    function _W_(context,dx,dy)
     {caml_call1(cb,172);return _h_(_e_(_J_(context)[11]),dx,dy)}
    function _X_(context,x,y)
     {caml_call1(cb,173);return _g_(_J_(context)[11],x,y)}
    function _Y_(context,dx,dy)
     {caml_call1(cb,174);return _h_(_J_(context)[11],dx,dy)}
    function _Z_(context,start,current)
     {caml_call1(cb,197);
      caml_call1(cb,195);
      var transformation=_J_(context)[11];
      caml_call1(cb,196);
      function make_relative(dx,dy)
       {caml_call1(cb,193);
        caml_call1(cb,191);
        var match=_E_(context[2],transformation);
        if(match)
         {var match$0=match[1],y=match$0[2],x=match$0[1];
          caml_call1(cb,190);
          caml_call1(cb,192);
          return [0,x + dx,y + dy]}
        caml_call1(cb,189);
        throw [0,Error,2]}
      caml_call1(cb,194);
      if(typeof start === "number")
       if(870530776 <= start)
        caml_call1(cb,183);
       else
        {caml_call1(cb,184);
         var _hP_=context[2];
         caml_call1(cb,140);
         _hP_[1] = 0}
      else
       {var _hQ_=start[1];
        if(260471020 === _hQ_)
         {var match$2=start[2],dy$0=match$2[2],dx$0=match$2[1];
          caml_call1(cb,187);
          caml_call1(cb,181);
          var match$3=make_relative(dx$0,dy$0),y$1=match$3[2],x$1=match$3[1];
          caml_call1(cb,182);
          _C_(context[2],transformation,x$1,y$1)}
        else
         if(516931925 <= _hQ_)
          {var match$4=start[2],y$2=match$4[2],x$2=match$4[1];
           caml_call1(cb,185);
           var _hR_=context[2];
           caml_call1(cb,139);
           if(0 === _hR_[1])
            {caml_call1(cb,138);_hR_[1] = [0,_g_(transformation,x$2,y$2)]}}
         else
          {var match$5=start[2],y$3=match$5[2],x$3=match$5[1];
           caml_call1(cb,186);
           _C_(context[2],transformation,x$3,y$3)}}
      caml_call1(cb,188);
      if(typeof current === "number")
       {if(-101336657 <= current)
         {caml_call1(cb,177);
          var _hN_=context[2];
          caml_call1(cb,143);
          _hN_[2] = 0;
          return 0}
        caml_call1(cb,178);
        var _hO_=context[2];
        caml_call1(cb,142);
        _hO_[2] = _hO_[1];
        return 0}
      if(260471020 <= current[1])
       {var match=current[2],dy=match[2],dx=match[1];
        caml_call1(cb,180);
        caml_call1(cb,175);
        var match$0=make_relative(dx,dy),y=match$0[2],x=match$0[1];
        caml_call1(cb,176);
        return _D_(context[2],transformation,x,y)}
      var match$1=current[2],y$0=match$1[2],x$0=match$1[1];
      caml_call1(cb,179);
      return _D_(context[2],transformation,x$0,y$0)}
    function ___(context,x,y)
     {caml_call1(cb,198);return _Z_(context,[0,4150146,[0,x,y]],-630768008)}
    function _$_(context,x,y)
     {caml_call1(cb,199);return _Z_(context,[0,260471020,[0,x,y]],-630768008)}
    function _aa_(context,x,y)
     {caml_call1(cb,200);
      return _Z_(context,[0,516931925,[0,x,y]],[0,4150146,[0,x,y]])}
    function _ab_(context,x,y)
     {caml_call1(cb,201);
      return _Z_(context,[0,516931925,[0,x,y]],[0,260471020,[0,x,y]])}
    function _ac_(context,x1,y1,param,_hM_,x3,y3)
     {caml_call1(cb,202);
      return _Z_(context,[0,516931925,[0,x1,y1]],[0,4150146,[0,x3,y3]])}
    function _ad_(context,x1,y1,param,_hL_,x3,y3)
     {caml_call1(cb,203);
      return _Z_(context,[0,516931925,[0,x1,y1]],[0,260471020,[0,x3,y3]])}
    function _ae_(context,x,y,param,_hK_)
     {caml_call1(cb,204);return _Z_(context,870530776,[0,4150146,[0,x,y]])}
    function _af_(context,x,y,r,a1,a2)
     {caml_call1(cb,205);
      return _Z_
              (context,
               [0,516931925,[0,x + r * Math.cos(a1),y + r * Math.sin(a1)]],
               [0,4150146,[0,x + r * Math.cos(a2),y + r * Math.sin(a2)]])}
    function _ag_(context,x,y,r,a1,a2)
     {caml_call1(cb,206);
      return _Z_
              (context,
               [0,516931925,[0,x + r * Math.cos(a1),y + r * Math.sin(a1)]],
               [0,4150146,[0,x + r * Math.cos(a2),y + r * Math.sin(a2)]])}
    function _ah_(context)
     {caml_call1(cb,211);
      caml_call1(cb,209);
      var transformation=_J_(context)[11];
      caml_call1(cb,210);
      var match=_E_(context[2],transformation);
      if(match)
       {var match$0=match[1],y=match$0[2],x=match$0[1];
        caml_call1(cb,208);
        return [0,x,y]}
      caml_call1(cb,207);
      return _ai_}
    function _aj_(context)
     {caml_call1(cb,212);return _Z_(context,-101336657,-101336657)}
    var
     _ak_=
      [0,
       _ah_,
       _aj_,
       function(context)
        {caml_call1(cb,213);return _Z_(context,870530776,-630768008)}];
    function _al_(param){caml_call1(cb,214);return 0}
    function _am_(context)
     {caml_call1(cb,215);return _Z_(context,-101336657,-101336657)}
    function _an_(param){caml_call1(cb,216);return 0}
    function _ao_(context)
     {caml_call1(cb,217);return _Z_(context,-101336657,-101336657)}
    function _ap_(param){caml_call1(cb,218);return 0}
    function _aq_(context)
     {caml_call1(cb,219);return _Z_(context,-101336657,-101336657)}
    function _ar_(param,_hJ_){caml_call1(cb,220);return 0}
    function _as_(context,line_width)
     {caml_call1(cb,222);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,221);
                 var _hI_=s.slice();
                 _hI_[6] = line_width;
                 return _hI_})}
    function _at_(context){caml_call1(cb,223);return _J_(context)[6]}
    function _au_(context,opt,dashes)
     {if(opt)var sth=opt[1],ofs=sth;else{caml_call1(cb,226);var ofs=0}
      caml_call1(cb,225);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,224);
                 var _hH_=s.slice();
                 _hH_[1] = dashes;
                 _hH_[8] = ofs;
                 return _hH_})}
    function _av_(context)
     {caml_call1(cb,229);
      caml_call1(cb,227);
      var state=_J_(context);
      caml_call1(cb,228);
      return [0,state[1],state[8]]}
    function _aw_(context,fill_rule)
     {caml_call1(cb,231);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,230);
                 var _hG_=s.slice();
                 _hG_[2] = fill_rule;
                 return _hG_})}
    function _ax_(context){caml_call1(cb,232);return _J_(context)[2]}
    function _ay_(context,line_cap)
     {caml_call1(cb,234);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,233);
                 var _hF_=s.slice();
                 _hF_[4] = line_cap;
                 return _hF_})}
    function _az_(context){caml_call1(cb,235);return _J_(context)[4]}
    function _aA_(context,line_join)
     {caml_call1(cb,237);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,236);
                 var _hE_=s.slice();
                 _hE_[5] = line_join;
                 return _hE_})}
    function _aB_(context){caml_call1(cb,238);return _J_(context)[5]}
    function _aC_(context,miter_limit)
     {caml_call1(cb,240);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,239);
                 var _hD_=s.slice();
                 _hD_[7] = miter_limit;
                 return _hD_})}
    function _aD_(context){caml_call1(cb,241);return _J_(context)[7]}
    function _aE_(context,operator)
     {caml_call1(cb,243);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,242);
                 var _hC_=s.slice();
                 _hC_[9] = operator;
                 return _hC_})}
    function _aF_(context){caml_call1(cb,244);return _J_(context)[9]}
    function _aG_(context,pattern)
     {caml_call1(cb,248);
      caml_call1(cb,246);
      var source=pattern[1];
      caml_call1(cb,247);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,245);
                 var _hB_=s.slice();
                 _hB_[10] = source;
                 return _hB_})}
    function _aH_(context){caml_call1(cb,249);return [0,_J_(context)[10]]}
    function _aI_(context,r,g,b)
     {caml_call1(cb,253);
      caml_call1(cb,251);
      var source=_s_(r,g,b)[1];
      caml_call1(cb,252);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,250);
                 var _hA_=s.slice();
                 _hA_[10] = source;
                 return _hA_})}
    function _aJ_(context,r,g,b,a)
     {caml_call1(cb,257);
      caml_call1(cb,255);
      var source=_r_(r,g,b,a)[1];
      caml_call1(cb,256);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,254);
                 var _hz_=s.slice();
                 _hz_[10] = source;
                 return _hz_})}
    function _aK_(context,opt,_hx_,family)
     {if(opt)var sth=opt[1],slant=sth;else{caml_call1(cb,261);var slant=0}
      if(_hx_)
       var sth$0=_hx_[1],weight=sth$0;
      else
       {caml_call1(cb,260);var weight=0}
      caml_call1(cb,259);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,258);
                 var _hy_=s.slice();
                 _hy_[3] = [0,slant,weight,s[3][3],family];
                 return _hy_})}
    function _aL_(context,size)
     {caml_call1(cb,263);
      return _K_
              (context,
               function(s)
                {caml_call1(cb,262);
                 var _hv_=s.slice(),_hw_=s[3];
                 _hv_[3] = [0,_hw_[1],_hw_[2],size,_hw_[4]];
                 return _hv_})}
    function _aM_(context,s)
     {caml_call1(cb,267);
      caml_call1(cb,264);
      var match=caml_call1(_ak_[1],context),_ht_=match[2],_hu_=match[1];
      caml_call1(cb,265);
      var width=_J_(context)[3][3] * 0.8 * caml_ml_string_length(s);
      caml_call1(cb,266);
      return _Z_(context,870530776,[0,4150146,[0,_hu_ + width,_ht_]])}
    function _aN_(context)
     {caml_call1(cb,270);
      caml_call1(cb,268);
      var ascent=_J_(context)[3][3];
      caml_call1(cb,269);
      return [254,ascent,ascent / 4,0,2 * ascent,0]}
    function _aO_(context,s)
     {caml_call1(cb,274);
      caml_call1(cb,271);
      var width=_J_(context)[3][3] * 0.8 * caml_ml_string_length(s);
      caml_call1(cb,272);
      var height=_J_(context)[3][3];
      caml_call1(cb,273);
      return [254,0,0,width,height,width,0]}
    function _aP_(C)
     {var _fq_=C[10],_fr_=C[4],_fs_=C[1],_ft_=C[3];
      caml_call1(cb,275);
      var _fu_=C[2];
      function unit(param){caml_call1(cb,276);return cst}
      function float$0(x)
       {caml_call1(cb,277);return caml_call2(Printf[4],_aQ_,x)}
      function matrix(param)
       {var
         xx=param[1],
         yx=param[2],
         xy=param[3],
         yy=param[4],
         x0=param[5],
         y0=param[6];
        caml_call1(cb,278);
        return caml_call7(Printf[4],_aR_,xx,xy,yx,yy,x0,y0)}
      function coords(param)
       {var y=param[2],x=param[1];
        caml_call1(cb,279);
        return caml_call3(Printf[4],_aS_,x,y)}
      function dashes(dashes)
       {caml_call1(cb,284);
        caml_call1(cb,280);
        var _hp_=caml_call1(ArrayLabels[10],dashes);
        caml_call1(cb,281);
        var
         _hq_=caml_call1(Printf[4],_aT_),
         _hr_=caml_call1(caml_call1(ListLabels[12],_hq_),_hp_);
        caml_call1(cb,282);
        var _hs_=caml_call1(caml_call1(StringLabels[7],cst$0),_hr_);
        caml_call1(cb,283);
        return caml_call1(caml_call1(Printf[4],_aU_),_hs_)}
      function dashes_ofs(param)
       {var ofs=param[2],ds=param[1];
        caml_call1(cb,285);
        var _ho_=dashes(ds);
        return caml_call3(Printf[4],_aV_,_ho_,ofs)}
      caml_call1(cb,288);
      function fill_rule(param)
       {return 0 === param
                ?(caml_call1(cb,286),cst_WINDING)
                :(caml_call1(cb,287),cst_EVEN_ODD)}
      caml_call1(cb,292);
      function line_cap(param)
       {switch(param)
         {case 0:caml_call1(cb,289);return cst_BUTT;
          case 1:caml_call1(cb,290);return cst_ROUND;
          default:caml_call1(cb,291);return cst_SQUARE}}
      caml_call1(cb,296);
      function line_join(param)
       {switch(param)
         {case 0:caml_call1(cb,293);return cst_JOIN_MITER;
          case 1:caml_call1(cb,294);return cst_JOIN_ROUND;
          default:caml_call1(cb,295);return cst_JOIN_BEVEL}}
      caml_call1(cb,311);
      function operator(param)
       {switch(param)
         {case 0:caml_call1(cb,297);return cst_CLEAR;
          case 1:caml_call1(cb,298);return cst_SOURCE;
          case 2:caml_call1(cb,299);return cst_OVER;
          case 3:caml_call1(cb,300);return cst_IN;
          case 4:caml_call1(cb,301);return cst_OUT;
          case 5:caml_call1(cb,302);return cst_ATOP;
          case 6:caml_call1(cb,303);return cst_DEST;
          case 7:caml_call1(cb,304);return cst_DEST_OVER;
          case 8:caml_call1(cb,305);return cst_DEST_IN;
          case 9:caml_call1(cb,306);return cst_DEST_OUT;
          case 10:caml_call1(cb,307);return cst_DEST_ATOP;
          case 11:caml_call1(cb,308);return cst_XOR;
          case 12:caml_call1(cb,309);return cst_ADD;
          default:caml_call1(cb,310);return cst_SATURATE}}
      function source(source)
       {caml_call1(cb,333);
        function get(get)
         {caml_call1(cb,319);
          try
           {var _hm_=[0,caml_call1(get,source)];return _hm_}
          catch(_hn_)
           {_hn_ = caml_wrap_exception(_hn_);
            if(_hn_[1] === C[1])
             if(12 === _hn_[2]){caml_call1(cb,318);return 0}
            throw _hn_}}
        function stop_points(param)
         {caml_call1(cb,331);
          caml_call1(cb,329);
          var count=caml_call1(C[10][3],source);
          caml_call1(cb,330);
          caml_call1(cb,327);
          var stop_points=runtime.caml_make_vect(count,_aW_);
          caml_call1(cb,328);
          var _hf_=count - 1 | 0,_he_=0;
          if(! (_hf_ < 0))
           {var idx=_he_;
            for(;;)
             {caml_call1(cb,325);
              var _hk_=caml_call2(C[10][4],source,idx);
              runtime.caml_check_bound(stop_points,idx)[idx + 1] = _hk_;
              var _hl_=idx + 1 | 0;
              if(_hf_ !== idx){var idx=_hl_;continue}
              break}}
          caml_call1(cb,326);
          caml_call1(cb,320);
          var _hg_=caml_call1(ArrayLabels[10],stop_points);
          caml_call1(cb,322);
          function _hh_(param)
           {var a=param[5],b=param[4],g=param[3],r=param[2],position=param[1];
            caml_call1(cb,321);
            return caml_call6(Printf[4],_aX_,position,r,g,b,a)}
          var _hi_=caml_call1(caml_call1(ListLabels[12],_hh_),_hg_);
          caml_call1(cb,323);
          var _hj_=caml_call1(caml_call1(StringLabels[7],cst$1),_hi_);
          caml_call1(cb,324);
          return caml_call1(caml_call1(Printf[4],_aY_),_hj_)}
        caml_call1(cb,332);
        var match=get(C[10][7]);
        if(match)
         {var
           match$0=match[1],
           a=match$0[4],
           b=match$0[3],
           g=match$0[2],
           r=match$0[1];
          caml_call1(cb,316);
          return caml_call5(Printf[4],_aZ_,r,g,b,a)}
        caml_call1(cb,317);
        var match$1=get(C[10][9]);
        if(match$1)
         {var
           match$2=match$1[1],
           y2=match$2[4],
           x2=match$2[3],
           y1=match$2[2],
           x1=match$2[1];
          caml_call1(cb,314);
          var _hc_=stop_points(0);
          return caml_call6(Printf[4],_a0_,x1,y1,x2,y2,_hc_)}
        caml_call1(cb,315);
        caml_call1(cb,312);
        var
         match$3=caml_call1(C[10][11],source),
         r2=match$3[6],
         y2$0=match$3[5],
         x2$0=match$3[4],
         r1=match$3[3],
         y1$0=match$3[2],
         x1$0=match$3[1];
        caml_call1(cb,313);
        var _hd_=stop_points(0);
        return caml_call8(Printf[4],_a1_,x1$0,y1$0,r1,x2$0,y2$0,r2,_hd_)}
      function font_extents(param)
       {var
         max_y_advance=param[5],
         max_x_advance=param[4],
         baseline=param[3],
         descent=param[2],
         ascent=param[1];
        caml_call1(cb,334);
        return caml_call6
                (Printf[4],
                 _a2_,
                 ascent,
                 descent,
                 baseline,
                 max_x_advance,
                 max_y_advance)}
      function text_extents(param)
       {var
         y_advance=param[6],
         x_advance=param[5],
         height=param[4],
         width=param[3],
         y_bearing=param[2],
         x_bearing=param[1];
        caml_call1(cb,335);
        return caml_call7
                (Printf[4],
                 _a3_,
                 x_bearing,
                 y_bearing,
                 width,
                 height,
                 x_advance,
                 y_advance)}
      caml_call1(cb,339);
      function slant(param)
       {switch(param)
         {case 0:caml_call1(cb,336);return cst_Upright;
          case 1:caml_call1(cb,337);return cst_Italic;
          default:caml_call1(cb,338);return cst_Oblique}}
      caml_call1(cb,342);
      var
       P=
        [0,
         unit,
         float$0,
         matrix,
         coords,
         dashes,
         dashes_ofs,
         fill_rule,
         line_cap,
         line_join,
         operator,
         source,
         font_extents,
         text_extents,
         slant,
         function(param)
          {return 0 === param
                   ?(caml_call1(cb,340),cst_Normal)
                   :(caml_call1(cb,341),cst_Bold)}];
      function _fv_(param){caml_call1(cb,343);return P[3]}
      function _fw_(param){caml_call1(cb,344);return P[10]}
      function _fx_(param){caml_call1(cb,345);return P[7]}
      function _fy_(param){caml_call1(cb,346);return P[8]}
      function _fz_(param){caml_call1(cb,347);return P[9]}
      function _fA_(param){caml_call1(cb,348);return P[11]}
      function _fB_(param){caml_call1(cb,349);return P[5]}
      var
       A=
        [0,
         _fv_,
         _fw_,
         _fx_,
         _fy_,
         _fz_,
         _fA_,
         _fB_,
         function(name,p,param)
          {caml_call1(cb,352);
           return function(param)
            {if(param)
              {var x=param[1];
               caml_call1(cb,351);
               var _hb_=caml_call1(p,x);
               return caml_call3(Printf[4],_a4_,name,_hb_)}
             caml_call1(cb,350);
             return cst$2}}];
      function _fC_(c){caml_call1(cb,353);return [0,c,0]}
      function _fD_(param)
       {var calls=param[2];
        caml_call1(cb,354);
        return caml_call1(ListLabels[5],calls)}
      var
       Context=
        [0,
         _fC_,
         function(context,format)
          {caml_call1(cb,369);
           function _g$_(call,print_ret,f)
            {caml_call1(cb,368);
             try
              {caml_call1(cb,365);
               var ret=caml_call1(f,context[1]);
               caml_call1(cb,366);
               caml_call1(cb,363);
               var printed_ret=caml_call1(print_ret,ret);
               caml_call1(cb,364);
               caml_call1(cb,361);
               var
                call$1=
                 caml_string_notequal(printed_ret,cst$3)
                  ?(caml_call1(cb,360),
                    caml_call3(Printf[4],_a6_,call,printed_ret))
                  :(caml_call1(cb,359),call);
               caml_call1(cb,362);
               context[2] = [0,call$1,context[2]];
               caml_call1(cb,358);
               return ret}
             catch(ex)
              {ex = caml_wrap_exception(ex);
               caml_call1(cb,367);
               caml_call1(cb,356);
               var
                _ha_=caml_call1(Printexc[1],ex),
                call$0=caml_call3(Printf[4],_a5_,call,_ha_);
               caml_call1(cb,357);
               context[2] = [0,call$0,context[2]];
               caml_call1(cb,355);
               throw ex}}
           return caml_call2(Printf[9],_g$_,format)},
         _fD_];
      caml_call1(cb,370);
      var _fE_=Context[1];
      caml_call1(cb,371);
      var _fF_=Context[3];
      function _fG_(context)
       {caml_call1(cb,372);
        return caml_call4(Context[2],context,_a7_,P[1],C[11])}
      function _fH_(context)
       {caml_call1(cb,373);
        return caml_call4(Context[2],context,_a8_,P[1],C[12])}
      function _fI_(context,m)
       {caml_call1(cb,375);
        function _g__(c){caml_call1(cb,374);return caml_call2(C[52],c,m)}
        return caml_call6(Context[2],context,_a9_,A[1],m,P[1],_g__)}
      function _fJ_(context)
       {caml_call1(cb,376);
        return caml_call4(Context[2],context,_a__,P[3],C[53])}
      function _fK_(context,m)
       {caml_call1(cb,378);
        function _g9_(c){caml_call1(cb,377);return caml_call2(C[51],c,m)}
        return caml_call6(Context[2],context,_a$_,A[1],m,P[1],_g9_)}
      function _fL_(context,x,y)
       {caml_call1(cb,380);
        function _g8_(c){caml_call1(cb,379);return caml_call3(C[49],c,x,y)}
        return caml_call6(Context[2],context,_ba_,x,y,P[1],_g8_)}
      function _fM_(context,x,y)
       {caml_call1(cb,382);
        function _g7_(c){caml_call1(cb,381);return caml_call3(C[48],c,x,y)}
        return caml_call6(Context[2],context,_bb_,x,y,P[1],_g7_)}
      function _fN_(context,angle)
       {caml_call1(cb,384);
        function _g6_(c){caml_call1(cb,383);return caml_call2(C[50],c,angle)}
        return caml_call5(Context[2],context,_bc_,angle,P[1],_g6_)}
      function _fO_(context)
       {caml_call1(cb,385);
        return caml_call4(Context[2],context,_bd_,P[1],C[54])}
      function _fP_(context,x,y)
       {caml_call1(cb,387);
        function _g5_(c){caml_call1(cb,386);return caml_call3(C[57],c,x,y)}
        return caml_call6(Context[2],context,_be_,x,y,P[4],_g5_)}
      function _fQ_(context,x,y)
       {caml_call1(cb,389);
        function _g4_(c){caml_call1(cb,388);return caml_call3(C[58],c,x,y)}
        return caml_call6(Context[2],context,_bf_,x,y,P[4],_g4_)}
      function _fR_(context,x,y)
       {caml_call1(cb,391);
        function _g3_(c){caml_call1(cb,390);return caml_call3(C[55],c,x,y)}
        return caml_call6(Context[2],context,_bg_,x,y,P[4],_g3_)}
      function _fS_(context,x,y)
       {caml_call1(cb,393);
        function _g2_(c){caml_call1(cb,392);return caml_call3(C[56],c,x,y)}
        return caml_call6(Context[2],context,_bh_,x,y,P[4],_g2_)}
      function _fT_(context,x,y)
       {caml_call1(cb,395);
        function _g1_(c){caml_call1(cb,394);return caml_call3(C[43],c,x,y)}
        return caml_call6(Context[2],context,_bi_,x,y,P[1],_g1_)}
      function _fU_(context,x,y)
       {caml_call1(cb,397);
        function _g0_(c){caml_call1(cb,396);return caml_call3(C[47],c,x,y)}
        return caml_call6(Context[2],context,_bj_,x,y,P[1],_g0_)}
      function _fV_(context,x,y)
       {caml_call1(cb,399);
        function _gZ_(c){caml_call1(cb,398);return caml_call3(C[42],c,x,y)}
        return caml_call6(Context[2],context,_bk_,x,y,P[1],_gZ_)}
      function _fW_(context,x,y)
       {caml_call1(cb,401);
        function _gY_(c){caml_call1(cb,400);return caml_call3(C[46],c,x,y)}
        return caml_call6(Context[2],context,_bl_,x,y,P[1],_gY_)}
      function _fX_(context,x1,y1,x2,y2,x3,y3)
       {caml_call1(cb,403);
        function _gX_(c)
         {caml_call1(cb,402);return caml_call7(C[41],c,x1,y1,x2,y2,x3,y3)}
        return caml_call10
                (Context[2],context,_bm_,x1,y1,x2,y2,x3,y3,P[1],_gX_)}
      function _fY_(context,x1,y1,x2,y2,x3,y3)
       {caml_call1(cb,405);
        function _gW_(c)
         {caml_call1(cb,404);return caml_call7(C[45],c,x1,y1,x2,y2,x3,y3)}
        return caml_call10
                (Context[2],context,_bn_,x1,y1,x2,y2,x3,y3,P[1],_gW_)}
      function _fZ_(context,x,y,w,h)
       {caml_call1(cb,407);
        function _gV_(c)
         {caml_call1(cb,406);return caml_call5(C[44],c,x,y,w,h)}
        return caml_call8(Context[2],context,_bo_,x,y,w,h,P[1],_gV_)}
      function _f0_(context,x,y,r,a1,a2)
       {caml_call1(cb,409);
        function _gU_(c)
         {caml_call1(cb,408);return caml_call6(C[39],c,x,y,r,a1,a2)}
        return caml_call9(Context[2],context,_bp_,x,y,r,a1,a2,P[1],_gU_)}
      function _f1_(context,x,y,r,a1,a2)
       {caml_call1(cb,411);
        function _gT_(c)
         {caml_call1(cb,410);return caml_call6(C[40],c,x,y,r,a1,a2)}
        return caml_call9(Context[2],context,_bq_,x,y,r,a1,a2,P[1],_gT_)}
      function _f2_(context)
       {caml_call1(cb,412);
        return caml_call4(Context[2],context,_br_,P[4],C[38][1])}
      function _f3_(context)
       {caml_call1(cb,413);
        return caml_call4(Context[2],context,_bs_,P[1],C[38][2])}
      var
       _f4_=
        [0,
         _f2_,
         _f3_,
         function(context)
          {caml_call1(cb,414);
           return caml_call4(Context[2],context,_bt_,P[1],C[38][3])}];
      function _f5_(context)
       {caml_call1(cb,415);
        return caml_call4(Context[2],context,_bu_,P[1],C[37])}
      function _f6_(context)
       {caml_call1(cb,416);
        return caml_call4(Context[2],context,_bv_,P[1],C[36])}
      function _f7_(context)
       {caml_call1(cb,417);
        return caml_call4(Context[2],context,_bw_,P[1],C[34])}
      function _f8_(context)
       {caml_call1(cb,418);
        return caml_call4(Context[2],context,_bx_,P[1],C[33])}
      function _f9_(context)
       {caml_call1(cb,419);
        return caml_call4(Context[2],context,_by_,P[1],C[32])}
      function _f__(context)
       {caml_call1(cb,420);
        return caml_call4(Context[2],context,_bz_,P[1],C[31])}
      function _f$_(alpha,context)
       {caml_call1(cb,421);
        var
         _gQ_=caml_call1(C[35],alpha),
         _gR_=P[1],
         _gS_=caml_call2(A[8],cst_alpha,P[2]);
        return caml_call6(Context[2],context,_bA_,_gS_,alpha,_gR_,_gQ_)}
      function _ga_(context,line_width)
       {caml_call1(cb,423);
        function _gP_(c)
         {caml_call1(cb,422);return caml_call2(C[21],c,line_width)}
        return caml_call5(Context[2],context,_bB_,line_width,P[1],_gP_)}
      function _gb_(context)
       {caml_call1(cb,424);
        return caml_call4(Context[2],context,_bC_,P[2],C[22])}
      function _gc_(context,ofs,dashes)
       {caml_call1(cb,426);
        function _gL_(c)
         {caml_call1(cb,425);return caml_call3(C[25],c,ofs,dashes)}
        var _gM_=P[1],_gN_=A[7],_gO_=caml_call2(A[8],cst_ofs,P[2]);
        return caml_call8
                (Context[2],context,_bD_,_gO_,ofs,_gN_,dashes,_gM_,_gL_)}
      function _gd_(context)
       {caml_call1(cb,427);
        return caml_call4(Context[2],context,_bE_,P[6],C[26])}
      function _ge_(context,fill_rule)
       {caml_call1(cb,429);
        function _gK_(c)
         {caml_call1(cb,428);return caml_call2(C[29],c,fill_rule)}
        return caml_call6(Context[2],context,_bF_,A[3],fill_rule,P[1],_gK_)}
      function _gf_(context)
       {caml_call1(cb,430);
        return caml_call4(Context[2],context,_bG_,P[7],C[30])}
      function _gg_(context,line_cap)
       {caml_call1(cb,432);
        function _gJ_(c)
         {caml_call1(cb,431);return caml_call2(C[17],c,line_cap)}
        return caml_call6(Context[2],context,_bH_,A[4],line_cap,P[1],_gJ_)}
      function _gh_(context)
       {caml_call1(cb,433);
        return caml_call4(Context[2],context,_bI_,P[8],C[18])}
      function _gi_(context,line_join)
       {caml_call1(cb,435);
        function _gI_(c)
         {caml_call1(cb,434);return caml_call2(C[19],c,line_join)}
        return caml_call6(Context[2],context,_bJ_,A[5],line_join,P[1],_gI_)}
      function _gj_(context)
       {caml_call1(cb,436);
        return caml_call4(Context[2],context,_bK_,P[9],C[20])}
      function _gk_(context,miter_limit)
       {caml_call1(cb,438);
        function _gH_(c)
         {caml_call1(cb,437);return caml_call2(C[23],c,miter_limit)}
        return caml_call5(Context[2],context,_bL_,miter_limit,P[1],_gH_)}
      function _gl_(context)
       {caml_call1(cb,439);
        return caml_call4(Context[2],context,_bM_,P[2],C[24])}
      function _gm_(context,operator)
       {caml_call1(cb,441);
        function _gG_(c)
         {caml_call1(cb,440);return caml_call2(C[27],c,operator)}
        return caml_call6(Context[2],context,_bN_,A[2],operator,P[1],_gG_)}
      function _gn_(context)
       {caml_call1(cb,442);
        return caml_call4(Context[2],context,_bO_,P[10],C[28])}
      function _go_(context,source)
       {caml_call1(cb,444);
        function _gF_(c){caml_call1(cb,443);return caml_call2(C[15],c,source)}
        return caml_call6(Context[2],context,_bP_,A[6],source,P[1],_gF_)}
      function _gp_(context)
       {caml_call1(cb,445);
        return caml_call4(Context[2],context,_bQ_,P[11],C[16])}
      function _gq_(context,r,g,b)
       {caml_call1(cb,447);
        function _gE_(c){caml_call1(cb,446);return caml_call4(C[13],c,r,g,b)}
        return caml_call7(Context[2],context,_bR_,r,g,b,P[1],_gE_)}
      function _gr_(context,r,g,b,a)
       {caml_call1(cb,449);
        function _gD_(c)
         {caml_call1(cb,448);return caml_call5(C[14],c,r,g,b,a)}
        return caml_call8(Context[2],context,_bS_,r,g,b,a,P[1],_gD_)}
      function _gs_(context,slant,weight,family)
       {caml_call1(cb,451);
        function _gz_(c)
         {caml_call1(cb,450);return caml_call4(C[5],c,slant,weight,family)}
        var
         _gA_=P[1],
         _gB_=caml_call2(A[8],cst_weight,P[15]),
         _gC_=caml_call2(A[8],cst_slant,P[14]);
        return caml_call9
                (Context[2],
                 context,
                 _bT_,
                 _gC_,
                 slant,
                 _gB_,
                 weight,
                 family,
                 _gA_,
                 _gz_)}
      function _gt_(context,font_size)
       {caml_call1(cb,453);
        function _gy_(c)
         {caml_call1(cb,452);return caml_call2(C[6],c,font_size)}
        return caml_call5(Context[2],context,_bU_,font_size,P[1],_gy_)}
      function _gu_(context,s)
       {caml_call1(cb,455);
        function _gx_(c){caml_call1(cb,454);return caml_call2(C[7],c,s)}
        return caml_call5(Context[2],context,_bV_,s,P[1],_gx_)}
      function _gv_(context)
       {caml_call1(cb,456);
        return caml_call4(Context[2],context,_bW_,P[12],C[8])}
      return [0,
              _fq_,
              _fr_,
              _fs_,
              _ft_,
              _fu_,
              P,
              A,
              Context,
              _fE_,
              _fF_,
              _fG_,
              _fH_,
              _fI_,
              _fJ_,
              _fK_,
              _fL_,
              _fM_,
              _fN_,
              _fO_,
              _fP_,
              _fQ_,
              _fR_,
              _fS_,
              _fT_,
              _fU_,
              _fV_,
              _fW_,
              _fX_,
              _fY_,
              _fZ_,
              _f0_,
              _f1_,
              _f4_,
              _f5_,
              _f6_,
              _f7_,
              _f8_,
              _f9_,
              _f__,
              _f$_,
              _ga_,
              _gb_,
              _gc_,
              _gd_,
              _ge_,
              _gf_,
              _gg_,
              _gh_,
              _gi_,
              _gj_,
              _gk_,
              _gl_,
              _gm_,
              _gn_,
              _go_,
              _gp_,
              _gq_,
              _gr_,
              _gs_,
              _gt_,
              _gu_,
              _gv_,
              function(context,s)
               {caml_call1(cb,458);
                function _gw_(c)
                 {caml_call1(cb,457);return caml_call2(C[9],c,s)}
                return caml_call5(Context[2],context,_bX_,s,P[13],_gw_)}]}
    var
     _bY_=
      _aP_
       ([0,
         Error,
         status_to_string,
         Unavailable,
         [0,_a_,_b_,_c_,_d_,_k_,_j_,_l_,_m_,_f_,_h_,_g_],
         _aK_,
         _aL_,
         _aM_,
         _aN_,
         _aO_,
         [0,_z_,_y_,_A_,_B_,_s_,_r_,_t_,_u_,_v_,_w_,_x_],
         _L_,
         _M_,
         _aI_,
         _aJ_,
         _aG_,
         _aH_,
         _ay_,
         _az_,
         _aA_,
         _aB_,
         _as_,
         _at_,
         _aC_,
         _aD_,
         _au_,
         _av_,
         _aE_,
         _aF_,
         _aw_,
         _ax_,
         _aq_,
         _ap_,
         _ao_,
         _an_,
         _ar_,
         _am_,
         _al_,
         _ak_,
         _af_,
         _ag_,
         _ac_,
         _aa_,
         ___,
         _ae_,
         _ad_,
         _ab_,
         _$_,
         _S_,
         _R_,
         _T_,
         _Q_,
         _N_,
         _O_,
         _U_,
         _X_,
         _Y_,
         _V_,
         _W_]),
     _bZ_=_bY_[1],
     _b0_=_bY_[2],
     _b1_=_bY_[3],
     _b2_=_bY_[4],
     _b3_=_bY_[5],
     _b4_=_bY_[8],
     _b5_=_bY_[10],
     _b6_=_bY_[11],
     _b7_=_bY_[12],
     _b8_=_bY_[13],
     _b9_=_bY_[14],
     _b__=_bY_[15],
     _b$_=_bY_[16],
     _ca_=_bY_[17],
     _cb_=_bY_[18],
     _cc_=_bY_[19],
     _cd_=_bY_[20],
     _ce_=_bY_[21],
     _cf_=_bY_[22],
     _cg_=_bY_[23],
     _ch_=_bY_[24],
     _ci_=_bY_[25],
     _cj_=_bY_[26],
     _ck_=_bY_[27],
     _cl_=_bY_[28],
     _cm_=_bY_[29],
     _cn_=_bY_[30],
     _co_=_bY_[31],
     _cp_=_bY_[32],
     _cq_=_bY_[33],
     _cr_=_bY_[34],
     _cs_=_bY_[35],
     _ct_=_bY_[36],
     _cu_=_bY_[37],
     _cv_=_bY_[38],
     _cw_=_bY_[39],
     _cx_=_bY_[40],
     _cy_=_bY_[41],
     _cz_=_bY_[42],
     _cA_=_bY_[43],
     _cB_=_bY_[44],
     _cC_=_bY_[45],
     _cD_=_bY_[46],
     _cE_=_bY_[47],
     _cF_=_bY_[48],
     _cG_=_bY_[49],
     _cH_=_bY_[50],
     _cI_=_bY_[51],
     _cJ_=_bY_[52],
     _cK_=_bY_[53],
     _cL_=_bY_[54],
     _cM_=_bY_[55],
     _cN_=_bY_[56],
     _cO_=_bY_[57],
     _cP_=_bY_[58],
     _cQ_=_bY_[59],
     _cR_=_bY_[60],
     _cS_=_bY_[61],
     _cT_=_bY_[62],
     _cU_=_bY_[63];
    function _cV_(param)
     {caml_call1(cb,459);var _fp_=_H_(0);return caml_call1(_b4_[1],_fp_)}
    var
     CairoMock=
      [0,
       [0,
        Error,
        status_to_string,
        Unavailable,
        [0,_a_,_b_,_c_,_d_,_k_,_j_,_l_,_m_,_f_,_h_,_g_],
        _aK_,
        _aL_,
        _aM_,
        _aN_,
        _aO_,
        [0,_z_,_y_,_A_,_B_,_s_,_r_,_t_,_u_,_v_,_w_,_x_],
        _L_,
        _M_,
        _aI_,
        _aJ_,
        _aG_,
        _aH_,
        _ay_,
        _az_,
        _aA_,
        _aB_,
        _as_,
        _at_,
        _aC_,
        _aD_,
        _au_,
        _av_,
        _aE_,
        _aF_,
        _aw_,
        _ax_,
        _aq_,
        _ap_,
        _ao_,
        _an_,
        _ar_,
        _am_,
        _al_,
        _ak_,
        _af_,
        _ag_,
        _ac_,
        _aa_,
        ___,
        _ae_,
        _ad_,
        _ab_,
        _$_,
        _S_,
        _R_,
        _T_,
        _Q_,
        _N_,
        _O_,
        _U_,
        _X_,
        _Y_,
        _V_,
        _W_,
        _H_],
       function(_fn_)
        {var _fo_=_aP_(_fn_);
         return [0,
                 _fo_[3],
                 _fo_[5],
                 _fo_[4],
                 _fo_[2],
                 _fo_[59],
                 _fo_[60],
                 _fo_[61],
                 _fo_[62],
                 _fo_[63],
                 _fo_[1],
                 _fo_[11],
                 _fo_[12],
                 _fo_[57],
                 _fo_[58],
                 _fo_[55],
                 _fo_[56],
                 _fo_[47],
                 _fo_[48],
                 _fo_[49],
                 _fo_[50],
                 _fo_[41],
                 _fo_[42],
                 _fo_[51],
                 _fo_[52],
                 _fo_[43],
                 _fo_[44],
                 _fo_[53],
                 _fo_[54],
                 _fo_[45],
                 _fo_[46],
                 _fo_[39],
                 _fo_[38],
                 _fo_[37],
                 _fo_[36],
                 _fo_[40],
                 _fo_[35],
                 _fo_[34],
                 _fo_[33],
                 _fo_[31],
                 _fo_[32],
                 _fo_[28],
                 _fo_[26],
                 _fo_[24],
                 _fo_[30],
                 _fo_[29],
                 _fo_[27],
                 _fo_[25],
                 _fo_[17],
                 _fo_[16],
                 _fo_[18],
                 _fo_[15],
                 _fo_[13],
                 _fo_[14],
                 _fo_[19],
                 _fo_[22],
                 _fo_[23],
                 _fo_[20],
                 _fo_[21],
                 _fo_[9],
                 _fo_[10]]},
       _b1_,
       _b3_,
       _b2_,
       _b0_,
       _cQ_,
       _cR_,
       _cS_,
       _cT_,
       _cU_,
       _bZ_,
       _b6_,
       _b7_,
       _cO_,
       _cP_,
       _cM_,
       _cN_,
       _cE_,
       _cF_,
       _cG_,
       _cH_,
       _cy_,
       _cz_,
       _cI_,
       _cJ_,
       _cA_,
       _cB_,
       _cK_,
       _cL_,
       _cC_,
       _cD_,
       _cw_,
       _cv_,
       _cu_,
       _ct_,
       _cx_,
       _cs_,
       _cr_,
       _cq_,
       _co_,
       _cp_,
       _cl_,
       _cj_,
       _ch_,
       _cn_,
       _cm_,
       _ck_,
       _ci_,
       _ca_,
       _b$_,
       _cb_,
       _b__,
       _b8_,
       _b9_,
       _cc_,
       _cf_,
       _cg_,
       _cd_,
       _ce_,
       _cV_,
       _b5_];
    caml_register_global(446,CairoMock,"CairoMock");
    var
     match$0=
      caml_call3
       (Bisect_Runtime[1],cst_src_JsOfOCairo_ml,389,point_definitions$0),
     cb$0=match$0[2],
     Error$0=caml_set_oo_id([248,cst_JsOfOCairo_Error,0]);
    caml_call1(cb$0,37);
    function status_to_string$0(param)
     {switch(param)
       {case 0:
         caml_call1(cb$0,0);
         return cst_cairo_restore_without_matching_cairo_save$0;
        case 1:
         caml_call1(cb$0,1);
         return cst_no_saved_group_to_pop_i_e_cairo_pop_group_without_matching_cairo_push_group$0;
        case 2:caml_call1(cb$0,2);return cst_no_current_point_defined$0;
        case 3:caml_call1(cb$0,3);return cst_invalid_matrix_not_invertible$0;
        case 4:
         caml_call1(cb$0,4);
         return cst_invalid_value_for_an_input_cairo_status_t$0;
        case 5:caml_call1(cb$0,5);return cst_NULL_pointer$0;
        case 6:caml_call1(cb$0,6);return cst_input_string_not_valid_UTF_8$0;
        case 7:caml_call1(cb$0,7);return cst_input_path_data_not_valid$0;
        case 8:
         caml_call1(cb$0,8);
         return cst_error_while_reading_from_input_stream$0;
        case 9:
         caml_call1(cb$0,9);return cst_error_while_writing_to_output_stream$0;
        case 10:
         caml_call1(cb$0,10);
         return cst_the_target_surface_has_been_finished$0;
        case 11:
         caml_call1(cb$0,11);
         return cst_the_surface_type_is_not_appropriate_for_the_operation$0;
        case 12:
         caml_call1(cb$0,12);
         return cst_the_pattern_type_is_not_appropriate_for_the_operation$0;
        case 13:
         caml_call1(cb$0,13);
         return cst_invalid_value_for_an_input_cairo_content_t$0;
        case 14:
         caml_call1(cb$0,14);
         return cst_invalid_value_for_an_input_cairo_format_t$0;
        case 15:
         caml_call1(cb$0,15);return cst_invalid_value_for_an_input_Visual$0;
        case 16:caml_call1(cb$0,16);return cst_file_not_found$0;
        case 17:
         caml_call1(cb$0,17);return cst_invalid_value_for_a_dash_setting$0;
        case 18:
         caml_call1(cb$0,18);return cst_invalid_value_for_a_DSC_comment$0;
        case 19:
         caml_call1(cb$0,19);return cst_invalid_index_passed_to_getter$0;
        case 20:
         caml_call1(cb$0,20);
         return cst_clip_region_not_representable_in_desired_format$0;
        case 21:
         caml_call1(cb$0,21);
         return cst_error_creating_or_writing_to_a_temporary_file$0;
        case 22:caml_call1(cb$0,22);return cst_invalid_value_for_stride$0;
        case 23:
         caml_call1(cb$0,23);
         return cst_the_font_type_is_not_appropriate_for_the_operation$0;
        case 24:caml_call1(cb$0,24);return cst_the_user_font_is_immutable$0;
        case 25:
         caml_call1(cb$0,25);
         return cst_error_occurred_in_a_user_font_callback_function$0;
        case 26:
         caml_call1(cb$0,26);
         return cst_negative_number_used_where_it_is_not_allowed$0;
        case 27:
         caml_call1(cb$0,27);
         return cst_input_clusters_do_not_represent_the_accompanying_text_and_glyph_arrays$0;
        case 28:
         caml_call1(cb$0,28);
         return cst_invalid_value_for_an_input_cairo_font_slant_t$0;
        case 29:
         caml_call1(cb$0,29);
         return cst_invalid_value_for_an_input_cairo_font_weight_t$0;
        case 30:
         caml_call1(cb$0,30);
         return cst_invalid_value_typically_too_big_for_the_size_of_the_input_surface_pattern_etc$0;
        case 31:
         caml_call1(cb$0,31);return cst_user_font_method_not_implemented$0;
        case 32:
         caml_call1(cb$0,32);
         return cst_the_device_type_is_not_appropriate_for_the_operation$0;
        case 33:
         caml_call1(cb$0,33);
         return cst_an_operation_to_the_device_caused_an_unspecified_error$0;
        case 34:
         caml_call1(cb$0,34);
         return cst_invalid_operation_during_mesh_pattern_construction$0;
        case 35:
         caml_call1(cb$0,35);return cst_the_target_device_has_been_finished$0;
        default:
         caml_call1(cb$0,36);
         return cst_CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID_used_but_no_CAIRO_MIME_TYPE_JBIG2_GLOBAL_data_provided$0}}
    caml_call1(cb$0,40);
    var Unavailable$0=caml_set_oo_id([248,cst_JsOfOCairo_Unavailable,0]);
    function _cW_(param){caml_call1(cb$0,41);return [254,1,0,0,1,0,0]}
    function _cX_(x,y){caml_call1(cb$0,42);return [254,1,0,0,1,x,y]}
    function _cY_(x,y){caml_call1(cb$0,43);return [254,x,0,0,y,0,0]}
    function _cZ_(angle)
     {caml_call1(cb$0,44);
      return [254,
              Math.cos(angle),
              Math.sin(angle),
              - Math.sin(angle),
              Math.cos(angle),
              0,
              0]}
    function _c0_(param)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6];
      caml_call1(cb$0,56);
      caml_call1(cb$0,54);
      var d=xx * yy - xy * yx;
      caml_call1(cb$0,55);
      if(d == 0){caml_call1(cb$0,52);throw [0,Error$0,3]}
      caml_call1(cb$0,53);
      caml_call1(cb$0,45);
      var xx$0=yy / d;
      caml_call1(cb$0,46);
      var xy$0=- xy / d;
      caml_call1(cb$0,47);
      var yx$0=- yx / d;
      caml_call1(cb$0,48);
      var yy$0=xx / d;
      caml_call1(cb$0,49);
      var x0$0=(xy * y0 - yy * x0) / d;
      caml_call1(cb$0,50);
      var y0$0=(yx * x0 - xx * y0) / d;
      caml_call1(cb$0,51);
      return [254,xx$0,yx$0,xy$0,yy$0,x0$0,y0$0]}
    function _c1_(param,_fm_)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6],
       xx$0=_fm_[1],
       yx$0=_fm_[2],
       xy$0=_fm_[3],
       yy$0=_fm_[4],
       x0$0=_fm_[5],
       y0$0=_fm_[6];
      caml_call1(cb$0,64);
      caml_call1(cb$0,57);
      var xx$1=xx * xx$0 + xy * yx$0;
      caml_call1(cb$0,58);
      var xy$1=xx * xy$0 + xy * yy$0;
      caml_call1(cb$0,59);
      var yx$1=yx * xx$0 + yy * yx$0;
      caml_call1(cb$0,60);
      var yy$1=yx * xy$0 + yy * yy$0;
      caml_call1(cb$0,61);
      var x0$1=xx * x0$0 + xy * y0$0 + x0;
      caml_call1(cb$0,62);
      var y0$1=yx * x0$0 + yy * y0$0 + y0;
      caml_call1(cb$0,63);
      return [254,xx$1,yx$1,xy$1,yy$1,x0$1,y0$1]}
    function _c2_(param,x,y)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6];
      caml_call1(cb$0,65);
      return [0,xx * x + xy * y + x0,yx * x + yy * y + y0]}
    function _c3_(param,dx,dy)
     {var xx=param[1],yx=param[2],xy=param[3],yy=param[4];
      caml_call1(cb$0,66);
      return [0,xx * dx + xy * dy,yx * dx + yy * dy]}
    function _c4_(m,param)
     {var
       xx=param[1],
       yx=param[2],
       xy=param[3],
       yy=param[4],
       x0=param[5],
       y0=param[6];
      caml_call1(cb$0,72);
      m[1] = xx;
      caml_call1(cb$0,71);
      m[3] = xy;
      caml_call1(cb$0,70);
      m[2] = yx;
      caml_call1(cb$0,69);
      m[4] = yy;
      caml_call1(cb$0,68);
      m[5] = x0;
      caml_call1(cb$0,67);
      m[6] = y0;
      return 0}
    function _c5_(m,x,y){caml_call1(cb$0,73);return _c4_(m,_c1_(m,_cY_(x,y)))}
    function _c6_(m,x,y){caml_call1(cb$0,74);return _c4_(m,_c1_(m,_cX_(x,y)))}
    function _c7_(m,angle)
     {caml_call1(cb$0,75);return _c4_(m,_c1_(m,_cZ_(angle)))}
    function _c8_(m){caml_call1(cb$0,76);return _c4_(m,_c0_(m))}
    caml_call1(cb$0,80);
    caml_call1(cb$0,81);
    var empty$0=0,_c9_=ListLabels[1];
    function _c__(xs,stop_point)
     {caml_call1(cb$0,90);
      caml_call1(cb$0,88);
      var param=[0,caml_call1(ListLabels[1],xs),stop_point];
      caml_call1(cb$0,89);
      var aux=function _fl_(_fk_){return _fl_.fun(_fk_)};
      caml_call1(cb$0,86);
      caml_update_dummy
       (aux,
        function(xxs)
         {if(xxs)
           {var xs=xxs[2],x=xxs[1];
            caml_call1(cb$0,85);
            var
             position_b=x[2][1],
             added_b=x[1],
             match=param[2],
             position_a=match[1],
             added_a=param[1];
            caml_call1(cb$0,79);
            var
             n=caml_float_compare(position_a,position_b),
             match$0=
              0 === n
               ?(caml_call1(cb$0,77),caml_int_compare(added_a,added_b))
               :(caml_call1(cb$0,78),n);
            return -1 === match$0
                    ?(caml_call1(cb$0,82),[0,param,xxs])
                    :(caml_call1(cb$0,83),[0,x,caml_call1(aux,xs)])}
          caml_call1(cb$0,84);
          return [0,param,0]});
      caml_call1(cb$0,87);
      return caml_call1(aux,xs)}
    function _c$_(xs)
     {caml_call1(cb$0,92);
      function _fj_(param)
       {var stop_point=param[2];caml_call1(cb$0,91);return stop_point}
      return caml_call2(ListLabels[12],_fj_,xs)}
    caml_call1(cb$0,97);
    var _db_=_c__(empty$0,_da_);
    caml_call1(cb$0,96);
    _c$_(_db_);
    function _dc_(r,g,b,a){caml_call1(cb$0,98);return [0,[0,[0,r,g,b,a]]]}
    function _dd_(r,g,b){caml_call1(cb$0,99);return _dc_(r,g,b,1)}
    function _de_(pattern)
     {caml_call1(cb$0,104);
      var _fi_=pattern[1];
      if(typeof _fi_ !== "number" && 0 === _fi_[0])
       {var color=_fi_[1];caml_call1(cb$0,100);return color}
      if(typeof _fi_ === "number")
       caml_call1(cb$0,103);
      else
       switch(_fi_[0])
        {case 0:break;
         case 1:caml_call1(cb$0,101);break;
         default:caml_call1(cb$0,102)}
      throw [0,Error$0,12]}
    function _df_(x0,y0,x1,y1)
     {caml_call1(cb$0,105);return [0,[1,[0,[0,x0,y0,x1,y1],empty$0]]]}
    function _dg_(pattern)
     {caml_call1(cb$0,110);
      var _fh_=pattern[1];
      if(typeof _fh_ !== "number" && 1 === _fh_[0])
       {var match=_fh_[1],points=match[1];caml_call1(cb$0,106);return points}
      if(typeof _fh_ === "number")
       caml_call1(cb$0,109);
      else
       switch(_fh_[0])
        {case 0:caml_call1(cb$0,107);break;
         case 1:break;
         default:caml_call1(cb$0,108)}
      throw [0,Error$0,12]}
    function _dh_(x0,y0,r0,x1,y1,r1)
     {caml_call1(cb$0,111);return [0,[2,[0,[0,x0,y0,r0,x1,y1,r1],empty$0]]]}
    function _di_(pattern)
     {caml_call1(cb$0,116);
      var _fg_=pattern[1];
      if(typeof _fg_ !== "number" && 2 === _fg_[0])
       {var match=_fg_[1],circles=match[1];
        caml_call1(cb$0,112);
        return circles}
      if(typeof _fg_ === "number")
       caml_call1(cb$0,115);
      else
       switch(_fg_[0])
        {case 0:caml_call1(cb$0,114);break;case 1:caml_call1(cb$0,113);break}
      throw [0,Error$0,12]}
    function _dj_(pattern,opt,r,g,b,a)
     {if(opt)var sth=opt[1],ofs=sth;else{caml_call1(cb$0,124);var ofs=0}
      caml_call1(cb$0,123);
      caml_call1(cb$0,121);
      var stop_point=[0,ofs,r,g,b,a];
      caml_call1(cb$0,122);
      var _fd_=pattern[1];
      if(typeof _fd_ === "number")
       {caml_call1(cb$0,120);return 0}
      else
       switch(_fd_[0])
        {case 0:caml_call1(cb$0,119);pattern[1] = 0;return 0;
         case 1:
          var gradient=_fd_[1];
          caml_call1(cb$0,117);
          var _fe_=_c__(gradient[2],stop_point);
          pattern[1] = [1,[0,gradient[1],_fe_]];
          return 0;
         default:
          var gradient$0=_fd_[1];
          caml_call1(cb$0,118);
          var _ff_=_c__(gradient$0[2],stop_point);
          pattern[1] = [2,[0,gradient$0[1],_ff_]];
          return 0}}
    function _dk_(pattern,ofs,r,g,b)
     {caml_call1(cb$0,125);return _dj_(pattern,ofs,r,g,b,1)}
    function _dl_(pattern)
     {caml_call1(cb$0,130);
      var _fc_=pattern[1];
      if(typeof _fc_ !== "number" && 0 !== _fc_[0])
       {var match=_fc_[1],stop_points=match[2];
        if(typeof _fc_ === "number")
         var switch$0=0;
        else
         switch(_fc_[0])
          {case 1:caml_call1(cb$0,126);var switch$0=1;break;
           case 2:caml_call1(cb$0,127);var switch$0=1;break;
           default:var switch$0=0}
        return caml_call1(_c9_,stop_points)}
      if(typeof _fc_ === "number")
       caml_call1(cb$0,129);
      else
       if(0 === _fc_[0])caml_call1(cb$0,128);
      throw [0,Error$0,12]}
    function _dm_(pattern,idx)
     {caml_call1(cb$0,135);
      var _fb_=pattern[1];
      if(typeof _fb_ !== "number" && 0 !== _fb_[0])
       {var match$0=_fb_[1],stop_points=match$0[2];
        if(typeof _fb_ === "number")
         var switch$0=0;
        else
         switch(_fb_[0])
          {case 1:caml_call1(cb$0,131);var switch$0=1;break;
           case 2:caml_call1(cb$0,132);var switch$0=1;break;
           default:var switch$0=0}
        caml_call1(cb$0,95);
        caml_call1(cb$0,93);
        var
         match=caml_call2(ListLabels[4],stop_points,idx),
         stop_point=match[2];
        caml_call1(cb$0,94);
        return stop_point}
      if(typeof _fb_ === "number")
       caml_call1(cb$0,134);
      else
       if(0 === _fb_[0])caml_call1(cb$0,133);
      throw [0,Error$0,12]}
    caml_call1(cb$0,149);
    function _dn_(param)
     {if(param[1] === Error$0)
       {var status=param[2];
        caml_call1(cb$0,147);
        switch(status)
         {case 0:caml_call1(cb$0,38);var _fa_=cst_INVALID_RESTORE$0;break;
          case 1:var _fa_=cst_INVALID_POP_GROUP$0;break;
          case 2:caml_call1(cb$0,39);var _fa_=cst_NO_CURRENT_POINT$0;break;
          case 3:var _fa_=cst_INVALID_MATRIX$0;break;
          case 4:var _fa_=cst_INVALID_STATUS$0;break;
          case 5:var _fa_=cst_NULL_POINTER$0;break;
          case 6:var _fa_=cst_INVALID_STRING$0;break;
          case 7:var _fa_=cst_INVALID_PATH_DATA$0;break;
          case 8:var _fa_=cst_READ_ERROR$0;break;
          case 9:var _fa_=cst_WRITE_ERROR$0;break;
          case 10:var _fa_=cst_SURFACE_FINISHED$0;break;
          case 11:var _fa_=cst_SURFACE_TYPE_MISMATCH$0;break;
          case 12:var _fa_=cst_PATTERN_TYPE_MISMATCH$0;break;
          case 13:var _fa_=cst_INVALID_CONTENT$0;break;
          case 14:var _fa_=cst_INVALID_FORMAT$0;break;
          case 15:var _fa_=cst_INVALID_VISUAL$0;break;
          case 16:var _fa_=cst_FILE_NOT_FOUND$0;break;
          case 17:var _fa_=cst_INVALID_DASH$0;break;
          case 18:var _fa_=cst_INVALID_DSC_COMMENT$0;break;
          case 19:var _fa_=cst_INVALID_INDEX$0;break;
          case 20:var _fa_=cst_CLIP_NOT_REPRESENTABLE$0;break;
          case 21:var _fa_=cst_TEMP_FILE_ERROR$0;break;
          case 22:var _fa_=cst_INVALID_STRIDE$0;break;
          case 23:var _fa_=cst_FONT_TYPE_MISMATCH$0;break;
          case 24:var _fa_=cst_USER_FONT_IMMUTABLE$0;break;
          case 25:var _fa_=cst_USER_FONT_ERROR$0;break;
          case 26:var _fa_=cst_NEGATIVE_COUNT$0;break;
          case 27:var _fa_=cst_INVALID_CLUSTERS$0;break;
          case 28:var _fa_=cst_INVALID_SLANT$0;break;
          case 29:var _fa_=cst_INVALID_WEIGHT$0;break;
          case 30:var _fa_=cst_INVALID_SIZE$0;break;
          case 31:var _fa_=cst_USER_FONT_NOT_IMPLEMENTED$0;break;
          case 32:var _fa_=cst_DEVICE_TYPE_MISMATCH$0;break;
          case 33:var _fa_=cst_DEVICE_ERROR$0;break;
          case 34:var _fa_=cst_INVALID_MESH_CONSTRUCTION$0;break;
          case 35:var _fa_=cst_DEVICE_FINISHED$0;break;
          default:var _fa_=cst_JBIG2_GLOBAL_MISSING$0}
        return [0,caml_call2(Printf[4],_do_,_fa_)]}
      caml_call1(cb$0,148);
      return 0}
    caml_call1(Printexc[8],_dn_);
    function _dq_(context)
     {caml_call1(cb$0,151);return caml_call1(ListLabels[2],context[2])}
    function _dr_(context,state)
     {caml_call1(cb$0,152);
      context[2] = [0,state,caml_call1(ListLabels[3],context[2])];
      return 0}
    function _ds_(context){caml_call1(cb$0,160);return _dq_(context)[1]}
    function _dt_(context){caml_call1(cb$0,162);return _dq_(context)[2]}
    function _du_(context){caml_call1(cb$0,166);return _dq_(context)[4]}
    function _dv_(context,param)
     {var y=param[2],x=param[1];
      caml_call1(cb$0,174);
      caml_call1(cb$0,172);
      var transformation=_ds_(context);
      caml_call1(cb$0,173);
      var _e$_=context[1];
      caml_call1(cb$0,139);
      var
       _e9_=0 === _e$_[1]?1:0,
       _e__=
        _e9_
         ?(caml_call1(cb$0,138),_e$_[1] = [0,_c2_(transformation,x,y)],0)
         :_e9_;
      return _e__}
    function _dw_(context)
     {caml_call1(cb$0,175);
      var _e8_=context[1];
      caml_call1(cb$0,142);
      _e8_[2] = _e8_[1];
      return 0}
    function _dx_(context)
     {caml_call1(cb$0,178);
      caml_call1(cb$0,176);
      var transformation=_ds_(context);
      caml_call1(cb$0,177);
      var _e7_=context[1];
      caml_call1(cb$0,146);
      var _e6_=_e7_[2];
      if(_e6_)
       {var match=_e6_[1],y=match[2],x=match[1];
        caml_call1(cb$0,145);
        return [0,_c2_(_c0_(transformation),x,y)]}
      caml_call1(cb$0,144);
      return 0}
    function _dy_(context,param)
     {var y=param[2],x=param[1];
      caml_call1(cb$0,181);
      caml_call1(cb$0,179);
      var transformation=_ds_(context);
      caml_call1(cb$0,180);
      var _e5_=context[1];
      caml_call1(cb$0,141);
      _e5_[2] = [0,_c2_(transformation,x,y)];
      return 0}
    function save(context)
     {caml_call1(cb$0,184);
      context[1].save();
      caml_call1(cb$0,183);
      var _e4_=context[2];
      caml_call1(cb$0,153);
      var _e3_=_e4_[2];
      _e4_[2] = [0,_dq_(_e4_),_e3_];
      return 0}
    function restore(context)
     {caml_call1(cb$0,186);
      context[1].restore();
      caml_call1(cb$0,185);
      var _e2_=context[2];
      caml_call1(cb$0,159);
      caml_call1(cb$0,157);
      var _e0_=_e2_[2];
      if(_e0_)
       {var _e1_=_e0_[2];
        if(_e1_)
         {caml_call1(cb$0,156);caml_call1(cb$0,158);_e2_[2] = _e1_;return 0}}
      if(_e0_){if(! _e0_[2])caml_call1(cb$0,155)}else caml_call1(cb$0,154);
      throw [0,Error$0,0]}
    function set_matrix(context,transformation)
     {var
       xx=transformation[1],
       yx=transformation[2],
       xy=transformation[3],
       yy=transformation[4],
       x0=transformation[5],
       y0=transformation[6];
      caml_call1(cb$0,188);
      context[1].setTransform(xx,yx,xy,yy,x0,y0);
      caml_call1(cb$0,187);
      var _eZ_=context[2];
      caml_call1(cb$0,161);
      var _eY_=_dq_(_eZ_);
      return _dr_(_eZ_,[0,transformation,_eY_[2],_eY_[3],_eY_[4]])}
    function get_matrix(context){caml_call1(cb$0,189);return _ds_(context[2])}
    function transform(context,m)
     {caml_call1(cb$0,190);
      return set_matrix(context,_c1_(_ds_(context[2]),m))}
    function scale(context,x,y)
     {caml_call1(cb$0,191);return transform(context,_cY_(x,y))}
    function translate(context,x,y)
     {caml_call1(cb$0,192);return transform(context,_cX_(x,y))}
    function rotate(context,angle)
     {caml_call1(cb$0,193);return transform(context,_cZ_(angle))}
    function identity_matrix(context)
     {caml_call1(cb$0,194);return set_matrix(context,_cW_(0))}
    function device_to_user(context,x,y)
     {caml_call1(cb$0,195);return _c2_(_c0_(_ds_(context[2])),x,y)}
    function device_to_user_distance(context,dx,dy)
     {caml_call1(cb$0,196);return _c3_(_c0_(_ds_(context[2])),dx,dy)}
    function user_to_device(context,x,y)
     {caml_call1(cb$0,197);return _c2_(_ds_(context[2]),x,y)}
    function user_to_device_distance(context,dx,dy)
     {caml_call1(cb$0,198);return _c3_(_ds_(context[2]),dx,dy)}
    function make_rel(context,dx,dy)
     {caml_call1(cb$0,201);
      var match=_dx_(context[2]);
      if(match)
       {var match$0=match[1],y=match$0[2],x=match$0[1];
        caml_call1(cb$0,200);
        return [0,x + dx,y + dy]}
      caml_call1(cb$0,199);
      throw [0,Error$0,2]}
    function move_to(context,x,y)
     {caml_call1(cb$0,204);
      context[1].moveTo(x,y);
      caml_call1(cb$0,203);
      var _eX_=context[2];
      caml_call1(cb$0,170);
      caml_call1(cb$0,168);
      var transformation=_ds_(_eX_);
      caml_call1(cb$0,169);
      var _eW_=_eX_[1];
      caml_call1(cb$0,137);
      _eW_[1] = [0,_c2_(transformation,x,y)];
      caml_call1(cb$0,202);
      return _dw_(context[2])}
    function rel_move_to(context,x,y)
     {caml_call1(cb$0,207);
      caml_call1(cb$0,205);
      var match=make_rel(context,x,y),y$0=match[2],x$0=match[1];
      caml_call1(cb$0,206);
      return move_to(context,x$0,y$0)}
    function line_to(context,x,y)
     {caml_call1(cb$0,210);
      context[1].lineTo(x,y);
      caml_call1(cb$0,209);
      _dv_(context[2],[0,x,y]);
      caml_call1(cb$0,208);
      return _dy_(context[2],[0,x,y])}
    function rel_line_to(context,x,y)
     {caml_call1(cb$0,213);
      caml_call1(cb$0,211);
      var match=make_rel(context,x,y),y$0=match[2],x$0=match[1];
      caml_call1(cb$0,212);
      return line_to(context,x$0,y$0)}
    function curve_to(context,x1,y1,x2,y2,x3,y3)
     {caml_call1(cb$0,216);
      context[1].bezierCurveTo(x1,y1,x2,y2,x3,y3);
      caml_call1(cb$0,215);
      _dv_(context[2],[0,x1,y1]);
      caml_call1(cb$0,214);
      return _dy_(context[2],[0,x3,y3])}
    function rel_curve_to(context,x1,y1,x2,y2,x3,y3)
     {caml_call1(cb$0,221);
      caml_call1(cb$0,217);
      var match=make_rel(context,x1,y1),_eS_=match[2],_eT_=match[1];
      caml_call1(cb$0,218);
      var match$0=make_rel(context,x2,y2),_eU_=match$0[2],_eV_=match$0[1];
      caml_call1(cb$0,219);
      var match$1=make_rel(context,x3,y3),y3$0=match$1[2],x3$0=match$1[1];
      caml_call1(cb$0,220);
      return curve_to(context,_eT_,_eS_,_eV_,_eU_,x3$0,y3$0)}
    function rectangle(context,x,y,w,h)
     {caml_call1(cb$0,223);
      _dy_(context[2],[0,x,y]);
      caml_call1(cb$0,222);
      return context[1].rect(x,y,w,h)}
    function arc(dir,context,x,y,r,a1,a2)
     {caml_call1(cb$0,226);
      context[1].arc(x,y,r,a1,a2,dir);
      caml_call1(cb$0,225);
      _dv_(context[2],[0,x + r * Math.cos(a1),y + r * Math.sin(a1)]);
      caml_call1(cb$0,224);
      return _dy_(context[2],[0,x + r * Math.cos(a2),y + r * Math.sin(a2)])}
    caml_call1(cb$0,227);
    var _dz_=Js[8];
    function arc$0(_eM_,_eN_,_eO_,_eP_,_eQ_,_eR_)
     {return arc(_dz_,_eM_,_eN_,_eO_,_eP_,_eQ_,_eR_)}
    caml_call1(cb$0,228);
    var _dA_=Js[7];
    function _dB_(_eG_,_eH_,_eI_,_eJ_,_eK_,_eL_)
     {return arc(_dA_,_eG_,_eH_,_eI_,_eJ_,_eK_,_eL_)}
    function _dC_(context)
     {caml_call1(cb$0,231);
      var match=_dx_(context[2]);
      if(match)
       {var match$0=match[1],y=match$0[2],x=match$0[1];
        caml_call1(cb$0,230);
        return [0,x,y]}
      caml_call1(cb$0,229);
      return _dD_}
    function _dE_(context)
     {caml_call1(cb$0,234);
      context[1].beginPath();
      caml_call1(cb$0,233);
      var _eE_=context[2];
      caml_call1(cb$0,171);
      var _eC_=_eE_[1];
      caml_call1(cb$0,140);
      _eC_[1] = 0;
      caml_call1(cb$0,232);
      var _eF_=context[2];
      caml_call1(cb$0,182);
      var _eD_=_eF_[1];
      caml_call1(cb$0,143);
      _eD_[2] = 0;
      return 0}
    var
     _dF_=
      [0,
       _dC_,
       _dE_,
       function(context)
        {caml_call1(cb$0,236);
         context[1].closePath();
         caml_call1(cb$0,235);
         return _dw_(context[2])}];
    function _dG_(context){caml_call1(cb$0,237);return context[1].stroke()}
    function _dH_(context)
     {caml_call1(cb$0,239);
      _dG_(context);
      caml_call1(cb$0,238);
      return caml_call1(_dF_[2],context)}
    function _dI_(context)
     {caml_call1(cb$0,242);
      var match=_du_(context[2]);
      return 0 === match
              ?(caml_call1(cb$0,240),context[1].fill())
              :(caml_call1(cb$0,241),context[1].fill("evenodd"))}
    function _dJ_(context)
     {caml_call1(cb$0,244);
      _dI_(context);
      caml_call1(cb$0,243);
      return caml_call1(_dF_[2],context)}
    function _dK_(context){caml_call1(cb$0,245);return context[1].clip()}
    function _dL_(context)
     {caml_call1(cb$0,247);
      _dK_(context);
      caml_call1(cb$0,246);
      return caml_call1(_dF_[2],context)}
    function _dM_(opt,context)
     {if(opt)var sth=opt[1],alpha=sth;else{caml_call1(cb$0,256);var alpha=1}
      caml_call1(cb$0,255);
      save(context);
      caml_call1(cb$0,254);
      context[1].globalAlpha = alpha;
      caml_call1(cb$0,253);
      identity_matrix(context);
      caml_call1(cb$0,252);
      caml_call1(cb$0,249);
      var width=context[1].canvas.width;
      caml_call1(cb$0,250);
      var height=context[1].canvas.height;
      caml_call1(cb$0,251);
      context[1].fillRect(0,0,width,height);
      caml_call1(cb$0,248);
      return restore(context)}
    function _dN_(context,width)
     {caml_call1(cb$0,257);return context[1].lineWidth = width}
    function _dO_(context){caml_call1(cb$0,258);return context[1].lineWidth}
    function _dP_(context,opt,dashes)
     {if(opt)var sth=opt[1],ofs=sth;else{caml_call1(cb$0,263);var ofs=0}
      caml_call1(cb$0,262);
      caml_call1(cb$0,260);
      var html=context[1];
      caml_call1(cb$0,261);
      html.lineDashOffset = ofs;
      caml_call1(cb$0,259);
      return html.setLineDash(runtime.caml_js_from_array(dashes))}
    function _dQ_(context)
     {caml_call1(cb$0,266);
      caml_call1(cb$0,264);
      var html=context[1];
      caml_call1(cb$0,265);
      var _eB_=html.lineDashOffset;
      return [0,runtime.caml_js_to_array(html.getLineDash()),_eB_]}
    function _dR_(context,fill_rule)
     {caml_call1(cb$0,267);
      var _eA_=context[2];
      caml_call1(cb$0,167);
      var _ez_=_dq_(_eA_);
      return _dr_(_eA_,[0,_ez_[1],_ez_[2],_ez_[3],fill_rule])}
    function _dS_(context){caml_call1(cb$0,268);return _du_(context[2])}
    function _dT_(context,cap)
     {caml_call1(cb$0,274);
      caml_call1(cb$0,272);
      switch(cap)
       {case 0:caml_call1(cb$0,269);var cap$0=cst_butt;break;
        case 1:caml_call1(cb$0,270);var cap$0=cst_round;break;
        default:caml_call1(cb$0,271);var cap$0=cst_square}
      caml_call1(cb$0,273);
      return context[1].lineCap = cap$0.toString()}
    function _dU_(context)
     {caml_call1(cb$0,278);
      var match=caml_js_to_string(context[1].lineCap);
      return caml_string_notequal(match,cst_round$0)
              ?caml_string_notequal(match,cst_square$0)
                ?(caml_call1(cb$0,277),0)
                :(caml_call1(cb$0,276),2)
              :(caml_call1(cb$0,275),1)}
    function _dV_(context,join)
     {caml_call1(cb$0,284);
      caml_call1(cb$0,282);
      switch(join)
       {case 0:caml_call1(cb$0,279);var join$0=cst_miter;break;
        case 1:caml_call1(cb$0,280);var join$0=cst_round$1;break;
        default:caml_call1(cb$0,281);var join$0=cst_bevel}
      caml_call1(cb$0,283);
      return context[1].lineJoin = join$0.toString()}
    function _dW_(context)
     {caml_call1(cb$0,288);
      var match=caml_js_to_string(context[1].lineJoin);
      return caml_string_notequal(match,cst_bevel$0)
              ?caml_string_notequal(match,cst_round$2)
                ?(caml_call1(cb$0,287),0)
                :(caml_call1(cb$0,285),1)
              :(caml_call1(cb$0,286),2)}
    function _dX_(context,l)
     {caml_call1(cb$0,289);return context[1].miterLimit = l}
    function _dY_(context){caml_call1(cb$0,290);return context[1].miterLimit}
    function _dZ_(context,operator)
     {caml_call1(cb$0,307);
      caml_call1(cb$0,305);
      switch(operator)
       {case 0:
         caml_call1(cb$0,291);
         var
          operator$0=
           caml_call1(Pervasives[2],cst_Unsupported_operator_CLEAR);
         break;
        case 1:
         caml_call1(cb$0,292);
         var
          operator$0=
           caml_call1(Pervasives[2],cst_Unsupported_operator_SOURCE);
         break;
        case 2:caml_call1(cb$0,293);var operator$0=cst_source_over;break;
        case 3:caml_call1(cb$0,295);var operator$0=cst_source_in;break;
        case 4:caml_call1(cb$0,296);var operator$0=cst_source_out;break;
        case 5:caml_call1(cb$0,294);var operator$0=cst_source_atop;break;
        case 6:
         caml_call1(cb$0,303);
         var
          operator$0=
           caml_call1(Pervasives[2],cst_Unsupported_operator_DEST);
         break;
        case 7:caml_call1(cb$0,297);var operator$0=cst_destination_over;break;
        case 8:caml_call1(cb$0,299);var operator$0=cst_destination_in;break;
        case 9:caml_call1(cb$0,300);var operator$0=cst_destination_out;break;
        case 10:
         caml_call1(cb$0,298);var operator$0=cst_destination_atop;break;
        case 11:caml_call1(cb$0,302);var operator$0=cst_xor;break;
        case 12:caml_call1(cb$0,301);var operator$0=cst_lighter;break;
        default:
         caml_call1(cb$0,304);
         var
          operator$0=
           caml_call1(Pervasives[2],cst_Unsupported_operator_SATURATE)}
      caml_call1(cb$0,306);
      return context[1].globalCompositeOperation = operator$0.toString()}
    function _d0_(context)
     {caml_call1(cb$0,321);
      var
       op=caml_js_to_string(context[1].globalCompositeOperation),
       switch$0=runtime.caml_string_compare(op,cst_over);
      if(0 <= switch$0)
       {if(! (0 < switch$0)){caml_call1(cb$0,308);return 2}
        if(! caml_string_notequal(op,cst_source_atop$0))
         {caml_call1(cb$0,311);return 5}
        if(! caml_string_notequal(op,cst_source_in$0))
         {caml_call1(cb$0,312);return 3}
        if(! caml_string_notequal(op,cst_source_out$0))
         {caml_call1(cb$0,313);return 4}
        if(! caml_string_notequal(op,cst_source_over$0))
         {caml_call1(cb$0,310);return 2}
        if(! caml_string_notequal(op,cst_xor$0))
         {caml_call1(cb$0,319);return 11}}
      else
       {if(! caml_string_notequal(op,cst_add)){caml_call1(cb$0,309);return 12}
        if(! caml_string_notequal(op,cst_destination_atop$0))
         {caml_call1(cb$0,315);return 10}
        if(! caml_string_notequal(op,cst_destination_in$0))
         {caml_call1(cb$0,316);return 8}
        if(! caml_string_notequal(op,cst_destination_out$0))
         {caml_call1(cb$0,317);return 9}
        if(! caml_string_notequal(op,cst_destination_over$0))
         {caml_call1(cb$0,314);return 7}
        if(! caml_string_notequal(op,cst_lighter$0))
         {caml_call1(cb$0,318);return 12}}
      caml_call1(cb$0,320);
      var _ey_=caml_call2(Printf[4],_d1_,op);
      return caml_call1(Pervasives[2],_ey_)}
    function _d2_(context,pattern)
     {caml_call1(cb$0,350);
      function convert(x)
       {caml_call1(cb$0,348);return caml_call1(Pervasives[20],255 * x | 0)}
      caml_call1(cb$0,349);
      function convert_rgba(r,g,b,a)
       {caml_call1(cb$0,346);
        var _ev_=convert(b),_ew_=convert(g),_ex_=convert(r);
        return caml_call5(Printf[4],_d3_,_ex_,_ew_,_ev_,a).toString()}
      caml_call1(cb$0,347);
      caml_call1(cb$0,344);
      var source=pattern[1];
      caml_call1(cb$0,345);
      var _eo_=context[2];
      caml_call1(cb$0,165);
      var _en_=_dq_(_eo_);
      _dr_(_eo_,[0,_en_[1],_en_[2],source,_en_[4]]);
      caml_call1(cb$0,343);
      if(typeof source === "number")
       {caml_call1(cb$0,342);return 0}
      else
       switch(source[0])
        {case 0:
          var match=source[1],a=match[4],b=match[3],g=match[2],r=match[1];
          caml_call1(cb$0,339);
          caml_call1(cb$0,323);
          var color=convert_rgba(r,g,b,a);
          caml_call1(cb$0,324);
          context[1].fillStyle = color;
          caml_call1(cb$0,322);
          return context[1].strokeStyle = color;
         case 1:
          var
           _ep_=source[1],
           stop_points=_ep_[2],
           match$0=_ep_[1],
           y1=match$0[4],
           x1=match$0[3],
           y0=match$0[2],
           x0=match$0[1];
          caml_call1(cb$0,340);
          caml_call1(cb$0,330);
          var gradient=context[1].createLinearGradient(x0,y0,x1,y1);
          caml_call1(cb$0,331);
          caml_call1(cb$0,326);
          var _eq_=_c$_(stop_points);
          caml_call1(cb$0,328);
          var
           _er_=
            function(param)
             {var
               a=param[5],
               b=param[4],
               g=param[3],
               r=param[2],
               position=param[1];
              caml_call1(cb$0,327);
              return gradient.addColorStop(position,convert_rgba(r,g,b,a))};
          caml_call1(caml_call1(ListLabels[10],_er_),_eq_);
          caml_call1(cb$0,329);
          context[1].fillStyle = gradient;
          caml_call1(cb$0,325);
          return context[1].strokeStyle = gradient;
         default:
          var
           _es_=source[1],
           stop_points$0=_es_[2],
           match$1=_es_[1],
           r1=match$1[6],
           y1$0=match$1[5],
           x1$0=match$1[4],
           r0=match$1[3],
           y0$0=match$1[2],
           x0$0=match$1[1];
          caml_call1(cb$0,341);
          caml_call1(cb$0,337);
          var
           gradient$0=
            context[1].createRadialGradient(x0$0,y0$0,r0,x1$0,y1$0,r1);
          caml_call1(cb$0,338);
          caml_call1(cb$0,333);
          var _et_=_c$_(stop_points$0);
          caml_call1(cb$0,335);
          var
           _eu_=
            function(param)
             {var
               a=param[5],
               b=param[4],
               g=param[3],
               r=param[2],
               position=param[1];
              caml_call1(cb$0,334);
              return gradient$0.addColorStop(position,convert_rgba(r,g,b,a))};
          caml_call1(caml_call1(ListLabels[10],_eu_),_et_);
          caml_call1(cb$0,336);
          context[1].fillStyle = gradient$0;
          caml_call1(cb$0,332);
          return context[1].strokeStyle = gradient$0}}
    function _d4_(context)
     {caml_call1(cb$0,351);
      var _em_=context[2];
      caml_call1(cb$0,164);
      return [0,_dq_(_em_)[3]]}
    function _d5_(context,r,g,b)
     {caml_call1(cb$0,352);return _d2_(context,_dd_(r,g,b))}
    function _d6_(context,r,g,b,a)
     {caml_call1(cb$0,353);return _d2_(context,_dc_(r,g,b,a))}
    function _d7_(context,font)
     {var family=font[4],size=font[3],weight=font[2],slant=font[1];
      caml_call1(cb$0,365);
      var _ek_=context[2];
      caml_call1(cb$0,163);
      var _ej_=_dq_(_ek_);
      _dr_(_ek_,[0,_ej_[1],font,_ej_[3],_ej_[4]]);
      caml_call1(cb$0,364);
      caml_call1(cb$0,361);
      switch(slant)
       {case 0:caml_call1(cb$0,356);var _el_=cst_normal;break;
        case 1:caml_call1(cb$0,357);var _el_=cst_italic;break;
        default:caml_call1(cb$0,358);var _el_=cst_oblique}
      caml_call1(cb$0,362);
      var
       font_weight=
        0 === weight
         ?(caml_call1(cb$0,359),cst_normal$0)
         :(caml_call1(cb$0,360),cst_bold);
      caml_call1(cb$0,363);
      caml_call1(cb$0,354);
      var font$0=caml_call5(Printf[4],_d8_,_el_,font_weight,size | 0,family);
      caml_call1(cb$0,355);
      return context[1].font = font$0.toString()}
    function _d9_(context,opt,_ei_,family)
     {if(opt)var sth=opt[1],slant=sth;else{caml_call1(cb$0,368);var slant=0}
      if(_ei_)
       var sth$0=_ei_[1],weight=sth$0;
      else
       {caml_call1(cb$0,367);var weight=0}
      caml_call1(cb$0,366);
      return _d7_(context,[0,slant,weight,_dt_(context[2])[3],family])}
    function _d__(context,size)
     {caml_call1(cb$0,369);
      var _eh_=_dt_(context[2]);
      return _d7_(context,[0,_eh_[1],_eh_[2],size,_eh_[4]])}
    function _d$_(context,s)
     {caml_call1(cb$0,374);
      caml_call1(cb$0,371);
      var match=caml_call1(_dF_[1],context),_ef_=match[2],_eg_=match[1];
      caml_call1(cb$0,372);
      var w=context[1].measureText(s.toString()).width;
      caml_call1(cb$0,373);
      _dy_(context[2],[0,_eg_ + w,_ef_]);
      caml_call1(cb$0,370);
      return context[1].fillText(s.toString(),_eg_,_ef_)}
    function _ea_(context)
     {caml_call1(cb$0,377);
      caml_call1(cb$0,375);
      var match=_dt_(context[2]),size=match[3];
      caml_call1(cb$0,376);
      return [254,size,size / 4,0,2 * size,0]}
    function _eb_(context,s)
     {caml_call1(cb$0,381);
      caml_call1(cb$0,378);
      var match=_dt_(context[2]),_ee_=match[3];
      caml_call1(cb$0,379);
      var w=context[1].measureText(s.toString()).width;
      caml_call1(cb$0,380);
      return [254,0,0,w,_ee_,w,0]}
    var
     JsOfOCairo=
      [0,
       Error$0,
       status_to_string$0,
       Unavailable$0,
       [0,_cW_,_cX_,_cY_,_cZ_,_c6_,_c5_,_c7_,_c8_,_c1_,_c3_,_c2_],
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       [0,_dk_,_dj_,_dl_,_dm_,_dd_,_dc_,_de_,_df_,_dg_,_dh_,_di_],
       save,
       restore,
       _d5_,
       _d6_,
       _d2_,
       _d4_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dN_,
       _dO_,
       _dX_,
       _dY_,
       _dP_,
       _dQ_,
       _dZ_,
       _d0_,
       _dR_,
       _dS_,
       _dL_,
       _dK_,
       _dJ_,
       _dI_,
       _dM_,
       _dH_,
       _dG_,
       _dF_,
       arc$0,
       _dB_,
       curve_to,
       line_to,
       move_to,
       rectangle,
       rel_curve_to,
       rel_line_to,
       rel_move_to,
       translate,
       scale,
       rotate,
       transform,
       set_matrix,
       get_matrix,
       identity_matrix,
       user_to_device,
       user_to_device_distance,
       device_to_user,
       device_to_user_distance,
       function(canvas)
        {caml_call1(cb$0,388);
         caml_call1(cb$0,385);
         var html=canvas.getContext(Dom_html[1]);
         caml_call1(cb$0,386);
         caml_call1(cb$0,150);
         var _ec_=_dd_(0,0,0)[1],_ed_=[0,[0,_cW_(0),_dp_,_ec_,0],0];
         caml_call1(cb$0,136);
         var local=[0,[0,0,0],_ed_];
         caml_call1(cb$0,387);
         caml_call1(cb$0,383);
         var context=[0,html,local];
         caml_call1(cb$0,384);
         _dN_(context,2);
         caml_call1(cb$0,382);
         return context}];
    caml_register_global(450,JsOfOCairo,"JsOfOCairo");
    return}
  (function(){return this}()));


//# 1 "Tests/Tests.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_EVEN_ODD=caml_new_string("EVEN_ODD"),
     cst_WINDING=caml_new_string("WINDING"),
     cst_BUTT=caml_new_string("BUTT"),
     cst_ROUND=caml_new_string("ROUND"),
     cst_SQUARE=caml_new_string("SQUARE"),
     cst_JOIN_MITER=caml_new_string("JOIN_MITER"),
     cst_JOIN_ROUND=caml_new_string("JOIN_ROUND"),
     cst_JOIN_BEVEL=caml_new_string("JOIN_BEVEL"),
     cst_CLEAR=caml_new_string("CLEAR"),
     cst_SOURCE=caml_new_string("SOURCE"),
     cst_OVER=caml_new_string("OVER"),
     cst_IN=caml_new_string("IN"),
     cst_OUT=caml_new_string("OUT"),
     cst_ATOP=caml_new_string("ATOP"),
     cst_DEST=caml_new_string("DEST"),
     cst_DEST_OVER=caml_new_string("DEST_OVER"),
     cst_DEST_IN=caml_new_string("DEST_IN"),
     cst_DEST_OUT=caml_new_string("DEST_OUT"),
     cst_DEST_ATOP=caml_new_string("DEST_ATOP"),
     cst_XOR=caml_new_string("XOR"),
     cst_ADD=caml_new_string("ADD"),
     cst_SATURATE=caml_new_string("SATURATE"),
     cst_Not_found=caml_new_string("Not_found"),
     cst_Hello=caml_new_string("Hello"),
     partial=[11,caml_new_string(", "),[8,0,0,0,[12,41,0]]],
     partial$0=[12,41,0],
     partial$1=[11,caml_new_string("; y0="),[8,0,0,0,[12,125,0]]],
     cst_JsOfOCairo=caml_new_string("JsOfOCairo"),
     cst_Cairo=caml_new_string("Cairo"),
     cst_CairoMock=caml_new_string("CairoMock"),
     cst_create_radial_get_linear_points=
      caml_new_string("create_radial, get_linear_points"),
     cst_create_radial_get_rgba=caml_new_string("create_radial, get_rgba"),
     cst_create_linear_get_radial_circles=
      caml_new_string("create_linear, get_radial_circles"),
     cst_create_linear_get_rgba=caml_new_string("create_linear, get_rgba"),
     cst_create_rgb_get_color_stop_rgba=
      caml_new_string("create_rgb, get_color_stop_rgba"),
     cst_create_rgb_get_color_stop_count=
      caml_new_string("create_rgb, get_color_stop_count"),
     cst_create_rgb_get_radial_circles=
      caml_new_string("create_rgb, get_radial_circles"),
     cst_create_rgb_get_linear_points=
      caml_new_string("create_rgb, get_linear_points"),
     cst_mismatch=caml_new_string("mismatch"),
     cst_create_rgb_add_color_stop_rgb=
      caml_new_string("create_rgb, add_color_stop_rgb"),
     cst_multiple_color_stops=caml_new_string("multiple color stops"),
     cst_create_radial_add_color_stop_rgb_get_color_stop_count_get_color_stop_rgba=
      caml_new_string
       ("create_radial, add_color_stop_rgb, get_color_stop_count, get_color_stop_rgba"),
     cst_create_linear_add_color_stop_rgba_get_color_stop_count_get_color_stop_rgba=
      caml_new_string
       ("create_linear, add_color_stop_rgba, get_color_stop_count, get_color_stop_rgba"),
     cst_create_radial_get_radial_circles=
      caml_new_string("create_radial, get_radial_circles"),
     cst_create_linear_get_linear_points=
      caml_new_string("create_linear, get_linear_points"),
     cst_set_source_rgba_get_rgba=caml_new_string("set_source_rgba, get_rgba"),
     cst_create_rgba_get_rgba=caml_new_string("create_rgba, get_rgba"),
     cst_set_source_rgb_get_rgba=caml_new_string("set_source_rgb, get_rgba"),
     cst_create_rgb_get_rgba=caml_new_string("create_rgb, get_rgba"),
     cst_patterns=caml_new_string("patterns"),
     cst_show_text=caml_new_string("show_text"),
     cst_clip_preserve=caml_new_string("clip_preserve"),
     cst_fill_preserve=caml_new_string("fill_preserve"),
     cst_stroke_preserve=caml_new_string("stroke_preserve"),
     cst_Path_close=caml_new_string("Path.close"),
     cst_rel_line_to=caml_new_string("rel_line_to"),
     cst_curve_to=caml_new_string("curve_to"),
     cst_pi_2=caml_new_string("pi / 2"),
     cst_pi_4=caml_new_string("pi / 4"),
     cst_pi_6=caml_new_string("pi / 6"),
     cst_0=caml_new_string("0"),
     cst_arc_negative=caml_new_string("arc_negative"),
     cst_3_pi=caml_new_string("3 pi"),
     cst_pi_2$0=caml_new_string("pi / 2"),
     cst_pi_4$0=caml_new_string("pi / 4"),
     cst_pi_6$0=caml_new_string("pi / 6"),
     cst_0$0=caml_new_string("0"),
     cst_arc=caml_new_string("arc"),
     cst_rectangle=caml_new_string("rectangle"),
     cst_rel_line_to$0=caml_new_string("rel_line_to"),
     cst_line_to=caml_new_string("line_to"),
     cst_rel_move_to=caml_new_string("rel_move_to"),
     cst_save_scale_move_to_restore=
      caml_new_string("save, scale, move_to, restore"),
     cst_save_move_to_restore=caml_new_string("save, move_to, restore"),
     cst_move_to_paint=caml_new_string("move_to, paint"),
     cst_paint=caml_new_string("paint"),
     cst_move_to=caml_new_string("move_to"),
     cst_no_op=caml_new_string("no-op"),
     cst_current_point=caml_new_string("current point"),
     cst_clip=caml_new_string("clip"),
     cst_fill=caml_new_string("fill"),
     cst_stroke=caml_new_string("stroke"),
     cst_Path_clear=caml_new_string("Path.clear"),
     cst_rel_curve_to=caml_new_string("rel_curve_to"),
     cst_rel_line_to$1=caml_new_string("rel_line_to"),
     cst_rel_move_to$0=caml_new_string("rel_move_to"),
     cst_no_current_point=caml_new_string("no current point"),
     cst_invalid_restore=caml_new_string("invalid restore"),
     cst_coordinates_transformation=
      caml_new_string("coordinates transformation"),
     cst_rotate=caml_new_string("rotate"),
     cst_translate=caml_new_string("translate"),
     cst_scale=caml_new_string("scale"),
     cst_invertible=caml_new_string("invertible"),
     cst_non_invertible=caml_new_string("non invertible"),
     cst_invert=caml_new_string("invert"),
     cst_init_rotate=caml_new_string("init_rotate"),
     cst_init_scale=caml_new_string("init_scale"),
     cst_init_translate=caml_new_string("init_translate"),
     cst_init_identity=caml_new_string("init_identity"),
     cst_matrix=caml_new_string("matrix"),
     cst_transform=caml_new_string("transform"),
     cst_set_matrix=caml_new_string("set_matrix"),
     cst_rotate$0=caml_new_string("rotate"),
     cst_scale$0=caml_new_string("scale"),
     cst_translate$0=caml_new_string("translate"),
     cst_transformations=caml_new_string("transformations"),
     cst_Not_Cairo=caml_new_string("Not Cairo"),
     cst_Cairo_Error=caml_new_string("Cairo Error"),
     cst_exceptions=caml_new_string("exceptions"),
     cst_CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID_used_but_no_CAIRO_MIME_TYPE_JBIG2_GLOBAL_data_provided=
      caml_new_string
       ("CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID used but no CAIRO_MIME_TYPE_JBIG2_GLOBAL data provided"),
     cst_JBIG2_GLOBAL_MISSING=caml_new_string("JBIG2_GLOBAL_MISSING"),
     cst_the_target_device_has_been_finished=
      caml_new_string("the target device has been finished"),
     cst_DEVICE_FINISHED=caml_new_string("DEVICE_FINISHED"),
     cst_invalid_operation_during_mesh_pattern_construction=
      caml_new_string("invalid operation during mesh pattern construction"),
     cst_INVALID_MESH_CONSTRUCTION=
      caml_new_string("INVALID_MESH_CONSTRUCTION"),
     cst_an_operation_to_the_device_caused_an_unspecified_error=
      caml_new_string
       ("an operation to the device caused an unspecified error"),
     cst_DEVICE_ERROR=caml_new_string("DEVICE_ERROR"),
     cst_the_device_type_is_not_appropriate_for_the_operation=
      caml_new_string("the device type is not appropriate for the operation"),
     cst_DEVICE_TYPE_MISMATCH=caml_new_string("DEVICE_TYPE_MISMATCH"),
     cst_user_font_method_not_implemented=
      caml_new_string("user-font method not implemented"),
     cst_USER_FONT_NOT_IMPLEMENTED=
      caml_new_string("USER_FONT_NOT_IMPLEMENTED"),
     cst_invalid_value_typically_too_big_for_the_size_of_the_input_surface_pattern_etc=
      caml_new_string
       ("invalid value (typically too big) for the size of the input (surface, pattern, etc.)"),
     cst_INVALID_SIZE=caml_new_string("INVALID_SIZE"),
     cst_invalid_value_for_an_input_cairo_font_weight_t=
      caml_new_string("invalid value for an input cairo_font_weight_t"),
     cst_INVALID_WEIGHT=caml_new_string("INVALID_WEIGHT"),
     cst_invalid_value_for_an_input_cairo_font_slant_t=
      caml_new_string("invalid value for an input cairo_font_slant_t"),
     cst_INVALID_SLANT=caml_new_string("INVALID_SLANT"),
     cst_input_clusters_do_not_represent_the_accompanying_text_and_glyph_arrays=
      caml_new_string
       ("input clusters do not represent the accompanying text and glyph arrays"),
     cst_INVALID_CLUSTERS=caml_new_string("INVALID_CLUSTERS"),
     cst_negative_number_used_where_it_is_not_allowed=
      caml_new_string("negative number used where it is not allowed"),
     cst_NEGATIVE_COUNT=caml_new_string("NEGATIVE_COUNT"),
     cst_error_occurred_in_a_user_font_callback_function=
      caml_new_string("error occurred in a user-font callback function"),
     cst_USER_FONT_ERROR=caml_new_string("USER_FONT_ERROR"),
     cst_the_user_font_is_immutable=
      caml_new_string("the user-font is immutable"),
     cst_USER_FONT_IMMUTABLE=caml_new_string("USER_FONT_IMMUTABLE"),
     cst_the_font_type_is_not_appropriate_for_the_operation=
      caml_new_string("the font type is not appropriate for the operation"),
     cst_FONT_TYPE_MISMATCH=caml_new_string("FONT_TYPE_MISMATCH"),
     cst_invalid_value_for_stride=caml_new_string("invalid value for stride"),
     cst_INVALID_STRIDE=caml_new_string("INVALID_STRIDE"),
     cst_error_creating_or_writing_to_a_temporary_file=
      caml_new_string("error creating or writing to a temporary file"),
     cst_TEMP_FILE_ERROR=caml_new_string("TEMP_FILE_ERROR"),
     cst_clip_region_not_representable_in_desired_format=
      caml_new_string("clip region not representable in desired format"),
     cst_CLIP_NOT_REPRESENTABLE=caml_new_string("CLIP_NOT_REPRESENTABLE"),
     cst_invalid_index_passed_to_getter=
      caml_new_string("invalid index passed to getter"),
     cst_INVALID_INDEX=caml_new_string("INVALID_INDEX"),
     cst_invalid_value_for_a_DSC_comment=
      caml_new_string("invalid value for a DSC comment"),
     cst_INVALID_DSC_COMMENT=caml_new_string("INVALID_DSC_COMMENT"),
     cst_invalid_value_for_a_dash_setting=
      caml_new_string("invalid value for a dash setting"),
     cst_INVALID_DASH=caml_new_string("INVALID_DASH"),
     cst_file_not_found=caml_new_string("file not found"),
     cst_FILE_NOT_FOUND=caml_new_string("FILE_NOT_FOUND"),
     cst_invalid_value_for_an_input_Visual=
      caml_new_string("invalid value for an input Visual*"),
     cst_INVALID_VISUAL=caml_new_string("INVALID_VISUAL"),
     cst_invalid_value_for_an_input_cairo_format_t=
      caml_new_string("invalid value for an input cairo_format_t"),
     cst_INVALID_FORMAT=caml_new_string("INVALID_FORMAT"),
     cst_invalid_value_for_an_input_cairo_content_t=
      caml_new_string("invalid value for an input cairo_content_t"),
     cst_INVALID_CONTENT=caml_new_string("INVALID_CONTENT"),
     cst_the_pattern_type_is_not_appropriate_for_the_operation=
      caml_new_string("the pattern type is not appropriate for the operation"),
     cst_PATTERN_TYPE_MISMATCH=caml_new_string("PATTERN_TYPE_MISMATCH"),
     cst_the_surface_type_is_not_appropriate_for_the_operation=
      caml_new_string("the surface type is not appropriate for the operation"),
     cst_SURFACE_TYPE_MISMATCH=caml_new_string("SURFACE_TYPE_MISMATCH"),
     cst_the_target_surface_has_been_finished=
      caml_new_string("the target surface has been finished"),
     cst_SURFACE_FINISHED=caml_new_string("SURFACE_FINISHED"),
     cst_error_while_writing_to_output_stream=
      caml_new_string("error while writing to output stream"),
     cst_WRITE_ERROR=caml_new_string("WRITE_ERROR"),
     cst_error_while_reading_from_input_stream=
      caml_new_string("error while reading from input stream"),
     cst_READ_ERROR=caml_new_string("READ_ERROR"),
     cst_input_path_data_not_valid=
      caml_new_string("input path data not valid"),
     cst_INVALID_PATH_DATA=caml_new_string("INVALID_PATH_DATA"),
     cst_input_string_not_valid_UTF_8=
      caml_new_string("input string not valid UTF-8"),
     cst_INVALID_STRING=caml_new_string("INVALID_STRING"),
     cst_NULL_pointer=caml_new_string("NULL pointer"),
     cst_NULL_POINTER=caml_new_string("NULL_POINTER"),
     cst_invalid_value_for_an_input_cairo_status_t=
      caml_new_string("invalid value for an input cairo_status_t"),
     cst_INVALID_STATUS=caml_new_string("INVALID_STATUS"),
     cst_invalid_matrix_not_invertible=
      caml_new_string("invalid matrix (not invertible)"),
     cst_INVALID_MATRIX=caml_new_string("INVALID_MATRIX"),
     cst_no_current_point_defined=caml_new_string("no current point defined"),
     cst_NO_CURRENT_POINT=caml_new_string("NO_CURRENT_POINT"),
     cst_no_saved_group_to_pop_i_e_cairo_pop_group_without_matching_cairo_push_group=
      caml_new_string
       ("no saved group to pop, i.e. cairo_pop_group() without matching cairo_push_group()"),
     cst_INVALID_POP_GROUP=caml_new_string("INVALID_POP_GROUP"),
     cst_cairo_restore_without_matching_cairo_save=
      caml_new_string("cairo_restore() without matching cairo_save()"),
     cst_INVALID_RESTORE=caml_new_string("INVALID_RESTORE"),
     cst_status_to_string=caml_new_string("status_to_string"),
     cst_source=caml_new_string("source"),
     cst_offset=caml_new_string("offset"),
     cst_dashes=caml_new_string("dashes"),
     cst_dash=caml_new_string("dash"),
     cst_operator=caml_new_string("operator"),
     cst_line_join=caml_new_string("line_join"),
     cst_line_cap=caml_new_string("line_cap"),
     cst_fill_rule=caml_new_string("fill_rule"),
     cst_miter_limit=caml_new_string("miter_limit"),
     cst_line_width=caml_new_string("line_width"),
     cst_saved_and_restored_settings=
      caml_new_string("saved-and-restored settings"),
     point_definitions=
      caml_new_string
       ("\x84\x95\xa6\xbe\0\0\x05\x96\0\0\0\xe8\0\0\x03\x9d\0\0\x03\x9d\b\0\x03\x9c\0\xa0\x01\x01!B\xa0\x01\x01<@\xa0\x01\x01\x9dA\xa0\x01\x01\xd1K\xa0\x01\x01\xfeI\xa0\x01\x02\bH\xa0\x01\x02+G\xa0\x01\x02NF\xa0\x01\x02qE\xa0\x01\x02\x94D\xa0\x01\x02\xb7C\xa0\x01\x03|J\xa0\x01\x03\xb4P\xa0\x01\x03\xd8N\xa0\x01\x03\xd9M\xa0\x01\x03\xfdL\xa0\x01\x04\x82O\xa0\x01\x04\xb6R\xa0\x01\x05'Q\xa0\x01\x05YT\xa0\x01\x05\xd3S\xa0\x01\x06\x05V\xa0\x01\x06\x88U\xa0\x01\x06\xa7\x01\0\xe6\xa0\x01\x07Mp\xa0\x01\x07qn\xa0\x01\x07\x8ao\xa0\x01\x07\xc0m\xa0\x01\x07\xf8l\xa0\x01\b\x1dk\xa0\x01\b;j\xa0\x01\bki\xa0\x01\b\x81h\xa0\x01\b\xb1g\xa0\x01\b\xd5f\xa0\x01\t\x0be\xa0\x01\t$d\xa0\x01\tnq\xa0\x01\n5W\xa0\x01\n\xd7X\xa0\x01\x0bAY\xa0\x01\x0b\xf6Z\xa0\x01\f][\xa0\x01\r0\\\xa0\x01\r\xa9]\xa0\x01\x13#^\xa0\x01\x13K`\xa0\x01\x13Y_\xa0\x01\x13\xcea\xa0\x01\x13\xfdc\xa0\x01\x14\rb\xa0\x01\x14\xf8r\xa0\x01\x15]s\xa0\x01$\xd3\0H\xa0\x01%\x07\0I\xa0\x01%*\0F\xa0\x01%N\0D\xa0\x01%g\0E\xa0\x01%\xa3\0C\xa0\x01%\xb4\0B\xa0\x01%\xe7\0A\xa0\x01%\xfb\0@\xa0\x01&.\x7f\xa0\x01&M~\xa0\x01&\x89}\xa0\x01&\xa0|\xa0\x01&\xe3\0G\xa0\x01'\bt\xa0\x01'fu\xa0\x01'\xc1v\xa0\x01'\xe2w\xa0\x01'\xf7x\xa0\x01(Hy\xa0\x01(\xd0{\xa0\x01(\xdfz\xa0\x01,c\0J\xa0\x01,\x9d\0K\xa0\x01,\xf8\0M\xa0\x01-0\0N\xa0\x01-K\0L\xa0\x01-\xd9\0P\xa0\x01.\x0f\0Q\xa0\x01.-\0O\xa0\x01.\xab\0S\xa0\x01.\xe1\0T\xa0\x01/\x03\0R\xa0\x01/}\0X\xa0\x01/\xb3\0Y\xa0\x01/\xda\0W\xa0\x01/\xe2\0U\xa0\x01/\xfe\0V\xa0\x010\xbf\0`\xa0\x010\xd9\0a\xa0\x011\r\0b\xa0\x011%\0_\xa0\x011h\0^\xa0\x011\xb5\0]\xa0\x011\xf9\0\\\xa0\x012F\0[\xa0\x012\x90\0Z\xa0\x013\x18\0c\xa0\x013-\0d\xa0\x013\xba\0y\xa0\x013\xde\0w\xa0\x013\xf7\0x\xa0\x014T\0z\xa0\x014{\0e\xa0\x014\xb6\0f\xa0\x014\xf2\0g\xa0\x0159\0j\xa0\x015J\0i\xa0\x015X\0h\xa0\x015\x8e\0n\xa0\x015\x9f\0m\xa0\x015\xb0\0l\xa0\x015\xba\0k\xa0\x015\xee\0r\xa0\x015\xff\0q\xa0\x016\x10\0p\xa0\x016\x18\0o\xa0\x016L\0v\xa0\x016]\0u\xa0\x016n\0t\xa0\x016v\0s\xa0\x016\xdc\x01\0\xae\xa0\x017\0\x01\0\xac\xa0\x017\x19\x01\0\xad\xa0\x017*\x01\0\xab\xa0\x017g\x01\0\xaf\xa0\x017\xd1\x01\0\xa9\xa0\x018\x16\x01\0\xaa\xa0\x0187\0{\xa0\x018f\0|\xa0\x018\xce\0~\xa0\x018\xdf\0}\xa0\x0198\x01\0\x81\xa0\x019L\x01\0\x80\xa0\x019i\0\x7f\xa0\x019\xe1\x01\0\x85\xa0\x019\xf5\x01\0\x84\xa0\x01:\x10\x01\0\x83\xa0\x01:-\x01\0\x82\xa0\x01:}\x01\0\x87\xa0\x01:\x8e\x01\0\x86\xa0\x01:\xce\x01\0\x88\xa0\x01;\x0e\x01\0\x8a\xa0\x01;\x1f\x01\0\x89\xa0\x01;a\x01\0\x8b\xa0\x01;\xbb\x01\0\x8c\xa0\x01<\x0b\x01\0\x8d\xa0\x01<\x8e\x01\0\x8e\xa0\x01=\x1c\x01\0\x8f\xa0\x01=u\x01\0\x90\xa0\x01=\xfc\x01\0\x91\xa0\x01>U\x01\0\x92\xa0\x01>\xe1\x01\0\x93\xa0\x01?x\x01\0\x94\xa0\x01?\xe7\x01\0\x95\xa0\x01@4\x01\0\x97\xa0\x01@E\x01\0\x96\xa0\x01@\x95\x01\0\x9b\xa0\x01@\xa6\x01\0\x9a\xa0\x01@\xb7\x01\0\x99\xa0\x01@\xc8\x01\0\x98\xa0\x01A\t\x01\0\x9e\xa0\x01A\x1a\x01\0\x9d\xa0\x01A+\x01\0\x9c\xa0\x01Ao\x01\0\xa1\xa0\x01A\x80\x01\0\xa0\xa0\x01A\x91\x01\0\x9f\xa0\x01A\xd3\x01\0\xa4\xa0\x01A\xe4\x01\0\xa3\xa0\x01A\xf5\x01\0\xa2\xa0\x01B4\x01\0\xa6\xa0\x01BE\x01\0\xa5\xa0\x01Bs\x01\0\xa8\xa0\x01B\xa2\x01\0\xa7\xa0\x01C,\x01\0\xb0\xa0\x01CN\x01\0\xb1\xa0\x01C\xd5\x01\0\xb5\xa0\x01C\xec\x01\0\xb6\xa0\x01D\x14\x01\0\xb4\xa0\x01D\x1c\x01\0\xb2\xa0\x01D6\x01\0\xb3\xa0\x01D\xb8\x01\0\xb7\xa0\x01D\xdf\x01\0\xb8\xa0\x01Eh\x01\0\xbc\xa0\x01E\x7f\x01\0\xbd\xa0\x01E\xac\x01\0\xbb\xa0\x01E\xb4\x01\0\xb9\xa0\x01E\xce\x01\0\xba\xa0\x01F\\\x01\0\xbe\xa0\x01F\x91\x01\0\xbf\xa0\x01G%\x01\0\xc0\xa0\x01Gh\x01\0\xc1\xa0\x01H1\x01\0\xc4\xa0\x01Hf\x01\0\xc5\xa0\x01H\x9e\x01\0\xc3\xa0\x01H\xd6\x01\0\xc2\xa0\x01I\xa7\x01\0\xc8\xa0\x01I\xea\x01\0\xc9\xa0\x01J\x14\x01\0\xc7\xa0\x01JL\x01\0\xc6\xa0\x01J\xe3\x01\0\xd2\xa0\x01K\x18\x01\0\xd3\xa0\x01KK\x01\0\xd1\xa0\x01K~\x01\0\xd0\xa0\x01K\xb4\x01\0\xcf\xa0\x01K\xe7\x01\0\xce\xa0\x01L\x1f\x01\0\xcd\xa0\x01L~\x01\0\xcc\xa0\x01L\xdd\x01\0\xcb\xa0\x01M?\x01\0\xca\xa0\x01M\xe3\x01\0\xdd\xa0\x01M\xfa\x01\0\xde\xa0\x01N+\x01\0\xdc\xa0\x01N3\x01\0\xda\xa0\x01N\xcd\x01\0\xdb\xa0\x01O\0\x01\0\xd9\xa0\x01O3\x01\0\xd8\xa0\x01O\x89\x01\0\xd7\xa0\x01O\xeb\x01\0\xd6\xa0\x01PJ\x01\0\xd5\xa0\x01P\xaa\x01\0\xd4\xa0\x01QQ\x01\0\xe4\xa0\x01Qw\x01\0\xe2\xa0\x01Q\xb0\x01\0\xe3\xa0\x01Q\xce\x01\0\xe1\xa0\x01Q\xd6\x01\0\xdf\xa0\x01Q\xf4\x01\0\xe0\xa0\x01RZ\x01\0\xe5"),
     cst_tst_Tests_Universal_ml=caml_new_string("tst/Tests/Universal.ml"),
     cst_foo_bar$3=caml_new_string("foo-bar"),
     cst_foo_bar$2=caml_new_string("foo-bar"),
     cst_foo_bar$1=caml_new_string("foo-bar"),
     cst_foo_bar$0=caml_new_string("foo-bar"),
     cst_foo_bar=caml_new_string("foo-bar"),
     cst_flibidiboo=caml_new_string("flibidiboo"),
     cst_abcd=caml_new_string("abcd"),
     cst_JsOfOCairo$0=caml_new_string("JsOfOCairo"),
     cst_Cairo$0=caml_new_string("Cairo"),
     cst_CairoMock$0=caml_new_string("CairoMock"),
     partial$2=[12,125,0],
     cst_font_extents=caml_new_string("font_extents"),
     partial$3=[11,caml_new_string("; y_advance="),[8,0,0,0,[12,125,0]]],
     cst_text_extents=caml_new_string("text_extents"),
     cst_show_text$0=caml_new_string("show_text"),
     cst_select_font_face_Italic_Bold=
      caml_new_string("select_font_face Italic Bold"),
     cst_select_font_face_Normal=caml_new_string("select_font_face Normal"),
     cst_select_font_face_Oblique=caml_new_string("select_font_face Oblique"),
     cst_select_font_face_Upright=caml_new_string("select_font_face Upright"),
     cst_select_font_face=caml_new_string("select_font_face"),
     cst_set_font_size=caml_new_string("set_font_size"),
     cst_get_source=caml_new_string("get_source"),
     cst_set_source_RadialGradient=
      caml_new_string("set_source RadialGradient"),
     cst_set_source_LinearGradient=
      caml_new_string("set_source LinearGradient"),
     cst_set_source_Rgba=caml_new_string("set_source Rgba"),
     cst_set_source_rgba=caml_new_string("set_source_rgba"),
     cst_set_source_rgb=caml_new_string("set_source_rgb"),
     cst_get_operator=caml_new_string("get_operator"),
     cst_set_operator_SATURATE=caml_new_string("set_operator SATURATE"),
     cst_set_operator_SOURCE=caml_new_string("set_operator SOURCE"),
     cst_set_operator_CLEAR=caml_new_string("set_operator CLEAR"),
     cst_set_operator_DEST=caml_new_string("set_operator DEST"),
     cst_set_operator_ADD=caml_new_string("set_operator ADD"),
     cst_set_operator_XOR=caml_new_string("set_operator XOR"),
     cst_set_operator_DEST_ATOP=caml_new_string("set_operator DEST_ATOP"),
     cst_set_operator_DEST_OUT=caml_new_string("set_operator DEST_OUT"),
     cst_set_operator_DEST_IN=caml_new_string("set_operator DEST_IN"),
     cst_set_operator_DEST_OVER=caml_new_string("set_operator DEST_OVER"),
     cst_set_operator_ATOP=caml_new_string("set_operator ATOP"),
     cst_set_operator_OUT=caml_new_string("set_operator OUT"),
     cst_set_operator_IN=caml_new_string("set_operator IN"),
     cst_get_miter_limit=caml_new_string("get_miter_limit"),
     cst_set_miter_limit=caml_new_string("set_miter_limit"),
     cst_get_line_join=caml_new_string("get_line_join"),
     cst_set_line_join_JOIN_BEVEL=caml_new_string("set_line_join JOIN_BEVEL"),
     cst_set_line_join_JOIN_ROUND=caml_new_string("set_line_join JOIN_ROUND"),
     cst_get_line_cap=caml_new_string("get_line_cap"),
     cst_set_line_cap_SQUARE=caml_new_string("set_line_cap SQUARE"),
     cst_set_line_cap_ROUND=caml_new_string("set_line_cap ROUND"),
     cst_get_fill_rule=caml_new_string("get_fill_rule"),
     cst_set_fill_rule=caml_new_string("set_fill_rule"),
     cst_get_dash=caml_new_string("get_dash"),
     cst_set_dash_with_ofs=caml_new_string("set_dash with ofs"),
     cst_set_dash=caml_new_string("set_dash"),
     cst_get_line_width=caml_new_string("get_line_width"),
     cst_set_line_width=caml_new_string("set_line_width"),
     cst_paint_with_alpha=caml_new_string("paint with alpha"),
     cst_paint$0=caml_new_string("paint"),
     cst_clip_preserve$0=caml_new_string("clip_preserve"),
     cst_clip$0=caml_new_string("clip"),
     cst_fill_preserve$0=caml_new_string("fill_preserve"),
     cst_fill$0=caml_new_string("fill"),
     cst_stroke_preserve$0=caml_new_string("stroke_preserve"),
     cst_stroke$0=caml_new_string("stroke"),
     cst_move_to_Path_get_current_point=
      caml_new_string("move_to, Path.get_current_point"),
     cst_Path_get_current_point=caml_new_string("Path.get_current_point"),
     cst_Path_clear$0=caml_new_string("Path.clear"),
     cst_Path_close$0=caml_new_string("Path.close"),
     cst_arc_negative$0=caml_new_string("arc_negative"),
     cst_arc$0=caml_new_string("arc"),
     cst_rectangle$0=caml_new_string("rectangle"),
     cst_rel_curve_to$0=caml_new_string("rel_curve_to"),
     cst_invalid_rel_curve_to=caml_new_string("invalid rel_curve_to"),
     cst_curve_to$0=caml_new_string("curve_to"),
     cst_rel_line_to$2=caml_new_string("rel_line_to"),
     cst_invalid_rel_line_to=caml_new_string("invalid rel_line_to"),
     cst_line_to$0=caml_new_string("line_to"),
     cst_rel_move_to$1=caml_new_string("rel_move_to"),
     cst_invalid_rel_move_to=caml_new_string("invalid rel_move_to"),
     cst_move_to$0=caml_new_string("move_to"),
     cst_device_to_user_distance=caml_new_string("device_to_user_distance"),
     cst_device_to_user=caml_new_string("device_to_user"),
     cst_user_to_device_distance=caml_new_string("user_to_device_distance"),
     cst_user_to_device=caml_new_string("user_to_device"),
     cst_get_matrix=caml_new_string("get_matrix"),
     cst_identity_matrix=caml_new_string("identity_matrix"),
     cst_set_matrix$0=caml_new_string("set_matrix"),
     cst_transform$0=caml_new_string("transform"),
     cst_rotate$1=caml_new_string("rotate"),
     cst_translate$1=caml_new_string("translate"),
     cst_scale$1=caml_new_string("scale"),
     cst_invalid_restore$0=caml_new_string("invalid restore"),
     cst_save_restore=caml_new_string("save, restore"),
     point_definitions$0=
      caml_new_string
       ('\x84\x95\xa6\xbe\0\0\x01\xb7\0\0\0T\0\0\x01M\0\0\x01M\b\0\x01L\0\xa0\x01\x01VB\xa0\x01\x01q@\xa0\x01\x01\xd2A\xa0\x01\x02\x10I\xa0\x01\x02.G\xa0\x01\x02LH\xa0\x01\x02aE\xa0\x01\x02yF\xa0\x01\x02\xa7D\xa0\x01\x02\xd2C\xa0\x01\x03\x0eJ\xa0\x01\x03LL\xa0\x01\x03xK\xa0\x01\x03\xbcN\xa0\x01\x03\xe7M\xa0\x01\x040O\xa0\x01\x04v\0R\xa0\x01\x05\x85P\xa0\x01\x05\xc6Q\xa0\x01\x06\fR\xa0\x01\x06GS\xa0\x01\x06\xe3T\xa0\x01\b,U\xa0\x01\b\x9dV\xa0\x01\t\x17W\xa0\x01\t\x88X\xa0\x01\t\xfcY\xa0\x01\nhZ\xa0\x01\n\xf3[\xa0\x01\x0b\x0e\\\xa0\x01\x0bp]\xa0\x01\x0b\xdc^\xa0\x01\fg_\xa0\x01\f\x82`\xa0\x01\f\xe5a\xa0\x01\rob\xa0\x01\x0e\x18c\xa0\x01\x0e3d\xa0\x01\x0e\xb9e\xa0\x01\x0f\x18f\xa0\x01\x0f\x86g\xa0\x01\x10\xddh\xa0\x01\x12\xe6i\xa0\x01\x13sj\xa0\x01\x13\xcck\xa0\x01\x14ll\xa0\x01\x15\x0bm\xa0\x01\x15`n\xa0\x01\x15\xf9o\xa0\x01\x16_p\xa0\x01\x17\x02q\xa0\x01\x17\x9cr\xa0\x01\x17\xe8s\xa0\x01\x187t\xa0\x01\x18\x8du\xa0\x01\x18\xebv\xa0\x01\x19Fw\xa0\x01\x19\xa4x\xa0\x01\x19\xfey\xa0\x01\x1aLz\xa0\x01\x1b\0{\xa0\x01\x1bR|\xa0\x01\x1b\xa7}\xa0\x01\x1c\0~\xa0\x01\x1c\x9d\x7f\xa0\x01\x1d\x01\0@\xa0\x01\x1dp\0A\xa0\x01\x1e\x18\0E\xa0\x01\x1e \0C\xa0\x01\x1e]\0D\xa0\x01\x1e\x8f\0B\xa0\x01\x1fc\0F\xa0\x01 \x96\0G\xa0\x01 \xe6\0H\xa0\x01!R\0I\xa0\x01!\xdc\0J\xa0\x01"e\0K\xa0\x01"\xf3\0L\xa0\x01#\x86\0M\xa0\x01#\xe5\0N\xa0\x01$\xad\0O\xa0\x01%\xc2\0Q\xa0\x01%\xf5\0P'),
     cst_tst_Tests_Decoration_ml=caml_new_string("tst/Tests/Decoration.ml"),
     match$2=[0,50,40,30,110,140,50],
     cst_paint_with_alpha_4=caml_new_string("paint with alpha 4"),
     cst_paint_with_alpha_3=caml_new_string("paint with alpha 3"),
     cst_paint_with_alpha_2=caml_new_string("paint with alpha 2"),
     cst_paint_with_alpha_1=caml_new_string("paint with alpha 1"),
     cst_set_source_radial_gradient=
      caml_new_string("set_source radial gradient"),
     cst_set_source_linear_gradient=
      caml_new_string("set_source linear gradient"),
     cst_set_source_rgba$0=caml_new_string("set_source_rgba"),
     cst_set_source_rgb$0=caml_new_string("set_source_rgb"),
     cst_clip_paint=caml_new_string("clip paint"),
     cst_drawing_functions=caml_new_string("drawing functions"),
     cst_scale_identity_matrix=caml_new_string("scale identity_matrix"),
     cst_scale_rotate_translate_save_restore=
      caml_new_string("scale rotate translate save restore"),
     cst_set_dash$0=caml_new_string("set_dash"),
     cst_set_operator=caml_new_string("set_operator"),
     cst_set_line_join=caml_new_string("set_line_join"),
     cst_set_line_cap=caml_new_string("set_line_cap"),
     cst_set_fill_rule$0=caml_new_string("set_fill_rule"),
     cst_set_miter_limit$0=caml_new_string("set_miter_limit"),
     cst_set_line_width$0=caml_new_string("set_line_width"),
     point_definitions$1=
      caml_new_string
       ('\x84\x95\xa6\xbe\0\0\x03\xac\0\0\0\xa2\0\0\x02\x85\0\0\x02\x85\b\0\x02\x84\0\xa0\x01\0\xfd@\xa0\x01\x01NI\xa0\x01\x01\x91H\xa0\x01\x01\xa1G\xa0\x01\x01\xc2F\xa0\x01\x01\xd6E\xa0\x01\x02 D\xa0\x01\x025C\xa0\x01\x02NB\xa0\x01\x02fA\xa0\x01\x02\xaa\x01\0\xa0\xa0\x01\x02\xf9M\xa0\x01\x03 L\xa0\x01\x03=K\xa0\x01\x03ZJ\xa0\x01\x03\xc2W\xa0\x01\x03\xebV\xa0\x01\x04\x13U\xa0\x01\x042T\xa0\x01\x04OS\xa0\x01\x04lR\xa0\x01\x04\x89Q\xa0\x01\x04\xa6P\xa0\x01\x04\xc3O\xa0\x01\x04\xe0N\xa0\x01\x05Kc\xa0\x01\x05pb\xa0\x01\x05\x8da\xa0\x01\x05\xaa`\xa0\x01\x05\xc7_\xa0\x01\x05\xe4^\xa0\x01\x06\x01]\xa0\x01\x06\x1e\\\xa0\x01\x06;[\xa0\x01\x06XZ\xa0\x01\x06uY\xa0\x01\x06\x92X\xa0\x01\x06\xfbh\xa0\x01\x07\x1eg\xa0\x01\x07>f\xa0\x01\x07[e\xa0\x01\x07xd\xa0\x01\x07\xf4n\xa0\x01\b\x19m\xa0\x01\b9l\xa0\x01\bVk\xa0\x01\bsj\xa0\x01\b\x90i\xa0\x01\t.u\xa0\x01\tYt\xa0\x01\t\x86s\xa0\x01\t\x99r\xa0\x01\t\xbcq\xa0\x01\t\xe7p\xa0\x01\n o\xa0\x01\n\xb5z\xa0\x01\n\xd7y\xa0\x01\n\xf7x\xa0\x01\x0b\x14w\xa0\x01\x0b1v\xa0\x01\x0b\x96\0O\xa0\x01\x0b\xa4\0M\xa0\x01\x0b\xb7\0K\xa0\x01\x0b\xe5\0@\xa0\x01\f\x06\0L\xa0\x01\f+\0J\xa0\x01\fX\0I\xa0\x01\fo\0H\xa0\x01\f\x97\0G\xa0\x01\f\xae\0F\xa0\x01\f\xda\0E\xa0\x01\f\xf1\0D\xa0\x01\r\x19\0C\xa0\x01\r0\0B\xa0\x01\rI\0A\xa0\x01\ro\0N\xa0\x01\r\x8e\x7f\xa0\x01\r\xab~\xa0\x01\r\xc6}\xa0\x01\r\xd3|\xa0\x01\r\xf0{\xa0\x01\x0eG\0U\xa0\x01\x0ed\0T\xa0\x01\x0e\x81\0S\xa0\x01\x0e\x9b\0R\xa0\x01\x0e\xb9\0Q\xa0\x01\x0e\xd6\0P\xa0\x01\x0f\xb4\0e\xa0\x01\x0f\xd1\0d\xa0\x01\x0f\xee\0c\xa0\x01\x10\x1c\0b\xa0\x01\x10=\0a\xa0\x01\x10w\0`\xa0\x01\x10\x94\0_\xa0\x01\x10\xc2\0^\xa0\x01\x10\xda\0]\xa0\x01\x11\x07\0\\\xa0\x01\x11+\0[\xa0\x01\x11a\0Z\xa0\x01\x11\x80\0Y\xa0\x01\x11\xa7\0X\xa0\x01\x11\xb5\0W\xa0\x01\x11\xdc\0V\xa0\x01\x12 \0h\xa0\x01\x12Q\0g\xa0\x01\x12c\0f\xa0\x01\x13\xe2\0k\xa0\x01\x14\x06\0j\xa0\x01\x143\0i\xa0\x01\x17X\0p\xa0\x01\x17\x82\0o\xa0\x01\x17\x97\0n\xa0\x01\x17\xbe\0m\xa0\x01\x17\xeb\0l\xa0\x01\x18K\0z\xa0\x01\x18p\0y\xa0\x01\x18\x83\0x\xa0\x01\x18\x8b\0v\xa0\x01\x18\xcc\0w\xa0\x01\x19\x03\0u\xa0\x01\x19?\0t\xa0\x01\x19w\0s\xa0\x01\x19\x91\0r\xa0\x01\x19\xbc\0q\xa0\x01\x1a\x16\x01\0\x87\xa0\x01\x1a5\x01\0\x85\xa0\x01\x1a_\x01\0\x86\xa0\x01\x1ag\x01\0\x83\xa0\x01\x1a\xa0\x01\0\x84\xa0\x01\x1a\xd7\x01\0\x82\xa0\x01\x1b\x0e\x01\0\x81\xa0\x01\x1b(\x01\0\x80\xa0\x01\x1b;\0\x7f\xa0\x01\x1b`\0~\xa0\x01\x1b\x8d\0}\xa0\x01\x1b\xa1\0|\xa0\x01\x1b\xce\0{\xa0\x01\x1c"\x01\0\x8b\xa0\x01\x1cR\x01\0\x8a\xa0\x01\x1cd\x01\0\x89\xa0\x01\x1c\x89\x01\0\x88\xa0\x01\x1c\xe7\x01\0\x8f\xa0\x01\x1d\x17\x01\0\x8e\xa0\x01\x1d)\x01\0\x8d\xa0\x01\x1dS\x01\0\x8c\xa0\x01\x1d\xb1\x01\0\x97\xa0\x01\x1d\xe1\x01\0\x96\xa0\x01\x1d\xf3\x01\0\x95\xa0\x01\x1d\xfb\x01\0\x93\xa0\x01\x1e<\x01\0\x94\xa0\x01\x1es\x01\0\x92\xa0\x01\x1e\xaa\x01\0\x91\xa0\x01\x1e\xc4\x01\0\x90\xa0\x01\x1f"\x01\0\x9f\xa0\x01\x1fR\x01\0\x9e\xa0\x01\x1fd\x01\0\x9d\xa0\x01\x1fl\x01\0\x9b\xa0\x01\x1f\xad\x01\0\x9c\xa0\x01\x1f\xe9\x01\0\x9a\xa0\x01 %\x01\0\x99\xa0\x01 ?\x01\0\x98'),
     cst_tst_Tests_Drawing_ml=caml_new_string("tst/Tests/Drawing.ml"),
     cst_Hello$0=caml_new_string("Hello"),
     cst_He=caml_new_string("He"),
     cst_llo=caml_new_string("llo"),
     cst_reuse_canvas_line_cap=caml_new_string("reuse_canvas_line_cap"),
     cst_reuse_canvas_transformation=
      caml_new_string("reuse_canvas_transformation"),
     cst_show_text$1=caml_new_string("show_text"),
     cst_text_extents$0=caml_new_string("text_extents"),
     cst_font_extents$0=caml_new_string("font_extents"),
     cst_arc_more_than_2pi=caml_new_string("arc_more_than_2pi"),
     point_definitions$2=
      caml_new_string
       ('\x84\x95\xa6\xbe\0\0\0\xaa\0\0\0"\0\0\0\x85\0\0\0\x85\b\0\0\x84\0\xa0\x01\x013H\xa0\x01\x01EF\xa0\x01\x01TE\xa0\x01\x01sD\xa0\x01\x01\x88C\xa0\x01\x01\x92A\xa0\x01\x01\xb5B\xa0\x01\x01\xc9@\xa0\x01\x01\xf1G\xa0\x01\x02#`\xa0\x01\x02hL\xa0\x01\x02\x94K\xa0\x01\x02\xbfJ\xa0\x01\x02\xdaI\xa0\x01\x03\x1dM\xa0\x01\x03oN\xa0\x01\x03\xc7V\xa0\x01\x03\xe4U\xa0\x01\x051T\xa0\x01\x05dS\xa0\x01\x05\x81R\xa0\x01\x05\xb5Q\xa0\x01\x05\xd1P\xa0\x01\x05\xeeO\xa0\x01\x06UW\xa0\x01\x06\x81Z\xa0\x01\x06\x9eY\xa0\x01\x06\xbbX\xa0\x01\x07\x0b[\xa0\x01\x07>_\xa0\x01\x07^^\xa0\x01\x07{]\xa0\x01\x07\x98\\'),
     cst_tst_Tests_Limitations_ml=caml_new_string("tst/Tests/Limitations.ml"),
     name=caml_new_string("CairoMock"),
     name$0=caml_new_string("CairoMock.Mock"),
     name$1=caml_new_string("CairoMock.Mock"),
     point_definitions$3=
      caml_new_string
       ("\x84\x95\xa6\xbe\0\0\0^\0\0\0\x13\0\0\0I\0\0\0I\b\0\0H\0\xa0\0{A\xa0\x01\0\xc5@\xa0\x01\x03TB\xa0\x01\x03\x94Q\xa0\x01\x03\xf5C\xa0\x01\x04\x1bD\xa0\x01\x04GE\xa0\x01\x05\x10F\xa0\x01\x056G\xa0\x01\x05bH\xa0\x01\x05\xdeI\xa0\x01\x05\xffJ\xa0\x01\x06&K\xa0\x01\x07!L\xa0\x01\x07dM\xa0\x01\x07\x9aN\xa0\x01\bTP\xa0\x01\bsO"),
     cst_tst_Tests_Tests_ml=caml_new_string("tst/Tests/Tests.ml"),
     General=global_data.General,
     Not_found=global_data.Not_found,
     Bisect_Runtime=global_data.Bisect__Runtime,
     CairoMock=global_data.CairoMock,
     Tests=[0,0,0,0,0,0];
    caml_register_global(1346,Tests,"Tests__");
    var
     match=
      caml_call3
       (Bisect_Runtime[1],cst_tst_Tests_Universal_ml,231,point_definitions),
     cb=match[2],
     _a_=[0,cb],
     _af_=
      [0,
       [11,caml_new_string("[|"),[2,0,[11,caml_new_string("|]"),0]]],
       caml_new_string("[|%s|]")],
     _ag_=[0,caml_new_string("; ")],
     _aa_=
      [0,
       [2,0,[11,caml_new_string(".Error(INVALID_RESTORE)"),0]],
       caml_new_string("%s.Error(INVALID_RESTORE)")],
     _W_=[0,-2,2],
     _X_=[0,-6,6.5],
     _Y_=[0,28,59],
     _Z_=[0,23,53],
     ___=[0,28,59],
     _$_=[0,23,53],
     _A_=[0,0.001],
     _z_=[0,0.1,0.2,0.3,1],
     _y_=[0,0.1,0.2,0.3,1],
     _x_=[0,0.1,0.2,0.3,0.4],
     _w_=[0,0.1,0.2,0.3,0.4],
     _v_=[0,1,2,3,4],
     _u_=[0,1,2,3,4,5,6],
     _s_=[0,0.1],
     _t_=[0,0.1,0.2,0.3,0.4,0.5],
     _r_=[0,0,0.2,0.3,0.4,1],
     _j_=[0,0.2],
     _k_=[0,0.1],
     _l_=[0,0.2],
     _m_=[0,0.3],
     _n_=[0,0.1,0.1,0.1,0.1,1],
     _o_=[0,0.2,0.2,0.2,0.2,1],
     _p_=[0,0.2,0.21,0.21,0.21,1],
     _q_=[0,0.3,0.3,0.3,0.3,1],
     _h_=[0,0.1],
     _i_=[0,0.2],
     _g_=
      [0,
       [12,
        40,
        [8,
         0,
         0,
         0,
         [11,
          caml_new_string(", "),
          [8,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [8,
             0,
             0,
             0,
             [11,
              caml_new_string(", "),
              [8,0,0,0,[11,caml_new_string(", "),[8,0,0,0,partial]]]]]]]]]],
       caml_new_string("(%f, %f, %f, %f, %f, %f)")],
     _f_=
      [0,
       [12,
        40,
        [8,
         0,
         0,
         0,
         [11,
          caml_new_string(", "),
          [8,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [8,
             0,
             0,
             0,
             [11,
              caml_new_string(", "),
              [8,0,0,0,[11,caml_new_string(", "),[8,0,0,0,partial$0]]]]]]]]]],
       caml_new_string("(%f, %f, %f, %f, %f)")],
     _e_=
      [0,
       [12,
        40,
        [8,
         0,
         0,
         0,
         [11,
          caml_new_string(", "),
          [8,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [8,0,0,0,[11,caml_new_string(", "),[8,0,0,0,[12,41,0]]]]]]]]],
       caml_new_string("(%f, %f, %f, %f)")],
     _d_=
      [0,
       [12,40,[8,0,0,0,[11,caml_new_string(", "),[8,0,0,0,[12,41,0]]]]],
       caml_new_string("(%f, %f)")],
     _c_=
      [0,
       [11,
        caml_new_string("{xx="),
        [8,
         0,
         0,
         0,
         [11,
          caml_new_string("; xy="),
          [8,
           0,
           0,
           0,
           [11,
            caml_new_string("; yx="),
            [8,
             0,
             0,
             0,
             [11,
              caml_new_string("; yy="),
              [8,0,0,0,[11,caml_new_string("; x0="),[8,0,0,0,partial$1]]]]]]]]]],
       caml_new_string("{xx=%f; xy=%f; yx=%f; yy=%f; x0=%f; y0=%f}")],
     _B_=[0,3,4],
     _C_=[0,3,4],
     _D_=[0,3,4],
     _E_=[0,1,2],
     _F_=[0,6,8],
     _G_=[0,5,6],
     _H_=[0,1,5],
     _I_=[0,4,2],
     _J_=[0,-2,2],
     _K_=[0,1,5],
     _L_=[0,4,2],
     _M_=[0,1,2],
     _N_=[0,4,6],
     _O_=[0,1,2],
     _P_=[0,4,6],
     _Q_=[0,3,8],
     _R_=[0,1,2],
     _S_=[0,1,2],
     _T_=[0,0,0],
     _U_=[0,1,2],
     _V_=[0,0,0],
     _ab_=[0,[0,0,0,1,0.7],0],
     _ac_=[0,1,0,0,0.5],
     _ad_=[0,0,0,0,1],
     _ae_=[0,3,0],
     _ah_=[254,7,8,9,10,11,12],
     _ao_=[0,0,[0,1,[0,6,[0,13,0]]]],
     _ai_=[0,4,[0,5,[0,7,[0,8,[0,9,[0,10,[0,11,[0,12,0]]]]]]]],
     _aj_=[0,2,0],
     _ak_=[0,2,0],
     _al_=[0,20,0],
     _am_=[0,4,0],
     _an_=
      [0,
       [11,caml_new_string("Universal tests on "),[2,0,0]],
       caml_new_string("Universal tests on %s")],
     _a7_=[0,2],
     _aC_=[0,0],
     _aA_=[0,2],
     _ay_=[0,0],
     _av_=[0,1],
     _aw_=[0,1],
     _ar_=
      [0,
       [11,
        caml_new_string("font_extents -> {ascent="),
        [8,
         0,
         0,
         0,
         [11,
          caml_new_string("; descent="),
          [8,
           0,
           0,
           0,
           [11,
            caml_new_string("; baseline="),
            [8,
             0,
             0,
             0,
             [11,
              caml_new_string("; max_x_advance="),
              [8,
               0,
               0,
               0,
               [11,caml_new_string("; max_y_advance="),[8,0,0,0,partial$2]]]]]]]]]],
       caml_new_string
        ("font_extents -> {ascent=%f; descent=%f; baseline=%f; max_x_advance=%f; max_y_advance=%f}")],
     _as_=
      [0,
       [11,
        caml_new_string('text_extents "abcd" -> {x_bearing='),
        [8,
         0,
         0,
         0,
         [11,
          caml_new_string("; y_bearing="),
          [8,
           0,
           0,
           0,
           [11,
            caml_new_string("; width="),
            [8,
             0,
             0,
             0,
             [11,
              caml_new_string("; height="),
              [8,
               0,
               0,
               0,
               [11,caml_new_string("; x_advance="),[8,0,0,0,partial$3]]]]]]]]]],
       caml_new_string
        ('text_extents "abcd" -> {x_bearing=%f; y_bearing=%f; width=%f; height=%f; x_advance=%f; y_advance=%f}')],
     _at_=
      [0,
       [11,caml_new_string('show_text "flibidiboo"'),0],
       caml_new_string('show_text "flibidiboo"')],
     _au_=
      [0,
       [11,
        caml_new_string
         ('select_font_face ~slant:Italic ~weight:Bold "foo-bar"'),
        0],
       caml_new_string
        ('select_font_face ~slant:Italic ~weight:Bold "foo-bar"')],
     _ax_=
      [0,
       [11,caml_new_string('select_font_face ~weight:Normal "foo-bar"'),0],
       caml_new_string('select_font_face ~weight:Normal "foo-bar"')],
     _az_=
      [0,
       [11,caml_new_string('select_font_face ~slant:Oblique "foo-bar"'),0],
       caml_new_string('select_font_face ~slant:Oblique "foo-bar"')],
     _aB_=
      [0,
       [11,caml_new_string('select_font_face ~slant:Upright "foo-bar"'),0],
       caml_new_string('select_font_face ~slant:Upright "foo-bar"')],
     _aD_=
      [0,
       [11,caml_new_string('select_font_face "foo-bar"'),0],
       caml_new_string('select_font_face "foo-bar"')],
     _aE_=
      [0,
       [11,caml_new_string("set_font_size 3.00"),0],
       caml_new_string("set_font_size 3.00")],
     _aF_=
      [0,
       [11,
        caml_new_string
         ("get_source -> (Rgba {r=0.00; g=0.00; b=0.00; a=1.00})"),
        0],
       caml_new_string
        ("get_source -> (Rgba {r=0.00; g=0.00; b=0.00; a=1.00})")],
     _aG_=
      [0,
       [11,
        caml_new_string
         ("set_source (RadialGradient {x0=1.00; y0=2.00; r0=5.00; x1=3.00; y1=4.00; r16.00; stop_points=[]})"),
        0],
       caml_new_string
        ("set_source (RadialGradient {x0=1.00; y0=2.00; r0=5.00; x1=3.00; y1=4.00; r16.00; stop_points=[]})")],
     _aH_=
      [0,
       [11,
        caml_new_string
         ("set_source (LinearGradient {x0=1.00; y0=2.00; x1=3.00; y1=4.00; stop_points=[{position=0.00; r=0.10; g=0.20; b=0.30; a=1.00}]})"),
        0],
       caml_new_string
        ("set_source (LinearGradient {x0=1.00; y0=2.00; x1=3.00; y1=4.00; stop_points=[{position=0.00; r=0.10; g=0.20; b=0.30; a=1.00}]})")],
     _aI_=
      [0,
       [11,
        caml_new_string("set_source (Rgba {r=0.50; g=0.60; b=0.70; a=1.00})"),
        0],
       caml_new_string("set_source (Rgba {r=0.50; g=0.60; b=0.70; a=1.00})")],
     _aJ_=
      [0,
       [11,caml_new_string("set_source_rgba 0.50 0.60 0.70 0.80"),0],
       caml_new_string("set_source_rgba 0.50 0.60 0.70 0.80")],
     _aK_=
      [0,
       [11,caml_new_string("set_source_rgb 0.50 0.60 0.70"),0],
       caml_new_string("set_source_rgb 0.50 0.60 0.70")],
     _aL_=
      [0,
       [11,caml_new_string("get_operator -> OVER"),0],
       caml_new_string("get_operator -> OVER")],
     _bM_=
      [0,
       [11,caml_new_string("set_operator SATURATE"),0],
       caml_new_string("set_operator SATURATE")],
     _bN_=
      [0,
       [11,caml_new_string("set_operator SOURCE"),0],
       caml_new_string("set_operator SOURCE")],
     _bO_=
      [0,
       [11,caml_new_string("set_operator CLEAR"),0],
       caml_new_string("set_operator CLEAR")],
     _bP_=
      [0,
       [11,caml_new_string("set_operator DEST"),0],
       caml_new_string("set_operator DEST")],
     _aM_=
      [0,
       [11,caml_new_string("set_operator ADD"),0],
       caml_new_string("set_operator ADD")],
     _aN_=
      [0,
       [11,caml_new_string("set_operator XOR"),0],
       caml_new_string("set_operator XOR")],
     _aO_=
      [0,
       [11,caml_new_string("set_operator DEST_ATOP"),0],
       caml_new_string("set_operator DEST_ATOP")],
     _aP_=
      [0,
       [11,caml_new_string("set_operator DEST_OUT"),0],
       caml_new_string("set_operator DEST_OUT")],
     _aQ_=
      [0,
       [11,caml_new_string("set_operator DEST_IN"),0],
       caml_new_string("set_operator DEST_IN")],
     _aR_=
      [0,
       [11,caml_new_string("set_operator DEST_OVER"),0],
       caml_new_string("set_operator DEST_OVER")],
     _aS_=
      [0,
       [11,caml_new_string("set_operator ATOP"),0],
       caml_new_string("set_operator ATOP")],
     _aT_=
      [0,
       [11,caml_new_string("set_operator OUT"),0],
       caml_new_string("set_operator OUT")],
     _aU_=
      [0,
       [11,caml_new_string("set_operator IN"),0],
       caml_new_string("set_operator IN")],
     _aV_=
      [0,
       [11,caml_new_string("get_miter_limit -> 10.00"),0],
       caml_new_string("get_miter_limit -> 10.00")],
     _aW_=
      [0,
       [11,caml_new_string("set_miter_limit 3.00"),0],
       caml_new_string("set_miter_limit 3.00")],
     _aX_=
      [0,
       [11,caml_new_string("get_line_join -> JOIN_MITER"),0],
       caml_new_string("get_line_join -> JOIN_MITER")],
     _aY_=
      [0,
       [11,caml_new_string("set_line_join JOIN_BEVEL"),0],
       caml_new_string("set_line_join JOIN_BEVEL")],
     _aZ_=
      [0,
       [11,caml_new_string("set_line_join JOIN_ROUND"),0],
       caml_new_string("set_line_join JOIN_ROUND")],
     _a0_=
      [0,
       [11,caml_new_string("get_line_cap -> BUTT"),0],
       caml_new_string("get_line_cap -> BUTT")],
     _a1_=
      [0,
       [11,caml_new_string("set_line_cap SQUARE"),0],
       caml_new_string("set_line_cap SQUARE")],
     _a2_=
      [0,
       [11,caml_new_string("set_line_cap ROUND"),0],
       caml_new_string("set_line_cap ROUND")],
     _a3_=
      [0,
       [11,caml_new_string("get_fill_rule -> WINDING"),0],
       caml_new_string("get_fill_rule -> WINDING")],
     _a4_=
      [0,
       [11,caml_new_string("set_fill_rule EVEN_ODD"),0],
       caml_new_string("set_fill_rule EVEN_ODD")],
     _a5_=
      [0,
       [11,caml_new_string("get_dash -> ([||], 0.00)"),0],
       caml_new_string("get_dash -> ([||], 0.00)")],
     _a6_=
      [0,
       [11,caml_new_string("set_dash ~ofs:2.00 [|3.00; 4.00|]"),0],
       caml_new_string("set_dash ~ofs:2.00 [|3.00; 4.00|]")],
     _a8_=
      [0,
       [11,caml_new_string("set_dash [|2.00; 3.00|]"),0],
       caml_new_string("set_dash [|2.00; 3.00|]")],
     _a9_=
      [0,
       [11,caml_new_string("get_line_width -> 2.00"),0],
       caml_new_string("get_line_width -> 2.00")],
     _a__=
      [0,
       [11,caml_new_string("set_line_width 3.00"),0],
       caml_new_string("set_line_width 3.00")],
     _a$_=
      [0,
       [11,caml_new_string("paint ~alpha:0.50"),0],
       caml_new_string("paint ~alpha:0.50")],
     _ba_=[0,0.5],
     _bb_=[0,[11,caml_new_string("paint"),0],caml_new_string("paint")],
     _bc_=
      [0,
       [11,caml_new_string("clip_preserve"),0],
       caml_new_string("clip_preserve")],
     _bd_=[0,[11,caml_new_string("clip"),0],caml_new_string("clip")],
     _be_=
      [0,
       [11,caml_new_string("fill_preserve"),0],
       caml_new_string("fill_preserve")],
     _bf_=[0,[11,caml_new_string("fill"),0],caml_new_string("fill")],
     _bg_=
      [0,
       [11,caml_new_string("stroke_preserve"),0],
       caml_new_string("stroke_preserve")],
     _bh_=[0,[11,caml_new_string("stroke"),0],caml_new_string("stroke")],
     _bi_=
      [0,
       caml_new_string("move_to 1.00 2.00"),
       [0,caml_new_string("Path.get_current_point -> (1.00, 2.00)"),0]],
     _bj_=
      [0,
       [11,caml_new_string("Path.get_current_point -> (0.00, 0.00)"),0],
       caml_new_string("Path.get_current_point -> (0.00, 0.00)")],
     _bk_=
      [0,[11,caml_new_string("Path.clear"),0],caml_new_string("Path.clear")],
     _bl_=
      [0,[11,caml_new_string("Path.close"),0],caml_new_string("Path.close")],
     _bm_=
      [0,
       [11,
        caml_new_string("arc_negative 1.00 2.00 ~r:3.00 ~a1:4.00 ~a2:5.00"),
        0],
       caml_new_string("arc_negative 1.00 2.00 ~r:3.00 ~a1:4.00 ~a2:5.00")],
     _bn_=
      [0,
       [11,caml_new_string("arc 1.00 2.00 ~r:3.00 ~a1:4.00 ~a2:5.00"),0],
       caml_new_string("arc 1.00 2.00 ~r:3.00 ~a1:4.00 ~a2:5.00")],
     _bo_=
      [0,
       [11,caml_new_string("rectangle 2.00 3.00 ~w:4.00 ~h:5.00"),0],
       caml_new_string("rectangle 2.00 3.00 ~w:4.00 ~h:5.00")],
     _bp_=
      [0,
       caml_new_string("move_to 1.00 2.00"),
       [0,caml_new_string("rel_curve_to 1.00 2.00 3.00 4.00 5.00 6.00"),0]],
     _bq_=
      [0,
       [11,
        caml_new_string
         ("rel_curve_to 1.00 2.00 3.00 4.00 5.00 6.00 -> raise ("),
        [2,0,[11,caml_new_string(".Error(NO_CURRENT_POINT))"),0]]],
       caml_new_string
        ("rel_curve_to 1.00 2.00 3.00 4.00 5.00 6.00 -> raise (%s.Error(NO_CURRENT_POINT))")],
     _br_=
      [0,
       [11,caml_new_string("curve_to 1.00 2.00 3.00 4.00 5.00 6.00"),0],
       caml_new_string("curve_to 1.00 2.00 3.00 4.00 5.00 6.00")],
     _bs_=
      [0,
       caml_new_string("move_to 1.00 2.00"),
       [0,caml_new_string("rel_line_to 3.00 4.00"),0]],
     _bt_=
      [0,
       [11,
        caml_new_string("rel_line_to 4.05 2.96 -> raise ("),
        [2,0,[11,caml_new_string(".Error(NO_CURRENT_POINT))"),0]]],
       caml_new_string
        ("rel_line_to 4.05 2.96 -> raise (%s.Error(NO_CURRENT_POINT))")],
     _bu_=
      [0,
       [11,caml_new_string("line_to 4.05 2.96"),0],
       caml_new_string("line_to 4.05 2.96")],
     _bv_=
      [0,
       caml_new_string("move_to 1.00 2.00"),
       [0,caml_new_string("rel_move_to 3.00 4.00"),0]],
     _bw_=
      [0,
       [11,
        caml_new_string("rel_move_to 4.05 2.96 -> raise ("),
        [2,0,[11,caml_new_string(".Error(NO_CURRENT_POINT))"),0]]],
       caml_new_string
        ("rel_move_to 4.05 2.96 -> raise (%s.Error(NO_CURRENT_POINT))")],
     _bx_=
      [0,
       [11,caml_new_string("move_to 4.05 2.96"),0],
       caml_new_string("move_to 4.05 2.96")],
     _by_=
      [0,
       [11,
        caml_new_string("device_to_user_distance 2.00 3.00 -> (2.00, 3.00)"),
        0],
       caml_new_string("device_to_user_distance 2.00 3.00 -> (2.00, 3.00)")],
     _bz_=
      [0,
       [11,caml_new_string("device_to_user 2.00 3.00 -> (2.00, 3.00)"),0],
       caml_new_string("device_to_user 2.00 3.00 -> (2.00, 3.00)")],
     _bA_=
      [0,
       [11,
        caml_new_string("user_to_device_distance 2.00 3.00 -> (2.00, 3.00)"),
        0],
       caml_new_string("user_to_device_distance 2.00 3.00 -> (2.00, 3.00)")],
     _bB_=
      [0,
       [11,caml_new_string("user_to_device 2.00 3.00 -> (2.00, 3.00)"),0],
       caml_new_string("user_to_device 2.00 3.00 -> (2.00, 3.00)")],
     _bC_=
      [0,
       [11,
        caml_new_string
         ("get_matrix -> {xx=1.00; xy=0.00; yx=0.00; yy=1.00; x0=0.00; y0=0.00}"),
        0],
       caml_new_string
        ("get_matrix -> {xx=1.00; xy=0.00; yx=0.00; yy=1.00; x0=0.00; y0=0.00}")],
     _bD_=
      [0,
       [11,caml_new_string("identity_matrix"),0],
       caml_new_string("identity_matrix")],
     _bE_=
      [0,
       [11,
        caml_new_string
         ("set_matrix {xx=1.00; xy=2.00; yx=3.00; yy=4.00; x0=5.00; y0=6.00}"),
        0],
       caml_new_string
        ("set_matrix {xx=1.00; xy=2.00; yx=3.00; yy=4.00; x0=5.00; y0=6.00}")],
     _bF_=
      [0,
       [11,
        caml_new_string
         ("transform {xx=1.00; xy=2.00; yx=3.00; yy=4.00; x0=5.00; y0=6.00}"),
        0],
       caml_new_string
        ("transform {xx=1.00; xy=2.00; yx=3.00; yy=4.00; x0=5.00; y0=6.00}")],
     _bG_=
      [0,[11,caml_new_string("rotate 3.00"),0],caml_new_string("rotate 3.00")],
     _bH_=
      [0,
       [11,caml_new_string("translate 3.00 2.00"),0],
       caml_new_string("translate 3.00 2.00")],
     _bI_=
      [0,
       [11,caml_new_string("scale 3.00 2.00"),0],
       caml_new_string("scale 3.00 2.00")],
     _bJ_=
      [0,
       [11,
        caml_new_string("restore -> raise ("),
        [2,0,[11,caml_new_string(".Error(INVALID_RESTORE))"),0]]],
       caml_new_string("restore -> raise (%s.Error(INVALID_RESTORE))")],
     _bK_=[0,caml_new_string("save"),[0,caml_new_string("restore"),0]],
     _bL_=
      [0,
       [11,
        caml_new_string("Decoration tests on CairoMock.Decorate("),
        [2,0,[12,41,0]]],
       caml_new_string("Decoration tests on CairoMock.Decorate(%s)")],
     _b2_=[0,0],
     _b3_=[0,1],
     _b4_=[0,0.4],
     _b0_=[0,0],
     _b1_=[0,1],
     _bZ_=[0,0.5],
     _bY_=[0,0.5],
     _bV_=[0,0],
     _bW_=[0,1],
     _bX_=[0,0.5],
     _bS_=[0,0],
     _bT_=[0,1],
     _bU_=[0,0.5],
     _b5_=
      caml_list_of_js_array
       ([[0,0,0,0,0.7],
         [0,0.5,0.5,0.5,0.7],
         [0,1,1,1,0.7],
         [0,0.5,0,0,0.7],
         [0,0,0.5,0,0.7],
         [0,0,0,0.5,0.7],
         [0,1,0,0,0.7],
         [0,0,1,0,0.7],
         [0,0,0,1,0.7],
         [0,0.5,0.5,0,0.7],
         [0,0,0.5,0.5,0.7],
         [0,0.5,0,0.5,0.7],
         [0,1,1,0,0.7],
         [0,0,1,1,0.7],
         [0,1,0,1,0.7],
         [0,0,0,0,0.3],
         [0,0.5,0.5,0.5,0.3],
         [0,1,1,1,0.3],
         [0,0.5,0,0,0.3],
         [0,0,0.5,0,0.3],
         [0,0,0,0.5,0.3],
         [0,1,0,0,0.3],
         [0,0,1,0,0.3],
         [0,0,0,1,0.3],
         [0,0.5,0.5,0,0.3],
         [0,0,0.5,0.5,0.3],
         [0,0.5,0,0.5,0.3],
         [0,1,1,0,0.3],
         [0,0,1,1,0.3],
         [0,1,0,1,0.3]]),
     _b6_=
      caml_list_of_js_array
       ([[0,0,0,0],
         [0,0.5,0.5,0.5],
         [0,1,1,1],
         [0,0.5,0,0],
         [0,0,0.5,0],
         [0,0,0,0.5],
         [0,1,0,0],
         [0,0,1,0],
         [0,0,0,1],
         [0,0.5,0.5,0],
         [0,0,0.5,0.5],
         [0,0.5,0,0.5],
         [0,1,1,0],
         [0,0,1,1],
         [0,1,0,1]]),
     _b7_=[0,2,[0,3,[0,4,[0,5,[0,7,[0,8,[0,9,[0,10,[0,11,[0,12,0]]]]]]]]]],
     _b8_=[0,1,[0,2,[0,0,0]]],
     _b9_=[0,1,[0,2,[0,0,0]]],
     _b__=[0,1,[0,0,0]],
     _b$_=[0,8,[0,9,[0,10,0]]],
     _ca_=[0,5,[0,10,0]],
     _cd_=
      [0,
       [0,0,0,caml_new_string("sans-serif")],
       [0,
        [0,1,0,caml_new_string("sans-serif")],
        [0,
         [0,2,0,caml_new_string("sans-serif")],
         [0,
          [0,0,1,caml_new_string("sans-serif")],
          [0,
           [0,1,1,caml_new_string("sans-serif")],
           [0,
            [0,2,1,caml_new_string("sans-serif")],
            [0,
             [0,0,0,caml_new_string("serif")],
             [0,[0,0,0,caml_new_string("monospace")],0]]]]]]]],
     _cg_=
      [0,
       [11,caml_new_string("Drawing tests on "),[2,0,0]],
       caml_new_string("Drawing tests on %s")],
     _ch_=
      [0,
       [11,caml_new_string("CairoMock.Decorate("),[2,0,[12,41,0]]],
       caml_new_string("CairoMock.Decorate(%s)")];
    function _b_(_fT_)
     {return function(N)
       {caml_call1(_a_[1],2);
        var _fU_=N[3];
        if(553448210 === _fU_)
         {caml_call1(_a_[1],1);var _fV_=cst_CairoMock}
        else
         if(-733568919 <= _fU_)
          {if(95560584 !== _fU_)870528546 === _fU_;var _fV_=cst_JsOfOCairo}
         else
          {caml_call1(_a_[1],0);var _fV_=cst_Cairo}
        caml_call1(_a_[1],11);
        function equal(param,m)
         {var
           xx=param[1],
           yx=param[2],
           xy=param[3],
           yy=param[4],
           x0=param[5],
           y0=param[6];
          caml_call1(_a_[1],9);
          caml_call1(_a_[1],7);
          caml_call1(_a_[1],6);
          caml_call1(_a_[1],5);
          caml_call1(_a_[1],4);
          caml_call1(_a_[1],3);
          var _lf_=caml_call3(General[24][33],0,m[6],y0);
          caml_call1(_a_[1],4);
          var
           _lg_=caml_call3(General[24][33],0,m[5],x0),
           _lh_=caml_call2(General[69][242],_lg_,_lf_);
          caml_call1(_a_[1],5);
          var
           _li_=caml_call3(General[24][33],0,m[4],yy),
           _lj_=caml_call2(General[69][242],_li_,_lh_);
          caml_call1(_a_[1],6);
          var
           _lk_=caml_call3(General[24][33],0,m[2],yx),
           _ll_=caml_call2(General[69][242],_lk_,_lj_);
          caml_call1(_a_[1],7);
          var
           _lm_=caml_call3(General[24][33],0,m[3],xy),
           _ln_=caml_call2(General[69][242],_lm_,_ll_);
          caml_call1(_a_[1],8);
          var _lo_=caml_call3(General[24][33],0,m[1],xx);
          return caml_call2(General[69][242],_lo_,_ln_)}
        function repr(param)
         {var
           xx=param[1],
           yx=param[2],
           xy=param[3],
           yy=param[4],
           x0=param[5],
           y0=param[6];
          return caml_call7(General[59][2],_c_,xx,xy,yx,yy,x0,y0)}
        caml_call1(_a_[1],10);
        var check_matrix=caml_call2(General[67][11],repr,equal);
        function check_coords(precision)
         {caml_call1(_a_[1],16);
          function equal(param,_lc_)
           {var y1=_lc_[2],x1=_lc_[1],y0=param[2],x0=param[1];
            caml_call1(_a_[1],14);
            caml_call1(_a_[1],12);
            var _ld_=caml_call3(General[24][33],precision,y0,y1);
            caml_call1(_a_[1],13);
            var _le_=caml_call3(General[24][33],precision,x0,x1);
            return caml_call2(General[69][242],_le_,_ld_)}
          function repr(param)
           {var y=param[2],x=param[1];
            return caml_call3(General[59][2],_d_,x,y)}
          caml_call1(_a_[1],15);
          return caml_call2(General[67][11],repr,equal)}
        caml_call1(_a_[1],18);
        function repr$0(param)
         {var d=param[4],c=param[3],b=param[2],a=param[1];
          return caml_call5(General[59][2],_e_,a,b,c,d)}
        caml_call1(_a_[1],17);
        var check_float_tuple_4=caml_call1(General[67][12],repr$0);
        caml_call1(_a_[1],20);
        function repr$1(param)
         {var e=param[5],d=param[4],c=param[3],b=param[2],a=param[1];
          return caml_call6(General[59][2],_f_,a,b,c,d,e)}
        caml_call1(_a_[1],19);
        var check_float_tuple_5=caml_call1(General[67][12],repr$1);
        caml_call1(_a_[1],22);
        function repr$2(param)
         {var
           f=param[6],
           e=param[5],
           d=param[4],
           c=param[3],
           b=param[2],
           a=param[1];
          return caml_call7(General[59][2],_g_,a,b,c,d,e,f)}
        caml_call1(_a_[1],21);
        var check_float_tuple_6=caml_call1(General[67][12],repr$2);
        caml_call1(_a_[1],230);
        var _fW_=0,_fX_=0;
        function make(name,p,f)
         {caml_call1(_a_[1],228);
          var
           _k__=
            [246,
             function(_k$_)
              {caml_call1(_a_[1],226);
               var ctx=caml_call1(N[2],0);
               caml_call1(_a_[1],227);
               caml_call2(_fT_[15],ctx,p);
               caml_call1(_a_[1],225);
               caml_call1(_a_[1],223);
               var p$0=caml_call1(_fT_[16],ctx);
               caml_call1(_a_[1],224);
               var _la_=[246,function(_lb_){return caml_call1(f,p$0)}];
               return caml_call2(General[67][9],[0,_fT_[1],12],_la_)}];
          return caml_call2(General[67][5],name,_k__)}
        caml_call1(_a_[1],229);
        var
         _fY_=_fT_[10][9],
         _fZ_=
          [0,
           make
            (cst_create_radial_get_linear_points,
             caml_call6(_fT_[10][10],1,2,3,4,5,6),
             _fY_),
           0],
         _f0_=_fT_[10][7],
         _f1_=
          [0,
           make
            (cst_create_radial_get_rgba,
             caml_call6(_fT_[10][10],1,2,3,4,5,6),
             _f0_),
           _fZ_],
         _f2_=_fT_[10][11],
         _f3_=
          [0,
           make
            (cst_create_linear_get_radial_circles,
             caml_call4(_fT_[10][8],1,2,3,4),
             _f2_),
           _f1_],
         _f4_=_fT_[10][7],
         _f5_=
          [0,
           make
            (cst_create_linear_get_rgba,caml_call4(_fT_[10][8],1,2,3,4),_f4_),
           _f3_],
         _f6_=_fT_[10][4];
        function _f7_(_k9_){return caml_call2(_f6_,_k9_,0)}
        var
         _f8_=
          [0,
           make
            (cst_create_rgb_get_color_stop_rgba,
             caml_call3(_fT_[10][5],0.1,0.2,0.3),
             _f7_),
           _f5_],
         _f9_=_fT_[10][3],
         _f__=
          [0,
           make
            (cst_create_rgb_get_color_stop_count,
             caml_call3(_fT_[10][5],0.1,0.2,0.3),
             _f9_),
           _f8_],
         _f$_=_fT_[10][11],
         _ga_=
          [0,
           make
            (cst_create_rgb_get_radial_circles,
             caml_call3(_fT_[10][5],0.1,0.2,0.3),
             _f$_),
           _f__],
         _gb_=_fT_[10][9],
         _gc_=
          [0,
           make
            (cst_create_rgb_get_linear_points,
             caml_call3(_fT_[10][5],0.1,0.2,0.3),
             _gb_),
           _ga_],
         _gd_=[0,caml_call2(General[67][4],cst_mismatch,_gc_),_fX_],
         _ge_=
          [246,
           function(_kX_)
            {caml_call1(_a_[1],221);
             var ctx=caml_call1(N[2],0);
             caml_call1(_a_[1],222);
             var _kY_=caml_call3(_fT_[10][5],0.1,0.2,0.3);
             caml_call2(_fT_[15],ctx,_kY_);
             caml_call1(_a_[1],220);
             caml_call1(_a_[1],218);
             var p=caml_call1(_fT_[16],ctx);
             caml_call1(_a_[1],219);
             caml_call5(_fT_[10][1],p,_h_,0.1,0.1,0.1);
             caml_call1(_a_[1],217);
             caml_call5(_fT_[10][1],p,_i_,0.2,0.2,0.2);
             caml_call1(_a_[1],216);
             var _kZ_=[246,function(_k8_){return caml_call1(_fT_[10][7],p)}];
             caml_call2(General[67][9],[0,_fT_[1],12],_kZ_);
             caml_call1(_a_[1],215);
             var _k0_=[246,function(_k7_){return caml_call1(_fT_[10][3],p)}];
             caml_call2(General[67][9],[0,_fT_[1],12],_k0_);
             caml_call1(_a_[1],214);
             var _k1_=[246,function(_k6_){return caml_call1(_fT_[10][9],p)}];
             caml_call2(General[67][9],[0,_fT_[1],12],_k1_);
             caml_call1(_a_[1],213);
             var _k2_=[246,function(_k5_){return caml_call1(_fT_[10][11],p)}];
             caml_call2(General[67][9],[0,_fT_[1],12],_k2_);
             caml_call1(_a_[1],212);
             var
              _k3_=
               [246,function(_k4_){return caml_call2(_fT_[10][4],p,0)}];
             return caml_call2(General[67][9],[0,_fT_[1],12],_k3_)}],
         _gf_=
          [0,
           caml_call2(General[67][5],cst_create_rgb_add_color_stop_rgb,_ge_),
           _gd_],
         _gg_=
          [246,
           function(_kV_)
            {caml_call1(_a_[1],210);
             var p=caml_call4(_fT_[10][8],1,2,3,4);
             caml_call1(_a_[1],211);
             caml_call5(_fT_[10][1],p,_j_,0.2,0.2,0.2);
             caml_call1(_a_[1],209);
             caml_call5(_fT_[10][1],p,_k_,0.1,0.1,0.1);
             caml_call1(_a_[1],208);
             caml_call5(_fT_[10][1],p,_l_,0.21,0.21,0.21);
             caml_call1(_a_[1],207);
             caml_call5(_fT_[10][1],p,_m_,0.3,0.3,0.3);
             caml_call1(_a_[1],206);
             var _kW_=caml_call1(_fT_[10][3],p);
             caml_call2(General[67][17],4,_kW_);
             caml_call1(_a_[1],205);
             caml_call2(check_float_tuple_5,_n_,caml_call2(_fT_[10][4],p,0));
             caml_call1(_a_[1],204);
             caml_call2(check_float_tuple_5,_o_,caml_call2(_fT_[10][4],p,1));
             caml_call1(_a_[1],203);
             caml_call2(check_float_tuple_5,_p_,caml_call2(_fT_[10][4],p,2));
             caml_call1(_a_[1],202);
             return caml_call2
                     (check_float_tuple_5,_q_,caml_call2(_fT_[10][4],p,3))}],
         _gh_=
          [0,caml_call2(General[67][5],cst_multiple_color_stops,_gg_),_gf_],
         _gi_=
          [246,
           function(_kT_)
            {caml_call1(_a_[1],200);
             var p=caml_call6(_fT_[10][10],1,2,3,4,5,6);
             caml_call1(_a_[1],201);
             caml_call5(_fT_[10][1],p,0,0.2,0.3,0.4);
             caml_call1(_a_[1],199);
             var _kU_=caml_call1(_fT_[10][3],p);
             caml_call2(General[67][17],1,_kU_);
             caml_call1(_a_[1],198);
             return caml_call2
                     (check_float_tuple_5,_r_,caml_call2(_fT_[10][4],p,0))}],
         _gj_=
          [0,
           caml_call2
            (General[67][5],
             cst_create_radial_add_color_stop_rgb_get_color_stop_count_get_color_stop_rgba,
             _gi_),
           _gh_],
         _gk_=
          [246,
           function(_kR_)
            {caml_call1(_a_[1],196);
             var p=caml_call4(_fT_[10][8],1,2,3,4);
             caml_call1(_a_[1],197);
             caml_call6(_fT_[10][2],p,_s_,0.2,0.3,0.4,0.5);
             caml_call1(_a_[1],195);
             var _kS_=caml_call1(_fT_[10][3],p);
             caml_call2(General[67][17],1,_kS_);
             caml_call1(_a_[1],194);
             return caml_call2
                     (check_float_tuple_5,_t_,caml_call2(_fT_[10][4],p,0))}],
         _gl_=
          [0,
           caml_call2
            (General[67][5],
             cst_create_linear_add_color_stop_rgba_get_color_stop_count_get_color_stop_rgba,
             _gk_),
           _gj_],
         _gm_=
          [246,
           function(_kQ_)
            {caml_call1(_a_[1],192);
             var p=caml_call6(_fT_[10][10],1,2,3,4,5,6);
             caml_call1(_a_[1],193);
             return caml_call2
                     (check_float_tuple_6,_u_,caml_call1(_fT_[10][11],p))}],
         _gn_=
          [0,
           caml_call2
            (General[67][5],cst_create_radial_get_radial_circles,_gm_),
           _gl_],
         _go_=
          [246,
           function(_kP_)
            {caml_call1(_a_[1],190);
             var p=caml_call4(_fT_[10][8],1,2,3,4);
             caml_call1(_a_[1],191);
             return caml_call2
                     (check_float_tuple_4,_v_,caml_call1(_fT_[10][9],p))}],
         _gp_=
          [0,
           caml_call2(General[67][5],cst_create_linear_get_linear_points,_go_),
           _gn_],
         _gq_=
          [246,
           function(_kO_)
            {caml_call1(_a_[1],188);
             var ctx=caml_call1(N[2],0);
             caml_call1(_a_[1],189);
             caml_call5(_fT_[14],ctx,0.1,0.2,0.3,0.4);
             caml_call1(_a_[1],187);
             caml_call1(_a_[1],185);
             var p=caml_call1(_fT_[16],ctx);
             caml_call1(_a_[1],186);
             return caml_call2
                     (check_float_tuple_4,_w_,caml_call1(_fT_[10][7],p))}],
         _gr_=
          [0,
           caml_call2(General[67][5],cst_set_source_rgba_get_rgba,_gq_),
           _gp_],
         _gs_=
          [246,
           function(_kN_)
            {caml_call1(_a_[1],183);
             var p=caml_call4(_fT_[10][6],0.1,0.2,0.3,0.4);
             caml_call1(_a_[1],184);
             return caml_call2
                     (check_float_tuple_4,_x_,caml_call1(_fT_[10][7],p))}],
         _gt_=
          [0,caml_call2(General[67][5],cst_create_rgba_get_rgba,_gs_),_gr_],
         _gu_=
          [246,
           function(_kM_)
            {caml_call1(_a_[1],181);
             var ctx=caml_call1(N[2],0);
             caml_call1(_a_[1],182);
             caml_call4(_fT_[13],ctx,0.1,0.2,0.3);
             caml_call1(_a_[1],180);
             caml_call1(_a_[1],178);
             var p=caml_call1(_fT_[16],ctx);
             caml_call1(_a_[1],179);
             return caml_call2
                     (check_float_tuple_4,_y_,caml_call1(_fT_[10][7],p))}],
         _gv_=
          [0,caml_call2(General[67][5],cst_set_source_rgb_get_rgba,_gu_),_gt_],
         _gw_=
          [246,
           function(_kL_)
            {caml_call1(_a_[1],176);
             var p=caml_call3(_fT_[10][5],0.1,0.2,0.3);
             caml_call1(_a_[1],177);
             return caml_call2
                     (check_float_tuple_4,_z_,caml_call1(_fT_[10][7],p))}],
         _gx_=[0,caml_call2(General[67][5],cst_create_rgb_get_rgba,_gw_),_gv_],
         _gy_=[0,caml_call2(General[67][4],cst_patterns,_gx_),_fW_];
        function make$0(name,f,check)
         {caml_call1(_a_[1],174);
          var
           _kJ_=
            [246,
             function(_kK_)
              {caml_call1(_a_[1],172);
               var ctx=caml_call1(N[2],0);
               caml_call1(_a_[1],173);
               caml_call1(f,ctx);
               caml_call1(_a_[1],171);
               return caml_call1(check,caml_call1(_fT_[38][1],ctx))}];
          return caml_call2(General[67][5],name,_kJ_)}
        caml_call1(_a_[1],175);
        function make$1(name,f,expected)
         {caml_call1(_a_[1],169);
          return make$0(name,f,caml_call1(check_coords(_A_),expected))}
        caml_call1(_a_[1],170);
        var _gz_=0;
        function _gA_(param)
         {var y=param[2],x=param[1];
          caml_call1(_a_[1],168);
          caml_call3(General[67][19],10,50,x);
          caml_call1(_a_[1],167);
          return caml_call3(General[67][18],0,2,y)}
        var
         _gB_=
          [0,
           make$0
            (cst_show_text,
             function(c)
              {caml_call1(_a_[1],166);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],165);
               return caml_call2(_fT_[7],c,cst_Hello)},
             _gA_),
           _gz_],
         _gC_=
          [0,
           make$1
            (cst_clip_preserve,
             function(c)
              {caml_call1(_a_[1],164);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],163);
               caml_call3(_fT_[42],c,3,4);
               caml_call1(_a_[1],162);
               return caml_call1(_fT_[32],c)},
             _B_),
           _gB_],
         _gD_=
          [0,
           make$1
            (cst_fill_preserve,
             function(c)
              {caml_call1(_a_[1],161);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],160);
               caml_call3(_fT_[42],c,3,4);
               caml_call1(_a_[1],159);
               return caml_call1(_fT_[34],c)},
             _C_),
           _gC_],
         _gE_=
          [0,
           make$1
            (cst_stroke_preserve,
             function(c)
              {caml_call1(_a_[1],158);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],157);
               caml_call3(_fT_[42],c,3,4);
               caml_call1(_a_[1],156);
               return caml_call1(_fT_[37],c)},
             _D_),
           _gD_],
         _gF_=
          [0,
           make$1
            (cst_Path_close,
             function(c)
              {caml_call1(_a_[1],155);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],154);
               caml_call3(_fT_[42],c,3,4);
               caml_call1(_a_[1],153);
               caml_call3(_fT_[42],c,5,6);
               caml_call1(_a_[1],152);
               return caml_call1(_fT_[38][3],c)},
             _E_),
           _gE_],
         _gG_=
          [0,
           make$1
            (cst_rel_line_to,
             function(c)
              {caml_call1(_a_[1],151);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],150);
               return caml_call7(_fT_[45],c,1,2,3,4,5,6)},
             _F_),
           _gF_],
         _gH_=
          [0,
           make$1
            (cst_curve_to,
             function(c)
              {caml_call1(_a_[1],149);
               return caml_call7(_fT_[41],c,1,2,3,4,5,6)},
             _G_),
           _gG_],
         _gI_=0,
         _gJ_=
          [0,
           make$1
            (cst_pi_2,
             function(c)
              {caml_call1(_a_[1],148);
               var _kI_=caml_call2(General[69][256],General[24][40],2);
               return caml_call6(_fT_[40],c,1,2,3,-1,_kI_)},
             _H_),
           _gI_],
         _gK_=caml_call1(General[24][45],2),
         _gL_=caml_call2(General[69][255],3,_gK_),
         _gM_=caml_call2(General[69][256],_gL_,2),
         _gN_=caml_call2(General[69][253],2,_gM_),
         _gO_=caml_call1(General[24][45],2),
         _gP_=caml_call2(General[69][255],3,_gO_),
         _gQ_=caml_call2(General[69][256],_gP_,2),
         _gR_=[0,caml_call2(General[69][253],1,_gQ_),_gN_],
         _gS_=
          [0,
           make$1
            (cst_pi_4,
             function(c)
              {caml_call1(_a_[1],147);
               var _kH_=caml_call2(General[69][256],General[24][40],4);
               return caml_call6(_fT_[40],c,1,2,3,0,_kH_)},
             _gR_),
           _gJ_],
         _gT_=caml_call2(General[69][255],3,0.5),
         _gU_=caml_call2(General[69][253],2,_gT_),
         _gV_=caml_call1(General[24][45],3),
         _gW_=caml_call2(General[69][255],3,_gV_),
         _gX_=caml_call2(General[69][256],_gW_,2),
         _gY_=[0,caml_call2(General[69][253],1,_gX_),_gU_],
         _gZ_=
          [0,
           make$1
            (cst_pi_6,
             function(c)
              {caml_call1(_a_[1],146);
               var _kG_=caml_call2(General[69][256],General[24][40],6);
               return caml_call6(_fT_[40],c,1,2,3,-1,_kG_)},
             _gY_),
           _gS_],
         _g0_=
          [0,
           make$1
            (cst_0,
             function(c)
              {caml_call1(_a_[1],145);
               return caml_call6(_fT_[40],c,1,2,3,-1,0)},
             _I_),
           _gZ_],
         _g1_=[0,caml_call2(General[67][4],cst_arc_negative,_g0_),_gH_],
         _g2_=0,
         _g3_=
          [0,
           make$1
            (cst_3_pi,
             function(c)
              {caml_call1(_a_[1],144);
               var
                _kE_=caml_call2(General[69][255],3,General[24][40]),
                _kF_=caml_call2(General[69][256],General[24][40],2);
               return caml_call6(_fT_[39],c,1,2,3,_kF_,_kE_)},
             _J_),
           _g2_],
         _g4_=
          [0,
           make$1
            (cst_pi_2$0,
             function(c)
              {caml_call1(_a_[1],143);
               var _kD_=caml_call2(General[69][256],General[24][40],2);
               return caml_call6(_fT_[39],c,1,2,3,-1,_kD_)},
             _K_),
           _g3_],
         _g5_=caml_call1(General[24][45],2),
         _g6_=caml_call2(General[69][255],3,_g5_),
         _g7_=caml_call2(General[69][256],_g6_,2),
         _g8_=caml_call2(General[69][253],2,_g7_),
         _g9_=caml_call1(General[24][45],2),
         _g__=caml_call2(General[69][255],3,_g9_),
         _g$_=caml_call2(General[69][256],_g__,2),
         _ha_=[0,caml_call2(General[69][253],1,_g$_),_g8_],
         _hb_=
          [0,
           make$1
            (cst_pi_4$0,
             function(c)
              {caml_call1(_a_[1],142);
               var _kC_=caml_call2(General[69][256],General[24][40],4);
               return caml_call6(_fT_[39],c,1,2,3,0,_kC_)},
             _ha_),
           _g4_],
         _hc_=caml_call2(General[69][255],3,0.5),
         _hd_=caml_call2(General[69][253],2,_hc_),
         _he_=caml_call1(General[24][45],3),
         _hf_=caml_call2(General[69][255],3,_he_),
         _hg_=caml_call2(General[69][256],_hf_,2),
         _hh_=[0,caml_call2(General[69][253],1,_hg_),_hd_],
         _hi_=
          [0,
           make$1
            (cst_pi_6$0,
             function(c)
              {caml_call1(_a_[1],141);
               var _kB_=caml_call2(General[69][256],General[24][40],6);
               return caml_call6(_fT_[39],c,1,2,3,-1,_kB_)},
             _hh_),
           _hb_],
         _hj_=
          [0,
           make$1
            (cst_0$0,
             function(c)
              {caml_call1(_a_[1],140);
               return caml_call6(_fT_[39],c,1,2,3,-1,0)},
             _L_),
           _hi_],
         _hk_=[0,caml_call2(General[67][4],cst_arc,_hj_),_g1_],
         _hl_=
          [0,
           make$1
            (cst_rectangle,
             function(c)
              {caml_call1(_a_[1],139);return caml_call5(_fT_[44],c,1,2,3,4)},
             _M_),
           _hk_],
         _hm_=
          [0,
           make$1
            (cst_rel_line_to$0,
             function(c)
              {caml_call1(_a_[1],138);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],137);
               return caml_call3(_fT_[46],c,3,4)},
             _N_),
           _hl_],
         _hn_=
          [0,
           make$1
            (cst_line_to,
             function(c)
              {caml_call1(_a_[1],136);return caml_call3(_fT_[42],c,1,2)},
             _O_),
           _hm_],
         _ho_=
          [0,
           make$1
            (cst_rel_move_to,
             function(c)
              {caml_call1(_a_[1],135);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],134);
               return caml_call3(_fT_[47],c,3,4)},
             _P_),
           _hn_],
         _hp_=
          [0,
           make$1
            (cst_save_scale_move_to_restore,
             function(c)
              {caml_call1(_a_[1],133);
               caml_call1(_fT_[11],c);
               caml_call1(_a_[1],132);
               caml_call3(_fT_[49],c,3,4);
               caml_call1(_a_[1],131);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],130);
               return caml_call1(_fT_[12],c)},
             _Q_),
           _ho_],
         _hq_=
          [0,
           make$1
            (cst_save_move_to_restore,
             function(c)
              {caml_call1(_a_[1],129);
               caml_call1(_fT_[11],c);
               caml_call1(_a_[1],128);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],127);
               return caml_call1(_fT_[12],c)},
             _R_),
           _hp_],
         _hr_=
          [0,
           make$1
            (cst_move_to_paint,
             function(c)
              {caml_call1(_a_[1],126);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],125);
               return caml_call2(_fT_[35],0,c)},
             _S_),
           _hq_],
         _hs_=
          [0,
           make$1
            (cst_paint,function(eta){return caml_call2(_fT_[35],0,eta)},_T_),
           _hr_],
         _ht_=
          [0,
           make$1
            (cst_move_to,
             function(c)
              {caml_call1(_a_[1],124);return caml_call3(_fT_[43],c,1,2)},
             _U_),
           _hs_],
         _hu_=
          [0,
           make$1
            (cst_no_op,function(param){caml_call1(_a_[1],123);return 0},_V_),
           _ht_],
         _hv_=[0,caml_call2(General[67][4],cst_current_point,_hu_),_gy_];
        function make$2(name,f)
         {caml_call1(_a_[1],121);
          var
           _kx_=
            [246,
             function(_ky_)
              {caml_call1(_a_[1],119);
               var ctx=caml_call1(N[2],0);
               caml_call1(_a_[1],120);
               var _kz_=[246,function(_kA_){return caml_call1(f,ctx)}];
               return caml_call2(General[67][9],[0,_fT_[1],2],_kz_)}];
          return caml_call2(General[67][5],name,_kx_)}
        caml_call1(_a_[1],122);
        var
         _hw_=0,
         _hx_=
          [0,
           make$2
            (cst_clip,
             function(c)
              {caml_call1(_a_[1],118);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],117);
               caml_call3(_fT_[42],c,3,4);
               caml_call1(_a_[1],116);
               caml_call1(_fT_[31],c);
               caml_call1(_a_[1],115);
               return caml_call3(_fT_[47],c,3,4)}),
           _hw_],
         _hy_=
          [0,
           make$2
            (cst_fill,
             function(c)
              {caml_call1(_a_[1],114);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],113);
               caml_call3(_fT_[42],c,3,4);
               caml_call1(_a_[1],112);
               caml_call1(_fT_[33],c);
               caml_call1(_a_[1],111);
               return caml_call3(_fT_[47],c,3,4)}),
           _hx_],
         _hz_=
          [0,
           make$2
            (cst_stroke,
             function(c)
              {caml_call1(_a_[1],110);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],109);
               caml_call3(_fT_[42],c,3,4);
               caml_call1(_a_[1],108);
               caml_call1(_fT_[36],c);
               caml_call1(_a_[1],107);
               return caml_call3(_fT_[47],c,3,4)}),
           _hy_],
         _hA_=
          [0,
           make$2
            (cst_Path_clear,
             function(c)
              {caml_call1(_a_[1],106);
               caml_call3(_fT_[43],c,1,2);
               caml_call1(_a_[1],105);
               caml_call1(_fT_[38][2],c);
               caml_call1(_a_[1],104);
               return caml_call3(_fT_[47],c,3,4)}),
           _hz_],
         _hB_=
          [0,
           make$2
            (cst_rel_curve_to,
             function(c)
              {caml_call1(_a_[1],103);
               return caml_call7(_fT_[45],c,1,2,3,4,5,6)}),
           _hA_],
         _hC_=
          [0,
           make$2
            (cst_rel_line_to$1,
             function(c)
              {caml_call1(_a_[1],102);return caml_call3(_fT_[46],c,1,2)}),
           _hB_],
         _hD_=
          [0,
           make$2
            (cst_rel_move_to$0,
             function(c)
              {caml_call1(_a_[1],101);return caml_call3(_fT_[47],c,1,2)}),
           _hC_],
         _hE_=[0,caml_call2(General[67][4],cst_no_current_point,_hD_),_hv_],
         _hF_=
          [246,
           function(_ku_)
            {caml_call1(_a_[1],99);
             var ctx=caml_call1(N[2],0);
             caml_call1(_a_[1],100);
             var _kv_=[246,function(_kw_){return caml_call1(_fT_[12],ctx)}];
             return caml_call2(General[67][9],[0,_fT_[1],0],_kv_)}],
         _hG_=[0,caml_call2(General[67][5],cst_invalid_restore,_hF_),_hE_],
         _hH_=
          [246,
           function(_kn_)
            {caml_call1(_a_[1],96);
             var ctx=caml_call1(N[2],0);
             caml_call1(_a_[1],97);
             var m=[254,1,3,2,4,5,6];
             caml_call1(_a_[1],98);
             caml_call2(_fT_[52],ctx,m);
             caml_call1(_a_[1],95);
             var _ko_=caml_call3(_fT_[57],ctx,7,8);
             caml_call2(check_coords(0),_W_,_ko_);
             caml_call1(_a_[1],94);
             var _kp_=caml_call3(_fT_[58],ctx,7,8);
             caml_call2(check_coords(0),_X_,_kp_);
             caml_call1(_a_[1],93);
             var _kq_=caml_call3(_fT_[55],ctx,7,8);
             caml_call2(check_coords(0),_Y_,_kq_);
             caml_call1(_a_[1],92);
             var _kr_=caml_call3(_fT_[56],ctx,7,8);
             caml_call2(check_coords(0),_Z_,_kr_);
             caml_call1(_a_[1],91);
             var _ks_=caml_call3(_fT_[4][11],m,7,8);
             caml_call2(check_coords(0),___,_ks_);
             caml_call1(_a_[1],90);
             var _kt_=caml_call3(_fT_[4][10],m,7,8);
             return caml_call2(check_coords(0),_$_,_kt_)}],
         _hI_=
          [0,
           caml_call2(General[67][5],cst_coordinates_transformation,_hH_),
           _hG_],
         _hJ_=0,
         _hK_=
          [246,
           function(_ke_)
            {caml_call1(_a_[1],88);
             var m=[254,1,3,2,4,5,6];
             caml_call1(_a_[1],89);
             var _kf_=caml_call2(General[69][256],General[24][40],6);
             caml_call2(_fT_[4][7],m,_kf_);
             caml_call1(_a_[1],87);
             caml_call1(_a_[1],85);
             var
              _kg_=caml_call1(General[24][45],3),
              s=caml_call2(General[69][256],_kg_,2);
             caml_call1(_a_[1],86);
             var
              _kh_=caml_call2(General[69][255],4,s),
              _ki_=caml_call2(General[69][254],_kh_,1.5),
              _kj_=caml_call2(General[69][255],2,s),
              _kk_=caml_call2(General[69][254],_kj_,0.5),
              _kl_=caml_call2(General[69][255],3,s),
              _km_=caml_call2(General[69][253],_kl_,2);
             return caml_call2
                     (check_matrix,
                      [254,caml_call2(General[69][253],s,1),_km_,_kk_,_ki_,5,6],
                      m)}],
         _hL_=[0,caml_call2(General[67][5],cst_rotate,_hK_),_hJ_],
         _hM_=
          [246,
           function(_kd_)
            {caml_call1(_a_[1],83);
             var m=[254,1,3,2,4,5,6];
             caml_call1(_a_[1],84);
             caml_call3(_fT_[4][5],m,7,8);
             caml_call1(_a_[1],82);
             return caml_call2(check_matrix,[254,1,3,2,4,28,59],m)}],
         _hN_=[0,caml_call2(General[67][5],cst_translate,_hM_),_hL_],
         _hO_=
          [246,
           function(_kc_)
            {caml_call1(_a_[1],80);
             var m=[254,1,3,2,4,5,6];
             caml_call1(_a_[1],81);
             caml_call3(_fT_[4][6],m,7,8);
             caml_call1(_a_[1],79);
             return caml_call2(check_matrix,[254,7,21,16,32,5,6],m)}],
         _hP_=[0,caml_call2(General[67][5],cst_scale,_hO_),_hN_],
         _hQ_=0,
         _hR_=
          [246,
           function(_kb_)
            {caml_call1(_a_[1],77);
             var m=[254,1,3,2,4,5,6];
             caml_call1(_a_[1],78);
             caml_call1(_fT_[4][8],m);
             caml_call1(_a_[1],76);
             return caml_call2(check_matrix,[254,-2,1.5,1,-0.5,4,-4.5],m)}],
         _hS_=[0,caml_call2(General[67][5],cst_invertible,_hR_),_hQ_],
         _hT_=
          [246,
           function(_j__)
            {var
              _j$_=
               [246,
                function(_ka_)
                 {caml_call1(_a_[1],74);
                  var m=[254,1,1,2,2,3,4];
                  caml_call1(_a_[1],75);
                  return caml_call1(_fT_[4][8],m)}];
             return caml_call2(General[67][9],[0,_fT_[1],3],_j$_)}],
         _hU_=[0,caml_call2(General[67][5],cst_non_invertible,_hT_),_hS_],
         _hV_=[0,caml_call2(General[67][4],cst_invert,_hU_),_hP_],
         _hW_=
          [246,
           function(_j4_)
            {var
              _j5_=caml_call2(General[69][256],General[24][40],6),
              _j6_=caml_call1(_fT_[4][4],_j5_),
              _j7_=caml_call1(General[24][45],3),
              _j8_=caml_call2(General[69][256],_j7_,2),
              _j9_=caml_call1(General[24][45],3);
             return caml_call2
                     (check_matrix,
                      [254,caml_call2(General[69][256],_j9_,2),0.5,-0.5,_j8_,0,0],
                      _j6_)}],
         _hX_=[0,caml_call2(General[67][5],cst_init_rotate,_hW_),_hV_],
         _hY_=
          [246,
           function(_j3_)
            {return caml_call2
                     (check_matrix,[254,2,0,0,3,0,0],caml_call2(_fT_[4][3],2,3))}],
         _hZ_=[0,caml_call2(General[67][5],cst_init_scale,_hY_),_hX_],
         _h0_=
          [246,
           function(_j2_)
            {return caml_call2
                     (check_matrix,[254,1,0,0,1,2,3],caml_call2(_fT_[4][2],2,3))}],
         _h1_=[0,caml_call2(General[67][5],cst_init_translate,_h0_),_hZ_],
         _h2_=
          [246,
           function(_j1_)
            {return caml_call2
                     (check_matrix,[254,1,0,0,1,0,0],caml_call1(_fT_[4][1],0))}],
         _h3_=[0,caml_call2(General[67][5],cst_init_identity,_h2_),_h1_],
         _h4_=[0,caml_call2(General[67][4],cst_matrix,_h3_),_hI_];
        caml_call1(_a_[1],72);
        var identity=[254,1,0,0,1,0,0];
        caml_call1(_a_[1],73);
        function make$3(name,f,expected)
         {caml_call1(_a_[1],70);
          var
           _jZ_=
            [246,
             function(_j0_)
              {caml_call1(_a_[1],68);
               var ctx=caml_call1(N[2],0);
               caml_call1(_a_[1],69);
               caml_call2(check_matrix,identity,caml_call1(_fT_[53],ctx));
               caml_call1(_a_[1],67);
               caml_call1(f,ctx);
               caml_call1(_a_[1],66);
               caml_call2(check_matrix,expected,caml_call1(_fT_[53],ctx));
               caml_call1(_a_[1],65);
               caml_call1(_fT_[11],ctx);
               caml_call1(_a_[1],64);
               caml_call2(check_matrix,expected,caml_call1(_fT_[53],ctx));
               caml_call1(_a_[1],63);
               caml_call1(_fT_[54],ctx);
               caml_call1(_a_[1],62);
               caml_call2(check_matrix,identity,caml_call1(_fT_[53],ctx));
               caml_call1(_a_[1],61);
               caml_call1(_fT_[12],ctx);
               caml_call1(_a_[1],60);
               return caml_call2
                       (check_matrix,expected,caml_call1(_fT_[53],ctx))}];
          return caml_call2(General[67][5],name,_jZ_)}
        caml_call1(_a_[1],71);
        var
         _h5_=0,
         _h6_=[254,2,9,4,12,10,18],
         _h7_=
          [0,
           make$3
            (cst_transform,
             function(c)
              {caml_call1(_a_[1],59);
               caml_call3(_fT_[49],c,2,3);
               caml_call1(_a_[1],58);
               return caml_call2(_fT_[51],c,[254,1,3,2,4,5,6])},
             _h6_),
           _h5_],
         _h8_=[254,1,3,2,4,5,6],
         _h9_=
          [0,
           make$3
            (cst_set_matrix,
             function(c)
              {caml_call1(_a_[1],57);
               return caml_call2(_fT_[52],c,[254,1,3,2,4,5,6])},
             _h8_),
           _h7_];
        caml_call1(_a_[1],55);
        var
         _h__=caml_call1(General[24][45],2),
         s=caml_call2(General[69][256],_h__,2);
        caml_call1(_a_[1],56);
        var
         _h$_=[254,s,s,caml_call1(General[69][251],s),s,0,0],
         _ia_=
          [0,
           make$3
            (cst_rotate$0,
             function(c)
              {caml_call1(_a_[1],54);
               var _jY_=caml_call2(General[69][256],General[24][40],4);
               return caml_call2(_fT_[50],c,_jY_)},
             _h$_),
           _h9_],
         _ib_=[254,2,0,0,3,0,0],
         _ic_=
          [0,
           make$3
            (cst_scale$0,
             function(c)
              {caml_call1(_a_[1],53);return caml_call3(_fT_[49],c,2,3)},
             _ib_),
           _ia_],
         _id_=[254,1,0,0,1,2,3],
         _ie_=
          [0,
           make$3
            (cst_translate$0,
             function(c)
              {caml_call1(_a_[1],52);return caml_call3(_fT_[48],c,2,3)},
             _id_),
           _ic_],
         _if_=[0,caml_call2(General[67][4],cst_transformations,_ie_),_h4_],
         _ig_=0,
         _ih_=
          [246,
           function(_jW_)
            {var _jX_=caml_call1(General[9][5],Not_found);
             return caml_call2(General[67][13],cst_Not_found,_jX_)}],
         _ii_=[0,caml_call2(General[67][5],cst_Not_Cairo,_ih_),_ig_],
         _ij_=
          [246,
           function(_jT_)
            {var
              _jU_=caml_call1(General[9][5],[0,_fT_[1],0]),
              _jV_=caml_call2(General[59][2],_aa_,_fV_);
             return caml_call2(General[67][13],_jV_,_jU_)}],
         _ik_=[0,caml_call2(General[67][5],cst_Cairo_Error,_ij_),_ii_],
         _il_=[0,caml_call2(General[67][4],cst_exceptions,_ik_),_if_];
        function make$4(name,status,expected)
         {caml_call1(_a_[1],50);
          var
           _jQ_=
            [246,
             function(_jR_)
              {var _jS_=caml_call1(_fT_[2],status);
               return caml_call2(General[67][13],expected,_jS_)}];
          return caml_call2(General[67][5],name,_jQ_)}
        caml_call1(_a_[1],51);
        var
         _im_=
          [0,
           make$4
            (cst_JBIG2_GLOBAL_MISSING,
             36,
             cst_CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID_used_but_no_CAIRO_MIME_TYPE_JBIG2_GLOBAL_data_provided),
           0],
         _in_=
          [0,
           make$4
            (cst_DEVICE_FINISHED,35,cst_the_target_device_has_been_finished),
           _im_],
         _io_=
          [0,
           make$4
            (cst_INVALID_MESH_CONSTRUCTION,
             34,
             cst_invalid_operation_during_mesh_pattern_construction),
           _in_],
         _ip_=
          [0,
           make$4
            (cst_DEVICE_ERROR,
             33,
             cst_an_operation_to_the_device_caused_an_unspecified_error),
           _io_],
         _iq_=
          [0,
           make$4
            (cst_DEVICE_TYPE_MISMATCH,
             32,
             cst_the_device_type_is_not_appropriate_for_the_operation),
           _ip_],
         _ir_=
          [0,
           make$4
            (cst_USER_FONT_NOT_IMPLEMENTED,
             31,
             cst_user_font_method_not_implemented),
           _iq_],
         _is_=
          [0,
           make$4
            (cst_INVALID_SIZE,
             30,
             cst_invalid_value_typically_too_big_for_the_size_of_the_input_surface_pattern_etc),
           _ir_],
         _it_=
          [0,
           make$4
            (cst_INVALID_WEIGHT,
             29,
             cst_invalid_value_for_an_input_cairo_font_weight_t),
           _is_],
         _iu_=
          [0,
           make$4
            (cst_INVALID_SLANT,
             28,
             cst_invalid_value_for_an_input_cairo_font_slant_t),
           _it_],
         _iv_=
          [0,
           make$4
            (cst_INVALID_CLUSTERS,
             27,
             cst_input_clusters_do_not_represent_the_accompanying_text_and_glyph_arrays),
           _iu_],
         _iw_=
          [0,
           make$4
            (cst_NEGATIVE_COUNT,
             26,
             cst_negative_number_used_where_it_is_not_allowed),
           _iv_],
         _ix_=
          [0,
           make$4
            (cst_USER_FONT_ERROR,
             25,
             cst_error_occurred_in_a_user_font_callback_function),
           _iw_],
         _iy_=
          [0,
           make$4(cst_USER_FONT_IMMUTABLE,24,cst_the_user_font_is_immutable),
           _ix_],
         _iz_=
          [0,
           make$4
            (cst_FONT_TYPE_MISMATCH,
             23,
             cst_the_font_type_is_not_appropriate_for_the_operation),
           _iy_],
         _iA_=
          [0,make$4(cst_INVALID_STRIDE,22,cst_invalid_value_for_stride),_iz_],
         _iB_=
          [0,
           make$4
            (cst_TEMP_FILE_ERROR,
             21,
             cst_error_creating_or_writing_to_a_temporary_file),
           _iA_],
         _iC_=
          [0,
           make$4
            (cst_CLIP_NOT_REPRESENTABLE,
             20,
             cst_clip_region_not_representable_in_desired_format),
           _iB_],
         _iD_=
          [0,
           make$4(cst_INVALID_INDEX,19,cst_invalid_index_passed_to_getter),
           _iC_],
         _iE_=
          [0,
           make$4
            (cst_INVALID_DSC_COMMENT,18,cst_invalid_value_for_a_DSC_comment),
           _iD_],
         _iF_=
          [0,
           make$4(cst_INVALID_DASH,17,cst_invalid_value_for_a_dash_setting),
           _iE_],
         _iG_=[0,make$4(cst_FILE_NOT_FOUND,16,cst_file_not_found),_iF_],
         _iH_=
          [0,
           make$4(cst_INVALID_VISUAL,15,cst_invalid_value_for_an_input_Visual),
           _iG_],
         _iI_=
          [0,
           make$4
            (cst_INVALID_FORMAT,
             14,
             cst_invalid_value_for_an_input_cairo_format_t),
           _iH_],
         _iJ_=
          [0,
           make$4
            (cst_INVALID_CONTENT,
             13,
             cst_invalid_value_for_an_input_cairo_content_t),
           _iI_],
         _iK_=
          [0,
           make$4
            (cst_PATTERN_TYPE_MISMATCH,
             12,
             cst_the_pattern_type_is_not_appropriate_for_the_operation),
           _iJ_],
         _iL_=
          [0,
           make$4
            (cst_SURFACE_TYPE_MISMATCH,
             11,
             cst_the_surface_type_is_not_appropriate_for_the_operation),
           _iK_],
         _iM_=
          [0,
           make$4
            (cst_SURFACE_FINISHED,10,cst_the_target_surface_has_been_finished),
           _iL_],
         _iN_=
          [0,
           make$4(cst_WRITE_ERROR,9,cst_error_while_writing_to_output_stream),
           _iM_],
         _iO_=
          [0,
           make$4(cst_READ_ERROR,8,cst_error_while_reading_from_input_stream),
           _iN_],
         _iP_=
          [0,
           make$4(cst_INVALID_PATH_DATA,7,cst_input_path_data_not_valid),
           _iO_],
         _iQ_=
          [0,
           make$4(cst_INVALID_STRING,6,cst_input_string_not_valid_UTF_8),
           _iP_],
         _iR_=[0,make$4(cst_NULL_POINTER,5,cst_NULL_pointer),_iQ_],
         _iS_=
          [0,
           make$4
            (cst_INVALID_STATUS,
             4,
             cst_invalid_value_for_an_input_cairo_status_t),
           _iR_],
         _iT_=
          [0,
           make$4(cst_INVALID_MATRIX,3,cst_invalid_matrix_not_invertible),
           _iS_],
         _iU_=
          [0,make$4(cst_NO_CURRENT_POINT,2,cst_no_current_point_defined),_iT_],
         _iV_=
          [0,
           make$4
            (cst_INVALID_POP_GROUP,
             1,
             cst_no_saved_group_to_pop_i_e_cairo_pop_group_without_matching_cairo_push_group),
           _iU_],
         _iW_=
          [0,
           make$4
            (cst_INVALID_RESTORE,
             0,
             cst_cairo_restore_without_matching_cairo_save),
           _iV_],
         _iX_=[0,caml_call2(General[67][4],cst_status_to_string,_iW_),_il_];
        function make$5
         (name,setter,getter,check,initial_value,other_value,other_values)
         {caml_call1(_a_[1],48);
          var
           _jK_=
            [246,
             function(_jL_)
              {caml_call1(_a_[1],46);
               var ctx=caml_call1(N[2],0);
               caml_call1(_a_[1],47);
               caml_call2(check,initial_value,caml_call1(getter,ctx));
               caml_call1(_a_[1],45);
               caml_call1(_a_[1],44);
               var _jM_=General[40][40];
               function _jN_(value)
                {caml_call1(_a_[1],43);
                 caml_call2(setter,ctx,value);
                 caml_call1(_a_[1],42);
                 caml_call2(check,value,caml_call1(getter,ctx));
                 caml_call1(_a_[1],41);
                 caml_call1(_fT_[11],ctx);
                 caml_call1(_a_[1],40);
                 caml_call2(check,value,caml_call1(getter,ctx));
                 caml_call1(_a_[1],39);
                 caml_call2(setter,ctx,other_value);
                 caml_call1(_a_[1],38);
                 caml_call2(check,other_value,caml_call1(getter,ctx));
                 caml_call1(_a_[1],37);
                 caml_call1(_fT_[12],ctx);
                 caml_call1(_a_[1],36);
                 return caml_call2(check,value,caml_call1(getter,ctx))}
               function _jO_(_jP_){return caml_call2(_jM_,_jP_,_jN_)}
               return caml_call2
                       (General[69][259],
                        [0,initial_value,[0,other_value,other_values]],
                        _jO_)}];
          return caml_call2(General[67][5],name,_jK_)}
        caml_call1(_a_[1],49);
        var _iY_=0;
        function _iZ_(c)
         {caml_call1(_a_[1],35);
          caml_call1(_a_[1],34);
          var _jI_=_fT_[10][7],_jJ_=caml_call1(_fT_[16],c);
          return caml_call2(General[69][259],_jJ_,_jI_)}
        var
         _i0_=
          [0,
           make$5
            (cst_source,
             function(c,param)
              {var a=param[4],b=param[3],g=param[2],r=param[1];
               caml_call1(_a_[1],33);
               return caml_call5(_fT_[14],c,r,g,b,a)},
             _iZ_,
             check_float_tuple_4,
             _ad_,
             _ac_,
             _ab_),
           _iY_],
         _i1_=0,
         _i2_=2,
         _i3_=0,
         _i4_=General[67][20];
        function _i5_(c)
         {caml_call1(_a_[1],32);
          caml_call1(_a_[1],31);
          var _jG_=General[30][16],_jH_=caml_call1(_fT_[26],c);
          return caml_call2(General[69][259],_jH_,_jG_)}
        var
         _i6_=
          [0,
           make$5
            (cst_offset,
             function(c,ofs)
              {caml_call1(_a_[1],30);
               return caml_call3(_fT_[25],c,[0,ofs],[254,10,10])},
             _i5_,
             _i4_,
             _i3_,
             _i2_,
             _ae_),
           _i1_];
        function repr$3(dashes)
         {var
           _jx_=caml_call1(General[59][2],_af_),
           _jy_=caml_call1(General[50][82],_ag_),
           _jz_=General[40][19],
           _jA_=General[24][7];
          function _jB_(_jF_){return caml_call2(_jz_,_jF_,_jA_)}
          var
           _jC_=caml_call2(General[69][259],dashes,General[40][6]),
           _jD_=caml_call2(General[69][259],_jC_,_jB_),
           _jE_=caml_call2(General[69][259],_jD_,_jy_);
          return caml_call2(General[69][259],_jE_,_jx_)}
        var
         _i7_=caml_call2(General[69][264],N[3],95560584),
         _i8_=caml_call2(General[69][264],N[3],870528546),
         _i9_=
          caml_call2(General[69][243],_i8_,_i7_)
           ?0
           :[0,[254,3],[0,[254,4,5,6],0]],
         _i__=
          caml_call2
           (General[69][272],[0,[254,3,4,5,6],[0,_ah_.slice(),0]],_i9_),
         _i$_=[254,1,2],
         _ja_=[0],
         _jb_=caml_call1(General[67][12],repr$3);
        function _jc_(c)
         {var _jv_=General[30][15],_jw_=caml_call1(_fT_[26],c);
          return caml_call2(General[69][259],_jw_,_jv_)}
        var
         _jd_=
          [0,
           make$5
            (cst_dashes,
             function(c,dashes){return caml_call3(_fT_[25],c,0,dashes)},
             _jc_,
             _jb_,
             _ja_,
             _i$_,
             _i__),
           _i6_],
         _je_=[0,caml_call2(General[67][4],cst_dash,_jd_),_i0_];
        caml_call1(_a_[1],29);
        function repr$4(param)
         {switch(param)
           {case 0:return cst_CLEAR;
            case 1:return cst_SOURCE;
            case 2:return cst_OVER;
            case 3:return cst_IN;
            case 4:return cst_OUT;
            case 5:return cst_ATOP;
            case 6:return cst_DEST;
            case 7:return cst_DEST_OVER;
            case 8:return cst_DEST_IN;
            case 9:return cst_DEST_OUT;
            case 10:return cst_DEST_ATOP;
            case 11:return cst_XOR;
            case 12:return cst_ADD;
            default:return cst_SATURATE}}
        var
         _jf_=caml_call2(General[69][264],N[3],95560584),
         _jg_=caml_call2(General[69][264],N[3],870528546),
         _jh_=caml_call2(General[69][243],_jg_,_jf_)?0:_ao_,
         _ji_=caml_call2(General[69][272],_ai_,_jh_),
         _jj_=caml_call1(General[67][12],repr$4),
         _jk_=[0,make$5(cst_operator,_fT_[27],_fT_[28],_jj_,2,3,_ji_),_je_];
        caml_call1(_a_[1],27);
        function repr$5(param)
         {switch(param)
           {case 0:return cst_JOIN_MITER;
            case 1:return cst_JOIN_ROUND;
            default:return cst_JOIN_BEVEL}}
        caml_call1(_a_[1],28);
        var
         _jl_=caml_call1(General[67][12],repr$5),
         _jm_=[0,make$5(cst_line_join,_fT_[19],_fT_[20],_jl_,0,1,_aj_),_jk_];
        caml_call1(_a_[1],25);
        function repr$6(param)
         {switch(param)
           {case 0:return cst_BUTT;
            case 1:return cst_ROUND;
            default:return cst_SQUARE}}
        caml_call1(_a_[1],26);
        var
         _jn_=caml_call1(General[67][12],repr$6),
         _jo_=[0,make$5(cst_line_cap,_fT_[17],_fT_[18],_jn_,0,1,_ak_),_jm_];
        caml_call1(_a_[1],23);
        function repr$7(param){return 0 === param?cst_WINDING:cst_EVEN_ODD}
        caml_call1(_a_[1],24);
        var
         _jp_=caml_call1(General[67][12],repr$7),
         _jq_=[0,make$5(cst_fill_rule,_fT_[29],_fT_[30],_jp_,0,1,0),_jo_],
         _jr_=
          [0,
           make$5(cst_miter_limit,_fT_[23],_fT_[24],General[67][20],10,5,_al_),
           _jq_],
         _js_=
          [0,
           make$5(cst_line_width,_fT_[21],_fT_[22],General[67][20],2,1,_am_),
           _jr_],
         _jt_=
          [0,
           caml_call2(General[67][4],cst_saved_and_restored_settings,_js_),
           _iX_],
         _ju_=N[1];
        return [0,
                _fV_,
                check_matrix,
                check_coords,
                check_float_tuple_4,
                check_float_tuple_5,
                check_float_tuple_6,
                caml_call2(caml_call1(General[67][7],_an_),_ju_,_jt_)]}}
    var Tests_Universal=[0,_a_,_b_];
    caml_register_global(1350,Tests_Universal,"Tests__Universal");
    var
     match$0=
      caml_call3
       (Bisect_Runtime[1],cst_tst_Tests_Decoration_ml,83,point_definitions$0),
     cb$0=match$0[2],
     _ap_=[0,cb$0];
    function _aq_(_dJ_)
     {return function(N)
       {var DecoratedC=caml_call1(CairoMock[2],_dJ_);
        caml_call1(_ap_[1],2);
        var _dK_=N[3];
        if(553448210 === _dK_)
         {caml_call1(_ap_[1],1);var _dL_=cst_CairoMock$0}
        else
         if(-733568919 <= _dK_)
          {if(95560584 !== _dK_)870528546 === _dK_;var _dL_=cst_JsOfOCairo$0}
         else
          {caml_call1(_ap_[1],0);var _dL_=cst_Cairo$0}
        function make_n(name,fs,checks)
         {caml_call1(_ap_[1],9);
          var
           _fI_=
            [246,
             function(_fJ_)
              {caml_call1(_ap_[1],7);
               var _fK_=caml_call1(N[2],0),c=caml_call1(DecoratedC[59],_fK_);
               caml_call1(_ap_[1],8);
               function _fL_(f)
                {caml_call1(_ap_[1],5);
                 var _fS_=caml_call1(f,c);
                 return caml_call1(General[69][270],_fS_)}
               caml_call2(General[40][40],fs,_fL_);
               caml_call1(_ap_[1],6);
               caml_call1(_ap_[1],4);
               var _fM_=General[40][40];
               function _fN_(param)
                {var actual=param[2],check=param[1];
                 caml_call1(_ap_[1],3);
                 return caml_call1(check,actual)}
               function _fO_(_fR_){return caml_call2(_fM_,_fR_,_fN_)}
               var
                _fP_=caml_call1(DecoratedC[60],c),
                _fQ_=caml_call2(General[40][82][1],checks,_fP_);
               return caml_call2(General[69][259],_fQ_,_fO_)}];
          return caml_call2(General[67][5],name,_fI_)}
        function make(name,f,check)
         {caml_call1(_ap_[1],10);return make_n(name,[0,f,0],[0,check,0])}
        function make_n$0(name,fs,expected)
         {caml_call1(_ap_[1],12);
          function _fH_(expected)
           {caml_call1(_ap_[1],11);
            return caml_call1(General[67][13],expected)}
          return make_n(name,fs,caml_call2(General[40][19],expected,_fH_))}
        function make$0(name,f,expected)
         {caml_call1(_ap_[1],14);
          function _fG_(expected)
           {caml_call1(_ap_[1],13);
            return make_n$0(name,[0,f,0],[0,expected,0])}
          return caml_call2(General[59][1],expected,_fG_)}
        function catch$0(error,f,ctx)
         {caml_call1(_ap_[1],15);
          var _fE_=[246,function(_fF_){return caml_call1(f,ctx)}];
          return caml_call2(General[67][9],[0,DecoratedC[1],error],_fE_)}
        caml_call1(_ap_[1],82);
        var _dM_=0;
        function _dN_(ascent,descent,param,_fD_,_fC_)
         {caml_call1(_ap_[1],81);
          caml_call3(General[67][19],5,15,ascent);
          caml_call1(_ap_[1],80);
          return caml_call3(General[67][19],1,7,descent)}
        var
         _dO_=caml_call2(General[59][6],_ar_,_dN_),
         _dP_=[0,make(cst_font_extents,DecoratedC[8],_dO_),_dM_];
        function _dQ_(param,_fB_,width,_fA_,_fz_,_fy_)
         {caml_call1(_ap_[1],79);
          return caml_call3(General[67][19],10,50,width)}
        var
         _dR_=caml_call2(General[59][6],_as_,_dQ_),
         _dS_=
          [0,
           make
            (cst_text_extents,
             function(c)
              {caml_call1(_ap_[1],78);
               return caml_call2(DecoratedC[9],c,cst_abcd)},
             _dR_),
           _dP_],
         _dT_=
          [0,
           make$0
            (cst_show_text$0,
             function(c)
              {caml_call1(_ap_[1],77);
               return caml_call2(DecoratedC[7],c,cst_flibidiboo)},
             _at_),
           _dS_],
         _dU_=
          [0,
           make$0
            (cst_select_font_face_Italic_Bold,
             function(c)
              {caml_call1(_ap_[1],76);
               return caml_call4(DecoratedC[5],c,_aw_,_av_,cst_foo_bar)},
             _au_),
           _dT_],
         _dV_=
          [0,
           make$0
            (cst_select_font_face_Normal,
             function(c)
              {caml_call1(_ap_[1],75);
               return caml_call4(DecoratedC[5],c,0,_ay_,cst_foo_bar$0)},
             _ax_),
           _dU_],
         _dW_=
          [0,
           make$0
            (cst_select_font_face_Oblique,
             function(c)
              {caml_call1(_ap_[1],74);
               return caml_call4(DecoratedC[5],c,_aA_,0,cst_foo_bar$1)},
             _az_),
           _dV_],
         _dX_=
          [0,
           make$0
            (cst_select_font_face_Upright,
             function(c)
              {caml_call1(_ap_[1],73);
               return caml_call4(DecoratedC[5],c,_aC_,0,cst_foo_bar$2)},
             _aB_),
           _dW_],
         _dY_=
          [0,
           make$0
            (cst_select_font_face,
             function(c)
              {caml_call1(_ap_[1],72);
               return caml_call4(DecoratedC[5],c,0,0,cst_foo_bar$3)},
             _aD_),
           _dX_],
         _dZ_=
          [0,
           make$0
            (cst_set_font_size,
             function(c)
              {caml_call1(_ap_[1],71);return caml_call2(DecoratedC[6],c,3)},
             _aE_),
           _dY_],
         _d0_=[0,make$0(cst_get_source,DecoratedC[16],_aF_),_dZ_],
         _d1_=
          [0,
           make$0
            (cst_set_source_RadialGradient,
             function(c)
              {caml_call1(_ap_[1],70);
               var _fx_=caml_call6(DecoratedC[10][10],1,2,5,3,4,6);
               return caml_call2(DecoratedC[15],c,_fx_)},
             _aG_),
           _d0_],
         _d2_=
          [0,
           make$0
            (cst_set_source_LinearGradient,
             function(c)
              {caml_call1(_ap_[1],69);
               caml_call1(_ap_[1],67);
               var p=caml_call4(DecoratedC[10][8],1,2,3,4);
               caml_call1(_ap_[1],68);
               caml_call5(DecoratedC[10][1],p,0,0.1,0.2,0.3);
               caml_call1(_ap_[1],66);
               return caml_call2(DecoratedC[15],c,p)},
             _aH_),
           _d1_],
         _d3_=
          [0,
           make$0
            (cst_set_source_Rgba,
             function(c)
              {caml_call1(_ap_[1],65);
               var _fw_=caml_call3(DecoratedC[10][5],0.5,0.6,0.7);
               return caml_call2(DecoratedC[15],c,_fw_)},
             _aI_),
           _d2_],
         _d4_=
          [0,
           make$0
            (cst_set_source_rgba,
             function(c)
              {caml_call1(_ap_[1],64);
               return caml_call5(DecoratedC[14],c,0.5,0.6,0.7,0.8)},
             _aJ_),
           _d3_],
         _d5_=
          [0,
           make$0
            (cst_set_source_rgb,
             function(c)
              {caml_call1(_ap_[1],63);
               return caml_call4(DecoratedC[13],c,0.5,0.6,0.7)},
             _aK_),
           _d4_],
         _d6_=[0,make$0(cst_get_operator,DecoratedC[28],_aL_),_d5_],
         _d7_=caml_call2(General[69][264],N[3],95560584),
         _d8_=caml_call2(General[69][264],N[3],870528546);
        if(caml_call2(General[69][243],_d8_,_d7_))
         var _d9_=0;
        else
         var
          _fo_=0,
          _fp_=
           [0,
            make$0
             (cst_set_operator_SATURATE,
              function(c)
               {caml_call1(_ap_[1],62);return caml_call2(DecoratedC[27],c,13)},
              _bM_),
            _fo_],
          _fq_=
           [0,
            make$0
             (cst_set_operator_SOURCE,
              function(c)
               {caml_call1(_ap_[1],61);return caml_call2(DecoratedC[27],c,1)},
              _bN_),
            _fp_],
          _fr_=
           [0,
            make$0
             (cst_set_operator_CLEAR,
              function(c)
               {caml_call1(_ap_[1],60);return caml_call2(DecoratedC[27],c,0)},
              _bO_),
            _fq_],
          _d9_=
           [0,
            make$0
             (cst_set_operator_DEST,
              function(c)
               {caml_call1(_ap_[1],59);return caml_call2(DecoratedC[27],c,6)},
              _bP_),
            _fr_];
        var
         _d__=caml_call2(General[69][272],_d9_,_d6_),
         _d$_=0,
         _ea_=
          [0,
           make$0
            (cst_set_operator_ADD,
             function(c)
              {caml_call1(_ap_[1],58);return caml_call2(DecoratedC[27],c,12)},
             _aM_),
           _d$_],
         _eb_=
          [0,
           make$0
            (cst_set_operator_XOR,
             function(c)
              {caml_call1(_ap_[1],57);return caml_call2(DecoratedC[27],c,11)},
             _aN_),
           _ea_],
         _ec_=
          [0,
           make$0
            (cst_set_operator_DEST_ATOP,
             function(c)
              {caml_call1(_ap_[1],56);return caml_call2(DecoratedC[27],c,10)},
             _aO_),
           _eb_],
         _ed_=
          [0,
           make$0
            (cst_set_operator_DEST_OUT,
             function(c)
              {caml_call1(_ap_[1],55);return caml_call2(DecoratedC[27],c,9)},
             _aP_),
           _ec_],
         _ee_=
          [0,
           make$0
            (cst_set_operator_DEST_IN,
             function(c)
              {caml_call1(_ap_[1],54);return caml_call2(DecoratedC[27],c,8)},
             _aQ_),
           _ed_],
         _ef_=
          [0,
           make$0
            (cst_set_operator_DEST_OVER,
             function(c)
              {caml_call1(_ap_[1],53);return caml_call2(DecoratedC[27],c,7)},
             _aR_),
           _ee_],
         _eg_=
          [0,
           make$0
            (cst_set_operator_ATOP,
             function(c)
              {caml_call1(_ap_[1],52);return caml_call2(DecoratedC[27],c,5)},
             _aS_),
           _ef_],
         _eh_=
          [0,
           make$0
            (cst_set_operator_OUT,
             function(c)
              {caml_call1(_ap_[1],51);return caml_call2(DecoratedC[27],c,4)},
             _aT_),
           _eg_],
         _ei_=
          [0,
           make$0
            (cst_set_operator_IN,
             function(c)
              {caml_call1(_ap_[1],50);return caml_call2(DecoratedC[27],c,3)},
             _aU_),
           _eh_],
         _ej_=[0,make$0(cst_get_miter_limit,DecoratedC[24],_aV_),_ei_],
         _ek_=
          [0,
           make$0
            (cst_set_miter_limit,
             function(c)
              {caml_call1(_ap_[1],49);return caml_call2(DecoratedC[23],c,3)},
             _aW_),
           _ej_],
         _el_=[0,make$0(cst_get_line_join,DecoratedC[20],_aX_),_ek_],
         _em_=
          [0,
           make$0
            (cst_set_line_join_JOIN_BEVEL,
             function(c)
              {caml_call1(_ap_[1],48);return caml_call2(DecoratedC[19],c,2)},
             _aY_),
           _el_],
         _en_=
          [0,
           make$0
            (cst_set_line_join_JOIN_ROUND,
             function(c)
              {caml_call1(_ap_[1],47);return caml_call2(DecoratedC[19],c,1)},
             _aZ_),
           _em_],
         _eo_=[0,make$0(cst_get_line_cap,DecoratedC[18],_a0_),_en_],
         _ep_=
          [0,
           make$0
            (cst_set_line_cap_SQUARE,
             function(c)
              {caml_call1(_ap_[1],46);return caml_call2(DecoratedC[17],c,2)},
             _a1_),
           _eo_],
         _eq_=
          [0,
           make$0
            (cst_set_line_cap_ROUND,
             function(c)
              {caml_call1(_ap_[1],45);return caml_call2(DecoratedC[17],c,1)},
             _a2_),
           _ep_],
         _er_=[0,make$0(cst_get_fill_rule,DecoratedC[30],_a3_),_eq_],
         _es_=
          [0,
           make$0
            (cst_set_fill_rule,
             function(c)
              {caml_call1(_ap_[1],44);return caml_call2(DecoratedC[29],c,1)},
             _a4_),
           _er_],
         _et_=[0,make$0(cst_get_dash,DecoratedC[26],_a5_),_es_],
         _eu_=
          [0,
           make$0
            (cst_set_dash_with_ofs,
             function(c)
              {caml_call1(_ap_[1],43);
               return caml_call3(DecoratedC[25],c,_a7_,[254,3,4])},
             _a6_),
           _et_],
         _ev_=
          [0,
           make$0
            (cst_set_dash,
             function(c)
              {caml_call1(_ap_[1],42);
               return caml_call3(DecoratedC[25],c,0,[254,2,3])},
             _a8_),
           _eu_],
         _ew_=[0,make$0(cst_get_line_width,DecoratedC[22],_a9_),_ev_],
         _ex_=
          [0,
           make$0
            (cst_set_line_width,
             function(c)
              {caml_call1(_ap_[1],41);return caml_call2(DecoratedC[21],c,3)},
             _a__),
           _ew_],
         _ey_=
          [0,
           make$0(cst_paint_with_alpha,caml_call1(DecoratedC[35],_ba_),_a$_),
           _ex_],
         _ez_=
          [0,
           make$0
            (cst_paint$0,
             function(eta){return caml_call2(DecoratedC[35],0,eta)},
             _bb_),
           _ey_],
         _eA_=[0,make$0(cst_clip_preserve$0,DecoratedC[32],_bc_),_ez_],
         _eB_=[0,make$0(cst_clip$0,DecoratedC[31],_bd_),_eA_],
         _eC_=[0,make$0(cst_fill_preserve$0,DecoratedC[34],_be_),_eB_],
         _eD_=[0,make$0(cst_fill$0,DecoratedC[33],_bf_),_eC_],
         _eE_=[0,make$0(cst_stroke_preserve$0,DecoratedC[37],_bg_),_eD_],
         _eF_=[0,make$0(cst_stroke$0,DecoratedC[36],_bh_),_eE_],
         _eG_=
          [0,
           caml_call2(General[69][260],General[69][270],DecoratedC[38][1]),
           0],
         _eH_=
          [0,
           make_n$0
            (cst_move_to_Path_get_current_point,
             [0,
              function(c)
               {caml_call1(_ap_[1],40);
                return caml_call3(DecoratedC[43],c,1,2)},
              _eG_],
             _bi_),
           _eF_],
         _eI_=
          [0,make$0(cst_Path_get_current_point,DecoratedC[38][1],_bj_),_eH_],
         _eJ_=[0,make$0(cst_Path_clear$0,DecoratedC[38][2],_bk_),_eI_],
         _eK_=[0,make$0(cst_Path_close$0,DecoratedC[38][3],_bl_),_eJ_],
         _eL_=
          [0,
           make$0
            (cst_arc_negative$0,
             function(c)
              {caml_call1(_ap_[1],39);
               return caml_call6(DecoratedC[40],c,1,2,3,4,5)},
             _bm_),
           _eK_],
         _eM_=
          [0,
           make$0
            (cst_arc$0,
             function(c)
              {caml_call1(_ap_[1],38);
               return caml_call6(DecoratedC[39],c,1,2,3,4,5)},
             _bn_),
           _eL_],
         _eN_=
          [0,
           make$0
            (cst_rectangle$0,
             function(c)
              {caml_call1(_ap_[1],37);
               return caml_call5(DecoratedC[44],c,2,3,4,5)},
             _bo_),
           _eM_],
         _eO_=0,
         _eP_=
          [0,
           function(c)
            {caml_call1(_ap_[1],36);
             return caml_call7(DecoratedC[45],c,1,2,3,4,5,6)},
           _eO_],
         _eQ_=
          [0,
           make_n$0
            (cst_rel_curve_to$0,
             [0,
              function(c)
               {caml_call1(_ap_[1],35);
                return caml_call3(DecoratedC[43],c,1,2)},
              _eP_],
             _bp_),
           _eN_];
        function _eR_(c)
         {caml_call1(_ap_[1],34);
          return caml_call7(DecoratedC[45],c,1,2,3,4,5,6)}
        var
         _eS_=2,
         _eT_=
          [0,
           caml_call1
            (make$0
              (cst_invalid_rel_curve_to,
               function(_fv_){return catch$0(_eS_,_eR_,_fv_)},
               _bq_),
             _dL_),
           _eQ_],
         _eU_=
          [0,
           make$0
            (cst_curve_to$0,
             function(c)
              {caml_call1(_ap_[1],33);
               return caml_call7(DecoratedC[41],c,1,2,3,4,5,6)},
             _br_),
           _eT_],
         _eV_=0,
         _eW_=
          [0,
           function(c)
            {caml_call1(_ap_[1],32);return caml_call3(DecoratedC[46],c,3,4)},
           _eV_],
         _eX_=
          [0,
           make_n$0
            (cst_rel_line_to$2,
             [0,
              function(c)
               {caml_call1(_ap_[1],31);
                return caml_call3(DecoratedC[43],c,1,2)},
              _eW_],
             _bs_),
           _eU_];
        function _eY_(c)
         {caml_call1(_ap_[1],30);
          return caml_call3(DecoratedC[46],c,4.05,2.957)}
        var
         _eZ_=2,
         _e0_=
          [0,
           caml_call1
            (make$0
              (cst_invalid_rel_line_to,
               function(_fu_){return catch$0(_eZ_,_eY_,_fu_)},
               _bt_),
             _dL_),
           _eX_],
         _e1_=
          [0,
           make$0
            (cst_line_to$0,
             function(c)
              {caml_call1(_ap_[1],29);
               return caml_call3(DecoratedC[42],c,4.05,2.957)},
             _bu_),
           _e0_],
         _e2_=0,
         _e3_=
          [0,
           function(c)
            {caml_call1(_ap_[1],28);return caml_call3(DecoratedC[47],c,3,4)},
           _e2_],
         _e4_=
          [0,
           make_n$0
            (cst_rel_move_to$1,
             [0,
              function(c)
               {caml_call1(_ap_[1],27);
                return caml_call3(DecoratedC[43],c,1,2)},
              _e3_],
             _bv_),
           _e1_];
        function _e5_(c)
         {caml_call1(_ap_[1],26);
          return caml_call3(DecoratedC[47],c,4.05,2.957)}
        var
         _e6_=2,
         _e7_=
          [0,
           caml_call1
            (make$0
              (cst_invalid_rel_move_to,
               function(_ft_){return catch$0(_e6_,_e5_,_ft_)},
               _bw_),
             _dL_),
           _e4_],
         _e8_=
          [0,
           make$0
            (cst_move_to$0,
             function(c)
              {caml_call1(_ap_[1],25);
               return caml_call3(DecoratedC[43],c,4.05,2.957)},
             _bx_),
           _e7_],
         _e9_=
          [0,
           make$0
            (cst_device_to_user_distance,
             function(c)
              {caml_call1(_ap_[1],24);return caml_call3(DecoratedC[58],c,2,3)},
             _by_),
           _e8_],
         _e__=
          [0,
           make$0
            (cst_device_to_user,
             function(c)
              {caml_call1(_ap_[1],23);return caml_call3(DecoratedC[57],c,2,3)},
             _bz_),
           _e9_],
         _e$_=
          [0,
           make$0
            (cst_user_to_device_distance,
             function(c)
              {caml_call1(_ap_[1],22);return caml_call3(DecoratedC[56],c,2,3)},
             _bA_),
           _e__],
         _fa_=
          [0,
           make$0
            (cst_user_to_device,
             function(c)
              {caml_call1(_ap_[1],21);return caml_call3(DecoratedC[55],c,2,3)},
             _bB_),
           _e$_],
         _fb_=[0,make$0(cst_get_matrix,DecoratedC[53],_bC_),_fa_],
         _fc_=[0,make$0(cst_identity_matrix,DecoratedC[54],_bD_),_fb_],
         _fd_=
          [0,
           make$0
            (cst_set_matrix$0,
             function(c)
              {caml_call1(_ap_[1],20);
               return caml_call2(DecoratedC[52],c,[254,1,3,2,4,5,6])},
             _bE_),
           _fc_],
         _fe_=
          [0,
           make$0
            (cst_transform$0,
             function(c)
              {caml_call1(_ap_[1],19);
               return caml_call2(DecoratedC[51],c,[254,1,3,2,4,5,6])},
             _bF_),
           _fd_],
         _ff_=
          [0,
           make$0
            (cst_rotate$1,
             function(c)
              {caml_call1(_ap_[1],18);return caml_call2(DecoratedC[50],c,3)},
             _bG_),
           _fe_],
         _fg_=
          [0,
           make$0
            (cst_translate$1,
             function(c)
              {caml_call1(_ap_[1],17);return caml_call3(DecoratedC[48],c,3,2)},
             _bH_),
           _ff_],
         _fh_=
          [0,
           make$0
            (cst_scale$1,
             function(c)
              {caml_call1(_ap_[1],16);return caml_call3(DecoratedC[49],c,3,2)},
             _bI_),
           _fg_],
         _fi_=DecoratedC[12],
         _fj_=0,
         _fk_=
          [0,
           caml_call1
            (make$0
              (cst_invalid_restore$0,
               function(_fs_){return catch$0(_fj_,_fi_,_fs_)},
               _bJ_),
             _dL_),
           _fh_],
         _fl_=
          [0,
           make_n$0
            (cst_save_restore,[0,DecoratedC[11],[0,DecoratedC[12],0]],_bK_),
           _fk_],
         _fm_=caml_call2(General[69][272],_fl_,_d__),
         _fn_=N[1];
        return [0,
                DecoratedC,
                _dL_,
                make_n,
                make,
                make_n$0,
                make$0,
                catch$0,
                caml_call2(caml_call1(General[67][7],_bL_),_fn_,_fm_)]}}
    var Tests_Decoration=[0,_ap_,_aq_];
    caml_register_global(1352,Tests_Decoration,"Tests__Decoration");
    var
     match$1=
      caml_call3
       (Bisect_Runtime[1],cst_tst_Tests_Drawing_ml,161,point_definitions$1),
     cb$1=match$1[2],
     _bQ_=[0,cb$1];
    function _bR_(C)
     {function make_simple(name,width,height,draw)
       {caml_call1(_bQ_[1],0);return [0,name,width,height,draw]}
      function make_list(name,width,height,values,draw)
       {caml_call1(_bQ_[1],9);
        function _dA_(ctx)
         {caml_call1(_bQ_[1],8);
          caml_call1(_bQ_[1],7);
          var _dC_=General[40][40];
          function _dD_(value)
           {caml_call1(_bQ_[1],6);
            caml_call1(C[11],ctx);
            caml_call1(_bQ_[1],5);
            var
             _dG_=caml_call1(General[24][17],height),
             _dH_=caml_call1(General[24][17],width);
            caml_call5(C[44],ctx,0,0,_dH_,_dG_);
            caml_call1(_bQ_[1],4);
            caml_call1(C[31],ctx);
            caml_call1(_bQ_[1],3);
            caml_call2(draw,value,ctx);
            caml_call1(_bQ_[1],2);
            caml_call1(C[12],ctx);
            caml_call1(_bQ_[1],1);
            var _dI_=caml_call1(General[24][17],height);
            return caml_call3(C[48],ctx,0,_dI_)}
          function _dE_(_dF_){return caml_call2(_dC_,_dF_,_dD_)}
          return caml_call2(General[69][259],values,_dE_)}
        var _dB_=caml_call1(General[40][8],values);
        return make_simple
                (name,width,caml_call2(General[69][248],height,_dB_),_dA_)}
      caml_call1(_bQ_[1],160);
      var
       _c7_=0,
       _c8_=
        [0,
         make_simple
          (cst_paint_with_alpha_4,
           100,
           100,
           function(ctx)
            {caml_call1(_bQ_[1],159);
             caml_call6(C[39],ctx,50,50,40,0,6.28);
             caml_call1(_bQ_[1],158);
             caml_call1(C[33],ctx);
             caml_call1(_bQ_[1],157);
             caml_call1(_bQ_[1],155);
             var p=caml_call4(C[10][8],0,0,100,100);
             caml_call1(_bQ_[1],156);
             caml_call6(C[10][2],p,_bS_,0,1,0,0.5);
             caml_call1(_bQ_[1],154);
             caml_call6(C[10][2],p,_bT_,0,0,1,0.5);
             caml_call1(_bQ_[1],153);
             caml_call2(C[15],ctx,p);
             caml_call1(_bQ_[1],152);
             return caml_call2(C[35],_bU_,ctx)}),
         _c7_],
       _c9_=
        [0,
         make_simple
          (cst_paint_with_alpha_3,
           100,
           100,
           function(ctx)
            {caml_call1(_bQ_[1],151);
             caml_call6(C[39],ctx,50,50,40,0,6.28);
             caml_call1(_bQ_[1],150);
             caml_call1(C[33],ctx);
             caml_call1(_bQ_[1],149);
             caml_call1(_bQ_[1],147);
             var p=caml_call4(C[10][8],0,0,100,100);
             caml_call1(_bQ_[1],148);
             caml_call5(C[10][1],p,_bV_,0,1,0);
             caml_call1(_bQ_[1],146);
             caml_call5(C[10][1],p,_bW_,0,0,1);
             caml_call1(_bQ_[1],145);
             caml_call2(C[15],ctx,p);
             caml_call1(_bQ_[1],144);
             return caml_call2(C[35],_bX_,ctx)}),
         _c8_],
       _c__=
        [0,
         make_simple
          (cst_paint_with_alpha_2,
           100,
           100,
           function(ctx)
            {caml_call1(_bQ_[1],143);
             caml_call6(C[39],ctx,50,50,40,0,6.28);
             caml_call1(_bQ_[1],142);
             caml_call1(C[33],ctx);
             caml_call1(_bQ_[1],141);
             caml_call5(C[14],ctx,0,1,1,0.5);
             caml_call1(_bQ_[1],140);
             return caml_call2(C[35],_bY_,ctx)}),
         _c9_],
       _c$_=
        [0,
         make_simple
          (cst_paint_with_alpha_1,
           100,
           100,
           function(ctx)
            {caml_call1(_bQ_[1],139);
             caml_call6(C[39],ctx,50,50,40,0,6.28);
             caml_call1(_bQ_[1],138);
             caml_call1(C[33],ctx);
             caml_call1(_bQ_[1],137);
             caml_call4(C[13],ctx,0,1,1);
             caml_call1(_bQ_[1],136);
             return caml_call2(C[35],_bZ_,ctx)}),
         _c__],
       _da_=
        [0,
         make_simple
          (cst_set_source_radial_gradient,
           200,
           200,
           function(ctx)
            {caml_call1(_bQ_[1],135);
             caml_call1(_bQ_[1],133);
             var
              r1=match$2[6],
              y1=match$2[5],
              x1=match$2[4],
              r0=match$2[3],
              y0=match$2[2],
              x0=match$2[1];
             caml_call1(_bQ_[1],134);
             caml_call1(_bQ_[1],131);
             var p=caml_call6(C[10][10],x0,y0,r0,x1,y1,r1);
             caml_call1(_bQ_[1],132);
             caml_call5(C[10][1],p,_b0_,1,0,0);
             caml_call1(_bQ_[1],130);
             caml_call5(C[10][1],p,_b1_,0,0,1);
             caml_call1(_bQ_[1],129);
             caml_call2(C[15],ctx,p);
             caml_call1(_bQ_[1],128);
             caml_call2(C[35],0,ctx);
             caml_call1(_bQ_[1],127);
             caml_call4(C[13],ctx,0,0,0);
             caml_call1(_bQ_[1],126);
             caml_call6(C[39],ctx,x0,y0,r0,0,6.28);
             caml_call1(_bQ_[1],125);
             caml_call1(C[36],ctx);
             caml_call1(_bQ_[1],124);
             caml_call6(C[39],ctx,x1,y1,r1,0,6.28);
             caml_call1(_bQ_[1],123);
             return caml_call1(C[36],ctx)}),
         _c$_],
       _db_=
        [0,
         make_simple
          (cst_set_source_linear_gradient,
           100,
           40,
           function(ctx)
            {caml_call1(_bQ_[1],122);
             caml_call4(C[13],ctx,1,0,0);
             caml_call1(_bQ_[1],121);
             caml_call2(C[35],0,ctx);
             caml_call1(_bQ_[1],120);
             caml_call1(_bQ_[1],118);
             var p=caml_call4(C[10][8],10,20,90,30);
             caml_call1(_bQ_[1],119);
             caml_call5(C[10][1],p,_b2_,1,0,0);
             caml_call1(_bQ_[1],117);
             caml_call6(C[10][2],p,_b3_,0,0,1,0.2);
             caml_call1(_bQ_[1],116);
             caml_call5(C[10][1],p,_b4_,0,1,0);
             caml_call1(_bQ_[1],115);
             caml_call2(C[15],ctx,p);
             caml_call1(_bQ_[1],114);
             caml_call5(C[44],ctx,5,5,90,30);
             caml_call1(_bQ_[1],113);
             return caml_call1(C[33],ctx)}),
         _da_],
       _dc_=
        [0,
         make_list
          (cst_set_source_rgba$0,
           50,
           50,
           _b5_,
           function(param,ctx)
            {var a=param[4],b=param[3],g=param[2],r=param[1];
             caml_call1(_bQ_[1],112);
             caml_call4(C[13],ctx,0.6,0.6,0.9);
             caml_call1(_bQ_[1],111);
             caml_call2(C[35],0,ctx);
             caml_call1(_bQ_[1],110);
             caml_call5(C[14],ctx,r,g,b,a);
             caml_call1(_bQ_[1],109);
             caml_call5(C[44],ctx,5,5,40,40);
             caml_call1(_bQ_[1],108);
             return caml_call1(C[33],ctx)}),
         _db_],
       _dd_=
        [0,
         make_list
          (cst_set_source_rgb$0,
           50,
           50,
           _b6_,
           function(param,ctx)
            {var b=param[3],g=param[2],r=param[1];
             caml_call1(_bQ_[1],107);
             caml_call4(C[13],ctx,r,g,b);
             caml_call1(_bQ_[1],106);
             caml_call5(C[44],ctx,5,5,40,40);
             caml_call1(_bQ_[1],105);
             return caml_call1(C[33],ctx)}),
         _dc_],
       _de_=
        [0,
         make_simple
          (cst_clip_paint,
           50,
           50,
           function(ctx)
            {caml_call1(_bQ_[1],104);
             caml_call6(C[39],ctx,25,25,20,1,-1);
             caml_call1(_bQ_[1],103);
             caml_call1(C[31],ctx);
             caml_call1(_bQ_[1],102);
             return caml_call2(C[35],0,ctx)}),
         _dd_];
      function _df_(param,ctx)
       {var f2=param[2],f1=param[1];
        caml_call1(_bQ_[1],101);
        caml_call3(C[43],ctx,10,10);
        caml_call1(_bQ_[1],100);
        caml_call3(C[42],ctx,50,20);
        caml_call1(_bQ_[1],99);
        caml_call6(C[39],ctx,50,10,40,0,1);
        caml_call1(_bQ_[1],98);
        caml_call3(C[46],ctx,10,30);
        caml_call1(_bQ_[1],97);
        caml_call6(C[40],ctx,30,90,40,0,-1);
        caml_call1(_bQ_[1],96);
        caml_call3(C[42],ctx,50,90);
        caml_call1(_bQ_[1],95);
        caml_call7(C[41],ctx,30,90,10,80,20,30);
        caml_call1(_bQ_[1],94);
        caml_call1(C[38][3],ctx);
        caml_call1(_bQ_[1],93);
        caml_call5(C[44],ctx,40,50,30,20);
        caml_call1(_bQ_[1],92);
        caml_call3(C[47],ctx,10,-10);
        caml_call1(_bQ_[1],91);
        caml_call7(C[45],ctx,-10,0,20,0,20,-20);
        caml_call1(_bQ_[1],90);
        caml_call2(C[21],ctx,4);
        caml_call1(_bQ_[1],89);
        caml_call4(C[13],ctx,0.2,1,0.2);
        caml_call1(_bQ_[1],88);
        caml_call1(f1,ctx);
        caml_call1(_bQ_[1],87);
        caml_call4(C[13],ctx,0.2,0.2,1);
        caml_call1(_bQ_[1],86);
        return caml_call1(f2,ctx)}
      var
       _dg_=
        [0,
         make_list
          (cst_drawing_functions,
           100,
           100,
           [0,
            [0,C[34],C[36]],
            [0,[0,C[37],C[33]],[0,[0,C[32],C[33]],[0,[0,C[32],C[36]],0]]]],
           _df_),
         _de_],
       _dh_=
        [0,
         make_simple
          (cst_scale_identity_matrix,
           100,
           100,
           function(ctx)
            {caml_call1(_bQ_[1],85);
             caml_call3(C[43],ctx,10,10);
             caml_call1(_bQ_[1],84);
             caml_call3(C[42],ctx,50,30);
             caml_call1(_bQ_[1],83);
             caml_call3(C[49],ctx,3,0.5);
             caml_call1(_bQ_[1],82);
             caml_call3(C[42],ctx,30,180);
             caml_call1(_bQ_[1],81);
             caml_call1(C[54],ctx);
             caml_call1(_bQ_[1],80);
             return caml_call1(C[36],ctx)}),
         _dg_],
       _di_=
        [0,
         make_simple
          (cst_scale_rotate_translate_save_restore,
           400,
           200,
           function(ctx)
            {caml_call1(_bQ_[1],79);
             var aux=function _dz_(_dy_){return _dz_.fun(_dy_)};
             caml_call1(_bQ_[1],77);
             runtime.caml_update_dummy
              (aux,
               function(n)
                {if(0 === n)
                  {caml_call1(_bQ_[1],75);
                   caml_call3(C[42],ctx,1,0);
                   caml_call1(_bQ_[1],64);
                   return caml_call3(C[48],ctx,1,0)}
                 caml_call1(_bQ_[1],76);
                 caml_call1(C[11],ctx);
                 caml_call1(_bQ_[1],74);
                 var
                  _dq_=caml_call2(General[69][256],1,3),
                  _dr_=caml_call2(General[69][256],1,3);
                 caml_call3(C[49],ctx,_dr_,_dq_);
                 caml_call1(_bQ_[1],73);
                 caml_call1(aux,caml_call2(General[69][247],n,1));
                 caml_call1(_bQ_[1],72);
                 var
                  _ds_=caml_call1(General[69][251],General[24][40]),
                  _dt_=caml_call2(General[69][256],_ds_,3);
                 caml_call2(C[50],ctx,_dt_);
                 caml_call1(_bQ_[1],71);
                 caml_call1(aux,caml_call2(General[69][247],n,1));
                 caml_call1(_bQ_[1],70);
                 var
                  _du_=caml_call2(General[69][255],2,General[24][40]),
                  _dv_=caml_call2(General[69][256],_du_,3);
                 caml_call2(C[50],ctx,_dv_);
                 caml_call1(_bQ_[1],69);
                 caml_call1(aux,caml_call2(General[69][247],n,1));
                 caml_call1(_bQ_[1],68);
                 var
                  _dw_=caml_call1(General[69][251],General[24][40]),
                  _dx_=caml_call2(General[69][256],_dw_,3);
                 caml_call2(C[50],ctx,_dx_);
                 caml_call1(_bQ_[1],67);
                 caml_call1(aux,caml_call2(General[69][247],n,1));
                 caml_call1(_bQ_[1],66);
                 caml_call1(C[12],ctx);
                 caml_call1(_bQ_[1],65);
                 return caml_call3(C[48],ctx,1,0)});
             caml_call1(_bQ_[1],78);
             caml_call3(C[48],ctx,0,150);
             caml_call1(_bQ_[1],63);
             caml_call3(C[49],ctx,400,400);
             caml_call1(_bQ_[1],62);
             caml_call3(C[43],ctx,0,0);
             caml_call1(_bQ_[1],61);
             caml_call1(aux,3);
             caml_call1(_bQ_[1],60);
             caml_call1(C[54],ctx);
             caml_call1(_bQ_[1],59);
             return caml_call1(C[36],ctx)}),
         _dh_],
       _dj_=
        [0,
         make_list
          (cst_set_dash$0,
           100,
           20,
           [0,
            [0,0,[254,5,7,9,11]],
            [0,[0,0,[254,10,2]],[0,[0,3,[254,10,2]],0]]],
           function(param,ctx)
            {var dashes=param[2],ofs=param[1];
             caml_call1(_bQ_[1],58);
             caml_call3(C[25],ctx,[0,ofs],dashes);
             caml_call1(_bQ_[1],57);
             caml_call2(C[21],ctx,10);
             caml_call1(_bQ_[1],56);
             caml_call3(C[43],ctx,10,10);
             caml_call1(_bQ_[1],55);
             caml_call3(C[42],ctx,90,10);
             caml_call1(_bQ_[1],54);
             return caml_call1(C[36],ctx)}),
         _di_],
       _dk_=
        [0,
         make_list
          (cst_set_operator,
           90,
           90,
           _b7_,
           function(operator,ctx)
            {caml_call1(_bQ_[1],53);
             caml_call5(C[14],ctx,0,0,0.8,0.8);
             caml_call1(_bQ_[1],52);
             caml_call5(C[44],ctx,10,10,50,50);
             caml_call1(_bQ_[1],51);
             caml_call1(C[33],ctx);
             caml_call1(_bQ_[1],50);
             caml_call2(C[27],ctx,operator);
             caml_call1(_bQ_[1],49);
             caml_call5(C[14],ctx,0.8,0,0,0.8);
             caml_call1(_bQ_[1],48);
             var _dp_=caml_call2(General[69][255],General[24][40],2);
             caml_call6(C[39],ctx,50,50,30,0,_dp_);
             caml_call1(_bQ_[1],47);
             return caml_call1(C[33],ctx)}),
         _dj_],
       _dl_=
        [0,
         make_list
          (cst_set_line_join,
           50,
           50,
           _b8_,
           function(line_join,ctx)
            {caml_call1(_bQ_[1],46);
             caml_call2(C[19],ctx,line_join);
             caml_call1(_bQ_[1],45);
             caml_call2(C[21],ctx,10);
             caml_call1(_bQ_[1],44);
             caml_call3(C[43],ctx,10,10);
             caml_call1(_bQ_[1],43);
             caml_call3(C[42],ctx,40,10);
             caml_call1(_bQ_[1],42);
             caml_call3(C[42],ctx,40,40);
             caml_call1(_bQ_[1],41);
             return caml_call1(C[36],ctx)}),
         _dk_],
       _dm_=
        [0,
         make_list
          (cst_set_line_cap,
           50,
           20,
           _b9_,
           function(line_cap,ctx)
            {caml_call1(_bQ_[1],40);
             caml_call2(C[17],ctx,line_cap);
             caml_call1(_bQ_[1],39);
             caml_call2(C[21],ctx,10);
             caml_call1(_bQ_[1],38);
             caml_call3(C[43],ctx,10,10);
             caml_call1(_bQ_[1],37);
             caml_call3(C[42],ctx,40,10);
             caml_call1(_bQ_[1],36);
             return caml_call1(C[36],ctx)}),
         _dl_],
       _dn_=
        [0,
         make_list
          (cst_set_fill_rule$0,
           60,
           60,
           _b__,
           function(fill_rule,ctx)
            {caml_call1(_bQ_[1],35);
             caml_call2(C[29],ctx,fill_rule);
             caml_call1(_bQ_[1],34);
             caml_call3(C[43],ctx,10,10);
             caml_call1(_bQ_[1],33);
             caml_call3(C[42],ctx,40,10);
             caml_call1(_bQ_[1],32);
             caml_call3(C[42],ctx,40,50);
             caml_call1(_bQ_[1],31);
             caml_call3(C[42],ctx,30,50);
             caml_call1(_bQ_[1],30);
             caml_call3(C[42],ctx,30,20);
             caml_call1(_bQ_[1],29);
             caml_call3(C[42],ctx,20,20);
             caml_call1(_bQ_[1],28);
             caml_call3(C[42],ctx,20,30);
             caml_call1(_bQ_[1],27);
             caml_call3(C[42],ctx,50,30);
             caml_call1(_bQ_[1],26);
             caml_call3(C[42],ctx,50,40);
             caml_call1(_bQ_[1],25);
             caml_call3(C[42],ctx,10,40);
             caml_call1(_bQ_[1],24);
             return caml_call1(C[33],ctx)}),
         _dm_],
       _do_=
        [0,
         make_list
          (cst_set_miter_limit$0,
           120,
           50,
           _b$_,
           function(miter_limit,ctx)
            {caml_call1(_bQ_[1],23);
             caml_call2(C[23],ctx,miter_limit);
             caml_call1(_bQ_[1],22);
             caml_call2(C[19],ctx,0);
             caml_call1(_bQ_[1],21);
             caml_call2(C[21],ctx,5);
             caml_call1(_bQ_[1],20);
             caml_call3(C[43],ctx,10,10);
             caml_call1(_bQ_[1],19);
             caml_call3(C[42],ctx,50,10);
             caml_call1(_bQ_[1],18);
             caml_call3(C[42],ctx,10,20);
             caml_call1(_bQ_[1],17);
             caml_call3(C[43],ctx,10,30);
             caml_call1(_bQ_[1],16);
             caml_call3(C[42],ctx,50,30);
             caml_call1(_bQ_[1],15);
             caml_call3(C[42],ctx,10,39);
             caml_call1(_bQ_[1],14);
             return caml_call1(C[36],ctx)}),
         _dn_];
      return [0,
              make_simple,
              make_list,
              [0,
               make_list
                (cst_set_line_width$0,
                 50,
                 20,
                 _ca_,
                 function(line_width,ctx)
                  {caml_call1(_bQ_[1],13);
                   caml_call2(C[21],ctx,line_width);
                   caml_call1(_bQ_[1],12);
                   caml_call3(C[43],ctx,10,10);
                   caml_call1(_bQ_[1],11);
                   caml_call3(C[42],ctx,40,10);
                   caml_call1(_bQ_[1],10);
                   return caml_call1(C[36],ctx)}),
               _do_]]}
    var Tests_Drawing=[0,_bQ_,_bR_];
    caml_register_global(1353,Tests_Drawing,"Tests__Drawing");
    var
     match$3=
      caml_call3
       (Bisect_Runtime[1],cst_tst_Tests_Limitations_ml,33,point_definitions$2),
     cb$2=match$3[2],
     _cb_=[0,cb$2];
    function _cc_(_cH_)
     {var DecoratedC=caml_call1(CairoMock[2],_cH_);
      function make(name,width,height,draws)
       {caml_call1(_cb_[1],8);
        caml_call1(_cb_[1],6);
        caml_call1(_cb_[1],5);
        var _c3_=General[40][19];
        function _c4_(draw)
         {caml_call1(_cb_[1],4);
          return function(ctx)
           {caml_call1(_cb_[1],3);
            caml_call1(_cb_[1],1);
            var ctx$0=caml_call1(DecoratedC[59],ctx);
            caml_call1(_cb_[1],2);
            caml_call1(draw,ctx$0);
            caml_call1(_cb_[1],0);
            return caml_call1(DecoratedC[60],ctx$0)}}
        function _c5_(_c6_){return caml_call2(_c3_,_c6_,_c4_)}
        var draws$0=caml_call2(General[69][259],draws,_c5_);
        caml_call1(_cb_[1],7);
        return [0,name,width,height,draws$0]}
      caml_call1(_cb_[1],32);
      var
       _cI_=0,
       _cJ_=0,
       _cK_=
        [0,
         function(ctx)
          {caml_call1(_cb_[1],31);
           caml_call2(DecoratedC[21],ctx,20);
           caml_call1(_cb_[1],30);
           caml_call3(DecoratedC[43],ctx,30,30);
           caml_call1(_cb_[1],29);
           caml_call3(DecoratedC[42],ctx,70,30);
           caml_call1(_cb_[1],28);
           return caml_call1(DecoratedC[36],ctx)},
         _cJ_],
       _cL_=
        [0,
         make
          (cst_reuse_canvas_line_cap,
           100,
           60,
           [0,
            function(ctx)
             {caml_call1(_cb_[1],27);return caml_call2(DecoratedC[17],ctx,1)},
            _cK_]),
         _cI_],
       _cM_=0,
       _cN_=
        [0,
         function(ctx)
          {caml_call1(_cb_[1],26);
           caml_call3(DecoratedC[43],ctx,10,10);
           caml_call1(_cb_[1],25);
           caml_call3(DecoratedC[42],ctx,40,10);
           caml_call1(_cb_[1],24);
           return caml_call1(DecoratedC[36],ctx)},
         _cM_],
       _cO_=
        [0,
         make
          (cst_reuse_canvas_transformation,
           100,
           60,
           [0,
            function(ctx)
             {caml_call1(_cb_[1],23);
              return caml_call3(DecoratedC[49],ctx,2,3)},
            _cN_]),
         _cL_],
       _cP_=0,
       _cQ_=
        [0,
         make
          (cst_show_text$1,
           100,
           240,
           [0,
            function(ctx)
             {caml_call1(_cb_[1],22);
              caml_call2(DecoratedC[6],ctx,20);
              caml_call1(_cb_[1],21);
              caml_call1(_cb_[1],20);
              var _cZ_=General[40][40];
              function _c0_(param)
               {var family=param[3],weight=param[2],slant=param[1];
                caml_call1(_cb_[1],19);
                caml_call3(DecoratedC[43],ctx,10,20);
                caml_call1(_cb_[1],18);
                caml_call4(DecoratedC[5],ctx,[0,slant],[0,weight],family);
                caml_call1(_cb_[1],17);
                caml_call2(DecoratedC[7],ctx,cst_He);
                caml_call1(_cb_[1],16);
                caml_call2(DecoratedC[7],ctx,cst_llo);
                caml_call1(_cb_[1],15);
                return caml_call3(DecoratedC[48],ctx,0,30)}
              function _c1_(_c2_){return caml_call2(_cZ_,_c2_,_c0_)}
              return caml_call2(General[69][259],_cd_,_c1_)},
            _cP_]),
         _cO_],
       _cR_=0,
       _cS_=
        [0,
         make
          (cst_text_extents$0,
           100,
           10,
           [0,
            function(ctx)
             {caml_call1(_cb_[1],14);
              var _cY_=caml_call2(DecoratedC[9],ctx,cst_Hello$0);
              return caml_call1(General[69][270],_cY_)},
            _cR_]),
         _cQ_],
       _cT_=0,
       _cU_=
        [0,
         make
          (cst_font_extents$0,
           100,
           10,
           [0,
            function(ctx)
             {caml_call1(_cb_[1],13);
              var _cX_=caml_call1(DecoratedC[8],ctx);
              return caml_call1(General[69][270],_cX_)},
            _cT_]),
         _cS_],
       _cV_=0;
      return [0,
              DecoratedC,
              make,
              [0,
               make
                (cst_arc_more_than_2pi,
                 100,
                 100,
                 [0,
                  function(ctx)
                   {caml_call1(_cb_[1],12);
                    caml_call6(DecoratedC[39],ctx,50,50,40,0,7);
                    caml_call1(_cb_[1],11);
                    var _cW_=caml_call1(DecoratedC[38][1],ctx);
                    caml_call1(General[69][270],_cW_);
                    caml_call1(_cb_[1],10);
                    caml_call3(DecoratedC[42],ctx,50,50);
                    caml_call1(_cb_[1],9);
                    return caml_call1(DecoratedC[36],ctx)},
                  _cV_]),
               _cU_]]}
    var Tests_Limitations=[0,_cb_,_cc_];
    caml_register_global(1354,Tests_Limitations,"Tests__Limitations");
    var
     match$4=
      caml_call3
       (Bisect_Runtime[1],cst_tst_Tests_Tests_ml,18,point_definitions$3),
     cb$3=match$4[2];
    caml_call1(cb$3,1);
    var
     T=
      _bR_
       ([0,
         CairoMock[3],
         CairoMock[4],
         CairoMock[5],
         CairoMock[6],
         CairoMock[7],
         CairoMock[8],
         CairoMock[9],
         CairoMock[10],
         CairoMock[11],
         CairoMock[12],
         CairoMock[13],
         CairoMock[14],
         CairoMock[15],
         CairoMock[16],
         CairoMock[17],
         CairoMock[18],
         CairoMock[19],
         CairoMock[20],
         CairoMock[21],
         CairoMock[22],
         CairoMock[23],
         CairoMock[24],
         CairoMock[25],
         CairoMock[26],
         CairoMock[27],
         CairoMock[28],
         CairoMock[29],
         CairoMock[30],
         CairoMock[31],
         CairoMock[32],
         CairoMock[33],
         CairoMock[34],
         CairoMock[35],
         CairoMock[36],
         CairoMock[37],
         CairoMock[38],
         CairoMock[39],
         CairoMock[40],
         CairoMock[41],
         CairoMock[42],
         CairoMock[43],
         CairoMock[44],
         CairoMock[45],
         CairoMock[46],
         CairoMock[47],
         CairoMock[48],
         CairoMock[49],
         CairoMock[50],
         CairoMock[51],
         CairoMock[52],
         CairoMock[53],
         CairoMock[54],
         CairoMock[55],
         CairoMock[56],
         CairoMock[57],
         CairoMock[58],
         CairoMock[59],
         CairoMock[60]]);
    function _ce_(param){var name=param[1];caml_call1(cb$3,0);return name}
    var
     _cf_=caml_call2(General[40][19],T[3],_ce_),
     Tests$0=
      [0,
       _cf_,
       function(X)
        {var Limitations=_cc_(X[2]),Limitation=caml_call1(X[5],[0]);
         caml_call1(cb$3,2);
         caml_call2(General[40][40],Limitations[3],Limitation[1]);
         caml_call1(cb$3,17);
         var T=_bR_(X[2]),DT=caml_call1(X[4],[0]);
         caml_call1(cb$3,16);
         var _ci_=0,_cj_=General[40][19];
         function _ck_(test)
          {caml_call1(cb$3,15);
           var _cF_=[246,function(_cG_){return caml_call1(DT[1],test)}];
           return caml_call2(General[67][5],test[1],_cF_)}
         function _cl_(_cE_){return caml_call2(_cj_,_cE_,_ck_)}
         var
          _cm_=caml_call2(General[69][259],T[3],_cl_),
          _cn_=X[3][1],
          _co_=[0,caml_call2(caml_call1(General[67][7],_cg_),_cn_,_cm_),_ci_],
          DecoratedC=caml_call1(CairoMock[2],X[2]);
         caml_call1(cb$3,12);
         var name$2=caml_call2(General[59][2],_ch_,X[3][1]);
         function create(param)
          {caml_call1(cb$3,13);
           var _cD_=caml_call1(X[3][2],0);
           return caml_call1(DecoratedC[59],_cD_)}
         caml_call1(cb$3,14);
         var
          _cp_=[0,name$2,create,X[3][3]],
          _cq_=
           [0,
            caml_call1
              (_b_
                ([0,
                  DecoratedC[1],
                  DecoratedC[2],
                  DecoratedC[3],
                  DecoratedC[4],
                  DecoratedC[5],
                  DecoratedC[6],
                  DecoratedC[7],
                  DecoratedC[8],
                  DecoratedC[9],
                  DecoratedC[10],
                  DecoratedC[11],
                  DecoratedC[12],
                  DecoratedC[13],
                  DecoratedC[14],
                  DecoratedC[15],
                  DecoratedC[16],
                  DecoratedC[17],
                  DecoratedC[18],
                  DecoratedC[19],
                  DecoratedC[20],
                  DecoratedC[21],
                  DecoratedC[22],
                  DecoratedC[23],
                  DecoratedC[24],
                  DecoratedC[25],
                  DecoratedC[26],
                  DecoratedC[27],
                  DecoratedC[28],
                  DecoratedC[29],
                  DecoratedC[30],
                  DecoratedC[31],
                  DecoratedC[32],
                  DecoratedC[33],
                  DecoratedC[34],
                  DecoratedC[35],
                  DecoratedC[36],
                  DecoratedC[37],
                  DecoratedC[38],
                  DecoratedC[39],
                  DecoratedC[40],
                  DecoratedC[41],
                  DecoratedC[42],
                  DecoratedC[43],
                  DecoratedC[44],
                  DecoratedC[45],
                  DecoratedC[46],
                  DecoratedC[47],
                  DecoratedC[48],
                  DecoratedC[49],
                  DecoratedC[50],
                  DecoratedC[51],
                  DecoratedC[52],
                  DecoratedC[53],
                  DecoratedC[54],
                  DecoratedC[55],
                  DecoratedC[56],
                  DecoratedC[57],
                  DecoratedC[58]]),
               _cp_)
             [7],
            _co_],
          _cr_=X[3],
          _cs_=[0,caml_call1(_b_(X[2]),_cr_)[7],_cq_];
         caml_call1(cb$3,9);
         caml_call1(cb$3,10);
         var _ct_=CairoMock[61];
         caml_call1(cb$3,11);
         var
          _cu_=
           [0,
            caml_call1
              (_b_
                ([0,
                  CairoMock[3],
                  CairoMock[4],
                  CairoMock[5],
                  CairoMock[6],
                  CairoMock[7],
                  CairoMock[8],
                  CairoMock[9],
                  CairoMock[10],
                  CairoMock[11],
                  CairoMock[12],
                  CairoMock[13],
                  CairoMock[14],
                  CairoMock[15],
                  CairoMock[16],
                  CairoMock[17],
                  CairoMock[18],
                  CairoMock[19],
                  CairoMock[20],
                  CairoMock[21],
                  CairoMock[22],
                  CairoMock[23],
                  CairoMock[24],
                  CairoMock[25],
                  CairoMock[26],
                  CairoMock[27],
                  CairoMock[28],
                  CairoMock[29],
                  CairoMock[30],
                  CairoMock[31],
                  CairoMock[32],
                  CairoMock[33],
                  CairoMock[34],
                  CairoMock[35],
                  CairoMock[36],
                  CairoMock[37],
                  CairoMock[38],
                  CairoMock[39],
                  CairoMock[40],
                  CairoMock[41],
                  CairoMock[42],
                  CairoMock[43],
                  CairoMock[44],
                  CairoMock[45],
                  CairoMock[46],
                  CairoMock[47],
                  CairoMock[48],
                  CairoMock[49],
                  CairoMock[50],
                  CairoMock[51],
                  CairoMock[52],
                  CairoMock[53],
                  CairoMock[54],
                  CairoMock[55],
                  CairoMock[56],
                  CairoMock[57],
                  CairoMock[58],
                  CairoMock[59],
                  CairoMock[60]]),
               [0,name,_ct_,553448210])
             [7],
            _cs_];
         caml_call1(cb$3,6);
         caml_call1(cb$3,7);
         var _cv_=CairoMock[1][59];
         caml_call1(cb$3,8);
         var
          _cw_=CairoMock[1],
          _cx_=
           [0,
            caml_call1
              (_b_
                ([0,
                  _cw_[1],
                  _cw_[2],
                  _cw_[3],
                  _cw_[4],
                  _cw_[5],
                  _cw_[6],
                  _cw_[7],
                  _cw_[8],
                  _cw_[9],
                  _cw_[10],
                  _cw_[11],
                  _cw_[12],
                  _cw_[13],
                  _cw_[14],
                  _cw_[15],
                  _cw_[16],
                  _cw_[17],
                  _cw_[18],
                  _cw_[19],
                  _cw_[20],
                  _cw_[21],
                  _cw_[22],
                  _cw_[23],
                  _cw_[24],
                  _cw_[25],
                  _cw_[26],
                  _cw_[27],
                  _cw_[28],
                  _cw_[29],
                  _cw_[30],
                  _cw_[31],
                  _cw_[32],
                  _cw_[33],
                  _cw_[34],
                  _cw_[35],
                  _cw_[36],
                  _cw_[37],
                  _cw_[38],
                  _cw_[39],
                  _cw_[40],
                  _cw_[41],
                  _cw_[42],
                  _cw_[43],
                  _cw_[44],
                  _cw_[45],
                  _cw_[46],
                  _cw_[47],
                  _cw_[48],
                  _cw_[49],
                  _cw_[50],
                  _cw_[51],
                  _cw_[52],
                  _cw_[53],
                  _cw_[54],
                  _cw_[55],
                  _cw_[56],
                  _cw_[57],
                  _cw_[58]]),
               [0,name$0,_cv_,553448210])
             [7],
            _cu_],
          _cy_=X[3],
          _cz_=[0,caml_call1(_aq_(X[2]),_cy_)[8],_cx_];
         caml_call1(cb$3,3);
         caml_call1(cb$3,4);
         var _cA_=CairoMock[1][59];
         caml_call1(cb$3,5);
         var
          _cB_=CairoMock[1],
          _cC_=
           [0,
            caml_call1
              (_aq_
                ([0,
                  _cB_[1],
                  _cB_[2],
                  _cB_[3],
                  _cB_[4],
                  _cB_[5],
                  _cB_[6],
                  _cB_[7],
                  _cB_[8],
                  _cB_[9],
                  _cB_[10],
                  _cB_[11],
                  _cB_[12],
                  _cB_[13],
                  _cB_[14],
                  _cB_[15],
                  _cB_[16],
                  _cB_[17],
                  _cB_[18],
                  _cB_[19],
                  _cB_[20],
                  _cB_[21],
                  _cB_[22],
                  _cB_[23],
                  _cB_[24],
                  _cB_[25],
                  _cB_[26],
                  _cB_[27],
                  _cB_[28],
                  _cB_[29],
                  _cB_[30],
                  _cB_[31],
                  _cB_[32],
                  _cB_[33],
                  _cB_[34],
                  _cB_[35],
                  _cB_[36],
                  _cB_[37],
                  _cB_[38],
                  _cB_[39],
                  _cB_[40],
                  _cB_[41],
                  _cB_[42],
                  _cB_[43],
                  _cB_[44],
                  _cB_[45],
                  _cB_[46],
                  _cB_[47],
                  _cB_[48],
                  _cB_[49],
                  _cB_[50],
                  _cB_[51],
                  _cB_[52],
                  _cB_[53],
                  _cB_[54],
                  _cB_[55],
                  _cB_[56],
                  _cB_[57],
                  _cB_[58]]),
               [0,name$1,_cA_,553448210])
             [8],
            _cz_];
         return [0,caml_call2(General[67][4],X[1],_cC_)]}];
    caml_register_global(1355,Tests$0,"Tests");
    return}
  (function(){return this}()));


//# 1 ".tests_in_browser.eobjs/tests_in_browser.cmo.js"
(function(W){"use strict";var
y="success",w=261,h=259,p=264,x=262,v=273,u="failure",m=107,l=263,i=W.jsoo_runtime,e=i.caml_new_string;function
d(a,b){return a.length==1?a(b):i.caml_call_gen(a,[b])}function
c(a,b,c){return a.length==2?a(b,c):i.caml_call_gen(a,[b,c])}function
k(a,b,c,d){return a.length==3?a(b,c,d):i.caml_call_gen(a,[b,c,d])}function
V(a,b,c,d,e,f){return a.length==5?a(b,c,d,e,f):i.caml_call_gen(a,[b,c,d,e,f])}function
Q(a,b,c,d,e,f,g){return a.length==6?a(b,c,d,e,f,g):i.caml_call_gen(a,[b,c,d,e,f,g])}var
j=i.caml_get_global_data(),a=j.General,b=j.JsOfOCairo,f=j.Dom_html,g=j.Dom,q=j.Tests,n=j.Js,r=n[50][1].pixelmatch,K=[0,[11,e("<p>Context n\xc2\xb0"),[4,3,0,0,[11,e(":</p>"),0]]],e("<p>Context n\xc2\xb0%i:</p>")],G=[0,[11,e('<div class="cairo_pre" data-src="'),[2,0,[12,46,[4,3,0,0,[11,e('.txt"></div>'),0]]]]],e('<div class="cairo_pre" data-src="%s.%i.txt"></div>')],H=[0,[11,e("<pre>"),[2,0,[11,e("</pre>"),0]]],e("<pre>%s</pre>")],J=[0,[2,0,[12,10,0]],e("%s\n")],L=[0,[11,e("<h3>Cairo:</h3>"),[2,0,[11,e('<img src="'),[2,0,[11,e('.png"></img>'),0]]]]],e('<h3>Cairo:</h3>%s<img src="%s.png"></img>')],R=[0,[11,e("<h3>JsOfOCairo:</h3>"),[2,0,0]],e("<h3>JsOfOCairo:</h3>%s")],T=[0,[11,e("limitations_"),[2,0,0]],e("limitations_%s")],D=e("Tests in browser"),F=e("JsOfOCairo"),N=e("tests_in_browser"),P=e('\n    jQuery("#tests_in_browser ul ul ul").hide();\n    jQuery("#tests_in_browser p").click(function() {\n      jQuery(this).parent().children("ul").slideToggle();\n    });\n    jQuery("div.cairo_pre").each(function() {\n      var div = jQuery(this);\n      div.load(div.data("src"));\n    })\n  '),S=e("Drawing tests on JsOfOCairo"),B=e(y),I=e(u),E=[0,[2,0,[11,e(": "),[2,0,0]]],e("%s: %s")],M=e(y),U=e(u),O=[0,[2,0,[11,e(": (successes: "),[4,3,0,0,[11,e(", failures: "),[4,3,0,0,[11,e(", errors: "),[4,3,0,0,[12,41,0]]]]]]]],e("%s: (successes: %i, failures: %i, errors: %i)")],A=[0,[11,e(""),[2,0,[11,e(".png"),0]]],e("%s.png")],z=d(a[40][8],q[1]),s=[0,function(i){var
b=d(a[69][w],a[57][1]),e=a[40][40];function
j(h){var
e=d(f[64],f[2]);e.src=c(a[59][2],A,h).toString();function
j(o){var
f=d(a[69][l],b),g=k(a[57][8],f,h,e);c(a[69][x],b,g);var
j=d(a[69][l],b),m=d(a[57][6],j);if(c(a[69][p],m,z))d(i,d(a[69][l],b));return n[7]}return e.onload=d(g[10],j)}function
m(a){return c(e,a,j)}return c(a[69][h],q[1],m)}],o=d(a[69][w],a[57][1]);function
t(e){function
q(A,i){if(0===i[0]){var
r=i[1],s=r[2],t=r[1],b=d(f[46],f[2]),u=d(f[49],f[2]),C=c(a[69][p],s,0)?B:I;b.className=C.toString();var
D=d(a[67][1][1][1],s),F=k(a[59][2],E,t,D).toString();u.textContent=d(n[2],F);c(g[5],b,u);if(A){var
G=d(a[69][l],o),H=c(a[57][11],G,t);c(g[5],b,H)}return b}var
j=i[1],m=j[3],v=m[3],w=m[2],x=j[1],J=m[1],K=j[2],e=d(f[46],f[2]),y=d(f[49],f[2]),L=c(a[69][246],w,v),N=c(a[69][p],L,0)?M:U;e.className=N.toString();var
P=V(a[59][2],O,x,J,w,v).toString();y.textContent=d(n[2],P);c(g[5],e,y);var
z=d(f[43],f[2]);c(g[5],e,z);var
Q=a[40][40];function
R(b){var
d=q(c(a[69][p],x,S),b);return c(g[5],z,d)}function
T(a){return c(Q,a,R)}c(a[69][h],K,T);return e}var
b=d(f[43],f[2]),i=q(0,e);c(g[5],b,i);return b}function
C(w){var
e=[0,F,function(c){var
a=d(f[m],f[2]);a.width=10;a.height=10;return d(b[59],a)},95560584];function
j(e){return[0,function(j){var
e=j[3],h=j[2],s=j[1],y=j[4],z=c(a[57][11],w,s),n=d(f[m],f[2]);n.width=h;n.height=e;var
t=n.getContext(f[1]);t.drawImage(z,0,0);var
A=d(a[24][17],e),B=t.getImageData(0,0,d(a[24][17],h),A),i=d(f[m],f[2]);i.width=h;i.height=e;d(y,d(b[59],i));var
C=d(a[24][17],e),D=d(a[24][17],h),E=i.getContext(f[1]).getImageData(0,0,D,C),p=d(f[m],f[2]);p.width=h;p.height=e;var
u=p.getContext(f[1]),v=u.createImageData(h,e),F=Q(r,B.data,E.data,v.data,h,e,{"threshold":0.09,"includeAA":0});u.putImageData(v,0,0);var
q=d(f[49],f[2]);c(g[5],q,n);c(g[5],q,i);c(g[5],q,p);var
G=d(a[69][l],o),H=k(a[57][8],G,s,q);c(a[69][x],o,H);return c(a[67][17],0,F)}]}function
n(e){function
p(b){var
a=d(f[47],f[2]);a.setAttribute("class","col");a.innerHTML=b.toString();return a}return[0,function(e){var
i=e[4],l=e[1],t=e[3],u=e[2],j=d(f[m],f[2]);j.width=u;j.height=t;function
q(f,e){var
g=k(a[59][2],G,l,f),i=d(a[59][2],H);function
m(b){return c(a[50][82],0,b)}var
n=a[40][19],o=d(a[59][2],J);function
p(a){return c(n,a,o)}var
q=d(e,d(b[59],j)),r=c(a[69][h],q,p),s=c(a[69][h],r,m);return[0,g,c(a[69][h],s,i)]}if(i)if(i[2])var
o=0;else
var
n=[0,q(0,i[1]),0],o=1;else
var
o=0;if(!o)var
w=a[40][20],x=function(b,f){var
d=q(b,f),g=d[2],h=d[1],e=c(a[59][2],K,b),i=c(a[69][v],e,g);return[0,c(a[69][v],e,h),i]},y=function(a){return c(w,a,x)},n=c(a[69][h],i,y);function
z(b){return c(a[50][82],0,b)}var
A=a[40][19],B=a[30][15];function
C(a){return c(A,a,B)}var
D=c(a[69][h],n,C),E=c(a[69][h],D,z),F=p(k(a[59][2],L,E,l));function
I(b){return c(a[50][82],0,b)}var
M=a[40][19],N=a[30][16];function
O(a){return c(M,a,N)}var
P=c(a[69][h],n,O),Q=c(a[69][h],P,I),r=p(c(a[59][2],R,Q));c(g[5],r,j);var
S=c(a[59][2],T,l),s=d(f[6],S);c(g[5],s,F);return c(g[5],s,r)}]}var
p=d(q[2],[0,D,[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31],b[32],b[33],b[34],b[35],b[36],b[37],b[38],b[39],b[40],b[41],b[42],b[43],b[44],b[45],b[46],b[47],b[48],b[49],b[50],b[51],b[52],b[53],b[54],b[55],b[56],b[57],b[58]],e,j,n]),s=d(f[6],N),u=d(g[5],s);function
y(b){return c(a[67][2][1],0,b)}var
z=c(a[69][h],p[1],y),A=c(a[69][h],z,t);c(a[69][h],A,u);var
B=i.caml_js_eval_string(P);return d(a[69][270],B)}d(s[1],C);i.caml_register_global(72,[0,r,s,o,t],"Tests_in_browser");return}(function(){return this}()));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ0ZXN0c19pbl9icm93c2VyLmJjLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInN1Yl9mb3JtYXQiLCJsb2NmbXQiLCJjdXJyZW50X2Rpcl9uYW1lIiwicGFyZW50X2Rpcl9uYW1lIiwiZGlyX3NlcCIsInF1b3RlcXVvdGUiLCJjdXJyZW50X2Rpcl9uYW1lJDAiLCJwYXJlbnRfZGlyX25hbWUkMCIsImRpcl9zZXAkMCIsImN1cnJlbnRfZGlyX25hbWUkMSIsInBhcmVudF9kaXJfbmFtZSQxIiwiZGlyX3NlcCQxIiwicmVzdCIsInJlc3QkMCIsInJlc3QkMSIsInJlc3QkMiIsInJlc3QkMyIsInJlc3QkNCIsInJlc3QkNSIsInJlc3QkNiIsInJlc3QkNyIsInR5IiwicmVzdCQ4IiwidHkxIiwicmVzdCQ5IiwicmVzdCQxMCIsInJlc3QkMTEiLCJyZXN0JDEyIiwicmVzdCQxMyIsImZtdHR5MSIsImZtdHR5MiIsInR5MiIsImZtdDEiLCJmbXQyIiwicGFkIiwicGFkJDAiLCJwcmVjIiwicGFkJDEiLCJpY29udiIsInByZWMkMCIsInBhZCQyIiwiaWNvbnYkMCIsInByZWMkMSIsInBhZCQzIiwiaWNvbnYkMSIsInByZWMkMiIsInBhZCQ0IiwiaWNvbnYkMiIsInByZWMkMyIsInBhZCQ1IiwiZmNvbnYiLCJzdHIiLCJjaHIiLCJmbXR0eSIsInBhZCQ2IiwiZm10dHkkMCIsInBhZCQ3IiwicmVzdCQxNCIsInJlc3QkMTUiLCJyZXN0JDE2IiwiZm10aW5nX2xpdCIsInJlc3QkMTciLCJmbXRpbmdfZ2VuIiwicmVzdCQxOCIsInJlc3QkMTkiLCJjaGFyX3NldCIsIndpZHRoX29wdCIsInJlc3QkMjAiLCJjb3VudGVyIiwicmVzdCQyMSIsInJlc3QkMjIiLCJpZ24iLCJyZXN0JDIzIiwiZiIsImFyaXR5IiwiZmFpbHdpdGgiLCJzIiwiaW52YWxpZF9hcmciLCJtaW4iLCJ4IiwieSIsIm1heCIsImFicyIsImxub3QiLCJpbmZpbml0eSIsIm5lZ19pbmZpbml0eSIsIm5hbiIsIm1heF9mbG9hdCIsIm1pbl9mbG9hdCIsImVwc2lsb25fZmxvYXQiLCJtYXhfaW50IiwibWluX2ludCIsIl9qXyIsInMxIiwiczIiLCJsMSIsImwyIiwiY2hhcl9vZl9pbnQiLCJuIiwic3RyaW5nX29mX2Jvb2wiLCJiIiwiYm9vbF9vZl9zdHJpbmciLCJzdHJpbmdfb2ZfaW50IiwidmFsaWRfZmxvYXRfbGV4ZW0iLCJsIiwiaSIsImkkMCIsInN0cmluZ19vZl9mbG9hdCIsIl9rXyIsInRsIiwiaGQiLCJzdGRpbiIsInN0ZG91dCIsInN0ZGVyciIsIm9wZW5fb3V0X2dlbiIsIm1vZGUiLCJwZXJtIiwibmFtZSIsIm9wZW5fb3V0Iiwib3Blbl9vdXRfYmluIiwiZmx1c2hfYWxsIiwiaXRlciIsImEiLCJvdXRwdXRfYnl0ZXMiLCJvYyIsIm91dHB1dF9zdHJpbmciLCJvdXRwdXQiLCJvZnMiLCJsZW4iLCJvdXRwdXRfc3Vic3RyaW5nIiwib3V0cHV0X3ZhbHVlIiwiY2hhbiIsInYiLCJjbG9zZV9vdXQiLCJjbG9zZV9vdXRfbm9lcnIiLCJvcGVuX2luX2dlbiIsIm9wZW5faW4iLCJvcGVuX2luX2JpbiIsImlucHV0IiwiaWMiLCJ1bnNhZmVfcmVhbGx5X2lucHV0Iiwib2ZzJDAiLCJsZW4kMCIsInIiLCJsZW4kMSIsIm9mcyQxIiwicmVhbGx5X2lucHV0IiwicmVhbGx5X2lucHV0X3N0cmluZyIsImlucHV0X2xpbmUiLCJidWlsZF9yZXN1bHQiLCJidWYiLCJhY2N1IiwicmVzIiwiYmVnIiwiYWNjdSQwIiwiY2xvc2VfaW5fbm9lcnIiLCJwcmludF9jaGFyIiwiYyIsInByaW50X3N0cmluZyIsInByaW50X2J5dGVzIiwicHJpbnRfaW50IiwicHJpbnRfZmxvYXQiLCJwcmludF9lbmRsaW5lIiwicHJpbnRfbmV3bGluZSIsInByZXJyX2NoYXIiLCJwcmVycl9zdHJpbmciLCJwcmVycl9ieXRlcyIsInByZXJyX2ludCIsInByZXJyX2Zsb2F0IiwicHJlcnJfZW5kbGluZSIsInByZXJyX25ld2xpbmUiLCJyZWFkX2xpbmUiLCJyZWFkX2ludCIsInJlYWRfZmxvYXQiLCJzdHJpbmdfb2ZfZm9ybWF0IiwiZXhpdF9mdW5jdGlvbiIsIl9wXyIsInN0cjIiLCJzdHIxIiwiYXRfZXhpdCIsImciLCJkb19hdF9leGl0IiwiZXhpdCIsInJldGNvZGUiLCJzeCIsInN5IiwiaW5pdCIsImExIiwiYTIiLCJvZnMxIiwib2ZzMiIsImkkMSIsInJlcyQwIiwicGFyYW0kMCIsInRsJDAiLCJoZCQwIiwiY21wIiwibWF4c29uIiwiaTMxIiwidHJpY2tsZWRvd24iLCJlIiwiaiIsInRyaWNrbGUiLCJidWJibGVkb3duIiwiYnViYmxlIiwiaSQyIiwiZSQwIiwiZmF0aGVyIiwibWVyZ2UiLCJzcmMxb2ZzIiwic3JjMWxlbiIsInNyYzIiLCJzcmMyb2ZzIiwic3JjMmxlbiIsImRzdCIsImRzdG9mcyIsInNyYzFyIiwic3JjMnIiLCJzMiQxIiwiczEkMSIsImkxIiwiaTIiLCJkIiwiaTIkMCIsImQkMCIsInMyJDAiLCJpMSQwIiwiZCQxIiwiczEkMCIsImlzb3J0dG8iLCJzcmNvZnMiLCJzb3J0dG8iLCJ0IiwibCQwIiwibiQwIiwibCQxIiwibiQxIiwibDEkMCIsImwyJDAiLCJsMSQxIiwibDIkMSIsInBhcmFtIiwiYWNjdSQxIiwicCIsInBhaXIiLCJyeSIsInJ4IiwibWF0Y2giLCJ0MiIsImgyIiwidDEiLCJoMSIsImsiLCJrJDAiLCJrJDEiLCJzb3J0IiwieDIiLCJ4MSIsIngzIiwieDIkMCIsIngxJDAiLCJuMSIsIm4yIiwicmV2X3NvcnQiLCJjJDAiLCJjJDEiLCJjJDIiLCJjJDMiLCJjJDQiLCJjJDUiLCJjJDYiLCJhY2N1JDIiLCJzJDAiLCJjMSIsImMyIiwibWFrZSIsImxlZnQiLCJyaWdodCIsImRzdG9mZiIsInNyY29mZiIsImNweWxlbiIsInNlcCIsIm51bSIsInBvcyIsImxpbSIsInNpZ19udW0iLCJzaWdfYmVoIiwib24iLCJvcmRlciIsImluaXRsaXN0IiwiZTIiLCJtZXJnZTIiLCJhcnIiLCJ0bXAiLCJxc29ydCIsImxvIiwiaGkiLCJsbyQwIiwiaGkkMCIsIm1pZCIsInBpdm90IiwibG8kMSIsImhpJDEiLCJ2YWxfaSIsImJ1ZmYiLCJmbGFncyIsIm9iaiIsInNsb3QiLCJ0YmwiLCJzdGF0ZSIsInJlc3VsdCIsImF1eF9idWZmZXIiLCJsZXhidWYiLCJyZWFkIiwibmV3bGVuIiwibmV3YnVmIiwibGNwIiwibGIiLCJvbGRzaXplIiwibmV3c2l6ZSIsIm5ld19zIiwibmV3X3YiLCJuZXdfc3RhcnQiLCJuZXdfZW5kIiwidGFibGVzIiwic3RhcnQiLCJsZXhlciIsImluaXRfYXNwIiwiaW5pdF9zcCIsImluaXRfc3RhY2tiYXNlIiwiaW5pdF9zdGF0ZSIsImluaXRfY3Vycl9jaGFyIiwiaW5pdF9sdmFsIiwiaW5pdF9lcnJmbGFnIiwiY21kIiwiYXJnIiwiYXJnJDAiLCJhcmckMSIsImNtZCQwIiwiZXhuIiwiY3Vycl9jaGFyIiwidG9rIiwiZW52Iiwic3QiLCJlbiIsIm1zZyIsImgiLCJobCIsImgkMCIsImhyIiwibHIiLCJsdiIsImxsIiwibHJyIiwibHJ2IiwibHJsIiwicnIiLCJydiIsInJsIiwicmxyIiwicmx2IiwicmxsIiwicmgiLCJsaCIsInIkMCIsInByZXMiLCJwcmVzJDAiLCJwYXJhbSQxIiwicjIiLCJ2MiIsInIxIiwidjEiLCJyMiQwIiwicjEkMCIsInMkMSIsImUkMSIsImUyJDIiLCJlMSQyIiwiZTEiLCJlMiQwIiwiZTEkMCIsImUyJDEiLCJlMSQxIiwicHYiLCJsZiIsImx0IiwicmYiLCJydCIsInN1YiIsImwkMyIsIngwIiwibCQ0IiwieDAkMCIsImwkNSIsIngwJDEiLCJubCIsImwkMiIsIng0IiwibGQiLCJscmQiLCJyZCIsInJsZCIsImRhdGEiLCJ4JDAiLCJtIiwibSQwIiwiZDEiLCJkMiIsImQyJDAiLCJkMSQwIiwicHZkIiwibSQxIiwibTEiLCJtMiIsInEiLCJjZWxsIiwidGFpbCIsImhlYWQiLCJjZWxsJDAiLCJwcmV2IiwicHJldiQwIiwicHJldiQxIiwicTEiLCJxMiIsImxlbmd0aDEiLCJ0YWlsMSIsInRhaWwyIiwiaGVhZDEiLCJoZWFkMiIsImJsayIsImNsb3N1cmUiLCJsenYiLCJjb3VudCIsImQxMSIsImEkMCIsImEkMSIsImFsIiwic3RybSIsInNyYyIsIm1vcmUiLCJuZXdfbGVuIiwibmV3X2J1ZmZlciIsIm9mZnNldCIsIm5ld19wb3NpdGlvbiIsImJzIiwibGltJDEiLCJwcmV2aW91cyIsImkkNyIsImN1cnJlbnQiLCJpJDgiLCJvcGVuaW5nIiwiaSQ2IiwibGltJDAiLCJpJDMiLCJzdG9wIiwiaSQ0IiwiaSQ1IiwiayQyIiwibmV4dF9pIiwiaWRlbnQiLCJpJDkiLCJpJDEwIiwiaSQxMSIsInN0cl9pbmQiLCJtYXNrIiwiY2hhcl9zZXQkMCIsInBhZF9vcHQiLCJ3aWR0aCIsImZtdCIsInBhZF9vcHQkMCIsInBhZF9vcHQkMSIsInBhZF9vcHQkMiIsInBhZF9vcHQkMyIsInBhZF9vcHQkNCIsInByZWNfb3B0IiwicGFkX29wdCQ1IiwibmRlYyIsInBhZF9vcHQkNiIsInBhZF9vcHQkNyIsImluaXRfc2l6ZSIsIm92ZXJoZWFkIiwibWluX2xlbiIsIm5ld19zdHIiLCJzdHJfbGVuIiwicGFkdHkiLCJpZ25fZmxhZyIsInBhZHR5JDAiLCJmb3JtYXR0aW5nX2xpdCIsInN0ciQwIiwiZm9ybWF0dGluZ19nZW4iLCJzdWJfZm10dHkiLCJzdWJfZm10dHkkMCIsImZtdCQxIiwiaXNfYWxvbmUkMCIsImlzX2Fsb25lIiwiYWZ0ZXIiLCJiZWZvcmUiLCJqJDAiLCJqJDEiLCJmbXQkMCIsImRlIiwiZWQiLCJhZiIsImZhIiwiZGUkMCIsImVkJDAiLCJhZiQwIiwiZmEkMCIsImRlJDEiLCJlZCQxIiwiYWYkMSIsImZhJDEiLCJkZSQyIiwiZWQkMiIsImFmJDIiLCJmYSQyIiwiZGUkMyIsImVkJDMiLCJhZiQzIiwiZmEkMyIsImRlJDQiLCJlZCQ0IiwiYWYkNCIsImZhJDQiLCJkZSQ1IiwiZWQkNSIsImFmJDUiLCJmYSQ1IiwiZGUkNiIsImVkJDYiLCJhZiQ2IiwiZmEkNiIsImRlJDciLCJlZCQ3IiwiYWYkNyIsImZhJDciLCJkZSQ4IiwiZWQkOCIsImFmJDgiLCJmYSQ4IiwiamQiLCJkaiIsImdhIiwiYWciLCJkZSQ5IiwiZWQkOSIsImFmJDkiLCJmYSQ5IiwiZGUkMTAiLCJlZCQxMCIsImFmJDEwIiwiZmEkMTAiLCJkZSQxMSIsImVkJDExIiwiYWYkMTEiLCJmYSQxMSIsImRlJDEyIiwiZWQkMTIiLCJhZiQxMiIsImZhJDEyIiwiZGUkMTMiLCJlZCQxMyIsImFmJDEzIiwiZmEkMTMiLCJyZXN0MiIsInJlc3QyJDAiLCJyZXN0MiQxIiwicmVzdDIkMiIsInJlc3QyJDMiLCJyZXN0MiQ0IiwicmVzdDIkNSIsInJlc3QyJDYiLCJyZXN0MiQ3IiwicmVzdDIkOCIsInR5MjIiLCJ0eTIxIiwiZjQiLCJmMiIsInJlc3QyJDkiLCJyZXN0MiQxMCIsInJlc3QyJDExIiwicmVzdDIkMTIiLCJyZXN0MiQxMyIsImFyaXR5JDAiLCJ0eV9yZXN0IiwicHJlY190eSIsInR5X3Jlc3QkMCIsInByZWNfdHkkMCIsInR5X3Jlc3QkMSIsInByZWNfdHkkMSIsInR5X3Jlc3QkMiIsInByZWNfdHkkMiIsInR5X3Jlc3QkMyIsInByZWNfdHkkMyIsImZtdHR5JDEiLCJmbXR0eSQyIiwiZm10dHkkMyIsInR5JDAiLCJmbXR0eSQ0IiwiZm10dHkkNSIsInciLCJmbXR0eV9yZXN0IiwiZm10X3Jlc3QiLCJmbXR0eV9yZXN0JDAiLCJmbXRfcmVzdCQwIiwiZm10X3Jlc3QkMSIsImZtdHR5X3Jlc3QkMSIsImZtdCQyIiwiZm10X3Jlc3QkMiIsImZtdHR5X3Jlc3QkMiIsImZtdCQzIiwiZm10X3Jlc3QkMyIsImZtdHR5X3Jlc3QkMyIsImZtdCQ0IiwiZm10X3Jlc3QkNCIsImZtdHR5X3Jlc3QkNCIsImZtdCQ1IiwiZm10X3Jlc3QkNSIsImZtdHR5X3Jlc3QkNSIsImZtdHR5JDYiLCJmbXQkNiIsImZtdF9yZXN0JDYiLCJmbXR0eV9yZXN0JDYiLCJmbXR0eSQ3IiwiZm10JDciLCJmbXRfcmVzdCQ3IiwiZm10dHlfcmVzdCQ3IiwiZm10dHkkOCIsImZtdCQ4IiwiZm10dHlfcmVzdCQ4IiwiZm10X3Jlc3QkOCIsImZtdHR5JDkiLCJmbXQkOSIsImZtdF9yZXN0JDkiLCJmbXR0eSQxMCIsImZtdCQxMCIsImZtdF9yZXN0JDEwIiwiZm10dHkkMTEiLCJmbXQkMTEiLCJmbXRfcmVzdCQxMSIsImZtdHR5JDEyIiwiZm10JDEyIiwiZm10dHlfcmVzdCQ5IiwiZm10X3Jlc3QkMTIiLCJmbXR0eSQxMyIsImZtdCQxMyIsImZtdHR5X3Jlc3QkMTAiLCJzdWJfZm10dHkxIiwiZm10X3Jlc3QkMTMiLCJzdWJfZm10dHkkMSIsImZtdHR5JDE0IiwiZm10JDE0IiwiZm10dHlfcmVzdCQxMSIsImZtdF9yZXN0JDE0IiwiZm10dHkkMTUiLCJmbXQkMTUiLCJmbXR0eV9yZXN0JDEyIiwiZm10X3Jlc3QkMTUiLCJmbXR0eSQxNiIsImZtdCQxNiIsImZtdF9yZXN0JDE2IiwiZm10dHkkMTciLCJmbXQkMTciLCJmbXRfcmVzdCQxNyIsImZtdHR5MyIsImZtdDMiLCJzdHIkMSIsImZtdDEkMCIsImZtdHR5MiQwIiwiZm10MiQwIiwiZm10dHkzJDAiLCJmbXQzJDAiLCJmbXR0eV9yZXN0JDEzIiwiZm10X3Jlc3QkMTgiLCJmbXR0eSQxOCIsImZtdCQxOCIsImZtdHR5X3Jlc3QkMTQiLCJmbXRfcmVzdCQxOSIsImZtdHR5JDE5IiwiZm10JDE5IiwiZm10dHlfcmVzdCQxNSIsImZtdF9yZXN0JDIwIiwiZm10dHkkMjAiLCJmbXQkMjAiLCJmbXR0eV9yZXN0JDE2IiwiZm10dHkkMjEiLCJmbXQkMjEiLCJzdWJfZm10dHkkMiIsInN1Yl9mbXR0eSQzIiwiZm10dHkkMjIiLCJmbXQkMjIiLCJzdWJfZm10dHkkNCIsInN1Yl9mbXR0eV9yZXN0Iiwic3ViX2ZtdHR5X3Jlc3QkMCIsInN1Yl9mbXR0eV9yZXN0JDEiLCJzdWJfZm10dHlfcmVzdCQyIiwic3ViX2ZtdHR5X3Jlc3QkMyIsInN1Yl9mbXR0eV9yZXN0JDQiLCJzdWJfZm10dHlfcmVzdCQ1Iiwic3ViX2ZtdHR5X3Jlc3QkNiIsInN1Yl9mbXR0eV9yZXN0JDciLCJzdWJfZm10dHlfcmVzdCQ4Iiwic3ViX2ZtdHR5X3Jlc3QkOSIsInN1Yl9mbXR0eV9yZXN0JDEwIiwic3ViX2ZtdHR5X3Jlc3QkMTEiLCJzdWJfZm10dHlfcmVzdCQxMiIsInN1Yl9mbXR0eV9yZXN0JDEzIiwic3ViX2ZtdHR5X3Jlc3QkMTQiLCJzdWIyX2ZtdHR5Iiwic3ViX2ZtdHR5X3Jlc3QkMTUiLCJzdWIyX2ZtdHR5JDAiLCJzdWJfZm10dHlfcmVzdCQxNiIsInN1YjJfZm10dHkkMSIsInN1YjFfZm10dHkiLCJzdWJfZm10dHlfcmVzdCQxNyIsInN1YjJfZm10dHkkMiIsInN1YjFfZm10dHkkMCIsInN1Yl9mbXR0eV9yZXN0JDE4Iiwic3ViX2ZtdHR5X3Jlc3QkMTkiLCJzdWJfZm10dHlfcmVzdCQyMCIsInN1Yl9mbXR0eV9yZXN0JDIxIiwic3ViX2ZtdHR5X3Jlc3QkMjIiLCJzdWJfZm10dHlfcmVzdCQyMyIsInN1Yl9mbXR0eV9yZXN0JDI0Iiwic3ViX2ZtdHR5X3Jlc3QkMjUiLCJzdWJfZm10dHlfcmVzdCQyNiIsIndpZHRoJDAiLCJyZXMkMSIsInNlcHMiLCJzeW1iIiwibyIsImFjYyIsInRyYW5zIiwicCQwIiwicCQxIiwibmV3X2FjYyIsImFjYyQwIiwiYWNjJDEiLCJhY2MkMiIsImFjYyQzIiwiYWNjJDQiLCJrJDMiLCJrb2MiLCJrYWNjIiwiayQ0IiwicCQyIiwicCQzIiwicCQ0IiwiaW52YWxpZF9ib3giLCJwYXJzZV9zcGFjZXMiLCJwYXJzZV9sd29yZCIsInBhcnNlX2ludCIsIndzdGFydCIsIndlbmQiLCJib3hfbmFtZSIsIm5zdGFydCIsIm5lbmQiLCJpbmRlbnQiLCJleHBfZW5kIiwiYm94X3R5cGUiLCJsZWdhY3lfYmVoYXZpb3IiLCJmbGFnIiwibGVnYWN5X2JlaGF2aW9yJDAiLCJpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlIiwidW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IiwiZW5kX2luZCIsImludmFsaWRfZm9ybWF0X3dpdGhvdXQiLCJleHBlY3RlZF9jaGFyYWN0ZXIiLCJleHBlY3RlZCIsImFkZF9saXRlcmFsIiwibGl0X3N0YXJ0Iiwic2l6ZSIsInBhcnNlIiwic3RyX2luZCQyIiwicGFyc2VfZmxhZ3MiLCJzdHJfaW5kJDAiLCJwYXJzZV90YWciLCJwYXJzZV9nb29kX2JyZWFrIiwicGFyc2VfbWFnaWNfc2l6ZSIsInN0cl9pbmQkMSIsInBhcnNlX2NvbnZlcnNpb24iLCJwY3RfaW5kIiwicGx1cyIsInNoYXJwIiwic3BhY2UiLCJwYWRwcmVjIiwicGx1c191c2VkIiwic2hhcnBfdXNlZCIsInNwYWNlX3VzZWQiLCJpZ25fdXNlZCIsInBhZF91c2VkIiwicHJlY191c2VkIiwiZ2V0X3BsdXMiLCJnZXRfc2hhcnAiLCJnZXRfc3BhY2UiLCJnZXRfaWduIiwiZ2V0X3BhZCIsImdldF9wcmVjIiwiZ2V0X3BhZHByZWMiLCJjaGVja19ub18wIiwiaW5jb21wYXRpYmxlX2ZsYWciLCJvcHRfb2ZfcGFkIiwid2lkdGgkMSIsImdldF9wYWRfb3B0IiwiZ2V0X3BhZHByZWNfb3B0IiwiZm10X3Jlc3VsdCIsInN1Yl9lbmQiLCJzZWFyY2hfc3ViZm9ybWF0X2VuZCIsInN1Yl9mbXQiLCJpZ25vcmVkJDIiLCJjb3VudGVyJDAiLCJpZ25vcmVkJDUiLCJpZ25vcmVkJDYiLCJhZGRfY2hhciIsImFkZF9yYW5nZSIsImZhaWxfc2luZ2xlX3BlcmNlbnQiLCJwYXJzZV9jaGFyX3NldF9jb250ZW50IiwicGFyc2VfY2hhcl9zZXRfYWZ0ZXJfY2hhciQwIiwicGFyc2VfY2hhcl9zZXRfYWZ0ZXJfY2hhciIsInJldmVyc2UiLCJuZXh0X2luZCIsImNoYXJfc2V0JDEiLCJpZ25vcmVkJDgiLCJjaGFyX2Zvcm1hdCIsImZtdF9yZXN0JDIxIiwicGFkJDkiLCJmbXRfcmVzdCQyMiIsImlnbm9yZWQkOSIsImZtdF9yZXN0JDIzIiwicGFkJDEwIiwiZm10X3Jlc3QkMjQiLCJzdWJfZW5kJDAiLCJzdWJfZm10JDAiLCJmbXRfcmVzdCQyNSIsImlnbm9yZWQkMTAiLCJzeW1iJDAiLCJpZ25vcmVkJDQiLCJjb21wdXRlX2ludF9jb252IiwiaWdub3JlZCQ3IiwicHJlYyQ0IiwicGFkJDgiLCJzcGFjZSQxIiwicGx1cyQyIiwicGx1cyQzIiwic3BhY2UkMiIsImlnbm9yZWQkMyIsImlnbm9yZWQiLCJpZ25vcmVkJDAiLCJpZ25vcmVkJDEiLCJwbHVzJDAiLCJzaGFycCQwIiwic3BhY2UkMCIsInBsdXMkMSIsImlnbiQwIiwicGFyc2VfYWZ0ZXJfcHJlY2lzaW9uIiwibWludXMiLCJwYXJzZV9jb252IiwicGFyc2VfYWZ0ZXJfcGFkZGluZyIsInBhcnNlX2xpdGVyYWwiLCJwYXJzZV9wb3NpdGl2ZSIsIm5ld19pbmQiLCJtaW51cyQwIiwiemVybyIsInNldF9mbGFnIiwic3RyX2luZCQzIiwic3RyX2luZCQ0Iiwic3RyX2luZCQ1IiwiaXNfb3Blbl90YWciLCJpbmQiLCJzdWJfc3RyIiwic3ViX2Zvcm1hdCQwIiwiZm9ybWF0dGluZyQwIiwiZm9ybWF0dGluZyIsInN0cl9pbmRfMSIsInBhcnNlX2ludGVnZXIiLCJzdHJfaW5kXzIiLCJzdHJfaW5kXzMiLCJzdHJfaW5kXzQiLCJzdHJfaW5kXzUiLCJzdWJfZW5kJDEiLCJzdWJfZW5kJDIiLCJzdHJfaW5kJDYiLCJzdHJfaW5kJDciLCJvcHRpb24iLCJzdWJmbXQiLCJ5MiIsInkxIiwicHJlZml4Iiwic3VmZml4Iiwic3BlY2xpc3QiLCJhZGQyIiwiZXJybXNnIiwiZG9jIiwic3BlYyIsImtleSIsIm9wdCIsImFyZ3YiLCJhbm9uZnVuIiwic3RoIiwiaW5pdHBvcyIsImVycm9yIiwicHJvZ25hbWUiLCJhY3Rpb24iLCJ0cmVhdF9hY3Rpb24kMCIsInRyZWF0X2FjdGlvbiIsImYkMCIsImYkMSIsInIkMSIsImYkMiIsInIkMiIsImYkMyIsImFyZyQyIiwiciQzIiwiYXJnJDMiLCJzcGVjcyIsImYkNCIsImFyZyQ0IiwiZiQ1IiwibXNnJDAiLCJtc2ckMSIsImxvb3AiLCJjdXIiLCJrd2QiLCJsaW1pdCIsImNvbXBsZXRlZCIsImtzZCIsImN1dGNvbCQwIiwic3BhY2VzJDAiLCJjdXRjb2wiLCJrd2RfbGVuIiwiZGlmZiIsInNwYWNlcyIsInByaW50ZXJzIiwiZmllbGQiLCJvdGhlcl9maWVsZHMiLCJmaWVsZHMiLCJ0b19zdHJpbmciLCJjb252IiwiY2hhciQwIiwibGluZSIsImZpbGUiLCJjaGFyJDEiLCJsaW5lJDAiLCJmaWxlJDAiLCJjaGFyJDIiLCJsaW5lJDEiLCJmaWxlJDEiLCJjb25zdHJ1Y3RvciIsInByaW50IiwiZmN0IiwiY2F0Y2gkMCIsImNvbnZlcnRfcmF3X2JhY2t0cmFjZSIsInJiY2t0IiwiZm9ybWF0X2JhY2t0cmFjZV9zbG90IiwiaW5mbyIsImlzX3JhaXNlIiwiZW5kY2hhciIsInN0YXJ0Y2hhciIsImxpbmVubyIsImZpbGVuYW1lIiwicHJpbnRfcmF3X2JhY2t0cmFjZSIsIm91dGNoYW4iLCJyYXdfYmFja3RyYWNlIiwiYmFja3RyYWNlIiwicHJpbnRfYmFja3RyYWNlIiwiYmFja3RyYWNlX3RvX3N0cmluZyIsInJhd19iYWNrdHJhY2VfdG9fc3RyaW5nIiwiYmFja3RyYWNlX3Nsb3RfaXNfcmFpc2UiLCJpc19yYWlzZSQwIiwiYmFja3RyYWNlX3Nsb3RfbG9jYXRpb24iLCJlbmRfY2hhciIsInN0YXJ0X2NoYXIiLCJsaW5lX251bWJlciIsImJhY2t0cmFjZV9zbG90cyIsInJhd19iYWNrdHJhY2VfbGVuZ3RoIiwiYmNrdCIsImdldF9yYXdfYmFja3RyYWNlX3Nsb3QiLCJnZXRfYmFja3RyYWNlIiwicmVnaXN0ZXJfcHJpbnRlciIsImZuIiwiZXhuX3Nsb3QiLCJleG5fc2xvdF9pZCIsImV4bl9zbG90X25hbWUiLCJ1bmNhdWdodF9leGNlcHRpb25faGFuZGxlciIsInNldF91bmNhdWdodF9leGNlcHRpb25faGFuZGxlciIsIm1hIiwicHJvIiwibWkiLCJkaWdlc3QiLCJkaWdpdCIsIm5ld19zdGF0ZSIsImFzc2lnbiIsInN0MSIsInN0MiIsImZ1bGxfaW5pdCIsInNlZWQiLCJzZWVkJDAiLCJtYWtlJDAiLCJtYWtlX3NlbGZfaW5pdCIsImNvcHkiLCJiaXRzIiwiY3VydmFsIiwibmV3dmFsIiwibmV3dmFsMzAiLCJpbnQkMCIsImJvdW5kIiwiaW50MzIiLCJiMSIsImIyIiwiaW50NjQiLCJiMyIsInNjYWxlIiwiaGFzaCIsImhhc2hfcGFyYW0iLCJzZWVkZWRfaGFzaCIsInBhcmFtcyIsImluaXRpYWxfc2l6ZSIsInJhbmRvbSIsImluZGV4ZnVuIiwib2RhdGEiLCJvc2l6ZSIsIm5zaXplIiwibmRhdGEiLCJpbnNlcnRfYnVja2V0IiwibmlkeCIsImJ1Y2tldCIsInJlbW92ZV9idWNrZXQiLCJuZXh0IiwicmVzdDEiLCJrMSIsImsyIiwicmVzdDMiLCJkMyIsImszIiwiZmluZF9pbl9idWNrZXQiLCJyZXBsYWNlX2J1Y2tldCIsImIkMCIsIm1ibCIsImhpc3RvIiwic3oiLCJhZGRfcXVldWUiLCJ0YWtlX3F1ZXVlIiwicHBfZW5xdWV1ZSIsInRva2VuIiwicHBfaW5maW5pdHkiLCJwcF9vdXRwdXRfc3RyaW5nIiwicHBfb3V0cHV0X25ld2xpbmUiLCJwcF9vdXRwdXRfc3BhY2VzIiwiYnJlYWtfbmV3X2xpbmUiLCJyZWFsX2luZGVudCIsImJyZWFrX2xpbmUiLCJicmVha19zYW1lX2xpbmUiLCJwcF9mb3JjZV9icmVha19saW5lIiwiYmxfdHkiLCJwcF9za2lwX3Rva2VuIiwiZm9ybWF0X3BwX3Rva2VuIiwidGFicyIsImFkZF90YWIiLCJscyIsImxzJDAiLCJ0YWdzIiwidGFnX25hbWUiLCJtYXJrZXIiLCJvZmYiLCJvZmYkMCIsImluc2VydGlvbl9wb2ludCIsInRhYnMkMCIsImZpbmQiLCJ0YWIiLCJvZmYkMSIsImluc2VydGlvbl9wb2ludCQwIiwib2Zmc2V0JDAiLCJibF90eXBlIiwidGJveCIsInRhZ19uYW1lJDAiLCJtYXJrZXIkMCIsImFkdmFuY2VfbG9vcCIsInNpemUkMCIsImFkdmFuY2VfbGVmdCIsImVucXVldWVfYWR2YW5jZSIsImVucXVldWVfc3RyaW5nX2FzIiwicV9lbGVtIiwic2Nhbl9zdGFja19ib3R0b20iLCJjbGVhcl9zY2FuX3N0YWNrIiwic2V0X3NpemUiLCJxdWV1ZV9lbGVtIiwibGVmdF90b3QiLCJzY2FuX3B1c2giLCJwcF9vcGVuX2JveF9nZW4iLCJicl90eSIsImVsZW0iLCJwcF9jbG9zZV9ib3giLCJwcF9vcGVuX3RhZyIsInBwX2Nsb3NlX3RhZyIsInBwX3NldF9wcmludF90YWdzIiwicHBfc2V0X21hcmtfdGFncyIsInBwX2dldF9wcmludF90YWdzIiwicHBfZ2V0X21hcmtfdGFncyIsInBwX3NldF90YWdzIiwicHBfZ2V0X2Zvcm1hdHRlcl90YWdfZnVuY3Rpb25zIiwicHBfc2V0X2Zvcm1hdHRlcl90YWdfZnVuY3Rpb25zIiwicGN0IiwicG90IiwibWN0IiwibW90IiwicHBfcmluaXQiLCJwcF9mbHVzaF9xdWV1ZSIsInBwX3ByaW50X2FzX3NpemUiLCJwcF9wcmludF9hcyIsImlzaXplIiwicHBfcHJpbnRfc3RyaW5nIiwicHBfcHJpbnRfaW50IiwicHBfcHJpbnRfZmxvYXQiLCJwcF9wcmludF9ib29sIiwicHBfcHJpbnRfY2hhciIsInBwX29wZW5faGJveCIsInBwX29wZW5fdmJveCIsInBwX29wZW5faHZib3giLCJwcF9vcGVuX2hvdmJveCIsInBwX29wZW5fYm94IiwicHBfcHJpbnRfbmV3bGluZSIsInBwX3ByaW50X2ZsdXNoIiwicHBfZm9yY2VfbmV3bGluZSIsInBwX3ByaW50X2lmX25ld2xpbmUiLCJwcF9wcmludF9icmVhayIsInBwX3ByaW50X3NwYWNlIiwicHBfcHJpbnRfY3V0IiwicHBfb3Blbl90Ym94IiwicHBfY2xvc2VfdGJveCIsInBwX3ByaW50X3RicmVhayIsInBwX3ByaW50X3RhYiIsInBwX3NldF90YWIiLCJwcF9wcmludF9saXN0IiwicHBfdiIsInBwZiIsIm9wdCQwIiwicHBfc2VwIiwib3B0JDEiLCJwcF9wcmludF90ZXh0IiwiZmx1c2giLCJwcF9zZXRfbWF4X2JveGVzIiwicHBfZ2V0X21heF9ib3hlcyIsInBwX292ZXJfbWF4X2JveGVzIiwicHBfc2V0X2VsbGlwc2lzX3RleHQiLCJwcF9nZXRfZWxsaXBzaXNfdGV4dCIsInBwX2xpbWl0IiwicHBfc2V0X21heF9pbmRlbnQiLCJwcF9nZXRfbWF4X2luZGVudCIsInBwX3NldF9tYXJnaW4iLCJuZXdfbWF4X2luZGVudCIsInBwX2dldF9tYXJnaW4iLCJwcF9zZXRfZm9ybWF0dGVyX291dF9mdW5jdGlvbnMiLCJwcF9nZXRfZm9ybWF0dGVyX291dF9mdW5jdGlvbnMiLCJwcF9zZXRfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMiLCJwcF9nZXRfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMiLCJwcF9zZXRfYWxsX2Zvcm1hdHRlcl9vdXRwdXRfZnVuY3Rpb25zIiwicHBfZ2V0X2FsbF9mb3JtYXR0ZXJfb3V0cHV0X2Z1bmN0aW9ucyIsImRpc3BsYXlfbmV3bGluZSIsImJsYW5rX2xpbmUiLCJkaXNwbGF5X2JsYW5rcyIsInBwX3NldF9mb3JtYXR0ZXJfb3V0X2NoYW5uZWwiLCJvcyIsImRlZmF1bHRfcHBfbWFya19vcGVuX3RhZyIsImRlZmF1bHRfcHBfbWFya19jbG9zZV90YWciLCJkZWZhdWx0X3BwX3ByaW50X29wZW5fdGFnIiwiZGVmYXVsdF9wcF9wcmludF9jbG9zZV90YWciLCJtYWtlX2Zvcm1hdHRlciIsInBwX3EiLCJzeXNfdG9rIiwic3lzX3NjYW5fc3RhY2siLCJmb3JtYXR0ZXJfb2Zfb3V0X2NoYW5uZWwiLCJmb3JtYXR0ZXJfb2ZfYnVmZmVyIiwic3RkYnVmIiwic3RkX2Zvcm1hdHRlciIsImVycl9mb3JtYXR0ZXIiLCJzdHJfZm9ybWF0dGVyIiwiZmx1c2hfc3RyX2Zvcm1hdHRlciIsImZsdXNoX2J1Zl9mb3JtYXR0ZXIiLCJvcGVuX2hib3giLCJvcGVuX3Zib3giLCJvcGVuX2h2Ym94Iiwib3Blbl9ob3Zib3giLCJvcGVuX2JveCIsImNsb3NlX2JveCIsIm9wZW5fdGFnIiwiY2xvc2VfdGFnIiwicHJpbnRfYXMiLCJwcmludF9zdHJpbmckMCIsInByaW50X2ludCQwIiwicHJpbnRfZmxvYXQkMCIsInByaW50X2NoYXIkMCIsInByaW50X2Jvb2wiLCJwcmludF9icmVhayIsInByaW50X2N1dCIsInByaW50X3NwYWNlIiwiZm9yY2VfbmV3bGluZSIsInByaW50X2ZsdXNoIiwicHJpbnRfbmV3bGluZSQwIiwicHJpbnRfaWZfbmV3bGluZSIsIm9wZW5fdGJveCIsImNsb3NlX3Rib3giLCJwcmludF90YnJlYWsiLCJzZXRfdGFiIiwicHJpbnRfdGFiIiwic2V0X21hcmdpbiIsImdldF9tYXJnaW4iLCJzZXRfbWF4X2luZGVudCIsImdldF9tYXhfaW5kZW50Iiwic2V0X21heF9ib3hlcyIsImdldF9tYXhfYm94ZXMiLCJvdmVyX21heF9ib3hlcyIsInNldF9lbGxpcHNpc190ZXh0IiwiZ2V0X2VsbGlwc2lzX3RleHQiLCJzZXRfZm9ybWF0dGVyX291dF9jaGFubmVsIiwic2V0X2Zvcm1hdHRlcl9vdXRfZnVuY3Rpb25zIiwiZ2V0X2Zvcm1hdHRlcl9vdXRfZnVuY3Rpb25zIiwic2V0X2Zvcm1hdHRlcl9vdXRwdXRfZnVuY3Rpb25zIiwiZ2V0X2Zvcm1hdHRlcl9vdXRwdXRfZnVuY3Rpb25zIiwic2V0X2FsbF9mb3JtYXR0ZXJfb3V0cHV0X2Z1bmN0aW9ucyIsImdldF9hbGxfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMiLCJzZXRfZm9ybWF0dGVyX3RhZ19mdW5jdGlvbnMiLCJnZXRfZm9ybWF0dGVyX3RhZ19mdW5jdGlvbnMiLCJzZXRfcHJpbnRfdGFncyIsImdldF9wcmludF90YWdzIiwic2V0X21hcmtfdGFncyIsImdldF9tYXJrX3RhZ3MiLCJzZXRfdGFncyIsImNvbXB1dGVfdGFnIiwidGFnX2FjYyIsIm91dHB1dF9mb3JtYXR0aW5nX2xpdCIsIm91dHB1dF9hY2MiLCJidHkiLCJwJDUiLCJwJDYiLCJzdHJwdXRfYWNjIiwic2l6ZSQxIiwia2ZwcmludGYiLCJpa2ZwcmludGYiLCJmcHJpbnRmIiwiaWZwcmludGYiLCJwcmludGYiLCJlcHJpbnRmIiwia3ByaW50ZiIsInNwcmludGYiLCJhc3ByaW50ZiIsImJwcmludGYiLCJudWxsX2NoYXIiLCJuZXh0X2NoYXIiLCJpYiIsInBlZWtfY2hhciIsImNoZWNrZWRfcGVla19jaGFyIiwiZW5kX29mX2lucHV0IiwiYmVnaW5uaW5nX29mX2lucHV0IiwibmFtZV9vZl9pbnB1dCIsImZuYW1lIiwiY2hhcl9jb3VudCIsInJlc2V0X3Rva2VuIiwiaW52YWxpZGF0ZV9jdXJyZW50X2NoYXIiLCJ0b2tlbl9zdHJpbmciLCJ0b2tidWYiLCJza2lwX2NoYXIiLCJpZ25vcmVfY2hhciIsInN0b3JlX2NoYXIiLCJkZWZhdWx0X3Rva2VuX2J1ZmZlcl9zaXplIiwiY3JlYXRlIiwiaW5hbWUiLCJmcm9tX3N0cmluZyIsImZyb21fZnVuY3Rpb24iLCJzY2FuX2Nsb3NlX2F0X2VuZCIsInNjYW5fcmFpc2VfYXRfZW5kIiwiZnJvbV9pYyIsInNjYW5fY2xvc2VfaWMiLCJlb2YiLCJmcm9tX2ljX2Nsb3NlX2F0X2VuZCIsInN0ZGliIiwiZnJvbV9maWxlIiwiZnJvbV9maWxlX2JpbiIsIm1lbW8iLCJtZW1vX2Zyb21faWMiLCJpYyQwIiwiYmFkX2lucHV0IiwiYmFkX2lucHV0X2VzY2FwZSIsImJhZF90b2tlbl9sZW5ndGgiLCJtZXNzYWdlIiwiYmFkX2Zsb2F0IiwiY2hhcmFjdGVyX21pc21hdGNoIiwiY2kiLCJjaGVja19jaGFyIiwidG9rZW5fY2hhciIsInRva2VuX2Jvb2wiLCJ0b2tlbl9pbnRfbGl0ZXJhbCIsInRva2VuX2Zsb2F0Iiwic2Nhbl9kZWNpbWFsX2RpZ2l0cyIsIndpZHRoJDIiLCJzY2FuX3Vuc2lnbmVkX2RlY2ltYWxfaW50Iiwic2Nhbl9kaWdpdHNfcGx1cyIsImJhc2lzIiwiZGlnaXRwIiwid2lkdGgkMyIsImlzX2JpbmFyeV9kaWdpdCIsInNjYW5fYmluYXJ5X2ludCIsImlzX29jdGFsX2RpZ2l0Iiwic2Nhbl9vY3RhbF9pbnQiLCJpc19oZXhhX2RpZ2l0Iiwic2Nhbl9oZXhhZGVjaW1hbF9pbnQiLCJzY2FuX3NpZ24iLCJzY2FuX29wdGlvbmFsbHlfc2lnbmVkX2RlY2ltYWxfaW50Iiwic2Nhbl9pbnRfY29udiIsInNjYW5fZnJhY19wYXJ0Iiwic2Nhbl9leHBfcGFydCIsInNjYW5fZmxvYXQiLCJwcmVjaXNpb24iLCJwcmVjaXNpb24kMCIsInNjYW5fY2FtbF9mbG9hdCIsInNjYW5fc3RyaW5nIiwic3RwIiwic2Nhbl9jaGFyIiwiaGV4YWRlY2ltYWxfdmFsdWVfb2ZfY2hhciIsImNoZWNrX25leHRfY2hhciIsImNoZWNrX25leHRfY2hhcl9mb3JfY2hhciIsImMwIiwiZ2V0X2RpZ2l0IiwiZ2V0X2RpZ2l0JDAiLCJjMSQwIiwiYzIkMCIsImZpbmRfc3RvcCIsImZpbmRfc3RvcCQwIiwic2tpcF9zcGFjZXMiLCJ3aWR0aCQ1Iiwid2lkdGgkNCIsInNjYW5faW5kaWMiLCJzY2FuX2NoYXJzIiwiZm10aW5nIiwicmVhZGVyIiwibmV3X2siLCJyZWFkZXJzX3Jlc3QiLCJmbXQkMjMiLCJmbXQkMjQiLCJmbXQkMjUiLCJyZWFkZXJzIiwic2NhbiIsIngkMSIsIngkMiIsInNjYW4kMCIsInN0cl9yZXN0Iiwic2NhbiQxIiwic2NhbiQyIiwic2NhbiQzIiwic2NhbiQ0IiwiY29udiQwIiwic2NhbiQ1IiwiY29udiQxIiwic2NhbiQ2IiwiY29udiQyIiwic2NhbiQ3IiwiZm10aW5nX2xpdCQwIiwic3RwJDAiLCJzJDIiLCJzdHJfcmVzdCQwIiwiYXJnX3Jlc3QiLCJlZiIsImFwcGx5IiwiYXJncyIsImFyZ3MkMCIsImV4YyIsImZvcm1hdCIsImNvcHkkMCIsIm8kMCIsInBhcmFtcyQwIiwiaW5pdGlhbF9vYmplY3Rfc2l6ZSIsImR1bW15X2l0ZW0iLCJwdWJsaWNfbWV0aG9kX2xhYmVsIiwidGFnIiwiZHVtbXlfdGFibGUiLCJ0YWJsZV9jb3VudCIsInB1Yl9sYWJlbHMiLCJtZXRob2RzIiwiYXJyYXkiLCJuZXdfc2l6ZSIsIm9sZF9zaXplIiwibmV3X2J1Y2siLCJ0YWJsZSIsImluZGV4IiwibGFiZWwiLCJuYW1lcyIsImVsZW1lbnQiLCJ2YXJzIiwidmlydF9tZXRocyIsImNvbmNyX21ldGhzIiwidmFycyQwIiwidmlydF9tZXRocyQwIiwiY29uY3JfbWV0aHMkMCIsInZpcnRfbWV0aF9sYWJzIiwiY29uY3JfbWV0aF9sYWJzIiwibGFiIiwidHZhcnMiLCJieV9uYW1lIiwiYnlfbGFiZWwiLCJtZXQiLCJobSIsInNhdmVkX3ZhcnMiLCJzYXZlZF9oaWRkZW5fbWV0aHMiLCJtZXRocyIsInZhbHMiLCJtZXRocyQwIiwibm1ldGhzIiwibnZhbHMiLCJwdWJsaWNfbWV0aG9kcyIsImNsYSIsInRvcCIsInN1cGVyJDAiLCJubSIsInB1Yl9tZXRocyIsImNsYXNzX2luaXQiLCJlbnZfaW5pdCIsImluaXRfdGFibGUiLCJsb2MiLCJ1bmRlZiIsIm9ial8wIiwiaW5pdHMiLCJrZXlzIiwicm9vdCIsInRhYmxlcyQwIiwidGFibGVzJDEiLCJ0YWJsZXMkMiIsImNsbyIsImNsbyQwIiwibiQyIiwibiQzIiwibiQ0IiwibiQ1IiwibiQ2IiwieCQzIiwibiQ3IiwiZiQ2IiwieCQ0IiwibiQ4IiwiZiQ3IiwibiQ5IiwieCQ1IiwiZiQ4IiwiZSQyIiwibiQxMCIsIngkNiIsImYkOSIsIm4kMTEiLCJ4JDciLCJuJDEyIiwieCQ4IiwibiQxMyIsIm4kMTQiLCJlJDMiLCJuJDE1IiwibSQyIiwieCQ5IiwibSQzIiwibiQxNiIsIm0kNCIsImUkNCIsIm4kMTciLCJtJDUiLCJuJDE4IiwibmV3YnVmZmVyIiwia2V5d29yZHMiLCJrd2RfdGFibGUiLCJpZGVudF9vcl9rZXl3b3JkIiwiaWQiLCJrZXl3b3JkX29yX2Vycm9yIiwiZW5kX2V4cG9uZW50X3BhcnQiLCJleHBvbmVudF9wYXJ0IiwibnVtYmVyIiwiaWRlbnQyIiwibmVnX251bWJlciIsIm5leHRfdG9rZW4kMCIsImVzY2FwZSIsIm1heWJlX2NvbW1lbnQiLCJjb21tZW50IiwibmV4dF90b2tlbiIsImFyIiwic3okMCIsInN6JDEiLCJzZXR0ZXIiLCJidWNrZXQkMCIsImhhc2hlcyIsIm5ld3N6IiwibmV3YnVja2V0IiwibmV3aGFzaGVzIiwiaGJ1Y2tldCIsInByZXZfbGVuIiwibGl2ZSIsImokMiIsIm5ld3QiLCJvYiIsIm9oIiwic2V0dGVyJDAiLCJuYiIsIm5pIiwiaWZub3Rmb3VuZCIsInYkMCIsImlmZm91bmQiLCJsZW5zIiwidG90bGVuIiwiZ2VuZXJpY19iYXNlbmFtZSIsImlzX2Rpcl9zZXAiLCJnZW5lcmljX2Rpcm5hbWUiLCJpc19yZWxhdGl2ZSIsImlzX2ltcGxpY2l0IiwiY2hlY2tfc3VmZml4Iiwic3VmZiIsInF1b3RlIiwiYmFzZW5hbWUiLCJpc19kaXJfc2VwJDAiLCJpc19yZWxhdGl2ZSQwIiwiaXNfaW1wbGljaXQkMCIsImNoZWNrX3N1ZmZpeCQwIiwiYWRkX2JzIiwibG9vcCQwIiwibG9vcF9icyIsInBhdGgiLCJkcml2ZSIsImRpciIsImJhc2VuYW1lJDAiLCJkaXJuYW1lIiwidGVtcF9kaXIiLCJybmQiLCJ0cnlfbmFtZSIsImNvdW50ZXIkMSIsInN0aCQwIiwicSQwIiwidyQwIiwicG9pbnRfZGVmaW5pdGlvbnMiLCJwb2ludF9kZWZpbml0aW9ucyQwIiwiY2IiLCJzdGF0dXNfdG9fc3RyaW5nIiwieCIsInkiLCJhbmdsZSIsInh4IiwieXgiLCJ4eSIsInl5IiwieDAiLCJ5MCIsImQiLCJ4eCQwIiwieHkkMCIsInl4JDAiLCJ5eSQwIiwieDAkMCIsInkwJDAiLCJ4eCQxIiwieHkkMSIsInl4JDEiLCJ5eSQxIiwieDAkMSIsInkwJDEiLCJkeCIsImR5IiwibSIsImVtcHR5IiwieHMiLCJzdG9wX3BvaW50IiwicGFyYW0iLCJhdXgiLCJ4eHMiLCJwb3NpdGlvbl9iIiwiYWRkZWRfYiIsInBvc2l0aW9uX2EiLCJhZGRlZF9hIiwibiIsInIiLCJnIiwiYiIsImEiLCJwYXR0ZXJuIiwiY29sb3IiLCJ4MSIsInkxIiwicG9pbnRzIiwicjAiLCJyMSIsImNpcmNsZXMiLCJvcHQiLCJzdGgiLCJvZnMiLCJncmFkaWVudCIsImdyYWRpZW50JDAiLCJpZHgiLCJ0cmFuc2Zvcm1hdGlvbiIsInN0YXR1cyIsInN0YXRlcyIsImNvbnRleHQiLCJmIiwic3RhdGUiLCJzIiwic3RhcnQiLCJjdXJyZW50IiwibWFrZV9yZWxhdGl2ZSIsImR5JDAiLCJkeCQwIiwieSQxIiwieCQxIiwieSQyIiwieCQyIiwieSQzIiwieCQzIiwieSQwIiwieCQwIiwieDMiLCJ5MyIsImExIiwiYTIiLCJsaW5lX3dpZHRoIiwiZGFzaGVzIiwiZmlsbF9ydWxlIiwibGluZV9jYXAiLCJsaW5lX2pvaW4iLCJtaXRlcl9saW1pdCIsIm9wZXJhdG9yIiwic291cmNlIiwiZmFtaWx5Iiwic2xhbnQiLCJzdGgkMCIsIndlaWdodCIsInNpemUiLCJ3aWR0aCIsImFzY2VudCIsImhlaWdodCIsInVuaXQiLCJmbG9hdCQwIiwibWF0cml4IiwiY29vcmRzIiwiZGFzaGVzX29mcyIsImRzIiwiZ2V0Iiwic3RvcF9wb2ludHMiLCJjb3VudCIsInBvc2l0aW9uIiwieTIiLCJ4MiIsInIyIiwieTIkMCIsIngyJDAiLCJ5MSQwIiwieDEkMCIsImZvbnRfZXh0ZW50cyIsIm1heF95X2FkdmFuY2UiLCJtYXhfeF9hZHZhbmNlIiwiYmFzZWxpbmUiLCJkZXNjZW50IiwidGV4dF9leHRlbnRzIiwieV9hZHZhbmNlIiwieF9hZHZhbmNlIiwieV9iZWFyaW5nIiwieF9iZWFyaW5nIiwibmFtZSIsInAiLCJjIiwiY2FsbHMiLCJmb3JtYXQiLCJjYWxsIiwicHJpbnRfcmV0IiwicmV0IiwicHJpbnRlZF9yZXQiLCJjYWxsJDEiLCJleCIsImNhbGwkMCIsInciLCJoIiwiYWxwaGEiLCJmb250X3NpemUiLCJjYiQwIiwic3RhdHVzX3RvX3N0cmluZyQwIiwiZW1wdHkkMCIsInNhdmUiLCJyZXN0b3JlIiwic2V0X21hdHJpeCIsImdldF9tYXRyaXgiLCJ0cmFuc2Zvcm0iLCJzY2FsZSIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsImlkZW50aXR5X21hdHJpeCIsImRldmljZV90b191c2VyIiwiZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UiLCJ1c2VyX3RvX2RldmljZSIsInVzZXJfdG9fZGV2aWNlX2Rpc3RhbmNlIiwibWFrZV9yZWwiLCJtb3ZlX3RvIiwicmVsX21vdmVfdG8iLCJsaW5lX3RvIiwicmVsX2xpbmVfdG8iLCJjdXJ2ZV90byIsInJlbF9jdXJ2ZV90byIsInkzJDAiLCJ4MyQwIiwicmVjdGFuZ2xlIiwiYXJjIiwiZGlyIiwiYXJjJDAiLCJodG1sIiwiY2FwIiwiY2FwJDAiLCJqb2luIiwiam9pbiQwIiwibCIsIm9wZXJhdG9yJDAiLCJvcCIsImNvbnZlcnQiLCJjb252ZXJ0X3JnYmEiLCJzdG9wX3BvaW50cyQwIiwiZm9udCIsImZvbnRfd2VpZ2h0IiwiZm9udCQwIiwiY2FudmFzIiwibG9jYWwiLCJwb2ludF9kZWZpbml0aW9ucyIsInBvaW50X2RlZmluaXRpb25zJDAiLCJwb2ludF9kZWZpbml0aW9ucyQxIiwicG9pbnRfZGVmaW5pdGlvbnMkMiIsIm5hbWUiLCJuYW1lJDAiLCJuYW1lJDEiLCJwb2ludF9kZWZpbml0aW9ucyQzIiwiY2IiLCJlcXVhbCIsIm0iLCJ4eCIsInl4IiwieHkiLCJ5eSIsIngwIiwieTAiLCJyZXByIiwiY2hlY2tfbWF0cml4IiwiY2hlY2tfY29vcmRzIiwicHJlY2lzaW9uIiwieTEiLCJ4MSIsInkiLCJ4IiwicmVwciQwIiwiZCIsImMiLCJiIiwiYSIsImNoZWNrX2Zsb2F0X3R1cGxlXzQiLCJyZXByJDEiLCJlIiwiY2hlY2tfZmxvYXRfdHVwbGVfNSIsInJlcHIkMiIsImYiLCJjaGVja19mbG9hdF90dXBsZV82IiwibWFrZSIsInAiLCJjdHgiLCJwJDAiLCJtYWtlJDAiLCJjaGVjayIsIm1ha2UkMSIsImV4cGVjdGVkIiwibWFrZSQyIiwicyIsImlkZW50aXR5IiwibWFrZSQzIiwibWFrZSQ0Iiwic3RhdHVzIiwibWFrZSQ1Iiwic2V0dGVyIiwiZ2V0dGVyIiwiaW5pdGlhbF92YWx1ZSIsIm90aGVyX3ZhbHVlIiwib3RoZXJfdmFsdWVzIiwidmFsdWUiLCJnIiwiciIsIm9mcyIsInJlcHIkMyIsImRhc2hlcyIsInJlcHIkNCIsInJlcHIkNSIsInJlcHIkNiIsInJlcHIkNyIsImNiJDAiLCJtYWtlX24iLCJmcyIsImNoZWNrcyIsImFjdHVhbCIsIm1ha2VfbiQwIiwiY2F0Y2gkMCIsImVycm9yIiwiYXNjZW50IiwiZGVzY2VudCIsIndpZHRoIiwiY2IkMSIsIm1ha2Vfc2ltcGxlIiwiaGVpZ2h0IiwiZHJhdyIsIm1ha2VfbGlzdCIsInZhbHVlcyIsInIxIiwicjAiLCJmMiIsImYxIiwiYXV4IiwibiIsIm9wZXJhdG9yIiwibGluZV9qb2luIiwibGluZV9jYXAiLCJmaWxsX3J1bGUiLCJtaXRlcl9saW1pdCIsImxpbmVfd2lkdGgiLCJjYiQyIiwiZHJhd3MiLCJjdHgkMCIsImRyYXdzJDAiLCJmYW1pbHkiLCJ3ZWlnaHQiLCJzbGFudCIsImNiJDMiLCJ0ZXN0IiwibmFtZSQyIiwiY3JlYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXc0RVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tDdjNFTkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQ3FERUM7S0FDQUM7S0FDQUM7OztLQTNEWUM7S0E4RVpDO0tBQ0FDO0tBQ0FDOzs7S0ErREFDO0tBQ0FDO0tBQ0FDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tDQ0FnMEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs0RERBQUQ7OztJRTZDd0IsV0Y3Q3hCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUU2Q3dCLFNBQW5CQztNQUFtQjs7U0FDbkIsV0Y5Q0xEO1NFOENLOztTQUNBLFdGL0NMQTtTRStDSztlQUNBLFdGaERMQSxNRWdESztlQUNBLFdGakRMQSxNRWlESzs7U0FDQSxXRmxETEE7U0VrREs7ZUFDQSxXRm5ETEEsTUVtREs7ZUFDQSxXRnBETEEsTUVvREs7ZUFDQSxXRnJETEEsTUVxREs7O1NBQ0EsV0Z0RExBLE1Fc0RLOztTQUNBLFdGdkRMQSxNRXVESzs7U0FDQSxXRnhETEEsT0V3REs7O1NBQ0EsV0Z6RExBO1NFeURLOztTQUNBLFdGMURMQTtTRTBESzs7U0FDQSxXRjNETEE7U0UyREs7O1NBQ0EsV0Y1RExBO1NFNERLOztTQUNBLFdGN0RMQSxPRTZESztnQkFDQSxXRjlETEEsT0U4REs7Z0JBQ0EsV0YvRExBLE9FK0RLO2dCQUNBLFdGaEVMQSxPRWdFSztnQkFDQSxXRmpFTEEsT0VpRUs7O1NBQ0EsV0ZsRUxBO1NFa0VLOztTQUNBLFdGbkVMQTtTRW1FSztnQkFDQSxXRnBFTEEsT0VvRUs7O1NBQ0EsV0ZyRUxBO1NFcUVLO2dCQUNBLFdGdEVMQSxPRXNFSzs7U0FDQSxXRnZFTEE7U0V1RUs7O1NBQ0EsV0Z4RUxBO1NFd0VLOztTQUNBLFdGekVMQTtTRXlFSzs7U0FDQSxXRjFFTEE7U0UwRUs7O1NBQ0EsV0YzRUxBO1NFMkVLOztTQUNBLFdGNUVMQTtTRTRFSztnQkFDQSxXRjdFTEEsT0U2RUs7O1NBQ0EsV0Y5RUxBO1NFOEVLOztTQUNBLFdGL0VMQTtTRStFSzs7U0FDQSxXRmhGTEE7U0VnRks7O1NBQ0EsV0ZqRkxBLE9FaUZLOztTQUNBLFdGbEZMQTtTRWtGSyxrR0FBZ0g7SUFFbEcsV0ZwRm5CQTtJRW9GbUI7d0JBK0RkLFdGbkpMQSxPRW1KSyx3QkFBMEM7SUEvRDVCLGFBaUVHRSxFQUFFQyxHQUNuQixXRnRKTEgsT0VzSkssb0JBRGlCRSxFQUFFQyxFQUNxQjtJQWxFMUIsYUFvRURELEVBQUVDLEdBQ2YsV0Z6SkxILE9FeUpLLFlBRGFFLE1BQUVDLE1BQ3lCO0lBckUxQixhQXVFQUM7TUFDZCxXRjVKTEo7TUU2Slk7dUJBRk9JO2NBSVAsU0FKT0E7Z0JBR0wsU0FIS0E7Y0FLUCxTQUxPQTs7Z0JBUWI7SUEvRWE7O09BaUZFQztPQUFRQztPQUFKQztPQUFRQztPQUFJQztPQUFJQztNQUNwQyxXRnRLTFY7TUVzS2EsV0Z0S2JBO01Fc0thLElBQUpXLEVBRFlOLEtBQVlHLEtBQVJELEtBQUlEO01BRXhCLFdGdktMTjtNRXVLSyxHQURJVyxRQUNXLFdGdktwQlgsT0V1S29CO01BQ2YsV0Z4S0xBO01Fd0tjLFdGeEtkQTtNRXNLYSxJQUVKWSxLQUh3QkosS0FDeEJHO01BR0ssV0Z6S2RYO01Fc0thLElBR0phLE9BSmdCTixLQUNoQkk7TUFJSyxXRjFLZFg7TUVzS2EsSUFJSmMsT0FMb0JSLEtBQ3BCSztNQUtLLFdGM0tkWDtNRXNLYSxJQUtKZSxLQU5ZVixLQUNaTTtNQU1LLFdGNUtkWDtNRXNLYSxJQU1KZ0IsTUFQZ0JULEtBQWdCRyxLQUFSRixLQUFJQyxNQUM1QkU7TUFPSyxXRjdLZFg7TUVzS2EsSUFPSmlCLE1BUm9CWCxLQUFRRyxLQUFoQkosS0FBb0JLLE1BQ2hDQztNQVFKLFdGOUtMWDtNRThLSyxZQU5JWSxLQUVBRSxLQURBRCxLQUVBRSxLQUNBQyxLQUNBQztJQXpGVTs7T0E0RkZaO09BQVFDO09BQUpDO09BQVFDO09BQUlDO09BQUlDO09BQVFFO09BQWdCRTtPQUFSRDtPQUFnQkU7T0FBUUM7T0FBUUM7TUFDaEYsV0ZqTExqQjtNRWlMYyxXRmpMZEE7TUVpTGMsSUFBTGtCLEtBRFFiLEtBQTRCTyxPQUF4QkwsS0FBd0NPO01BRS9DLFdGbExkZDtNRWlMYyxJQUNMbUIsS0FGUWQsS0FBb0NRLE9BQWhDTixLQUFnRFE7TUFHdkQsV0ZuTGRmO01FaUxjLElBRUxvQixLQUhnQmQsS0FBb0JNLE9BQWhCSixLQUFnQ007TUFJL0MsV0ZwTGRkO01FaUxjLElBR0xxQixLQUpnQmYsS0FBNEJPLE9BQXhCTCxLQUF3Q087TUFLdkQsV0ZyTGRmO01FaUxjLElBSUxzQixLQUxRakIsS0FBNERXLE9BQXhEVCxLQUFnRVUsT0FBcERSO01BTW5CLFdGdExkVDtNRWlMYyxJQUtMdUIsS0FOZ0JqQixLQUFvRFUsT0FBaERSLEtBQXdEUyxPQUFoRFA7TUFPaEMsV0Z2TExWO01FdUxLLFlBTklrQixLQUVBRSxLQURBRCxLQUVBRSxLQUNBQyxLQUNBQztJQWxHVSxtQkFxRzZCckIsRUFBRUM7O09BQTFCRTtPQUFRQztPQUFKQztPQUFRQztPQUFJQztPQUFJQztNQUN2QyxXRjFMTFY7TUUwTEssVUFEbUJLLEtBQXdCSCxJQUFwQkssS0FBc0JKLElBQVZNLEdBQVJILEtBQWdCSixJQUFaTSxLQUFjTCxJQUFOTztJQXJHekIsbUJBd0dxQ2MsR0FBSUM7VUFBakNwQixZQUFRQyxZQUFKQyxZQUFRQztNQUNsQyxXRjdMTFI7TUU2TEssVUFEc0JLLEtBQTZCbUIsS0FBekJqQixLQUE2QmtCLEdBQXpCbkIsS0FBcUJrQixLQUFqQmhCLEtBQXFCaUI7SUF4R3pDLGFBMkdSQzs7T0FBR3JCO09BQVFDO09BQUpDO09BQVFDO09BQUlDO09BQUlDO01BQzdCLFdGaE1MVjtNRWdNSyxPQURTSztNQUVULFdGak1MTDtNRWlNSyxPQUZhTztNQUdiLFdGbE1MUDtNRWtNSyxPQUhpQk07TUFJakIsV0ZuTUxOO01FbU1LLE9BSnFCUTtNQUtyQixXRnBNTFI7TUVvTUssT0FMeUJTO01BTXpCLFdGck1MVDtNRXFNSyxPQU42QlU7TUFNN0I7SUFqSGMsYUFtSE5nQixFQUFFeEIsRUFBRUMsR0FDWixXRnhNTEgsT0V3TVcsV0FERTBCLEVBQ0YsSUFERUEsRUFDVSxJQURSeEIsRUFBRUMsSUFDdUI7SUFwSHJCLGFBc0hGdUIsRUFBRXhCLEVBQUVDLEdBQ2hCLFdGM01MSCxPRTJNVyxXQURNMEIsRUFDTixJQURNQSxFQUNNLElBREp4QixFQUFFQyxJQUN1QjtJQXZIekIsYUF5SEx1QixFQUFFdEIsT0FDWCxXRjlNTEosT0U4TVcsV0FERzBCLEVBQ0gsSUFER0EsRUFDUyxJQURQdEIsUUFDMkI7SUExSHhCLGFBNEhMc0IsR0FDVCxXRmpOTDFCLE9FaU5XLFdBREcwQixFQUNILElBREdBLEdBQ2E7SUErQ1YsV0ZoUWpCMUI7SUVrUWdCLFdGbFFoQkE7SUVnUWlCLFlBRUQ7aUJBRUg0QixHQUFHQztNQUNULFdGclFQN0I7TUVxUXFCLFdGclFyQkE7TUVxUWdELElBQXJDOEIsU0FBcUMseUJBRG5DRixJQUFHQztNQUVULFdGdFFQN0I7TUVxUWdELElBQ2pDK0IsK0JBQVI7TUFBYyxXRnRRckIvQjtNRTJRVTtRQUxLK0I7aUJBRUpDO1VBRlUsR0FFVkE7Z0JBQUdKLEdBQUhJO3VCRnhRWGhDOzthRXdQd0ZpQyxXQWdCN0UvQjthQWhCNEdnQyxRQWdCNUdoQzttQkFIQTRCO2FBYnFCSzthQUErQkMsUUFhcEROO1lBWkYsV0Z6UFQ5QjtZRXlQZTtrQ0FEaUJtQyxXQUF3REY7YUFDekU7b0JBRUZJO2lCQURBLFdGMVBickMsT0UwUGEsaUJBRmtEb0MsUUFBd0RGO2lCQUcxRyxXRjNQYmxDLE9FMlBhcUM7O3NCQWNBLFdGelFickMsVUVxUVc4QixNQUdBRTtzQkFFRSxXRjFRYmhDLFVFd1FXRSxFQUVVLFdBSk42QixJQUVESDtVQURILFdGdlFYNUI7VUV1UVcsVUFGQThCLFFBS2tCO01BQ25CLFdGM1FWOUI7TUUyUVUsa0JBTEsrQixJQUZGSCxHQU9HO0lBV0wsV0Z0Ulg1QjtJRXNSMEIsSUFUVDRCLEdBU1MsSUF0QmpCRDtJQXNCbUQsV0Z0UjVEM0I7SUU4UU8sV0Y5UVBBO0lFOFFPO01BQWUsSUFBTTZCLG9CQUEwQixXRjlRdEQ3QixPRThRc0QsT0FBMUI2QixVQUFxQztJQUExRCw4QkFEVUQ7aUJBZ0NFVSxFQUFFQyxFQUFFQyxFQUFFQyxHQUNwQixXRjlTTHpDLE9FOFNLLGdCQURjc0MsRUFBRUMsRUFBRUMsRUFBRUMsSUFDRztpQkFFVkgsRUFBRUMsRUFBRUMsR0FDakIsV0ZqVEx4QyxPRWlUSyxXQURhc0MsRUFBRUMsRUFBRUMsSUFDRztpQkFFVEU7TUFDWCxXRnBUTDFDO01Fb1RLLFNBRFcwQztNQUNYO1lBQ1NDLGNBQUwsV0ZyVFQzQyxRRXFUUyxPQUFLMkM7TUFDTDtPQUVBLFdGeFRUM0M7O09Fc1RTOzsyQkZ0VFRBO2lCRXVUUyxXRnZUVEE7TUV3VHlCLGtCQUFtQztpQkFFdENTLEdBQUlDLEdBQUlrQyxHQUFJQztNQUM3QixXRjNUTDdDLFFFMlRLLG1CQURpQlMsR0FBSUMsR0FBSWtDLEdBQUlDLElBMUR6QmxCLFFBMkQyRTtpQkFFM0RlO01BQ3BCLFdGOVRMMUM7TUU4VEssU0FEb0IwQztNQUNwQjswQkFDb0JJLGdCQUFoQixXRi9UVDlDLFFFK1RTLE9BQWdCOEM7TUFDaEI7T0FFQSxXRmxVVDlDOztPRWdVUzsyQkZoVVRBOztpQkVpVVMsV0ZqVVRBO01Fa1V5QixrQkFBbUM7aUJBRXRDUyxHQUFJQyxHQUFJcUMsR0FBSUgsR0FBSUMsR0FBSUc7TUFDckMsV0ZyVUxoRCxRRXFVSyxtQkFEaUJTLEdBQUlDLEdBQUlxQyxHQUFJSCxHQUFJQyxHQUFJRyxJQXBFakNyQixRQXFFb0Y7aUJBRW5FZTtNQUNyQixXRnhVTDFDO01Fd1VLLFNBRHFCMEM7TUFDckI7MEJBQ29CTyxpQkFBaEIsV0Z6VVRqRCxRRXlVUyxPQUFnQmlEO01BQ2hCO09BRUEsV0Y1VVRqRDs7T0UwVVM7Z0JBQ0EsV0YzVVRBLHFCRTBVUyxXRjFVVEE7TUU0VXlCLGtCQUFtQztpQkFFakMwQyxRQUFRUSxJQUFVWixFQUFFQyxFQUFFQyxFQUFFQztNQUM5QyxHQUQ4QlMsSUFBTSxRQUFOQSxPQUFFRSxJQUFJRCxvQkY5VXpDbkQsWUU4VXFDb0Q7TUFDaEMsV0YvVUxwRDtNRStVc0IsV0YvVXRCQTtNRStVc0IsSUFBYjZCLGNBRDRCdUIsSUFBUWQsRUFBRUMsRUFBRUMsRUFBRUM7TUFFOUMsV0ZoVkx6QztNRStVc0IsU0FESzBDO01BRXRCO1FBTUksV0Z0VlQxQyxRRXNWUzs7T0FOSjtnQkFLSSxXRnJWVEEsUUVxVlM7O2NBSmVxRDtVQUFmLFdGalZUckQ7VUVrVjhELGFBRHRDcUQsWUFGZnhCO1VBR3FELG1CQUR0Q3dCO1VBQ3NDOztjQUN0Q0M7VUFBZixXRm5WVHREO1VFb1Y4RCxhQUR0Q3NELGNBSmZ6QjtVQUtxRCxtQkFEdEN5QjtVQUNzQyxTQUVuQztpQkFFRFosUUFBU1UsSUFBSWQsRUFBRUMsRUFBRUM7TUFDdEMsV0Z6Vkx4QyxRRXlWSyxXQURxQjBDLFFBQVNVLElBQUlkLEVBQUVDLEVBQUVDLElBQ0c7aUJBRWxCRTtNQUN2QixXRjVWTDFDO01FNFZLLFNBRHVCMEM7TUFDdkI7Ozs7OztrQkFDSSxXRjdWVDFDO2tCRTZWMkMsV0Y3VjNDQTs7UUU2VjhFO01BQ3JFO09BQ0EsV0YvVlRBOztPRThWUyw0QkY5VlRBO01FK1Z5QixrQkFBbUM7aUJBRWpDMEMsUUFBU2E7TUFDL0IsV0ZsV0x2RDtNRWtXSyxTQURzQjBDO01BQ3RCOzs7Ozs7a0JBQ0ksV0ZuV1QxQztrQkVtVzJDLFdGblczQ0E7O1FFaVJPLFdGalJQQTtRRWlScUMsV0ZqUnJDQTtRRWlScUM7b0RBZ0ZEdUQ7U0FoRkM7UUFDOUIsV0ZsUlB2RDtRRWtSTyxPQURLNkI7TUFtRkg7T0FDQSxXRnJXVDdCOztPRW9XUyw0QkZwV1RBO01FcVd5QixrQkFBbUM7aUJBMEUzQzhDLE9BQVFVLGVBQWdCdEQsRUFBR0M7TUFDdkMsV0ZoYkxILFFFZ2IwQixtQkFERHdELGVBQWdCdEQsRUFBR0MsSUFDbEIsUUFBMkM7aUJBU2xEMkMsT0FBUVUsZUFBZ0J0RCxFQUFHQztNQUN6QyxXRjFiTEgsUUUwYjRCLG1CQUREd0QsZUFBZ0J0RCxFQUFHQyxJQUNsQixRQUEyQztpQkFReEQyQyxPQUFRVTtNQUNsQixXRm5jTHhEO01FbWNLLFNBRFU4QztNQUNWOzBCQUVhM0MsV0FBSEQ7UUFBTixXRnJjVEY7UUVxYzZCLGNBQXdCLElBSDlCd0QsZ0JBR1J0RCxFQUFHQztNQURULFdGcGNUSDtNRW9jUyxRQUNxRjtJQzVibEYsV0hUWkE7SUdTWTtNQUEwQjtZQUN6QnlEO1FBQU4sV0hWUHpEO1FFb0ZtQixPQzFFTnlEO2lCRDJFUixXRnJGTHpEOztpQkVzRkssV0Z0RkxBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRR1U0QjtNQUNyQixXSFhQQTtNR1dPLFFBQ0g7SUFIUTs7TUEwQk8sV0huQ25CQTtNRTBhbUIsV0YxYW5CQTtNR3FEMEI7TUFEUCxzRUFLZjtJQWhEUTtNSlZaLElJNERjMEQ7TUFDVCxXSDVETDFEO01HNERLLGdDQURTMEQ7SUFsREYsYUFxRFFDLFFBQVFDO01BQ3ZCLFdIL0RMNUQ7TUcrRGlCLFdIL0RqQkE7TUcrRGlCLElBQVI2RCxNQUFRLFdBRFdELEVBQ1QsSUFEQ0Q7TUFFZixXSGhFTDNEO01HZ0U4QixnQkFEckI2RCxNQUNxQix5QkFGVkY7TUFFVSxRQUF3QjtJQXZEMUMsYUEwREFBO01BQ1AsV0hwRUwzRDtNR29FSyxTQURPMkQ7TUFDVyxvQkFEWEE7TUFDVyxRQUErQjtJQTNEMUMsYUE2REdBO01BQ1YsV0h2RUwzRDtNR3dFTyxXSHhFUEE7TUd3RU8sU0FGUTJEO01BRVI7OztVQUdJLFdIM0VYM0QsUUc2RUssV0g3RUxBLFFHNkVLO01BSk0scUJBQ0EsV0gxRVhBO01HMEVrQixpQkFHVztJQXBFakIsYUF1RU0yRCxRQUFRSDtNQUNyQixXSGpGTHhEO01HaUZLO2VBRGEyRDt3QkFDYUc7aUJBQUssV0hqRnBDOUQ7aUJHaUZvQzs0QkFEVndEO2lCQUNVLFdBQXVCLEVBQUM7SUF4RWhELGFBMEVNRyxTQUNiLFdIcEZMM0QsUUdvRkssV0FEYTJELFlBQ2lCO0lBM0V2QixhQTZFTWpDLEVBQUVvQztNQUNmLFdIdkZMOUQ7TUd1Rks7TUFBNkIsb0JBRGQ4RCxNQUFGcEM7TUFDZ0IsZ0JBQXlDO0lBOUUvRCxhQWdGS2lDLFFBQVFqQztNQUNwQixXSDFGTDFCO01HMEYwQixXQURUMkQsdUJKMUZqQixXSTBGeUJqQyxTQUNlO0lBakY1QixhQW1GQ2lDLFFBQVF6RCxFQUFFQztNQUNsQixXSDdGTEg7TUc2RnNDLGFBRGpCRSxFQUFFQztNQUNHLFdBRGJ3RCx1Qko3RmIsdUJJOEY4RDtJQXBGbEQsYUFzRktBLFFBQVF6RCxFQUFFQztNQUN0QixXSGhHTEg7TUdnR3NDLGFBRGJFLEVBQUVDO01BQ0QsV0FEVHdELHVCSmhHakIsdUJJaUdrRTtJQXZGdEQsYUF5RkVBLFFBQVF2RDtNQUNqQixXSG5HTEo7TUdtR3NDLGFBRGhCSTtNQUNJLFdBRFp1RCx1QkpuR2QsdUJJb0dpRTtJQTFGckQsYUE0RldBO01BQ2xCLFdIdEdMM0Q7TUdzR0s7ZUFEa0IyRDt3QkFDUUc7aUJBQUssV0h0R3BDOUQ7aUJHc0dvQztpQkFBdUI7aUNBQXdCLEVBQUM7SUE3RnhFLGFBK0ZVMkQsUUFBUXpELEVBQUVDO01BQzNCLFdIekdMSCxRR3lHNEIsZUFBcUIsSUFEM0IyRCxjQUFRekQsRUFBRUMsRUFDb0Q7SUFoR3hFLGFBa0dtQndELFFBQVFuQyxHQUFHQztNQUNyQyxXSDVHTHpCLFFHNEcrQixlQUFxQixJQURyQjJELGNBQVFuQyxHQUFHQyxHQUNpRDtJQW5HL0UsYUFxR1VrQyxRQUFRekQsRUFBRUM7TUFDM0IsV0gvR0xILFFHK0c0QixlQUROMkQsYUFBUXpELEVBQUVDLEVBQzhCO0lBdEdsRCxhQXdHbUJ3RCxRQUFRbkMsR0FBR0M7TUFDckMsV0hsSEx6QixRR2tIK0IsZUFEQTJELGFBQVFuQyxHQUFHQyxHQUMyQjtJQXpHekQsYUE0R1NrQyxRQUFTSSxNQUFPQztNQUNoQyxXSHRITGhFO01Hc0gwQixXSHRIMUJBO01Hc0gwQixJQUFqQndELGVBQWlCLElBRExHO01BRWhCLFdIdkhMM0Q7TUd1SEssU0FBSWlFLGNBQWV6QyxHQUFJQztRQUNyQixXSHhIUHpCO1FHeUhTLFdIekhUQTtRR3lIZSxjQUpNMkQsV0FDWkg7UUFHTTsrQkFFT3JELGFBQUhEO1VBQU4sV0gzSGJGO1VHNkhPLFdIN0hQQTtVRzZITyxVQUZZRSxJQUpLc0IsR0FJRnJCLElBSk1zQjtRQUdmLFdIMUhiekI7UUcwSGEsaUJBR1k7TUFFcEIsV0gvSExBO01HK0hLLFVBVnlCK0Q7O1FBV3JCLFdIaElUL0Q7O1NHaUlTLFdIaklUQTtTR2lJUyxTQVpZMkQ7U0RrVWhCLFdGdmJMM0Q7U0V1Yks7O2lCQ2xVeUIrRDs7K0JBZU5HLGdCQUFKQztVQUFYLFdIcElUbkU7VUdxSXNCLFdIckl0QkE7VUdxSXNCLDBCQURGbUUsS0FBSUQsTUFDRjtVQUNiLFdIdElUbEU7VUdzSVMsSUFqQlkyRCxXQUNaSCxlQWVLYSxJQUFHRDs7O3VCQWhCYUwsU0FhVE8sZUFBSEM7V0FBVCxXSGxJVHZFO1dHa0lTLFNBYlkyRDtXRDhUaEIsV0ZuYkwzRDtXRW1iSzthQUNBLFdGcGJMQSxRRW9iMEIsaUJDOVRqQndELGVBWVNlLElBQUdEOzt1QkFiU1AsU0FjWlMsZUFBSEM7V0FBTixXSG5JVHpFO1dHbUl3QixJQWRIMkQsV0FDWkgsZUFhTWlCLElBQUdEO01BS2IsV0h4SUx4RTtNR3dJSyxVQW5CZ0NnRTs7VUFvQjVCLFdIeklUaEU7VUd5SVMsU0FwQlkyRDtVRDJVaEIsV0ZoY0wzRDtVRWdjSzs7UUN0VEksV0gxSVRBO1FHMElTLFNBckJZMkQ7UUR3VWhCLFdGN2JMM0Q7UUU2Yks7O3NCQ3hVZ0NnRTs2QkF1QmJ2QyxZQUFKRDtRQUFYLFdINUlUeEI7UUc2SXNCLFdIN0l0QkE7UUc2SXNCLDBCQURGd0IsR0FBSUMsSUFDRjtRQUNiLFdIOUlUekI7UUc4SVMsV0F6QlkyRCxXQUNaSCxlQXVCS3RELEVBQUdDO2tCQXhCb0I2RCxXQXNCbkJVLGVBQUhDO01BQU4sV0gzSVQzRTtNRzJJUyxXQXRCWTJELFdBQ1pILGVBcUJNbUIsSUFBR0QsSUFJVjtJQXRJSSxhQXlJR2YsUUFBUXpELEVBQUVDO01BQ3BCLFdIbkpMSCxRR21KSyxXQURVMkQsc0JBQVF6RCxFQUFFQyxlQUMwQztJQTFJdkQsYUE0SU93RCxRQUFRekQsRUFBRUM7TUFDeEIsV0h0SkxILFFHc0pLLFdBRGMyRCx3QkFBUXpELEVBQUVDLGVBQzJDO0lBN0k1RCxjQStJR3dELFFBQVF6RCxFQUFFQztNQUNwQixXSHpKTEg7TUd5SkssV0FEVTJELHdCQUFRekQsRUFBRUMsa0JBQUZELEVBQUVDLElBQ2dEO0lBaEo3RCxjQWtKT3dELFFBQVF6RCxFQUFFQztNQUN4QixXSDVKTEg7TUc0SkssV0FEYzJELHdCQUFRekQsRUFBRUMsb0JBQUZELEVBQUVDLElBQ2lEO0lBbkpsRSxjQXFKSXdELFFBQVFmLEdBQUdDLGNBQU8rQixHQUFHQztNQUNoQyxXSC9KTDdFO01HK0pLLFdBRFcyRCx3QkFBUWYsR0FBR0MsbUJBQU8rQixHQUFHQyxLQUN3QztJQXRKakUsY0F3SlFsQixRQUFRZixHQUFHQyxjQUFPK0IsR0FBR0M7TUFDcEMsV0hsS0w3RTtNR2tLSyxXQURlMkQsd0JBQVFmLEdBQUdDLHFCQUFPK0IsR0FBR0MsS0FDeUM7SUF6SnRFLGNBMkpLbEIsUUFBUXpELEVBQUVDO01BQ3RCLFdIcktMSCxRR3FLSyxXQURZMkQsZ0NBQVF6RCxFQUFFQyxJQUNtQztJQTVKbEQsY0E4SkR3RCxRQUFRekQsRUFBRUMsRUFBR21DLEVBQUd3QyxHQUFJQztNQUMxQixXSHhLTC9FO01Hd0tzRDtlQUQzQzJEOytCQUFRekQsSUFBS29DLElBQzhCLFNBRDNCd0MsSUFBTjNFLElBQUdtQyxJQUNrRCxTQUQvQ3dDOzZCQUFSNUUsSUFBS29DLElBQ3VGLFNBRGhGeUMsSUFBVjVFLElBQUdtQyxJQUMyRyxTQURwR3lDLE1BQzhHO0lBL0pqSSxjQWlLUXBCLFFBQVF6RCxFQUFFQyxFQUFHbUMsRUFBR3dDLEdBQUlDO01BQ25DLFdIM0tML0U7TUcyS3NEO2VBRGxDMkQ7K0JBQVF6RCxJQUFLb0MsSUFDcUIsU0FEbEJ3QyxJQUFOM0UsSUFBR21DLElBQ3lDLFNBRHRDd0M7NkJBQVI1RSxJQUFLb0MsSUFDOEUsU0FEdkV5QyxJQUFWNUUsSUFBR21DLElBQ2tHLFNBRDNGeUMsTUFDcUc7SUFsS2pJLGNBcUtlcEI7TUFDcEIsV0gvS1AzRDtNRytLNEIsV0gvSzVCQTtNRytLNEIsSUFBakJ3RCxlQUFpQixJQURERztNQUVwQixXSGhMUDNEO01HK0s0QixVQUNmLElBRmMyRCxXQUNoQkg7TUFDRTs2QkFFT3JELGFBQUhEO1FBQU4sV0hsTFhGO1FHa0xXLFVBQU1FLEVBQUdDO01BRFQsV0hqTFhIO01HaUxXLFdBQ3FCO0lBektwQixjQTJLRzJEO01BQ1IsV0hyTFAzRCxRR3FMTyxXQURRMkQsOEJBQzJDO0lBNUs5Qzs7Ozs7Z0JBOEtHQTtTQUNSLFdIeExQM0QsUUd3TE8sV0FEUTJELDZCQUM4QztJQS9LakQscUJBbUxQLFdINUxMM0QsUUc0TEssUUFBRTtJQW5MSyxjQXFMRTJEO01BQ1QsV0gvTEwzRCxRRytMSyxXQURTMkQsOEJBQzBDO0lBdEw1QyxxQkF5TFAsV0hsTUwzRCxRR2tNSyxRQUFFO0lBekxLLGNBMkxBMkQ7TUFDUCxXSHJNTDNELFFHcU1LLFdBRE8yRCw4QkFDNEM7SUE1TDVDLHFCQStMUCxXSHhNTDNELFFHd01LLFFBQUU7SUEvTEssY0FpTUEyRDtNQUNQLFdIM01MM0QsUUcyTUssV0FETzJELDhCQUM0QztJQWxNNUMsMEJBcU1QLFdIOU1MM0QsUUc4TUssUUFBRTtJQXJNSyxjQXdNVTJELFFBQVFxQjtNQUN6QixXSGxOTGhGO01Ha05LO2VBRGlCMkQ7d0JBQ1NHO2lCQUFLLFdIbE5wQzlEO2lCR2tOb0M7MkJBRE5nRjtpQkFDTSxXQUFtQixFQUFDO0lBek01QyxjQTJNVXJCLFNBQ2pCLFdIck5MM0QsUUdxTkssV0FEaUIyRCxXQUNTO0lBNU1uQixjQThNSUEsUUFBUVQsSUFBVStCO01BQzdCLEdBRG1CL0IsSUFBTSxRQUFOQSxPQUFFRSxJQUFJRCxvQkh2TjlCbkQsWUd1TjBCb0Q7TUFDckIsV0h4TkxwRDtNR3dOSztlQURXMkQ7d0JBQ2VHO2lCQUFLLFdIeE5wQzlEO2lCR3dOb0M7MkJBREZpRjtpQkFDRSxVQURWN0I7aUJBQ1UsV0FBb0IsRUFBQztJQS9NN0MsY0FpTklPO01BQ1gsV0gzTkwzRDtNRzJOaUIsV0gzTmpCQTtNRzJOaUIsSUFBUjZELE1BQVEsSUFEREY7TUFFWCxXSDVOTDNEO01HNE5LLFVBREk2RCxrQkFDcUI7SUFuTmxCLGNBcU5TRixRQUFRdUI7TUFDeEIsV0gvTkxsRjtNRytOSztlQURnQjJEO3dCQUNVRztpQkFBSyxXSC9OcEM5RDtpQkcrTm9DOzJCQURQa0Y7aUJBQ08sV0FBa0IsRUFBQztJQXROM0MsY0F3TlN2QixTQUNoQixXSGxPTDNELFFHa09LLFdBRGdCMkQsV0FDUztJQXpObEIsY0EyTlFBLFFBQVF3QjtNQUN2QixXSHJPTG5GO01HcU9LO2VBRGUyRDt3QkFDV0c7aUJBQUssV0hyT3BDOUQ7aUJHcU9vQzsyQkFEUm1GO2lCQUNRLFdBQWlCLEVBQUM7SUE1TjFDLGNBOE5ReEIsU0FDZixXSHhPTDNELFFHd09LLFdBRGUyRCxXQUNTO0lBL05qQixjQWlPU0EsUUFBUXlCO01BQ3hCLFdIM09McEY7TUcyT0s7ZUFEZ0IyRDt3QkFDVUc7aUJBQUssV0gzT3BDOUQ7aUJHMk9vQzsyQkFEUG9GO2lCQUNPLFdBQWtCLEVBQUM7SUFsTzNDLGNBb09TekIsU0FDaEIsV0g5T0wzRCxRRzhPSyxXQURnQjJELFdBQ1M7SUFyT2xCLGNBdU9XQSxRQUFRMEI7TUFDMUIsV0hqUExyRjtNR2lQSztlQURrQjJEO3dCQUNRRztpQkFBSyxXSGpQcEM5RDtpQkdpUG9DOzJCQURMcUY7aUJBQ0ssV0FBb0IsRUFBQztJQXhPN0MsY0EwT1cxQixTQUNsQixXSHBQTDNELFFHb1BLLFdBRGtCMkQsV0FDUztJQTNPcEIsY0E2T1FBLFFBQVEyQjtNQUN2QixXSHZQTHRGO01HdVBLO2VBRGUyRDt3QkFDV0c7aUJBQUssV0h2UHBDOUQ7aUJHdVBvQzsyQkFEUnNGO2lCQUNRLFdBQWlCLEVBQUM7SUE5TzFDLGNBZ1BRM0IsU0FDZixXSDFQTDNELFFHMFBLLFdBRGUyRCxXQUNTO0lBalBqQixjQW9QTUEsUUFBUWpCO01BQ3JCLFdIOVBMMUM7TUc4UGtCLFdIOVBsQkE7TUc4UGtCLElBQVR1RixPQURpQjdDO01BRXJCLFdIL1BMMUM7TUcrUEs7ZUFGYTJEO3dCQUVhRztpQkFBSyxXSC9QcEM5RDtpQkcrUG9DOzRCQUQzQnVGO2lCQUMyQixXQUFlLEVBQUM7SUF0UHhDLGNBd1BNNUIsU0FDYixXSGxRTDNELFFHa1FTLGNBRFMyRCxhQUNhO0lBelBuQixjQTJQVUEsUUFBUXJCLEVBQUVDLEVBQUVDO01BQzdCLFdIclFMeEM7TUdxUWtCLFdIclFsQkE7TUdxUW1CLElBQVZ1RixPQUFVLElBRFdqRCxFQUFFQyxFQUFFQztNQUU3QixXSHRRTHhDO01Hc1FLO2VBRmlCMkQ7d0JBRVNHO2lCQUFLLFdIdFFwQzlEO2lCR3NRb0M7NEJBRDNCdUY7aUJBQzJCLFdBQWUsRUFBQztJQTdQeEMsY0ErUFc1QixRQUFRckIsRUFBRUMsRUFBRUMsRUFBRUM7TUFDaEMsV0h6UUx6QztNR3lRa0IsV0h6UWxCQTtNR3lRbUIsSUFBVnVGLE9BQVUsSUFEWWpELEVBQUVDLEVBQUVDLEVBQUVDO01BRWhDLFdIMVFMekM7TUcwUUs7ZUFGa0IyRDt3QkFFUUc7aUJBQUssV0gxUXBDOUQ7aUJHMFFvQzs0QkFEM0J1RjtpQkFDMkIsV0FBZSxFQUFDO0lBalF4QyxjQW9RWTVCLFFBQVFULFNBQWtDc0M7TUFDN0QsR0FEMkJ0QyxJQUFRLFFBQVJBLE9BQUV1QyxNQUFNdEMsb0JIN1F4Q25ELFlHNlFrQ3lGO01BQzdCO09BRHFELGtCQUFQRSxPQUFPRDs7bUJIN1ExRDFGLFlHNlFtRDJGO01BQzlDLFdIOVFMM0Y7TUc4UUs7ZUFEbUIyRDt3QkFDT0c7aUJBQUssV0g5UXBDOUQ7aUJHOFFvQzs4QkFERnlGLE1BQWlCRSxPQUNwQjdCLFFBRG1DMEI7aUJBQzlCLFdBQWlELEVBQUM7SUFyUTFFLGNBdVFTN0IsUUFBUWlDO01BQ3hCLFdIalJMNUY7TUdpUks7ZUFEZ0IyRDt3QkFDVUc7aUJBQUssV0hqUnBDOUQ7aUJHaVJvQyx3QkFBTDhEO2lCQUFLLDZCQURQOEI7aUJBQ08sV0FBZ0MsRUFBQztJQXhRekQsY0EwUUtqQyxRQUFRRztNQUNwQixXSHBSTDlEO01HcVJPLFdIclJQQTtNR3FSTyw2QkFGVTJELFNBRVY7TUFFQSxXSHZSUDNEO01HcVJPLElBQ0U2RixNQUNGLElBSlVsQyx1QkFJVixzQkFKa0JHO01BTXBCLFdIelJMOUQ7TUd5UkssV0FOWTJELHVDQUdSa0MsYUFHOEQ7SUFoUjNELGNBa1JRbEM7TUFDZixXSDVSTDNEO01HNFJrQixXSDVSbEJBO01HNFJrQixJQUFUOEYsT0FBUyxJQURFbkM7TUFFZixXSDdSTDNEO01HNlJLLFlBREk4RixpQ0FPSDtJQTFSTSxjQTRSUW5DLFFBQVFHO01BQ3ZCLFdIdFNMOUQ7TUd1U08sV0h2U1BBO01HdVNPLElBREU2RixNQUNGLElBRmFsQyx1QkFFYixzQkFGcUJHO01BSXJCLFdIelNQOUQ7TUd1U08sSUFDRStGLE9BQ0YsSUFKYXBDO01BTWYsV0gzU0wzRDtNRzJTSyxnQkFMSTZGLE1BRUFFLE9BRkFGLFFBS3NFO0lBbFNuRTs7TUF3WmMsV0hqYTFCN0Y7TUdpYTBCO2VBS2pCZ0csWUFDRixXSHZhUGhHLFFHdWFPLFVBQUU7TUFOaUIsU0FRakJpRyxRQUFNL0Y7UUFDUixXSDFhUEYsUUcwYU8saUNBRFFFLEVBQ2U7TUFUSixTQVdqQmdHOztTQUFRN0Y7U0FBUUM7U0FBSkM7U0FBUUM7U0FBSUM7U0FBSUM7UUFDOUIsV0g3YVBWO1FHNmFPLGlDQURVSyxHQUFJRSxHQUFJRCxHQUFJRSxHQUFJQyxHQUFJQztNQVhYLFNBY2pCeUY7WUFBV2hHLFdBQUhEO1FBQ1YsV0hoYlBGO1FHZ2JPLGlDQURVRSxFQUFHQztNQWRNLFNBaUJqQjhFLE9BQU9BO1FBQ1QsV0huYlBqRjtRR29iVSxXSHBiVkE7UUdvYlUsb0NBRk1pRjtRQUdOLFdIcmJWakY7UUdvYlU7U0FDWTtTQUFaO1FBQ0EsV0h0YlZBO1FHb2JVLFNBRUE7UUFDQSxXSHZiVkE7UUd1YlUsa0RBQXVCO01BdEJQLFNBd0JqQm9HO1lBQWdCaEQsYUFBSmlEO1FBQ2QsV0gxYlByRztRRzBibUMsZ0JBRGRxRztRQUNjLHNDQURWakQ7TUFHSixXSDVickJwRDtNRzRicUIsU0FBWmtGO1FBQVk7a0JBQ1osV0g3YlRsRjtrQkc4YlMsV0g5YlRBLHFCRzhiK0I7TUFFWCxXSGhjcEJBO01HZ2NvQixTQUFYbUY7UUFBVztpQkFDWCxXSGpjVG5GLFFHaWNTO2lCQUNBLFdIbGNUQSxRR2tjUztrQkFDQSxXSG5jVEEsUUdtY1Msa0JBQWtCO01BRU4sV0hyY3JCQTtNR3FjcUIsU0FBWm9GO1FBQVk7aUJBQ1osV0h0Y1RwRixRR3NjUztpQkFDQSxXSHZjVEEsUUd1Y1M7a0JBQ0EsV0h4Y1RBLFFHd2NTLHNCQUEwQjtNQUVmLFdIMWNwQkE7TUcwY29CLFNBQVhzRjtRQUFXO2lCQUNYLFdIM2NUdEYsUUcyY1M7aUJBQ0EsV0g1Y1RBLFFHNGNTO2lCQUNBLFdIN2NUQSxRRzZjUztpQkFDQSxXSDljVEEsUUc4Y1M7aUJBQ0EsV0gvY1RBLFFHK2NTO2lCQUNBLFdIaGRUQSxRR2dkUztpQkFDQSxXSGpkVEEsUUdpZFM7aUJBQ0EsV0hsZFRBLFFHa2RTO2lCQUNBLFdIbmRUQSxRR21kUztpQkFDQSxXSHBkVEEsUUdvZFM7a0JBQ0EsV0hyZFRBLFFHcWRTO2tCQUNBLFdIdGRUQSxRR3NkUztrQkFDQSxXSHZkVEEsUUd1ZFM7a0JBQ0EsV0h4ZFRBLFFHd2RTLG9CQUFzQjtNQWRYLFNBZ0JYdUYsT0FBT0E7UUFBUyxXSDFkekJ2RjtRRzBkeUIsU0FDZHNHLElBQUlBO1VBQ04sV0g1ZFR0RztVRzRkUztZQUFTLHVCQURIc0csSUFEQ2Y7Ozs7Z0NBRW9CLFdINWRwQ3ZGLFFHNGRvQztZQUZYLFdBRThDO1FB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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBOEtLQSxRQUFRRztnQkFDdEIsV0gxdkJOOUQ7Z0JHMHZCTSxjQUEwQzZIO2tCQUFLLFdIMXZCckQ3SCxRRzB2QnFELHVCQUFMNkgsRUFEcEIvRCxFQUMyQztnQkFBakUsNkJBRGNILGFBQVFHLGFBQzRDO0lBanZCNUQ7Ozs7O1NEb0NQN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQ3BDTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXV2QlQsV0hod0JIRCxRR2d3QmtCLCtDQUFnQjtJQXZ2QnRCOzs7OztRRG9DUEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NIOUNMOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJSVVZOzs7O29ERlRaRjs7O0lDNkN3QixXRDdDeEI0STtJQzZDd0IsU0FBbkJDO01BQW1COztTQUNuQixXRDlDTEQ7U0M4Q0s7O1NBQ0EsV0QvQ0xBO1NDK0NLO2VBQ0EsV0RoRExBLFFDZ0RLO2VBQ0EsV0RqRExBLFFDaURLOztTQUNBLFdEbERMQTtTQ2tESztlQUNBLFdEbkRMQSxRQ21ESztlQUNBLFdEcERMQSxRQ29ESztlQUNBLFdEckRMQSxRQ3FESzs7U0FDQSxXRHRETEE7U0NzREs7O1NBQ0EsV0R2RExBLFFDdURLOztTQUNBLFdEeERMQTtTQ3dESzs7U0FDQSxXRHpETEE7U0N5REs7O1NBQ0EsV0QxRExBO1NDMERLOztTQUNBLFdEM0RMQTtTQzJESzs7U0FDQSxXRDVETEE7U0M0REs7O1NBQ0EsV0Q3RExBLFNDNkRL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SSxXRDdWVGlHO2tCQzZWMkMsV0Q3VjNDQTs7UUM2VjhFO01BQ3JFO09BQ0EsV0QvVlRBOztPQzhWUyw0QkQ5VlRBO01DK1Z5QixvQkFBbUM7SUF6RUEsY0EyRWpDakcsUUFBU2E7TUFDL0IsV0RsV0xvRjtNQ2tXSyxTQURzQmpHO01BQ3RCOzs7Ozs7a0JBQ0ksV0RuV1RpRztrQkNtVzJDLFdEblczQ0E7O1FDaVJPLFdEalJQQTtRQ2lScUMsV0RqUnJDQTtRQ2lScUM7b0RBZ0ZEcEY7U0FoRkM7UUFDOUIsV0RsUlBvRjtRQ2tSTyxPQURLOUc7TUFtRkg7T0FDQSxXRHJXVDhHOztPQ29XUyw0QkRwV1RBO01DcVd5QixvQkFBbUM7SUVwVmxELFdIakJWQTtJR2lCVTtNQUEwQjtZQUN6QmxGO1FBQU4sV0hsQkxrRjtRQ29GbUIsT0VsRVJsRjtpQkZtRU4sV0RyRkxrRjs7aUJDc0ZLLFdEdEZMQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUdrQjBCO01BQ3JCLFdIbkJMQTtNR21CSyxRQUNIO0lBSFE7a0JBcUVHaEY7TUFDUixXSHZGTGdGLFVHdUZLLGdDQURRaEYsV0FDYztJQXRFakIsY0F3RU9BLFFBQVFFO01BQ3BCLFdIMUZMOEU7TUcwRjhCLGdCQURMOUUsTUFDSyx5QkFEYkY7TUFDYSxRQUF3QjtJQXpFNUMsY0FzRllBLFNBQ2pCLFdIeEdMZ0YsVUd3R0ssWUFEaUJoRixXQUNhO0lBdkZ6QixjQTRGRUEsU0FDUCxXSDlHTGdGLFVHOEdLLFlBRE9oRixXQUNhO0lBN0ZmLGNBd0dPQSxTQUNaLFdIMUhMZ0YsVUcwSEssWUFEWWhGLFdBQ2E7SUF6R3BCLGNBcUhxQkE7VUFBWXhELFdBQUhEO01BQ25DLFdIdklMeUk7TUd1STBCLFdIdkkxQkE7TUd1STBCLElGMlNPbkYsZUUzU1AsS0FES0c7TUFFMUIsV0h4SUxnRjtNR3VJMEIsU0FES2hGO01GNlMxQixXRG5iTGdGO01HdUkwQjtPRjRTckI7OztXQUNBLFdEcGJMQSx1QkNvYjBCLEtBRk9uRixlRTVTT3RELEVBQUdDOzs7SUFySGpD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QzBCOztrQkFHckMsV0g1VVBnRjtrQkcyVU8sV0gzVVBBO2dCRzBVTyxXSDFVUEEsWUc0VWdCO0lBcEZJLGNBc0ZEaEYsUUFBUWdIO01BQ3hCLFdIL1VIaEM7TUcrVWMsV0gvVWRBO01HK1VjLE9BRGFnQztlQUVwQixXSGhWUGhDLGNHK1VPaUM7ZUFFQSxXSGpWUGpDLGNHK1VPaUM7Z0JBR0EsV0hsVlBqQyxjRytVT2lDO01BS0osV0hwVkhqQztNR29WOEIsT0FOWGhGLHNCQU1XLGlCQUFjO0lBNUZ4QixjQThGREE7TUFDaEIsV0h2VkhnRjtNR3VWNkMsNEJBRDFCaEY7TUFDMEI7O2tCQUd0QyxXSDFWUGdGO2tCR3dWTyxXSHhWUEE7Z0JHeVZPLFdIelZQQSxZRzBWc0I7SUFsR0YsY0FvR0NoRixRQUFRa0g7TUFDMUIsV0g3VkhsQyxVRzZWRyxPQURrQmhGLHdCQUFRa0gsQ0FDSTtJQXJHYixjQXVHQ2xILFNBQ2xCLFdIaFdIZ0YsVUdnV0csT0FEa0JoRixxQkFDTztJQXhHUixjQTBHRkEsUUFBUTJCO01BQ3ZCLFdIbldIcUQ7TUdtV2tCLFdIbldsQkE7TUdtV2tCLE9BRFFyRDs7U0FFbkIsV0hwV1BxRDs7VUdtV09tQztXQUNTOzs7U0FDVCxXSHJXUG5DOztVR21XT21DO1dBRVU7O2VBQ1YsV0h0V1BuQyxjR21XT21DO2VBS0EsV0h4V1BuQyxjR21XT21DO2VBTUEsV0h6V1BuQyxjR21XT21DO2VBSUEsV0h2V1BuQyxjR21XT21DOztTQWFBLFdIaFhQbkM7O1VHbVdPbUM7V0FhUTs7ZUFOUixXSDFXUG5DLGNHbVdPbUM7ZUFTQSxXSDVXUG5DLGNHbVdPbUM7ZUFVQSxXSDdXUG5DLGNHbVdPbUM7O1NBUUEsV0gzV1BuQyxjR21XT21DO2dCQVlBLFdIL1dQbkMsY0dtV09tQztnQkFXQSxXSDlXUG5DLGNHbVdPbUM7O1NBY0EsV0hqWFBuQzs7VUdtV09tQztXQWNZO01BRWhCLFdIblhIbkM7TUdtWDhDLE9BakI1QmhGLHNDQWlCNEIscUJBQWtCO0lBM0g1QyxjQTZIRkE7TUFDZixXSHRYSGdGO01Hc1g2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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0NDQTZIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tDQUFDOzs7Ozs7Ozs7Ozs7OztLQ0FBQzs7OztLQzhEYUM7S0FSQUM7S0FaQUM7S0ExQ2JDOzs7Ozs7Ozs7Ozs7O3lESkFBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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Ozs7Ozs7OztTQWZILFdBOURwQkg7U0ErRHNCLFdBL0R0QkE7U0E2RXVCO1NBYkEsV0FoRXZCQTtTQTZFdUI7OztZQWJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQUZWbkc7OztTQVJPLFdBdERwQm1HO1NBdURzQixXQXZEdEJBO1NBNkV1QjtTQXJCQSxXQXhEdkJBO1NBNkV1QjtVQXJCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFGVmxHOzs7VUFFVTs7U0FkSCxXQTFDcEJrRztTQTJDc0IsV0EzQ3RCQTtTQTZFdUI7U0FqQ0EsV0E1Q3ZCQTtTQTZFdUI7VUFqQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBRlZqRzs7O21CQUhDO0lBaENYO1VMUkgiLCJzb3VyY2VzIjpbIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9jYW1saW50ZXJuYWxGb3JtYXQubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvcHJpbnRleGMubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvZmlsZW5hbWUubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvY2FtbGludGVybmFsRm9ybWF0QmFzaWNzLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL3BlcnZhc2l2ZXMubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvYXJyYXkubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvbGlzdC5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9jaGFyLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL2J5dGVzLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL3N0cmluZy5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9zeXMubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvc29ydC5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9tYXJzaGFsLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL29iai5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9pbnQzMi5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9pbnQ2NC5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9uYXRpdmVpbnQubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvbGV4aW5nLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL3BhcnNpbmcubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvc2V0Lm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL21hcC5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9zdGFjay5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9xdWV1ZS5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9jYW1saW50ZXJuYWxMYXp5Lm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL2xhenkubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvc3RyZWFtLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL2J1ZmZlci5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9wcmludGYubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvYXJnLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL2djLm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL2RpZ2VzdC5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9yYW5kb20ubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvaGFzaHRibC5tbCIsIi9ob21lL3ZpbmNlbnQvLm9wYW0vNC4wMi4zL2xpYi9vY2FtbC9mb3JtYXQubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvc2NhbmYubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvY2FsbGJhY2subWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvY2FtbGludGVybmFsT08ubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvZ2VubGV4Lm1sIiwiL2hvbWUvdmluY2VudC8ub3BhbS80LjAyLjMvbGliL29jYW1sL3dlYWsubWwiLCIvaG9tZS92aW5jZW50Ly5vcGFtLzQuMDIuMy9saWIvb2NhbWwvY29tcGxleC5tbCIsIi9ob21lL3ZpbmNlbnQvRHJvcGJveC9IYWNraW5nL1BvcnRmb2xpby9Kc09mT0NhaXJvL19idWlsZC9kZWZhdWx0L3NyYy9DYWlyb01vY2subWwiLCIvaG9tZS92aW5jZW50L0Ryb3Bib3gvSGFja2luZy9Qb3J0Zm9saW8vSnNPZk9DYWlyby9fYnVpbGQvZGVmYXVsdC9zcmMvSnNPZk9DYWlyby5tbCIsIi9ob21lL3ZpbmNlbnQvRHJvcGJveC9IYWNraW5nL1BvcnRmb2xpby9Kc09mT0NhaXJvL19idWlsZC9kZWZhdWx0L3NyYy9CYWNrZW5kLmluY2wubWwiLCIvaG9tZS92aW5jZW50L0Ryb3Bib3gvSGFja2luZy9Qb3J0Zm9saW8vSnNPZk9DYWlyby9fYnVpbGQvZGVmYXVsdC9zcmMvQ2Fpcm9Nb2NrLmNwcG8ubWwiLCIvaG9tZS92aW5jZW50L0Ryb3Bib3gvSGFja2luZy9Qb3J0Zm9saW8vSnNPZk9DYWlyby9fYnVpbGQvZGVmYXVsdC9zcmMvSnNPZk9DYWlyby5jcHBvLm1sIiwiL2hvbWUvdmluY2VudC9Ecm9wYm94L0hhY2tpbmcvUG9ydGZvbGlvL0pzT2ZPQ2Fpcm8vX2J1aWxkL2RlZmF1bHQvdHN0L1Rlc3RzL1VuaXZlcnNhbC5tbCIsIi9ob21lL3ZpbmNlbnQvRHJvcGJveC9IYWNraW5nL1BvcnRmb2xpby9Kc09mT0NhaXJvL19idWlsZC9kZWZhdWx0L3RzdC9UZXN0cy9EZWNvcmF0aW9uLm1sIiwiL2hvbWUvdmluY2VudC9Ecm9wYm94L0hhY2tpbmcvUG9ydGZvbGlvL0pzT2ZPQ2Fpcm8vX2J1aWxkL2RlZmF1bHQvdHN0L1Rlc3RzL0RyYXdpbmcubWwiLCIvaG9tZS92aW5jZW50L0Ryb3Bib3gvSGFja2luZy9Qb3J0Zm9saW8vSnNPZk9DYWlyby9fYnVpbGQvZGVmYXVsdC90c3QvVGVzdHMvTGltaXRhdGlvbnMubWwiLCIvaG9tZS92aW5jZW50L0Ryb3Bib3gvSGFja2luZy9Qb3J0Zm9saW8vSnNPZk9DYWlyby9fYnVpbGQvZGVmYXVsdC90c3QvVGVzdHMvVGVzdHMubWwiXSwic291cmNlc0NvbnRlbnQiOlsib3BlbiBDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3NcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgKCogVG9vbHMgdG8gbWFuaXB1bGF0ZSBzY2FubmluZyBzZXQgb2YgY2hhcnMgKHNlZSAlWy4uLl0pICopXG5cbnR5cGUgbXV0YWJsZV9jaGFyX3NldCA9IGJ5dGVzXG5cbigqIENyZWF0ZSBhIGZyZXNoLCBlbXB0eSwgbXV0YWJsZSBjaGFyIHNldC4gKilcbmxldCBjcmVhdGVfY2hhcl9zZXQgKCkgPSBCeXRlcy5tYWtlIDMyICdcXDAwMCdcblxuKCogQWRkIGEgY2hhciBpbiBhIG11dGFibGUgY2hhciBzZXQuICopXG5sZXQgYWRkX2luX2NoYXJfc2V0IGNoYXJfc2V0IGMgPVxuICBsZXQgaW5kID0gaW50X29mX2NoYXIgYyBpblxuICBsZXQgc3RyX2luZCA9IGluZCBsc3IgMyBhbmQgbWFzayA9IDEgbHNsIChpbmQgbGFuZCAwYjExMSkgaW5cbiAgQnl0ZXMuc2V0IGNoYXJfc2V0IHN0cl9pbmRcbiAgICAoY2hhcl9vZl9pbnQgKGludF9vZl9jaGFyIChCeXRlcy5nZXQgY2hhcl9zZXQgc3RyX2luZCkgbG9yIG1hc2spKVxuXG5sZXQgZnJlZXplX2NoYXJfc2V0IGNoYXJfc2V0ID1cbiAgQnl0ZXMudG9fc3RyaW5nIGNoYXJfc2V0XG5cbigqIENvbXB1dGUgdGhlIGNvbXBsZW1lbnQgb2YgYSBjaGFyIHNldC4gKilcbmxldCByZXZfY2hhcl9zZXQgY2hhcl9zZXQgPVxuICBsZXQgY2hhcl9zZXQnID0gY3JlYXRlX2NoYXJfc2V0ICgpIGluXG4gIGZvciBpID0gMCB0byAzMSBkb1xuICAgIEJ5dGVzLnNldCBjaGFyX3NldCcgaVxuICAgICAgKGNoYXJfb2ZfaW50IChpbnRfb2ZfY2hhciAoU3RyaW5nLmdldCBjaGFyX3NldCBpKSBseG9yIDB4RkYpKTtcbiAgZG9uZTtcbiAgQnl0ZXMudW5zYWZlX3RvX3N0cmluZyBjaGFyX3NldCdcblxuKCogUmV0dXJuIHRydWUgaWYgYSBgYycgaXMgaW4gYGNoYXJfc2V0Jy4gKilcbmxldCBpc19pbl9jaGFyX3NldCBjaGFyX3NldCBjID1cbiAgbGV0IGluZCA9IGludF9vZl9jaGFyIGMgaW5cbiAgbGV0IHN0cl9pbmQgPSBpbmQgbHNyIDMgYW5kIG1hc2sgPSAxIGxzbCAoaW5kIGxhbmQgMGIxMTEpIGluXG4gIChpbnRfb2ZfY2hhciAoU3RyaW5nLmdldCBjaGFyX3NldCBzdHJfaW5kKSBsYW5kIG1hc2spIDw+IDBcblxuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICgqIElnbm9yZWQgcGFyYW0gY29udmVyc2lvbiAqKVxuXG4oKiBHQURUIHVzZWQgdG8gYWJzdHJhY3QgYW4gZXhpc3RlbnRpYWwgdHlwZSBwYXJhbWV0ZXIuICopXG4oKiBTZWUgcGFyYW1fZm9ybWF0X29mX2lnbm9yZWRfZm9ybWF0LiAqKVxudHlwZSAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgcGFyYW1fZm9ybWF0X2ViYiA9IFBhcmFtX2Zvcm1hdF9FQkIgOlxuICAgICgneCAtPiAnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgcGFyYW1fZm9ybWF0X2ViYlxuXG4oKiBDb21wdXRlIGEgcGFkZGluZyBhc3NvY2lhdGVkIHRvIGEgcGFkX29wdGlvbiAoc2VlIFwiJV80MmRcIikuICopXG5sZXQgcGFkX29mX3BhZF9vcHQgcGFkX29wdCA9IG1hdGNoIHBhZF9vcHQgd2l0aFxuICB8IE5vbmUgLT4gTm9fcGFkZGluZ1xuICB8IFNvbWUgd2lkdGggLT4gTGl0X3BhZGRpbmcgKFJpZ2h0LCB3aWR0aClcblxuKCogQ29tcHV0ZSBhIHByZWNpc2lvbiBhc3NvY2lhdGVkIHRvIGEgcHJlY19vcHRpb24gKHNlZSBcIiVfLjQyZlwiKS4gKilcbmxldCBwcmVjX29mX3ByZWNfb3B0IHByZWNfb3B0ID0gbWF0Y2ggcHJlY19vcHQgd2l0aFxuICB8IE5vbmUgLT4gTm9fcHJlY2lzaW9uXG4gIHwgU29tZSBuZGVjIC0+IExpdF9wcmVjaXNpb24gbmRlY1xuXG4oKiBUdXJuIGFuIGlnbm9yZWQgcGFyYW0gaW50byBpdHMgZXF1aXZhbGVudCBub3QtaWdub3JlZCBmb3JtYXQgbm9kZS4gKilcbigqIFVzZWQgZm9yIGZvcm1hdCBwcmV0dHktcHJpbnRpbmcgYW5kIFNjYW5mLiAqKVxubGV0IHBhcmFtX2Zvcm1hdF9vZl9pZ25vcmVkX2Zvcm1hdCA6IHR5cGUgYSBiIGMgZCBlIGYgeCB5IC5cbiAgICAoYSwgYiwgYywgZCwgeSwgeCkgaWdub3JlZCAtPiAoeCwgYiwgYywgeSwgZSwgZikgZm10IC0+XG4gICAgICAoYSwgYiwgYywgZCwgZSwgZikgcGFyYW1fZm9ybWF0X2ViYiA9XG5mdW4gaWduIGZtdCAtPiBtYXRjaCBpZ24gd2l0aFxuICB8IElnbm9yZWRfY2hhciAtPlxuICAgIFBhcmFtX2Zvcm1hdF9FQkIgKENoYXIgZm10KVxuICB8IElnbm9yZWRfY2FtbF9jaGFyIC0+XG4gICAgUGFyYW1fZm9ybWF0X0VCQiAoQ2FtbF9jaGFyIGZtdClcbiAgfCBJZ25vcmVkX3N0cmluZyBwYWRfb3B0IC0+XG4gICAgUGFyYW1fZm9ybWF0X0VCQiAoU3RyaW5nIChwYWRfb2ZfcGFkX29wdCBwYWRfb3B0LCBmbXQpKVxuICB8IElnbm9yZWRfY2FtbF9zdHJpbmcgcGFkX29wdCAtPlxuICAgIFBhcmFtX2Zvcm1hdF9FQkIgKENhbWxfc3RyaW5nIChwYWRfb2ZfcGFkX29wdCBwYWRfb3B0LCBmbXQpKVxuICB8IElnbm9yZWRfaW50IChpY29udiwgcGFkX29wdCkgLT5cbiAgICBQYXJhbV9mb3JtYXRfRUJCIChJbnQgKGljb252LCBwYWRfb2ZfcGFkX29wdCBwYWRfb3B0LCBOb19wcmVjaXNpb24sIGZtdCkpXG4gIHwgSWdub3JlZF9pbnQzMiAoaWNvbnYsIHBhZF9vcHQpIC0+XG4gICAgUGFyYW1fZm9ybWF0X0VCQlxuICAgICAgKEludDMyIChpY29udiwgcGFkX29mX3BhZF9vcHQgcGFkX29wdCwgTm9fcHJlY2lzaW9uLCBmbXQpKVxuICB8IElnbm9yZWRfbmF0aXZlaW50IChpY29udiwgcGFkX29wdCkgLT5cbiAgICBQYXJhbV9mb3JtYXRfRUJCXG4gICAgICAoTmF0aXZlaW50IChpY29udiwgcGFkX29mX3BhZF9vcHQgcGFkX29wdCwgTm9fcHJlY2lzaW9uLCBmbXQpKVxuICB8IElnbm9yZWRfaW50NjQgKGljb252LCBwYWRfb3B0KSAtPlxuICAgIFBhcmFtX2Zvcm1hdF9FQkJcbiAgICAgIChJbnQ2NCAoaWNvbnYsIHBhZF9vZl9wYWRfb3B0IHBhZF9vcHQsIE5vX3ByZWNpc2lvbiwgZm10KSlcbiAgfCBJZ25vcmVkX2Zsb2F0IChwYWRfb3B0LCBwcmVjX29wdCkgLT5cbiAgICBQYXJhbV9mb3JtYXRfRUJCXG4gICAgICAoRmxvYXQgKEZsb2F0X2YsIHBhZF9vZl9wYWRfb3B0IHBhZF9vcHQsIHByZWNfb2ZfcHJlY19vcHQgcHJlY19vcHQsIGZtdCkpXG4gIHwgSWdub3JlZF9ib29sIC0+XG4gICAgUGFyYW1fZm9ybWF0X0VCQiAoQm9vbCBmbXQpXG4gIHwgSWdub3JlZF9mb3JtYXRfYXJnIChwYWRfb3B0LCBmbXR0eSkgLT5cbiAgICBQYXJhbV9mb3JtYXRfRUJCIChGb3JtYXRfYXJnIChwYWRfb3B0LCBmbXR0eSwgZm10KSlcbiAgfCBJZ25vcmVkX2Zvcm1hdF9zdWJzdCAocGFkX29wdCwgZm10dHkpIC0+XG4gICAgUGFyYW1fZm9ybWF0X0VCQlxuICAgICAgKEZvcm1hdF9zdWJzdCAocGFkX29wdCwgZm10dHksIGZtdCkpXG4gIHwgSWdub3JlZF9yZWFkZXIgLT5cbiAgICBQYXJhbV9mb3JtYXRfRUJCIChSZWFkZXIgZm10KVxuICB8IElnbm9yZWRfc2Nhbl9jaGFyX3NldCAod2lkdGhfb3B0LCBjaGFyX3NldCkgLT5cbiAgICBQYXJhbV9mb3JtYXRfRUJCIChTY2FuX2NoYXJfc2V0ICh3aWR0aF9vcHQsIGNoYXJfc2V0LCBmbXQpKVxuICB8IElnbm9yZWRfc2Nhbl9nZXRfY291bnRlciBjb3VudGVyIC0+XG4gICAgUGFyYW1fZm9ybWF0X0VCQiAoU2Nhbl9nZXRfY291bnRlciAoY291bnRlciwgZm10KSlcbiAgfCBJZ25vcmVkX3NjYW5fbmV4dF9jaGFyIC0+XG4gICAgUGFyYW1fZm9ybWF0X0VCQiAoU2Nhbl9uZXh0X2NoYXIgZm10KVxuXG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBUeXBlcyAqKVxuXG50eXBlICgnYiwgJ2MpIGFjY19mb3JtYXR0aW5nX2dlbiA9XG4gIHwgQWNjX29wZW5fdGFnIG9mICgnYiwgJ2MpIGFjY1xuICB8IEFjY19vcGVuX2JveCBvZiAoJ2IsICdjKSBhY2NcblxuKCogUmV2ZXJzZWQgbGlzdCBvZiBwcmludGluZyBhdG9tcy4gKilcbigqIFVzZWQgdG8gYWNjdW11bGF0ZSBwcmludGYgYXJndW1lbnRzLiAqKVxuYW5kICgnYiwgJ2MpIGFjYyA9XG4gIHwgQWNjX2Zvcm1hdHRpbmdfbGl0IG9mICgnYiwgJ2MpIGFjYyAqIGZvcm1hdHRpbmdfbGl0ICgqIFNwZWNpYWwgZm10dGluZyAoYm94KSAgICAgICopXG4gIHwgQWNjX2Zvcm1hdHRpbmdfZ2VuIG9mICgnYiwgJ2MpIGFjYyAqICgnYiwgJ2MpIGFjY19mb3JtYXR0aW5nX2dlbiAoKiBTcGVjaWFsIGZtdHRpbmcgKGJveCkgKilcbiAgfCBBY2Nfc3RyaW5nX2xpdGVyYWwgb2YgKCdiLCAnYykgYWNjICogc3RyaW5nICAgICAgICAgKCogTGl0ZXJhbCBzdHJpbmcgICAgICAgICAgICAgKilcbiAgfCBBY2NfY2hhcl9saXRlcmFsICAgb2YgKCdiLCAnYykgYWNjICogY2hhciAgICAgICAgICAgKCogTGl0ZXJhbCBjaGFyICAgICAgICAgICAgICAgKilcbiAgfCBBY2NfZGF0YV9zdHJpbmcgICAgb2YgKCdiLCAnYykgYWNjICogc3RyaW5nICAgICAgICAgKCogR2VuZXJhdGVkIHN0cmluZyAgICAgICAgICAgKilcbiAgfCBBY2NfZGF0YV9jaGFyICAgICAgb2YgKCdiLCAnYykgYWNjICogY2hhciAgICAgICAgICAgKCogR2VuZXJhdGVkIGNoYXIgICAgICAgICAgICAgKilcbiAgfCBBY2NfZGVsYXkgICAgICAgICAgb2YgKCdiLCAnYykgYWNjICogKCdiIC0+ICdjKSAgICAgKCogRGVsYXllZCBwcmludGluZyAoJWEsICV0KSAgKilcbiAgfCBBY2NfZmx1c2ggICAgICAgICAgb2YgKCdiLCAnYykgYWNjICAgICAgICAgICAgICAgICAgKCogRmx1c2ggICAgICAgICAgICAgICAgICAgICAgKilcbiAgfCBBY2NfaW52YWxpZF9hcmcgICAgb2YgKCdiLCAnYykgYWNjICogc3RyaW5nICAgICAgICAgKCogUmFpc2UgSW52YWxpZF9hcmd1bWVudCBtc2cgKilcbiAgfCBFbmRfb2ZfYWNjXG5cbigqIExpc3Qgb2YgaGV0ZXJvZ2VuZW91cyB2YWx1ZXMuICopXG4oKiBVc2VkIHRvIGFjY3VtdWxhdGUgc2NhbmYgY2FsbGJhY2sgYXJndW1lbnRzLiAqKVxudHlwZSAoJ2EsICdiKSBoZXRlcl9saXN0ID1cbiAgfCBDb25zIDogJ2MgKiAoJ2EsICdiKSBoZXRlcl9saXN0IC0+ICgnYyAtPiAnYSwgJ2IpIGhldGVyX2xpc3RcbiAgfCBOaWwgOiAoJ2IsICdiKSBoZXRlcl9saXN0XG5cbigqIEV4aXN0ZW50aWFsIEJsYWNrIEJveGVzLiAqKVxuKCogVXNlZCB0byBhYnN0cmFjdCBzb21lIGV4aXN0ZW50aWFsIHR5cGUgcGFyYW1ldGVycy4gKilcblxuKCogR0FEVCB0eXBlIGFzc29jaWF0aW5nIGEgcGFkZGluZyBhbmQgYW4gZm10dHkuICopXG4oKiBTZWUgdGhlIHR5cGVfcGFkZGluZyBmdW5jdGlvbi4gKilcbnR5cGUgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIHBhZGRpbmdfZm10dHlfZWJiID0gUGFkZGluZ19mbXR0eV9FQkIgOlxuICAgICAoJ3gsICd5KSBwYWRkaW5nICogKCd5LCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdHR5IC0+XG4gICAgICgneCwgJ2IsICdjLCAnZCwgJ2UsICdmKSBwYWRkaW5nX2ZtdHR5X2ViYlxuXG4oKiBHQURUIHR5cGUgYXNzb2NpYXRpbmcgYSBwYWRkaW5nLCBhIHByZWNpc2lvbiBhbmQgYW4gZm10dHkuICopXG4oKiBTZWUgdGhlIHR5cGVfcGFkcHJlYyBmdW5jdGlvbi4gKilcbnR5cGUgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIHBhZHByZWNfZm10dHlfZWJiID0gUGFkcHJlY19mbXR0eV9FQkIgOlxuICAgICAoJ3gsICd5KSBwYWRkaW5nICogKCd5LCAneikgcHJlY2lzaW9uICogKCd6LCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdHR5IC0+XG4gICAgICgneCwgJ2IsICdjLCAnZCwgJ2UsICdmKSBwYWRwcmVjX2ZtdHR5X2ViYlxuXG4oKiBHQURUIHR5cGUgYXNzb2NpYXRpbmcgYSBwYWRkaW5nIGFuZCBhbiBmbXQuICopXG4oKiBTZWUgbWFrZV9wYWRkaW5nX2ZtdF9lYmIgYW5kIHBhcnNlX2Zvcm1hdCBmdW5jdGlvbnMuICopXG50eXBlICgnYSwgJ2IsICdjLCAnZSwgJ2YpIHBhZGRpbmdfZm10X2ViYiA9IFBhZGRpbmdfZm10X0VCQiA6XG4gICAgIChfLCAneCAtPiAnYSkgcGFkZGluZyAqXG4gICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgKCd4LCAnYiwgJ2MsICdlLCAnZikgcGFkZGluZ19mbXRfZWJiXG5cbigqIEdBRFQgdHlwZSBhc3NvY2lhdGluZyBhIHByZWNpc2lvbiBhbmQgYW4gZm10LiAqKVxuKCogU2VlIG1ha2VfcHJlY2lzaW9uX2ZtdF9lYmIgYW5kIHBhcnNlX2Zvcm1hdCBmdW5jdGlvbnMuICopXG50eXBlICgnYSwgJ2IsICdjLCAnZSwgJ2YpIHByZWNpc2lvbl9mbXRfZWJiID0gUHJlY2lzaW9uX2ZtdF9FQkIgOlxuICAgICAoXywgJ3ggLT4gJ2EpIHByZWNpc2lvbiAqXG4gICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgKCd4LCAnYiwgJ2MsICdlLCAnZikgcHJlY2lzaW9uX2ZtdF9lYmJcblxuKCogR0FEVCB0eXBlIGFzc29jaWF0aW5nIGEgcGFkZGluZywgYSBwcmVjaXNpb24gYW5kIGFuIGZtdC4gKilcbigqIFNlZSBtYWtlX3BhZHByZWNfZm10X2ViYiBhbmQgcGFyc2VfZm9ybWF0IGZ1bmN0aW9ucy4gKilcbnR5cGUgKCdwLCAnYiwgJ2MsICdlLCAnZikgcGFkcHJlY19mbXRfZWJiID0gUGFkcHJlY19mbXRfRUJCIDpcbiAgICAgKCd4LCAneSkgcGFkZGluZyAqICgneSwgJ3AgLT4gJ2EpIHByZWNpc2lvbiAqXG4gICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgKCdwLCAnYiwgJ2MsICdlLCAnZikgcGFkcHJlY19mbXRfZWJiXG5cbigqIEFic3RyYWN0IHRoZSAnYSBhbmQgJ2QgcGFyYW1ldGVycyBvZiBhbiBmbXQuICopXG4oKiBPdXRwdXQgdHlwZSBvZiB0aGUgZm9ybWF0IHBhcnNpbmcgZnVuY3Rpb24uICopXG50eXBlICgnYiwgJ2MsICdlLCAnZikgZm10X2ViYiA9IEZtdF9FQkIgOlxuICAgICAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10IC0+XG4gICAgICgnYiwgJ2MsICdlLCAnZikgZm10X2ViYlxuXG4oKiBHQURUIHR5cGUgYXNzb2NpYXRpbmcgYW4gZm10dHkgYW5kIGFuIGZtdC4gKilcbigqIFNlZSB0aGUgdHlwZV9mb3JtYXRfZ2VuIGZ1bmN0aW9uLiAqKVxudHlwZSAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10X2ZtdHR5X2ViYiA9IEZtdF9mbXR0eV9FQkIgOlxuICAgICAoJ2EsICdiLCAnYywgJ2QsICd5LCAneCkgZm10ICpcbiAgICAgKCd4LCAnYiwgJ2MsICd5LCAnZSwgJ2YpIGZtdHR5IC0+XG4gICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXRfZm10dHlfZWJiXG5cbigqIEdBRFQgdHlwZSBhc3NvY2lhdGluZyBhbiBmbXR0eSBhbmQgYW4gZm10LiAqKVxuKCogU2VlIHRoZSB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbiBmdW5jdGlvbi4gKilcbnR5cGUgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdHR5X2ZtdF9lYmIgPSBGbXR0eV9mbXRfRUJCIDpcbiAgICAgKCdhLCAnYiwgJ2MsICdkLCAneSwgJ3gpIGZtdHR5ICpcbiAgICAgKCd4LCAnYiwgJ2MsICd5LCAnZSwgJ2YpIGZtdF9mbXR0eV9lYmIgLT5cbiAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdHR5X2ZtdF9lYmJcblxuKCogQWJzdHJhY3QgYWxsIGZtdHR5IHR5cGUgcGFyYW1ldGVycy4gKilcbigqIFVzZWQgdG8gY29tcGFyZSBmb3JtYXQgdHlwZXMuICopXG50eXBlIGZtdHR5X2ViYiA9IEZtdHR5X0VCQiA6ICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXR0eSAtPiBmbXR0eV9lYmJcblxuKCogQWJzdHJhY3QgYWxsIHBhZGRpbmcgdHlwZSBwYXJhbWV0ZXJzLiAqKVxuKCogVXNlZCB0byBjb21wYXJlIHBhZGRpbmdzLiAqKVxudHlwZSBwYWRkaW5nX2ViYiA9IFBhZGRpbmdfRUJCIDogKCdhLCAnYikgcGFkZGluZyAtPiBwYWRkaW5nX2ViYlxuXG4oKiBBYnN0cmFjdCBhbGwgcHJlY2lzaW9uIHR5cGUgcGFyYW1ldGVycy4gKilcbigqIFVzZWQgdG8gY29tcGFyZSBwcmVjaXNpb25zLiAqKVxudHlwZSBwcmVjaXNpb25fZWJiID0gUHJlY2lzaW9uX0VCQiA6ICgnYSwgJ2IpIHByZWNpc2lvbiAtPiBwcmVjaXNpb25fZWJiXG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogQ29uc3RhbnRzICopXG5cbigqIERlZmF1bHQgcHJlY2lzaW9uIGZvciBmbG9hdCBwcmludGluZy4gKilcbmxldCBkZWZhdWx0X2Zsb2F0X3ByZWNpc2lvbiA9IDZcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBFeHRlcm5hbHMgKilcblxuZXh0ZXJuYWwgZm9ybWF0X2Zsb2F0OiBzdHJpbmcgLT4gZmxvYXQgLT4gc3RyaW5nXG4gID0gXCJjYW1sX2Zvcm1hdF9mbG9hdFwiXG5leHRlcm5hbCBmb3JtYXRfaW50OiBzdHJpbmcgLT4gaW50IC0+IHN0cmluZ1xuICA9IFwiY2FtbF9mb3JtYXRfaW50XCJcbmV4dGVybmFsIGZvcm1hdF9pbnQzMjogc3RyaW5nIC0+IGludDMyIC0+IHN0cmluZ1xuICA9IFwiY2FtbF9pbnQzMl9mb3JtYXRcIlxuZXh0ZXJuYWwgZm9ybWF0X25hdGl2ZWludDogc3RyaW5nIC0+IG5hdGl2ZWludCAtPiBzdHJpbmdcbiAgPSBcImNhbWxfbmF0aXZlaW50X2Zvcm1hdFwiXG5leHRlcm5hbCBmb3JtYXRfaW50NjQ6IHN0cmluZyAtPiBpbnQ2NCAtPiBzdHJpbmdcbiAgPSBcImNhbWxfaW50NjRfZm9ybWF0XCJcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICgqIFRvb2xzIHRvIHByZXR0eS1wcmludCBmb3JtYXRzICopXG5cbigqIFR5cGUgb2YgZXh0ZW5zaWJsZSBjaGFyYWN0ZXIgYnVmZmVycy4gKilcbnR5cGUgYnVmZmVyID0ge1xuICBtdXRhYmxlIGluZCA6IGludDtcbiAgbXV0YWJsZSBieXRlcyA6IGJ5dGVzO1xufVxuXG4oKiBDcmVhdGUgYSBmcmVzaCBidWZmZXIuICopXG5sZXQgYnVmZmVyX2NyZWF0ZSBpbml0X3NpemUgPSB7IGluZCA9IDA7IGJ5dGVzID0gQnl0ZXMuY3JlYXRlIGluaXRfc2l6ZSB9XG5cbigqIENoZWNrIHNpemUgb2YgdGhlIGJ1ZmZlciBhbmQgZ3JvdyBpdCBpZiBuZWVkZWQuICopXG5sZXQgYnVmZmVyX2NoZWNrX3NpemUgYnVmIG92ZXJoZWFkID1cbiAgbGV0IGxlbiA9IEJ5dGVzLmxlbmd0aCBidWYuYnl0ZXMgaW5cbiAgbGV0IG1pbl9sZW4gPSBidWYuaW5kICsgb3ZlcmhlYWQgaW5cbiAgaWYgbWluX2xlbiA+IGxlbiB0aGVuIChcbiAgICBsZXQgbmV3X2xlbiA9IG1heCAobGVuICogMikgbWluX2xlbiBpblxuICAgIGxldCBuZXdfc3RyID0gQnl0ZXMuY3JlYXRlIG5ld19sZW4gaW5cbiAgICBCeXRlcy5ibGl0IGJ1Zi5ieXRlcyAwIG5ld19zdHIgMCBsZW47XG4gICAgYnVmLmJ5dGVzIDwtIG5ld19zdHI7XG4gIClcblxuKCogQWRkIHRoZSBjaGFyYWN0ZXIgYGMnIHRvIHRoZSBidWZmZXIgYGJ1ZicuICopXG5sZXQgYnVmZmVyX2FkZF9jaGFyIGJ1ZiBjID1cbiAgYnVmZmVyX2NoZWNrX3NpemUgYnVmIDE7XG4gIEJ5dGVzLnNldCBidWYuYnl0ZXMgYnVmLmluZCBjO1xuICBidWYuaW5kIDwtIGJ1Zi5pbmQgKyAxXG5cbigqIEFkZCB0aGUgc3RyaW5nIGBzJyB0byB0aGUgYnVmZmVyIGBidWYnLiAqKVxubGV0IGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiBzID1cbiAgbGV0IHN0cl9sZW4gPSBTdHJpbmcubGVuZ3RoIHMgaW5cbiAgYnVmZmVyX2NoZWNrX3NpemUgYnVmIHN0cl9sZW47XG4gIFN0cmluZy5ibGl0IHMgMCBidWYuYnl0ZXMgYnVmLmluZCBzdHJfbGVuO1xuICBidWYuaW5kIDwtIGJ1Zi5pbmQgKyBzdHJfbGVuXG5cbigqIEdldCB0aGUgY29udGVudCBvZiB0aGUgYnVmZmVyLiAqKVxubGV0IGJ1ZmZlcl9jb250ZW50cyBidWYgPVxuICBCeXRlcy5zdWJfc3RyaW5nIGJ1Zi5ieXRlcyAwIGJ1Zi5pbmRcblxuKCoqKilcblxuKCogQ29udmVydCBhbiBpbnRlZ2VyIGNvbnZlcnNpb24gdG8gY2hhci4gKilcbmxldCBjaGFyX29mX2ljb252IGljb252ID0gbWF0Y2ggaWNvbnYgd2l0aFxuICB8IEludF9kIHwgSW50X3BkIHwgSW50X3NkIC0+ICdkJyB8IEludF9pIHwgSW50X3BpIHwgSW50X3NpIC0+ICdpJ1xuICB8IEludF94IHwgSW50X0N4IC0+ICd4JyB8IEludF9YIHwgSW50X0NYIC0+ICdYJyB8IEludF9vIHwgSW50X0NvIC0+ICdvJ1xuICB8IEludF91IC0+ICd1J1xuXG4oKiBDb252ZXJ0IGEgZmxvYXQgY29udmVyc2lvbiB0byBjaGFyLiAqKVxubGV0IGNoYXJfb2ZfZmNvbnYgZmNvbnYgPSBtYXRjaCBmY29udiB3aXRoXG4gIHwgRmxvYXRfZiB8IEZsb2F0X3BmIHwgRmxvYXRfc2YgLT4gJ2YnIHwgRmxvYXRfZSB8IEZsb2F0X3BlIHwgRmxvYXRfc2UgLT4gJ2UnXG4gIHwgRmxvYXRfRSB8IEZsb2F0X3BFIHwgRmxvYXRfc0UgLT4gJ0UnIHwgRmxvYXRfZyB8IEZsb2F0X3BnIHwgRmxvYXRfc2cgLT4gJ2cnXG4gIHwgRmxvYXRfRyB8IEZsb2F0X3BHIHwgRmxvYXRfc0cgLT4gJ0cnIHwgRmxvYXRfRiAtPiAnRidcblxuKCogQ29udmVydCBhIHNjYW5uaW5nIGNvdW50ZXIgdG8gY2hhci4gKilcbmxldCBjaGFyX29mX2NvdW50ZXIgY291bnRlciA9IG1hdGNoIGNvdW50ZXIgd2l0aFxuICB8IExpbmVfY291bnRlciAgLT4gJ2wnXG4gIHwgQ2hhcl9jb3VudGVyICAtPiAnbidcbiAgfCBUb2tlbl9jb3VudGVyIC0+ICdOJ1xuXG4oKioqKVxuXG4oKiBQcmludCBhIGNoYXJfc2V0IGluIGEgYnVmZmVyIHdpdGggdGhlIE9DYW1sIGZvcm1hdCBsZXhpY2FsIGNvbnZlbnRpb24uICopXG5sZXQgYnByaW50X2NoYXJfc2V0IGJ1ZiBjaGFyX3NldCA9XG4gIGxldCByZWMgcHJpbnRfc3RhcnQgc2V0ID1cbiAgICBsZXQgaXNfYWxvbmUgYyA9XG4gICAgICBsZXQgYmVmb3JlLCBhZnRlciA9IENoYXIuKGNociAoY29kZSBjIC0gMSksIGNociAoY29kZSBjICsgMSkpIGluXG4gICAgICBpc19pbl9jaGFyX3NldCBzZXQgY1xuICAgICAgJiYgbm90IChpc19pbl9jaGFyX3NldCBzZXQgYmVmb3JlICYmIGlzX2luX2NoYXJfc2V0IHNldCBhZnRlcikgaW5cbiAgICBpZiBpc19hbG9uZSAnXScgdGhlbiBidWZmZXJfYWRkX2NoYXIgYnVmICddJztcbiAgICBwcmludF9vdXQgc2V0IDE7XG4gICAgaWYgaXNfYWxvbmUgJy0nIHRoZW4gYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnLSc7XG4gIGFuZCBwcmludF9vdXQgc2V0IGkgPVxuICAgIGlmIGkgPCAyNTYgdGhlblxuICAgICAgaWYgaXNfaW5fY2hhcl9zZXQgc2V0IChjaGFyX29mX2ludCBpKSB0aGVuIHByaW50X2ZpcnN0IHNldCBpXG4gICAgICBlbHNlIHByaW50X291dCBzZXQgKGkgKyAxKVxuICBhbmQgcHJpbnRfZmlyc3Qgc2V0IGkgPVxuICAgIG1hdGNoIGNoYXJfb2ZfaW50IGkgd2l0aFxuICAgIHwgJ1xcMjU1JyAtPiBwcmludF9jaGFyIGJ1ZiAyNTU7XG4gICAgfCAnXScgfCAnLScgLT4gcHJpbnRfb3V0IHNldCAoaSArIDEpO1xuICAgIHwgXyAtPiBwcmludF9zZWNvbmQgc2V0IChpICsgMSk7XG4gIGFuZCBwcmludF9zZWNvbmQgc2V0IGkgPVxuICAgIGlmIGlzX2luX2NoYXJfc2V0IHNldCAoY2hhcl9vZl9pbnQgaSkgdGhlblxuICAgICAgbWF0Y2ggY2hhcl9vZl9pbnQgaSB3aXRoXG4gICAgICB8ICdcXDI1NScgLT5cbiAgICAgICAgcHJpbnRfY2hhciBidWYgMjU0O1xuICAgICAgICBwcmludF9jaGFyIGJ1ZiAyNTU7XG4gICAgICB8ICddJyB8ICctJyB3aGVuIG5vdCAoaXNfaW5fY2hhcl9zZXQgc2V0IChjaGFyX29mX2ludCAoaSArIDEpKSkgLT5cbiAgICAgICAgcHJpbnRfY2hhciBidWYgKGkgLSAxKTtcbiAgICAgICAgcHJpbnRfb3V0IHNldCAoaSArIDEpO1xuICAgICAgfCBfIHdoZW4gbm90IChpc19pbl9jaGFyX3NldCBzZXQgKGNoYXJfb2ZfaW50IChpICsgMSkpKSAtPlxuICAgICAgICBwcmludF9jaGFyIGJ1ZiAoaSAtIDEpO1xuICAgICAgICBwcmludF9jaGFyIGJ1ZiBpO1xuICAgICAgICBwcmludF9vdXQgc2V0IChpICsgMik7XG4gICAgICB8IF8gLT5cbiAgICAgICAgcHJpbnRfaW4gc2V0IChpIC0gMSkgKGkgKyAyKTtcbiAgICBlbHNlIChcbiAgICAgIHByaW50X2NoYXIgYnVmIChpIC0gMSk7XG4gICAgICBwcmludF9vdXQgc2V0IChpICsgMSk7XG4gICAgKVxuICBhbmQgcHJpbnRfaW4gc2V0IGkgaiA9XG4gICAgaWYgaiA9IDI1NiB8fCBub3QgKGlzX2luX2NoYXJfc2V0IHNldCAoY2hhcl9vZl9pbnQgaikpIHRoZW4gKFxuICAgICAgcHJpbnRfY2hhciBidWYgaTtcbiAgICAgIHByaW50X2NoYXIgYnVmIChpbnRfb2ZfY2hhciAnLScpO1xuICAgICAgcHJpbnRfY2hhciBidWYgKGogLSAxKTtcbiAgICAgIGlmIGogPCAyNTYgdGhlbiBwcmludF9vdXQgc2V0IChqICsgMSk7XG4gICAgKSBlbHNlXG4gICAgICBwcmludF9pbiBzZXQgaSAoaiArIDEpO1xuICBhbmQgcHJpbnRfY2hhciBidWYgaSA9IG1hdGNoIGNoYXJfb2ZfaW50IGkgd2l0aFxuICAgIHwgJyUnIC0+IGJ1ZmZlcl9hZGRfY2hhciBidWYgJyUnOyBidWZmZXJfYWRkX2NoYXIgYnVmICclJztcbiAgICB8ICdAJyAtPiBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnQCc7XG4gICAgfCBjICAgLT4gYnVmZmVyX2FkZF9jaGFyIGJ1ZiBjO1xuICBpblxuICBidWZmZXJfYWRkX2NoYXIgYnVmICdbJztcbiAgcHJpbnRfc3RhcnQgKFxuICAgIGlmIGlzX2luX2NoYXJfc2V0IGNoYXJfc2V0ICdcXDAwMCdcbiAgICB0aGVuICggYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnXic7IHJldl9jaGFyX3NldCBjaGFyX3NldCApXG4gICAgZWxzZSBjaGFyX3NldFxuICApO1xuICBidWZmZXJfYWRkX2NoYXIgYnVmICddJ1xuXG4oKioqKVxuXG4oKiBQcmludCBhIHBhZHR5IGluIGEgYnVmZmVyIHdpdGggdGhlIGZvcm1hdC1saWtlIHN5bnRheC4gKilcbmxldCBicHJpbnRfcGFkdHkgYnVmIHBhZHR5ID0gbWF0Y2ggcGFkdHkgd2l0aFxuICB8IExlZnQgIC0+IGJ1ZmZlcl9hZGRfY2hhciBidWYgJy0nXG4gIHwgUmlnaHQgLT4gKClcbiAgfCBaZXJvcyAtPiBidWZmZXJfYWRkX2NoYXIgYnVmICcwJ1xuXG4oKiBQcmludCB0aGUgJ18nIG9mIGFuIGlnbm9yZWQgZmxhZyBpZiBuZWVkZWQuICopXG5sZXQgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWcgPVxuICBpZiBpZ25fZmxhZyB0aGVuIGJ1ZmZlcl9hZGRfY2hhciBidWYgJ18nXG5cbigqKiopXG5cbmxldCBicHJpbnRfcGFkX29wdCBidWYgcGFkX29wdCA9IG1hdGNoIHBhZF9vcHQgd2l0aFxuICB8IE5vbmUgLT4gKClcbiAgfCBTb21lIHdpZHRoIC0+IGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiAoc3RyaW5nX29mX2ludCB3aWR0aClcblxuKCoqKilcblxuKCogUHJpbnQgcGFkZGluZyBpbiBhIGJ1ZmZlciB3aXRoIHRoZSBmb3JtYXQtbGlrZSBzeW50YXguICopXG5sZXQgYnByaW50X3BhZGRpbmcgOiB0eXBlIGEgYiAuIGJ1ZmZlciAtPiAoYSwgYikgcGFkZGluZyAtPiB1bml0ID1cbmZ1biBidWYgcGFkIC0+IG1hdGNoIHBhZCB3aXRoXG4gIHwgTm9fcGFkZGluZyAtPiAoKVxuICB8IExpdF9wYWRkaW5nIChwYWR0eSwgbikgLT5cbiAgICBicHJpbnRfcGFkdHkgYnVmIHBhZHR5O1xuICAgIGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiAoc3RyaW5nX29mX2ludCBuKTtcbiAgfCBBcmdfcGFkZGluZyBwYWR0eSAtPlxuICAgIGJwcmludF9wYWR0eSBidWYgcGFkdHk7XG4gICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnKidcblxuKCogUHJpbnQgcHJlY2lzaW9uIGluIGEgYnVmZmVyIHdpdGggdGhlIGZvcm1hdC1saWtlIHN5bnRheC4gKilcbmxldCBicHJpbnRfcHJlY2lzaW9uIDogdHlwZSBhIGIgLiBidWZmZXIgLT4gKGEsIGIpIHByZWNpc2lvbiAtPiB1bml0ID1cbiAgZnVuIGJ1ZiBwcmVjIC0+IG1hdGNoIHByZWMgd2l0aFxuICB8IE5vX3ByZWNpc2lvbiAtPiAoKVxuICB8IExpdF9wcmVjaXNpb24gbiAtPlxuICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJy4nO1xuICAgIGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiAoc3RyaW5nX29mX2ludCBuKTtcbiAgfCBBcmdfcHJlY2lzaW9uIC0+XG4gICAgYnVmZmVyX2FkZF9zdHJpbmcgYnVmIFwiLipcIlxuXG4oKioqKVxuXG4oKiBQcmludCB0aGUgb3B0aW9ubmFsICcrJywgJyAnIG9yICcjJyBhc3NvY2lhdGVkIHRvIGFuIGludCBjb252ZXJzaW9uLiAqKVxubGV0IGJwcmludF9pY29udl9mbGFnIGJ1ZiBpY29udiA9IG1hdGNoIGljb252IHdpdGhcbiAgfCBJbnRfcGQgfCBJbnRfcGkgLT4gYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnKydcbiAgfCBJbnRfc2QgfCBJbnRfc2kgLT4gYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnICdcbiAgfCBJbnRfQ3ggfCBJbnRfQ1ggfCBJbnRfQ28gLT4gYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnIydcbiAgfCBJbnRfZCB8IEludF9pIHwgSW50X3ggfCBJbnRfWCB8IEludF9vIHwgSW50X3UgLT4gKClcblxuKCogUHJpbnQgYW4gY29tcGxldGUgaW50IGZvcm1hdCBpbiBhIGJ1ZmZlciAoZXg6IFwiJTMuKmRcIikuICopXG5sZXQgYnByaW50X2ludF9mbXQgYnVmIGlnbl9mbGFnIGljb252IHBhZCBwcmVjID1cbiAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnJSc7XG4gIGJwcmludF9pZ25vcmVkX2ZsYWcgYnVmIGlnbl9mbGFnO1xuICBicHJpbnRfaWNvbnZfZmxhZyBidWYgaWNvbnY7XG4gIGJwcmludF9wYWRkaW5nIGJ1ZiBwYWQ7XG4gIGJwcmludF9wcmVjaXNpb24gYnVmIHByZWM7XG4gIGJ1ZmZlcl9hZGRfY2hhciBidWYgKGNoYXJfb2ZfaWNvbnYgaWNvbnYpXG5cbigqIFByaW50IGEgY29tcGxldGUgaW50MzIsIG5hdGl2ZWludCBvciBpbnQ2NCBmb3JtYXQgaW4gYSBidWZmZXIuICopXG5sZXQgYnByaW50X2FsdGludF9mbXQgYnVmIGlnbl9mbGFnIGljb252IHBhZCBwcmVjIGMgPVxuICBidWZmZXJfYWRkX2NoYXIgYnVmICclJztcbiAgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gIGJwcmludF9pY29udl9mbGFnIGJ1ZiBpY29udjtcbiAgYnByaW50X3BhZGRpbmcgYnVmIHBhZDtcbiAgYnByaW50X3ByZWNpc2lvbiBidWYgcHJlYztcbiAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiBjO1xuICBidWZmZXJfYWRkX2NoYXIgYnVmIChjaGFyX29mX2ljb252IGljb252KVxuXG4oKioqKVxuXG4oKiBQcmludCB0aGUgb3B0aW9ubmFsICcrJyBhc3NvY2lhdGVkIHRvIGEgZmxvYXQgY29udmVyc2lvbi4gKilcbmxldCBicHJpbnRfZmNvbnZfZmxhZyBidWYgZmNvbnYgPSBtYXRjaCBmY29udiB3aXRoXG4gIHwgRmxvYXRfcGYgfCBGbG9hdF9wZSB8IEZsb2F0X3BFIHwgRmxvYXRfcGcgfCBGbG9hdF9wRyAtPlxuICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJysnXG4gIHwgRmxvYXRfc2YgfCBGbG9hdF9zZSB8IEZsb2F0X3NFIHwgRmxvYXRfc2cgfCBGbG9hdF9zRyAtPlxuICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJyAnXG4gIHwgRmxvYXRfZiB8IEZsb2F0X2UgfCBGbG9hdF9FIHwgRmxvYXRfZyB8IEZsb2F0X0cgfCBGbG9hdF9GIC0+XG4gICAgKClcblxuKCogUHJpbnQgYSBjb21wbGV0ZSBmbG9hdCBmb3JtYXQgaW4gYSBidWZmZXIgKGV4OiBcIiUrKi4zZlwiKS4gKilcbmxldCBicHJpbnRfZmxvYXRfZm10IGJ1ZiBpZ25fZmxhZyBmY29udiBwYWQgcHJlYyA9XG4gIGJ1ZmZlcl9hZGRfY2hhciBidWYgJyUnO1xuICBicHJpbnRfaWdub3JlZF9mbGFnIGJ1ZiBpZ25fZmxhZztcbiAgYnByaW50X2Zjb252X2ZsYWcgYnVmIGZjb252O1xuICBicHJpbnRfcGFkZGluZyBidWYgcGFkO1xuICBicHJpbnRfcHJlY2lzaW9uIGJ1ZiBwcmVjO1xuICBidWZmZXJfYWRkX2NoYXIgYnVmIChjaGFyX29mX2Zjb252IGZjb252KVxuXG4oKiBDb21wdXRlIHRoZSBsaXRlcmFsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIGZvcm1hdHRpbmdfbGl0LiAqKVxuKCogQWxzbyB1c2VkIGJ5IFByaW50ZiBhbmQgU2NhbmYgd2hlcmUgZm9ybWF0dGluZyBpcyBub3QgaW50ZXJwcmV0ZWQuICopXG5sZXQgc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0IGZvcm1hdHRpbmdfbGl0ID0gbWF0Y2ggZm9ybWF0dGluZ19saXQgd2l0aFxuICB8IENsb3NlX2JveCAgICAgICAgICAgIC0+IFwiQF1cIlxuICB8IENsb3NlX3RhZyAgICAgICAgICAgIC0+IFwiQH1cIlxuICB8IEJyZWFrIChzdHIsIF8sIF8pICAgIC0+IHN0clxuICB8IEZGbHVzaCAgICAgICAgICAgICAgIC0+IFwiQD9cIlxuICB8IEZvcmNlX25ld2xpbmUgICAgICAgIC0+IFwiQFxcblwiXG4gIHwgRmx1c2hfbmV3bGluZSAgICAgICAgLT4gXCJALlwiXG4gIHwgTWFnaWNfc2l6ZSAoc3RyLCBfKSAgLT4gc3RyXG4gIHwgRXNjYXBlZF9hdCAgICAgICAgICAgLT4gXCJAQFwiXG4gIHwgRXNjYXBlZF9wZXJjZW50ICAgICAgLT4gXCJAJVwiXG4gIHwgU2Nhbl9pbmRpYyBjIC0+IFwiQFwiIF4gKFN0cmluZy5tYWtlIDEgYylcblxuKCogQ29tcHV0ZSB0aGUgbGl0ZXJhbCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBmb3JtYXR0aW5nLiAqKVxuKCogQWxzbyB1c2VkIGJ5IFByaW50ZiBhbmQgU2NhbmYgd2hlcmUgZm9ybWF0dGluZyBpcyBub3QgaW50ZXJwcmV0ZWQuICopXG5sZXQgc3RyaW5nX29mX2Zvcm1hdHRpbmdfZ2VuIDogdHlwZSBhIGIgYyBkIGUgZiAuXG4gICAgKGEsIGIsIGMsIGQsIGUsIGYpIGZvcm1hdHRpbmdfZ2VuIC0+IHN0cmluZyA9XG4gIGZ1biBmb3JtYXR0aW5nX2dlbiAtPiBtYXRjaCBmb3JtYXR0aW5nX2dlbiB3aXRoXG4gIHwgT3Blbl90YWcgKEZvcm1hdCAoXywgc3RyKSkgLT4gc3RyXG4gIHwgT3Blbl9ib3ggKEZvcm1hdCAoXywgc3RyKSkgLT4gc3RyXG5cbigqKiopXG5cbigqIFByaW50IGEgbGl0ZXJhbCBjaGFyIGluIGEgYnVmZmVyLCBlc2NhcGUgJyUnIGJ5IFwiJSVcIi4gKilcbmxldCBicHJpbnRfY2hhcl9saXRlcmFsIGJ1ZiBjaHIgPSBtYXRjaCBjaHIgd2l0aFxuICB8ICclJyAtPiBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIlJVwiXG4gIHwgXyAtPiBidWZmZXJfYWRkX2NoYXIgYnVmIGNoclxuXG4oKiBQcmludCBhIGxpdGVyYWwgc3RyaW5nIGluIGEgYnVmZmVyLCBlc2NhcGUgYWxsICclJyBieSBcIiUlXCIuICopXG5sZXQgYnByaW50X3N0cmluZ19saXRlcmFsIGJ1ZiBzdHIgPVxuICBmb3IgaSA9IDAgdG8gU3RyaW5nLmxlbmd0aCBzdHIgLSAxIGRvXG4gICAgYnByaW50X2NoYXJfbGl0ZXJhbCBidWYgc3RyLltpXVxuICBkb25lXG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgqIEZvcm1hdCBwcmV0dHktcHJpbnRpbmcgKilcblxuKCogUHJpbnQgYSBjb21wbGV0ZSBmb3JtYXQgdHlwZSAoYW4gZm10dHkpIGluIGEgYnVmZmVyLiAqKVxubGV0IHJlYyBicHJpbnRfZm10dHkgOiB0eXBlIGEgYiBjIGQgZSBmIGcgaCBpIGogayBsIC5cbiAgICBidWZmZXIgLT4gKGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgsIGksIGosIGssIGwpIGZtdHR5X3JlbCAtPiB1bml0ID1cbmZ1biBidWYgZm10dHkgLT4gbWF0Y2ggZm10dHkgd2l0aFxuICB8IENoYXJfdHkgcmVzdCAgICAgIC0+IGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiBcIiVjXCI7ICBicHJpbnRfZm10dHkgYnVmIHJlc3Q7XG4gIHwgU3RyaW5nX3R5IHJlc3QgICAgLT4gYnVmZmVyX2FkZF9zdHJpbmcgYnVmIFwiJXNcIjsgIGJwcmludF9mbXR0eSBidWYgcmVzdDtcbiAgfCBJbnRfdHkgcmVzdCAgICAgICAtPiBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIlaVwiOyAgYnByaW50X2ZtdHR5IGJ1ZiByZXN0O1xuICB8IEludDMyX3R5IHJlc3QgICAgIC0+IGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiBcIiVsaVwiOyBicHJpbnRfZm10dHkgYnVmIHJlc3Q7XG4gIHwgTmF0aXZlaW50X3R5IHJlc3QgLT4gYnVmZmVyX2FkZF9zdHJpbmcgYnVmIFwiJW5pXCI7IGJwcmludF9mbXR0eSBidWYgcmVzdDtcbiAgfCBJbnQ2NF90eSByZXN0ICAgICAtPiBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIlTGlcIjsgYnByaW50X2ZtdHR5IGJ1ZiByZXN0O1xuICB8IEZsb2F0X3R5IHJlc3QgICAgIC0+IGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiBcIiVmXCI7ICBicHJpbnRfZm10dHkgYnVmIHJlc3Q7XG4gIHwgQm9vbF90eSByZXN0ICAgICAgLT4gYnVmZmVyX2FkZF9zdHJpbmcgYnVmIFwiJUJcIjsgIGJwcmludF9mbXR0eSBidWYgcmVzdDtcbiAgfCBBbHBoYV90eSByZXN0ICAgICAtPiBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIlYVwiOyAgYnByaW50X2ZtdHR5IGJ1ZiByZXN0O1xuICB8IFRoZXRhX3R5IHJlc3QgICAgIC0+IGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiBcIiV0XCI7ICBicHJpbnRfZm10dHkgYnVmIHJlc3Q7XG4gIHwgQW55X3R5IHJlc3QgICAgICAgLT4gYnVmZmVyX2FkZF9zdHJpbmcgYnVmIFwiJT9cIjsgIGJwcmludF9mbXR0eSBidWYgcmVzdDtcbiAgfCBSZWFkZXJfdHkgcmVzdCAgICAtPiBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIlclwiOyAgYnByaW50X2ZtdHR5IGJ1ZiByZXN0O1xuXG4gIHwgSWdub3JlZF9yZWFkZXJfdHkgcmVzdCAtPlxuICAgIGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiBcIiVfclwiO1xuICAgIGJwcmludF9mbXR0eSBidWYgcmVzdDtcblxuICB8IEZvcm1hdF9hcmdfdHkgKHN1Yl9mbXR0eSwgcmVzdCkgLT5cbiAgICBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIle1wiOyBicHJpbnRfZm10dHkgYnVmIHN1Yl9mbXR0eTtcbiAgICBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIlfVwiOyBicHJpbnRfZm10dHkgYnVmIHJlc3Q7XG4gIHwgRm9ybWF0X3N1YnN0X3R5IChzdWJfZm10dHksIF8sIHJlc3QpIC0+XG4gICAgYnVmZmVyX2FkZF9zdHJpbmcgYnVmIFwiJShcIjsgYnByaW50X2ZtdHR5IGJ1ZiBzdWJfZm10dHk7XG4gICAgYnVmZmVyX2FkZF9zdHJpbmcgYnVmIFwiJSlcIjsgYnByaW50X2ZtdHR5IGJ1ZiByZXN0O1xuXG4gIHwgRW5kX29mX2ZtdHR5IC0+ICgpXG5cbigqKiopXG5cbmxldCByZWMgaW50X29mX2N1c3RvbV9hcml0eSA6IHR5cGUgYSBiIGMgLlxuICAoYSwgYiwgYykgY3VzdG9tX2FyaXR5IC0+IGludCA9XG4gIGZ1bmN0aW9uXG4gIHwgQ3VzdG9tX3plcm8gLT4gMFxuICB8IEN1c3RvbV9zdWNjIHggLT4gMSArIGludF9vZl9jdXN0b21fYXJpdHkgeFxuXG4oKiBQcmludCBhIGNvbXBsZXRlIGZvcm1hdCBpbiBhIGJ1ZmZlci4gKilcbmxldCBicHJpbnRfZm10IGJ1ZiBmbXQgPVxuICBsZXQgcmVjIGZtdGl0ZXIgOiB0eXBlIGEgYiBjIGQgZSBmIC5cbiAgICAgIChhLCBiLCBjLCBkLCBlLCBmKSBmbXQgLT4gYm9vbCAtPiB1bml0ID1cbiAgZnVuIGZtdCBpZ25fZmxhZyAtPiBtYXRjaCBmbXQgd2l0aFxuICAgIHwgU3RyaW5nIChwYWQsIHJlc3QpIC0+XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gICAgICBicHJpbnRfcGFkZGluZyBidWYgcGFkOyBidWZmZXJfYWRkX2NoYXIgYnVmICdzJztcbiAgICAgIGZtdGl0ZXIgcmVzdCBmYWxzZTtcbiAgICB8IENhbWxfc3RyaW5nIChwYWQsIHJlc3QpIC0+XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gICAgICBicHJpbnRfcGFkZGluZyBidWYgcGFkOyBidWZmZXJfYWRkX2NoYXIgYnVmICdTJztcbiAgICAgIGZtdGl0ZXIgcmVzdCBmYWxzZTtcblxuICAgIHwgSW50IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgICAgYnByaW50X2ludF9mbXQgYnVmIGlnbl9mbGFnIGljb252IHBhZCBwcmVjO1xuICAgICAgZm10aXRlciByZXN0IGZhbHNlO1xuICAgIHwgSW50MzIgKGljb252LCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgICBicHJpbnRfYWx0aW50X2ZtdCBidWYgaWduX2ZsYWcgaWNvbnYgcGFkIHByZWMgJ2wnO1xuICAgICAgZm10aXRlciByZXN0IGZhbHNlO1xuICAgIHwgTmF0aXZlaW50IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgICAgYnByaW50X2FsdGludF9mbXQgYnVmIGlnbl9mbGFnIGljb252IHBhZCBwcmVjICduJztcbiAgICAgIGZtdGl0ZXIgcmVzdCBmYWxzZTtcbiAgICB8IEludDY0IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgICAgYnByaW50X2FsdGludF9mbXQgYnVmIGlnbl9mbGFnIGljb252IHBhZCBwcmVjICdMJztcbiAgICAgIGZtdGl0ZXIgcmVzdCBmYWxzZTtcbiAgICB8IEZsb2F0IChmY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgICAgYnByaW50X2Zsb2F0X2ZtdCBidWYgaWduX2ZsYWcgZmNvbnYgcGFkIHByZWM7XG4gICAgICBmbXRpdGVyIHJlc3QgZmFsc2U7XG5cbiAgICB8IENoYXIgcmVzdCAtPlxuICAgICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnJSc7IGJwcmludF9pZ25vcmVkX2ZsYWcgYnVmIGlnbl9mbGFnO1xuICAgICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnYyc7IGZtdGl0ZXIgcmVzdCBmYWxzZTtcbiAgICB8IENhbWxfY2hhciByZXN0IC0+XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICdDJzsgZm10aXRlciByZXN0IGZhbHNlO1xuICAgIHwgQm9vbCByZXN0IC0+XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICdCJzsgZm10aXRlciByZXN0IGZhbHNlO1xuICAgIHwgQWxwaGEgcmVzdCAtPlxuICAgICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnJSc7IGJwcmludF9pZ25vcmVkX2ZsYWcgYnVmIGlnbl9mbGFnO1xuICAgICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnYSc7IGZtdGl0ZXIgcmVzdCBmYWxzZTtcbiAgICB8IFRoZXRhIHJlc3QgLT5cbiAgICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJyUnOyBicHJpbnRfaWdub3JlZF9mbGFnIGJ1ZiBpZ25fZmxhZztcbiAgICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJ3QnOyBmbXRpdGVyIHJlc3QgZmFsc2U7XG4gICAgfCBDdXN0b20gKGFyaXR5LCBfLCByZXN0KSAtPlxuICAgICAgZm9yIF9pID0gMSB0byBpbnRfb2ZfY3VzdG9tX2FyaXR5IGFyaXR5IGRvXG4gICAgICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJyUnOyBicHJpbnRfaWdub3JlZF9mbGFnIGJ1ZiBpZ25fZmxhZztcbiAgICAgICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnPyc7XG4gICAgICBkb25lO1xuICAgICAgZm10aXRlciByZXN0IGZhbHNlO1xuICAgIHwgUmVhZGVyIHJlc3QgLT5cbiAgICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJyUnOyBicHJpbnRfaWdub3JlZF9mbGFnIGJ1ZiBpZ25fZmxhZztcbiAgICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJ3InOyBmbXRpdGVyIHJlc3QgZmFsc2U7XG4gICAgfCBGbHVzaCByZXN0IC0+XG4gICAgICBidWZmZXJfYWRkX3N0cmluZyBidWYgXCIlIVwiO1xuICAgICAgZm10aXRlciByZXN0IGlnbl9mbGFnO1xuXG4gICAgfCBTdHJpbmdfbGl0ZXJhbCAoc3RyLCByZXN0KSAtPlxuICAgICAgYnByaW50X3N0cmluZ19saXRlcmFsIGJ1ZiBzdHI7XG4gICAgICBmbXRpdGVyIHJlc3QgaWduX2ZsYWc7XG4gICAgfCBDaGFyX2xpdGVyYWwgKGNociwgcmVzdCkgLT5cbiAgICAgIGJwcmludF9jaGFyX2xpdGVyYWwgYnVmIGNocjtcbiAgICAgIGZtdGl0ZXIgcmVzdCBpZ25fZmxhZztcblxuICAgIHwgRm9ybWF0X2FyZyAocGFkX29wdCwgZm10dHksIHJlc3QpIC0+XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gICAgICBicHJpbnRfcGFkX29wdCBidWYgcGFkX29wdDsgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAneyc7XG4gICAgICBicHJpbnRfZm10dHkgYnVmIGZtdHR5OyBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnfSc7XG4gICAgICBmbXRpdGVyIHJlc3QgZmFsc2U7XG4gICAgfCBGb3JtYXRfc3Vic3QgKHBhZF9vcHQsIGZtdHR5LCByZXN0KSAtPlxuICAgICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnJSc7IGJwcmludF9pZ25vcmVkX2ZsYWcgYnVmIGlnbl9mbGFnO1xuICAgICAgYnByaW50X3BhZF9vcHQgYnVmIHBhZF9vcHQ7IGJ1ZmZlcl9hZGRfY2hhciBidWYgJygnO1xuICAgICAgYnByaW50X2ZtdHR5IGJ1ZiBmbXR0eTsgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnJSc7IGJ1ZmZlcl9hZGRfY2hhciBidWYgJyknO1xuICAgICAgZm10aXRlciByZXN0IGZhbHNlO1xuXG4gICAgfCBTY2FuX2NoYXJfc2V0ICh3aWR0aF9vcHQsIGNoYXJfc2V0LCByZXN0KSAtPlxuICAgICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnJSc7IGJwcmludF9pZ25vcmVkX2ZsYWcgYnVmIGlnbl9mbGFnO1xuICAgICAgYnByaW50X3BhZF9vcHQgYnVmIHdpZHRoX29wdDsgYnByaW50X2NoYXJfc2V0IGJ1ZiBjaGFyX3NldDtcbiAgICAgIGZtdGl0ZXIgcmVzdCBmYWxzZTtcbiAgICB8IFNjYW5fZ2V0X2NvdW50ZXIgKGNvdW50ZXIsIHJlc3QpIC0+XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmIChjaGFyX29mX2NvdW50ZXIgY291bnRlcik7XG4gICAgICBmbXRpdGVyIHJlc3QgZmFsc2U7XG4gICAgfCBTY2FuX25leHRfY2hhciByZXN0IC0+XG4gICAgICBidWZmZXJfYWRkX2NoYXIgYnVmICclJzsgYnByaW50X2lnbm9yZWRfZmxhZyBidWYgaWduX2ZsYWc7XG4gICAgICBicHJpbnRfc3RyaW5nX2xpdGVyYWwgYnVmIFwiMGNcIjsgZm10aXRlciByZXN0IGZhbHNlO1xuXG4gICAgfCBJZ25vcmVkX3BhcmFtIChpZ24sIHJlc3QpIC0+XG4gICAgICBsZXQgUGFyYW1fZm9ybWF0X0VCQiBmbXQnID0gcGFyYW1fZm9ybWF0X29mX2lnbm9yZWRfZm9ybWF0IGlnbiByZXN0IGluXG4gICAgICBmbXRpdGVyIGZtdCcgdHJ1ZTtcblxuICAgIHwgRm9ybWF0dGluZ19saXQgKGZtdGluZ19saXQsIHJlc3QpIC0+XG4gICAgICBicHJpbnRfc3RyaW5nX2xpdGVyYWwgYnVmIChzdHJpbmdfb2ZfZm9ybWF0dGluZ19saXQgZm10aW5nX2xpdCk7XG4gICAgICBmbXRpdGVyIHJlc3QgaWduX2ZsYWc7XG4gICAgfCBGb3JtYXR0aW5nX2dlbiAoZm10aW5nX2dlbiwgcmVzdCkgLT5cbiAgICAgIGJwcmludF9zdHJpbmdfbGl0ZXJhbCBidWYgXCJAe1wiO1xuICAgICAgYnByaW50X3N0cmluZ19saXRlcmFsIGJ1ZiAoc3RyaW5nX29mX2Zvcm1hdHRpbmdfZ2VuIGZtdGluZ19nZW4pO1xuICAgICAgZm10aXRlciByZXN0IGlnbl9mbGFnO1xuXG4gICAgfCBFbmRfb2ZfZm9ybWF0IC0+ICgpXG5cbiAgaW4gZm10aXRlciBmbXQgZmFsc2VcblxuKCoqKilcblxuKCogQ29udmVydCBhIGZvcm1hdCB0byBzdHJpbmcuICopXG5sZXQgc3RyaW5nX29mX2ZtdCBmbXQgPVxuICBsZXQgYnVmID0gYnVmZmVyX2NyZWF0ZSAxNiBpblxuICBicHJpbnRfZm10IGJ1ZiBmbXQ7XG4gIGJ1ZmZlcl9jb250ZW50cyBidWZcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKCogVHlwZSBleHRyYWN0aW9uICopXG5cbnR5cGUgKF8sIF8pIGVxID0gUmVmbCA6ICgnYSwgJ2EpIGVxXG5cbigqIEludmFyaWFudDogdGhpcyBmdW5jdGlvbiBpcyB0aGUgaWRlbnRpdHkgb24gdmFsdWVzLlxuXG4gICBJbiBwYXJ0aWN1bGFyLCBpZiAodHkxLCB0eTIpIGhhdmUgZXF1YWwgdmFsdWVzLCB0aGVuXG4gICAodHJhbnMgKHN5bW0gdHkxKSB0eTIpIHJlc3BlY3RzIHRoZSAndHJhbnMnIHByZWNvbmRpdGlvbi4gKilcbmxldCByZWMgc3ltbSA6IHR5cGUgYTEgYjEgYzEgZDEgZTEgZjEgYTIgYjIgYzIgZDIgZTIgZjIgLlxuICAgKGExLCBiMSwgYzEsIGQxLCBlMSwgZjEsXG4gICAgYTIsIGIyLCBjMiwgZDIsIGUyLCBmMikgZm10dHlfcmVsXG4tPiAoYTIsIGIyLCBjMiwgZDIsIGUyLCBmMixcbiAgICBhMSwgYjEsIGMxLCBkMSwgZTEsIGYxKSBmbXR0eV9yZWxcbj0gZnVuY3Rpb25cbiAgfCBDaGFyX3R5IHJlc3QgLT4gQ2hhcl90eSAoc3ltbSByZXN0KVxuICB8IEludF90eSByZXN0IC0+IEludF90eSAoc3ltbSByZXN0KVxuICB8IEludDMyX3R5IHJlc3QgLT4gSW50MzJfdHkgKHN5bW0gcmVzdClcbiAgfCBJbnQ2NF90eSByZXN0IC0+IEludDY0X3R5IChzeW1tIHJlc3QpXG4gIHwgTmF0aXZlaW50X3R5IHJlc3QgLT4gTmF0aXZlaW50X3R5IChzeW1tIHJlc3QpXG4gIHwgRmxvYXRfdHkgcmVzdCAtPiBGbG9hdF90eSAoc3ltbSByZXN0KVxuICB8IEJvb2xfdHkgcmVzdCAtPiBCb29sX3R5IChzeW1tIHJlc3QpXG4gIHwgU3RyaW5nX3R5IHJlc3QgLT4gU3RyaW5nX3R5IChzeW1tIHJlc3QpXG4gIHwgVGhldGFfdHkgcmVzdCAtPiBUaGV0YV90eSAoc3ltbSByZXN0KVxuICB8IEFscGhhX3R5IHJlc3QgLT4gQWxwaGFfdHkgKHN5bW0gcmVzdClcbiAgfCBBbnlfdHkgcmVzdCAtPiBBbnlfdHkgKHN5bW0gcmVzdClcbiAgfCBSZWFkZXJfdHkgcmVzdCAtPiBSZWFkZXJfdHkgKHN5bW0gcmVzdClcbiAgfCBJZ25vcmVkX3JlYWRlcl90eSByZXN0IC0+IElnbm9yZWRfcmVhZGVyX3R5IChzeW1tIHJlc3QpXG4gIHwgRm9ybWF0X2FyZ190eSAodHksIHJlc3QpIC0+XG4gICAgRm9ybWF0X2FyZ190eSAodHksIHN5bW0gcmVzdClcbiAgfCBGb3JtYXRfc3Vic3RfdHkgKHR5MSwgdHkyLCByZXN0KSAtPlxuICAgIEZvcm1hdF9zdWJzdF90eSAodHkyLCB0eTEsIHN5bW0gcmVzdClcbiAgfCBFbmRfb2ZfZm10dHkgLT4gRW5kX29mX2ZtdHR5XG5cbmxldCByZWMgZm10dHlfcmVsX2RldCA6IHR5cGUgYTEgYiBjIGQxIGUxIGYxIGEyIGQyIGUyIGYyIC5cbiAgKGExLCBiLCBjLCBkMSwgZTEsIGYxLFxuICAgYTIsIGIsIGMsIGQyLCBlMiwgZjIpIGZtdHR5X3JlbCAtPlxuICAgICgoZjEsIGYyKSBlcSAtPiAoYTEsIGEyKSBlcSlcbiAgKiAoKGExLCBhMikgZXEgLT4gKGYxLCBmMikgZXEpXG4gICogKChlMSwgZTIpIGVxIC0+IChkMSwgZDIpIGVxKVxuICAqICgoZDEsIGQyKSBlcSAtPiAoZTEsIGUyKSBlcSlcbj0gZnVuY3Rpb25cbiAgfCBFbmRfb2ZfZm10dHkgLT5cbiAgICAoZnVuIFJlZmwgLT4gUmVmbCksXG4gICAgKGZ1biBSZWZsIC0+IFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gUmVmbClcbiAgfCBDaGFyX3R5IHJlc3QgLT5cbiAgICBsZXQgZmEsIGFmLCBlZCwgZGUgPSBmbXR0eV9yZWxfZGV0IHJlc3QgaW5cbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBmYSBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGFmIFJlZmwgaW4gUmVmbCksXG4gICAgZWQsIGRlXG4gIHwgU3RyaW5nX3R5IHJlc3QgLT5cbiAgICBsZXQgZmEsIGFmLCBlZCwgZGUgPSBmbXR0eV9yZWxfZGV0IHJlc3QgaW5cbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBmYSBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGFmIFJlZmwgaW4gUmVmbCksXG4gICAgZWQsIGRlXG4gIHwgSW50X3R5IHJlc3QgLT5cbiAgICBsZXQgZmEsIGFmLCBlZCwgZGUgPSBmbXR0eV9yZWxfZGV0IHJlc3QgaW5cbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBmYSBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGFmIFJlZmwgaW4gUmVmbCksXG4gICAgZWQsIGRlXG4gIHwgSW50MzJfdHkgcmVzdCAtPlxuICAgIGxldCBmYSwgYWYsIGVkLCBkZSA9IGZtdHR5X3JlbF9kZXQgcmVzdCBpblxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGZhIFJlZmwgaW4gUmVmbCksXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gYWYgUmVmbCBpbiBSZWZsKSxcbiAgICBlZCwgZGVcbiAgfCBJbnQ2NF90eSByZXN0IC0+XG4gICAgbGV0IGZhLCBhZiwgZWQsIGRlID0gZm10dHlfcmVsX2RldCByZXN0IGluXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZmEgUmVmbCBpbiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBhZiBSZWZsIGluIFJlZmwpLFxuICAgIGVkLCBkZVxuICB8IE5hdGl2ZWludF90eSByZXN0IC0+XG4gICAgbGV0IGZhLCBhZiwgZWQsIGRlID0gZm10dHlfcmVsX2RldCByZXN0IGluXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZmEgUmVmbCBpbiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBhZiBSZWZsIGluIFJlZmwpLFxuICAgIGVkLCBkZVxuICB8IEZsb2F0X3R5IHJlc3QgLT5cbiAgICBsZXQgZmEsIGFmLCBlZCwgZGUgPSBmbXR0eV9yZWxfZGV0IHJlc3QgaW5cbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBmYSBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGFmIFJlZmwgaW4gUmVmbCksXG4gICAgZWQsIGRlXG4gIHwgQm9vbF90eSByZXN0IC0+XG4gICAgbGV0IGZhLCBhZiwgZWQsIGRlID0gZm10dHlfcmVsX2RldCByZXN0IGluXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZmEgUmVmbCBpbiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBhZiBSZWZsIGluIFJlZmwpLFxuICAgIGVkLCBkZVxuXG4gIHwgVGhldGFfdHkgcmVzdCAtPlxuICAgIGxldCBmYSwgYWYsIGVkLCBkZSA9IGZtdHR5X3JlbF9kZXQgcmVzdCBpblxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGZhIFJlZmwgaW4gUmVmbCksXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gYWYgUmVmbCBpbiBSZWZsKSxcbiAgICBlZCwgZGVcbiAgfCBBbHBoYV90eSByZXN0IC0+XG4gICAgbGV0IGZhLCBhZiwgZWQsIGRlID0gZm10dHlfcmVsX2RldCByZXN0IGluXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZmEgUmVmbCBpbiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBhZiBSZWZsIGluIFJlZmwpLFxuICAgIGVkLCBkZVxuICB8IEFueV90eSByZXN0IC0+XG4gICAgbGV0IGZhLCBhZiwgZWQsIGRlID0gZm10dHlfcmVsX2RldCByZXN0IGluXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZmEgUmVmbCBpbiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBhZiBSZWZsIGluIFJlZmwpLFxuICAgIGVkLCBkZVxuICB8IFJlYWRlcl90eSByZXN0IC0+XG4gICAgbGV0IGZhLCBhZiwgZWQsIGRlID0gZm10dHlfcmVsX2RldCByZXN0IGluXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZmEgUmVmbCBpbiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBhZiBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGVkIFJlZmwgaW4gUmVmbCksXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZGUgUmVmbCBpbiBSZWZsKVxuICB8IElnbm9yZWRfcmVhZGVyX3R5IHJlc3QgLT5cbiAgICBsZXQgZmEsIGFmLCBlZCwgZGUgPSBmbXR0eV9yZWxfZGV0IHJlc3QgaW5cbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBmYSBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGFmIFJlZmwgaW4gUmVmbCksXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gZWQgUmVmbCBpbiBSZWZsKSxcbiAgICAoZnVuIFJlZmwgLT4gbGV0IFJlZmwgPSBkZSBSZWZsIGluIFJlZmwpXG4gIHwgRm9ybWF0X2FyZ190eSAoX3R5LCByZXN0KSAtPlxuICAgIGxldCBmYSwgYWYsIGVkLCBkZSA9IGZtdHR5X3JlbF9kZXQgcmVzdCBpblxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGZhIFJlZmwgaW4gUmVmbCksXG4gICAgKGZ1biBSZWZsIC0+IGxldCBSZWZsID0gYWYgUmVmbCBpbiBSZWZsKSxcbiAgICBlZCwgZGVcbiAgfCBGb3JtYXRfc3Vic3RfdHkgKHR5MSwgdHkyLCByZXN0KSAtPlxuICAgIGxldCBmYSwgYWYsIGVkLCBkZSA9IGZtdHR5X3JlbF9kZXQgcmVzdCBpblxuICAgIGxldCB0eSA9IHRyYW5zIChzeW1tIHR5MSkgdHkyIGluXG4gICAgbGV0IGFnLCBnYSwgZGosIGpkID0gZm10dHlfcmVsX2RldCB0eSBpblxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGZhIFJlZmwgaW4gbGV0IFJlZmwgPSBhZyBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGdhIFJlZmwgaW4gbGV0IFJlZmwgPSBhZiBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGVkIFJlZmwgaW4gbGV0IFJlZmwgPSBkaiBSZWZsIGluIFJlZmwpLFxuICAgIChmdW4gUmVmbCAtPiBsZXQgUmVmbCA9IGpkIFJlZmwgaW4gbGV0IFJlZmwgPSBkZSBSZWZsIGluIFJlZmwpXG5cbigqIFByZWNvbmRpdGlvbjogd2UgYXNzdW1lIHRoYXQgdGhlIHR3byBmbXR0eV9yZWwgYXJndW1lbnRzIGhhdmUgZXF1YWxcbiAgIHZhbHVlcyAoYXQgcG9zc2libHkgZGlzdGluY3QgdHlwZXMpOyB0aGlzIGludmFyaWFudCBjb21lcyBmcm9tIHRoZSB3YXlcbiAgIGZtdHR5X3JlbCB3aXRuZXNzZXMgYXJlIHByb2R1Y2VkIGJ5IHRoZSB0eXBlLWNoZWNrZXJcblxuICAgVGhlIGNvZGUgYmVsb3cgdXNlcyAoYXNzZXJ0IGZhbHNlKSB3aGVuIHRoaXMgYXNzdW1wdGlvbiBpcyBicm9rZW4uIFRoZVxuICAgY29kZSBwYXR0ZXJuIGlzIHRoZSBmb2xsb3dpbmc6XG5cbiAgICAgfCBGb28geCwgRm9vIHkgLT5cbiAgICAgICAoKiBjYXNlIHdoZXJlIGluZGVlZCBib3RoIHZhbHVlc1xuICAgICAgICAgIHN0YXJ0IHdpdGggY29uc3RydWN0b3IgRm9vICopXG4gICAgIHwgRm9vIF8sIF9cbiAgICAgfCBfLCBGb28gXyAtPlxuICAgICAgICgqIGRpZmZlcmVudCBoZWFkIGNvbnN0cnVjdG9yczogYnJva2VuIHByZWNvbmRpdGlvbiAqKVxuICAgICAgIGFzc2VydCBmYWxzZVxuKilcbmFuZCB0cmFucyA6IHR5cGVcbiAgYTEgYjEgYzEgZDEgZTEgZjFcbiAgYTIgYjIgYzIgZDIgZTIgZjJcbiAgYTMgYjMgYzMgZDMgZTMgZjNcbi5cbiAgIChhMSwgYjEsIGMxLCBkMSwgZTEsIGYxLFxuICAgIGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIpIGZtdHR5X3JlbFxuLT4gKGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIsXG4gICAgYTMsIGIzLCBjMywgZDMsIGUzLCBmMykgZm10dHlfcmVsXG4tPiAoYTEsIGIxLCBjMSwgZDEsIGUxLCBmMSxcbiAgICBhMywgYjMsIGMzLCBkMywgZTMsIGYzKSBmbXR0eV9yZWxcbj0gZnVuIHR5MSB0eTIgLT4gbWF0Y2ggdHkxLCB0eTIgd2l0aFxuICB8IENoYXJfdHkgcmVzdDEsIENoYXJfdHkgcmVzdDIgLT4gQ2hhcl90eSAodHJhbnMgcmVzdDEgcmVzdDIpXG4gIHwgU3RyaW5nX3R5IHJlc3QxLCBTdHJpbmdfdHkgcmVzdDIgLT4gU3RyaW5nX3R5ICh0cmFucyByZXN0MSByZXN0MilcbiAgfCBCb29sX3R5IHJlc3QxLCBCb29sX3R5IHJlc3QyIC0+IEJvb2xfdHkgKHRyYW5zIHJlc3QxIHJlc3QyKVxuICB8IEludF90eSByZXN0MSwgSW50X3R5IHJlc3QyIC0+IEludF90eSAodHJhbnMgcmVzdDEgcmVzdDIpXG4gIHwgSW50MzJfdHkgcmVzdDEsIEludDMyX3R5IHJlc3QyIC0+IEludDMyX3R5ICh0cmFucyByZXN0MSByZXN0MilcbiAgfCBJbnQ2NF90eSByZXN0MSwgSW50NjRfdHkgcmVzdDIgLT4gSW50NjRfdHkgKHRyYW5zIHJlc3QxIHJlc3QyKVxuICB8IE5hdGl2ZWludF90eSByZXN0MSwgTmF0aXZlaW50X3R5IHJlc3QyIC0+IE5hdGl2ZWludF90eSAodHJhbnMgcmVzdDEgcmVzdDIpXG4gIHwgRmxvYXRfdHkgcmVzdDEsIEZsb2F0X3R5IHJlc3QyIC0+IEZsb2F0X3R5ICh0cmFucyByZXN0MSByZXN0MilcblxuICB8IEFscGhhX3R5IHJlc3QxLCBBbHBoYV90eSByZXN0MiAtPiBBbHBoYV90eSAodHJhbnMgcmVzdDEgcmVzdDIpXG4gIHwgQWxwaGFfdHkgXywgXyAtPiBhc3NlcnQgZmFsc2VcbiAgfCBfLCBBbHBoYV90eSBfIC0+IGFzc2VydCBmYWxzZVxuXG4gIHwgVGhldGFfdHkgcmVzdDEsIFRoZXRhX3R5IHJlc3QyIC0+IFRoZXRhX3R5ICh0cmFucyByZXN0MSByZXN0MilcbiAgfCBUaGV0YV90eSBfLCBfIC0+IGFzc2VydCBmYWxzZVxuICB8IF8sIFRoZXRhX3R5IF8gLT4gYXNzZXJ0IGZhbHNlXG5cbiAgfCBBbnlfdHkgcmVzdDEsIEFueV90eSByZXN0MiAtPiBBbnlfdHkgKHRyYW5zIHJlc3QxIHJlc3QyKVxuICB8IEFueV90eSBfLCBfIC0+IGFzc2VydCBmYWxzZVxuICB8IF8sIEFueV90eSBfIC0+IGFzc2VydCBmYWxzZVxuXG4gIHwgUmVhZGVyX3R5IHJlc3QxLCBSZWFkZXJfdHkgcmVzdDIgLT4gUmVhZGVyX3R5ICh0cmFucyByZXN0MSByZXN0MilcbiAgfCBSZWFkZXJfdHkgXywgXyAtPiBhc3NlcnQgZmFsc2VcbiAgfCBfLCBSZWFkZXJfdHkgXyAtPiBhc3NlcnQgZmFsc2VcblxuICB8IElnbm9yZWRfcmVhZGVyX3R5IHJlc3QxLCBJZ25vcmVkX3JlYWRlcl90eSByZXN0MiAtPlxuICAgIElnbm9yZWRfcmVhZGVyX3R5ICh0cmFucyByZXN0MSByZXN0MilcbiAgfCBJZ25vcmVkX3JlYWRlcl90eSBfLCBfIC0+IGFzc2VydCBmYWxzZVxuICB8IF8sIElnbm9yZWRfcmVhZGVyX3R5IF8gLT4gYXNzZXJ0IGZhbHNlXG5cbiAgfCBGb3JtYXRfYXJnX3R5ICh0eTEsIHJlc3QxKSwgRm9ybWF0X2FyZ190eSAodHkyLCByZXN0MikgLT5cbiAgICBGb3JtYXRfYXJnX3R5ICh0cmFucyB0eTEgdHkyLCB0cmFucyByZXN0MSByZXN0MilcbiAgfCBGb3JtYXRfYXJnX3R5IF8sIF8gLT4gYXNzZXJ0IGZhbHNlXG4gIHwgXywgRm9ybWF0X2FyZ190eSBfIC0+IGFzc2VydCBmYWxzZVxuXG4gIHwgRm9ybWF0X3N1YnN0X3R5ICh0eTExLCB0eTEyLCByZXN0MSksXG4gICAgRm9ybWF0X3N1YnN0X3R5ICh0eTIxLCB0eTIyLCByZXN0MikgLT5cbiAgICBsZXQgdHkgPSB0cmFucyAoc3ltbSB0eTEyKSB0eTIxIGluXG4gICAgbGV0IF8sIGYyLCBfLCBmNCA9IGZtdHR5X3JlbF9kZXQgdHkgaW5cbiAgICBsZXQgUmVmbCA9IGYyIFJlZmwgaW5cbiAgICBsZXQgUmVmbCA9IGY0IFJlZmwgaW5cbiAgICBGb3JtYXRfc3Vic3RfdHkgKHR5MTEsIHR5MjIsIHRyYW5zIHJlc3QxIHJlc3QyKVxuICB8IEZvcm1hdF9zdWJzdF90eSBfLCBfIC0+IGFzc2VydCBmYWxzZVxuICB8IF8sIEZvcm1hdF9zdWJzdF90eSBfIC0+IGFzc2VydCBmYWxzZVxuXG4gIHwgRW5kX29mX2ZtdHR5LCBFbmRfb2ZfZm10dHkgLT4gRW5kX29mX2ZtdHR5XG4gIHwgRW5kX29mX2ZtdHR5LCBfIC0+IGFzc2VydCBmYWxzZVxuICB8IF8sIEVuZF9vZl9mbXR0eSAtPiBhc3NlcnQgZmFsc2VcblxubGV0IHJlYyBmbXR0eV9vZl9mb3JtYXR0aW5nX2dlbiA6IHR5cGUgYSBiIGMgZCBlIGYgLlxuICAoYSwgYiwgYywgZCwgZSwgZikgZm9ybWF0dGluZ19nZW4gLT5cbiAgICAoYSwgYiwgYywgZCwgZSwgZikgZm10dHkgPVxuZnVuIGZvcm1hdHRpbmdfZ2VuIC0+IG1hdGNoIGZvcm1hdHRpbmdfZ2VuIHdpdGhcbiAgfCBPcGVuX3RhZyAoRm9ybWF0IChmbXQsIF8pKSAtPiBmbXR0eV9vZl9mbXQgZm10XG4gIHwgT3Blbl9ib3ggKEZvcm1hdCAoZm10LCBfKSkgLT4gZm10dHlfb2ZfZm10IGZtdFxuXG4oKiBFeHRyYWN0IHRoZSB0eXBlIHJlcHJlc2VudGF0aW9uIChhbiBmbXR0eSkgb2YgYSBmb3JtYXQuICopXG5hbmQgZm10dHlfb2ZfZm10IDogdHlwZSBhIGIgYyBkIGUgZiAuXG4gIChhLCBiLCBjLCBkLCBlLCBmKSBmbXQgLT4gKGEsIGIsIGMsIGQsIGUsIGYpIGZtdHR5ID1cbmZ1biBmbXR0eSAtPiBtYXRjaCBmbXR0eSB3aXRoXG4gIHwgU3RyaW5nIChwYWQsIHJlc3QpIC0+XG4gICAgZm10dHlfb2ZfcGFkZGluZ19mbXR0eSBwYWQgKFN0cmluZ190eSAoZm10dHlfb2ZfZm10IHJlc3QpKVxuICB8IENhbWxfc3RyaW5nIChwYWQsIHJlc3QpIC0+XG4gICAgZm10dHlfb2ZfcGFkZGluZ19mbXR0eSBwYWQgKFN0cmluZ190eSAoZm10dHlfb2ZfZm10IHJlc3QpKVxuXG4gIHwgSW50IChfLCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgbGV0IHR5X3Jlc3QgPSBmbXR0eV9vZl9mbXQgcmVzdCBpblxuICAgIGxldCBwcmVjX3R5ID0gZm10dHlfb2ZfcHJlY2lzaW9uX2ZtdHR5IHByZWMgKEludF90eSB0eV9yZXN0KSBpblxuICAgIGZtdHR5X29mX3BhZGRpbmdfZm10dHkgcGFkIHByZWNfdHlcbiAgfCBJbnQzMiAoXywgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIGxldCB0eV9yZXN0ID0gZm10dHlfb2ZfZm10IHJlc3QgaW5cbiAgICBsZXQgcHJlY190eSA9IGZtdHR5X29mX3ByZWNpc2lvbl9mbXR0eSBwcmVjIChJbnQzMl90eSB0eV9yZXN0KSBpblxuICAgIGZtdHR5X29mX3BhZGRpbmdfZm10dHkgcGFkIHByZWNfdHlcbiAgfCBOYXRpdmVpbnQgKF8sIHBhZCwgcHJlYywgcmVzdCkgLT5cbiAgICBsZXQgdHlfcmVzdCA9IGZtdHR5X29mX2ZtdCByZXN0IGluXG4gICAgbGV0IHByZWNfdHkgPSBmbXR0eV9vZl9wcmVjaXNpb25fZm10dHkgcHJlYyAoTmF0aXZlaW50X3R5IHR5X3Jlc3QpIGluXG4gICAgZm10dHlfb2ZfcGFkZGluZ19mbXR0eSBwYWQgcHJlY190eVxuICB8IEludDY0IChfLCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgbGV0IHR5X3Jlc3QgPSBmbXR0eV9vZl9mbXQgcmVzdCBpblxuICAgIGxldCBwcmVjX3R5ID0gZm10dHlfb2ZfcHJlY2lzaW9uX2ZtdHR5IHByZWMgKEludDY0X3R5IHR5X3Jlc3QpIGluXG4gICAgZm10dHlfb2ZfcGFkZGluZ19mbXR0eSBwYWQgcHJlY190eVxuICB8IEZsb2F0IChfLCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgbGV0IHR5X3Jlc3QgPSBmbXR0eV9vZl9mbXQgcmVzdCBpblxuICAgIGxldCBwcmVjX3R5ID0gZm10dHlfb2ZfcHJlY2lzaW9uX2ZtdHR5IHByZWMgKEZsb2F0X3R5IHR5X3Jlc3QpIGluXG4gICAgZm10dHlfb2ZfcGFkZGluZ19mbXR0eSBwYWQgcHJlY190eVxuXG4gIHwgQ2hhciByZXN0ICAgICAgICAgICAgICAgICAgLT4gQ2hhcl90eSAoZm10dHlfb2ZfZm10IHJlc3QpXG4gIHwgQ2FtbF9jaGFyIHJlc3QgICAgICAgICAgICAgLT4gQ2hhcl90eSAoZm10dHlfb2ZfZm10IHJlc3QpXG4gIHwgQm9vbCByZXN0ICAgICAgICAgICAgICAgICAgLT4gQm9vbF90eSAoZm10dHlfb2ZfZm10IHJlc3QpXG4gIHwgQWxwaGEgcmVzdCAgICAgICAgICAgICAgICAgLT4gQWxwaGFfdHkgKGZtdHR5X29mX2ZtdCByZXN0KVxuICB8IFRoZXRhIHJlc3QgICAgICAgICAgICAgICAgIC0+IFRoZXRhX3R5IChmbXR0eV9vZl9mbXQgcmVzdClcbiAgfCBDdXN0b20gKGFyaXR5LCBfLCByZXN0KSAgICAtPiBmbXR0eV9vZl9jdXN0b20gYXJpdHkgKGZtdHR5X29mX2ZtdCByZXN0KVxuICB8IFJlYWRlciByZXN0ICAgICAgICAgICAgICAgIC0+IFJlYWRlcl90eSAoZm10dHlfb2ZfZm10IHJlc3QpXG5cbiAgfCBGb3JtYXRfYXJnIChfLCB0eSwgcmVzdCkgLT5cbiAgICBGb3JtYXRfYXJnX3R5ICh0eSwgZm10dHlfb2ZfZm10IHJlc3QpXG4gIHwgRm9ybWF0X3N1YnN0IChfLCB0eSwgcmVzdCkgLT5cbiAgICBGb3JtYXRfc3Vic3RfdHkgKHR5LCB0eSwgZm10dHlfb2ZfZm10IHJlc3QpXG5cbiAgfCBGbHVzaCByZXN0ICAgICAgICAgICAgICAgICAtPiBmbXR0eV9vZl9mbXQgcmVzdFxuICB8IFN0cmluZ19saXRlcmFsIChfLCByZXN0KSAgIC0+IGZtdHR5X29mX2ZtdCByZXN0XG4gIHwgQ2hhcl9saXRlcmFsIChfLCByZXN0KSAgICAgLT4gZm10dHlfb2ZfZm10IHJlc3RcblxuICB8IFNjYW5fY2hhcl9zZXQgKF8sIF8sIHJlc3QpIC0+IFN0cmluZ190eSAoZm10dHlfb2ZfZm10IHJlc3QpXG4gIHwgU2Nhbl9nZXRfY291bnRlciAoXywgcmVzdCkgLT4gSW50X3R5IChmbXR0eV9vZl9mbXQgcmVzdClcbiAgfCBTY2FuX25leHRfY2hhciByZXN0ICAgICAgICAtPiBDaGFyX3R5IChmbXR0eV9vZl9mbXQgcmVzdClcbiAgfCBJZ25vcmVkX3BhcmFtIChpZ24sIHJlc3QpICAtPiBmbXR0eV9vZl9pZ25vcmVkX2Zvcm1hdCBpZ24gcmVzdFxuICB8IEZvcm1hdHRpbmdfbGl0IChfLCByZXN0KSAgIC0+IGZtdHR5X29mX2ZtdCByZXN0XG4gIHwgRm9ybWF0dGluZ19nZW4gKGZtdGluZ19nZW4sIHJlc3QpICAtPlxuICAgIGNvbmNhdF9mbXR0eSAoZm10dHlfb2ZfZm9ybWF0dGluZ19nZW4gZm10aW5nX2dlbikgKGZtdHR5X29mX2ZtdCByZXN0KVxuXG4gIHwgRW5kX29mX2Zvcm1hdCAgICAgICAgICAgICAgLT4gRW5kX29mX2ZtdHR5XG5cbmFuZCBmbXR0eV9vZl9jdXN0b20gOiB0eXBlIHggeSBhIGIgYyBkIGUgZiAuXG4gIChhLCB4LCB5KSBjdXN0b21fYXJpdHkgLT4gKGEsIGIsIGMsIGQsIGUsIGYpIGZtdHR5IC0+XG4gICh5LCBiLCBjLCBkLCBlLCBmKSBmbXR0eSA9XG5mdW4gYXJpdHkgZm10dHkgLT4gbWF0Y2ggYXJpdHkgd2l0aFxuICB8IEN1c3RvbV96ZXJvIC0+IGZtdHR5XG4gIHwgQ3VzdG9tX3N1Y2MgYXJpdHkgLT4gQW55X3R5IChmbXR0eV9vZl9jdXN0b20gYXJpdHkgZm10dHkpXG5cbigqIEV4dHJhY3QgdGhlIGZtdHR5IG9mIGFuIGlnbm9yZWQgcGFyYW1ldGVyIGZvbGxvd2VkIGJ5IHRoZSByZXN0IG9mXG4gICB0aGUgZm9ybWF0LiAqKVxuYW5kIGZtdHR5X29mX2lnbm9yZWRfZm9ybWF0IDogdHlwZSB4IHkgYSBiIGMgZCBlIGYgLlxuICAgIChhLCBiLCBjLCBkLCB5LCB4KSBpZ25vcmVkIC0+XG4gICAgKHgsIGIsIGMsIHksIGUsIGYpIGZtdCAtPlxuICAgIChhLCBiLCBjLCBkLCBlLCBmKSBmbXR0eSA9XG5mdW4gaWduIGZtdCAtPiBtYXRjaCBpZ24gd2l0aFxuICB8IElnbm9yZWRfY2hhciAgICAgICAgICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfY2FtbF9jaGFyICAgICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfc3RyaW5nIF8gICAgICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfY2FtbF9zdHJpbmcgXyAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfaW50IChfLCBfKSAgICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfaW50MzIgKF8sIF8pICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfbmF0aXZlaW50IChfLCBfKSAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfaW50NjQgKF8sIF8pICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfZmxvYXQgKF8sIF8pICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfYm9vbCAgICAgICAgICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfZm9ybWF0X2FyZyBfICAgICAgICAgICAgLT4gZm10dHlfb2ZfZm10IGZtdFxuICB8IElnbm9yZWRfZm9ybWF0X3N1YnN0IChfLCBmbXR0eSkgLT4gY29uY2F0X2ZtdHR5IGZtdHR5IChmbXR0eV9vZl9mbXQgZm10KVxuICB8IElnbm9yZWRfcmVhZGVyICAgICAgICAgICAgICAgICAgLT4gSWdub3JlZF9yZWFkZXJfdHkgKGZtdHR5X29mX2ZtdCBmbXQpXG4gIHwgSWdub3JlZF9zY2FuX2NoYXJfc2V0IF8gICAgICAgICAtPiBmbXR0eV9vZl9mbXQgZm10XG4gIHwgSWdub3JlZF9zY2FuX2dldF9jb3VudGVyIF8gICAgICAtPiBmbXR0eV9vZl9mbXQgZm10XG4gIHwgSWdub3JlZF9zY2FuX25leHRfY2hhciAgICAgICAgICAtPiBmbXR0eV9vZl9mbXQgZm10XG5cbigqIEFkZCBhbiBJbnRfdHkgbm9kZSBpZiBwYWRkaW5nIGlzIHRha2VuIGFzIGFuIGV4dHJhIGFyZ3VtZW50IChleDogXCIlKnNcIikuICopXG5hbmQgZm10dHlfb2ZfcGFkZGluZ19mbXR0eSA6IHR5cGUgeCBhIGIgYyBkIGUgZiAuXG4gICAgKHgsIGEpIHBhZGRpbmcgLT4gKGEsIGIsIGMsIGQsIGUsIGYpIGZtdHR5IC0+ICh4LCBiLCBjLCBkLCBlLCBmKSBmbXR0eSA9XG4gIGZ1biBwYWQgZm10dHkgLT4gbWF0Y2ggcGFkIHdpdGhcbiAgICB8IE5vX3BhZGRpbmcgICAgLT4gZm10dHlcbiAgICB8IExpdF9wYWRkaW5nIF8gLT4gZm10dHlcbiAgICB8IEFyZ19wYWRkaW5nIF8gLT4gSW50X3R5IGZtdHR5XG5cbigqIEFkZCBhbiBJbnRfdHkgbm9kZSBpZiBwcmVjaXNpb24gaXMgdGFrZW4gYXMgYW4gZXh0cmEgYXJndW1lbnQgKGV4OiBcIiUuKmZcIikuKilcbmFuZCBmbXR0eV9vZl9wcmVjaXNpb25fZm10dHkgOiB0eXBlIHggYSBiIGMgZCBlIGYgLlxuICAgICh4LCBhKSBwcmVjaXNpb24gLT4gKGEsIGIsIGMsIGQsIGUsIGYpIGZtdHR5IC0+ICh4LCBiLCBjLCBkLCBlLCBmKSBmbXR0eSA9XG4gIGZ1biBwcmVjIGZtdHR5IC0+IG1hdGNoIHByZWMgd2l0aFxuICAgIHwgTm9fcHJlY2lzaW9uICAgIC0+IGZtdHR5XG4gICAgfCBMaXRfcHJlY2lzaW9uIF8gLT4gZm10dHlcbiAgICB8IEFyZ19wcmVjaXNpb24gICAtPiBJbnRfdHkgZm10dHlcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBGb3JtYXQgdHlwaW5nICopXG5cbigqIEV4Y2VwdGlvbiByYWlzZWQgd2hlbiBhIGZvcm1hdCBkb2VzIG5vdCBtYXRjaCBhIGdpdmVuIGZvcm1hdCB0eXBlLiAqKVxuZXhjZXB0aW9uIFR5cGVfbWlzbWF0Y2hcblxuKCogVHlwZSBhIHBhZGRpbmcuICopXG4oKiBUYWtlIGFuIEludF90eSBmcm9tIHRoZSBmbXR0eSBpZiB0aGUgaW50ZWdlciBzaG91bGQgYmUga2VwdCBhcyBhcmd1bWVudC4gKilcbigqIFJhaXNlIFR5cGVfbWlzbWF0Y2ggaW4gY2FzZSBvZiB0eXBlIG1pc21hdGNoLiAqKVxubGV0IHR5cGVfcGFkZGluZyA6IHR5cGUgYSBiIGMgZCBlIGYgeCB5IC5cbiAgICAoeCwgeSkgcGFkZGluZyAtPiAoYSwgYiwgYywgZCwgZSwgZikgZm10dHkgLT5cbiAgICAgIChhLCBiLCBjLCBkLCBlLCBmKSBwYWRkaW5nX2ZtdHR5X2ViYiA9XG5mdW4gcGFkIGZtdHR5IC0+IG1hdGNoIHBhZCwgZm10dHkgd2l0aFxuICB8IE5vX3BhZGRpbmcsIF8gLT4gUGFkZGluZ19mbXR0eV9FQkIgKE5vX3BhZGRpbmcsIGZtdHR5KVxuICB8IExpdF9wYWRkaW5nIChwYWR0eSwgdyksIF8gLT4gUGFkZGluZ19mbXR0eV9FQkIgKExpdF9wYWRkaW5nIChwYWR0eSx3KSxmbXR0eSlcbiAgfCBBcmdfcGFkZGluZyBwYWR0eSwgSW50X3R5IHJlc3QgLT4gUGFkZGluZ19mbXR0eV9FQkIgKEFyZ19wYWRkaW5nIHBhZHR5LHJlc3QpXG4gIHwgXyAtPiByYWlzZSBUeXBlX21pc21hdGNoXG5cbigqIENvbnZlcnQgYSAodXBhZGRpbmcsIHVwcmVjaXNpb24pIHRvIGEgKHBhZGRpbmcsIHByZWNpc2lvbikuICopXG4oKiBUYWtlIG9uZSBvciB0d28gSW50X3R5IGZyb20gdGhlIGZtdHR5IGlmIG5lZWRlZC4gKilcbigqIFJhaXNlIFR5cGVfbWlzbWF0Y2ggaW4gY2FzZSBvZiB0eXBlIG1pc21hdGNoLiAqKVxubGV0IHR5cGVfcGFkcHJlYyA6IHR5cGUgYSBiIGMgZCBlIGYgeCB5IHogLlxuICAoeCwgeSkgcGFkZGluZyAtPiAoeSwgeikgcHJlY2lzaW9uIC0+IChhLCBiLCBjLCBkLCBlLCBmKSBmbXR0eSAtPlxuICAgIChhLCBiLCBjLCBkLCBlLCBmKSBwYWRwcmVjX2ZtdHR5X2ViYiA9XG5mdW4gcGFkIHByZWMgZm10dHkgLT4gbWF0Y2ggcHJlYywgdHlwZV9wYWRkaW5nIHBhZCBmbXR0eSB3aXRoXG4gIHwgTm9fcHJlY2lzaW9uLCBQYWRkaW5nX2ZtdHR5X0VCQiAocGFkLCByZXN0KSAtPlxuICAgIFBhZHByZWNfZm10dHlfRUJCIChwYWQsIE5vX3ByZWNpc2lvbiwgcmVzdClcbiAgfCBMaXRfcHJlY2lzaW9uIHAsIFBhZGRpbmdfZm10dHlfRUJCIChwYWQsIHJlc3QpIC0+XG4gICAgUGFkcHJlY19mbXR0eV9FQkIgKHBhZCwgTGl0X3ByZWNpc2lvbiBwLCByZXN0KVxuICB8IEFyZ19wcmVjaXNpb24sIFBhZGRpbmdfZm10dHlfRUJCIChwYWQsIEludF90eSByZXN0KSAtPlxuICAgIFBhZHByZWNfZm10dHlfRUJCIChwYWQsIEFyZ19wcmVjaXNpb24sIHJlc3QpXG4gIHwgXywgUGFkZGluZ19mbXR0eV9FQkIgKF8sIF8pIC0+IHJhaXNlIFR5cGVfbWlzbWF0Y2hcblxuKCogVHlwZSBhIGZvcm1hdCBhY2NvcmRpbmcgdG8gYW4gZm10dHkuICopXG4oKiBJZiB0eXBpbmcgc3VjY2VlZCwgZ2VuZXJhdGUgYSBjb3B5IG9mIHRoZSBmb3JtYXQgd2l0aCB0aGUgc2FtZVxuICAgIHR5cGUgcGFyYW1ldGVycyBhcyB0aGUgZm10dHkuICopXG4oKiBSYWlzZSBhIEZhaWx1cmUgd2l0aCBhbiBlcnJvciBtZXNzYWdlIGluIGNhc2Ugb2YgdHlwZSBtaXNtYXRjaC4gKilcbmxldCByZWMgdHlwZV9mb3JtYXQgOlxuICB0eXBlIGExIGIxIGMxIGQxIGUxIGYxXG4gICAgICAgYTIgYjIgYzIgZDIgZTIgZjIgIC5cbiAgICAgKGExLCBiMSwgYzEsIGQxLCBlMSwgZjEpIGZtdFxuICAtPiAoYTIsIGIyLCBjMiwgZDIsIGUyLCBmMikgZm10dHlcbiAgLT4gKGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIpIGZtdFxuPSBmdW4gZm10IGZtdHR5IC0+IG1hdGNoIHR5cGVfZm9ybWF0X2dlbiBmbXQgZm10dHkgd2l0aFxuICB8IEZtdF9mbXR0eV9FQkIgKGZtdCcsIEVuZF9vZl9mbXR0eSkgLT4gZm10J1xuICB8IF8gLT4gcmFpc2UgVHlwZV9taXNtYXRjaFxuXG5hbmQgdHlwZV9mb3JtYXRfZ2VuIDpcbiAgdHlwZSBhMSBiMSBjMSBkMSBlMSBmMVxuICAgICAgIGEyIGIyIGMyIGQyIGUyIGYyICAuXG4gICAgIChhMSwgYjEsIGMxLCBkMSwgZTEsIGYxKSBmbXRcbiAgLT4gKGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIpIGZtdHR5XG4gIC0+IChhMiwgYjIsIGMyLCBkMiwgZTIsIGYyKSBmbXRfZm10dHlfZWJiXG49IGZ1biBmbXQgZm10dHkgLT4gbWF0Y2ggZm10LCBmbXR0eSB3aXRoXG4gIHwgQ2hhciBmbXRfcmVzdCwgQ2hhcl90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdF9mbXR0eV9FQkIgKGZtdCcsIGZtdHR5JykgPSB0eXBlX2Zvcm1hdF9nZW4gZm10X3Jlc3QgZm10dHlfcmVzdCBpblxuICAgIEZtdF9mbXR0eV9FQkIgKENoYXIgZm10JywgZm10dHknKVxuICB8IENhbWxfY2hhciBmbXRfcmVzdCwgQ2hhcl90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdF9mbXR0eV9FQkIgKGZtdCcsIGZtdHR5JykgPSB0eXBlX2Zvcm1hdF9nZW4gZm10X3Jlc3QgZm10dHlfcmVzdCBpblxuICAgIEZtdF9mbXR0eV9FQkIgKENhbWxfY2hhciBmbXQnLCBmbXR0eScpXG4gIHwgU3RyaW5nIChwYWQsIGZtdF9yZXN0KSwgXyAtPiAoXG4gICAgbWF0Y2ggdHlwZV9wYWRkaW5nIHBhZCBmbXR0eSB3aXRoXG4gICAgfCBQYWRkaW5nX2ZtdHR5X0VCQiAocGFkLCBTdHJpbmdfdHkgZm10dHlfcmVzdCkgLT5cbiAgICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICAgIEZtdF9mbXR0eV9FQkIgKFN0cmluZyAocGFkLCBmbXQnKSwgZm10dHknKVxuICAgIHwgUGFkZGluZ19mbXR0eV9FQkIgKF8sIF8pIC0+IHJhaXNlIFR5cGVfbWlzbWF0Y2hcbiAgKVxuICB8IENhbWxfc3RyaW5nIChwYWQsIGZtdF9yZXN0KSwgXyAtPiAoXG4gICAgbWF0Y2ggdHlwZV9wYWRkaW5nIHBhZCBmbXR0eSB3aXRoXG4gICAgfCBQYWRkaW5nX2ZtdHR5X0VCQiAocGFkLCBTdHJpbmdfdHkgZm10dHlfcmVzdCkgLT5cbiAgICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICAgIEZtdF9mbXR0eV9FQkIgKENhbWxfc3RyaW5nIChwYWQsIGZtdCcpLCBmbXR0eScpXG4gICAgfCBQYWRkaW5nX2ZtdHR5X0VCQiAoXywgXykgLT4gcmFpc2UgVHlwZV9taXNtYXRjaFxuICApXG4gIHwgSW50IChpY29udiwgcGFkLCBwcmVjLCBmbXRfcmVzdCksIF8gLT4gKFxuICAgIG1hdGNoIHR5cGVfcGFkcHJlYyBwYWQgcHJlYyBmbXR0eSB3aXRoXG4gICAgfCBQYWRwcmVjX2ZtdHR5X0VCQiAocGFkLCBwcmVjLCBJbnRfdHkgZm10dHlfcmVzdCkgLT5cbiAgICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICAgIEZtdF9mbXR0eV9FQkIgKEludCAoaWNvbnYsIHBhZCwgcHJlYywgZm10JyksIGZtdHR5JylcbiAgICB8IFBhZHByZWNfZm10dHlfRUJCIChfLCBfLCBfKSAtPiByYWlzZSBUeXBlX21pc21hdGNoXG4gIClcbiAgfCBJbnQzMiAoaWNvbnYsIHBhZCwgcHJlYywgZm10X3Jlc3QpLCBfIC0+IChcbiAgICBtYXRjaCB0eXBlX3BhZHByZWMgcGFkIHByZWMgZm10dHkgd2l0aFxuICAgIHwgUGFkcHJlY19mbXR0eV9FQkIgKHBhZCwgcHJlYywgSW50MzJfdHkgZm10dHlfcmVzdCkgLT5cbiAgICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICAgIEZtdF9mbXR0eV9FQkIgKEludDMyIChpY29udiwgcGFkLCBwcmVjLCBmbXQnKSwgZm10dHknKVxuICAgIHwgUGFkcHJlY19mbXR0eV9FQkIgKF8sIF8sIF8pIC0+IHJhaXNlIFR5cGVfbWlzbWF0Y2hcbiAgKVxuICB8IE5hdGl2ZWludCAoaWNvbnYsIHBhZCwgcHJlYywgZm10X3Jlc3QpLCBfIC0+IChcbiAgICBtYXRjaCB0eXBlX3BhZHByZWMgcGFkIHByZWMgZm10dHkgd2l0aFxuICAgIHwgUGFkcHJlY19mbXR0eV9FQkIgKHBhZCwgcHJlYywgTmF0aXZlaW50X3R5IGZtdHR5X3Jlc3QpIC0+XG4gICAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0IGluXG4gICAgICBGbXRfZm10dHlfRUJCIChOYXRpdmVpbnQgKGljb252LCBwYWQsIHByZWMsIGZtdCcpLCBmbXR0eScpXG4gICAgfCBQYWRwcmVjX2ZtdHR5X0VCQiAoXywgXywgXykgLT4gcmFpc2UgVHlwZV9taXNtYXRjaFxuICApXG4gIHwgSW50NjQgKGljb252LCBwYWQsIHByZWMsIGZtdF9yZXN0KSwgXyAtPiAoXG4gICAgbWF0Y2ggdHlwZV9wYWRwcmVjIHBhZCBwcmVjIGZtdHR5IHdpdGhcbiAgICB8IFBhZHByZWNfZm10dHlfRUJCIChwYWQsIHByZWMsIEludDY0X3R5IGZtdHR5X3Jlc3QpIC0+XG4gICAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0IGluXG4gICAgICBGbXRfZm10dHlfRUJCIChJbnQ2NCAoaWNvbnYsIHBhZCwgcHJlYywgZm10JyksIGZtdHR5JylcbiAgICB8IFBhZHByZWNfZm10dHlfRUJCIChfLCBfLCBfKSAtPiByYWlzZSBUeXBlX21pc21hdGNoXG4gIClcbiAgfCBGbG9hdCAoZmNvbnYsIHBhZCwgcHJlYywgZm10X3Jlc3QpLCBfIC0+IChcbiAgICBtYXRjaCB0eXBlX3BhZHByZWMgcGFkIHByZWMgZm10dHkgd2l0aFxuICAgIHwgUGFkcHJlY19mbXR0eV9FQkIgKHBhZCwgcHJlYywgRmxvYXRfdHkgZm10dHlfcmVzdCkgLT5cbiAgICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICAgIEZtdF9mbXR0eV9FQkIgKEZsb2F0IChmY29udiwgcGFkLCBwcmVjLCBmbXQnKSwgZm10dHknKVxuICAgIHwgUGFkcHJlY19mbXR0eV9FQkIgKF8sIF8sIF8pIC0+IHJhaXNlIFR5cGVfbWlzbWF0Y2hcbiAgKVxuICB8IEJvb2wgZm10X3Jlc3QsIEJvb2xfdHkgZm10dHlfcmVzdCAtPlxuICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXRfZm10dHlfRUJCIChCb29sIGZtdCcsIGZtdHR5JylcbiAgfCBGbHVzaCBmbXRfcmVzdCwgZm10dHlfcmVzdCAtPlxuICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXRfZm10dHlfRUJCIChGbHVzaCBmbXQnLCBmbXR0eScpXG5cbiAgfCBTdHJpbmdfbGl0ZXJhbCAoc3RyLCBmbXRfcmVzdCksIGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0IGluXG4gICAgRm10X2ZtdHR5X0VCQiAoU3RyaW5nX2xpdGVyYWwgKHN0ciwgZm10JyksIGZtdHR5JylcbiAgfCBDaGFyX2xpdGVyYWwgKGNociwgZm10X3Jlc3QpLCBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdF9mbXR0eV9FQkIgKGZtdCcsIGZtdHR5JykgPSB0eXBlX2Zvcm1hdF9nZW4gZm10X3Jlc3QgZm10dHlfcmVzdCBpblxuICAgIEZtdF9mbXR0eV9FQkIgKENoYXJfbGl0ZXJhbCAoY2hyLCBmbXQnKSwgZm10dHknKVxuXG4gIHwgRm9ybWF0X2FyZyAocGFkX29wdCwgc3ViX2ZtdHR5LCBmbXRfcmVzdCksXG4gICAgRm9ybWF0X2FyZ190eSAoc3ViX2ZtdHR5JywgZm10dHlfcmVzdCkgLT5cbiAgICBpZiBGbXR0eV9FQkIgc3ViX2ZtdHR5IDw+IEZtdHR5X0VCQiBzdWJfZm10dHknIHRoZW4gcmFpc2UgVHlwZV9taXNtYXRjaDtcbiAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0IGluXG4gICAgRm10X2ZtdHR5X0VCQiAoRm9ybWF0X2FyZyAocGFkX29wdCwgc3ViX2ZtdHR5JywgZm10JyksIGZtdHR5JylcbiAgfCBGb3JtYXRfc3Vic3QgKHBhZF9vcHQsIHN1Yl9mbXR0eSwgZm10X3Jlc3QpLFxuICAgIEZvcm1hdF9zdWJzdF90eSAoc3ViX2ZtdHR5MSwgX3N1Yl9mbXR0eTIsIGZtdHR5X3Jlc3QpIC0+XG4gICAgaWYgRm10dHlfRUJCIChlcmFzZV9yZWwgc3ViX2ZtdHR5KSA8PiBGbXR0eV9FQkIgKGVyYXNlX3JlbCBzdWJfZm10dHkxKSB0aGVuXG4gICAgICByYWlzZSBUeXBlX21pc21hdGNoO1xuICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IChlcmFzZV9yZWwgZm10dHlfcmVzdCkgaW5cbiAgICBGbXRfZm10dHlfRUJCIChGb3JtYXRfc3Vic3QgKHBhZF9vcHQsIHN1Yl9mbXR0eTEsIGZtdCcpLCBmbXR0eScpXG4gICgqIFByaW50ZiBhbmQgRm9ybWF0IHNwZWNpZmljIGNvbnN0cnVjdG9yczogKilcbiAgfCBBbHBoYSBmbXRfcmVzdCwgQWxwaGFfdHkgZm10dHlfcmVzdCAtPlxuICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXRfZm10dHlfRUJCIChBbHBoYSBmbXQnLCBmbXR0eScpXG4gIHwgVGhldGEgZm10X3Jlc3QsIFRoZXRhX3R5IGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0IGluXG4gICAgRm10X2ZtdHR5X0VCQiAoVGhldGEgZm10JywgZm10dHknKVxuXG4gICgqIEZvcm1hdCBzcGVjaWZpYyBjb25zdHJ1Y3RvcnM6ICopXG4gIHwgRm9ybWF0dGluZ19saXQgKGZvcm1hdHRpbmdfbGl0LCBmbXRfcmVzdCksIGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0IGluXG4gICAgRm10X2ZtdHR5X0VCQiAoRm9ybWF0dGluZ19saXQgKGZvcm1hdHRpbmdfbGl0LCBmbXQnKSwgZm10dHknKVxuICB8IEZvcm1hdHRpbmdfZ2VuIChmb3JtYXR0aW5nX2dlbiwgZm10X3Jlc3QpLCBmbXR0eV9yZXN0IC0+XG4gICAgdHlwZV9mb3JtYXR0aW5nX2dlbiBmb3JtYXR0aW5nX2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0XG5cbiAgKCogU2NhbmYgc3BlY2lmaWMgY29uc3RydWN0b3JzOiAqKVxuICB8IFJlYWRlciBmbXRfcmVzdCwgUmVhZGVyX3R5IGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXRfcmVzdCBmbXR0eV9yZXN0IGluXG4gICAgRm10X2ZtdHR5X0VCQiAoUmVhZGVyIGZtdCcsIGZtdHR5JylcbiAgfCBTY2FuX2NoYXJfc2V0ICh3aWR0aF9vcHQsIGNoYXJfc2V0LCBmbXRfcmVzdCksIFN0cmluZ190eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdF9mbXR0eV9FQkIgKGZtdCcsIGZtdHR5JykgPSB0eXBlX2Zvcm1hdF9nZW4gZm10X3Jlc3QgZm10dHlfcmVzdCBpblxuICAgIEZtdF9mbXR0eV9FQkIgKFNjYW5fY2hhcl9zZXQgKHdpZHRoX29wdCwgY2hhcl9zZXQsIGZtdCcpLCBmbXR0eScpXG4gIHwgU2Nhbl9nZXRfY291bnRlciAoY291bnRlciwgZm10X3Jlc3QpLCBJbnRfdHkgZm10dHlfcmVzdCAtPlxuICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQnLCBmbXR0eScpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdF9yZXN0IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXRfZm10dHlfRUJCIChTY2FuX2dldF9jb3VudGVyIChjb3VudGVyLCBmbXQnKSwgZm10dHknKVxuICB8IElnbm9yZWRfcGFyYW0gKGlnbiwgcmVzdCksIGZtdHR5X3Jlc3QgLT5cbiAgICB0eXBlX2lnbm9yZWRfcGFyYW0gaWduIHJlc3QgZm10dHlfcmVzdFxuXG4gIHwgRW5kX29mX2Zvcm1hdCwgZm10dHlfcmVzdCAtPiBGbXRfZm10dHlfRUJCIChFbmRfb2ZfZm9ybWF0LCBmbXR0eV9yZXN0KVxuXG4gIHwgXyAtPiByYWlzZSBUeXBlX21pc21hdGNoXG5cbmFuZCB0eXBlX2Zvcm1hdHRpbmdfZ2VuIDogdHlwZSBhMSBhMyBiMSBiMyBjMSBjMyBkMSBkMyBlMSBlMiBlMyBmMSBmMiBmMyAuXG4gICAgKGExLCBiMSwgYzEsIGQxLCBlMSwgZjEpIGZvcm1hdHRpbmdfZ2VuIC0+XG4gICAgKGYxLCBiMSwgYzEsIGUxLCBlMiwgZjIpIGZtdCAtPlxuICAgIChhMywgYjMsIGMzLCBkMywgZTMsIGYzKSBmbXR0eSAtPlxuICAgIChhMywgYjMsIGMzLCBkMywgZTMsIGYzKSBmbXRfZm10dHlfZWJiID1cbmZ1biBmb3JtYXR0aW5nX2dlbiBmbXQwIGZtdHR5MCAtPiBtYXRjaCBmb3JtYXR0aW5nX2dlbiB3aXRoXG4gIHwgT3Blbl90YWcgKEZvcm1hdCAoZm10MSwgc3RyKSkgLT5cbiAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10MiwgZm10dHkyKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXQxIGZtdHR5MCBpblxuICAgIGxldCBGbXRfZm10dHlfRUJCIChmbXQzLCBmbXR0eTMpID0gdHlwZV9mb3JtYXRfZ2VuIGZtdDAgZm10dHkyIGluXG4gICAgRm10X2ZtdHR5X0VCQiAoRm9ybWF0dGluZ19nZW4gKE9wZW5fdGFnIChGb3JtYXQgKGZtdDIsIHN0cikpLCBmbXQzKSwgZm10dHkzKVxuICB8IE9wZW5fYm94IChGb3JtYXQgKGZtdDEsIHN0cikpIC0+XG4gICAgbGV0IEZtdF9mbXR0eV9FQkIgKGZtdDIsIGZtdHR5MikgPSB0eXBlX2Zvcm1hdF9nZW4gZm10MSBmbXR0eTAgaW5cbiAgICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10MywgZm10dHkzKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXQwIGZtdHR5MiBpblxuICAgIEZtdF9mbXR0eV9FQkIgKEZvcm1hdHRpbmdfZ2VuIChPcGVuX2JveCAoRm9ybWF0IChmbXQyLCBzdHIpKSwgZm10MyksIGZtdHR5MylcblxuKCogVHlwZSBhbiBJZ25vcmVkX3BhcmFtIG5vZGUgYWNjb3JkaW5nIHRvIGFuIGZtdHR5LiAqKVxuYW5kIHR5cGVfaWdub3JlZF9wYXJhbSA6IHR5cGUgcCBxIHggeSB6IHQgdSB2IGEgYiBjIGQgZSBmIC5cbiAgICAoeCwgeSwgeiwgdCwgcSwgcCkgaWdub3JlZCAtPlxuICAgIChwLCB5LCB6LCBxLCB1LCB2KSBmbXQgLT5cbiAgICAoYSwgYiwgYywgZCwgZSwgZikgZm10dHkgLT5cbiAgICAoYSwgYiwgYywgZCwgZSwgZikgZm10X2ZtdHR5X2ViYiA9XG5mdW4gaWduIGZtdCBmbXR0eSAtPiBtYXRjaCBpZ24gd2l0aFxuICB8IElnbm9yZWRfY2hhciAgICAgICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfY2FtbF9jaGFyICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfc3RyaW5nIF8gICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfY2FtbF9zdHJpbmcgXyAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfaW50IF8gICAgICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfaW50MzIgXyAgICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfbmF0aXZlaW50IF8gICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfaW50NjQgXyAgICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfZmxvYXQgXyAgICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfYm9vbCAgICAgICAgICAgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfc2Nhbl9jaGFyX3NldCBfICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfc2Nhbl9nZXRfY291bnRlciBfIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfc2Nhbl9uZXh0X2NoYXIgICAgIGFzIGlnbicgLT4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZSBpZ24nIGZtdCBmbXR0eVxuICB8IElnbm9yZWRfZm9ybWF0X2FyZyAocGFkX29wdCwgc3ViX2ZtdHR5KSAtPlxuICAgIHR5cGVfaWdub3JlZF9wYXJhbV9vbmUgKElnbm9yZWRfZm9ybWF0X2FyZyAocGFkX29wdCwgc3ViX2ZtdHR5KSkgZm10IGZtdHR5XG4gIHwgSWdub3JlZF9mb3JtYXRfc3Vic3QgKHBhZF9vcHQsIHN1Yl9mbXR0eSkgLT5cbiAgICBsZXQgRm10dHlfZm10X0VCQiAoc3ViX2ZtdHR5JywgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSkgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5IGZtdCBmbXR0eSBpblxuICAgIEZtdF9mbXR0eV9FQkIgKElnbm9yZWRfcGFyYW0gKElnbm9yZWRfZm9ybWF0X3N1YnN0IChwYWRfb3B0LCBzdWJfZm10dHknKSwgZm10JyksIGZtdHR5JylcbiAgfCBJZ25vcmVkX3JlYWRlciAtPiAoXG4gICAgbWF0Y2ggZm10dHkgd2l0aFxuICAgIHwgSWdub3JlZF9yZWFkZXJfdHkgZm10dHlfcmVzdCAtPlxuICAgICAgbGV0IEZtdF9mbXR0eV9FQkIgKGZtdCcsIGZtdHR5JykgPSB0eXBlX2Zvcm1hdF9nZW4gZm10IGZtdHR5X3Jlc3QgaW5cbiAgICAgIEZtdF9mbXR0eV9FQkIgKElnbm9yZWRfcGFyYW0gKElnbm9yZWRfcmVhZGVyLCBmbXQnKSwgZm10dHknKVxuICAgIHwgXyAtPiByYWlzZSBUeXBlX21pc21hdGNoXG4gIClcblxuYW5kIHR5cGVfaWdub3JlZF9wYXJhbV9vbmUgOiB0eXBlIGExIGEyIGIxIGIyIGMxIGMyIGQxIGQyIGUxIGUyIGYxIGYyIC5cbiAgICAoYTIsIGIyLCBjMiwgZDIsIGQyLCBhMikgaWdub3JlZCAtPlxuICAgIChhMSwgYjEsIGMxLCBkMSwgZTEsIGYxKSBmbXQgLT5cbiAgICAoYTIsIGIyLCBjMiwgZDIsIGUyLCBmMikgZm10dHkgLT5cbiAgICAoYTIsIGIyLCBjMiwgZDIsIGUyLCBmMikgZm10X2ZtdHR5X2ViYlxuPSBmdW4gaWduIGZtdCBmbXR0eSAtPlxuICBsZXQgRm10X2ZtdHR5X0VCQiAoZm10JywgZm10dHknKSA9IHR5cGVfZm9ybWF0X2dlbiBmbXQgZm10dHkgaW5cbiAgRm10X2ZtdHR5X0VCQiAoSWdub3JlZF9wYXJhbSAoaWduLCBmbXQnKSwgZm10dHknKVxuXG4oKiBUeXBpbmcgb2YgdGhlIGNvbXBsZXggY2FzZTogXCIlXyguLi4lKVwiLiAqKVxuYW5kIHR5cGVfaWdub3JlZF9mb3JtYXRfc3Vic3RpdHV0aW9uIDogdHlwZSB3IHggeSB6IHAgcyB0IHUgYSBiIGMgZCBlIGYgLlxuICAgICh3LCB4LCB5LCB6LCBzLCBwKSBmbXR0eSAtPlxuICAgIChwLCB4LCB5LCBzLCB0LCB1KSBmbXQgLT5cbiAgICAoYSwgYiwgYywgZCwgZSwgZikgZm10dHkgLT4gKGEsIGIsIGMsIGQsIGUsIGYpIGZtdHR5X2ZtdF9lYmIgPVxuZnVuIHN1Yl9mbXR0eSBmbXQgZm10dHkgLT4gbWF0Y2ggc3ViX2ZtdHR5LCBmbXR0eSB3aXRoXG4gIHwgQ2hhcl90eSBzdWJfZm10dHlfcmVzdCwgQ2hhcl90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdHR5X2ZtdF9FQkIgKHN1Yl9mbXR0eV9yZXN0JywgZm10JykgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5X3Jlc3QgZm10IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXR0eV9mbXRfRUJCIChDaGFyX3R5IHN1Yl9mbXR0eV9yZXN0JywgZm10JylcbiAgfCBTdHJpbmdfdHkgc3ViX2ZtdHR5X3Jlc3QsIFN0cmluZ190eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdHR5X2ZtdF9FQkIgKHN1Yl9mbXR0eV9yZXN0JywgZm10JykgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5X3Jlc3QgZm10IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXR0eV9mbXRfRUJCIChTdHJpbmdfdHkgc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKVxuICB8IEludF90eSBzdWJfZm10dHlfcmVzdCwgSW50X3R5IGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10dHlfZm10X0VCQiAoc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKSA9XG4gICAgICB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbiBzdWJfZm10dHlfcmVzdCBmbXQgZm10dHlfcmVzdCBpblxuICAgIEZtdHR5X2ZtdF9FQkIgKEludF90eSBzdWJfZm10dHlfcmVzdCcsIGZtdCcpXG4gIHwgSW50MzJfdHkgc3ViX2ZtdHR5X3Jlc3QsIEludDMyX3R5IGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10dHlfZm10X0VCQiAoc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKSA9XG4gICAgICB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbiBzdWJfZm10dHlfcmVzdCBmbXQgZm10dHlfcmVzdCBpblxuICAgIEZtdHR5X2ZtdF9FQkIgKEludDMyX3R5IHN1Yl9mbXR0eV9yZXN0JywgZm10JylcbiAgfCBOYXRpdmVpbnRfdHkgc3ViX2ZtdHR5X3Jlc3QsIE5hdGl2ZWludF90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdHR5X2ZtdF9FQkIgKHN1Yl9mbXR0eV9yZXN0JywgZm10JykgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5X3Jlc3QgZm10IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXR0eV9mbXRfRUJCIChOYXRpdmVpbnRfdHkgc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKVxuICB8IEludDY0X3R5IHN1Yl9mbXR0eV9yZXN0LCBJbnQ2NF90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdHR5X2ZtdF9FQkIgKHN1Yl9mbXR0eV9yZXN0JywgZm10JykgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5X3Jlc3QgZm10IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXR0eV9mbXRfRUJCIChJbnQ2NF90eSBzdWJfZm10dHlfcmVzdCcsIGZtdCcpXG4gIHwgRmxvYXRfdHkgc3ViX2ZtdHR5X3Jlc3QsIEZsb2F0X3R5IGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10dHlfZm10X0VCQiAoc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKSA9XG4gICAgICB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbiBzdWJfZm10dHlfcmVzdCBmbXQgZm10dHlfcmVzdCBpblxuICAgIEZtdHR5X2ZtdF9FQkIgKEZsb2F0X3R5IHN1Yl9mbXR0eV9yZXN0JywgZm10JylcbiAgfCBCb29sX3R5IHN1Yl9mbXR0eV9yZXN0LCBCb29sX3R5IGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10dHlfZm10X0VCQiAoc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKSA9XG4gICAgICB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbiBzdWJfZm10dHlfcmVzdCBmbXQgZm10dHlfcmVzdCBpblxuICAgIEZtdHR5X2ZtdF9FQkIgKEJvb2xfdHkgc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKVxuICB8IEFscGhhX3R5IHN1Yl9mbXR0eV9yZXN0LCBBbHBoYV90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdHR5X2ZtdF9FQkIgKHN1Yl9mbXR0eV9yZXN0JywgZm10JykgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5X3Jlc3QgZm10IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXR0eV9mbXRfRUJCIChBbHBoYV90eSBzdWJfZm10dHlfcmVzdCcsIGZtdCcpXG4gIHwgVGhldGFfdHkgc3ViX2ZtdHR5X3Jlc3QsIFRoZXRhX3R5IGZtdHR5X3Jlc3QgLT5cbiAgICBsZXQgRm10dHlfZm10X0VCQiAoc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKSA9XG4gICAgICB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbiBzdWJfZm10dHlfcmVzdCBmbXQgZm10dHlfcmVzdCBpblxuICAgIEZtdHR5X2ZtdF9FQkIgKFRoZXRhX3R5IHN1Yl9mbXR0eV9yZXN0JywgZm10JylcbiAgfCBSZWFkZXJfdHkgc3ViX2ZtdHR5X3Jlc3QsIFJlYWRlcl90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdHR5X2ZtdF9FQkIgKHN1Yl9mbXR0eV9yZXN0JywgZm10JykgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5X3Jlc3QgZm10IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXR0eV9mbXRfRUJCIChSZWFkZXJfdHkgc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKVxuICB8IElnbm9yZWRfcmVhZGVyX3R5IHN1Yl9mbXR0eV9yZXN0LCBJZ25vcmVkX3JlYWRlcl90eSBmbXR0eV9yZXN0IC0+XG4gICAgbGV0IEZtdHR5X2ZtdF9FQkIgKHN1Yl9mbXR0eV9yZXN0JywgZm10JykgPVxuICAgICAgdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24gc3ViX2ZtdHR5X3Jlc3QgZm10IGZtdHR5X3Jlc3QgaW5cbiAgICBGbXR0eV9mbXRfRUJCIChJZ25vcmVkX3JlYWRlcl90eSBzdWJfZm10dHlfcmVzdCcsIGZtdCcpXG5cbiAgfCBGb3JtYXRfYXJnX3R5IChzdWIyX2ZtdHR5LCBzdWJfZm10dHlfcmVzdCksXG4gICAgRm9ybWF0X2FyZ190eSAoc3ViMl9mbXR0eScsIGZtdHR5X3Jlc3QpIC0+XG4gICAgaWYgRm10dHlfRUJCIHN1YjJfZm10dHkgPD4gRm10dHlfRUJCIHN1YjJfZm10dHknIHRoZW4gcmFpc2UgVHlwZV9taXNtYXRjaDtcbiAgICBsZXQgRm10dHlfZm10X0VCQiAoc3ViX2ZtdHR5X3Jlc3QnLCBmbXQnKSA9XG4gICAgICB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbiBzdWJfZm10dHlfcmVzdCBmbXQgZm10dHlfcmVzdCBpblxuICAgIEZtdHR5X2ZtdF9FQkIgKEZvcm1hdF9hcmdfdHkgKHN1YjJfZm10dHknLCBzdWJfZm10dHlfcmVzdCcpLCBmbXQnKVxuICB8IEZvcm1hdF9zdWJzdF90eSAoc3ViMV9mbXR0eSwgIHN1YjJfZm10dHksICBzdWJfZm10dHlfcmVzdCksXG4gICAgRm9ybWF0X3N1YnN0X3R5IChzdWIxX2ZtdHR5Jywgc3ViMl9mbXR0eScsIGZtdHR5X3Jlc3QpIC0+XG4gICAgKCogVE9ETyBkZWZpbmUgRm10dHlfcmVsX0VCQiB0byByZW1vdmUgdGhvc2UgZXJhc2VfcmVsICopXG4gICAgaWYgRm10dHlfRUJCIChlcmFzZV9yZWwgc3ViMV9mbXR0eSkgPD4gRm10dHlfRUJCIChlcmFzZV9yZWwgc3ViMV9mbXR0eScpIHRoZW4gcmFpc2UgVHlwZV9taXNtYXRjaDtcbiAgICBpZiBGbXR0eV9FQkIgKGVyYXNlX3JlbCBzdWIyX2ZtdHR5KSA8PiBGbXR0eV9FQkIgKGVyYXNlX3JlbCBzdWIyX2ZtdHR5JykgdGhlbiByYWlzZSBUeXBlX21pc21hdGNoO1xuICAgIGxldCBzdWJfZm10dHknID0gdHJhbnMgKHN5bW0gc3ViMV9mbXR0eScpIHN1YjJfZm10dHknIGluXG4gICAgbGV0IF8sIGYyLCBfLCBmNCA9IGZtdHR5X3JlbF9kZXQgc3ViX2ZtdHR5JyBpblxuICAgIGxldCBSZWZsID0gZjIgUmVmbCBpblxuICAgIGxldCBSZWZsID0gZjQgUmVmbCBpblxuICAgIGxldCBGbXR0eV9mbXRfRUJCIChzdWJfZm10dHlfcmVzdCcsIGZtdCcpID1cbiAgICAgIHR5cGVfaWdub3JlZF9mb3JtYXRfc3Vic3RpdHV0aW9uIChlcmFzZV9yZWwgc3ViX2ZtdHR5X3Jlc3QpIGZtdCBmbXR0eV9yZXN0IGluXG4gICAgRm10dHlfZm10X0VCQiAoRm9ybWF0X3N1YnN0X3R5IChzdWIxX2ZtdHR5Jywgc3ViMl9mbXR0eScsIHN5bW0gc3ViX2ZtdHR5X3Jlc3QnKSwgZm10JylcbiAgfCBFbmRfb2ZfZm10dHksIGZtdHR5IC0+XG4gICAgRm10dHlfZm10X0VCQiAoRW5kX29mX2ZtdHR5LCB0eXBlX2Zvcm1hdF9nZW4gZm10IGZtdHR5KVxuICB8IF8gLT4gcmFpc2UgVHlwZV9taXNtYXRjaFxuXG4oKiBUaGlzIGltcGxlbWVudGF0aW9uIG9mIGByZWNhc3RgIGlzIGEgYml0IGRpc2FwcG9pbnRpbmcuIFRoZVxuICAgaW52YXJpYW50IHByb3ZpZGVkIGJ5IHRoZSB0eXBlIGFyZSB2ZXJ5IHN0cm9uZzogdGhlIGlucHV0IGZvcm1hdCdzXG4gICB0eXBlIGlzIGluIHJlbGF0aW9uIHRvIHRoZSBvdXRwdXQgdHlwZSdzIGFzIHdpdG5lc3NlZCBieSB0aGVcbiAgIGZtdHR5X3JlbCBhcmd1bWVudC4gT25lIHdvdWxkIGF0IGZpcnN0IGV4cGVjdCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICB0b3RhbCwgYW5kIGltcGxlbWVudGFibGUgYnkgZXhoYXVzdGl2ZSBwYXR0ZXJuIG1hdGNoaW5nLiBJbnN0ZWFkLFxuICAgd2UgcmV1c2UgdGhlIGhpZ2hseSBwYXJ0aWFsIGFuZCBtdWNoIGxlc3Mgd2VsbC1kZWZpbmVkIGZ1bmN0aW9uXG4gICBgdHlwZV9mb3JtYXRgIHRoYXQgaGFzIGxvc3QgYWxsIGtub3dsZWRnZSBvZiB0aGUgY29ycmVzcG9uZGVuY2VcbiAgIGJldHdlZW4gdGhlIGFyZ3VtZW50J3MgdHlwZXMuXG5cbiAgIEJlc2lkZXMgdGhlIGZhY3QgdGhhdCB0aGlzIGZ1bmN0aW9uIHJldXNlcyBhIGxvdCBvZiB0aGVcbiAgIGB0eXBlX2Zvcm1hdGAgbG9naWMgKGVnLjogc2VlaW5nIEludF90eSBpbiB0aGUgZm10dHkgcGFyYW1ldGVyIGRvZXNcbiAgIG5vdCBsZXQgeW91IG1hdGNoIG9uIEludCBvbmx5LCBhcyB5b3UgbWF5IGluIGZhY3QgaGF2ZSBGbG9hdFxuICAgKEFyZ19wYWRkaW5nLCAuLi4pIChcIiUuKmRcIikgYmVnaW5uaW5nIHdpdGggYW4gSW50X3R5KSwgaXQgaXMgYWxzb1xuICAgYSBwYXJ0aWFsIGZ1bmN0aW9uLCBiZWNhdXNlIHRoZSB0eXBpbmcgaW5mb3JtYXRpb24gaW4gYSBmb3JtYXQgaXNcbiAgIG5vdCBxdWl0ZSBlbm91Z2ggdG8gcmVjb25zdHJ1Y3QgaXQgdW5hbWJpZ3VvdXNseS4gRm9yIGV4YW1wbGUsIHRoZVxuICAgZm9ybWF0IHR5cGVzIG9mIFwiJWQlX3JcIiBhbmQgXCIlX3IlZFwiIGhhdmUgdGhlIHNhbWUgZm9ybWF0NlxuICAgcGFyYW1ldGVycywgYnV0IHRoZXkgYXJlIG5vdCBhdCBhbGwgZXhjaGFuZ2VhYmxlLCBhbmQgcHV0dGluZyBvbmVcbiAgIGluIHBsYWNlIG9mIHRoZSBvdGhlciBtdXN0IHJlc3VsdCBpbiBhIGR5bmFtaWMgZmFpbHVyZS5cblxuICAgR2l2ZW4gdGhhdDpcbiAgIC0gd2UnZCBoYXZlIHRvIGR1cGxpY2F0ZSBhIGxvdCBvZiBub24tdHJpdmlhbCB0eXBpbmcgbG9naWMgZnJvbSB0eXBlX2Zvcm1hdFxuICAgLSB0aGlzIHdvdWxkbid0IGV2ZW4gZWxpbWluYXRlIChhbGwpIHRoZSBkeW5hbWljIGZhaWx1cmVzXG4gICB3ZSBkZWNpZGVkIHRvIGp1c3QgcmV1c2UgdHlwZV9mb3JtYXQgZGlyZWN0bHkgZm9yIG5vdy5cbiopXG5sZXQgcmVjYXN0IDpcbiAgdHlwZSBhMSBiMSBjMSBkMSBlMSBmMVxuICAgICAgIGEyIGIyIGMyIGQyIGUyIGYyXG4gIC5cbiAgICAgKGExLCBiMSwgYzEsIGQxLCBlMSwgZjEpIGZtdFxuICAtPiAoYTEsIGIxLCBjMSwgZDEsIGUxLCBmMSxcbiAgICAgIGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIpIGZtdHR5X3JlbFxuICAtPiAoYTIsIGIyLCBjMiwgZDIsIGUyLCBmMikgZm10XG49IGZ1biBmbXQgZm10dHkgLT5cbiAgdHlwZV9mb3JtYXQgZm10IChlcmFzZV9yZWwgKHN5bW0gZm10dHkpKVxuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBQcmludGluZyB0b29scyAqKVxuXG4oKiBBZGQgcGFkZGluZyBzcGFjZXMgYXJyb3VuZCBhIHN0cmluZy4gKilcbmxldCBmaXhfcGFkZGluZyBwYWR0eSB3aWR0aCBzdHIgPVxuICBsZXQgbGVuID0gU3RyaW5nLmxlbmd0aCBzdHIgaW5cbiAgbGV0IHdpZHRoLCBwYWR0eSA9XG4gICAgYWJzIHdpZHRoLFxuICAgICgqIHdoaWxlIGxpdGVyYWwgcGFkZGluZyB3aWR0aHMgYXJlIGFsd2F5cyBub24tbmVnYXRpdmUsXG4gICAgICAgZHluYW1pY2FsbHktc2V0IHdpZHRocyAoQXJnX3BhZGRpbmcsIGVnLiAlKmQpIG1heSBiZSBuZWdhdGl2ZTtcbiAgICAgICB3ZSBpbnRlcnByZXQgdGhvc2UgYXMgc3BlY2lmeWluZyBhIHBhZGRpbmctdG8tdGhlLWxlZnQ7IHRoaXNcbiAgICAgICBtZWFucyB0aGF0ICcwJyBtYXkgZ2V0IGRyb3BwZWQgZXZlbiBpZiBpdCB3YXMgZXhwbGljaXRseSBzZXQsXG4gICAgICAgYnV0OlxuICAgICAgIC0gdGhpcyBpcyB3aGF0IHRoZSBsZWdhY3kgaW1wbGVtZW50YXRpb24gZG9lcywgYW5kXG4gICAgICAgICB3ZSBwcmVzZXJ2ZSBjb21wYXRpYmlsaXR5IGlmIHBvc3NpYmxlXG4gICAgICAgLSB3ZSBjb3VsZCBvbmx5IHNpZ25hbCB0aGlzIGlzc3VlIGJ5IGZhaWxpbmcgYXQgcnVudGltZSxcbiAgICAgICAgIHdoaWNoIGlzIG5vdCB2ZXJ5IG5pY2UuLi4gKilcbiAgICBpZiB3aWR0aCA8IDAgdGhlbiBMZWZ0IGVsc2UgcGFkdHkgaW5cbiAgaWYgd2lkdGggPD0gbGVuIHRoZW4gc3RyIGVsc2VcbiAgICBsZXQgcmVzID0gQnl0ZXMubWFrZSB3aWR0aCAoaWYgcGFkdHkgPSBaZXJvcyB0aGVuICcwJyBlbHNlICcgJykgaW5cbiAgICBiZWdpbiBtYXRjaCBwYWR0eSB3aXRoXG4gICAgfCBMZWZ0ICAtPiBTdHJpbmcuYmxpdCBzdHIgMCByZXMgMCBsZW5cbiAgICB8IFJpZ2h0IC0+IFN0cmluZy5ibGl0IHN0ciAwIHJlcyAod2lkdGggLSBsZW4pIGxlblxuICAgIHwgWmVyb3Mgd2hlbiBsZW4gPiAwICYmIChzdHIuWzBdID0gJysnIHx8IHN0ci5bMF0gPSAnLScgfHwgc3RyLlswXSA9ICcgJykgLT5cbiAgICAgIEJ5dGVzLnNldCByZXMgMCBzdHIuWzBdO1xuICAgICAgU3RyaW5nLmJsaXQgc3RyIDEgcmVzICh3aWR0aCAtIGxlbiArIDEpIChsZW4gLSAxKVxuICAgIHwgWmVyb3Mgd2hlbiBsZW4gPiAxICYmIHN0ci5bMF0gPSAnMCcgJiYgKHN0ci5bMV0gPSAneCcgfHwgc3RyLlsxXSA9ICdYJykgLT5cbiAgICAgIEJ5dGVzLnNldCByZXMgMSBzdHIuWzFdO1xuICAgICAgU3RyaW5nLmJsaXQgc3RyIDIgcmVzICh3aWR0aCAtIGxlbiArIDIpIChsZW4gLSAyKVxuICAgIHwgWmVyb3MgLT5cbiAgICAgIFN0cmluZy5ibGl0IHN0ciAwIHJlcyAod2lkdGggLSBsZW4pIGxlblxuICAgIGVuZDtcbiAgICBCeXRlcy51bnNhZmVfdG9fc3RyaW5nIHJlc1xuXG4oKiBBZGQgJzAnIHBhZGRpbmcgdG8gaW50LCBpbnQzMiwgbmF0aXZlaW50IG9yIGludDY0IHN0cmluZyByZXByZXNlbnRhdGlvbi4gKilcbmxldCBmaXhfaW50X3ByZWNpc2lvbiBwcmVjIHN0ciA9XG4gIGxldCBwcmVjID0gYWJzIHByZWMgaW5cbiAgbGV0IGxlbiA9IFN0cmluZy5sZW5ndGggc3RyIGluXG4gIG1hdGNoIHN0ci5bMF0gd2l0aFxuICB8ICgnKycgfCAnLScgfCAnICcpIGFzIGMgd2hlbiBwcmVjICsgMSA+IGxlbiAtPlxuICAgIGxldCByZXMgPSBCeXRlcy5tYWtlIChwcmVjICsgMSkgJzAnIGluXG4gICAgQnl0ZXMuc2V0IHJlcyAwIGM7XG4gICAgU3RyaW5nLmJsaXQgc3RyIDEgcmVzIChwcmVjIC0gbGVuICsgMikgKGxlbiAtIDEpO1xuICAgIEJ5dGVzLnVuc2FmZV90b19zdHJpbmcgcmVzXG4gIHwgJzAnIHdoZW4gcHJlYyArIDIgPiBsZW4gJiYgbGVuID4gMSAmJiAoc3RyLlsxXSA9ICd4JyB8fCBzdHIuWzFdID0gJ1gnKSAtPlxuICAgIGxldCByZXMgPSBCeXRlcy5tYWtlIChwcmVjICsgMikgJzAnIGluXG4gICAgQnl0ZXMuc2V0IHJlcyAxIHN0ci5bMV07XG4gICAgU3RyaW5nLmJsaXQgc3RyIDIgcmVzIChwcmVjIC0gbGVuICsgNCkgKGxlbiAtIDIpO1xuICAgIEJ5dGVzLnVuc2FmZV90b19zdHJpbmcgcmVzXG4gIHwgJzAnIC4uICc5JyB8ICdhJyAuLiAnZicgfCAnQScgLi4gJ0YnIHdoZW4gcHJlYyA+IGxlbiAtPlxuICAgIGxldCByZXMgPSBCeXRlcy5tYWtlIHByZWMgJzAnIGluXG4gICAgU3RyaW5nLmJsaXQgc3RyIDAgcmVzIChwcmVjIC0gbGVuKSBsZW47XG4gICAgQnl0ZXMudW5zYWZlX3RvX3N0cmluZyByZXNcbiAgfCBfIC0+XG4gICAgc3RyXG5cbigqIEVzY2FwZSBhIHN0cmluZyBhY2NvcmRpbmcgdG8gdGhlIE9DYW1sIGxleGluZyBjb252ZW50aW9uLiAqKVxubGV0IHN0cmluZ190b19jYW1sX3N0cmluZyBzdHIgPVxuICBTdHJpbmcuY29uY2F0IChTdHJpbmcuZXNjYXBlZCBzdHIpIFtcIlxcXCJcIjsgXCJcXFwiXCJdXG5cbigqIEdlbmVyYXRlIHRoZSBmb3JtYXRfaW50IGZpcnN0IGFyZ3VtZW50IGZyb20gYW4gaW50X2NvbnYuICopXG5sZXQgZm9ybWF0X29mX2ljb252IGljb252ID0gbWF0Y2ggaWNvbnYgd2l0aFxuICB8IEludF9kIC0+IFwiJWRcIiB8IEludF9wZCAtPiBcIiUrZFwiIHwgSW50X3NkIC0+IFwiJSBkXCJcbiAgfCBJbnRfaSAtPiBcIiVpXCIgfCBJbnRfcGkgLT4gXCIlK2lcIiB8IEludF9zaSAtPiBcIiUgaVwiXG4gIHwgSW50X3ggLT4gXCIleFwiIHwgSW50X0N4IC0+IFwiJSN4XCJcbiAgfCBJbnRfWCAtPiBcIiVYXCIgfCBJbnRfQ1ggLT4gXCIlI1hcIlxuICB8IEludF9vIC0+IFwiJW9cIiB8IEludF9DbyAtPiBcIiUjb1wiXG4gIHwgSW50X3UgLT4gXCIldVwiXG5cbigqIEdlbmVyYXRlIHRoZSBmb3JtYXRfaW50MzIsIGZvcm1hdF9uYXRpdmVpbnQgYW5kIGZvcm1hdF9pbnQ2NCBmaXJzdFxuICAgYXJndW1lbnQgZnJvbSBhbiBpbnRfY29udi4gKilcbmxldCBmb3JtYXRfb2ZfYWNvbnYgaWNvbnYgYyA9XG4gIGxldCBzZXBzID0gbWF0Y2ggaWNvbnYgd2l0aFxuICB8IEludF9kIC0+IFtcIiVcIjtcImRcIl0gfCBJbnRfcGQgLT4gW1wiJStcIjtcImRcIl0gfCBJbnRfc2QgLT4gW1wiJSBcIjtcImRcIl1cbiAgfCBJbnRfaSAtPiBbXCIlXCI7XCJpXCJdIHwgSW50X3BpIC0+IFtcIiUrXCI7XCJpXCJdIHwgSW50X3NpIC0+IFtcIiUgXCI7XCJpXCJdXG4gIHwgSW50X3ggLT4gW1wiJVwiO1wieFwiXSB8IEludF9DeCAtPiBbXCIlI1wiO1wieFwiXVxuICB8IEludF9YIC0+IFtcIiVcIjtcIlhcIl0gfCBJbnRfQ1ggLT4gW1wiJSNcIjtcIlhcIl1cbiAgfCBJbnRfbyAtPiBbXCIlXCI7XCJvXCJdIHwgSW50X0NvIC0+IFtcIiUjXCI7XCJvXCJdXG4gIHwgSW50X3UgLT4gW1wiJVwiO1widVwiXVxuICBpbiBTdHJpbmcuY29uY2F0IChTdHJpbmcubWFrZSAxIGMpIHNlcHNcblxuKCogR2VuZXJhdGUgdGhlIGZvcm1hdF9mbG9hdCBmaXJzdCBhcmd1bWVudCBmb3JtIGEgZmxvYXRfY29udi4gKilcbmxldCBmb3JtYXRfb2ZfZmNvbnYgZmNvbnYgcHJlYyA9XG4gIGlmIGZjb252ID0gRmxvYXRfRiB0aGVuIFwiJS4xMmdcIiBlbHNlXG4gICAgbGV0IHByZWMgPSBhYnMgcHJlYyBpblxuICAgIGxldCBzeW1iID0gY2hhcl9vZl9mY29udiBmY29udiBpblxuICAgIGxldCBidWYgPSBidWZmZXJfY3JlYXRlIDE2IGluXG4gICAgYnVmZmVyX2FkZF9jaGFyIGJ1ZiAnJSc7XG4gICAgYnByaW50X2Zjb252X2ZsYWcgYnVmIGZjb252O1xuICAgIGJ1ZmZlcl9hZGRfY2hhciBidWYgJy4nO1xuICAgIGJ1ZmZlcl9hZGRfc3RyaW5nIGJ1ZiAoc3RyaW5nX29mX2ludCBwcmVjKTtcbiAgICBidWZmZXJfYWRkX2NoYXIgYnVmIHN5bWI7XG4gICAgYnVmZmVyX2NvbnRlbnRzIGJ1ZlxuXG4oKiBDb252ZXJ0IGFuIGludGVnZXIgdG8gYSBzdHJpbmcgYWNjb3JkaW5nIHRvIGEgY29udmVyc2lvbi4gKilcbmxldCBjb252ZXJ0X2ludCBpY29udiBuID0gZm9ybWF0X2ludCAoZm9ybWF0X29mX2ljb252IGljb252KSBuXG5sZXQgY29udmVydF9pbnQzMiBpY29udiBuID0gZm9ybWF0X2ludDMyIChmb3JtYXRfb2ZfYWNvbnYgaWNvbnYgJ2wnKSBuXG5sZXQgY29udmVydF9uYXRpdmVpbnQgaWNvbnYgbiA9IGZvcm1hdF9uYXRpdmVpbnQgKGZvcm1hdF9vZl9hY29udiBpY29udiAnbicpIG5cbmxldCBjb252ZXJ0X2ludDY0IGljb252IG4gPSBmb3JtYXRfaW50NjQgKGZvcm1hdF9vZl9hY29udiBpY29udiAnTCcpIG5cblxuKCogQ29udmVydCBhIGZsb2F0IHRvIHN0cmluZy4gKilcbigqIEZpeCBzcGVjaWFsIGNhc2Ugb2YgXCJPQ2FtbCBmbG9hdCBmb3JtYXRcIi4gKilcbmxldCBjb252ZXJ0X2Zsb2F0IGZjb252IHByZWMgeCA9XG4gIGxldCBwcmVjID0gYWJzIHByZWMgaW5cbiAgbGV0IHN0ciA9IGZvcm1hdF9mbG9hdCAoZm9ybWF0X29mX2Zjb252IGZjb252IHByZWMpIHggaW5cbiAgaWYgZmNvbnYgPD4gRmxvYXRfRiB0aGVuIHN0ciBlbHNlXG4gICAgbGV0IGxlbiA9IFN0cmluZy5sZW5ndGggc3RyIGluXG4gICAgbGV0IHJlYyBpc192YWxpZCBpID1cbiAgICAgIGlmIGkgPSBsZW4gdGhlbiBmYWxzZSBlbHNlXG4gICAgICAgIG1hdGNoIHN0ci5baV0gd2l0aFxuICAgICAgICB8ICcuJyB8ICdlJyB8ICdFJyAtPiB0cnVlXG4gICAgICAgIHwgXyAtPiBpc192YWxpZCAoaSArIDEpXG4gICAgaW5cbiAgICBtYXRjaCBjbGFzc2lmeV9mbG9hdCB4IHdpdGhcbiAgICB8IEZQX25vcm1hbCB8IEZQX3N1Ym5vcm1hbCB8IEZQX3plcm8gLT5cbiAgICAgIGlmIGlzX3ZhbGlkIDAgdGhlbiBzdHIgZWxzZSBzdHIgXiBcIi5cIlxuICAgIHwgRlBfaW5maW5pdGUgLT5cbiAgICAgIGlmIHggPCAwLjAgdGhlbiBcIm5lZ19pbmZpbml0eVwiIGVsc2UgXCJpbmZpbml0eVwiXG4gICAgfCBGUF9uYW4gLT4gXCJuYW5cIlxuXG4oKiBDb252ZXJ0IGEgY2hhciB0byBhIHN0cmluZyBhY2NvcmRpbmcgdG8gdGhlIE9DYW1sIGxleGljYWwgY29udmVudGlvbi4gKilcbmxldCBmb3JtYXRfY2FtbF9jaGFyIGMgPVxuICBTdHJpbmcuY29uY2F0IChDaGFyLmVzY2FwZWQgYykgW1wiJ1wiOyBcIidcIl1cblxuKCogQ29udmVydCBhIGZvcm1hdCB0eXBlIHRvIHN0cmluZyAqKVxubGV0IHN0cmluZ19vZl9mbXR0eSBmbXR0eSA9XG4gIGxldCBidWYgPSBidWZmZXJfY3JlYXRlIDE2IGluXG4gIGJwcmludF9mbXR0eSBidWYgZm10dHk7XG4gIGJ1ZmZlcl9jb250ZW50cyBidWZcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICAgICgqIEdlbmVyaWMgcHJpbnRpbmcgZnVuY3Rpb24gKilcblxuKCogTWFrZSBhIGdlbmVyaWMgcHJpbnRpbmcgZnVuY3Rpb24uICopXG4oKiBVc2VkIHRvIGdlbmVyYXRlIFByaW50ZiBhbmQgRm9ybWF0IHByaW50aW5nIGZ1bmN0aW9ucy4gKilcbigqIFBhcmFtZXRlcnM6XG4gICAgIGs6IGEgY29udGludWF0aW9uIGZpbmFsbHkgYXBwbGllZCB0byB0aGUgb3V0cHV0IHN0cmVhbSBhbmQgdGhlIGFjY3VtdWxhdG9yLlxuICAgICBvOiB0aGUgb3V0cHV0IHN0cmVhbSAoc2VlIGssICVhIGFuZCAldCkuXG4gICAgIGFjYzogcmV2IGxpc3Qgb2YgcHJpbnRpbmcgZW50aXRpZXMgKHN0cmluZywgY2hhciwgZmx1c2gsIGZvcm1hdHRpbmcsIC4uLikuXG4gICAgIGZtdDogdGhlIGZvcm1hdC4gKilcbmxldCByZWMgbWFrZV9wcmludGYgOiB0eXBlIGEgYiBjIGQgZSBmIC5cbiAgICAoYiAtPiAoYiwgYykgYWNjIC0+IGYpIC0+IGIgLT4gKGIsIGMpIGFjYyAtPlxuICAgIChhLCBiLCBjLCBkLCBlLCBmKSBmbXQgLT4gYSA9XG5mdW4gayBvIGFjYyBmbXQgLT4gbWF0Y2ggZm10IHdpdGhcbiAgfCBDaGFyIHJlc3QgLT5cbiAgICBmdW4gYyAtPlxuICAgICAgbGV0IG5ld19hY2MgPSBBY2NfZGF0YV9jaGFyIChhY2MsIGMpIGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gbmV3X2FjYyByZXN0XG4gIHwgQ2FtbF9jaGFyIHJlc3QgLT5cbiAgICBmdW4gYyAtPlxuICAgICAgbGV0IG5ld19hY2MgPSBBY2NfZGF0YV9zdHJpbmcgKGFjYywgZm9ybWF0X2NhbWxfY2hhciBjKSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIG5ld19hY2MgcmVzdFxuICB8IFN0cmluZyAocGFkLCByZXN0KSAtPlxuICAgIG1ha2Vfc3RyaW5nX3BhZGRpbmcgayBvIGFjYyByZXN0IHBhZCAoZnVuIHN0ciAtPiBzdHIpXG4gIHwgQ2FtbF9zdHJpbmcgKHBhZCwgcmVzdCkgLT5cbiAgICBtYWtlX3N0cmluZ19wYWRkaW5nIGsgbyBhY2MgcmVzdCBwYWQgc3RyaW5nX3RvX2NhbWxfc3RyaW5nXG4gIHwgSW50IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uIGsgbyBhY2MgcmVzdCBwYWQgcHJlYyBjb252ZXJ0X2ludCBpY29udlxuICB8IEludDMyIChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uIGsgbyBhY2MgcmVzdCBwYWQgcHJlYyBjb252ZXJ0X2ludDMyIGljb252XG4gIHwgTmF0aXZlaW50IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uIGsgbyBhY2MgcmVzdCBwYWQgcHJlYyBjb252ZXJ0X25hdGl2ZWludCBpY29udlxuICB8IEludDY0IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uIGsgbyBhY2MgcmVzdCBwYWQgcHJlYyBjb252ZXJ0X2ludDY0IGljb252XG4gIHwgRmxvYXQgKGZjb252LCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgbWFrZV9mbG9hdF9wYWRkaW5nX3ByZWNpc2lvbiBrIG8gYWNjIHJlc3QgcGFkIHByZWMgZmNvbnZcbiAgfCBCb29sIHJlc3QgLT5cbiAgICBmdW4gYiAtPiBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHJpbmdfb2ZfYm9vbCBiKSkgcmVzdFxuICB8IEFscGhhIHJlc3QgLT5cbiAgICBmdW4gZiB4IC0+IG1ha2VfcHJpbnRmIGsgbyAoQWNjX2RlbGF5IChhY2MsIGZ1biBvIC0+IGYgbyB4KSkgcmVzdFxuICB8IFRoZXRhIHJlc3QgLT5cbiAgICBmdW4gZiAtPiBtYWtlX3ByaW50ZiBrIG8gKEFjY19kZWxheSAoYWNjLCBmKSkgcmVzdFxuICB8IEN1c3RvbSAoYXJpdHksIGYsIHJlc3QpIC0+XG4gICAgbWFrZV9jdXN0b20gayBvIGFjYyByZXN0IGFyaXR5IChmICgpKVxuICB8IFJlYWRlciBfIC0+XG4gICAgKCogVGhpcyBjYXNlIGlzIGltcG9zc2libGUsIGJ5IHR5cGluZyBvZiBmb3JtYXRzLiAqKVxuICAgICgqIEluZGVlZCwgc2luY2UgcHJpbnRmIGFuZCBjby4gdGFrZSBhIGZvcm1hdDQgYXMgYXJndW1lbnQsIHRoZSAnZCBhbmQgJ2VcbiAgICAgICB0eXBlIHBhcmFtZXRlcnMgb2YgZm10IGFyZSBvYnZpb3VzbHkgZXF1YWxzLiBUaGUgUmVhZGVyIGlzIHRoZVxuICAgICAgIG9ubHkgY29uc3RydWN0b3Igd2hpY2ggdG91Y2ggJ2QgYW5kICdlIHR5cGUgcGFyYW1ldGVycyBvZiB0aGUgZm9ybWF0XG4gICAgICAgdHlwZSwgaXQgYWRkcyBhbiAoLT4pIHRvIHRoZSAnZCBwYXJhbWV0ZXJzLiBDb25zZXF1ZW50bHksIGEgZm9ybWF0NFxuICAgICAgIGNhbm5vdCBjb250YWluIGEgUmVhZGVyIG5vZGUsIGV4Y2VwdCBpbiB0aGUgc3ViLWZvcm1hdCBhc3NvY2lhdGVkIHRvXG4gICAgICAgYW4gJXsuLi4lfS4gSXQncyBub3QgYSBwcm9ibGVtIGJlY2F1c2UgbWFrZV9wcmludGYgZG8gbm90IGNhbGxcbiAgICAgICBpdHNlbGYgcmVjdXJzaXZlbHkgb24gdGhlIHN1Yi1mb3JtYXQgYXNzb2NpYXRlZCB0byAley4uLiV9LiAqKVxuICAgIGFzc2VydCBmYWxzZVxuICB8IEZsdXNoIHJlc3QgLT5cbiAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19mbHVzaCBhY2MpIHJlc3RcblxuICB8IFN0cmluZ19saXRlcmFsIChzdHIsIHJlc3QpIC0+XG4gICAgbWFrZV9wcmludGYgayBvIChBY2Nfc3RyaW5nX2xpdGVyYWwgKGFjYywgc3RyKSkgcmVzdFxuICB8IENoYXJfbGl0ZXJhbCAoY2hyLCByZXN0KSAtPlxuICAgIG1ha2VfcHJpbnRmIGsgbyAoQWNjX2NoYXJfbGl0ZXJhbCAoYWNjLCBjaHIpKSByZXN0XG5cbiAgfCBGb3JtYXRfYXJnIChfLCBzdWJfZm10dHksIHJlc3QpIC0+XG4gICAgbGV0IHR5ID0gc3RyaW5nX29mX2ZtdHR5IHN1Yl9mbXR0eSBpblxuICAgIChmdW4gc3RyIC0+XG4gICAgICBpZ25vcmUgc3RyO1xuICAgICAgbWFrZV9wcmludGYgayBvIChBY2NfZGF0YV9zdHJpbmcgKGFjYywgdHkpKSByZXN0KVxuICB8IEZvcm1hdF9zdWJzdCAoXywgZm10dHksIHJlc3QpIC0+XG4gICAgZnVuIChGb3JtYXQgKGZtdCwgXykpIC0+IG1ha2VfcHJpbnRmIGsgbyBhY2NcbiAgICAgIChjb25jYXRfZm10IChyZWNhc3QgZm10IGZtdHR5KSByZXN0KVxuXG4gIHwgU2Nhbl9jaGFyX3NldCAoXywgXywgcmVzdCkgLT5cbiAgICBsZXQgbmV3X2FjYyA9IEFjY19pbnZhbGlkX2FyZyAoYWNjLCBcIlByaW50ZjogYmFkIGNvbnZlcnNpb24gJVtcIikgaW5cbiAgICBmdW4gXyAtPiBtYWtlX3ByaW50ZiBrIG8gbmV3X2FjYyByZXN0XG4gIHwgU2Nhbl9nZXRfY291bnRlciAoXywgcmVzdCkgLT5cbiAgICAoKiBUaGlzIGNhc2Ugc2hvdWxkIGJlIHJlZnVzZWQgZm9yIFByaW50Zi4gKilcbiAgICAoKiBBY2NlcHRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gKilcbiAgICAoKiBJbnRlcnByZXQgJWwsICVuIGFuZCAlTCBhcyAldS4gKilcbiAgICBmdW4gbiAtPlxuICAgICAgbGV0IG5ld19hY2MgPSBBY2NfZGF0YV9zdHJpbmcgKGFjYywgZm9ybWF0X2ludCBcIiV1XCIgbikgaW5cbiAgICAgIG1ha2VfcHJpbnRmIGsgbyBuZXdfYWNjIHJlc3RcbiAgfCBTY2FuX25leHRfY2hhciByZXN0IC0+XG4gICAgZnVuIGMgLT5cbiAgICAgIGxldCBuZXdfYWNjID0gQWNjX2RhdGFfY2hhciAoYWNjLCBjKSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIG5ld19hY2MgcmVzdFxuICB8IElnbm9yZWRfcGFyYW0gKGlnbiwgcmVzdCkgLT5cbiAgICBtYWtlX2lnbm9yZWRfcGFyYW0gayBvIGFjYyBpZ24gcmVzdFxuXG4gIHwgRm9ybWF0dGluZ19saXQgKGZtdGluZ19saXQsIHJlc3QpIC0+XG4gICAgbWFrZV9wcmludGYgayBvIChBY2NfZm9ybWF0dGluZ19saXQgKGFjYywgZm10aW5nX2xpdCkpIHJlc3RcbiAgfCBGb3JtYXR0aW5nX2dlbiAoT3Blbl90YWcgKEZvcm1hdCAoZm10JywgXykpLCByZXN0KSAtPlxuICAgIGxldCBrJyBrb2Mga2FjYyA9XG4gICAgICBtYWtlX3ByaW50ZiBrIGtvYyAoQWNjX2Zvcm1hdHRpbmdfZ2VuIChhY2MsIEFjY19vcGVuX3RhZyBrYWNjKSkgcmVzdCBpblxuICAgIG1ha2VfcHJpbnRmIGsnIG8gRW5kX29mX2FjYyBmbXQnXG4gIHwgRm9ybWF0dGluZ19nZW4gKE9wZW5fYm94IChGb3JtYXQgKGZtdCcsIF8pKSwgcmVzdCkgLT5cbiAgICBsZXQgaycga29jIGthY2MgPVxuICAgICAgbWFrZV9wcmludGYgayBrb2MgKEFjY19mb3JtYXR0aW5nX2dlbiAoYWNjLCBBY2Nfb3Blbl9ib3gga2FjYykpIHJlc3QgaW5cbiAgICBtYWtlX3ByaW50ZiBrJyBvIEVuZF9vZl9hY2MgZm10J1xuXG4gIHwgRW5kX29mX2Zvcm1hdCAtPlxuICAgIGsgbyBhY2NcblxuKCogRGVsYXkgdGhlIGVycm9yIChJbnZhbGlkX2FyZ3VtZW50IFwiUHJpbnRmOiBiYWQgY29udmVyc2lvbiAlX1wiKS4gKilcbigqIEdlbmVyYXRlIGZ1bmN0aW9ucyB0byB0YWtlIHJlbWFpbmluZyBhcmd1bWVudHMgKGFmdGVyIHRoZSBcIiVfXCIpLiAqKVxuYW5kIG1ha2VfaWdub3JlZF9wYXJhbSA6IHR5cGUgeCB5IGEgYiBjIGQgZSBmIC5cbiAgICAoYiAtPiAoYiwgYykgYWNjIC0+IGYpIC0+IGIgLT4gKGIsIGMpIGFjYyAtPlxuICAgIChhLCBiLCBjLCBkLCB5LCB4KSBpZ25vcmVkIC0+XG4gICAgKHgsIGIsIGMsIHksIGUsIGYpIGZtdCAtPiBhID1cbmZ1biBrIG8gYWNjIGlnbiBmbXQgLT4gbWF0Y2ggaWduIHdpdGhcbiAgfCBJZ25vcmVkX2NoYXIgICAgICAgICAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2NhbWxfY2hhciAgICAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX3N0cmluZyBfICAgICAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2NhbWxfc3RyaW5nIF8gICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2ludCAoXywgXykgICAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2ludDMyIChfLCBfKSAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX25hdGl2ZWludCAoXywgXykgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2ludDY0IChfLCBfKSAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2Zsb2F0IChfLCBfKSAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2Jvb2wgICAgICAgICAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2Zvcm1hdF9hcmcgXyAgICAgICAgICAgIC0+IG1ha2VfaW52YWxpZF9hcmcgayBvIGFjYyBmbXRcbiAgfCBJZ25vcmVkX2Zvcm1hdF9zdWJzdCAoXywgZm10dHkpIC0+IG1ha2VfZnJvbV9mbXR0eSBrIG8gYWNjIGZtdHR5IGZtdFxuICB8IElnbm9yZWRfcmVhZGVyICAgICAgICAgICAgICAgICAgLT4gYXNzZXJ0IGZhbHNlXG4gIHwgSWdub3JlZF9zY2FuX2NoYXJfc2V0IF8gICAgICAgICAtPiBtYWtlX2ludmFsaWRfYXJnIGsgbyBhY2MgZm10XG4gIHwgSWdub3JlZF9zY2FuX2dldF9jb3VudGVyIF8gICAgICAtPiBtYWtlX2ludmFsaWRfYXJnIGsgbyBhY2MgZm10XG4gIHwgSWdub3JlZF9zY2FuX25leHRfY2hhciAgICAgICAgICAtPiBtYWtlX2ludmFsaWRfYXJnIGsgbyBhY2MgZm10XG5cblxuKCogU3BlY2lhbCBjYXNlIG9mIHByaW50ZiBcIiVfKFwiLiAqKVxuYW5kIG1ha2VfZnJvbV9mbXR0eSA6IHR5cGUgeCB5IGEgYiBjIGQgZSBmIC5cbiAgICAoYiAtPiAoYiwgYykgYWNjIC0+IGYpIC0+IGIgLT4gKGIsIGMpIGFjYyAtPlxuICAgIChhLCBiLCBjLCBkLCB5LCB4KSBmbXR0eSAtPlxuICAgICh4LCBiLCBjLCB5LCBlLCBmKSBmbXQgLT4gYSA9XG5mdW4gayBvIGFjYyBmbXR0eSBmbXQgLT4gbWF0Y2ggZm10dHkgd2l0aFxuICB8IENoYXJfdHkgcmVzdCAgICAgICAgICAgIC0+IGZ1biBfIC0+IG1ha2VfZnJvbV9mbXR0eSBrIG8gYWNjIHJlc3QgZm10XG4gIHwgU3RyaW5nX3R5IHJlc3QgICAgICAgICAgLT4gZnVuIF8gLT4gbWFrZV9mcm9tX2ZtdHR5IGsgbyBhY2MgcmVzdCBmbXRcbiAgfCBJbnRfdHkgcmVzdCAgICAgICAgICAgICAtPiBmdW4gXyAtPiBtYWtlX2Zyb21fZm10dHkgayBvIGFjYyByZXN0IGZtdFxuICB8IEludDMyX3R5IHJlc3QgICAgICAgICAgIC0+IGZ1biBfIC0+IG1ha2VfZnJvbV9mbXR0eSBrIG8gYWNjIHJlc3QgZm10XG4gIHwgTmF0aXZlaW50X3R5IHJlc3QgICAgICAgLT4gZnVuIF8gLT4gbWFrZV9mcm9tX2ZtdHR5IGsgbyBhY2MgcmVzdCBmbXRcbiAgfCBJbnQ2NF90eSByZXN0ICAgICAgICAgICAtPiBmdW4gXyAtPiBtYWtlX2Zyb21fZm10dHkgayBvIGFjYyByZXN0IGZtdFxuICB8IEZsb2F0X3R5IHJlc3QgICAgICAgICAgIC0+IGZ1biBfIC0+IG1ha2VfZnJvbV9mbXR0eSBrIG8gYWNjIHJlc3QgZm10XG4gIHwgQm9vbF90eSByZXN0ICAgICAgICAgICAgLT4gZnVuIF8gLT4gbWFrZV9mcm9tX2ZtdHR5IGsgbyBhY2MgcmVzdCBmbXRcbiAgfCBBbHBoYV90eSByZXN0ICAgICAgICAgICAtPiBmdW4gXyBfIC0+IG1ha2VfZnJvbV9mbXR0eSBrIG8gYWNjIHJlc3QgZm10XG4gIHwgVGhldGFfdHkgcmVzdCAgICAgICAgICAgLT4gZnVuIF8gLT4gbWFrZV9mcm9tX2ZtdHR5IGsgbyBhY2MgcmVzdCBmbXRcbiAgfCBBbnlfdHkgcmVzdCAgICAgICAgICAgICAtPiBmdW4gXyAtPiBtYWtlX2Zyb21fZm10dHkgayBvIGFjYyByZXN0IGZtdFxuICB8IFJlYWRlcl90eSBfICAgICAgICAgICAgIC0+IGFzc2VydCBmYWxzZVxuICB8IElnbm9yZWRfcmVhZGVyX3R5IF8gICAgIC0+IGFzc2VydCBmYWxzZVxuICB8IEZvcm1hdF9hcmdfdHkgKF8sIHJlc3QpIC0+IGZ1biBfIC0+IG1ha2VfZnJvbV9mbXR0eSBrIG8gYWNjIHJlc3QgZm10XG4gIHwgRW5kX29mX2ZtdHR5ICAgICAgICAgICAgLT4gbWFrZV9pbnZhbGlkX2FyZyBrIG8gYWNjIGZtdFxuICB8IEZvcm1hdF9zdWJzdF90eSAodHkxLCB0eTIsIHJlc3QpIC0+XG4gICAgbGV0IHR5ID0gdHJhbnMgKHN5bW0gdHkxKSB0eTIgaW5cbiAgICBmdW4gXyAtPiBtYWtlX2Zyb21fZm10dHkgayBvIGFjYyAoY29uY2F0X2ZtdHR5IHR5IHJlc3QpIGZtdFxuXG4oKiBJbnNlcnQgYW4gQWNjX2ludmFsaWRfYXJnIGluIHRoZSBhY2N1bXVsYXRvciBhbmQgY29udGludWUgdG8gZ2VuZXJhdGVcbiAgIGNsb3N1cmVzIHRvIGdldCB0aGUgcmVtYWluaW5nIGFyZ3VtZW50cy4gKilcbmFuZCBtYWtlX2ludmFsaWRfYXJnIDogdHlwZSBhIGIgYyBkIGUgZiAuXG4gICAgKGIgLT4gKGIsIGMpIGFjYyAtPiBmKSAtPiBiIC0+IChiLCBjKSBhY2MgLT5cbiAgICAoYSwgYiwgYywgZCwgZSwgZikgZm10IC0+IGEgPVxuZnVuIGsgbyBhY2MgZm10IC0+XG4gIG1ha2VfcHJpbnRmIGsgbyAoQWNjX2ludmFsaWRfYXJnIChhY2MsIFwiUHJpbnRmOiBiYWQgY29udmVyc2lvbiAlX1wiKSkgZm10XG5cbigqIEZpeCBwYWRkaW5nLCB0YWtlIGl0IGFzIGFuIGV4dHJhIGludGVnZXIgYXJndW1lbnQgaWYgbmVlZGVkLiAqKVxuYW5kIG1ha2Vfc3RyaW5nX3BhZGRpbmcgOiB0eXBlIHggeiBhIGIgYyBkIGUgZiAuXG4gICAgKGIgLT4gKGIsIGMpIGFjYyAtPiBmKSAtPiBiIC0+IChiLCBjKSBhY2MgLT5cbiAgICAoYSwgYiwgYywgZCwgZSwgZikgZm10IC0+XG4gICAgKHgsIHogLT4gYSkgcGFkZGluZyAtPiAoeiAtPiBzdHJpbmcpIC0+IHggPVxuICBmdW4gayBvIGFjYyBmbXQgcGFkIHRyYW5zIC0+IG1hdGNoIHBhZCB3aXRoXG4gIHwgTm9fcGFkZGluZyAtPlxuICAgIGZ1biB4IC0+XG4gICAgICBsZXQgbmV3X2FjYyA9IEFjY19kYXRhX3N0cmluZyAoYWNjLCB0cmFucyB4KSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIG5ld19hY2MgZm10XG4gIHwgTGl0X3BhZGRpbmcgKHBhZHR5LCB3aWR0aCkgLT5cbiAgICBmdW4geCAtPlxuICAgICAgbGV0IG5ld19hY2MgPSBBY2NfZGF0YV9zdHJpbmcgKGFjYywgZml4X3BhZGRpbmcgcGFkdHkgd2lkdGggKHRyYW5zIHgpKSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIG5ld19hY2MgZm10XG4gIHwgQXJnX3BhZGRpbmcgcGFkdHkgLT5cbiAgICBmdW4gdyB4IC0+XG4gICAgICBsZXQgbmV3X2FjYyA9IEFjY19kYXRhX3N0cmluZyAoYWNjLCBmaXhfcGFkZGluZyBwYWR0eSB3ICh0cmFucyB4KSkgaW5cbiAgICAgIG1ha2VfcHJpbnRmIGsgbyBuZXdfYWNjIGZtdFxuXG4oKiBGaXggcGFkZGluZyBhbmQgcHJlY2lzaW9uIGZvciBpbnQsIGludDMyLCBuYXRpdmVpbnQgb3IgaW50NjQuICopXG4oKiBUYWtlIG9uZSBvciB0d28gZXh0cmEgaW50ZWdlciBhcmd1bWVudHMgaWYgbmVlZGVkLiAqKVxuYW5kIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uIDogdHlwZSB4IHkgeiBhIGIgYyBkIGUgZiAuXG4gICAgKGIgLT4gKGIsIGMpIGFjYyAtPiBmKSAtPiBiIC0+IChiLCBjKSBhY2MgLT5cbiAgICAoYSwgYiwgYywgZCwgZSwgZikgZm10IC0+XG4gICAgKHgsIHkpIHBhZGRpbmcgLT4gKHksIHogLT4gYSkgcHJlY2lzaW9uIC0+IChpbnRfY29udiAtPiB6IC0+IHN0cmluZykgLT5cbiAgICBpbnRfY29udiAtPiB4ID1cbiAgZnVuIGsgbyBhY2MgZm10IHBhZCBwcmVjIHRyYW5zIGljb252IC0+IG1hdGNoIHBhZCwgcHJlYyB3aXRoXG4gIHwgTm9fcGFkZGluZywgTm9fcHJlY2lzaW9uIC0+XG4gICAgZnVuIHggLT5cbiAgICAgIGxldCBzdHIgPSB0cmFucyBpY29udiB4IGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBOb19wYWRkaW5nLCBMaXRfcHJlY2lzaW9uIHAgLT5cbiAgICBmdW4geCAtPlxuICAgICAgbGV0IHN0ciA9IGZpeF9pbnRfcHJlY2lzaW9uIHAgKHRyYW5zIGljb252IHgpIGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBOb19wYWRkaW5nLCBBcmdfcHJlY2lzaW9uIC0+XG4gICAgZnVuIHAgeCAtPlxuICAgICAgbGV0IHN0ciA9IGZpeF9pbnRfcHJlY2lzaW9uIHAgKHRyYW5zIGljb252IHgpIGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBMaXRfcGFkZGluZyAocGFkdHksIHcpLCBOb19wcmVjaXNpb24gLT5cbiAgICBmdW4geCAtPlxuICAgICAgbGV0IHN0ciA9IGZpeF9wYWRkaW5nIHBhZHR5IHcgKHRyYW5zIGljb252IHgpIGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBMaXRfcGFkZGluZyAocGFkdHksIHcpLCBMaXRfcHJlY2lzaW9uIHAgLT5cbiAgICBmdW4geCAtPlxuICAgICAgbGV0IHN0ciA9IGZpeF9wYWRkaW5nIHBhZHR5IHcgKGZpeF9pbnRfcHJlY2lzaW9uIHAgKHRyYW5zIGljb252IHgpKSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIChBY2NfZGF0YV9zdHJpbmcgKGFjYywgc3RyKSkgZm10XG4gIHwgTGl0X3BhZGRpbmcgKHBhZHR5LCB3KSwgQXJnX3ByZWNpc2lvbiAtPlxuICAgIGZ1biBwIHggLT5cbiAgICAgIGxldCBzdHIgPSBmaXhfcGFkZGluZyBwYWR0eSB3IChmaXhfaW50X3ByZWNpc2lvbiBwICh0cmFucyBpY29udiB4KSkgaW5cbiAgICAgIG1ha2VfcHJpbnRmIGsgbyAoQWNjX2RhdGFfc3RyaW5nIChhY2MsIHN0cikpIGZtdFxuICB8IEFyZ19wYWRkaW5nIHBhZHR5LCBOb19wcmVjaXNpb24gLT5cbiAgICBmdW4gdyB4IC0+XG4gICAgICBsZXQgc3RyID0gZml4X3BhZGRpbmcgcGFkdHkgdyAodHJhbnMgaWNvbnYgeCkgaW5cbiAgICAgIG1ha2VfcHJpbnRmIGsgbyAoQWNjX2RhdGFfc3RyaW5nIChhY2MsIHN0cikpIGZtdFxuICB8IEFyZ19wYWRkaW5nIHBhZHR5LCBMaXRfcHJlY2lzaW9uIHAgLT5cbiAgICBmdW4gdyB4IC0+XG4gICAgICBsZXQgc3RyID0gZml4X3BhZGRpbmcgcGFkdHkgdyAoZml4X2ludF9wcmVjaXNpb24gcCAodHJhbnMgaWNvbnYgeCkpIGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBBcmdfcGFkZGluZyBwYWR0eSwgQXJnX3ByZWNpc2lvbiAtPlxuICAgIGZ1biB3IHAgeCAtPlxuICAgICAgbGV0IHN0ciA9IGZpeF9wYWRkaW5nIHBhZHR5IHcgKGZpeF9pbnRfcHJlY2lzaW9uIHAgKHRyYW5zIGljb252IHgpKSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIChBY2NfZGF0YV9zdHJpbmcgKGFjYywgc3RyKSkgZm10XG5cbigqIENvbnZlcnQgYSBmbG9hdCwgZml4IHBhZGRpbmcgYW5kIHByZWNpc2lvbiBpZiBuZWVkZWQuICopXG4oKiBUYWtlIHRoZSBmbG9hdCBhcmd1bWVudCBhbmQgb25lIG9yIHR3byBleHRyYSBpbnRlZ2VyIGFyZ3VtZW50cyBpZiBuZWVkZWQuICopXG5hbmQgbWFrZV9mbG9hdF9wYWRkaW5nX3ByZWNpc2lvbiA6IHR5cGUgeCB5IGEgYiBjIGQgZSBmIC5cbiAgICAoYiAtPiAoYiwgYykgYWNjIC0+IGYpIC0+IGIgLT4gKGIsIGMpIGFjYyAtPlxuICAgIChhLCBiLCBjLCBkLCBlLCBmKSBmbXQgLT5cbiAgICAoeCwgeSkgcGFkZGluZyAtPiAoeSwgZmxvYXQgLT4gYSkgcHJlY2lzaW9uIC0+IGZsb2F0X2NvbnYgLT4geCA9XG4gIGZ1biBrIG8gYWNjIGZtdCBwYWQgcHJlYyBmY29udiAtPiBtYXRjaCBwYWQsIHByZWMgd2l0aFxuICB8IE5vX3BhZGRpbmcsIE5vX3ByZWNpc2lvbiAtPlxuICAgIGZ1biB4IC0+XG4gICAgICBsZXQgc3RyID0gY29udmVydF9mbG9hdCBmY29udiBkZWZhdWx0X2Zsb2F0X3ByZWNpc2lvbiB4IGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBOb19wYWRkaW5nLCBMaXRfcHJlY2lzaW9uIHAgLT5cbiAgICBmdW4geCAtPlxuICAgICAgbGV0IHN0ciA9IGNvbnZlcnRfZmxvYXQgZmNvbnYgcCB4IGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBOb19wYWRkaW5nLCBBcmdfcHJlY2lzaW9uIC0+XG4gICAgZnVuIHAgeCAtPlxuICAgICAgbGV0IHN0ciA9IGNvbnZlcnRfZmxvYXQgZmNvbnYgcCB4IGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBMaXRfcGFkZGluZyAocGFkdHksIHcpLCBOb19wcmVjaXNpb24gLT5cbiAgICBmdW4geCAtPlxuICAgICAgbGV0IHN0ciA9IGNvbnZlcnRfZmxvYXQgZmNvbnYgZGVmYXVsdF9mbG9hdF9wcmVjaXNpb24geCBpblxuICAgICAgbGV0IHN0cicgPSBmaXhfcGFkZGluZyBwYWR0eSB3IHN0ciBpblxuICAgICAgbWFrZV9wcmludGYgayBvIChBY2NfZGF0YV9zdHJpbmcgKGFjYywgc3RyJykpIGZtdFxuICB8IExpdF9wYWRkaW5nIChwYWR0eSwgdyksIExpdF9wcmVjaXNpb24gcCAtPlxuICAgIGZ1biB4IC0+XG4gICAgICBsZXQgc3RyID0gZml4X3BhZGRpbmcgcGFkdHkgdyAoY29udmVydF9mbG9hdCBmY29udiBwIHgpIGluXG4gICAgICBtYWtlX3ByaW50ZiBrIG8gKEFjY19kYXRhX3N0cmluZyAoYWNjLCBzdHIpKSBmbXRcbiAgfCBMaXRfcGFkZGluZyAocGFkdHksIHcpLCBBcmdfcHJlY2lzaW9uIC0+XG4gICAgZnVuIHAgeCAtPlxuICAgICAgbGV0IHN0ciA9IGZpeF9wYWRkaW5nIHBhZHR5IHcgKGNvbnZlcnRfZmxvYXQgZmNvbnYgcCB4KSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIChBY2NfZGF0YV9zdHJpbmcgKGFjYywgc3RyKSkgZm10XG4gIHwgQXJnX3BhZGRpbmcgcGFkdHksIE5vX3ByZWNpc2lvbiAtPlxuICAgIGZ1biB3IHggLT5cbiAgICAgIGxldCBzdHIgPSBjb252ZXJ0X2Zsb2F0IGZjb252IGRlZmF1bHRfZmxvYXRfcHJlY2lzaW9uIHggaW5cbiAgICAgIGxldCBzdHInID0gZml4X3BhZGRpbmcgcGFkdHkgdyBzdHIgaW5cbiAgICAgIG1ha2VfcHJpbnRmIGsgbyAoQWNjX2RhdGFfc3RyaW5nIChhY2MsIHN0cicpKSBmbXRcbiAgfCBBcmdfcGFkZGluZyBwYWR0eSwgTGl0X3ByZWNpc2lvbiBwIC0+XG4gICAgZnVuIHcgeCAtPlxuICAgICAgbGV0IHN0ciA9IGZpeF9wYWRkaW5nIHBhZHR5IHcgKGNvbnZlcnRfZmxvYXQgZmNvbnYgcCB4KSBpblxuICAgICAgbWFrZV9wcmludGYgayBvIChBY2NfZGF0YV9zdHJpbmcgKGFjYywgc3RyKSkgZm10XG4gIHwgQXJnX3BhZGRpbmcgcGFkdHksIEFyZ19wcmVjaXNpb24gLT5cbiAgICBmdW4gdyBwIHggLT5cbiAgICAgIGxldCBzdHIgPSBmaXhfcGFkZGluZyBwYWR0eSB3IChjb252ZXJ0X2Zsb2F0IGZjb252IHAgeCkgaW5cbiAgICAgIG1ha2VfcHJpbnRmIGsgbyAoQWNjX2RhdGFfc3RyaW5nIChhY2MsIHN0cikpIGZtdFxuXG5hbmQgbWFrZV9jdXN0b20gOiB0eXBlIHggeSBhIGIgYyBkIGUgZiAuXG4gIChiIC0+IChiLCBjKSBhY2MgLT4gZikgLT4gYiAtPiAoYiwgYykgYWNjIC0+XG4gIChhLCBiLCBjLCBkLCBlLCBmKSBmbXQgLT5cbiAgKGEsIHgsIHkpIGN1c3RvbV9hcml0eSAtPiB4IC0+IHkgPVxuICBmdW4gayBvIGFjYyByZXN0IGFyaXR5IGYgLT4gbWF0Y2ggYXJpdHkgd2l0aFxuICB8IEN1c3RvbV96ZXJvIC0+IG1ha2VfcHJpbnRmIGsgbyAoQWNjX2RhdGFfc3RyaW5nIChhY2MsIGYpKSByZXN0XG4gIHwgQ3VzdG9tX3N1Y2MgYXJpdHkgLT5cbiAgICBmdW4geCAtPlxuICAgICAgbWFrZV9jdXN0b20gayBvIGFjYyByZXN0IGFyaXR5IChmIHgpXG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgqIENvbnRpbnVhdGlvbnMgZm9yIG1ha2VfcHJpbnRmICopXG5cbigqIFJlY3Vyc2l2ZWx5IG91dHB1dCBhbiBcImFjY3VtdWxhdG9yXCIgY29udGFpbmluZyBhIHJldmVyc2VkIGxpc3Qgb2ZcbiAgIHByaW50aW5nIGVudGl0aWVzIChzdHJpbmcsIGNoYXIsIGZsdXMsIC4uLikgaW4gYW4gb3V0cHV0X3N0cmVhbS4gKilcbigqIFVzZWQgYXMgYSBjb250aW51YXRpb24gb2YgbWFrZV9wcmludGYuICopXG5sZXQgcmVjIG91dHB1dF9hY2MgbyBhY2MgPSBtYXRjaCBhY2Mgd2l0aFxuICB8IEFjY19mb3JtYXR0aW5nX2xpdCAocCwgZm10aW5nX2xpdCkgLT5cbiAgICBsZXQgcyA9IHN0cmluZ19vZl9mb3JtYXR0aW5nX2xpdCBmbXRpbmdfbGl0IGluXG4gICAgb3V0cHV0X2FjYyBvIHA7IG91dHB1dF9zdHJpbmcgbyBzO1xuICB8IEFjY19mb3JtYXR0aW5nX2dlbiAocCwgQWNjX29wZW5fdGFnIGFjYycpIC0+XG4gICAgb3V0cHV0X2FjYyBvIHA7IG91dHB1dF9zdHJpbmcgbyBcIkB7XCI7IG91dHB1dF9hY2MgbyBhY2MnO1xuICB8IEFjY19mb3JtYXR0aW5nX2dlbiAocCwgQWNjX29wZW5fYm94IGFjYycpIC0+XG4gICAgb3V0cHV0X2FjYyBvIHA7IG91dHB1dF9zdHJpbmcgbyBcIkBbXCI7IG91dHB1dF9hY2MgbyBhY2MnO1xuICB8IEFjY19zdHJpbmdfbGl0ZXJhbCAocCwgcylcbiAgfCBBY2NfZGF0YV9zdHJpbmcgKHAsIHMpICAgLT4gb3V0cHV0X2FjYyBvIHA7IG91dHB1dF9zdHJpbmcgbyBzXG4gIHwgQWNjX2NoYXJfbGl0ZXJhbCAocCwgYylcbiAgfCBBY2NfZGF0YV9jaGFyIChwLCBjKSAgICAgLT4gb3V0cHV0X2FjYyBvIHA7IG91dHB1dF9jaGFyIG8gY1xuICB8IEFjY19kZWxheSAocCwgZikgICAgICAgICAtPiBvdXRwdXRfYWNjIG8gcDsgZiBvXG4gIHwgQWNjX2ZsdXNoIHAgICAgICAgICAgICAgIC0+IG91dHB1dF9hY2MgbyBwOyBmbHVzaCBvXG4gIHwgQWNjX2ludmFsaWRfYXJnIChwLCBtc2cpIC0+IG91dHB1dF9hY2MgbyBwOyBpbnZhbGlkX2FyZyBtc2c7XG4gIHwgRW5kX29mX2FjYyAgICAgICAgICAgICAgIC0+ICgpXG5cbigqIFJlY3Vyc2l2ZWx5IG91dHB1dCBhbiBcImFjY3VtdWxhdG9yXCIgY29udGFpbmluZyBhIHJldmVyc2VkIGxpc3Qgb2ZcbiAgIHByaW50aW5nIGVudGl0aWVzIChzdHJpbmcsIGNoYXIsIGZsdXMsIC4uLikgaW4gYSBidWZmZXIuICopXG4oKiBVc2VkIGFzIGEgY29udGludWF0aW9uIG9mIG1ha2VfcHJpbnRmLiAqKVxubGV0IHJlYyBidWZwdXRfYWNjIGIgYWNjID0gbWF0Y2ggYWNjIHdpdGhcbiAgfCBBY2NfZm9ybWF0dGluZ19saXQgKHAsIGZtdGluZ19saXQpIC0+XG4gICAgbGV0IHMgPSBzdHJpbmdfb2ZfZm9ybWF0dGluZ19saXQgZm10aW5nX2xpdCBpblxuICAgIGJ1ZnB1dF9hY2MgYiBwOyBCdWZmZXIuYWRkX3N0cmluZyBiIHM7XG4gIHwgQWNjX2Zvcm1hdHRpbmdfZ2VuIChwLCBBY2Nfb3Blbl90YWcgYWNjJykgLT5cbiAgICBidWZwdXRfYWNjIGIgcDsgQnVmZmVyLmFkZF9zdHJpbmcgYiBcIkB7XCI7IGJ1ZnB1dF9hY2MgYiBhY2MnO1xuICB8IEFjY19mb3JtYXR0aW5nX2dlbiAocCwgQWNjX29wZW5fYm94IGFjYycpIC0+XG4gICAgYnVmcHV0X2FjYyBiIHA7IEJ1ZmZlci5hZGRfc3RyaW5nIGIgXCJAW1wiOyBidWZwdXRfYWNjIGIgYWNjJztcbiAgfCBBY2Nfc3RyaW5nX2xpdGVyYWwgKHAsIHMpXG4gIHwgQWNjX2RhdGFfc3RyaW5nIChwLCBzKSAgIC0+IGJ1ZnB1dF9hY2MgYiBwOyBCdWZmZXIuYWRkX3N0cmluZyBiIHNcbiAgfCBBY2NfY2hhcl9saXRlcmFsIChwLCBjKVxuICB8IEFjY19kYXRhX2NoYXIgKHAsIGMpICAgICAtPiBidWZwdXRfYWNjIGIgcDsgQnVmZmVyLmFkZF9jaGFyIGIgY1xuICB8IEFjY19kZWxheSAocCwgZikgICAgICAgICAtPiBidWZwdXRfYWNjIGIgcDsgZiBiXG4gIHwgQWNjX2ZsdXNoIHAgICAgICAgICAgICAgIC0+IGJ1ZnB1dF9hY2MgYiBwO1xuICB8IEFjY19pbnZhbGlkX2FyZyAocCwgbXNnKSAtPiBidWZwdXRfYWNjIGIgcDsgaW52YWxpZF9hcmcgbXNnO1xuICB8IEVuZF9vZl9hY2MgICAgICAgICAgICAgICAtPiAoKVxuXG4oKiBSZWN1cnNpdmVseSBvdXRwdXQgYW4gXCJhY2N1bXVsYXRvclwiIGNvbnRhaW5pbmcgYSByZXZlcnNlZCBsaXN0IG9mXG4gICBwcmludGluZyBlbnRpdGllcyAoc3RyaW5nLCBjaGFyLCBmbHVzLCAuLi4pIGluIGEgYnVmZmVyLiAqKVxuKCogRGlmZmVyIGZyb20gYnVmcHV0X2FjYyBieSB0aGUgaW50ZXJwcmV0YXRpb24gb2YgJWEgYW5kICV0LiAqKVxuKCogVXNlZCBhcyBhIGNvbnRpbnVhdGlvbiBvZiBtYWtlX3ByaW50Zi4gKilcbmxldCByZWMgc3RycHV0X2FjYyBiIGFjYyA9IG1hdGNoIGFjYyB3aXRoXG4gIHwgQWNjX2Zvcm1hdHRpbmdfbGl0IChwLCBmbXRpbmdfbGl0KSAtPlxuICAgIGxldCBzID0gc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0IGZtdGluZ19saXQgaW5cbiAgICBzdHJwdXRfYWNjIGIgcDsgQnVmZmVyLmFkZF9zdHJpbmcgYiBzO1xuICB8IEFjY19mb3JtYXR0aW5nX2dlbiAocCwgQWNjX29wZW5fdGFnIGFjYycpIC0+XG4gICAgc3RycHV0X2FjYyBiIHA7IEJ1ZmZlci5hZGRfc3RyaW5nIGIgXCJAe1wiOyBzdHJwdXRfYWNjIGIgYWNjJztcbiAgfCBBY2NfZm9ybWF0dGluZ19nZW4gKHAsIEFjY19vcGVuX2JveCBhY2MnKSAtPlxuICAgIHN0cnB1dF9hY2MgYiBwOyBCdWZmZXIuYWRkX3N0cmluZyBiIFwiQFtcIjsgc3RycHV0X2FjYyBiIGFjYyc7XG4gIHwgQWNjX3N0cmluZ19saXRlcmFsIChwLCBzKVxuICB8IEFjY19kYXRhX3N0cmluZyAocCwgcykgICAtPiBzdHJwdXRfYWNjIGIgcDsgQnVmZmVyLmFkZF9zdHJpbmcgYiBzXG4gIHwgQWNjX2NoYXJfbGl0ZXJhbCAocCwgYylcbiAgfCBBY2NfZGF0YV9jaGFyIChwLCBjKSAgICAgLT4gc3RycHV0X2FjYyBiIHA7IEJ1ZmZlci5hZGRfY2hhciBiIGNcbiAgfCBBY2NfZGVsYXkgKHAsIGYpICAgICAgICAgLT4gc3RycHV0X2FjYyBiIHA7IEJ1ZmZlci5hZGRfc3RyaW5nIGIgKGYgKCkpXG4gIHwgQWNjX2ZsdXNoIHAgICAgICAgICAgICAgIC0+IHN0cnB1dF9hY2MgYiBwO1xuICB8IEFjY19pbnZhbGlkX2FyZyAocCwgbXNnKSAtPiBzdHJwdXRfYWNjIGIgcDsgaW52YWxpZF9hcmcgbXNnO1xuICB8IEVuZF9vZl9hY2MgICAgICAgICAgICAgICAtPiAoKVxuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBFcnJvciBtYW5hZ21lbnQgKilcblxuKCogUmFpc2UgYSBGYWlsdXJlIHdpdGggYSBwcmV0dHktcHJpbnRlZCBlcnJvciBtZXNzYWdlLiAqKVxubGV0IGZhaWx3aXRoX21lc3NhZ2UgKEZvcm1hdCAoZm10LCBfKSkgPVxuICBsZXQgYnVmID0gQnVmZmVyLmNyZWF0ZSAyNTYgaW5cbiAgbGV0IGsgKCkgYWNjID0gc3RycHV0X2FjYyBidWYgYWNjOyBmYWlsd2l0aCAoQnVmZmVyLmNvbnRlbnRzIGJ1ZikgaW5cbiAgbWFrZV9wcmludGYgayAoKSBFbmRfb2ZfYWNjIGZtdFxuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEZvcm1hdHRpbmcgdG9vbHMgKilcblxuKCogQ29udmVydCBhIHN0cmluZyB0byBhbiBvcGVuIGJsb2NrIGRlc2NyaXB0aW9uIChpbmRlbnQsIGJsb2NrX3R5cGUpICopXG5sZXQgb3Blbl9ib3hfb2Zfc3RyaW5nIHN0ciA9XG4gIGlmIHN0ciA9IFwiXCIgdGhlbiAoMCwgUHBfYm94KSBlbHNlXG4gICAgbGV0IGxlbiA9IFN0cmluZy5sZW5ndGggc3RyIGluXG4gICAgbGV0IGludmFsaWRfYm94ICgpID0gZmFpbHdpdGhfbWVzc2FnZSBcImludmFsaWQgYm94IGRlc2NyaXB0aW9uICVTXCIgc3RyIGluXG4gICAgbGV0IHJlYyBwYXJzZV9zcGFjZXMgaSA9XG4gICAgICBpZiBpID0gbGVuIHRoZW4gaSBlbHNlXG4gICAgICAgIG1hdGNoIHN0ci5baV0gd2l0aFxuICAgICAgICB8ICcgJyB8ICdcXHQnIC0+IHBhcnNlX3NwYWNlcyAoaSArIDEpXG4gICAgICAgIHwgXyAtPiBpXG4gICAgYW5kIHBhcnNlX2x3b3JkIGkgaiA9XG4gICAgICBpZiBqID0gbGVuIHRoZW4gaiBlbHNlXG4gICAgICAgIG1hdGNoIHN0ci5bal0gd2l0aFxuICAgICAgICB8ICdhJyAuLiAneicgLT4gcGFyc2VfbHdvcmQgaSAoaiArIDEpXG4gICAgICAgIHwgXyAtPiBqXG4gICAgYW5kIHBhcnNlX2ludCBpIGogPVxuICAgICAgaWYgaiA9IGxlbiB0aGVuIGogZWxzZVxuICAgICAgICBtYXRjaCBzdHIuW2pdIHdpdGhcbiAgICAgICAgfCAnMCcgLi4gJzknIHwgJy0nIC0+IHBhcnNlX2ludCBpIChqICsgMSlcbiAgICAgICAgfCBfIC0+IGogaW5cbiAgICBsZXQgd3N0YXJ0ID0gcGFyc2Vfc3BhY2VzIDAgaW5cbiAgICBsZXQgd2VuZCA9IHBhcnNlX2x3b3JkIHdzdGFydCB3c3RhcnQgaW5cbiAgICBsZXQgYm94X25hbWUgPSBTdHJpbmcuc3ViIHN0ciB3c3RhcnQgKHdlbmQgLSB3c3RhcnQpIGluXG4gICAgbGV0IG5zdGFydCA9IHBhcnNlX3NwYWNlcyB3ZW5kIGluXG4gICAgbGV0IG5lbmQgPSBwYXJzZV9pbnQgbnN0YXJ0IG5zdGFydCBpblxuICAgIGxldCBpbmRlbnQgPVxuICAgICAgaWYgbnN0YXJ0ID0gbmVuZCB0aGVuIDAgZWxzZVxuICAgICAgICB0cnkgaW50X29mX3N0cmluZyAoU3RyaW5nLnN1YiBzdHIgbnN0YXJ0IChuZW5kIC0gbnN0YXJ0KSlcbiAgICAgICAgd2l0aCBGYWlsdXJlIF8gLT4gaW52YWxpZF9ib3ggKCkgaW5cbiAgICBsZXQgZXhwX2VuZCA9IHBhcnNlX3NwYWNlcyBuZW5kIGluXG4gICAgbGV0ICgpID0gaWYgZXhwX2VuZCA8PiBsZW4gdGhlbiBpbnZhbGlkX2JveCAoKSBpblxuICAgIGxldCBib3hfdHlwZSA9IG1hdGNoIGJveF9uYW1lIHdpdGhcbiAgICAgIHwgXCJcIiB8IFwiYlwiIC0+IFBwX2JveFxuICAgICAgfCBcImhcIiAgICAgIC0+IFBwX2hib3hcbiAgICAgIHwgXCJ2XCIgICAgICAtPiBQcF92Ym94XG4gICAgICB8IFwiaHZcIiAgICAgLT4gUHBfaHZib3hcbiAgICAgIHwgXCJob3ZcIiAgICAtPiBQcF9ob3Zib3hcbiAgICAgIHwgXyAgICAgICAgLT4gaW52YWxpZF9ib3ggKCkgaW5cbiAgICAoaW5kZW50LCBib3hfdHlwZSlcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBQYXJzaW5nIHRvb2xzICopXG5cbigqIENyZWF0ZSBhIHBhZGRpbmdfZm10X2ViYiBmcm9tIGEgcGFkZGluZyBhbmQgYSBmb3JtYXQuICopXG4oKiBDb3B5IHRoZSBwYWRkaW5nIHRvIGRpc2pvaW4gdGhlIHR5cGUgcGFyYW1ldGVycyBvZiBhcmd1bWVudCBhbmQgcmVzdWx0LiAqKVxubGV0IG1ha2VfcGFkZGluZ19mbXRfZWJiIDogdHlwZSB4IHkgLlxuICAgICh4LCB5KSBwYWRkaW5nIC0+IChfLCBfLCBfLCBfLCBfLCBfKSBmbXQgLT5cbiAgICAgIChfLCBfLCBfLCBfLCBfKSBwYWRkaW5nX2ZtdF9lYmIgPVxuZnVuIHBhZCBmbXQgLT4gbWF0Y2ggcGFkIHdpdGhcbiAgfCBOb19wYWRkaW5nICAgICAgICAgLT4gUGFkZGluZ19mbXRfRUJCIChOb19wYWRkaW5nLCBmbXQpXG4gIHwgTGl0X3BhZGRpbmcgKHMsIHcpIC0+IFBhZGRpbmdfZm10X0VCQiAoTGl0X3BhZGRpbmcgKHMsIHcpLCBmbXQpXG4gIHwgQXJnX3BhZGRpbmcgcyAgICAgIC0+IFBhZGRpbmdfZm10X0VCQiAoQXJnX3BhZGRpbmcgcywgZm10KVxuXG4oKiBDcmVhdGUgYSBwcmVjaXNpb25fZm10X2ViYiBmcm9tIGEgcHJlY2lzaW9uIGFuZCBhIGZvcm1hdC4gKilcbigqIENvcHkgdGhlIHByZWNpc2lvbiB0byBkaXNqb2luIHRoZSB0eXBlIHBhcmFtZXRlcnMgb2YgYXJndW1lbnQgYW5kIHJlc3VsdC4gKilcbmxldCBtYWtlX3ByZWNpc2lvbl9mbXRfZWJiIDogdHlwZSB4IHkgLlxuICAgICh4LCB5KSBwcmVjaXNpb24gLT4gKF8sIF8sIF8sIF8sIF8sIF8pIGZtdCAtPlxuICAgICAgKF8sIF8sIF8sIF8sIF8pIHByZWNpc2lvbl9mbXRfZWJiID1cbmZ1biBwcmVjIGZtdCAtPiBtYXRjaCBwcmVjIHdpdGhcbiAgfCBOb19wcmVjaXNpb24gICAgLT4gUHJlY2lzaW9uX2ZtdF9FQkIgKE5vX3ByZWNpc2lvbiwgZm10KVxuICB8IExpdF9wcmVjaXNpb24gcCAtPiBQcmVjaXNpb25fZm10X0VCQiAoTGl0X3ByZWNpc2lvbiBwLCBmbXQpXG4gIHwgQXJnX3ByZWNpc2lvbiAgIC0+IFByZWNpc2lvbl9mbXRfRUJCIChBcmdfcHJlY2lzaW9uLCBmbXQpXG5cbigqIENyZWF0ZSBhIHBhZHByZWNfZm10X2ViYiBmb3JtYSBhIHBhZGRpbmcsIGEgcHJlY2lzaW9uIGFuZCBhIGZvcm1hdC4gKilcbigqIENvcHkgdGhlIHBhZGRpbmcgYW5kIHRoZSBwcmVjaXNpb24gdG8gZGlzam9pbiB0eXBlIHBhcmFtZXRlcnMgb2YgYXJndW1lbnRzXG4gICBhbmQgcmVzdWx0LiAqKVxubGV0IG1ha2VfcGFkcHJlY19mbXRfZWJiIDogdHlwZSB4IHkgeiB0IC5cbiAgICAoeCwgeSkgcGFkZGluZyAtPiAoeiwgdCkgcHJlY2lzaW9uIC0+XG4gICAgKF8sIF8sIF8sIF8sIF8sIF8pIGZtdCAtPlxuICAgIChfLCBfLCBfLCBfLCBfKSBwYWRwcmVjX2ZtdF9lYmIgPVxuZnVuIHBhZCBwcmVjIGZtdCAtPlxuICBsZXQgUHJlY2lzaW9uX2ZtdF9FQkIgKHByZWMsIGZtdCcpID0gbWFrZV9wcmVjaXNpb25fZm10X2ViYiBwcmVjIGZtdCBpblxuICBtYXRjaCBwYWQgd2l0aFxuICB8IE5vX3BhZGRpbmcgICAgICAgICAtPiBQYWRwcmVjX2ZtdF9FQkIgKE5vX3BhZGRpbmcsIHByZWMsIGZtdCcpXG4gIHwgTGl0X3BhZGRpbmcgKHMsIHcpIC0+IFBhZHByZWNfZm10X0VCQiAoTGl0X3BhZGRpbmcgKHMsIHcpLCBwcmVjLCBmbXQnKVxuICB8IEFyZ19wYWRkaW5nIHMgICAgICAtPiBQYWRwcmVjX2ZtdF9FQkIgKEFyZ19wYWRkaW5nIHMsIHByZWMsIGZtdCcpXG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEZvcm1hdCBwYXJzaW5nICopXG5cbigqIFBhcnNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhIGZvcm1hdCBhbmQgY3JlYXRlIGEgZm10X2ViYi4gKilcbigqIFJhaXNlIGFuIEZhaWx1cmUgZXhjZXB0aW9uIGluIGNhc2Ugb2YgaW52YWxpZCBmb3JtYXQuICopXG5sZXQgZm10X2ViYl9vZl9zdHJpbmcgP2xlZ2FjeV9iZWhhdmlvciBzdHIgPVxuICAoKiBQYXJhbWV0ZXJzIG5hbWluZyBjb252ZW50aW9uOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4gICgqICAgLSBsaXRfc3RhcnQ6IHN0YXJ0IG9mIHRoZSBsaXRlcmFsIHNlcXVlbmNlLiAgICAgICAgICAgICAgICAgICAgKilcbiAgKCogICAtIHN0cl9pbmQ6IGN1cnJlbnQgaW5kZXggaW4gdGhlIHN0cmluZy4gICAgICAgICAgICAgICAgICAgICAgICAqKVxuICAoKiAgIC0gZW5kX2luZDogZW5kIG9mIHRoZSBjdXJyZW50IChzdWItKWZvcm1hdC4gICAgICAgICAgICAgICAgICAgICopXG4gICgqICAgLSBwY3RfaW5kOiBpbmRleCBvZiB0aGUgJyUnIGluIHRoZSBjdXJyZW50IG1pY3JvLWZvcm1hdC4gICAgICAgKilcbiAgKCogICAtIHplcm86ICBpcyB0aGUgJzAnIGZsYWcgZGVmaW5lZCBpbiB0aGUgY3VycmVudCBtaWNyby1mb3JtYXQuICAqKVxuICAoKiAgIC0gbWludXM6IGlzIHRoZSAnLScgZmxhZyBkZWZpbmVkIGluIHRoZSBjdXJyZW50IG1pY3JvLWZvcm1hdC4gICopXG4gICgqICAgLSBwbHVzOiAgaXMgdGhlICcrJyBmbGFnIGRlZmluZWQgaW4gdGhlIGN1cnJlbnQgbWljcm8tZm9ybWF0LiAgKilcbiAgKCogICAtIHNoYXJwOiBpcyB0aGUgJyMnIGZsYWcgZGVmaW5lZCBpbiB0aGUgY3VycmVudCBtaWNyby1mb3JtYXQuICAqKVxuICAoKiAgIC0gc3BhY2U6IGlzIHRoZSAnICcgZmxhZyBkZWZpbmVkIGluIHRoZSBjdXJyZW50IG1pY3JvLWZvcm1hdC4gICopXG4gICgqICAgLSBpZ246ICAgaXMgdGhlICdfJyBmbGFnIGRlZmluZWQgaW4gdGhlIGN1cnJlbnQgbWljcm8tZm9ybWF0LiAgKilcbiAgKCogICAtIHBhZDogcGFkZGluZyBvZiB0aGUgY3VycmVudCBtaWNyby1mb3JtYXQuICAgICAgICAgICAgICAgICAgICAqKVxuICAoKiAgIC0gcHJlYzogcHJlY2lzaW9uIG9mIHRoZSBjdXJyZW50IG1pY3JvLWZvcm1hdC4gICAgICAgICAgICAgICAgICopXG4gICgqICAgLSBzeW1iOiBjaGFyIHJlcHJlc2VudGluZyB0aGUgY29udmVyc2lvbiAoJ2MnLCAncycsICdkJywgLi4uKS4gKilcbiAgKCogICAtIGNoYXJfc2V0OiBzZXQgb2YgY2hhcmFjdGVycyBhcyBiaXRtYXAgKHNlZSBzY2FuZiAlWy4uLl0pLiAgICAqKVxuXG4gIGxldCBsZWdhY3lfYmVoYXZpb3IgPSBtYXRjaCBsZWdhY3lfYmVoYXZpb3Igd2l0aFxuICAgIHwgU29tZSBmbGFnIC0+IGZsYWdcbiAgICB8IE5vbmUgLT4gdHJ1ZVxuICAoKiAgV2hlbiB0aGlzIGZsYWcgaXMgZW5hYmxlZCwgdGhlIGZvcm1hdCBwYXJzZXIgdHJpZXMgdG8gYmVoYXZlIGFzXG4gICAgICB0aGUgPDQuMDIgaW1wbGVtZW50YXRpb25zLCBpbiBwYXJ0aWN1bGFyIGl0IGlnbm9yZXMgbW9zdCBiZW5pbmVcbiAgICAgIG5vbnNlbnNpY2FsIGZvcm1hdC4gV2hlbiB0aGUgZmxhZyBpcyBkaXNhYmxlZCwgaXQgd2lsbCByZWplY3QgYW55XG4gICAgICBmb3JtYXQgdGhhdCBpcyBub3QgYWNjZXB0ZWQgYnkgdGhlIHNwZWNpZmljYXRpb24uXG5cbiAgICAgIEEgdHlwaWNhbCBleGFtcGxlIHdvdWxkIGJlIFwiJSsgZFwiOiBzcGVjaWZ5aW5nIGJvdGggJysnIChpZiB0aGVcbiAgICAgIG51bWJlciBpcyBwb3NpdGl2ZSwgcGFkIHdpdGggYSAnKycgdG8gZ2V0IHRoZSBzYW1lIHdpZHRoIGFzXG4gICAgICBuZWdhdGl2ZSBudW1icmVzKSBhbmQgJyAnIChpZiB0aGUgbnVtYmVyIGlzIHBvc2l0aXZlLCBwYWQgd2l0aFxuICAgICAgYSBzcGFjZSkgZG9lcyBub3QgbWFrZSBzZW5zZSwgYnV0IHRoZSBsZWdhY3kgKDwgNC4wMilcbiAgICAgIGltcGxlbWVudGF0aW9uIHdhcyBoYXBweSB0byBqdXN0IGlnbm9yZSB0aGUgc3BhY2UuXG4gICopXG4gIGluXG5cbiAgKCogUmFpc2UgYSBGYWlsdXJlIHdpdGggYSBmcmllbmRseSBlcnJvciBtZXNzYWdlLiAqKVxuICBsZXQgaW52YWxpZF9mb3JtYXRfbWVzc2FnZSBzdHJfaW5kIG1zZyA9XG4gICAgZmFpbHdpdGhfbWVzc2FnZVxuICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogYXQgY2hhcmFjdGVyIG51bWJlciAlZCwgJXNcIlxuICAgICAgc3RyIHN0cl9pbmQgbXNnO1xuICBpblxuXG4gICgqIFVzZWQgd2hlbiB0aGUgZW5kIG9mIHRoZSBmb3JtYXQgKG9yIHRoZSBjdXJyZW50IHN1Yi1mb3JtYXQpIHdhcyBlbmNvdXRlcmVkXG4gICAgICB1bmV4cGVjdGVkbHkuICopXG4gIGxldCB1bmV4cGVjdGVkX2VuZF9vZl9mb3JtYXQgZW5kX2luZCA9XG4gICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZSBlbmRfaW5kXG4gICAgICBcInVuZXhwZWN0ZWQgZW5kIG9mIGZvcm1hdFwiXG4gIGluXG5cbiAgKCogVXNlZCBmb3IgJTBjOiBubyBvdGhlciB3aWR0aHMgYXJlIGltcGxlbWVudGVkICopXG4gIGxldCBpbnZhbGlkX25vbm51bGxfY2hhcl93aWR0aCBzdHJfaW5kID1cbiAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlIHN0cl9pbmRcbiAgICAgIFwibm9uLXplcm8gd2lkdGhzIGFyZSB1bnN1cHBvcnRlZCBmb3IgJWMgY29udmVyc2lvbnNcIlxuICBpblxuICAoKiBSYWlzZSBGYWlsdXJlIHdpdGggYSBmcmllbmRseSBlcnJvciBtZXNzYWdlIGFib3V0IGFuIG9wdGlvbiBkZXBlbmRlbmNpZVxuICAgICBwcm9ibGVtLiAqKVxuICBsZXQgaW52YWxpZF9mb3JtYXRfd2l0aG91dCBzdHJfaW5kIGMgcyA9XG4gICAgZmFpbHdpdGhfbWVzc2FnZVxuICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogYXQgY2hhcmFjdGVyIG51bWJlciAlZCwgJyVjJyB3aXRob3V0ICVzXCJcbiAgICAgIHN0ciBzdHJfaW5kIGMgc1xuICBpblxuXG4gICgqIFJhaXNlIEZhaWx1cmUgd2l0aCBhIGZyaWVuZGx5IGVycm9yIG1lc3NhZ2UgYWJvdXQgYW4gdW5leHBlY3RlZFxuICAgICBjaGFyYWN0ZXIuICopXG4gIGxldCBleHBlY3RlZF9jaGFyYWN0ZXIgc3RyX2luZCBleHBlY3RlZCByZWFkID1cbiAgICBmYWlsd2l0aF9tZXNzYWdlXG4gICAgIFwiaW52YWxpZCBmb3JtYXQgJVM6IGF0IGNoYXJhY3RlciBudW1iZXIgJWQsICVzIGV4cGVjdGVkLCByZWFkICVDXCJcbiAgICAgIHN0ciBzdHJfaW5kIGV4cGVjdGVkIHJlYWRcbiAgaW5cblxuICAoKiBQYXJzZSB0aGUgc3RyaW5nIGZyb20gYmVnX2luZCAoaW5jbHVkZWQpIHRvIGVuZF9pbmQgKGV4Y2x1ZGVkKS4gKilcbiAgbGV0IHJlYyBwYXJzZSA6IHR5cGUgZSBmIC4gaW50IC0+IGludCAtPiAoXywgXywgZSwgZikgZm10X2ViYiA9XG4gIGZ1biBiZWdfaW5kIGVuZF9pbmQgLT4gcGFyc2VfbGl0ZXJhbCBiZWdfaW5kIGJlZ19pbmQgZW5kX2luZFxuXG4gICgqIFJlYWQgbGl0ZXJhbCBjaGFyYWN0ZXJzIHVwIHRvICclJyBvciAnQCcgc3BlY2lhbCBjaGFyYWN0ZXJzLiAqKVxuICBhbmQgcGFyc2VfbGl0ZXJhbCA6IHR5cGUgZSBmIC4gaW50IC0+IGludCAtPiBpbnQgLT4gKF8sIF8sIGUsIGYpIGZtdF9lYmIgPVxuICBmdW4gbGl0X3N0YXJ0IHN0cl9pbmQgZW5kX2luZCAtPlxuICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gYWRkX2xpdGVyYWwgbGl0X3N0YXJ0IHN0cl9pbmQgRW5kX29mX2Zvcm1hdCBlbHNlXG4gICAgICBtYXRjaCBzdHIuW3N0cl9pbmRdIHdpdGhcbiAgICAgIHwgJyUnIC0+XG4gICAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2VfZm9ybWF0IHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgICBhZGRfbGl0ZXJhbCBsaXRfc3RhcnQgc3RyX2luZCBmbXRfcmVzdFxuICAgICAgfCAnQCcgLT5cbiAgICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZV9hZnRlcl9hdCAoc3RyX2luZCArIDEpIGVuZF9pbmQgaW5cbiAgICAgICAgYWRkX2xpdGVyYWwgbGl0X3N0YXJ0IHN0cl9pbmQgZm10X3Jlc3RcbiAgICAgIHwgXyAtPlxuICAgICAgICBwYXJzZV9saXRlcmFsIGxpdF9zdGFydCAoc3RyX2luZCArIDEpIGVuZF9pbmRcblxuICAoKiBQYXJzZSBhIGZvcm1hdCBhZnRlciAnJScgKilcbiAgYW5kIHBhcnNlX2Zvcm1hdCA6IHR5cGUgZSBmIC4gaW50IC0+IGludCAtPiAoXywgXywgZSwgZikgZm10X2ViYiA9XG4gIGZ1biBwY3RfaW5kIGVuZF9pbmQgLT4gcGFyc2VfaWduIHBjdF9pbmQgKHBjdF9pbmQgKyAxKSBlbmRfaW5kXG5cbiAgYW5kIHBhcnNlX2lnbiA6IHR5cGUgZSBmIC4gaW50IC0+IGludCAtPiBpbnQgLT4gKF8sIF8sIGUsIGYpIGZtdF9lYmIgPVxuICBmdW4gcGN0X2luZCBzdHJfaW5kIGVuZF9pbmQgLT5cbiAgICBpZiBzdHJfaW5kID0gZW5kX2luZCB0aGVuIHVuZXhwZWN0ZWRfZW5kX29mX2Zvcm1hdCBlbmRfaW5kO1xuICAgIG1hdGNoIHN0ci5bc3RyX2luZF0gd2l0aFxuICAgICAgfCAnXycgLT4gcGFyc2VfZmxhZ3MgcGN0X2luZCAoc3RyX2luZCsxKSBlbmRfaW5kIHRydWVcbiAgICAgIHwgXyAtPiBwYXJzZV9mbGFncyBwY3RfaW5kIHN0cl9pbmQgZW5kX2luZCBmYWxzZVxuXG4gIGFuZCBwYXJzZV9mbGFncyA6IHR5cGUgZSBmIC4gaW50IC0+IGludCAtPiBpbnQgLT4gYm9vbCAtPiAoXywgXywgZSwgZikgZm10X2ViYiA9XG4gIGZ1biBwY3RfaW5kIHN0cl9pbmQgZW5kX2luZCBpZ24gLT5cbiAgICBsZXQgemVybyA9IHJlZiBmYWxzZSBhbmQgbWludXMgPSByZWYgZmFsc2VcbiAgICBhbmQgcGx1cyA9IHJlZiBmYWxzZSBhbmQgc3BhY2UgPSByZWYgZmFsc2VcbiAgICBhbmQgc2hhcnAgPSByZWYgZmFsc2UgaW5cbiAgICBsZXQgc2V0X2ZsYWcgc3RyX2luZCBmbGFnID1cbiAgICAgICgqIGluIGxlZ2FjeSBtb2RlLCBkdXBsaWNhdGUgZmxhZ3MgYXJlIGFjY2VwdGVkICopXG4gICAgICBpZiAhZmxhZyAmJiBub3QgbGVnYWN5X2JlaGF2aW9yIHRoZW5cbiAgICAgICAgZmFpbHdpdGhfbWVzc2FnZVxuICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgJVM6IGF0IGNoYXJhY3RlciBudW1iZXIgJWQsIGR1cGxpY2F0ZSBmbGFnICVDXCJcbiAgICAgICAgICBzdHIgc3RyX2luZCBzdHIuW3N0cl9pbmRdO1xuICAgICAgZmxhZyA6PSB0cnVlO1xuICAgIGluXG4gICAgbGV0IHJlYyByZWFkX2ZsYWdzIHN0cl9pbmQgPVxuICAgICAgaWYgc3RyX2luZCA9IGVuZF9pbmQgdGhlbiB1bmV4cGVjdGVkX2VuZF9vZl9mb3JtYXQgZW5kX2luZDtcbiAgICAgIGJlZ2luIG1hdGNoIHN0ci5bc3RyX2luZF0gd2l0aFxuICAgICAgfCAnMCcgLT4gc2V0X2ZsYWcgc3RyX2luZCB6ZXJvOyAgcmVhZF9mbGFncyAoc3RyX2luZCArIDEpXG4gICAgICB8ICctJyAtPiBzZXRfZmxhZyBzdHJfaW5kIG1pbnVzOyByZWFkX2ZsYWdzIChzdHJfaW5kICsgMSlcbiAgICAgIHwgJysnIC0+IHNldF9mbGFnIHN0cl9pbmQgcGx1czsgIHJlYWRfZmxhZ3MgKHN0cl9pbmQgKyAxKVxuICAgICAgfCAnIycgLT4gc2V0X2ZsYWcgc3RyX2luZCBzaGFycDsgcmVhZF9mbGFncyAoc3RyX2luZCArIDEpXG4gICAgICB8ICcgJyAtPiBzZXRfZmxhZyBzdHJfaW5kIHNwYWNlOyByZWFkX2ZsYWdzIChzdHJfaW5kICsgMSlcbiAgICAgIHwgXyAtPlxuICAgICAgICBwYXJzZV9wYWRkaW5nIHBjdF9pbmQgc3RyX2luZCBlbmRfaW5kXG4gICAgICAgICAgIXplcm8gIW1pbnVzICFwbHVzICFzaGFycCAhc3BhY2UgaWduXG4gICAgICBlbmRcbiAgICBpblxuICAgIHJlYWRfZmxhZ3Mgc3RyX2luZFxuXG4gICgqIFRyeSB0byByZWFkIGEgZGlnaXRhbCBvciBhICcqJyBwYWRkaW5nLiAqKVxuICBhbmQgcGFyc2VfcGFkZGluZyA6IHR5cGUgZSBmIC5cbiAgICAgIGludCAtPiBpbnQgLT4gaW50IC0+IGJvb2wgLT4gYm9vbCAtPiBib29sIC0+IGJvb2wgLT4gYm9vbCAtPiBib29sIC0+XG4gICAgICAgIChfLCBfLCBlLCBmKSBmbXRfZWJiID1cbiAgZnVuIHBjdF9pbmQgc3RyX2luZCBlbmRfaW5kIHplcm8gbWludXMgcGx1cyBzaGFycCBzcGFjZSBpZ24gLT5cbiAgICBpZiBzdHJfaW5kID0gZW5kX2luZCB0aGVuIHVuZXhwZWN0ZWRfZW5kX29mX2Zvcm1hdCBlbmRfaW5kO1xuICAgIGxldCBwYWR0eSA9IG1hdGNoIHplcm8sIG1pbnVzIHdpdGhcbiAgICAgIHwgZmFsc2UsIGZhbHNlIC0+IFJpZ2h0XG4gICAgICB8IGZhbHNlLCB0cnVlICAtPiBMZWZ0XG4gICAgICB8ICB0cnVlLCBmYWxzZSAtPiBaZXJvc1xuICAgICAgfCAgdHJ1ZSwgdHJ1ZSAgLT5cbiAgICAgICAgaWYgbGVnYWN5X2JlaGF2aW9yIHRoZW4gTGVmdFxuICAgICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCAnLScgXCIwXCIgaW5cbiAgICBtYXRjaCBzdHIuW3N0cl9pbmRdIHdpdGhcbiAgICB8ICcwJyAuLiAnOScgLT5cbiAgICAgIGxldCBuZXdfaW5kLCB3aWR0aCA9IHBhcnNlX3Bvc2l0aXZlIHN0cl9pbmQgZW5kX2luZCAwIGluXG4gICAgICBwYXJzZV9hZnRlcl9wYWRkaW5nIHBjdF9pbmQgbmV3X2luZCBlbmRfaW5kIG1pbnVzIHBsdXMgc2hhcnAgc3BhY2UgaWduXG4gICAgICAgIChMaXRfcGFkZGluZyAocGFkdHksIHdpZHRoKSlcbiAgICB8ICcqJyAtPlxuICAgICAgcGFyc2VfYWZ0ZXJfcGFkZGluZyBwY3RfaW5kIChzdHJfaW5kICsgMSkgZW5kX2luZCBtaW51cyBwbHVzIHNoYXJwIHNwYWNlXG4gICAgICAgIGlnbiAoQXJnX3BhZGRpbmcgcGFkdHkpXG4gICAgfCBfIC0+XG4gICAgICBiZWdpbiBtYXRjaCBwYWR0eSB3aXRoXG4gICAgICB8IExlZnQgIC0+XG4gICAgICAgIGlmIG5vdCBsZWdhY3lfYmVoYXZpb3IgdGhlblxuICAgICAgICAgIGludmFsaWRfZm9ybWF0X3dpdGhvdXQgKHN0cl9pbmQgLSAxKSAnLScgXCJwYWRkaW5nXCI7XG4gICAgICAgIHBhcnNlX2FmdGVyX3BhZGRpbmcgcGN0X2luZCBzdHJfaW5kIGVuZF9pbmQgbWludXMgcGx1cyBzaGFycCBzcGFjZSBpZ25cbiAgICAgICAgICBOb19wYWRkaW5nXG4gICAgICB8IFplcm9zIC0+XG4gICAgICAgICAoKiBhICcwJyBwYWRkaW5nIGluZGljYXRpb24gbm90IGZvbGxvd2VkIGJ5IGFueXRoaW5nIHNob3VsZFxuICAgICAgICAgICBiZSBpbnRlcnByZXRlZCBhcyBhIFJpZ2h0IHBhZGRpbmcgb2Ygd2lkdGggMC4gVGhpcyBpcyB1c2VkXG4gICAgICAgICAgIGJ5IHNjYW5uaW5nIGNvbnZlcnNpb25zICUwcyBhbmQgJTBjICopXG4gICAgICAgIHBhcnNlX2FmdGVyX3BhZGRpbmcgcGN0X2luZCBzdHJfaW5kIGVuZF9pbmQgbWludXMgcGx1cyBzaGFycCBzcGFjZSBpZ25cbiAgICAgICAgICAoTGl0X3BhZGRpbmcgKFJpZ2h0LCAwKSlcbiAgICAgIHwgUmlnaHQgLT5cbiAgICAgICAgcGFyc2VfYWZ0ZXJfcGFkZGluZyBwY3RfaW5kIHN0cl9pbmQgZW5kX2luZCBtaW51cyBwbHVzIHNoYXJwIHNwYWNlIGlnblxuICAgICAgICAgIE5vX3BhZGRpbmdcbiAgICAgIGVuZFxuXG4gICgqIElzIHByZWNpc2lvbiBkZWZpbmVkPyAqKVxuICBhbmQgcGFyc2VfYWZ0ZXJfcGFkZGluZyA6IHR5cGUgeCBlIGYgLlxuICAgICAgaW50IC0+IGludCAtPiBpbnQgLT4gYm9vbCAtPiBib29sIC0+IGJvb2wgLT4gYm9vbCAtPiBib29sIC0+XG4gICAgICAgICh4LCBfKSBwYWRkaW5nIC0+IChfLCBfLCBlLCBmKSBmbXRfZWJiID1cbiAgZnVuIHBjdF9pbmQgc3RyX2luZCBlbmRfaW5kIG1pbnVzIHBsdXMgc2hhcnAgc3BhY2UgaWduIHBhZCAtPlxuICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgbWF0Y2ggc3RyLltzdHJfaW5kXSB3aXRoXG4gICAgfCAnLicgLT5cbiAgICAgIHBhcnNlX3ByZWNpc2lvbiBwY3RfaW5kIChzdHJfaW5kICsgMSkgZW5kX2luZCBtaW51cyBwbHVzIHNoYXJwIHNwYWNlIGlnblxuICAgICAgICBwYWRcbiAgICB8IHN5bWIgLT5cbiAgICAgIHBhcnNlX2NvbnZlcnNpb24gcGN0X2luZCAoc3RyX2luZCArIDEpIGVuZF9pbmQgcGx1cyBzaGFycCBzcGFjZSBpZ24gcGFkXG4gICAgICAgIE5vX3ByZWNpc2lvbiBwYWQgc3ltYlxuXG4gICgqIFJlYWQgdGhlIGRpZ2l0YWwgb3IgJyonIHByZWNpc2lvbi4gKilcbiAgYW5kIHBhcnNlX3ByZWNpc2lvbiA6IHR5cGUgeCBlIGYgLlxuICAgICAgaW50IC0+IGludCAtPiBpbnQgLT4gYm9vbCAtPiBib29sIC0+IGJvb2wgLT4gYm9vbCAtPiBib29sIC0+XG4gICAgICAgICh4LCBfKSBwYWRkaW5nIC0+IChfLCBfLCBlLCBmKSBmbXRfZWJiID1cbiAgZnVuIHBjdF9pbmQgc3RyX2luZCBlbmRfaW5kIG1pbnVzIHBsdXMgc2hhcnAgc3BhY2UgaWduIHBhZCAtPlxuICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgbGV0IHBhcnNlX2xpdGVyYWwgbWludXMgc3RyX2luZCA9XG4gICAgICBsZXQgbmV3X2luZCwgcHJlYyA9IHBhcnNlX3Bvc2l0aXZlIHN0cl9pbmQgZW5kX2luZCAwIGluXG4gICAgICBwYXJzZV9hZnRlcl9wcmVjaXNpb24gcGN0X2luZCBuZXdfaW5kIGVuZF9pbmQgbWludXMgcGx1cyBzaGFycCBzcGFjZSBpZ25cbiAgICAgICAgcGFkIChMaXRfcHJlY2lzaW9uIHByZWMpIGluXG4gICAgbWF0Y2ggc3RyLltzdHJfaW5kXSB3aXRoXG4gICAgfCAnMCcgLi4gJzknIC0+IHBhcnNlX2xpdGVyYWwgbWludXMgc3RyX2luZFxuICAgIHwgKCcrJyB8ICctJykgYXMgc3ltYiB3aGVuIGxlZ2FjeV9iZWhhdmlvciAtPlxuICAgICAgKCogTGVnYWN5IG1vZGUgd291bGQgYWNjZXB0IGFuZCBpZ25vcmUgJysnIG9yICctJyBiZWZvcmUgdGhlXG4gICAgICAgICBpbnRlZ2VyIGRlc2NyaWJpbmcgdGhlIGRlc2lyZWQgcHJlY2lzaW9uOyBub3QgdGhhdCB0aGlzXG4gICAgICAgICBjYW5ub3QgaGFwcGVuIGZvciBwYWRkaW5nIHdpZHRoLCBhcyAnKycgYW5kICctJyBhbHJlYWR5IGhhdmVcbiAgICAgICAgIGEgc2VtYW50aWNzIHRoZXJlLlxuXG4gICAgICAgICBUaGF0IHNhaWQsIHRoZSBpZGVhIChzdXBwb3J0ZWQgYnkgdGhpcyB0d2VhaykgdGhhdCB3aWR0aCBhbmRcbiAgICAgICAgIHByZWNpc2lvbiBsaXRlcmFscyBhcmUgXCJpbnRlZ2VyIGxpdGVyYWxzXCIgaW4gdGhlIE9DYW1sIHNlbnNlIGlzXG4gICAgICAgICBzdGlsbCBibGF0YW50bHkgd3JvbmcsIGFzIDEyM180NTYgb3IgMHhGRiBhcmUgcmVqZWN0ZWQuICopXG4gICAgICBwYXJzZV9saXRlcmFsIChtaW51cyB8fCBzeW1iID0gJy0nKSAoc3RyX2luZCArIDEpXG4gICAgfCAnKicgLT5cbiAgICAgIHBhcnNlX2FmdGVyX3ByZWNpc2lvbiBwY3RfaW5kIChzdHJfaW5kICsgMSkgZW5kX2luZCBtaW51cyBwbHVzIHNoYXJwIHNwYWNlXG4gICAgICAgIGlnbiBwYWQgQXJnX3ByZWNpc2lvblxuICAgIHwgXyAtPlxuICAgICAgaWYgbGVnYWN5X2JlaGF2aW9yIHRoZW5cbiAgICAgICAgKCogbm90ZSB0aGF0IGxlZ2FjeSBpbXBsZW1lbnRhdGlvbiBkaWQgbm90IGlnbm9yZSAnLicgd2l0aG91dFxuICAgICAgICAgICBhIG51bWJlciAoYXMgaXQgZG9lcyBmb3IgcGFkZGluZyBpbmRpY2F0aW9ucyksIGJ1dFxuICAgICAgICAgICBpbnRlcnByZXRzIGl0IGFzICcuMCcgKilcbiAgICAgICAgcGFyc2VfYWZ0ZXJfcHJlY2lzaW9uIHBjdF9pbmQgc3RyX2luZCBlbmRfaW5kIG1pbnVzIHBsdXMgc2hhcnAgc3BhY2UgaWduXG4gICAgICAgICAgcGFkIChMaXRfcHJlY2lzaW9uIDApXG4gICAgICBlbHNlXG4gICAgICAgIGludmFsaWRfZm9ybWF0X3dpdGhvdXQgKHN0cl9pbmQgLSAxKSAnLicgXCJwcmVjaXNpb25cIlxuXG4gICgqIFRyeSB0byByZWFkIHRoZSBjb252ZXJzaW9uLiAqKVxuICBhbmQgcGFyc2VfYWZ0ZXJfcHJlY2lzaW9uIDogdHlwZSB4IHkgeiB0IGUgZiAuXG4gICAgICBpbnQgLT4gaW50IC0+IGludCAtPiBib29sIC0+IGJvb2wgLT4gYm9vbCAtPiBib29sIC0+IGJvb2wgLT5cbiAgICAgICAgKHgsIHkpIHBhZGRpbmcgLT4gKHosIHQpIHByZWNpc2lvbiAtPiAoXywgXywgZSwgZikgZm10X2ViYiA9XG4gIGZ1biBwY3RfaW5kIHN0cl9pbmQgZW5kX2luZCBtaW51cyBwbHVzIHNoYXJwIHNwYWNlIGlnbiBwYWQgcHJlYyAtPlxuICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgbGV0IHBhcnNlX2NvbnYgKHR5cGUgdSkgKHR5cGUgdikgKHBhZHByZWMgOiAodSwgdikgcGFkZGluZykgPVxuICAgICAgcGFyc2VfY29udmVyc2lvbiBwY3RfaW5kIChzdHJfaW5kICsgMSkgZW5kX2luZCBwbHVzIHNoYXJwIHNwYWNlIGlnbiBwYWRcbiAgICAgICAgcHJlYyBwYWRwcmVjIHN0ci5bc3RyX2luZF0gaW5cbiAgICAoKiBpbiBsZWdhY3kgbW9kZSwgc29tZSBmb3JtYXRzICglcyBhbmQgJVMpIGFjY2VwdCBhIHdlaXJkIG1peCBvZlxuICAgICAgIHBhZGRpbmcgYW5kIHByZWNpc2lvbiwgd2hpY2ggaXMgbWVyZ2VkIGFzIGEgc2luZ2xlIHBhZGRpbmdcbiAgICAgICBpbmZvcm1hdGlvbi4gRm9yIGV4YW1wbGUsIGluICUuMTBzIHRoZSBwcmVjaXNpb24gaXMgaW1wbGljaXRseVxuICAgICAgIHVuZGVyc3Rvb2QgYXMgcGFkZGluZyAlMTBzLCBidXQgdGhlIGxlZnQtcGFkZGluZyBjb21wb25lbnQgbWF5XG4gICAgICAgYmUgc3BlY2lmaWVkIGVpdGhlciBhcyBhIGxlZnQgcGFkZGluZyBvciBhIG5lZ2F0aXZlIHByZWNpc2lvbjpcbiAgICAgICAlLS4zcyBhbmQgJS4tM3MgYXJlIGVxdWl2YWxlbnQgdG8gJS0zcyAqKVxuICAgIG1hdGNoIHBhZCB3aXRoXG4gICAgfCBOb19wYWRkaW5nIC0+IChcbiAgICAgIG1hdGNoIG1pbnVzLCBwcmVjIHdpdGhcbiAgICAgICAgfCBfLCBOb19wcmVjaXNpb24gLT4gcGFyc2VfY29udiBOb19wYWRkaW5nXG4gICAgICAgIHwgZmFsc2UsIExpdF9wcmVjaXNpb24gbiAtPiBwYXJzZV9jb252IChMaXRfcGFkZGluZyAoUmlnaHQsIG4pKVxuICAgICAgICB8IHRydWUsIExpdF9wcmVjaXNpb24gbiAtPiBwYXJzZV9jb252IChMaXRfcGFkZGluZyAoTGVmdCwgbikpXG4gICAgICAgIHwgZmFsc2UsIEFyZ19wcmVjaXNpb24gLT4gcGFyc2VfY29udiAoQXJnX3BhZGRpbmcgUmlnaHQpXG4gICAgICAgIHwgdHJ1ZSwgQXJnX3ByZWNpc2lvbiAtPiBwYXJzZV9jb252IChBcmdfcGFkZGluZyBMZWZ0KVxuICAgIClcbiAgICB8IHBhZCAtPiBwYXJzZV9jb252IHBhZFxuXG4gICgqIENhc2UgYW5hbHlzaXMgb24gY29udmVyc2lvbi4gKilcbiAgYW5kIHBhcnNlX2NvbnZlcnNpb24gOiB0eXBlIHggeSB6IHQgdSB2IGUgZiAuXG4gICAgICBpbnQgLT4gaW50IC0+IGludCAtPiBib29sIC0+IGJvb2wgLT4gYm9vbCAtPiBib29sIC0+ICh4LCB5KSBwYWRkaW5nIC0+XG4gICAgICAgICh6LCB0KSBwcmVjaXNpb24gLT4gKHUsIHYpIHBhZGRpbmcgLT4gY2hhciAtPiAoXywgXywgZSwgZikgZm10X2ViYiA9XG4gIGZ1biBwY3RfaW5kIHN0cl9pbmQgZW5kX2luZCBwbHVzIHNoYXJwIHNwYWNlIGlnbiBwYWQgcHJlYyBwYWRwcmVjIHN5bWIgLT5cbiAgICAoKiBGbGFncyB1c2VkIHRvIGNoZWNrIG9wdGlvbiB1c2FnZXMvY29tcGF0aWJpbGl0aWVzLiAqKVxuICAgIGxldCBwbHVzX3VzZWQgID0gcmVmIGZhbHNlIGFuZCBzaGFycF91c2VkID0gcmVmIGZhbHNlXG4gICAgYW5kIHNwYWNlX3VzZWQgPSByZWYgZmFsc2UgYW5kIGlnbl91c2VkICAgPSByZWYgZmFsc2VcbiAgICBhbmQgcGFkX3VzZWQgICA9IHJlZiBmYWxzZSBhbmQgcHJlY191c2VkICA9IHJlZiBmYWxzZSBpblxuXG4gICAgKCogQWNjZXNzIHRvIG9wdGlvbnMsIHVwZGF0ZSBmbGFncy4gKilcbiAgICBsZXQgZ2V0X3BsdXMgICAgKCkgPSBwbHVzX3VzZWQgIDo9IHRydWU7IHBsdXNcbiAgICBhbmQgZ2V0X3NoYXJwICAgKCkgPSBzaGFycF91c2VkIDo9IHRydWU7IHNoYXJwXG4gICAgYW5kIGdldF9zcGFjZSAgICgpID0gc3BhY2VfdXNlZCA6PSB0cnVlOyBzcGFjZVxuICAgIGFuZCBnZXRfaWduICAgICAoKSA9IGlnbl91c2VkICAgOj0gdHJ1ZTsgaWduXG4gICAgYW5kIGdldF9wYWQgICAgICgpID0gcGFkX3VzZWQgICA6PSB0cnVlOyBwYWRcbiAgICBhbmQgZ2V0X3ByZWMgICAgKCkgPSBwcmVjX3VzZWQgIDo9IHRydWU7IHByZWNcbiAgICBhbmQgZ2V0X3BhZHByZWMgKCkgPSBwYWRfdXNlZCAgIDo9IHRydWU7IHBhZHByZWMgaW5cblxuICAgICgqIENoZWNrIHRoYXQgcGFkdHkgPD4gWmVyb3MuICopXG4gICAgbGV0IGNoZWNrX25vXzAgc3ltYiAodHlwZSBhKSAodHlwZSBiKSAocGFkIDogKGEsIGIpIHBhZGRpbmcpID1cbiAgICAgIG1hdGNoIHBhZCB3aXRoXG4gICAgICB8IE5vX3BhZGRpbmcgLT4gcGFkXG4gICAgICB8IExpdF9wYWRkaW5nICgoTGVmdCB8IFJpZ2h0KSwgXykgLT4gcGFkXG4gICAgICB8IEFyZ19wYWRkaW5nIChMZWZ0IHwgUmlnaHQpIC0+IHBhZFxuICAgICAgfCBMaXRfcGFkZGluZyAoWmVyb3MsIHdpZHRoKSAtPlxuICAgICAgICBpZiBsZWdhY3lfYmVoYXZpb3IgdGhlbiBMaXRfcGFkZGluZyAoUmlnaHQsIHdpZHRoKVxuICAgICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCBzeW1iIFwiMFwiXG4gICAgICB8IEFyZ19wYWRkaW5nIFplcm9zIC0+XG4gICAgICAgIGlmIGxlZ2FjeV9iZWhhdmlvciB0aGVuIEFyZ19wYWRkaW5nIFJpZ2h0XG4gICAgICAgIGVsc2UgaW5jb21wYXRpYmxlX2ZsYWcgcGN0X2luZCBzdHJfaW5kIHN5bWIgXCIwXCJcbiAgICBpblxuXG4gICAgKCogR2V0IHBhZGRpbmcgYXMgYSBwYWRfb3B0aW9uIChzZWUgXCIlX1wiLCBcIiV7XCIsIFwiJShcIiBhbmQgXCIlW1wiKS5cbiAgICAgICAobm8gbmVlZCBmb3IgbGVnYWN5IG1vZGUgdHdlYWtpbmcsIHRob3NlIHdlcmUgcmVqZWN0ZWQgYnkgdGhlXG4gICAgICAgbGVnYWN5IHBhcnNlciBhcyB3ZWxsKSAqKVxuICAgIGxldCBvcHRfb2ZfcGFkIGMgKHR5cGUgYSkgKHR5cGUgYikgKHBhZCA6IChhLCBiKSBwYWRkaW5nKSA9IG1hdGNoIHBhZCB3aXRoXG4gICAgICB8IE5vX3BhZGRpbmcgLT4gTm9uZVxuICAgICAgfCBMaXRfcGFkZGluZyAoUmlnaHQsIHdpZHRoKSAtPiBTb21lIHdpZHRoXG4gICAgICB8IExpdF9wYWRkaW5nIChaZXJvcywgd2lkdGgpIC0+XG4gICAgICAgIGlmIGxlZ2FjeV9iZWhhdmlvciB0aGVuIFNvbWUgd2lkdGhcbiAgICAgICAgZWxzZSBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgYyBcIicwJ1wiXG4gICAgICB8IExpdF9wYWRkaW5nIChMZWZ0LCB3aWR0aCkgLT5cbiAgICAgICAgaWYgbGVnYWN5X2JlaGF2aW9yIHRoZW4gU29tZSB3aWR0aFxuICAgICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCBjIFwiJy0nXCJcbiAgICAgIHwgQXJnX3BhZGRpbmcgXyAtPiBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgYyBcIicqJ1wiXG4gICAgaW5cbiAgICBsZXQgZ2V0X3BhZF9vcHQgYyA9IG9wdF9vZl9wYWQgYyAoZ2V0X3BhZCAoKSkgaW5cbiAgICBsZXQgZ2V0X3BhZHByZWNfb3B0IGMgPSBvcHRfb2ZfcGFkIGMgKGdldF9wYWRwcmVjICgpKSBpblxuXG4gICAgKCogR2V0IHByZWNpc2lvbiBhcyBhIHByZWNfb3B0aW9uIChzZWUgXCIlX2ZcIikuXG4gICAgICAgKG5vIG5lZWQgZm9yIGxlZ2FjeSBtb2RlIHR3ZWFraW5nLCB0aG9zZSB3ZXJlIHJlamVjdGVkIGJ5IHRoZVxuICAgICAgIGxlZ2FjeSBwYXJzZXIgYXMgd2VsbCkgKilcbiAgICBsZXQgZ2V0X3ByZWNfb3B0ICgpID0gbWF0Y2ggZ2V0X3ByZWMgKCkgd2l0aFxuICAgICAgfCBOb19wcmVjaXNpb24gICAgICAgLT4gTm9uZVxuICAgICAgfCBMaXRfcHJlY2lzaW9uIG5kZWMgLT4gU29tZSBuZGVjXG4gICAgICB8IEFyZ19wcmVjaXNpb24gICAgICAtPiBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgJ18nIFwiJyonXCJcbiAgICBpblxuXG4gICAgbGV0IGZtdF9yZXN1bHQgPSBtYXRjaCBzeW1iIHdpdGhcbiAgICB8ICcsJyAtPlxuICAgICAgcGFyc2Ugc3RyX2luZCBlbmRfaW5kXG4gICAgfCAnYycgLT5cbiAgICAgIGxldCBjaGFyX2Zvcm1hdCBmbXRfcmVzdCA9ICgqICVjICopXG4gICAgICAgIGlmIGdldF9pZ24gKClcbiAgICAgICAgdGhlbiBGbXRfRUJCIChJZ25vcmVkX3BhcmFtIChJZ25vcmVkX2NoYXIsIGZtdF9yZXN0KSlcbiAgICAgICAgZWxzZSBGbXRfRUJCIChDaGFyIGZtdF9yZXN0KVxuICAgICAgaW5cbiAgICAgIGxldCBzY2FuX2Zvcm1hdCBmbXRfcmVzdCA9ICgqICUwYyAqKVxuICAgICAgICBpZiBnZXRfaWduICgpXG4gICAgICAgIHRoZW4gRm10X0VCQiAoSWdub3JlZF9wYXJhbSAoSWdub3JlZF9zY2FuX25leHRfY2hhciwgZm10X3Jlc3QpKVxuICAgICAgICBlbHNlIEZtdF9FQkIgKFNjYW5fbmV4dF9jaGFyIGZtdF9yZXN0KVxuICAgICAgaW5cbiAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2Ugc3RyX2luZCBlbmRfaW5kIGluXG4gICAgICBiZWdpbiBtYXRjaCBnZXRfcGFkX29wdCAnYycgd2l0aFxuICAgICAgICB8IE5vbmUgLT4gY2hhcl9mb3JtYXQgZm10X3Jlc3RcbiAgICAgICAgfCBTb21lIDAgLT4gc2Nhbl9mb3JtYXQgZm10X3Jlc3RcbiAgICAgICAgfCBTb21lIF9uIC0+XG5cdCAgIGlmIG5vdCBsZWdhY3lfYmVoYXZpb3Jcblx0ICAgdGhlbiBpbnZhbGlkX25vbm51bGxfY2hhcl93aWR0aCBzdHJfaW5kXG5cdCAgIGVsc2UgKCogbGVnYWN5IGlnbm9yZXMgJWMgd2lkdGhzICopIGNoYXJfZm9ybWF0IGZtdF9yZXN0XG4gICAgICBlbmRcbiAgICB8ICdDJyAtPlxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgIGlmIGdldF9pZ24gKCkgdGhlbiBGbXRfRUJCIChJZ25vcmVkX3BhcmFtIChJZ25vcmVkX2NhbWxfY2hhcixmbXRfcmVzdCkpXG4gICAgICBlbHNlIEZtdF9FQkIgKENhbWxfY2hhciBmbXRfcmVzdClcbiAgICB8ICdzJyAtPlxuICAgICAgbGV0IHBhZCA9IGNoZWNrX25vXzAgc3ltYiAoZ2V0X3BhZHByZWMgKCkpIGluXG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgaWYgZ2V0X2lnbiAoKSB0aGVuXG4gICAgICAgIGxldCBpZ25vcmVkID0gSWdub3JlZF9zdHJpbmcgKGdldF9wYWRwcmVjX29wdCAnXycpIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgbGV0IFBhZGRpbmdfZm10X0VCQiAocGFkJywgZm10X3Jlc3QnKSA9XG4gICAgICAgICAgbWFrZV9wYWRkaW5nX2ZtdF9lYmIgcGFkIGZtdF9yZXN0IGluXG4gICAgICAgIEZtdF9FQkIgKFN0cmluZyAocGFkJywgZm10X3Jlc3QnKSlcbiAgICB8ICdTJyAtPlxuICAgICAgbGV0IHBhZCA9IGNoZWNrX25vXzAgc3ltYiAoZ2V0X3BhZHByZWMgKCkpIGluXG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgaWYgZ2V0X2lnbiAoKSB0aGVuXG4gICAgICAgIGxldCBpZ25vcmVkID0gSWdub3JlZF9jYW1sX3N0cmluZyAoZ2V0X3BhZHByZWNfb3B0ICdfJykgaW5cbiAgICAgICAgRm10X0VCQiAoSWdub3JlZF9wYXJhbSAoaWdub3JlZCwgZm10X3Jlc3QpKVxuICAgICAgZWxzZVxuICAgICAgICBsZXQgUGFkZGluZ19mbXRfRUJCIChwYWQnLCBmbXRfcmVzdCcpID1cbiAgICAgICAgICBtYWtlX3BhZGRpbmdfZm10X2ViYiBwYWQgZm10X3Jlc3QgaW5cbiAgICAgICAgRm10X0VCQiAoQ2FtbF9zdHJpbmcgKHBhZCcsIGZtdF9yZXN0JykpXG4gICAgfCAnZCcgfCAnaScgfCAneCcgfCAnWCcgfCAnbycgfCAndScgLT5cbiAgICAgIGxldCBpY29udiA9IGNvbXB1dGVfaW50X2NvbnYgcGN0X2luZCBzdHJfaW5kIChnZXRfcGx1cyAoKSkgKGdldF9zaGFycCAoKSlcbiAgICAgICAgKGdldF9zcGFjZSAoKSkgc3ltYiBpblxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgIGlmIGdldF9pZ24gKCkgdGhlblxuICAgICAgICBsZXQgaWdub3JlZCA9IElnbm9yZWRfaW50IChpY29udiwgZ2V0X3BhZF9vcHQgJ18nKSBpblxuICAgICAgICBGbXRfRUJCIChJZ25vcmVkX3BhcmFtIChpZ25vcmVkLCBmbXRfcmVzdCkpXG4gICAgICBlbHNlXG5cdCgqICU1LjNkIGlzIGFjY2VwdGVkIGFuZCBtZWFuaW5nZnVsOiBwYWQgdG8gbGVuZ3RoIDUgd2l0aFxuXHQgICBzcGFjZXMsIGJ1dCBmaXJzdCBwYWQgd2l0aCB6ZXJvcyB1cHRvIGxlbmd0aCAzICgwLXBhZGRpbmdcblx0ICAgaXMgdGhlIGludGVycHJldGF0aW9uIG9mIFwicHJlY2lzaW9uXCIgZm9yIGludGVnZXIgZm9ybWF0cykuXG5cbiAgICAgICAgICAgJTA1LjNkIGlzIHJlZHVuZGFudDogcGFkIHRvIGxlbmd0aCA1ICp3aXRoIHplcm9zKiwgYnV0XG4gICAgICAgICAgIGZpcnN0IHBhZCB3aXRoIHplcm9zLi4uIFRvIGFkZCBpbnN1bHQgdG8gdGhlIGluanVyeSwgdGhlXG4gICAgICAgICAgIGxlZ2FjeSBpbXBsZW1lbnRhdGlvbiBpZ25vcmVzIHRoZSAwLXBhZGRpbmcgaW5kaWNhdGlvbiBhbmRcbiAgICAgICAgICAgZG9lcyB0aGUgNSBwYWRkaW5nIHdpdGggc3BhY2VzIGluc3RlYWQuIFdlIHJldXNlIHRoaXNcbiAgICAgICAgICAgaW50ZXJwcmV0YXRpb24gZm9yIGNvbXBhdGlibGl0eSwgYnV0IHN0YXRpY2FsbHkgcmVqZWN0IHRoaXNcbiAgICAgICAgICAgZm9ybWF0IHdoZW4gdGhlIGxlZ2FjeSBtb2RlIGlzIGRpc2FibGVkLCB0byBwcm90ZWN0IHN0cmljdFxuICAgICAgICAgICB1c2VycyBmcm9tIHRoaXMgY29ybmVyIGNhc2UuXG5cdCAqKVxuICAgICAgICBsZXQgcGFkID0gbWF0Y2ggZ2V0X3BhZCAoKSwgZ2V0X3ByZWMgKCkgd2l0aFxuICAgICAgICAgIHwgcGFkLCBOb19wcmVjaXNpb24gLT4gcGFkXG4gICAgICAgICAgfCBOb19wYWRkaW5nLCBfICAgICAtPiBOb19wYWRkaW5nXG4gICAgICAgICAgfCBMaXRfcGFkZGluZyAoWmVyb3MsIG4pLCBfIC0+XG4gICAgICAgICAgICBpZiBsZWdhY3lfYmVoYXZpb3IgdGhlbiBMaXRfcGFkZGluZyAoUmlnaHQsIG4pXG4gICAgICAgICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCAnMCcgXCJwcmVjaXNpb25cIlxuICAgICAgICAgIHwgQXJnX3BhZGRpbmcgWmVyb3MsIF8gLT5cbiAgICAgICAgICAgIGlmIGxlZ2FjeV9iZWhhdmlvciB0aGVuIEFyZ19wYWRkaW5nIFJpZ2h0XG4gICAgICAgICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCAnMCcgXCJwcmVjaXNpb25cIlxuICAgICAgICAgIHwgTGl0X3BhZGRpbmcgXyBhcyBwYWQsIF8gLT4gcGFkXG4gICAgICAgICAgfCBBcmdfcGFkZGluZyBfIGFzIHBhZCwgXyAtPiBwYWQgaW5cbiAgICAgICAgbGV0IFBhZHByZWNfZm10X0VCQiAocGFkJywgcHJlYycsIGZtdF9yZXN0JykgPVxuICAgICAgICAgIG1ha2VfcGFkcHJlY19mbXRfZWJiIHBhZCAoZ2V0X3ByZWMgKCkpIGZtdF9yZXN0IGluXG4gICAgICAgIEZtdF9FQkIgKEludCAoaWNvbnYsIHBhZCcsIHByZWMnLCBmbXRfcmVzdCcpKVxuICAgIHwgJ04nIC0+XG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgbGV0IGNvdW50ZXIgPSBUb2tlbl9jb3VudGVyIGluXG4gICAgICBpZiBnZXRfaWduICgpIHRoZW5cbiAgICAgICAgbGV0IGlnbm9yZWQgPSBJZ25vcmVkX3NjYW5fZ2V0X2NvdW50ZXIgY291bnRlciBpblxuICAgICAgICBGbXRfRUJCIChJZ25vcmVkX3BhcmFtIChpZ25vcmVkLCBmbXRfcmVzdCkpXG4gICAgICBlbHNlXG4gICAgICBGbXRfRUJCIChTY2FuX2dldF9jb3VudGVyIChjb3VudGVyLCBmbXRfcmVzdCkpXG4gICAgfCAnbCcgfCAnbicgfCAnTCcgd2hlbiBzdHJfaW5kPWVuZF9pbmQgfHwgbm90IChpc19pbnRfYmFzZSBzdHIuW3N0cl9pbmRdKSAtPlxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgIGxldCBjb3VudGVyID0gY291bnRlcl9vZl9jaGFyIHN5bWIgaW5cbiAgICAgIGlmIGdldF9pZ24gKCkgdGhlblxuICAgICAgICBsZXQgaWdub3JlZCA9IElnbm9yZWRfc2Nhbl9nZXRfY291bnRlciBjb3VudGVyIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgRm10X0VCQiAoU2Nhbl9nZXRfY291bnRlciAoY291bnRlciwgZm10X3Jlc3QpKVxuICAgIHwgJ2wnIC0+XG4gICAgICBsZXQgaWNvbnYgPVxuICAgICAgICBjb21wdXRlX2ludF9jb252IHBjdF9pbmQgKHN0cl9pbmQgKyAxKSAoZ2V0X3BsdXMgKCkpIChnZXRfc2hhcnAgKCkpXG4gICAgICAgICAgKGdldF9zcGFjZSAoKSkgc3RyLltzdHJfaW5kXSBpblxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSAoc3RyX2luZCArIDEpIGVuZF9pbmQgaW5cbiAgICAgIGlmIGdldF9pZ24gKCkgdGhlblxuICAgICAgICBsZXQgaWdub3JlZCA9IElnbm9yZWRfaW50MzIgKGljb252LCBnZXRfcGFkX29wdCAnXycpIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgbGV0IFBhZHByZWNfZm10X0VCQiAocGFkJywgcHJlYycsIGZtdF9yZXN0JykgPVxuICAgICAgICAgIG1ha2VfcGFkcHJlY19mbXRfZWJiIChnZXRfcGFkICgpKSAoZ2V0X3ByZWMgKCkpIGZtdF9yZXN0IGluXG4gICAgICAgIEZtdF9FQkIgKEludDMyIChpY29udiwgcGFkJywgcHJlYycsIGZtdF9yZXN0JykpXG4gICAgfCAnbicgLT5cbiAgICAgIGxldCBpY29udiA9XG4gICAgICAgIGNvbXB1dGVfaW50X2NvbnYgcGN0X2luZCAoc3RyX2luZCArIDEpIChnZXRfcGx1cyAoKSlcbiAgICAgICAgICAoZ2V0X3NoYXJwICgpKSAoZ2V0X3NwYWNlICgpKSBzdHIuW3N0cl9pbmRdIGluXG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIChzdHJfaW5kICsgMSkgZW5kX2luZCBpblxuICAgICAgaWYgZ2V0X2lnbiAoKSB0aGVuXG4gICAgICAgIGxldCBpZ25vcmVkID0gSWdub3JlZF9uYXRpdmVpbnQgKGljb252LCBnZXRfcGFkX29wdCAnXycpIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgbGV0IFBhZHByZWNfZm10X0VCQiAocGFkJywgcHJlYycsIGZtdF9yZXN0JykgPVxuICAgICAgICAgIG1ha2VfcGFkcHJlY19mbXRfZWJiIChnZXRfcGFkICgpKSAoZ2V0X3ByZWMgKCkpIGZtdF9yZXN0IGluXG4gICAgICAgIEZtdF9FQkIgKE5hdGl2ZWludCAoaWNvbnYsIHBhZCcsIHByZWMnLCBmbXRfcmVzdCcpKVxuICAgIHwgJ0wnIC0+XG4gICAgICBsZXQgaWNvbnYgPVxuICAgICAgICBjb21wdXRlX2ludF9jb252IHBjdF9pbmQgKHN0cl9pbmQgKyAxKSAoZ2V0X3BsdXMgKCkpIChnZXRfc2hhcnAgKCkpXG4gICAgICAgICAgKGdldF9zcGFjZSAoKSkgc3RyLltzdHJfaW5kXSBpblxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSAoc3RyX2luZCArIDEpIGVuZF9pbmQgaW5cbiAgICAgIGlmIGdldF9pZ24gKCkgdGhlblxuICAgICAgICBsZXQgaWdub3JlZCA9IElnbm9yZWRfaW50NjQgKGljb252LCBnZXRfcGFkX29wdCAnXycpIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgbGV0IFBhZHByZWNfZm10X0VCQiAocGFkJywgcHJlYycsIGZtdF9yZXN0JykgPVxuICAgICAgICAgIG1ha2VfcGFkcHJlY19mbXRfZWJiIChnZXRfcGFkICgpKSAoZ2V0X3ByZWMgKCkpIGZtdF9yZXN0IGluXG4gICAgICAgIEZtdF9FQkIgKEludDY0IChpY29udiwgcGFkJywgcHJlYycsIGZtdF9yZXN0JykpXG4gICAgfCAnZicgfCAnZScgfCAnRScgfCAnZycgfCAnRycgfCAnRicgLT5cbiAgICAgIGxldCBmY29udiA9IGNvbXB1dGVfZmxvYXRfY29udiBwY3RfaW5kIHN0cl9pbmQgKGdldF9wbHVzICgpKVxuICAgICAgICAoZ2V0X3NwYWNlICgpKSBzeW1iIGluXG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgaWYgZ2V0X2lnbiAoKSB0aGVuXG4gICAgICAgIGxldCBpZ25vcmVkID0gSWdub3JlZF9mbG9hdCAoZ2V0X3BhZF9vcHQgJ18nLCBnZXRfcHJlY19vcHQgKCkpIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgbGV0IFBhZHByZWNfZm10X0VCQiAocGFkJywgcHJlYycsIGZtdF9yZXN0JykgPVxuICAgICAgICAgIG1ha2VfcGFkcHJlY19mbXRfZWJiIChnZXRfcGFkICgpKSAoZ2V0X3ByZWMgKCkpIGZtdF9yZXN0IGluXG4gICAgICAgIEZtdF9FQkIgKEZsb2F0IChmY29udiwgcGFkJywgcHJlYycsIGZtdF9yZXN0JykpXG4gICAgfCAnYicgfCAnQicgLT5cbiAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2Ugc3RyX2luZCBlbmRfaW5kIGluXG4gICAgICBpZiBnZXRfaWduICgpIHRoZW4gRm10X0VCQiAoSWdub3JlZF9wYXJhbSAoSWdub3JlZF9ib29sLCBmbXRfcmVzdCkpXG4gICAgICBlbHNlIEZtdF9FQkIgKEJvb2wgZm10X3Jlc3QpXG4gICAgfCAnYScgLT5cbiAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2Ugc3RyX2luZCBlbmRfaW5kIGluXG4gICAgICBGbXRfRUJCIChBbHBoYSBmbXRfcmVzdClcbiAgICB8ICd0JyAtPlxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgIEZtdF9FQkIgKFRoZXRhIGZtdF9yZXN0KVxuICAgIHwgJ3InIC0+XG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgaWYgZ2V0X2lnbiAoKSB0aGVuIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKElnbm9yZWRfcmVhZGVyLCBmbXRfcmVzdCkpXG4gICAgICBlbHNlIEZtdF9FQkIgKFJlYWRlciBmbXRfcmVzdClcbiAgICB8ICchJyAtPlxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgIEZtdF9FQkIgKEZsdXNoIGZtdF9yZXN0KVxuICAgIHwgKCclJyB8ICdAJykgYXMgYyAtPlxuICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgIEZtdF9FQkIgKENoYXJfbGl0ZXJhbCAoYywgZm10X3Jlc3QpKVxuICAgIHwgJ3snIC0+XG4gICAgICBsZXQgc3ViX2VuZCA9IHNlYXJjaF9zdWJmb3JtYXRfZW5kIHN0cl9pbmQgZW5kX2luZCAnfScgaW5cbiAgICAgIGxldCBGbXRfRUJCIHN1Yl9mbXQgPSBwYXJzZSBzdHJfaW5kIHN1Yl9lbmQgaW5cbiAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2UgKHN1Yl9lbmQgKyAyKSBlbmRfaW5kIGluXG4gICAgICBsZXQgc3ViX2ZtdHR5ID0gZm10dHlfb2ZfZm10IHN1Yl9mbXQgaW5cbiAgICAgIGlmIGdldF9pZ24gKCkgdGhlblxuICAgICAgICBsZXQgaWdub3JlZCA9IElnbm9yZWRfZm9ybWF0X2FyZyAoZ2V0X3BhZF9vcHQgJ18nLCBzdWJfZm10dHkpIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgRm10X0VCQiAoRm9ybWF0X2FyZyAoZ2V0X3BhZF9vcHQgJ3snLCBzdWJfZm10dHksIGZtdF9yZXN0KSlcbiAgICB8ICcoJyAtPlxuICAgICAgbGV0IHN1Yl9lbmQgPSBzZWFyY2hfc3ViZm9ybWF0X2VuZCBzdHJfaW5kIGVuZF9pbmQgJyknIGluXG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIChzdWJfZW5kICsgMikgZW5kX2luZCBpblxuICAgICAgbGV0IEZtdF9FQkIgc3ViX2ZtdCA9IHBhcnNlIHN0cl9pbmQgc3ViX2VuZCBpblxuICAgICAgbGV0IHN1Yl9mbXR0eSA9IGZtdHR5X29mX2ZtdCBzdWJfZm10IGluXG4gICAgICBpZiBnZXRfaWduICgpIHRoZW5cbiAgICAgICAgbGV0IGlnbm9yZWQgPSBJZ25vcmVkX2Zvcm1hdF9zdWJzdCAoZ2V0X3BhZF9vcHQgJ18nLCBzdWJfZm10dHkpIGluXG4gICAgICAgIEZtdF9FQkIgKElnbm9yZWRfcGFyYW0gKGlnbm9yZWQsIGZtdF9yZXN0KSlcbiAgICAgIGVsc2VcbiAgICAgICAgRm10X0VCQiAoRm9ybWF0X3N1YnN0IChnZXRfcGFkX29wdCAnKCcsIHN1Yl9mbXR0eSwgZm10X3Jlc3QpKVxuICAgIHwgJ1snIC0+XG4gICAgICBsZXQgbmV4dF9pbmQsIGNoYXJfc2V0ID0gcGFyc2VfY2hhcl9zZXQgc3RyX2luZCBlbmRfaW5kIGluXG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIG5leHRfaW5kIGVuZF9pbmQgaW5cbiAgICAgIGlmIGdldF9pZ24gKCkgdGhlblxuICAgICAgICBsZXQgaWdub3JlZCA9IElnbm9yZWRfc2Nhbl9jaGFyX3NldCAoZ2V0X3BhZF9vcHQgJ18nLCBjaGFyX3NldCkgaW5cbiAgICAgICAgRm10X0VCQiAoSWdub3JlZF9wYXJhbSAoaWdub3JlZCwgZm10X3Jlc3QpKVxuICAgICAgZWxzZVxuICAgICAgICBGbXRfRUJCIChTY2FuX2NoYXJfc2V0IChnZXRfcGFkX29wdCAnWycsIGNoYXJfc2V0LCBmbXRfcmVzdCkpXG4gICAgfCAnLScgfCAnKycgfCAnIycgfCAnICcgfCAnXycgLT5cbiAgICAgIGZhaWx3aXRoX21lc3NhZ2VcbiAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogYXQgY2hhcmFjdGVyIG51bWJlciAlZCwgXFxcbiAgICAgICAgIGZsYWcgJUMgaXMgb25seSBhbGxvd2VkIGFmdGVyIHRoZSAnJSUnLCBiZWZvcmUgcGFkZGluZyBhbmQgcHJlY2lzaW9uXCJcbiAgICAgICAgc3RyIHBjdF9pbmQgc3ltYlxuICAgIHwgXyAtPlxuICAgICAgZmFpbHdpdGhfbWVzc2FnZVxuICAgICAgICBcImludmFsaWQgZm9ybWF0ICVTOiBhdCBjaGFyYWN0ZXIgbnVtYmVyICVkLCBcXFxuICAgICAgICAgaW52YWxpZCBjb252ZXJzaW9uIFxcXCIlJSVjXFxcIlwiIHN0ciAoc3RyX2luZCAtIDEpIHN5bWJcbiAgICBpblxuICAgICgqIENoZWNrIGZvciB1bnVzZWQgb3B0aW9ucywgYW5kIHJlamVjdCB0aGVtIGFzIGluY29tcGF0aWJsZS5cblxuICAgICAgIFN1Y2ggY2hlY2tzIG5lZWQgdG8gYmUgZGlzYWJsZWQgaW4gbGVnYWN5IG1vZGUsIGFzIHRoZSBsZWdhY3lcbiAgICAgICBwYXJzZXIgc2lsZW50bHkgaWdub3JlZCBpbmNvbXBhdGlibGUgZmxhZ3MuICopXG4gICAgaWYgbm90IGxlZ2FjeV9iZWhhdmlvciB0aGVuIGJlZ2luXG4gICAgaWYgbm90ICFwbHVzX3VzZWQgJiYgcGx1cyB0aGVuXG4gICAgICBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgc3ltYiBcIicrJ1wiO1xuICAgIGlmIG5vdCAhc2hhcnBfdXNlZCAmJiBzaGFycCB0aGVuXG4gICAgICBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgc3ltYiBcIicjJ1wiO1xuICAgIGlmIG5vdCAhc3BhY2VfdXNlZCAmJiBzcGFjZSB0aGVuXG4gICAgICBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgc3ltYiBcIicgJ1wiO1xuICAgIGlmIG5vdCAhcGFkX3VzZWQgICYmIFBhZGRpbmdfRUJCIHBhZCA8PiBQYWRkaW5nX0VCQiBOb19wYWRkaW5nIHRoZW5cbiAgICAgIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCBzeW1iIFwiYHBhZGRpbmcnXCI7XG4gICAgaWYgbm90ICFwcmVjX3VzZWQgJiYgUHJlY2lzaW9uX0VCQiBwcmVjIDw+IFByZWNpc2lvbl9FQkIgTm9fcHJlY2lzaW9uIHRoZW5cbiAgICAgIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCAoaWYgaWduIHRoZW4gJ18nIGVsc2Ugc3ltYilcbiAgICAgICAgXCJgcHJlY2lzaW9uJ1wiO1xuICAgIGlmIGlnbiAmJiBwbHVzIHRoZW4gaW5jb21wYXRpYmxlX2ZsYWcgcGN0X2luZCBzdHJfaW5kICdfJyBcIicrJ1wiO1xuICAgIGVuZDtcbiAgICAoKiB0aGlzIGxhc3QgdGVzdCBtdXN0IG5vdCBiZSBkaXNhYmxlZCBpbiBsZWdhY3kgbW9kZSxcbiAgICAgICBhcyBpZ25vcmluZyBpdCB3b3VsZCB0eXBpY2FsbHkgcmVzdWx0IGluIGEgZGlmZmVyZW50IHR5cGluZ1xuICAgICAgIHRoYW4gd2hhdCB0aGUgbGVnYWN5IHBhcnNlciB1c2VkICopXG4gICAgaWYgbm90ICFpZ25fdXNlZCAmJiBpZ24gdGhlblxuICAgICAgYmVnaW4gbWF0Y2ggc3ltYiB3aXRoXG4gICAgICAgICgqIGFyZ3VtZW50LWxlc3MgZm9ybWF0cyBjYW4gc2FmZWx5IGJlIGlnbm9yZWQgaW4gbGVnYWN5IG1vZGUgKilcbiAgICAgICAgfCAoJ0AnIHwgJyUnIHwgJyEnIHwgJywnKSB3aGVuIGxlZ2FjeV9iZWhhdmlvciAtPiAoKVxuICAgICAgICB8IF8gLT5cbiAgICAgICAgICBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgc3ltYiBcIidfJ1wiXG4gICAgICBlbmQ7XG4gICAgZm10X3Jlc3VsdFxuXG4gICgqIFBhcnNlIGZvcm1hdHRpbmcgaW5mb3JtYXRpb25zIChhZnRlciAnQCcpLiAqKVxuICBhbmQgcGFyc2VfYWZ0ZXJfYXQgOiB0eXBlIGUgZiAuIGludCAtPiBpbnQgLT4gKF8sIF8sIGUsIGYpIGZtdF9lYmIgPVxuICBmdW4gc3RyX2luZCBlbmRfaW5kIC0+XG4gICAgaWYgc3RyX2luZCA9IGVuZF9pbmQgdGhlbiBGbXRfRUJCIChDaGFyX2xpdGVyYWwgKCdAJywgRW5kX29mX2Zvcm1hdCkpXG4gICAgZWxzZVxuICAgICAgbWF0Y2ggc3RyLltzdHJfaW5kXSB3aXRoXG4gICAgICB8ICdbJyAtPlxuICAgICAgICBwYXJzZV90YWcgZmFsc2UgKHN0cl9pbmQgKyAxKSBlbmRfaW5kXG4gICAgICB8ICddJyAtPlxuICAgICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIChzdHJfaW5kICsgMSkgZW5kX2luZCBpblxuICAgICAgICBGbXRfRUJCIChGb3JtYXR0aW5nX2xpdCAoQ2xvc2VfYm94LCBmbXRfcmVzdCkpXG4gICAgICB8ICd7JyAtPlxuICAgICAgICBwYXJzZV90YWcgdHJ1ZSAoc3RyX2luZCArIDEpIGVuZF9pbmRcbiAgICAgIHwgJ30nIC0+XG4gICAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2UgKHN0cl9pbmQgKyAxKSBlbmRfaW5kIGluXG4gICAgICAgIEZtdF9FQkIgKEZvcm1hdHRpbmdfbGl0IChDbG9zZV90YWcsIGZtdF9yZXN0KSlcbiAgICAgIHwgJywnIC0+XG4gICAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2UgKHN0cl9pbmQgKyAxKSBlbmRfaW5kIGluXG4gICAgICAgIEZtdF9FQkIgKEZvcm1hdHRpbmdfbGl0IChCcmVhayAoXCJALFwiLCAwLCAwKSwgZm10X3Jlc3QpKVxuICAgICAgfCAnICcgLT5cbiAgICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSAoc3RyX2luZCArIDEpIGVuZF9pbmQgaW5cbiAgICAgICAgRm10X0VCQiAoRm9ybWF0dGluZ19saXQgKEJyZWFrIChcIkAgXCIsIDEsIDApLCBmbXRfcmVzdCkpXG4gICAgICB8ICc7JyAtPlxuICAgICAgICBwYXJzZV9nb29kX2JyZWFrIChzdHJfaW5kICsgMSkgZW5kX2luZFxuICAgICAgfCAnPycgLT5cbiAgICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSAoc3RyX2luZCArIDEpIGVuZF9pbmQgaW5cbiAgICAgICAgRm10X0VCQiAoRm9ybWF0dGluZ19saXQgKEZGbHVzaCwgZm10X3Jlc3QpKVxuICAgICAgfCAnXFxuJyAtPlxuICAgICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIChzdHJfaW5kICsgMSkgZW5kX2luZCBpblxuICAgICAgICBGbXRfRUJCIChGb3JtYXR0aW5nX2xpdCAoRm9yY2VfbmV3bGluZSwgZm10X3Jlc3QpKVxuICAgICAgfCAnLicgLT5cbiAgICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSAoc3RyX2luZCArIDEpIGVuZF9pbmQgaW5cbiAgICAgICAgRm10X0VCQiAoRm9ybWF0dGluZ19saXQgKEZsdXNoX25ld2xpbmUsIGZtdF9yZXN0KSlcbiAgICAgIHwgJzwnIC0+XG4gICAgICAgIHBhcnNlX21hZ2ljX3NpemUgKHN0cl9pbmQgKyAxKSBlbmRfaW5kXG4gICAgICB8ICdAJyAtPlxuICAgICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIChzdHJfaW5kICsgMSkgZW5kX2luZCBpblxuICAgICAgICBGbXRfRUJCIChGb3JtYXR0aW5nX2xpdCAoRXNjYXBlZF9hdCwgZm10X3Jlc3QpKVxuICAgICAgfCAnJScgd2hlbiBzdHJfaW5kICsgMSA8IGVuZF9pbmQgJiYgc3RyLltzdHJfaW5kICsgMV0gPSAnJScgLT5cbiAgICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSAoc3RyX2luZCArIDIpIGVuZF9pbmQgaW5cbiAgICAgICAgRm10X0VCQiAoRm9ybWF0dGluZ19saXQgKEVzY2FwZWRfcGVyY2VudCwgZm10X3Jlc3QpKVxuICAgICAgfCAnJScgLT5cbiAgICAgICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgICAgRm10X0VCQiAoQ2hhcl9saXRlcmFsICgnQCcsIGZtdF9yZXN0KSlcbiAgICAgIHwgYyAtPlxuICAgICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIChzdHJfaW5kICsgMSkgZW5kX2luZCBpblxuICAgICAgICBGbXRfRUJCIChGb3JtYXR0aW5nX2xpdCAoU2Nhbl9pbmRpYyBjLCBmbXRfcmVzdCkpXG5cbiAgYW5kIGNoZWNrX29wZW5fYm94IDogdHlwZSBhIGIgYyBkIGUgZiAuIChhLCBiLCBjLCBkLCBlLCBmKSBmbXQgLT4gdW5pdCA9XG4gIGZ1biBmbXQgLT4gbWF0Y2ggZm10IHdpdGhcbiAgICB8IFN0cmluZ19saXRlcmFsIChzdHIsIEVuZF9vZl9mb3JtYXQpIC0+IChcbiAgICAgIHRyeSBpZ25vcmUgKG9wZW5fYm94X29mX3N0cmluZyBzdHIpIHdpdGggRmFpbHVyZSBfIC0+XG4gICAgICAgICgoKiBFbWl0IHdhcm5pbmc6IGludmFsaWQgb3BlbiBib3ggKikpXG4gICAgKVxuICAgIHwgXyAtPiAoKVxuXG4gICgqIFRyeSB0byByZWFkIHRoZSBvcHRpb25uYWwgPG5hbWU+IGFmdGVyIFwiQHtcIiBvciBcIkBbXCIuICopXG4gIGFuZCBwYXJzZV90YWcgOiB0eXBlIGUgZiAuIGJvb2wgLT4gaW50IC0+IGludCAtPiAoXywgXywgZSwgZikgZm10X2ViYiA9XG4gIGZ1biBpc19vcGVuX3RhZyBzdHJfaW5kIGVuZF9pbmQgLT5cbiAgICB0cnlcbiAgICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gcmFpc2UgTm90X2ZvdW5kO1xuICAgICAgbWF0Y2ggc3RyLltzdHJfaW5kXSB3aXRoXG4gICAgICB8ICc8JyAtPlxuICAgICAgICBsZXQgaW5kID0gU3RyaW5nLmluZGV4X2Zyb20gc3RyIChzdHJfaW5kICsgMSkgJz4nIGluXG4gICAgICAgIGlmIGluZCA+PSBlbmRfaW5kIHRoZW4gcmFpc2UgTm90X2ZvdW5kO1xuICAgICAgICBsZXQgc3ViX3N0ciA9IFN0cmluZy5zdWIgc3RyIHN0cl9pbmQgKGluZCAtIHN0cl9pbmQgKyAxKSBpblxuICAgICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIChpbmQgKyAxKSBlbmRfaW5kIGluXG4gICAgICAgIGxldCBGbXRfRUJCIHN1Yl9mbXQgPSBwYXJzZSBzdHJfaW5kIChpbmQgKyAxKSBpblxuICAgICAgICBsZXQgc3ViX2Zvcm1hdCA9IEZvcm1hdCAoc3ViX2ZtdCwgc3ViX3N0cikgaW5cbiAgICAgICAgbGV0IGZvcm1hdHRpbmcgPSBpZiBpc19vcGVuX3RhZyB0aGVuIE9wZW5fdGFnIHN1Yl9mb3JtYXQgZWxzZSAoXG4gICAgICAgICAgY2hlY2tfb3Blbl9ib3ggc3ViX2ZtdDtcbiAgICAgICAgICBPcGVuX2JveCBzdWJfZm9ybWF0KSBpblxuICAgICAgICBGbXRfRUJCIChGb3JtYXR0aW5nX2dlbiAoZm9ybWF0dGluZywgZm10X3Jlc3QpKVxuICAgICAgfCBfIC0+XG4gICAgICAgIHJhaXNlIE5vdF9mb3VuZFxuICAgIHdpdGggTm90X2ZvdW5kIC0+XG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgbGV0IHN1Yl9mb3JtYXQgPSBGb3JtYXQgKEVuZF9vZl9mb3JtYXQsIFwiXCIpIGluXG4gICAgICBsZXQgZm9ybWF0dGluZyA9XG4gICAgICAgIGlmIGlzX29wZW5fdGFnIHRoZW4gT3Blbl90YWcgc3ViX2Zvcm1hdCBlbHNlIE9wZW5fYm94IHN1Yl9mb3JtYXQgaW5cbiAgICAgIEZtdF9FQkIgKEZvcm1hdHRpbmdfZ2VuIChmb3JtYXR0aW5nLCBmbXRfcmVzdCkpXG5cbiAgKCogVHJ5IHRvIHJlYWQgdGhlIG9wdGlvbm5hbCA8d2lkdGggb2Zmc2V0PiBhZnRlciBcIkA7XCIuICopXG4gIGFuZCBwYXJzZV9nb29kX2JyZWFrIDogdHlwZSBlIGYgLiBpbnQgLT4gaW50IC0+IChfLCBfLCBlLCBmKSBmbXRfZWJiID1cbiAgZnVuIHN0cl9pbmQgZW5kX2luZCAtPlxuICAgIGxldCBuZXh0X2luZCwgZm9ybWF0dGluZ19saXQgPVxuICAgICAgdHJ5XG4gICAgICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHx8IHN0ci5bc3RyX2luZF0gPD4gJzwnIHRoZW4gcmFpc2UgTm90X2ZvdW5kO1xuICAgICAgICBsZXQgc3RyX2luZF8xID0gcGFyc2Vfc3BhY2VzIChzdHJfaW5kICsgMSkgZW5kX2luZCBpblxuICAgICAgICBtYXRjaCBzdHIuW3N0cl9pbmRfMV0gd2l0aFxuICAgICAgICB8ICcwJyAuLiAnOScgfCAnLScgLT4gKFxuICAgICAgICAgIGxldCBzdHJfaW5kXzIsIHdpZHRoID0gcGFyc2VfaW50ZWdlciBzdHJfaW5kXzEgZW5kX2luZCBpblxuICAgICAgICAgICAgbGV0IHN0cl9pbmRfMyA9IHBhcnNlX3NwYWNlcyBzdHJfaW5kXzIgZW5kX2luZCBpblxuICAgICAgICAgICAgbWF0Y2ggc3RyLltzdHJfaW5kXzNdIHdpdGhcbiAgICAgICAgICAgICAgfCAnPicgLT5cbiAgICAgICAgICAgICAgICBsZXQgcyA9IFN0cmluZy5zdWIgc3RyIChzdHJfaW5kLTIpIChzdHJfaW5kXzMtc3RyX2luZCszKSBpblxuICAgICAgICAgICAgICAgIHN0cl9pbmRfMyArIDEsIEJyZWFrIChzLCB3aWR0aCwgMClcbiAgICAgICAgICAgICAgfCAnMCcgLi4gJzknIHwgJy0nIC0+XG4gICAgICAgICAgICAgICAgbGV0IHN0cl9pbmRfNCwgb2Zmc2V0ID0gcGFyc2VfaW50ZWdlciBzdHJfaW5kXzMgZW5kX2luZCBpblxuICAgICAgICAgICAgICAgIGxldCBzdHJfaW5kXzUgPSBwYXJzZV9zcGFjZXMgc3RyX2luZF80IGVuZF9pbmQgaW5cbiAgICAgICAgICAgICAgICBpZiBzdHIuW3N0cl9pbmRfNV0gPD4gJz4nIHRoZW4gcmFpc2UgTm90X2ZvdW5kO1xuICAgICAgICAgICAgICAgIGxldCBzID0gU3RyaW5nLnN1YiBzdHIgKHN0cl9pbmQtMikgKHN0cl9pbmRfNS1zdHJfaW5kKzMpIGluXG4gICAgICAgICAgICAgICAgc3RyX2luZF81ICsgMSwgQnJlYWsgKHMsIHdpZHRoLCBvZmZzZXQpXG4gICAgICAgICAgICAgIHwgXyAtPiByYWlzZSBOb3RfZm91bmRcbiAgICAgICAgKVxuICAgICAgICB8IF8gLT4gcmFpc2UgTm90X2ZvdW5kXG4gICAgICB3aXRoIE5vdF9mb3VuZCB8IEZhaWx1cmUgXyAtPlxuICAgICAgICBzdHJfaW5kLCBCcmVhayAoXCJAO1wiLCAxLCAwKVxuICAgIGluXG4gICAgbGV0IEZtdF9FQkIgZm10X3Jlc3QgPSBwYXJzZSBuZXh0X2luZCBlbmRfaW5kIGluXG4gICAgRm10X0VCQiAoRm9ybWF0dGluZ19saXQgKGZvcm1hdHRpbmdfbGl0LCBmbXRfcmVzdCkpXG5cbiAgKCogUGFyc2UgdGhlIHNpemUgaW4gYSA8bj4uICopXG4gIGFuZCBwYXJzZV9tYWdpY19zaXplIDogdHlwZSBlIGYgLiBpbnQgLT4gaW50IC0+IChfLCBfLCBlLCBmKSBmbXRfZWJiID1cbiAgZnVuIHN0cl9pbmQgZW5kX2luZCAtPlxuICAgIG1hdGNoXG4gICAgICB0cnlcbiAgICAgICAgbGV0IHN0cl9pbmRfMSA9IHBhcnNlX3NwYWNlcyBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICAgICAgbWF0Y2ggc3RyLltzdHJfaW5kXzFdIHdpdGhcbiAgICAgICAgfCAnMCcgLi4gJzknIHwgJy0nIC0+XG4gICAgICAgICAgbGV0IHN0cl9pbmRfMiwgc2l6ZSA9IHBhcnNlX2ludGVnZXIgc3RyX2luZF8xIGVuZF9pbmQgaW5cbiAgICAgICAgICBsZXQgc3RyX2luZF8zID0gcGFyc2Vfc3BhY2VzIHN0cl9pbmRfMiBlbmRfaW5kIGluXG4gICAgICAgICAgaWYgc3RyLltzdHJfaW5kXzNdIDw+ICc+JyB0aGVuIHJhaXNlIE5vdF9mb3VuZDtcbiAgICAgICAgICBsZXQgcyA9IFN0cmluZy5zdWIgc3RyIChzdHJfaW5kIC0gMikgKHN0cl9pbmRfMyAtIHN0cl9pbmQgKyAzKSBpblxuICAgICAgICAgIFNvbWUgKHN0cl9pbmRfMyArIDEsIE1hZ2ljX3NpemUgKHMsIHNpemUpKVxuICAgICAgICB8IF8gLT4gTm9uZVxuICAgICAgd2l0aCBOb3RfZm91bmQgfCBGYWlsdXJlIF8gLT5cbiAgICAgICAgTm9uZVxuICAgIHdpdGhcbiAgICB8IFNvbWUgKG5leHRfaW5kLCBmb3JtYXR0aW5nX2xpdCkgLT5cbiAgICAgIGxldCBGbXRfRUJCIGZtdF9yZXN0ID0gcGFyc2UgbmV4dF9pbmQgZW5kX2luZCBpblxuICAgICAgRm10X0VCQiAoRm9ybWF0dGluZ19saXQgKGZvcm1hdHRpbmdfbGl0LCBmbXRfcmVzdCkpXG4gICAgfCBOb25lIC0+XG4gICAgICBsZXQgRm10X0VCQiBmbXRfcmVzdCA9IHBhcnNlIHN0cl9pbmQgZW5kX2luZCBpblxuICAgICAgRm10X0VCQiAoRm9ybWF0dGluZ19saXQgKFNjYW5faW5kaWMgJzwnLCBmbXRfcmVzdCkpXG5cbiAgKCogUGFyc2UgYW5kIGNvbnN0cnVjdCBhIGNoYXIgc2V0LiAqKVxuICBhbmQgcGFyc2VfY2hhcl9zZXQgc3RyX2luZCBlbmRfaW5kID1cbiAgICBpZiBzdHJfaW5kID0gZW5kX2luZCB0aGVuIHVuZXhwZWN0ZWRfZW5kX29mX2Zvcm1hdCBlbmRfaW5kO1xuXG4gICAgbGV0IGNoYXJfc2V0ID0gY3JlYXRlX2NoYXJfc2V0ICgpIGluXG4gICAgbGV0IGFkZF9jaGFyIGMgPVxuICAgICAgYWRkX2luX2NoYXJfc2V0IGNoYXJfc2V0IGM7XG4gICAgaW5cbiAgICBsZXQgYWRkX3JhbmdlIGMgYycgPVxuICAgICAgZm9yIGkgPSBpbnRfb2ZfY2hhciBjIHRvIGludF9vZl9jaGFyIGMnIGRvXG4gICAgICAgIGFkZF9pbl9jaGFyX3NldCBjaGFyX3NldCAoY2hhcl9vZl9pbnQgaSk7XG4gICAgICBkb25lO1xuICAgIGluXG5cbiAgICBsZXQgZmFpbF9zaW5nbGVfcGVyY2VudCBzdHJfaW5kID1cbiAgICAgIGZhaWx3aXRoX21lc3NhZ2VcbiAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogJyUlJyBhbG9uZSBpcyBub3QgYWNjZXB0ZWQgaW4gY2hhcmFjdGVyIHNldHMsIFxcXG4gICAgICAgICB1c2UgJSUlJSBpbnN0ZWFkIGF0IHBvc2l0aW9uICVkLlwiIHN0ciBzdHJfaW5kO1xuICAgIGluXG5cbiAgICAoKiBQYXJzZSB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgY2hhciBzZXQuICopXG4gICAgbGV0IHJlYyBwYXJzZV9jaGFyX3NldF9zdGFydCBzdHJfaW5kIGVuZF9pbmQgPVxuICAgICAgaWYgc3RyX2luZCA9IGVuZF9pbmQgdGhlbiB1bmV4cGVjdGVkX2VuZF9vZl9mb3JtYXQgZW5kX2luZDtcbiAgICAgIGxldCBjID0gc3RyLltzdHJfaW5kXSBpblxuICAgICAgcGFyc2VfY2hhcl9zZXRfYWZ0ZXJfY2hhciAoc3RyX2luZCArIDEpIGVuZF9pbmQgYztcblxuICAgICgqIFBhcnNlIHRoZSBjb250ZW50IG9mIGEgY2hhciBzZXQgdW50aWwgdGhlIGZpcnN0ICddJy4gKilcbiAgICBhbmQgcGFyc2VfY2hhcl9zZXRfY29udGVudCBzdHJfaW5kIGVuZF9pbmQgPVxuICAgICAgaWYgc3RyX2luZCA9IGVuZF9pbmQgdGhlbiB1bmV4cGVjdGVkX2VuZF9vZl9mb3JtYXQgZW5kX2luZDtcbiAgICAgIG1hdGNoIHN0ci5bc3RyX2luZF0gd2l0aFxuICAgICAgfCAnXScgLT5cbiAgICAgICAgc3RyX2luZCArIDFcbiAgICAgIHwgJy0nIC0+XG4gICAgICAgIGFkZF9jaGFyICctJztcbiAgICAgICAgcGFyc2VfY2hhcl9zZXRfY29udGVudCAoc3RyX2luZCArIDEpIGVuZF9pbmQ7XG4gICAgICB8IGMgLT5cbiAgICAgICAgcGFyc2VfY2hhcl9zZXRfYWZ0ZXJfY2hhciAoc3RyX2luZCArIDEpIGVuZF9pbmQgYztcblxuICAgICgqIFRlc3QgZm9yIHJhbmdlIGluIGNoYXIgc2V0LiAqKVxuICAgIGFuZCBwYXJzZV9jaGFyX3NldF9hZnRlcl9jaGFyIHN0cl9pbmQgZW5kX2luZCBjID1cbiAgICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgICBtYXRjaCBzdHIuW3N0cl9pbmRdIHdpdGhcbiAgICAgIHwgJ10nIC0+XG4gICAgICAgIGFkZF9jaGFyIGM7XG4gICAgICAgIHN0cl9pbmQgKyAxXG4gICAgICB8ICctJyAtPlxuICAgICAgICBwYXJzZV9jaGFyX3NldF9hZnRlcl9taW51cyAoc3RyX2luZCArIDEpIGVuZF9pbmQgY1xuICAgICAgfCAoJyUnIHwgJ0AnKSBhcyBjJyB3aGVuIGMgPSAnJScgLT5cbiAgICAgICAgYWRkX2NoYXIgYyc7XG4gICAgICAgIHBhcnNlX2NoYXJfc2V0X2NvbnRlbnQgKHN0cl9pbmQgKyAxKSBlbmRfaW5kXG4gICAgICB8IGMnIC0+XG4gICAgICAgIGlmIGMgPSAnJScgdGhlbiBmYWlsX3NpbmdsZV9wZXJjZW50IHN0cl9pbmQ7XG4gICAgICAgICgqIG5vdGUgdGhhdCAnQCcgYWxvbmUgaXMgYWNjZXB0ZWQsIGFzIGRvbmUgYnkgdGhlIGxlZ2FjeSBpbXBsZW1lbnRhdGlvbjtcbiAgICAgICAgICAgdGhlIGRvY3VtZW50YXRpb24gc3BlY2lmaWNhbGx5IHJlcXVpcmVzICVAIHNvIHdlIGNvdWxkIHdhcm4gb24gdGhhdCAqKVxuICAgICAgICBhZGRfY2hhciBjO1xuICAgICAgICBwYXJzZV9jaGFyX3NldF9hZnRlcl9jaGFyIChzdHJfaW5kICsgMSkgZW5kX2luZCBjJ1xuXG4gICAgKCogTWFuYWdlIHJhbmdlIGluIGNoYXIgc2V0IChleGNlcHQgaWYgdGhlICctJyB0aGUgbGFzdCBjaGFyIGJlZm9yZSAnXScpICopXG4gICAgYW5kIHBhcnNlX2NoYXJfc2V0X2FmdGVyX21pbnVzIHN0cl9pbmQgZW5kX2luZCBjID1cbiAgICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgICBtYXRjaCBzdHIuW3N0cl9pbmRdIHdpdGhcbiAgICAgIHwgJ10nIC0+XG4gICAgICAgIGFkZF9jaGFyIGM7XG4gICAgICAgIGFkZF9jaGFyICctJztcbiAgICAgICAgc3RyX2luZCArIDFcbiAgICAgIHwgJyUnIC0+XG4gICAgICAgIGlmIHN0cl9pbmQgKyAxID0gZW5kX2luZCB0aGVuIHVuZXhwZWN0ZWRfZW5kX29mX2Zvcm1hdCBlbmRfaW5kO1xuICAgICAgICBiZWdpbiBtYXRjaCBzdHIuW3N0cl9pbmQgKyAxXSB3aXRoXG4gICAgICAgICAgfCAoJyUnIHwgJ0AnKSBhcyBjJyAtPlxuICAgICAgICAgICAgYWRkX3JhbmdlIGMgYyc7XG4gICAgICAgICAgICBwYXJzZV9jaGFyX3NldF9jb250ZW50IChzdHJfaW5kICsgMikgZW5kX2luZFxuICAgICAgICAgIHwgXyAtPiBmYWlsX3NpbmdsZV9wZXJjZW50IHN0cl9pbmRcbiAgICAgICAgZW5kXG4gICAgICB8IGMnIC0+XG4gICAgICAgIGFkZF9yYW5nZSBjIGMnO1xuICAgICAgICBwYXJzZV9jaGFyX3NldF9jb250ZW50IChzdHJfaW5kICsgMSkgZW5kX2luZFxuICAgIGluXG4gICAgbGV0IHN0cl9pbmQsIHJldmVyc2UgPVxuICAgICAgaWYgc3RyX2luZCA9IGVuZF9pbmQgdGhlbiB1bmV4cGVjdGVkX2VuZF9vZl9mb3JtYXQgZW5kX2luZDtcbiAgICAgIG1hdGNoIHN0ci5bc3RyX2luZF0gd2l0aFxuICAgICAgICB8ICdeJyAtPiBzdHJfaW5kICsgMSwgdHJ1ZVxuICAgICAgICB8IF8gLT4gc3RyX2luZCwgZmFsc2UgaW5cbiAgICBsZXQgbmV4dF9pbmQgPSBwYXJzZV9jaGFyX3NldF9zdGFydCBzdHJfaW5kIGVuZF9pbmQgaW5cbiAgICBsZXQgY2hhcl9zZXQgPSBmcmVlemVfY2hhcl9zZXQgY2hhcl9zZXQgaW5cbiAgICBuZXh0X2luZCwgKGlmIHJldmVyc2UgdGhlbiByZXZfY2hhcl9zZXQgY2hhcl9zZXQgZWxzZSBjaGFyX3NldClcblxuICAoKiBDb25zdW1lIGFsbCBuZXh0IHNwYWNlcywgcmFpc2UgYW4gRmFpbHVyZSBpZiBlbmRfaW5kIGlzIHJlYWNoZWQuICopXG4gIGFuZCBwYXJzZV9zcGFjZXMgc3RyX2luZCBlbmRfaW5kID1cbiAgICBpZiBzdHJfaW5kID0gZW5kX2luZCB0aGVuIHVuZXhwZWN0ZWRfZW5kX29mX2Zvcm1hdCBlbmRfaW5kO1xuICAgIGlmIHN0ci5bc3RyX2luZF0gPSAnICcgdGhlbiBwYXJzZV9zcGFjZXMgKHN0cl9pbmQgKyAxKSBlbmRfaW5kIGVsc2Ugc3RyX2luZFxuXG4gICgqIFJlYWQgYSBwb3NpdGl2ZSBpbnRlZ2VyIGZyb20gdGhlIHN0cmluZywgcmFpc2UgYSBGYWlsdXJlIGlmIGVuZF9pbmQgaXNcbiAgICAgcmVhY2hlZC4gKilcbiAgYW5kIHBhcnNlX3Bvc2l0aXZlIHN0cl9pbmQgZW5kX2luZCBhY2MgPVxuICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgbWF0Y2ggc3RyLltzdHJfaW5kXSB3aXRoXG4gICAgfCAnMCcgLi4gJzknIGFzIGMgLT5cbiAgICAgIGxldCBuZXdfYWNjID0gYWNjICogMTAgKyAoaW50X29mX2NoYXIgYyAtIGludF9vZl9jaGFyICcwJykgaW5cbiAgICAgIGlmIG5ld19hY2MgPiBTeXMubWF4X3N0cmluZ19sZW5ndGggdGhlblxuICAgICAgICBmYWlsd2l0aF9tZXNzYWdlXG4gICAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogaW50ZWdlciAlZCBpcyBncmVhdGVyIHRoYW4gdGhlIGxpbWl0ICVkXCJcbiAgICAgICAgICBzdHIgbmV3X2FjYyBTeXMubWF4X3N0cmluZ19sZW5ndGhcbiAgICAgIGVsc2VcbiAgICAgICAgcGFyc2VfcG9zaXRpdmUgKHN0cl9pbmQgKyAxKSBlbmRfaW5kIG5ld19hY2NcbiAgICB8IF8gLT4gc3RyX2luZCwgYWNjXG5cbiAgKCogUmVhZCBhIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGludGVnZXIgZnJvbSB0aGUgc3RyaW5nLCByYWlzZSBhIEZhaWx1cmVcbiAgICAgaWYgZW5kX2luZCBpcyByZWFjaGVkLiAqKVxuICBhbmQgcGFyc2VfaW50ZWdlciBzdHJfaW5kIGVuZF9pbmQgPVxuICAgIGlmIHN0cl9pbmQgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgbWF0Y2ggc3RyLltzdHJfaW5kXSB3aXRoXG4gICAgfCAnMCcgLi4gJzknIC0+IHBhcnNlX3Bvc2l0aXZlIHN0cl9pbmQgZW5kX2luZCAwXG4gICAgfCAnLScgLT4gKFxuICAgICAgaWYgc3RyX2luZCArIDEgPSBlbmRfaW5kIHRoZW4gdW5leHBlY3RlZF9lbmRfb2ZfZm9ybWF0IGVuZF9pbmQ7XG4gICAgICBtYXRjaCBzdHIuW3N0cl9pbmQgKyAxXSB3aXRoXG4gICAgICB8ICcwJyAuLiAnOScgLT5cbiAgICAgICAgbGV0IG5leHRfaW5kLCBuID0gcGFyc2VfcG9zaXRpdmUgKHN0cl9pbmQgKyAxKSBlbmRfaW5kIDAgaW5cbiAgICAgICAgbmV4dF9pbmQsIC1uXG4gICAgICB8IGMgLT5cbiAgICAgICAgZXhwZWN0ZWRfY2hhcmFjdGVyIChzdHJfaW5kICsgMSkgXCJkaWdpdFwiIGNcbiAgICApXG4gICAgfCBfIC0+IGFzc2VydCBmYWxzZVxuXG4gICgqIEFkZCBhIGxpdGVyYWwgdG8gYSBmb3JtYXQgZnJvbSBhIGxpdGVyYWwgY2hhcmFjdGVyIHN1Yi1zZXF1ZW5jZS4gKilcbiAgYW5kIGFkZF9saXRlcmFsIDogdHlwZSBhIGQgZSBmIC5cbiAgICAgIGludCAtPiBpbnQgLT4gKGEsIF8sIF8sIGQsIGUsIGYpIGZtdCAtPlxuICAgICAgKF8sIF8sIGUsIGYpIGZtdF9lYmIgPVxuICBmdW4gbGl0X3N0YXJ0IHN0cl9pbmQgZm10IC0+IG1hdGNoIHN0cl9pbmQgLSBsaXRfc3RhcnQgd2l0aFxuICAgIHwgMCAgICAtPiBGbXRfRUJCIGZtdFxuICAgIHwgMSAgICAtPiBGbXRfRUJCIChDaGFyX2xpdGVyYWwgKHN0ci5bbGl0X3N0YXJ0XSwgZm10KSlcbiAgICB8IHNpemUgLT4gRm10X0VCQiAoU3RyaW5nX2xpdGVyYWwgKFN0cmluZy5zdWIgc3RyIGxpdF9zdGFydCBzaXplLCBmbXQpKVxuXG4gICgqIFNlYXJjaCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IHN1Yi1mb3JtYXRcbiAgICAgKGkuZS4gdGhlIGNvcnJlc3BvbmRpbmcgXCIlfVwiIG9yIFwiJSlcIikgKilcbiAgYW5kIHNlYXJjaF9zdWJmb3JtYXRfZW5kIHN0cl9pbmQgZW5kX2luZCBjID1cbiAgICBpZiBzdHJfaW5kID0gZW5kX2luZCB0aGVuXG4gICAgICBmYWlsd2l0aF9tZXNzYWdlXG4gICAgICAgIFwiaW52YWxpZCBmb3JtYXQgJVM6IHVuY2xvc2VkIHN1Yi1mb3JtYXQsIFxcXG4gICAgICAgICBleHBlY3RlZCBcXFwiJSUlY1xcXCIgYXQgY2hhcmFjdGVyIG51bWJlciAlZFwiIHN0ciBjIGVuZF9pbmQ7XG4gICAgbWF0Y2ggc3RyLltzdHJfaW5kXSB3aXRoXG4gICAgfCAnJScgLT5cbiAgICAgIGlmIHN0cl9pbmQgKyAxID0gZW5kX2luZCB0aGVuIHVuZXhwZWN0ZWRfZW5kX29mX2Zvcm1hdCBlbmRfaW5kO1xuICAgICAgaWYgc3RyLltzdHJfaW5kICsgMV0gPSBjIHRoZW4gKCogRW5kIG9mIGZvcm1hdCBmb3VuZCAqKSBzdHJfaW5kIGVsc2VcbiAgICAgICAgYmVnaW4gbWF0Y2ggc3RyLltzdHJfaW5kICsgMV0gd2l0aFxuICAgICAgICB8ICdfJyAtPlxuICAgICAgICAgICgqIFNlYXJjaCBmb3IgXCIlXyhcIiBvciBcIiVfe1wiLiAqKVxuICAgICAgICAgIGlmIHN0cl9pbmQgKyAyID0gZW5kX2luZCB0aGVuIHVuZXhwZWN0ZWRfZW5kX29mX2Zvcm1hdCBlbmRfaW5kO1xuICAgICAgICAgIGJlZ2luIG1hdGNoIHN0ci5bc3RyX2luZCArIDJdIHdpdGhcbiAgICAgICAgICB8ICd7JyAtPlxuICAgICAgICAgICAgbGV0IHN1Yl9lbmQgPSBzZWFyY2hfc3ViZm9ybWF0X2VuZCAoc3RyX2luZCArIDMpIGVuZF9pbmQgJ30nIGluXG4gICAgICAgICAgICBzZWFyY2hfc3ViZm9ybWF0X2VuZCAoc3ViX2VuZCArIDIpIGVuZF9pbmQgY1xuICAgICAgICAgIHwgJygnIC0+XG4gICAgICAgICAgICBsZXQgc3ViX2VuZCA9IHNlYXJjaF9zdWJmb3JtYXRfZW5kIChzdHJfaW5kICsgMykgZW5kX2luZCAnKScgaW5cbiAgICAgICAgICAgIHNlYXJjaF9zdWJmb3JtYXRfZW5kIChzdWJfZW5kICsgMikgZW5kX2luZCBjXG4gICAgICAgICAgfCBfIC0+IHNlYXJjaF9zdWJmb3JtYXRfZW5kIChzdHJfaW5kICsgMykgZW5kX2luZCBjXG4gICAgICAgICAgZW5kXG4gICAgICAgIHwgJ3snIC0+XG4gICAgICAgICAgKCogJXsuLi4lfSBzdWItZm9ybWF0IGZvdW5kLiAqKVxuICAgICAgICAgIGxldCBzdWJfZW5kID0gc2VhcmNoX3N1YmZvcm1hdF9lbmQgKHN0cl9pbmQgKyAyKSBlbmRfaW5kICd9JyBpblxuICAgICAgICAgIHNlYXJjaF9zdWJmb3JtYXRfZW5kIChzdWJfZW5kICsgMikgZW5kX2luZCBjXG4gICAgICAgIHwgJygnIC0+XG4gICAgICAgICAgKCogJSguLi4lKSBzdWItZm9ybWF0IGZvdW5kLiAqKVxuICAgICAgICAgIGxldCBzdWJfZW5kID0gc2VhcmNoX3N1YmZvcm1hdF9lbmQgKHN0cl9pbmQgKyAyKSBlbmRfaW5kICcpJyBpblxuICAgICAgICAgIHNlYXJjaF9zdWJmb3JtYXRfZW5kIChzdWJfZW5kICsgMikgZW5kX2luZCBjXG4gICAgICAgIHwgJ30nIC0+XG4gICAgICAgICAgKCogRXJyb3I6ICUoLi4uJX0uICopXG4gICAgICAgICAgZXhwZWN0ZWRfY2hhcmFjdGVyIChzdHJfaW5kICsgMSkgXCJjaGFyYWN0ZXIgJyknXCIgJ30nO1xuICAgICAgICB8ICcpJyAtPlxuICAgICAgICAgICgqIEVycm9yOiAley4uLiUpLiAqKVxuICAgICAgICAgIGV4cGVjdGVkX2NoYXJhY3RlciAoc3RyX2luZCArIDEpIFwiY2hhcmFjdGVyICd9J1wiICcpJztcbiAgICAgICAgfCBfIC0+XG4gICAgICAgICAgc2VhcmNoX3N1YmZvcm1hdF9lbmQgKHN0cl9pbmQgKyAyKSBlbmRfaW5kIGNcbiAgICAgICAgZW5kXG4gICAgfCBfIC0+IHNlYXJjaF9zdWJmb3JtYXRfZW5kIChzdHJfaW5kICsgMSkgZW5kX2luZCBjXG5cbiAgKCogQ2hlY2sgaWYgc3ltYiBpcyBhIHZhbGlkIGludCBjb252ZXJzaW9uIGFmdGVyIFwiJWxcIiwgXCIlblwiIG9yIFwiJUxcIiAqKVxuICBhbmQgaXNfaW50X2Jhc2Ugc3ltYiA9IG1hdGNoIHN5bWIgd2l0aFxuICAgIHwgJ2QnIHwgJ2knIHwgJ3gnIHwgJ1gnIHwgJ28nIHwgJ3UnIC0+IHRydWVcbiAgICB8IF8gLT4gZmFsc2VcblxuICAoKiBDb252ZXJ0IGEgY2hhciAobCwgbiBvciBMKSB0byBpdHMgYXNzb2NpYXRlZCBjb3VudGVyLiAqKVxuICBhbmQgY291bnRlcl9vZl9jaGFyIHN5bWIgPSBtYXRjaCBzeW1iIHdpdGhcbiAgICB8ICdsJyAtPiBMaW5lX2NvdW50ZXIgIHwgJ24nIC0+IENoYXJfY291bnRlclxuICAgIHwgJ0wnIC0+IFRva2VuX2NvdW50ZXIgfCBfIC0+IGFzc2VydCBmYWxzZVxuXG4gICgqIENvbnZlcnQgKHBsdXMsIHN5bWIpIHRvIGl0cyBhc3NvY2lhdGVkIGludF9jb252LiAqKVxuICBhbmQgY29tcHV0ZV9pbnRfY29udiBwY3RfaW5kIHN0cl9pbmQgcGx1cyBzaGFycCBzcGFjZSBzeW1iID1cbiAgICBtYXRjaCBwbHVzLCBzaGFycCwgc3BhY2UsIHN5bWIgd2l0aFxuICAgIHwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgJ2QnIC0+IEludF9kICB8IGZhbHNlLCBmYWxzZSwgZmFsc2UsICdpJyAtPiBJbnRfaVxuICAgIHwgZmFsc2UsIGZhbHNlLCAgdHJ1ZSwgJ2QnIC0+IEludF9zZCB8IGZhbHNlLCBmYWxzZSwgIHRydWUsICdpJyAtPiBJbnRfc2lcbiAgICB8ICB0cnVlLCBmYWxzZSwgZmFsc2UsICdkJyAtPiBJbnRfcGQgfCAgdHJ1ZSwgZmFsc2UsIGZhbHNlLCAnaScgLT4gSW50X3BpXG4gICAgfCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAneCcgLT4gSW50X3ggIHwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgJ1gnIC0+IEludF9YXG4gICAgfCBmYWxzZSwgIHRydWUsIGZhbHNlLCAneCcgLT4gSW50X0N4IHwgZmFsc2UsICB0cnVlLCBmYWxzZSwgJ1gnIC0+IEludF9DWFxuICAgIHwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgJ28nIC0+IEludF9vXG4gICAgfCBmYWxzZSwgIHRydWUsIGZhbHNlLCAnbycgLT4gSW50X0NvXG4gICAgfCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAndScgLT4gSW50X3VcbiAgICB8IF8sIHRydWUsIF8sICd4JyB3aGVuIGxlZ2FjeV9iZWhhdmlvciAtPiBJbnRfQ3hcbiAgICB8IF8sIHRydWUsIF8sICdYJyB3aGVuIGxlZ2FjeV9iZWhhdmlvciAtPiBJbnRfQ1hcbiAgICB8IF8sIHRydWUsIF8sICdvJyB3aGVuIGxlZ2FjeV9iZWhhdmlvciAtPiBJbnRfQ29cbiAgICB8IF8sIHRydWUsIF8sICgnZCcgfCAnaScgfCAndScpIC0+XG4gICAgICBpZiBsZWdhY3lfYmVoYXZpb3IgdGhlbiAoKiBpZ25vcmUgKilcbiAgICAgICAgY29tcHV0ZV9pbnRfY29udiBwY3RfaW5kIHN0cl9pbmQgcGx1cyBmYWxzZSBzcGFjZSBzeW1iXG4gICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCBzeW1iIFwiJyMnXCJcbiAgICB8IHRydWUsIF8sIHRydWUsIF8gLT5cbiAgICAgIGlmIGxlZ2FjeV9iZWhhdmlvciB0aGVuXG4gICAgICAgICgqIHBsdXMgYW5kIHNwYWNlOiBsZWdhY3kgaW1wbGVtZW50YXRpb24gcHJlZmVycyBwbHVzICopXG4gICAgICAgIGNvbXB1dGVfaW50X2NvbnYgcGN0X2luZCBzdHJfaW5kIHBsdXMgc2hhcnAgZmFsc2Ugc3ltYlxuICAgICAgZWxzZSBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgJyAnIFwiJysnXCJcbiAgICB8IGZhbHNlLCBfLCB0cnVlLCBfICAgIC0+XG4gICAgICBpZiBsZWdhY3lfYmVoYXZpb3IgdGhlbiAoKiBpZ25vcmUgKilcbiAgICAgICAgY29tcHV0ZV9pbnRfY29udiBwY3RfaW5kIHN0cl9pbmQgcGx1cyBzaGFycCBmYWxzZSBzeW1iXG4gICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCBzeW1iIFwiJyAnXCJcbiAgICB8IHRydWUsIF8sIGZhbHNlLCBfICAgIC0+XG4gICAgICBpZiBsZWdhY3lfYmVoYXZpb3IgdGhlbiAoKiBpZ25vcmUgKilcbiAgICAgICAgY29tcHV0ZV9pbnRfY29udiBwY3RfaW5kIHN0cl9pbmQgZmFsc2Ugc2hhcnAgc3BhY2Ugc3ltYlxuICAgICAgZWxzZSBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgc3ltYiBcIicrJ1wiXG4gICAgfCBmYWxzZSwgXywgZmFsc2UsIF8gLT4gYXNzZXJ0IGZhbHNlXG5cbiAgKCogQ29udmVydCAocGx1cywgc3ltYikgdG8gaXRzIGFzc29jaWF0ZWQgZmxvYXRfY29udi4gKilcbiAgYW5kIGNvbXB1dGVfZmxvYXRfY29udiBwY3RfaW5kIHN0cl9pbmQgcGx1cyBzcGFjZSBzeW1iID1cbiAgbWF0Y2ggcGx1cywgc3BhY2UsIHN5bWIgd2l0aFxuICAgIHwgZmFsc2UsIGZhbHNlLCAnZicgLT4gRmxvYXRfZiAgfCBmYWxzZSwgZmFsc2UsICdlJyAtPiBGbG9hdF9lXG4gICAgfCBmYWxzZSwgIHRydWUsICdmJyAtPiBGbG9hdF9zZiB8IGZhbHNlLCAgdHJ1ZSwgJ2UnIC0+IEZsb2F0X3NlXG4gICAgfCAgdHJ1ZSwgZmFsc2UsICdmJyAtPiBGbG9hdF9wZiB8ICB0cnVlLCBmYWxzZSwgJ2UnIC0+IEZsb2F0X3BlXG4gICAgfCBmYWxzZSwgZmFsc2UsICdFJyAtPiBGbG9hdF9FICB8IGZhbHNlLCBmYWxzZSwgJ2cnIC0+IEZsb2F0X2dcbiAgICB8IGZhbHNlLCAgdHJ1ZSwgJ0UnIC0+IEZsb2F0X3NFIHwgZmFsc2UsICB0cnVlLCAnZycgLT4gRmxvYXRfc2dcbiAgICB8ICB0cnVlLCBmYWxzZSwgJ0UnIC0+IEZsb2F0X3BFIHwgIHRydWUsIGZhbHNlLCAnZycgLT4gRmxvYXRfcGdcbiAgICB8IGZhbHNlLCBmYWxzZSwgJ0cnIC0+IEZsb2F0X0dcbiAgICB8IGZhbHNlLCAgdHJ1ZSwgJ0cnIC0+IEZsb2F0X3NHXG4gICAgfCAgdHJ1ZSwgZmFsc2UsICdHJyAtPiBGbG9hdF9wR1xuICAgIHwgZmFsc2UsIGZhbHNlLCAnRicgLT4gRmxvYXRfRlxuICAgIHwgIHRydWUsICB0cnVlLCBfIC0+XG4gICAgICBpZiBsZWdhY3lfYmVoYXZpb3IgdGhlblxuICAgICAgICAoKiBwbHVzIGFuZCBzcGFjZTogbGVnYWN5IGltcGxlbWVudGF0aW9uIHByZWZlcnMgcGx1cyAqKVxuICAgICAgICBjb21wdXRlX2Zsb2F0X2NvbnYgcGN0X2luZCBzdHJfaW5kIHBsdXMgZmFsc2Ugc3ltYlxuICAgICAgZWxzZSBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgJyAnIFwiJysnXCJcbiAgICB8IGZhbHNlLCAgdHJ1ZSwgXyAtPlxuICAgICAgaWYgbGVnYWN5X2JlaGF2aW9yIHRoZW4gKCogaWdub3JlICopXG4gICAgICAgIGNvbXB1dGVfZmxvYXRfY29udiBwY3RfaW5kIHN0cl9pbmQgcGx1cyBmYWxzZSBzeW1iXG4gICAgICBlbHNlIGluY29tcGF0aWJsZV9mbGFnIHBjdF9pbmQgc3RyX2luZCBzeW1iIFwiJyAnXCJcbiAgICB8ICB0cnVlLCBmYWxzZSwgXyAtPlxuICAgICAgaWYgbGVnYWN5X2JlaGF2aW9yIHRoZW4gKCogaWdub3JlICopXG4gICAgICAgIGNvbXB1dGVfZmxvYXRfY29udiBwY3RfaW5kIHN0cl9pbmQgZmFsc2Ugc3BhY2Ugc3ltYlxuICAgICAgZWxzZSBpbmNvbXBhdGlibGVfZmxhZyBwY3RfaW5kIHN0cl9pbmQgc3ltYiBcIicrJ1wiXG4gICAgfCBmYWxzZSwgZmFsc2UsIF8gLT4gYXNzZXJ0IGZhbHNlXG5cbiAgKCogUmFpc2UgYSBGYWlsdXJlIHdpdGggYSBmcmllbmRseSBlcnJvciBtZXNzYWdlIGFib3V0IGluY29tcGF0aWJsZSBvcHRpb25zLiopXG4gIGFuZCBpbmNvbXBhdGlibGVfZmxhZyA6IHR5cGUgYSAuIGludCAtPiBpbnQgLT4gY2hhciAtPiBzdHJpbmcgLT4gYSA9XG4gICAgZnVuIHBjdF9pbmQgc3RyX2luZCBzeW1iIG9wdGlvbiAtPlxuICAgICAgbGV0IHN1YmZtdCA9IFN0cmluZy5zdWIgc3RyIHBjdF9pbmQgKHN0cl9pbmQgLSBwY3RfaW5kKSBpblxuICAgICAgZmFpbHdpdGhfbWVzc2FnZVxuICAgICAgICBcImludmFsaWQgZm9ybWF0ICVTOiBhdCBjaGFyYWN0ZXIgbnVtYmVyICVkLCBcXFxuICAgICAgICAgJXMgaXMgaW5jb21wYXRpYmxlIHdpdGggJyVjJyBpbiBzdWItZm9ybWF0ICVTXCJcbiAgICAgICAgc3RyIHBjdF9pbmQgb3B0aW9uIHN5bWIgc3ViZm10O1xuXG4gIGluIHBhcnNlIDAgKFN0cmluZy5sZW5ndGggc3RyKVxuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuICAgICAgICAgICAgICAgICAgKCogR3VhcmRlZCBzdHJpbmcgdG8gZm9ybWF0IGNvbnZlcnNpb25zICopXG5cbigqIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBmb3JtYXQgYWNjb3JkaW5nIHRvIGFuIGZtdHR5LiAqKVxuKCogUmFpc2UgYSBGYWlsdXJlIHdpdGggYW4gZXJyb3IgbWVzc2FnZSBpbiBjYXNlIG9mIHR5cGUgbWlzbWF0Y2guICopXG5sZXQgZm9ybWF0X29mX3N0cmluZ19mbXR0eSBzdHIgZm10dHkgPVxuICBsZXQgRm10X0VCQiBmbXQgPSBmbXRfZWJiX29mX3N0cmluZyBzdHIgaW5cbiAgdHJ5IEZvcm1hdCAodHlwZV9mb3JtYXQgZm10IGZtdHR5LCBzdHIpXG4gIHdpdGggVHlwZV9taXNtYXRjaCAtPlxuICAgIGZhaWx3aXRoX21lc3NhZ2VcbiAgICAgIFwiYmFkIGlucHV0OiBmb3JtYXQgdHlwZSBtaXNtYXRjaCBiZXR3ZWVuICVTIGFuZCAlU1wiXG4gICAgICBzdHIgKHN0cmluZ19vZl9mbXR0eSBmbXR0eSlcblxuKCogQ29udmVydCBhIHN0cmluZyB0byBhIGZvcm1hdCBjb21wYXRpYmxlIHdpdGggYW4gb3RoZXIgZm9ybWF0LiAqKVxuKCogUmFpc2UgYSBGYWlsdXJlIHdpdGggYW4gZXJyb3IgbWVzc2FnZSBpbiBjYXNlIG9mIHR5cGUgbWlzbWF0Y2guICopXG5sZXQgZm9ybWF0X29mX3N0cmluZ19mb3JtYXQgc3RyIChGb3JtYXQgKGZtdCcsIHN0cicpKSA9XG4gIGxldCBGbXRfRUJCIGZtdCA9IGZtdF9lYmJfb2Zfc3RyaW5nIHN0ciBpblxuICB0cnkgRm9ybWF0ICh0eXBlX2Zvcm1hdCBmbXQgKGZtdHR5X29mX2ZtdCBmbXQnKSwgc3RyKVxuICB3aXRoIFR5cGVfbWlzbWF0Y2ggLT5cbiAgICBmYWlsd2l0aF9tZXNzYWdlXG4gICAgICBcImJhZCBpbnB1dDogZm9ybWF0IHR5cGUgbWlzbWF0Y2ggYmV0d2VlbiAlUyBhbmQgJVNcIiBzdHIgc3RyJ1xuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5vcGVuIFByaW50Zjs7XG5cbmxldCBwcmludGVycyA9IHJlZiBbXVxuXG5sZXQgbG9jZm10ID0gZm9ybWF0X29mX3N0cmluZyBcIkZpbGUgXFxcIiVzXFxcIiwgbGluZSAlZCwgY2hhcmFjdGVycyAlZC0lZDogJXNcIjs7XG5cbmxldCBmaWVsZCB4IGkgPVxuICBsZXQgZiA9IE9iai5maWVsZCB4IGkgaW5cbiAgaWYgbm90IChPYmouaXNfYmxvY2sgZikgdGhlblxuICAgIHNwcmludGYgXCIlZFwiIChPYmoubWFnaWMgZiA6IGludCkgICAgICAgICAgICgqIGNhbiBhbHNvIGJlIGEgY2hhciAqKVxuICBlbHNlIGlmIE9iai50YWcgZiA9IE9iai5zdHJpbmdfdGFnIHRoZW5cbiAgICBzcHJpbnRmIFwiJVNcIiAoT2JqLm1hZ2ljIGYgOiBzdHJpbmcpXG4gIGVsc2UgaWYgT2JqLnRhZyBmID0gT2JqLmRvdWJsZV90YWcgdGhlblxuICAgIHN0cmluZ19vZl9mbG9hdCAoT2JqLm1hZ2ljIGYgOiBmbG9hdClcbiAgZWxzZVxuICAgIFwiX1wiXG47O1xubGV0IHJlYyBvdGhlcl9maWVsZHMgeCBpID1cbiAgaWYgaSA+PSBPYmouc2l6ZSB4IHRoZW4gXCJcIlxuICBlbHNlIHNwcmludGYgXCIsICVzJXNcIiAoZmllbGQgeCBpKSAob3RoZXJfZmllbGRzIHggKGkrMSkpXG47O1xubGV0IGZpZWxkcyB4ID1cbiAgbWF0Y2ggT2JqLnNpemUgeCB3aXRoXG4gIHwgMCAtPiBcIlwiXG4gIHwgMSAtPiBcIlwiXG4gIHwgMiAtPiBzcHJpbnRmIFwiKCVzKVwiIChmaWVsZCB4IDEpXG4gIHwgbiAtPiBzcHJpbnRmIFwiKCVzJXMpXCIgKGZpZWxkIHggMSkgKG90aGVyX2ZpZWxkcyB4IDIpXG47O1xuXG5sZXQgdG9fc3RyaW5nIHggPVxuICBsZXQgcmVjIGNvbnYgPSBmdW5jdGlvblxuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgICAgKG1hdGNoIHRyeSBoZCB4IHdpdGggXyAtPiBOb25lIHdpdGhcbiAgICAgICAgfCBTb21lIHMgLT4gc1xuICAgICAgICB8IE5vbmUgLT4gY29udiB0bClcbiAgICB8IFtdIC0+XG4gICAgICAgIG1hdGNoIHggd2l0aFxuICAgICAgICB8IE91dF9vZl9tZW1vcnkgLT4gXCJPdXQgb2YgbWVtb3J5XCJcbiAgICAgICAgfCBTdGFja19vdmVyZmxvdyAtPiBcIlN0YWNrIG92ZXJmbG93XCJcbiAgICAgICAgfCBNYXRjaF9mYWlsdXJlKGZpbGUsIGxpbmUsIGNoYXIpIC0+XG4gICAgICAgICAgICBzcHJpbnRmIGxvY2ZtdCBmaWxlIGxpbmUgY2hhciAoY2hhcis1KSBcIlBhdHRlcm4gbWF0Y2hpbmcgZmFpbGVkXCJcbiAgICAgICAgfCBBc3NlcnRfZmFpbHVyZShmaWxlLCBsaW5lLCBjaGFyKSAtPlxuICAgICAgICAgICAgc3ByaW50ZiBsb2NmbXQgZmlsZSBsaW5lIGNoYXIgKGNoYXIrNikgXCJBc3NlcnRpb24gZmFpbGVkXCJcbiAgICAgICAgfCBVbmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZShmaWxlLCBsaW5lLCBjaGFyKSAtPlxuICAgICAgICAgICAgc3ByaW50ZiBsb2NmbXQgZmlsZSBsaW5lIGNoYXIgKGNoYXIrNikgXCJVbmRlZmluZWQgcmVjdXJzaXZlIG1vZHVsZVwiXG4gICAgICAgIHwgXyAtPlxuICAgICAgICAgICAgbGV0IHggPSBPYmoucmVwciB4IGluXG4gICAgICAgICAgICBpZiBPYmoudGFnIHggPD4gMCB0aGVuXG4gICAgICAgICAgICAgIChPYmoubWFnaWMgKE9iai5maWVsZCB4IDApIDogc3RyaW5nKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBsZXQgY29uc3RydWN0b3IgPVxuICAgICAgICAgICAgICAgIChPYmoubWFnaWMgKE9iai5maWVsZCAoT2JqLmZpZWxkIHggMCkgMCkgOiBzdHJpbmcpIGluXG4gICAgICAgICAgICAgIGNvbnN0cnVjdG9yIF4gKGZpZWxkcyB4KSBpblxuICBjb252ICFwcmludGVyc1xuXG5sZXQgcHJpbnQgZmN0IGFyZyA9XG4gIHRyeVxuICAgIGZjdCBhcmdcbiAgd2l0aCB4IC0+XG4gICAgZXByaW50ZiBcIlVuY2F1Z2h0IGV4Y2VwdGlvbjogJXNcXG5cIiAodG9fc3RyaW5nIHgpO1xuICAgIGZsdXNoIHN0ZGVycjtcbiAgICByYWlzZSB4XG5cbmxldCBjYXRjaCBmY3QgYXJnID1cbiAgdHJ5XG4gICAgZmN0IGFyZ1xuICB3aXRoIHggLT5cbiAgICBmbHVzaCBzdGRvdXQ7XG4gICAgZXByaW50ZiBcIlVuY2F1Z2h0IGV4Y2VwdGlvbjogJXNcXG5cIiAodG9fc3RyaW5nIHgpO1xuICAgIGV4aXQgMlxuXG50eXBlIHJhd19iYWNrdHJhY2Vfc2xvdFxudHlwZSByYXdfYmFja3RyYWNlID0gcmF3X2JhY2t0cmFjZV9zbG90IGFycmF5XG5cbmV4dGVybmFsIGdldF9yYXdfYmFja3RyYWNlOlxuICB1bml0IC0+IHJhd19iYWNrdHJhY2UgPSBcImNhbWxfZ2V0X2V4Y2VwdGlvbl9yYXdfYmFja3RyYWNlXCJcblxudHlwZSBiYWNrdHJhY2Vfc2xvdCA9XG4gIHwgS25vd25fbG9jYXRpb24gb2YgYm9vbCAgICgqIGlzX3JhaXNlICopXG4gICAgICAgICAgICAgICAgICAgICogc3RyaW5nICgqIGZpbGVuYW1lICopXG4gICAgICAgICAgICAgICAgICAgICogaW50ICAgICgqIGxpbmUgbnVtYmVyICopXG4gICAgICAgICAgICAgICAgICAgICogaW50ICAgICgqIHN0YXJ0IGNoYXIgKilcbiAgICAgICAgICAgICAgICAgICAgKiBpbnQgICAgKCogZW5kIGNoYXIgKilcbiAgfCBVbmtub3duX2xvY2F0aW9uIG9mIGJvb2wgKCppc19yYWlzZSopXG5cbigqIHRvIGF2b2lkIHdhcm5pbmcgKilcbmxldCBfID0gW0tub3duX2xvY2F0aW9uIChmYWxzZSwgXCJcIiwgMCwgMCwgMCk7IFVua25vd25fbG9jYXRpb24gZmFsc2VdXG5cbmV4dGVybmFsIGNvbnZlcnRfcmF3X2JhY2t0cmFjZV9zbG90OlxuICByYXdfYmFja3RyYWNlX3Nsb3QgLT4gYmFja3RyYWNlX3Nsb3QgPSBcImNhbWxfY29udmVydF9yYXdfYmFja3RyYWNlX3Nsb3RcIlxuXG5sZXQgY29udmVydF9yYXdfYmFja3RyYWNlIHJiY2t0ID1cbiAgdHJ5IFNvbWUgKEFycmF5Lm1hcCBjb252ZXJ0X3Jhd19iYWNrdHJhY2Vfc2xvdCByYmNrdClcbiAgd2l0aCBGYWlsdXJlIF8gLT4gTm9uZVxuXG5sZXQgZm9ybWF0X2JhY2t0cmFjZV9zbG90IHBvcyBzbG90ID1cbiAgbGV0IGluZm8gaXNfcmFpc2UgPVxuICAgIGlmIGlzX3JhaXNlIHRoZW5cbiAgICAgIGlmIHBvcyA9IDAgdGhlbiBcIlJhaXNlZCBhdFwiIGVsc2UgXCJSZS1yYWlzZWQgYXRcIlxuICAgIGVsc2VcbiAgICAgIGlmIHBvcyA9IDAgdGhlbiBcIlJhaXNlZCBieSBwcmltaXRpdmUgb3BlcmF0aW9uIGF0XCIgZWxzZSBcIkNhbGxlZCBmcm9tXCJcbiAgaW5cbiAgbWF0Y2ggc2xvdCB3aXRoXG4gIHwgVW5rbm93bl9sb2NhdGlvbiB0cnVlIC0+ICgqIGNvbXBpbGVyLWluc2VydGVkIHJlLXJhaXNlLCBza2lwcGVkICopIE5vbmVcbiAgfCBVbmtub3duX2xvY2F0aW9uIGZhbHNlIC0+XG4gICAgICBTb21lIChzcHJpbnRmIFwiJXMgdW5rbm93biBsb2NhdGlvblwiIChpbmZvIGZhbHNlKSlcbiAgfCBLbm93bl9sb2NhdGlvbihpc19yYWlzZSwgZmlsZW5hbWUsIGxpbmVubywgc3RhcnRjaGFyLCBlbmRjaGFyKSAtPlxuICAgICAgU29tZSAoc3ByaW50ZiBcIiVzIGZpbGUgXFxcIiVzXFxcIiwgbGluZSAlZCwgY2hhcmFjdGVycyAlZC0lZFwiXG4gICAgICAgICAgICAgIChpbmZvIGlzX3JhaXNlKSBmaWxlbmFtZSBsaW5lbm8gc3RhcnRjaGFyIGVuZGNoYXIpXG5cbmxldCBwcmludF9leGNlcHRpb25fYmFja3RyYWNlIG91dGNoYW4gYmFja3RyYWNlID1cbiAgbWF0Y2ggYmFja3RyYWNlIHdpdGhcbiAgfCBOb25lIC0+XG4gICAgICBmcHJpbnRmIG91dGNoYW5cbiAgICAgICAgXCIoUHJvZ3JhbSBub3QgbGlua2VkIHdpdGggLWcsIGNhbm5vdCBwcmludCBzdGFjayBiYWNrdHJhY2UpXFxuXCJcbiAgfCBTb21lIGEgLT5cbiAgICAgIGZvciBpID0gMCB0byBBcnJheS5sZW5ndGggYSAtIDEgZG9cbiAgICAgICAgbWF0Y2ggZm9ybWF0X2JhY2t0cmFjZV9zbG90IGkgYS4oaSkgd2l0aFxuICAgICAgICAgIHwgTm9uZSAtPiAoKVxuICAgICAgICAgIHwgU29tZSBzdHIgLT4gZnByaW50ZiBvdXRjaGFuIFwiJXNcXG5cIiBzdHJcbiAgICAgIGRvbmVcblxubGV0IHByaW50X3Jhd19iYWNrdHJhY2Ugb3V0Y2hhbiByYXdfYmFja3RyYWNlID1cbiAgcHJpbnRfZXhjZXB0aW9uX2JhY2t0cmFjZSBvdXRjaGFuIChjb252ZXJ0X3Jhd19iYWNrdHJhY2UgcmF3X2JhY2t0cmFjZSlcblxuKCogY29uZnVzaW5nbHkgbmFtZWQ6IHByaW50cyB0aGUgZ2xvYmFsIGN1cnJlbnQgYmFja3RyYWNlICopXG5sZXQgcHJpbnRfYmFja3RyYWNlIG91dGNoYW4gPVxuICBwcmludF9yYXdfYmFja3RyYWNlIG91dGNoYW4gKGdldF9yYXdfYmFja3RyYWNlICgpKVxuXG5sZXQgYmFja3RyYWNlX3RvX3N0cmluZyBiYWNrdHJhY2UgPVxuICBtYXRjaCBiYWNrdHJhY2Ugd2l0aFxuICB8IE5vbmUgLT5cbiAgICAgXCIoUHJvZ3JhbSBub3QgbGlua2VkIHdpdGggLWcsIGNhbm5vdCBwcmludCBzdGFjayBiYWNrdHJhY2UpXFxuXCJcbiAgfCBTb21lIGEgLT5cbiAgICAgIGxldCBiID0gQnVmZmVyLmNyZWF0ZSAxMDI0IGluXG4gICAgICBmb3IgaSA9IDAgdG8gQXJyYXkubGVuZ3RoIGEgLSAxIGRvXG4gICAgICAgIG1hdGNoIGZvcm1hdF9iYWNrdHJhY2Vfc2xvdCBpIGEuKGkpIHdpdGhcbiAgICAgICAgICB8IE5vbmUgLT4gKClcbiAgICAgICAgICB8IFNvbWUgc3RyIC0+IGJwcmludGYgYiBcIiVzXFxuXCIgc3RyXG4gICAgICBkb25lO1xuICAgICAgQnVmZmVyLmNvbnRlbnRzIGJcblxubGV0IHJhd19iYWNrdHJhY2VfdG9fc3RyaW5nIHJhd19iYWNrdHJhY2UgPVxuICBiYWNrdHJhY2VfdG9fc3RyaW5nIChjb252ZXJ0X3Jhd19iYWNrdHJhY2UgcmF3X2JhY2t0cmFjZSlcblxubGV0IGJhY2t0cmFjZV9zbG90X2lzX3JhaXNlID0gZnVuY3Rpb25cbiAgfCBLbm93bl9sb2NhdGlvbihpc19yYWlzZSwgXywgXywgXywgXykgLT4gaXNfcmFpc2VcbiAgfCBVbmtub3duX2xvY2F0aW9uKGlzX3JhaXNlKSAtPiBpc19yYWlzZVxuXG50eXBlIGxvY2F0aW9uID0ge1xuICBmaWxlbmFtZSA6IHN0cmluZztcbiAgbGluZV9udW1iZXIgOiBpbnQ7XG4gIHN0YXJ0X2NoYXIgOiBpbnQ7XG4gIGVuZF9jaGFyIDogaW50O1xufVxuXG5sZXQgYmFja3RyYWNlX3Nsb3RfbG9jYXRpb24gPSBmdW5jdGlvblxuICB8IFVua25vd25fbG9jYXRpb24gXyAtPiBOb25lXG4gIHwgS25vd25fbG9jYXRpb24oX2lzX3JhaXNlLCBmaWxlbmFtZSwgbGluZV9udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgc3RhcnRfY2hhciwgZW5kX2NoYXIpIC0+XG4gICAgU29tZSB7XG4gICAgICBmaWxlbmFtZTtcbiAgICAgIGxpbmVfbnVtYmVyO1xuICAgICAgc3RhcnRfY2hhcjtcbiAgICAgIGVuZF9jaGFyO1xuICAgIH1cblxubGV0IGJhY2t0cmFjZV9zbG90cyByYXdfYmFja3RyYWNlID1cbiAgKCogVGhlIGRvY3VtZW50YXRpb24gb2YgdGhpcyBmdW5jdGlvbiBndWFyYW50ZWVzIHRoYXQgU29tZSBpc1xuICAgICByZXR1cm5lZCBvbmx5IGlmIGEgcGFydCBvZiB0aGUgdHJhY2UgaXMgdXNhYmxlLiBUaGlzIGdpdmVzIHVzXG4gICAgIGEgYml0IG1vcmUgd29yayB0aGFuIGp1c3QgY29udmVydF9yYXdfYmFja3RyYWNlLCBidXQgaXQgbWFrZXMgdGhlXG4gICAgIEFQSSBtb3JlIHVzZXItZnJpZW5kbHkgLS0gb3RoZXJ3aXNlIG1vc3QgdXNlcnMgd291bGQgaGF2ZSB0b1xuICAgICByZWltcGxlbWVudCB0aGUgXCJQcm9ncmFtIG5vdCBsaW5rZWQgd2l0aCAtZywgc29ycnlcIiBsb2dpY1xuICAgICB0aGVtc2VsdmVzLiAqKVxuICBtYXRjaCBjb252ZXJ0X3Jhd19iYWNrdHJhY2UgcmF3X2JhY2t0cmFjZSB3aXRoXG4gICAgfCBOb25lIC0+IE5vbmVcbiAgICB8IFNvbWUgYmFja3RyYWNlIC0+XG4gICAgICBsZXQgdXNhYmxlX3Nsb3QgPSBmdW5jdGlvblxuICAgICAgICB8IFVua25vd25fbG9jYXRpb24gXyAtPiBmYWxzZVxuICAgICAgICB8IEtub3duX2xvY2F0aW9uIF8gLT4gdHJ1ZSBpblxuICAgICAgbGV0IHJlYyBleGlzdHNfdXNhYmxlID0gZnVuY3Rpb25cbiAgICAgICAgfCAoLTEpIC0+IGZhbHNlXG4gICAgICAgIHwgaSAtPiB1c2FibGVfc2xvdCBiYWNrdHJhY2UuKGkpIHx8IGV4aXN0c191c2FibGUgKGkgLSAxKSBpblxuICAgICAgaWYgZXhpc3RzX3VzYWJsZSAoQXJyYXkubGVuZ3RoIGJhY2t0cmFjZSAtIDEpXG4gICAgICB0aGVuIFNvbWUgYmFja3RyYWNlXG4gICAgICBlbHNlIE5vbmVcblxubW9kdWxlIFNsb3QgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gYmFja3RyYWNlX3Nsb3RcbiAgbGV0IGZvcm1hdCA9IGZvcm1hdF9iYWNrdHJhY2Vfc2xvdFxuICBsZXQgaXNfcmFpc2UgPSBiYWNrdHJhY2Vfc2xvdF9pc19yYWlzZVxuICBsZXQgbG9jYXRpb24gPSBiYWNrdHJhY2Vfc2xvdF9sb2NhdGlvblxuZW5kXG5cbmxldCByYXdfYmFja3RyYWNlX2xlbmd0aCBiY2t0ID0gQXJyYXkubGVuZ3RoIGJja3RcbmxldCBnZXRfcmF3X2JhY2t0cmFjZV9zbG90IGJja3QgaSA9IEFycmF5LmdldCBiY2t0IGlcblxuKCogY29uZnVzaW5nbHkgbmFtZWQ6XG4gICByZXR1cm5zIHRoZSAqc3RyaW5nKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnbG9iYWwgY3VycmVudCBiYWNrdHJhY2UgKilcbmxldCBnZXRfYmFja3RyYWNlICgpID1cbiAgYmFja3RyYWNlX3RvX3N0cmluZyAoY29udmVydF9yYXdfYmFja3RyYWNlIChnZXRfcmF3X2JhY2t0cmFjZSAoKSkpXG5cbmV4dGVybmFsIHJlY29yZF9iYWNrdHJhY2U6IGJvb2wgLT4gdW5pdCA9IFwiY2FtbF9yZWNvcmRfYmFja3RyYWNlXCJcbmV4dGVybmFsIGJhY2t0cmFjZV9zdGF0dXM6IHVuaXQgLT4gYm9vbCA9IFwiY2FtbF9iYWNrdHJhY2Vfc3RhdHVzXCJcblxubGV0IHJlZ2lzdGVyX3ByaW50ZXIgZm4gPVxuICBwcmludGVycyA6PSBmbiA6OiAhcHJpbnRlcnNcblxuZXh0ZXJuYWwgZ2V0X2NhbGxzdGFjazogaW50IC0+IHJhd19iYWNrdHJhY2UgPSBcImNhbWxfZ2V0X2N1cnJlbnRfY2FsbHN0YWNrXCJcblxubGV0IGV4bl9zbG90IHggPVxuICBsZXQgeCA9IE9iai5yZXByIHggaW5cbiAgaWYgT2JqLnRhZyB4ID0gMCB0aGVuIE9iai5maWVsZCB4IDAgZWxzZSB4XG5cbmxldCBleG5fc2xvdF9pZCB4ID1cbiAgbGV0IHNsb3QgPSBleG5fc2xvdCB4IGluXG4gIChPYmoub2JqIChPYmouZmllbGQgc2xvdCAxKSA6IGludClcblxubGV0IGV4bl9zbG90X25hbWUgeCA9XG4gIGxldCBzbG90ID0gZXhuX3Nsb3QgeCBpblxuICAoT2JqLm9iaiAoT2JqLmZpZWxkIHNsb3QgMCkgOiBzdHJpbmcpXG5cblxubGV0IHVuY2F1Z2h0X2V4Y2VwdGlvbl9oYW5kbGVyID0gcmVmIE5vbmVcblxubGV0IHNldF91bmNhdWdodF9leGNlcHRpb25faGFuZGxlciBmbiA9IHVuY2F1Z2h0X2V4Y2VwdGlvbl9oYW5kbGVyIDo9IFNvbWUgZm5cblxubGV0IGVtcHR5X2JhY2t0cmFjZSA6IHJhd19iYWNrdHJhY2UgPSBPYmoub2JqIChPYmoubmV3X2Jsb2NrIE9iai5hYnN0cmFjdF90YWcgMClcblxubGV0IHRyeV9nZXRfcmF3X2JhY2t0cmFjZSAoKSA9XG4gIHRyeVxuICAgIGdldF9yYXdfYmFja3RyYWNlICgpXG4gIHdpdGggXyAoKiBPdXRfb2ZfbWVtb3J5PyAqKSAtPlxuICAgIGVtcHR5X2JhY2t0cmFjZVxuXG5sZXQgaGFuZGxlX3VuY2F1Z2h0X2V4Y2VwdGlvbicgZXhuIGRlYnVnZ2VyX2luX3VzZSA9XG4gIHRyeVxuICAgICgqIEdldCB0aGUgYmFja3RyYWNlIG5vdywgaW4gY2FzZSBvbmUgb2YgdGhlIFthdF9leGl0XSBmdW5jdGlvblxuICAgICAgIGRlc3Ryb3lzIGl0LiAqKVxuICAgIGxldCByYXdfYmFja3RyYWNlID1cbiAgICAgIGlmIGRlYnVnZ2VyX2luX3VzZSAoKiBTYW1lIHRlc3QgYXMgaW4gW2J5dGVydW4vcHJpbnRleGMuY10gKikgdGhlblxuICAgICAgICBlbXB0eV9iYWNrdHJhY2VcbiAgICAgIGVsc2VcbiAgICAgICAgdHJ5X2dldF9yYXdfYmFja3RyYWNlICgpXG4gICAgaW5cbiAgICAodHJ5IFBlcnZhc2l2ZXMuZG9fYXRfZXhpdCAoKSB3aXRoIF8gLT4gKCkpO1xuICAgIG1hdGNoICF1bmNhdWdodF9leGNlcHRpb25faGFuZGxlciB3aXRoXG4gICAgfCBOb25lIC0+XG4gICAgICAgIGVwcmludGYgXCJGYXRhbCBlcnJvcjogZXhjZXB0aW9uICVzXFxuXCIgKHRvX3N0cmluZyBleG4pO1xuICAgICAgICBwcmludF9yYXdfYmFja3RyYWNlIHN0ZGVyciByYXdfYmFja3RyYWNlO1xuICAgICAgICBmbHVzaCBzdGRlcnJcbiAgICB8IFNvbWUgaGFuZGxlciAtPlxuICAgICAgICB0cnlcbiAgICAgICAgICBoYW5kbGVyIGV4biByYXdfYmFja3RyYWNlXG4gICAgICAgIHdpdGggZXhuJyAtPlxuICAgICAgICAgIGxldCByYXdfYmFja3RyYWNlJyA9IHRyeV9nZXRfcmF3X2JhY2t0cmFjZSAoKSBpblxuICAgICAgICAgIGVwcmludGYgXCJGYXRhbCBlcnJvcjogZXhjZXB0aW9uICVzXFxuXCIgKHRvX3N0cmluZyBleG4pO1xuICAgICAgICAgIHByaW50X3Jhd19iYWNrdHJhY2Ugc3RkZXJyIHJhd19iYWNrdHJhY2U7XG4gICAgICAgICAgZXByaW50ZiBcIkZhdGFsIGVycm9yIGluIHVuY2F1Z2h0IGV4Y2VwdGlvbiBoYW5kbGVyOiBleGNlcHRpb24gJXNcXG5cIlxuICAgICAgICAgICAgKHRvX3N0cmluZyBleG4nKTtcbiAgICAgICAgICBwcmludF9yYXdfYmFja3RyYWNlIHN0ZGVyciByYXdfYmFja3RyYWNlJztcbiAgICAgICAgICBmbHVzaCBzdGRlcnJcbiAgd2l0aFxuICAgIHwgT3V0X29mX21lbW9yeSAtPlxuICAgICAgICBwcmVycl9lbmRsaW5lXG4gICAgICAgICAgXCJGYXRhbCBlcnJvcjogb3V0IG9mIG1lbW9yeSBpbiB1bmNhdWdodCBleGNlcHRpb24gaGFuZGxlclwiXG5cbigqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IFtjYW1sX2ZhdGFsX3VuY2F1Z2h0X2V4Y2VwdGlvbl0gaW5cbiAgIFtieXRlcnVuL3ByaW50ZXhjLmNdIHdoaWNoIGV4cGVjdHMgbm8gZXhjZXB0aW9uIGlzIHJhaXNlZC4gKilcbmxldCBoYW5kbGVfdW5jYXVnaHRfZXhjZXB0aW9uIGV4biBkZWJ1Z2dlcl9pbl91c2UgPVxuICB0cnlcbiAgICBoYW5kbGVfdW5jYXVnaHRfZXhjZXB0aW9uJyBleG4gZGVidWdnZXJfaW5fdXNlXG4gIHdpdGggXyAtPlxuICAgICgqIFRoZXJlIGlzIG5vdCBtdWNoIHdlIGNhbiBkbyBhdCB0aGlzIHBvaW50ICopXG4gICAgKClcblxuZXh0ZXJuYWwgcmVnaXN0ZXJfbmFtZWRfdmFsdWUgOiBzdHJpbmcgLT4gJ2EgLT4gdW5pdFxuICA9IFwiY2FtbF9yZWdpc3Rlcl9uYW1lZF92YWx1ZVwiXG5cbmxldCAoKSA9XG4gIHJlZ2lzdGVyX25hbWVkX3ZhbHVlIFwiUHJpbnRleGMuaGFuZGxlX3VuY2F1Z2h0X2V4Y2VwdGlvblwiXG4gICAgaGFuZGxlX3VuY2F1Z2h0X2V4Y2VwdGlvblxuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgWGF2aWVyIExlcm95IGFuZCBEYW1pZW4gRG9saWdleiwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5sZXQgZ2VuZXJpY19xdW90ZSBxdW90ZXF1b3RlIHMgPVxuICBsZXQgbCA9IFN0cmluZy5sZW5ndGggcyBpblxuICBsZXQgYiA9IEJ1ZmZlci5jcmVhdGUgKGwgKyAyMCkgaW5cbiAgQnVmZmVyLmFkZF9jaGFyIGIgJ1xcJyc7XG4gIGZvciBpID0gMCB0byBsIC0gMSBkb1xuICAgIGlmIHMuW2ldID0gJ1xcJydcbiAgICB0aGVuIEJ1ZmZlci5hZGRfc3RyaW5nIGIgcXVvdGVxdW90ZVxuICAgIGVsc2UgQnVmZmVyLmFkZF9jaGFyIGIgIHMuW2ldXG4gIGRvbmU7XG4gIEJ1ZmZlci5hZGRfY2hhciBiICdcXCcnO1xuICBCdWZmZXIuY29udGVudHMgYlxuXG4oKiBUaGlzIGZ1bmN0aW9uIGltcGxlbWVudHMgdGhlIE9wZW4gR3JvdXAgc3BlY2lmaWNhdGlvbiBmb3VuZCBoZXJlOlxuICBbWzFdXSBodHRwOi8vcHVicy5vcGVuZ3JvdXAub3JnL29ubGluZXB1YnMvOTY5OTkxOTc5OS91dGlsaXRpZXMvYmFzZW5hbWUuaHRtbFxuICBJbiBzdGVwIDEgb2YgW1sxXV0sIHdlIGNob29zZSB0byByZXR1cm4gXCIuXCIgZm9yIGVtcHR5IGlucHV0LlxuICAgIChmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIE9DYW1sKVxuICBJbiBzdGVwIDIsIHdlIGNob29zZSB0byBwcm9jZXNzIFwiLy9cIiBub3JtYWxseS5cbiAgU3RlcCA2IGlzIG5vdCBpbXBsZW1lbnRlZDogd2UgY29uc2lkZXIgdGhhdCB0aGUgW3N1ZmZpeF0gb3BlcmFuZCBpc1xuICAgIGFsd2F5cyBhYnNlbnQuICBTdWZmaXhlcyBhcmUgaGFuZGxlZCBieSBbY2hvcF9zdWZmaXhdIGFuZCBbY2hvcF9leHRlbnNpb25dLlxuKilcbmxldCBnZW5lcmljX2Jhc2VuYW1lIGlzX2Rpcl9zZXAgY3VycmVudF9kaXJfbmFtZSBuYW1lID1cbiAgbGV0IHJlYyBmaW5kX2VuZCBuID1cbiAgICBpZiBuIDwgMCB0aGVuIFN0cmluZy5zdWIgbmFtZSAwIDFcbiAgICBlbHNlIGlmIGlzX2Rpcl9zZXAgbmFtZSBuIHRoZW4gZmluZF9lbmQgKG4gLSAxKVxuICAgIGVsc2UgZmluZF9iZWcgbiAobiArIDEpXG4gIGFuZCBmaW5kX2JlZyBuIHAgPVxuICAgIGlmIG4gPCAwIHRoZW4gU3RyaW5nLnN1YiBuYW1lIDAgcFxuICAgIGVsc2UgaWYgaXNfZGlyX3NlcCBuYW1lIG4gdGhlbiBTdHJpbmcuc3ViIG5hbWUgKG4gKyAxKSAocCAtIG4gLSAxKVxuICAgIGVsc2UgZmluZF9iZWcgKG4gLSAxKSBwXG4gIGluXG4gIGlmIG5hbWUgPSBcIlwiXG4gIHRoZW4gY3VycmVudF9kaXJfbmFtZVxuICBlbHNlIGZpbmRfZW5kIChTdHJpbmcubGVuZ3RoIG5hbWUgLSAxKVxuXG4oKiBUaGlzIGZ1bmN0aW9uIGltcGxlbWVudHMgdGhlIE9wZW4gR3JvdXAgc3BlY2lmaWNhdGlvbiBmb3VuZCBoZXJlOlxuICBbWzJdXSBodHRwOi8vcHVicy5vcGVuZ3JvdXAub3JnL29ubGluZXB1YnMvOTY5OTkxOTc5OS91dGlsaXRpZXMvZGlybmFtZS5odG1sXG4gIEluIHN0ZXAgNiBvZiBbWzJdXSwgd2UgY2hvb3NlIHRvIHByb2Nlc3MgXCIvL1wiIG5vcm1hbGx5LlxuKilcbmxldCBnZW5lcmljX2Rpcm5hbWUgaXNfZGlyX3NlcCBjdXJyZW50X2Rpcl9uYW1lIG5hbWUgPVxuICBsZXQgcmVjIHRyYWlsaW5nX3NlcCBuID1cbiAgICBpZiBuIDwgMCB0aGVuIFN0cmluZy5zdWIgbmFtZSAwIDFcbiAgICBlbHNlIGlmIGlzX2Rpcl9zZXAgbmFtZSBuIHRoZW4gdHJhaWxpbmdfc2VwIChuIC0gMSlcbiAgICBlbHNlIGJhc2UgblxuICBhbmQgYmFzZSBuID1cbiAgICBpZiBuIDwgMCB0aGVuIGN1cnJlbnRfZGlyX25hbWVcbiAgICBlbHNlIGlmIGlzX2Rpcl9zZXAgbmFtZSBuIHRoZW4gaW50ZXJtZWRpYXRlX3NlcCBuXG4gICAgZWxzZSBiYXNlIChuIC0gMSlcbiAgYW5kIGludGVybWVkaWF0ZV9zZXAgbiA9XG4gICAgaWYgbiA8IDAgdGhlbiBTdHJpbmcuc3ViIG5hbWUgMCAxXG4gICAgZWxzZSBpZiBpc19kaXJfc2VwIG5hbWUgbiB0aGVuIGludGVybWVkaWF0ZV9zZXAgKG4gLSAxKVxuICAgIGVsc2UgU3RyaW5nLnN1YiBuYW1lIDAgKG4gKyAxKVxuICBpblxuICBpZiBuYW1lID0gXCJcIlxuICB0aGVuIGN1cnJlbnRfZGlyX25hbWVcbiAgZWxzZSB0cmFpbGluZ19zZXAgKFN0cmluZy5sZW5ndGggbmFtZSAtIDEpXG5cbm1vZHVsZSBVbml4ID0gc3RydWN0XG4gIGxldCBjdXJyZW50X2Rpcl9uYW1lID0gXCIuXCJcbiAgbGV0IHBhcmVudF9kaXJfbmFtZSA9IFwiLi5cIlxuICBsZXQgZGlyX3NlcCA9IFwiL1wiXG4gIGxldCBpc19kaXJfc2VwIHMgaSA9IHMuW2ldID0gJy8nXG4gIGxldCBpc19yZWxhdGl2ZSBuID0gU3RyaW5nLmxlbmd0aCBuIDwgMSB8fCBuLlswXSA8PiAnLyc7O1xuICBsZXQgaXNfaW1wbGljaXQgbiA9XG4gICAgaXNfcmVsYXRpdmUgblxuICAgICYmIChTdHJpbmcubGVuZ3RoIG4gPCAyIHx8IFN0cmluZy5zdWIgbiAwIDIgPD4gXCIuL1wiKVxuICAgICYmIChTdHJpbmcubGVuZ3RoIG4gPCAzIHx8IFN0cmluZy5zdWIgbiAwIDMgPD4gXCIuLi9cIilcbiAgbGV0IGNoZWNrX3N1ZmZpeCBuYW1lIHN1ZmYgPVxuICAgIFN0cmluZy5sZW5ndGggbmFtZSA+PSBTdHJpbmcubGVuZ3RoIHN1ZmYgJiZcbiAgICBTdHJpbmcuc3ViIG5hbWUgKFN0cmluZy5sZW5ndGggbmFtZSAtIFN0cmluZy5sZW5ndGggc3VmZilcbiAgICAgICAgICAgICAgICAgICAgKFN0cmluZy5sZW5ndGggc3VmZikgPSBzdWZmXG4gIGxldCB0ZW1wX2Rpcl9uYW1lID1cbiAgICB0cnkgU3lzLmdldGVudiBcIlRNUERJUlwiIHdpdGggTm90X2ZvdW5kIC0+IFwiL3RtcFwiXG4gIGxldCBxdW90ZSA9IGdlbmVyaWNfcXVvdGUgXCInXFxcXCcnXCJcbiAgbGV0IGJhc2VuYW1lID0gZ2VuZXJpY19iYXNlbmFtZSBpc19kaXJfc2VwIGN1cnJlbnRfZGlyX25hbWVcbiAgbGV0IGRpcm5hbWUgPSBnZW5lcmljX2Rpcm5hbWUgaXNfZGlyX3NlcCBjdXJyZW50X2Rpcl9uYW1lXG5lbmRcblxubW9kdWxlIFdpbjMyID0gc3RydWN0XG4gIGxldCBjdXJyZW50X2Rpcl9uYW1lID0gXCIuXCJcbiAgbGV0IHBhcmVudF9kaXJfbmFtZSA9IFwiLi5cIlxuICBsZXQgZGlyX3NlcCA9IFwiXFxcXFwiXG4gIGxldCBpc19kaXJfc2VwIHMgaSA9IGxldCBjID0gcy5baV0gaW4gYyA9ICcvJyB8fCBjID0gJ1xcXFwnIHx8IGMgPSAnOidcbiAgbGV0IGlzX3JlbGF0aXZlIG4gPVxuICAgIChTdHJpbmcubGVuZ3RoIG4gPCAxIHx8IG4uWzBdIDw+ICcvJylcbiAgICAmJiAoU3RyaW5nLmxlbmd0aCBuIDwgMSB8fCBuLlswXSA8PiAnXFxcXCcpXG4gICAgJiYgKFN0cmluZy5sZW5ndGggbiA8IDIgfHwgbi5bMV0gPD4gJzonKVxuICBsZXQgaXNfaW1wbGljaXQgbiA9XG4gICAgaXNfcmVsYXRpdmUgblxuICAgICYmIChTdHJpbmcubGVuZ3RoIG4gPCAyIHx8IFN0cmluZy5zdWIgbiAwIDIgPD4gXCIuL1wiKVxuICAgICYmIChTdHJpbmcubGVuZ3RoIG4gPCAyIHx8IFN0cmluZy5zdWIgbiAwIDIgPD4gXCIuXFxcXFwiKVxuICAgICYmIChTdHJpbmcubGVuZ3RoIG4gPCAzIHx8IFN0cmluZy5zdWIgbiAwIDMgPD4gXCIuLi9cIilcbiAgICAmJiAoU3RyaW5nLmxlbmd0aCBuIDwgMyB8fCBTdHJpbmcuc3ViIG4gMCAzIDw+IFwiLi5cXFxcXCIpXG4gIGxldCBjaGVja19zdWZmaXggbmFtZSBzdWZmID1cbiAgIFN0cmluZy5sZW5ndGggbmFtZSA+PSBTdHJpbmcubGVuZ3RoIHN1ZmYgJiZcbiAgIChsZXQgcyA9IFN0cmluZy5zdWIgbmFtZSAoU3RyaW5nLmxlbmd0aCBuYW1lIC0gU3RyaW5nLmxlbmd0aCBzdWZmKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChTdHJpbmcubGVuZ3RoIHN1ZmYpIGluXG4gICAgU3RyaW5nLmxvd2VyY2FzZSBzID0gU3RyaW5nLmxvd2VyY2FzZSBzdWZmKVxuICBsZXQgdGVtcF9kaXJfbmFtZSA9XG4gICAgdHJ5IFN5cy5nZXRlbnYgXCJURU1QXCIgd2l0aCBOb3RfZm91bmQgLT4gXCIuXCJcbiAgbGV0IHF1b3RlIHMgPVxuICAgIGxldCBsID0gU3RyaW5nLmxlbmd0aCBzIGluXG4gICAgbGV0IGIgPSBCdWZmZXIuY3JlYXRlIChsICsgMjApIGluXG4gICAgQnVmZmVyLmFkZF9jaGFyIGIgJ1xcXCInO1xuICAgIGxldCByZWMgbG9vcCBpID1cbiAgICAgIGlmIGkgPSBsIHRoZW4gQnVmZmVyLmFkZF9jaGFyIGIgJ1xcXCInIGVsc2VcbiAgICAgIG1hdGNoIHMuW2ldIHdpdGhcbiAgICAgIHwgJ1xcXCInIC0+IGxvb3BfYnMgMCBpO1xuICAgICAgfCAnXFxcXCcgLT4gbG9vcF9icyAwIGk7XG4gICAgICB8IGMgICAgLT4gQnVmZmVyLmFkZF9jaGFyIGIgYzsgbG9vcCAoaSsxKTtcbiAgICBhbmQgbG9vcF9icyBuIGkgPVxuICAgICAgaWYgaSA9IGwgdGhlbiBiZWdpblxuICAgICAgICBCdWZmZXIuYWRkX2NoYXIgYiAnXFxcIic7XG4gICAgICAgIGFkZF9icyBuO1xuICAgICAgZW5kIGVsc2UgYmVnaW5cbiAgICAgICAgbWF0Y2ggcy5baV0gd2l0aFxuICAgICAgICB8ICdcXFwiJyAtPiBhZGRfYnMgKDIqbisxKTsgQnVmZmVyLmFkZF9jaGFyIGIgJ1xcXCInOyBsb29wIChpKzEpO1xuICAgICAgICB8ICdcXFxcJyAtPiBsb29wX2JzIChuKzEpIChpKzEpO1xuICAgICAgICB8IGMgICAgLT4gYWRkX2JzIG47IGxvb3AgaVxuICAgICAgZW5kXG4gICAgYW5kIGFkZF9icyBuID0gZm9yIF9qID0gMSB0byBuIGRvIEJ1ZmZlci5hZGRfY2hhciBiICdcXFxcJzsgZG9uZVxuICAgIGluXG4gICAgbG9vcCAwO1xuICAgIEJ1ZmZlci5jb250ZW50cyBiXG4gIGxldCBoYXNfZHJpdmUgcyA9XG4gICAgbGV0IGlzX2xldHRlciA9IGZ1bmN0aW9uXG4gICAgICB8ICdBJyAuLiAnWicgfCAnYScgLi4gJ3onIC0+IHRydWVcbiAgICAgIHwgXyAtPiBmYWxzZVxuICAgIGluXG4gICAgU3RyaW5nLmxlbmd0aCBzID49IDIgJiYgaXNfbGV0dGVyIHMuWzBdICYmIHMuWzFdID0gJzonXG4gIGxldCBkcml2ZV9hbmRfcGF0aCBzID1cbiAgICBpZiBoYXNfZHJpdmUgc1xuICAgIHRoZW4gKFN0cmluZy5zdWIgcyAwIDIsIFN0cmluZy5zdWIgcyAyIChTdHJpbmcubGVuZ3RoIHMgLSAyKSlcbiAgICBlbHNlIChcIlwiLCBzKVxuICBsZXQgZGlybmFtZSBzID1cbiAgICBsZXQgKGRyaXZlLCBwYXRoKSA9IGRyaXZlX2FuZF9wYXRoIHMgaW5cbiAgICBsZXQgZGlyID0gZ2VuZXJpY19kaXJuYW1lIGlzX2Rpcl9zZXAgY3VycmVudF9kaXJfbmFtZSBwYXRoIGluXG4gICAgZHJpdmUgXiBkaXJcbiAgbGV0IGJhc2VuYW1lIHMgPVxuICAgIGxldCAoZHJpdmUsIHBhdGgpID0gZHJpdmVfYW5kX3BhdGggcyBpblxuICAgIGdlbmVyaWNfYmFzZW5hbWUgaXNfZGlyX3NlcCBjdXJyZW50X2Rpcl9uYW1lIHBhdGhcbmVuZFxuXG5tb2R1bGUgQ3lnd2luID0gc3RydWN0XG4gIGxldCBjdXJyZW50X2Rpcl9uYW1lID0gXCIuXCJcbiAgbGV0IHBhcmVudF9kaXJfbmFtZSA9IFwiLi5cIlxuICBsZXQgZGlyX3NlcCA9IFwiL1wiXG4gIGxldCBpc19kaXJfc2VwID0gV2luMzIuaXNfZGlyX3NlcFxuICBsZXQgaXNfcmVsYXRpdmUgPSBXaW4zMi5pc19yZWxhdGl2ZVxuICBsZXQgaXNfaW1wbGljaXQgPSBXaW4zMi5pc19pbXBsaWNpdFxuICBsZXQgY2hlY2tfc3VmZml4ID0gV2luMzIuY2hlY2tfc3VmZml4XG4gIGxldCB0ZW1wX2Rpcl9uYW1lID0gVW5peC50ZW1wX2Rpcl9uYW1lXG4gIGxldCBxdW90ZSA9IFVuaXgucXVvdGVcbiAgbGV0IGJhc2VuYW1lID0gZ2VuZXJpY19iYXNlbmFtZSBpc19kaXJfc2VwIGN1cnJlbnRfZGlyX25hbWVcbiAgbGV0IGRpcm5hbWUgPSBnZW5lcmljX2Rpcm5hbWUgaXNfZGlyX3NlcCBjdXJyZW50X2Rpcl9uYW1lXG5lbmRcblxubGV0IChjdXJyZW50X2Rpcl9uYW1lLCBwYXJlbnRfZGlyX25hbWUsIGRpcl9zZXAsIGlzX2Rpcl9zZXAsXG4gICAgIGlzX3JlbGF0aXZlLCBpc19pbXBsaWNpdCwgY2hlY2tfc3VmZml4LCB0ZW1wX2Rpcl9uYW1lLCBxdW90ZSwgYmFzZW5hbWUsXG4gICAgIGRpcm5hbWUpID1cbiAgbWF0Y2ggU3lzLm9zX3R5cGUgd2l0aFxuICAgIFwiVW5peFwiIC0+XG4gICAgICAoVW5peC5jdXJyZW50X2Rpcl9uYW1lLCBVbml4LnBhcmVudF9kaXJfbmFtZSwgVW5peC5kaXJfc2VwLFxuICAgICAgIFVuaXguaXNfZGlyX3NlcCxcbiAgICAgICBVbml4LmlzX3JlbGF0aXZlLCBVbml4LmlzX2ltcGxpY2l0LCBVbml4LmNoZWNrX3N1ZmZpeCxcbiAgICAgICBVbml4LnRlbXBfZGlyX25hbWUsIFVuaXgucXVvdGUsIFVuaXguYmFzZW5hbWUsIFVuaXguZGlybmFtZSlcbiAgfCBcIldpbjMyXCIgLT5cbiAgICAgIChXaW4zMi5jdXJyZW50X2Rpcl9uYW1lLCBXaW4zMi5wYXJlbnRfZGlyX25hbWUsIFdpbjMyLmRpcl9zZXAsXG4gICAgICAgV2luMzIuaXNfZGlyX3NlcCxcbiAgICAgICBXaW4zMi5pc19yZWxhdGl2ZSwgV2luMzIuaXNfaW1wbGljaXQsIFdpbjMyLmNoZWNrX3N1ZmZpeCxcbiAgICAgICBXaW4zMi50ZW1wX2Rpcl9uYW1lLCBXaW4zMi5xdW90ZSwgV2luMzIuYmFzZW5hbWUsIFdpbjMyLmRpcm5hbWUpXG4gIHwgXCJDeWd3aW5cIiAtPlxuICAgICAgKEN5Z3dpbi5jdXJyZW50X2Rpcl9uYW1lLCBDeWd3aW4ucGFyZW50X2Rpcl9uYW1lLCBDeWd3aW4uZGlyX3NlcCxcbiAgICAgICBDeWd3aW4uaXNfZGlyX3NlcCxcbiAgICAgICBDeWd3aW4uaXNfcmVsYXRpdmUsIEN5Z3dpbi5pc19pbXBsaWNpdCwgQ3lnd2luLmNoZWNrX3N1ZmZpeCxcbiAgICAgICBDeWd3aW4udGVtcF9kaXJfbmFtZSwgQ3lnd2luLnF1b3RlLCBDeWd3aW4uYmFzZW5hbWUsIEN5Z3dpbi5kaXJuYW1lKVxuICB8IF8gLT4gYXNzZXJ0IGZhbHNlXG5cbmxldCBjb25jYXQgZGlybmFtZSBmaWxlbmFtZSA9XG4gIGxldCBsID0gU3RyaW5nLmxlbmd0aCBkaXJuYW1lIGluXG4gIGlmIGwgPSAwIHx8IGlzX2Rpcl9zZXAgZGlybmFtZSAobC0xKVxuICB0aGVuIGRpcm5hbWUgXiBmaWxlbmFtZVxuICBlbHNlIGRpcm5hbWUgXiBkaXJfc2VwIF4gZmlsZW5hbWVcblxubGV0IGNob3Bfc3VmZml4IG5hbWUgc3VmZiA9XG4gIGxldCBuID0gU3RyaW5nLmxlbmd0aCBuYW1lIC0gU3RyaW5nLmxlbmd0aCBzdWZmIGluXG4gIGlmIG4gPCAwIHRoZW4gaW52YWxpZF9hcmcgXCJGaWxlbmFtZS5jaG9wX3N1ZmZpeFwiIGVsc2UgU3RyaW5nLnN1YiBuYW1lIDAgblxuXG5sZXQgY2hvcF9leHRlbnNpb24gbmFtZSA9XG4gIGxldCByZWMgc2VhcmNoX2RvdCBpID1cbiAgICBpZiBpIDwgMCB8fCBpc19kaXJfc2VwIG5hbWUgaSB0aGVuIGludmFsaWRfYXJnIFwiRmlsZW5hbWUuY2hvcF9leHRlbnNpb25cIlxuICAgIGVsc2UgaWYgbmFtZS5baV0gPSAnLicgdGhlbiBTdHJpbmcuc3ViIG5hbWUgMCBpXG4gICAgZWxzZSBzZWFyY2hfZG90IChpIC0gMSkgaW5cbiAgc2VhcmNoX2RvdCAoU3RyaW5nLmxlbmd0aCBuYW1lIC0gMSlcblxuZXh0ZXJuYWwgb3Blbl9kZXNjOiBzdHJpbmcgLT4gb3Blbl9mbGFnIGxpc3QgLT4gaW50IC0+IGludCA9IFwiY2FtbF9zeXNfb3BlblwiXG5leHRlcm5hbCBjbG9zZV9kZXNjOiBpbnQgLT4gdW5pdCA9IFwiY2FtbF9zeXNfY2xvc2VcIlxuXG5sZXQgcHJuZyA9IGxhenkoUmFuZG9tLlN0YXRlLm1ha2Vfc2VsZl9pbml0ICgpKTs7XG5cbmxldCB0ZW1wX2ZpbGVfbmFtZSB0ZW1wX2RpciBwcmVmaXggc3VmZml4ID1cbiAgbGV0IHJuZCA9IChSYW5kb20uU3RhdGUuYml0cyAoTGF6eS5mb3JjZSBwcm5nKSkgbGFuZCAweEZGRkZGRiBpblxuICBjb25jYXQgdGVtcF9kaXIgKFByaW50Zi5zcHJpbnRmIFwiJXMlMDZ4JXNcIiBwcmVmaXggcm5kIHN1ZmZpeClcbjs7XG5cbmxldCBjdXJyZW50X3RlbXBfZGlyX25hbWUgPSByZWYgdGVtcF9kaXJfbmFtZVxuXG5sZXQgc2V0X3RlbXBfZGlyX25hbWUgcyA9IGN1cnJlbnRfdGVtcF9kaXJfbmFtZSA6PSBzXG5sZXQgZ2V0X3RlbXBfZGlyX25hbWUgKCkgPSAhY3VycmVudF90ZW1wX2Rpcl9uYW1lXG5cbmxldCB0ZW1wX2ZpbGUgPyh0ZW1wX2RpciA9ICFjdXJyZW50X3RlbXBfZGlyX25hbWUpIHByZWZpeCBzdWZmaXggPVxuICBsZXQgcmVjIHRyeV9uYW1lIGNvdW50ZXIgPVxuICAgIGxldCBuYW1lID0gdGVtcF9maWxlX25hbWUgdGVtcF9kaXIgcHJlZml4IHN1ZmZpeCBpblxuICAgIHRyeVxuICAgICAgY2xvc2VfZGVzYyhvcGVuX2Rlc2MgbmFtZSBbT3Blbl93cm9ubHk7IE9wZW5fY3JlYXQ7IE9wZW5fZXhjbF0gMG82MDApO1xuICAgICAgbmFtZVxuICAgIHdpdGggU3lzX2Vycm9yIF8gYXMgZSAtPlxuICAgICAgaWYgY291bnRlciA+PSAxMDAwIHRoZW4gcmFpc2UgZSBlbHNlIHRyeV9uYW1lIChjb3VudGVyICsgMSlcbiAgaW4gdHJ5X25hbWUgMFxuXG5sZXQgb3Blbl90ZW1wX2ZpbGUgPyhtb2RlID0gW09wZW5fdGV4dF0pID8odGVtcF9kaXIgPSAhY3VycmVudF90ZW1wX2Rpcl9uYW1lKVxuICAgICAgICAgICAgICAgICAgIHByZWZpeCBzdWZmaXggPVxuICBsZXQgcmVjIHRyeV9uYW1lIGNvdW50ZXIgPVxuICAgIGxldCBuYW1lID0gdGVtcF9maWxlX25hbWUgdGVtcF9kaXIgcHJlZml4IHN1ZmZpeCBpblxuICAgIHRyeVxuICAgICAgKG5hbWUsXG4gICAgICAgb3Blbl9vdXRfZ2VuIChPcGVuX3dyb25seTo6T3Blbl9jcmVhdDo6T3Blbl9leGNsOjptb2RlKSAwbzYwMCBuYW1lKVxuICAgIHdpdGggU3lzX2Vycm9yIF8gYXMgZSAtPlxuICAgICAgaWYgY291bnRlciA+PSAxMDAwIHRoZW4gcmFpc2UgZSBlbHNlIHRyeV9uYW1lIChjb3VudGVyICsgMSlcbiAgaW4gdHJ5X25hbWUgMFxuIiwiKCogUGFkZGluZyBwb3NpdGlvbi4gKilcbnR5cGUgcGFkdHkgPVxuICB8IExlZnQgICAoKiBUZXh0IGlzIGxlZnQganVzdGlmaWVkICgnLScgb3B0aW9uKS4gICAgICAgICAgICAgICAqKVxuICB8IFJpZ2h0ICAoKiBUZXh0IGlzIHJpZ2h0IGp1c3RpZmllZCAobm8gJy0nIG9wdGlvbikuICAgICAgICAgICAqKVxuICB8IFplcm9zICAoKiBUZXh0IGlzIHJpZ2h0IGp1c3RpZmllZCBieSB6ZXJvcyAoc2VlICcwJyBvcHRpb24pLiAqKVxuXG4oKioqKVxuXG4oKiBJbnRlZ2VyIGNvbnZlcnNpb24uICopXG50eXBlIGludF9jb252ID1cbiAgfCBJbnRfZCB8IEludF9wZCB8IEludF9zZCAgICAgICAgKCogICVkIHwgJStkIHwgJSBkICAqKVxuICB8IEludF9pIHwgSW50X3BpIHwgSW50X3NpICAgICAgICAoKiAgJWkgfCAlK2kgfCAlIGkgICopXG4gIHwgSW50X3ggfCBJbnRfQ3ggICAgICAgICAgICAgICAgICgqICAleCB8ICUjeCAgICAgICAgKilcbiAgfCBJbnRfWCB8IEludF9DWCAgICAgICAgICAgICAgICAgKCogICVYIHwgJSNYICAgICAgICAqKVxuICB8IEludF9vIHwgSW50X0NvICAgICAgICAgICAgICAgICAoKiAgJW8gfCAlI28gICAgICAgICopXG4gIHwgSW50X3UgICAgICAgICAgICAgICAgICAgICAgICAgICgqICAldSAgICAgICAgICAgICAgKilcblxuKCogRmxvYXQgY29udmVyc2lvbi4gKilcbnR5cGUgZmxvYXRfY29udiA9XG4gIHwgRmxvYXRfZiB8IEZsb2F0X3BmIHwgRmxvYXRfc2YgICgqICAlZiB8ICUrZiB8ICUgZiAgKilcbiAgfCBGbG9hdF9lIHwgRmxvYXRfcGUgfCBGbG9hdF9zZSAgKCogICVlIHwgJStlIHwgJSBlICAqKVxuICB8IEZsb2F0X0UgfCBGbG9hdF9wRSB8IEZsb2F0X3NFICAoKiAgJUUgfCAlK0UgfCAlIEUgICopXG4gIHwgRmxvYXRfZyB8IEZsb2F0X3BnIHwgRmxvYXRfc2cgICgqICAlZyB8ICUrZyB8ICUgZyAgKilcbiAgfCBGbG9hdF9HIHwgRmxvYXRfcEcgfCBGbG9hdF9zRyAgKCogICVHIHwgJStHIHwgJSBHICAqKVxuICB8IEZsb2F0X0YgICAgICAgICAgICAgICAgICAgICAgICAoKiAgJUYgICAgICAgICAgICAgICopXG5cbigqKiopXG5cbigqIENoYXIgc2V0cyAoc2VlICVbLi4uXSkgYXJlIGJpdG1hcHMgaW1wbGVtZW50ZWQgYXMgMzItY2hhciBzdHJpbmdzLiAqKVxudHlwZSBjaGFyX3NldCA9IHN0cmluZ1xuXG4oKioqKVxuXG4oKiBDb3VudGVyIHVzZWQgaW4gU2NhbmYuICopXG50eXBlIGNvdW50ZXIgPVxuICB8IExpbmVfY291bnRlciAgICAgKCogICVsICAgICAgKilcbiAgfCBDaGFyX2NvdW50ZXIgICAgICgqICAlbiAgICAgICopXG4gIHwgVG9rZW5fY291bnRlciAgICAoKiAgJU4sICVMICAqKVxuXG4oKioqKVxuXG4oKiBQYWRkaW5nIG9mIHN0cmluZ3MgYW5kIG51bWJlcnMuICopXG50eXBlICgnYSwgJ2IpIHBhZGRpbmcgPVxuICAoKiBObyBwYWRkaW5nIChleDogXCIlZFwiKSAqKVxuICB8IE5vX3BhZGRpbmcgIDogKCdhLCAnYSkgcGFkZGluZ1xuICAoKiBMaXRlcmFsIHBhZGRpbmcgKGV4OiBcIiU4ZFwiKSAqKVxuICB8IExpdF9wYWRkaW5nIDogcGFkdHkgKiBpbnQgLT4gKCdhLCAnYSkgcGFkZGluZ1xuICAoKiBQYWRkaW5nIGFzIGV4dHJhIGFyZ3VtZW50IChleDogXCIlKmRcIikgKilcbiAgfCBBcmdfcGFkZGluZyA6IHBhZHR5IC0+IChpbnQgLT4gJ2EsICdhKSBwYWRkaW5nXG5cbigqIFNvbWUgZm9ybWF0cywgc3VjaCBhcyAlX2QsXG4gICBvbmx5IGFjY2VwdCBhbiBvcHRpb25hbCBudW1iZXIgYXMgcGFkZGluZyBvcHRpb24gKG5vIGV4dHJhIGFyZ3VtZW50KSAqKVxudHlwZSBwYWRfb3B0aW9uID0gaW50IG9wdGlvblxuXG4oKiBQcmVjaXNpb24gb2YgZmxvYXRzIGFuZCAnMCctcGFkZGluZyBvZiBpbnRlZ2Vycy4gKilcbnR5cGUgKCdhLCAnYikgcHJlY2lzaW9uID1cbiAgKCogTm8gcHJlY2lzaW9uIChleDogXCIlZlwiKSAqKVxuICB8IE5vX3ByZWNpc2lvbiA6ICgnYSwgJ2EpIHByZWNpc2lvblxuICAoKiBMaXRlcmFsIHByZWNpc2lvbiAoZXg6IFwiJS4zZlwiKSAqKVxuICB8IExpdF9wcmVjaXNpb24gOiBpbnQgLT4gKCdhLCAnYSkgcHJlY2lzaW9uXG4gICgqIFByZWNpc2lvbiBhcyBleHRyYSBhcmd1bWVudCAoZXg6IFwiJS4qZlwiKSAqKVxuICB8IEFyZ19wcmVjaXNpb24gOiAoaW50IC0+ICdhLCAnYSkgcHJlY2lzaW9uXG5cbigqIFNvbWUgZm9ybWF0cywgc3VjaCBhcyAlX2YsXG4gICBvbmx5IGFjY2VwdCBhbiBvcHRpb25hbCBudW1iZXIgYXMgcHJlY2lzaW9uIG9wdGlvbiAobm8gZXh0cmEgYXJndW1lbnQpICopXG50eXBlIHByZWNfb3B0aW9uID0gaW50IG9wdGlvblxuXG4oKiBzZWUgdGhlIEN1c3RvbSBmb3JtYXQgY29tYmluYXRvciAqKVxudHlwZSAoJ2EsICdiLCAnYykgY3VzdG9tX2FyaXR5ID1cbiAgfCBDdXN0b21femVybyA6ICgnYSwgc3RyaW5nLCAnYSkgY3VzdG9tX2FyaXR5XG4gIHwgQ3VzdG9tX3N1Y2MgOiAoJ2EsICdiLCAnYykgY3VzdG9tX2FyaXR5IC0+XG4gICAgKCdhLCAneCAtPiAnYiwgJ3ggLT4gJ2MpIGN1c3RvbV9hcml0eVxuXG4oKioqKVxuXG4oKiAgICAgICAgUmVsYXRpb25hbCBmb3JtYXQgdHlwZXNcblxuSW4gdGhlIGZpcnN0IGZvcm1hdCtnYWR0cyBpbXBsZW1lbnRhdGlvbiwgdGhlIHR5cGUgZm9yICUoLi4lKSBpbiB0aGVcbmZtdCBHQURUIHdhcyBhcyBmb2xsb3dzOlxuXG58IEZvcm1hdF9zdWJzdCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICUoLi4uJSkgKilcbiAgICBwYWRfb3B0aW9uICogKCdkMSwgJ3ExLCAnZDIsICdxMikgcmVhZGVyX25iX3VuaWZpZXIgKlxuICAgICgneCwgJ2IsICdjLCAnZDEsICdxMSwgJ3UpIGZtdHR5ICpcbiAgICAoJ3UsICdiLCAnYywgJ3ExLCAnZTEsICdmKSBmbXQgLT5cbiAgICAgICgoJ3gsICdiLCAnYywgJ2QyLCAncTIsICd1KSBmb3JtYXQ2IC0+ICd4LCAnYiwgJ2MsICdkMSwgJ2UxLCAnZikgZm10XG5cbk5vdGljZSB0aGF0IHRoZSAndSBwYXJhbWV0ZXIgaW4gJ2YgcG9zaXRpb24gaW4gdGhlIGZvcm1hdCBhcmd1bWVudFxuKCgneCwgLi4sICd1KSBmb3JtYXQ2IC0+IC4uKSBpcyBlcXVhbCB0byB0aGUgJ3UgcGFyYW1ldGVyIGluICdhXG5wb3NpdGlvbiBpbiB0aGUgZm9ybWF0IHRhaWwgKCgndSwgLi4sICdmKSBmbXQpLiBUaGlzIG1lYW5zIHRoYXQgdGhlXG50eXBlIG9mIHRoZSBleHBlY3RlZCBmb3JtYXQgcGFyYW1ldGVyIGRlcGVuZHMgb2Ygd2hlcmUgdGhlICUoLi4uJSlcbmFyZSBpbiB0aGUgZm9ybWF0IHN0cmluZzpcblxuICAjIFByaW50Zi5wcmludGYgXCIlKCUpXCI7O1xuICAtIDogKHVuaXQsIG91dF9jaGFubmVsLCB1bml0LCAnX2EsICdfYSwgdW5pdClcbiAgICAgIENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5mb3JtYXQ2IC0+IHVuaXRcbiAgPSA8ZnVuPlxuICAjIFByaW50Zi5wcmludGYgXCIlKCUpJWRcIjs7XG4gIC0gOiAoaW50IC0+IHVuaXQsIG91dF9jaGFubmVsLCB1bml0LCAnX2EsICdfYSwgaW50IC0+IHVuaXQpXG4gICAgICBDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuZm9ybWF0NiAtPiBpbnQgLT4gdW5pdFxuICA9IDxmdW4+XG5cbk9uIHRoZSBjb250cmFyeSwgdGhlIGxlZ2FjeSB0eXBlciBnaXZlcyBhIGNsZXZlciB0eXBlIHRoYXQgZG9lcyBub3RcbmRlcGVuZCBvbiB0aGUgcG9zaXRpb24gb2YgJSguLiUpIGluIHRoZSBmb3JtYXQgc3RyaW5nLiBGb3IgZXhhbXBsZSxcbiUoJSkgd2lsbCBoYXZlIHRoZSBwb2x5bW9ycGhpYyB0eXBlICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKTogaXQgY2FuXG5iZSBjb25jYXRlbmF0ZWQgdG8gYW55IGZvcm1hdCB0eXBlLCBhbmQgb25seSBlbmZvcmNlcyB0aGUgY29uc3RyYWludFxudGhhdCBpdHMgJ2EgYW5kICdmIHBhcmFtZXRlcnMgYXJlIGVxdWFsIChubyBmb3JtYXQgYXJndW1lbnRzKSBhbmQgJ2RcbmFuZCAnZSBhcmUgZXF1YWwgKG5vIHJlYWRlciBhcmd1bWVudCkuXG5cblRoZSB3ZWFrZW5pbmcgb2YgdGhpcyBwYXJhbWV0ZXIgdHlwZSBpbiB0aGUgR0FEVCB2ZXJzaW9uIGJyb2tlIHVzZXJcbmNvZGUgKGluIGZhY3QgaXQgZXNzZW50aWFsbHkgbWFkZSAlKC4uLiUpIHVudXNhYmxlIGV4Y2VwdCBhdCB0aGUgbGFzdFxucG9zaXRpb24gb2YgYSBmb3JtYXQpLiBJbiBwYXJ0aWN1bGFyLCB0aGUgZm9sbG93aW5nIHdvdWxkIG5vdCB3b3JrXG5hbnltb3JlOlxuXG4gIGZ1biBzZXAgLT5cbiAgICBGb3JtYXQucHJpbnRmIFwiZm9vJSglKWJhciUoJSliYXpcIiBzZXAgc2VwXG5cbkFzIHRoZSB0eXBlLWNoZWNrZXIgd291bGQgcmVxdWlyZSB0d28gKmluY29tcGF0aWJsZSogdHlwZXMgZm9yIHRoZSAlKCUpXG5pbiBkaWZmZXJlbnQgcG9zaXRpb25zLlxuXG5UaGUgc29sdXRpb24gdG8gcmVnYWluIGEgZ2VuZXJhbCB0eXBlIGZvciAlKC4uJSkgaXMgdG8gZ2VuZXJhbGl6ZSB0aGlzXG50ZWNobmlxdWUsIG5vdCBvbmx5IG9uIHRoZSAnZCwgJ2UgcGFyYW1ldGVycywgYnV0IG9uIGFsbCBzaXhcbnBhcmFtZXRlcnMgb2YgYSBmb3JtYXQ6IHdlIGludHJvZHVjZSBhIFwicmVsYXRpb25hbFwiIHR5cGVcbiAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcbndob3NlIHZhbHVlcyBhcmUgcHJvb2ZzIHRoYXQgKCdhMSwgLi4sICdmMSkgYW5kICgnYTIsIC4uLCAnZjIpIG1vcmFsbHlcbmNvcnJlc3BvbmQgdG8gdGhlIHNhbWUgZm9ybWF0IHR5cGU6ICdhMSBpcyBvYnRhaW5lZCBmcm9tICdmMSwnYjEsJ2MxXG5pbiB0aGUgZXhhY3Qgc2FtZSB3YXkgdGhhdCAnYTIgaXMgb2J0YWluZWQgZnJvbSAnZjIsJ2IyLCdjMiwgZXRjLlxuXG5Gb3IgZXhhbXBsZSwgdGhlIHJlbGF0aW9uIGJldHdlZW4gdHdvIGZvcm1hdCB0eXBlcyBiZWdpbm5pbmcgd2l0aCBhIENoYXJcbnBhcmFtZXRlciBpcyBhcyBmb2xsb3dzOlxuXG58IENoYXJfdHkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlYyAgKilcbiAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsIC0+XG4gICAgKGNoYXIgLT4gJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgY2hhciAtPiAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcblxuSW4gdGhlIGdlbmVyYWwgY2FzZSwgdGhlIHRlcm0gc3RydWN0dXJlIG9mIGZtdHR5X3JlbCBpcyAoYWxtb3N0wrkpXG5pc29tb3JwaGljIHRvIHRoZSBmbXR0eSBvZiB0aGUgcHJldmlvdXMgaW1wbGVtZW50YXRpb246IGV2ZXJ5XG5jb25zdHJ1Y3RvciBpcyByZS1yZWFkIHdpdGggYSBiaW5hcnksIHJlbGF0aW9uYWwgdHlwZSwgaW5zdGVhZCBvZiB0aGVcbnByZXZpb3VzIHVuYXJ5IHR5cGluZy4gZm10dHkgY2FuIHRoZW4gYmUgcmUtZGVmaW5lZCBhcyB0aGUgZGlhZ29uYWwgb2ZcbmZtdHR5X3JlbDpcblxuICB0eXBlICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXR0eSA9XG4gICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YsXG4gICAgICAgICdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdHR5X3JlbFxuXG5PbmNlIHdlIGhhdmUgdGhpcyBmbXR0eV9yZWwgdHlwZSBpbiBwbGFjZSwgd2UgY2FuIGdpdmUgdGhlIG1vcmVcbmdlbmVyYWwgdHlwZSB0byAlKC4uLiUpOlxuXG58IEZvcm1hdF9zdWJzdCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICUoLi4uJSkgKilcbiAgICBwYWRfb3B0aW9uICpcbiAgICAoJ2csICdoLCAnaSwgJ2osICdrLCAnbCxcbiAgICAgJ2cyLCAnYiwgJ2MsICdqMiwgJ2QsICdhKSBmbXR0eV9yZWwgKlxuICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAoKCdnLCAnaCwgJ2ksICdqLCAnaywgJ2wpIGZvcm1hdDYgLT4gJ2cyLCAnYiwgJ2MsICdqMiwgJ2UsICdmKSBmbXRcblxuV2UgYWNjZXB0IGFueSBmb3JtYXQgKCgnZywgJ2gsICdpLCAnaiwgJ2ssICdsKSBmb3JtYXQ2KSAodGhpcyBpc1xuY29tcGxldGVseSB1bnJlbGF0ZWQgdG8gdGhlIHR5cGUgb2YgdGhlIGN1cnJlbnQgZm9ybWF0KSwgYnV0IGFsc29cbnJlcXVpcmUgYSBwcm9vZiB0aGF0IHRoaXMgZm9ybWF0IGlzIGluIHJlbGF0aW9uIHRvIGFub3RoZXIgZm9ybWF0IHRoYXRcbmlzIGNvbmNhdGVuYWJsZSB0byB0aGUgZm9ybWF0IHRhaWwuIFdoZW4gZXhlY3V0aW5nIGEgJSguLi4lKSBmb3JtYXRcbihpbiBjYW1saW50ZXJuYWxGb3JtYXQubWw6bWFrZV9wcmludGYgb3Igc2NhbmYubWw6bWFrZV9zY2FuZiksIHdlXG50cmFuc3R5cGUgdGhlIGZvcm1hdCBhbG9uZyB0aGlzIHJlbGF0aW9uIHVzaW5nIHRoZSAncmVjYXN0JyBmdW5jdGlvblxudG8gdHJhbnNwb3NlIGJldHdlZW4gcmVsYXRlZCBmb3JtYXQgdHlwZXMuXG5cbiAgdmFsIHJlY2FzdCA6XG4gICAgICgnYTEsICdiMSwgJ2MxLCAnZDEsICdlMSwgJ2YxKSBmbXRcbiAgLT4gKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcbiAgLT4gKCdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIpIGZtdFxuXG5OT1RFIMK5OiB0aGUgdHlwaW5nIG9mIEZvcm1hdF9zdWJzdF90eSByZXF1aXJlcyBub3Qgb25lIGZvcm1hdCB0eXBlLCBidXRcbnR3bywgb25lIHRvIGVzdGFibGlzaCB0aGUgbGluayBiZXR3ZWVuIHRoZSBmb3JtYXQgYXJndW1lbnQgYW5kIHRoZVxuZmlyc3Qgc2l4IHBhcmFtZXRlcnMsIGFuZCB0aGUgb3RoZXIgZm9yIHRoZSBsaW5rIGJldHdlZW4gdGhlIGZvcm1hdFxuYXJndW1hbnQgYW5kIHRoZSBsYXN0IHNpeCBwYXJhbWV0ZXJzLlxuXG58IEZvcm1hdF9zdWJzdF90eSA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlKC4uLiUpICopXG4gICAgKCdnLCAnaCwgJ2ksICdqLCAnaywgJ2wsXG4gICAgICdnMSwgJ2IxLCAnYzEsICdqMSwgJ2QxLCAnYTEpIGZtdHR5X3JlbCAqXG4gICAgKCdnLCAnaCwgJ2ksICdqLCAnaywgJ2wsXG4gICAgICdnMiwgJ2IyLCAnYzIsICdqMiwgJ2QyLCAnYTIpIGZtdHR5X3JlbCAqXG4gICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbCAtPlxuICAgICgoJ2csICdoLCAnaSwgJ2osICdrLCAnbCkgZm9ybWF0NiAtPiAnZzEsICdiMSwgJ2MxLCAnajEsICdlMSwgJ2YxLFxuICAgICAoJ2csICdoLCAnaSwgJ2osICdrLCAnbCkgZm9ybWF0NiAtPiAnZzIsICdiMiwgJ2MyLCAnajIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcblxuV2hlbiB3ZSBnZW5lcmF0ZSBhIGZvcm1hdCBBU1QsIHdlIGdlbmVyYXRlIGV4YWN0bHkgdGhlIHNhbWUgd2l0bmVzc1xuZm9yIGJvdGggcmVsYXRpb25zLCBhbmQgdGhlIHdpdG5lc3MtY29udmVyc2lvbiBmdW5jdGlvbnMgaW5cbmNhbWxpbnRlcm5hbEZvcm1hdCBkbyByZWx5IG9uIHRoaXMgaW52YXJpYW50LiBGb3IgZXhhbXBsZSwgdGhlXG5mdW5jdGlvbiB0aGF0IHByb3ZlcyB0aGF0IHRoZSByZWxhdGlvbiBpcyB0cmFuc2l0aXZlXG5cbiAgdmFsIHRyYW5zIDpcbiAgICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcbiAgLT4gKCdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIsXG4gICAgICAnYTMsICdiMywgJ2MzLCAnZDMsICdlMywgJ2YzKSBmbXR0eV9yZWxcbiAgLT4gKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAnYTMsICdiMywgJ2MzLCAnZDMsICdlMywgJ2YzKSBmbXR0eV9yZWxcblxuZG9lcyBhc3N1bWUgdGhhdCB0aGUgdHdvIGlucHV0IGhhdmUgZXhhY3RseSB0aGUgc2FtZSB0ZXJtIHN0cnVjdHVyZVxuKGFuZCBpcyBvbmx5IGV2ZXJ5IHVzZWQgZm9yIGFyZ3VtZW50IHdpdG5lc3NlcyBvZiB0aGVcbkZvcm1hdF9zdWJzdF90eSBjb25zdHJ1Y3RvcikuXG4qKVxuXG4oKiBUeXBlIG9mIGEgYmxvY2sgdXNlZCBieSB0aGUgRm9ybWF0IHByZXR0eS1wcmludGVyLiAqKVxudHlwZSBibG9ja190eXBlID1cbiAgfCBQcF9oYm94ICAgKCogSG9yaXpvbnRhbCBibG9jayBubyBsaW5lIGJyZWFraW5nICopXG4gIHwgUHBfdmJveCAgICgqIFZlcnRpY2FsIGJsb2NrIGVhY2ggYnJlYWsgbGVhZHMgdG8gYSBuZXcgbGluZSAqKVxuICB8IFBwX2h2Ym94ICAoKiBIb3Jpem9udGFsLXZlcnRpY2FsIGJsb2NrOiBzYW1lIGFzIHZib3gsIGV4Y2VwdCBpZiB0aGlzIGJsb2NrXG4gICAgICAgICAgICAgICAgIGlzIHNtYWxsIGVub3VnaCB0byBmaXQgb24gYSBzaW5nbGUgbGluZSAqKVxuICB8IFBwX2hvdmJveCAoKiBIb3Jpem9udGFsIG9yIFZlcnRpY2FsIGJsb2NrOiBicmVha3MgbGVhZCB0byBuZXcgbGluZVxuICAgICAgICAgICAgICAgICBvbmx5IHdoZW4gbmVjZXNzYXJ5IHRvIHByaW50IHRoZSBjb250ZW50IG9mIHRoZSBibG9jayAqKVxuICB8IFBwX2JveCAgICAoKiBIb3Jpem9udGFsIG9yIEluZGVudCBibG9jazogYnJlYWtzIGxlYWQgdG8gbmV3IGxpbmVcbiAgICAgICAgICAgICAgICAgb25seSB3aGVuIG5lY2Vzc2FyeSB0byBwcmludCB0aGUgY29udGVudCBvZiB0aGUgYmxvY2ssIG9yXG4gICAgICAgICAgICAgICAgIHdoZW4gaXQgbGVhZHMgdG8gYSBuZXcgaW5kZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgbGluZSAqKVxuICB8IFBwX2ZpdHMgICAoKiBJbnRlcm5hbCB1c2FnZTogd2hlbiBhIGJsb2NrIGZpdHMgb24gYSBzaW5nbGUgbGluZSAqKVxuXG4oKiBGb3JtYXR0aW5nIGVsZW1lbnQgdXNlZCBieSB0aGUgRm9ybWF0IHByZXR0eS1wcmludHRlci4gKilcbnR5cGUgZm9ybWF0dGluZ19saXQgPVxuICB8IENsb3NlX2JveCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBAXSAgICopXG4gIHwgQ2xvc2VfdGFnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEB9ICAgKilcbiAgfCBCcmVhayBvZiBzdHJpbmcgKiBpbnQgKiBpbnQgICAgICAgICAgKCogQCwgfCBAICB8IEA7IHwgQDs8PiAqKVxuICB8IEZGbHVzaCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBAPyAgICopXG4gIHwgRm9yY2VfbmV3bGluZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEBcXG4gICopXG4gIHwgRmx1c2hfbmV3bGluZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEAuICAgKilcbiAgfCBNYWdpY19zaXplIG9mIHN0cmluZyAqIGludCAgICAgICAgICAgICAgICAgICAgICAgICAgKCogQDxuPiAqKVxuICB8IEVzY2FwZWRfYXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBAQCAgICopXG4gIHwgRXNjYXBlZF9wZXJjZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEAlJSAgKilcbiAgfCBTY2FuX2luZGljIG9mIGNoYXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogQFggICAqKVxuXG4oKiBGb3JtYXR0aW5nIGVsZW1lbnQgdXNlZCBieSB0aGUgRm9ybWF0IHByZXR0eS1wcmludHRlci4gKilcbnR5cGUgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZvcm1hdHRpbmdfZ2VuID1cbiAgfCBPcGVuX3RhZyA6ICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmb3JtYXQ2IC0+ICAgICAgKCogQHsgICAqKVxuICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmb3JtYXR0aW5nX2dlblxuICB8IE9wZW5fYm94IDogKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZvcm1hdDYgLT4gICAgICAoKiBAWyAgICopXG4gICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZvcm1hdHRpbmdfZ2VuXG5cbigqKiopXG5cbigqIExpc3Qgb2YgZm9ybWF0IHR5cGUgZWxlbWVudHMuICopXG4oKiBJbiBwYXJ0aWN1bGFyIHVzZWQgdG8gcmVwcmVzZW50ICUoLi4uJSkgYW5kICV7Li4uJX0gY29udGVudHMuICopXG5hbmQgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdHR5ID1cbiAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YsXG4gICAgICAnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXR0eV9yZWxcbmFuZCAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsID1cbiAgfCBDaGFyX3R5IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJWMgICopXG4gICAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWwgLT5cbiAgICAgIChjaGFyIC0+ICdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgY2hhciAtPiAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcbiAgfCBTdHJpbmdfdHkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJXMgICopXG4gICAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWwgLT5cbiAgICAgIChzdHJpbmcgLT4gJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICBzdHJpbmcgLT4gJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsXG4gIHwgSW50X3R5IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVkICAqKVxuICAgICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsIC0+XG4gICAgICAoaW50IC0+ICdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgaW50IC0+ICdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbFxuICB8IEludDMyX3R5IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlbGQgKilcbiAgICAgICgnYTEsICdiMSwgJ2MxLCAnZDEsICdlMSwgJ2YxLFxuICAgICAgICdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbCAtPlxuICAgICAgKGludDMyIC0+ICdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgaW50MzIgLT4gJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsXG4gIHwgTmF0aXZlaW50X3R5IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVuZCAqKVxuICAgICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsIC0+XG4gICAgICAobmF0aXZlaW50IC0+ICdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgbmF0aXZlaW50IC0+ICdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbFxuICB8IEludDY0X3R5IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlTGQgKilcbiAgICAgICgnYTEsICdiMSwgJ2MxLCAnZDEsICdlMSwgJ2YxLFxuICAgICAgICdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbCAtPlxuICAgICAgKGludDY0IC0+ICdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgaW50NjQgLT4gJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsXG4gIHwgRmxvYXRfdHkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVmICAqKVxuICAgICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsIC0+XG4gICAgICAoZmxvYXQgLT4gJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICBmbG9hdCAtPiAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcbiAgfCBCb29sX3R5IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJUIgICopXG4gICAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWwgLT5cbiAgICAgIChib29sIC0+ICdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgYm9vbCAtPiAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcblxuICB8IEZvcm1hdF9hcmdfdHkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAley4uLiV9ICopXG4gICAgICAoJ2csICdoLCAnaSwgJ2osICdrLCAnbCkgZm10dHkgKlxuICAgICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsIC0+XG4gICAgICAoKCdnLCAnaCwgJ2ksICdqLCAnaywgJ2wpIGZvcm1hdDYgLT4gJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAoJ2csICdoLCAnaSwgJ2osICdrLCAnbCkgZm9ybWF0NiAtPiAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcbiAgfCBGb3JtYXRfc3Vic3RfdHkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJSguLi4lKSAqKVxuICAgICAgKCdnLCAnaCwgJ2ksICdqLCAnaywgJ2wsXG4gICAgICAgJ2cxLCAnYjEsICdjMSwgJ2oxLCAnZDEsICdhMSkgZm10dHlfcmVsICpcbiAgICAgICgnZywgJ2gsICdpLCAnaiwgJ2ssICdsLFxuICAgICAgICdnMiwgJ2IyLCAnYzIsICdqMiwgJ2QyLCAnYTIpIGZtdHR5X3JlbCAqXG4gICAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWwgLT5cbiAgICAgICgoJ2csICdoLCAnaSwgJ2osICdrLCAnbCkgZm9ybWF0NiAtPiAnZzEsICdiMSwgJ2MxLCAnajEsICdlMSwgJ2YxLFxuICAgICAgICgnZywgJ2gsICdpLCAnaiwgJ2ssICdsKSBmb3JtYXQ2IC0+ICdnMiwgJ2IyLCAnYzIsICdqMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbFxuXG4gICgqIFByaW50ZiBhbmQgRm9ybWF0IHNwZWNpZmljIGNvbnN0cnVjdG9ycy4gKilcbiAgfCBBbHBoYV90eSA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJWEgICopXG4gICAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWwgLT5cbiAgICAgICgoJ2IxIC0+ICd4IC0+ICdjMSkgLT4gJ3ggLT4gJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAoJ2IyIC0+ICd4IC0+ICdjMikgLT4gJ3ggLT4gJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsXG4gIHwgVGhldGFfdHkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICV0ICAqKVxuICAgICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsIC0+XG4gICAgICAoKCdiMSAtPiAnYzEpIC0+ICdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgKCdiMiAtPiAnYzIpIC0+ICdhMiwgJ2IyLCAnYzIsICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbFxuICB8IEFueV90eSA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBVc2VkIGZvciBjdXN0b20gZm9ybWF0cyAqKVxuICAgICAgKCdhMSwgJ2IxLCAnYzEsICdkMSwgJ2UxLCAnZjEsXG4gICAgICAgJ2EyLCAnYjIsICdjMiwgJ2QyLCAnZTIsICdmMikgZm10dHlfcmVsIC0+XG4gICAgICAoJ3ggLT4gJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAneCAtPiAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWxcblxuICAoKiBTY2FuZiBzcGVjaWZpYyBjb25zdHJ1Y3Rvci4gKilcbiAgfCBSZWFkZXJfdHkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJXIgICopXG4gICAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWwgLT5cbiAgICAgICgneCAtPiAnYTEsICdiMSwgJ2MxLCAoJ2IxIC0+ICd4KSAtPiAnZDEsICdlMSwgJ2YxLFxuICAgICAgICd4IC0+ICdhMiwgJ2IyLCAnYzIsICgnYjIgLT4gJ3gpIC0+ICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbFxuICB8IElnbm9yZWRfcmVhZGVyX3R5IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlX3IgICopXG4gICAgICAoJ2ExLCAnYjEsICdjMSwgJ2QxLCAnZTEsICdmMSxcbiAgICAgICAnYTIsICdiMiwgJ2MyLCAnZDIsICdlMiwgJ2YyKSBmbXR0eV9yZWwgLT5cbiAgICAgICgnYTEsICdiMSwgJ2MxLCAoJ2IxIC0+ICd4KSAtPiAnZDEsICdlMSwgJ2YxLFxuICAgICAgICdhMiwgJ2IyLCAnYzIsICgnYjIgLT4gJ3gpIC0+ICdkMiwgJ2UyLCAnZjIpIGZtdHR5X3JlbFxuXG4gIHwgRW5kX29mX2ZtdHR5IDpcbiAgICAgICgnZjEsICdiMSwgJ2MxLCAnZDEsICdkMSwgJ2YxLFxuICAgICAgICdmMiwgJ2IyLCAnYzIsICdkMiwgJ2QyLCAnZjIpIGZtdHR5X3JlbFxuXG4oKioqKVxuXG4oKiBMaXN0IG9mIGZvcm1hdCBlbGVtZW50cy4gKilcbmFuZCAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10ID1cbiAgfCBDaGFyIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlYyAqKVxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoY2hhciAtPiAnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXRcbiAgfCBDYW1sX2NoYXIgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlQyAqKVxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoY2hhciAtPiAnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXRcbiAgfCBTdHJpbmcgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlcyAqKVxuICAgICAgKCd4LCBzdHJpbmcgLT4gJ2EpIHBhZGRpbmcgKiAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10IC0+XG4gICAgICAgICgneCwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXRcbiAgfCBDYW1sX3N0cmluZyA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlUyAqKVxuICAgICAgKCd4LCBzdHJpbmcgLT4gJ2EpIHBhZGRpbmcgKiAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10IC0+XG4gICAgICAgICgneCwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXRcbiAgfCBJbnQgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlW2RpeFh1b10gKilcbiAgICAgIGludF9jb252ICogKCd4LCAneSkgcGFkZGluZyAqICgneSwgaW50IC0+ICdhKSBwcmVjaXNpb24gKlxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoJ3gsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG4gIHwgSW50MzIgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJWxbZGl4WHVvXSAqKVxuICAgICAgaW50X2NvbnYgKiAoJ3gsICd5KSBwYWRkaW5nICogKCd5LCBpbnQzMiAtPiAnYSkgcHJlY2lzaW9uICpcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKCd4LCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdFxuICB8IE5hdGl2ZWludCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVuW2RpeFh1b10gKilcbiAgICAgIGludF9jb252ICogKCd4LCAneSkgcGFkZGluZyAqICgneSwgbmF0aXZlaW50IC0+ICdhKSBwcmVjaXNpb24gKlxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoJ3gsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG4gIHwgSW50NjQgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJUxbZGl4WHVvXSAqKVxuICAgICAgaW50X2NvbnYgKiAoJ3gsICd5KSBwYWRkaW5nICogKCd5LCBpbnQ2NCAtPiAnYSkgcHJlY2lzaW9uICpcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKCd4LCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdFxuICB8IEZsb2F0IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVbZmVFZ0dGXSAqKVxuICAgICAgZmxvYXRfY29udiAqICgneCwgJ3kpIHBhZGRpbmcgKiAoJ3ksIGZsb2F0IC0+ICdhKSBwcmVjaXNpb24gKlxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoJ3gsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG4gIHwgQm9vbCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJVtiQl0gKilcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKGJvb2wgLT4gJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG4gIHwgRmx1c2ggOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJSEgKilcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdFxuXG4gIHwgU3RyaW5nX2xpdGVyYWwgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogYWJjICopXG4gICAgICBzdHJpbmcgKiAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10IC0+XG4gICAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXRcbiAgfCBDaGFyX2xpdGVyYWwgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiB4ICopXG4gICAgICBjaGFyICogKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG5cbiAgfCBGb3JtYXRfYXJnIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAley4uLiV9ICopXG4gICAgICBwYWRfb3B0aW9uICogKCdnLCAnaCwgJ2ksICdqLCAnaywgJ2wpIGZtdHR5ICpcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKCgnZywgJ2gsICdpLCAnaiwgJ2ssICdsKSBmb3JtYXQ2IC0+ICdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdFxuICB8IEZvcm1hdF9zdWJzdCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICUoLi4uJSkgKilcbiAgICAgIHBhZF9vcHRpb24gKlxuICAgICAgKCdnLCAnaCwgJ2ksICdqLCAnaywgJ2wsXG4gICAgICAgJ2cyLCAnYiwgJ2MsICdqMiwgJ2QsICdhKSBmbXR0eV9yZWwgKlxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgKCgnZywgJ2gsICdpLCAnaiwgJ2ssICdsKSBmb3JtYXQ2IC0+ICdnMiwgJ2IsICdjLCAnajIsICdlLCAnZikgZm10XG5cbiAgKCogUHJpbnRmIGFuZCBGb3JtYXQgc3BlY2lmaWMgY29uc3RydWN0b3IuICopXG4gIHwgQWxwaGEgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJWEgKilcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKCgnYiAtPiAneCAtPiAnYykgLT4gJ3ggLT4gJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG4gIHwgVGhldGEgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJXQgKilcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKCgnYiAtPiAnYykgLT4gJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG5cbiAgKCogRm9ybWF0IHNwZWNpZmljIGNvbnN0cnVjdG9yOiAqKVxuICB8IEZvcm1hdHRpbmdfbGl0IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEBfICopXG4gICAgICBmb3JtYXR0aW5nX2xpdCAqICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdFxuICB8IEZvcm1hdHRpbmdfZ2VuIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBAXyAqKVxuICAgICAgKCdhMSwgJ2IsICdjLCAnZDEsICdlMSwgJ2YxKSBmb3JtYXR0aW5nX2dlbiAqXG4gICAgICAoJ2YxLCAnYiwgJ2MsICdlMSwgJ2UyLCAnZjIpIGZtdCAtPiAoJ2ExLCAnYiwgJ2MsICdkMSwgJ2UyLCAnZjIpIGZtdFxuXG4gICgqIFNjYW5mIHNwZWNpZmljIGNvbnN0cnVjdG9yczogKilcbiAgfCBSZWFkZXIgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlciAqKVxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoJ3ggLT4gJ2EsICdiLCAnYywgKCdiIC0+ICd4KSAtPiAnZCwgJ2UsICdmKSBmbXRcbiAgfCBTY2FuX2NoYXJfc2V0IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlWy4uLl0gKilcbiAgICAgIHBhZF9vcHRpb24gKiBjaGFyX3NldCAqICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgLT5cbiAgICAgICAgKHN0cmluZyAtPiAnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXRcbiAgfCBTY2FuX2dldF9jb3VudGVyIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlW25sTkxdICopXG4gICAgICBjb3VudGVyICogKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoaW50IC0+ICdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdFxuICB8IFNjYW5fbmV4dF9jaGFyIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICUwYyAqKVxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgKGNoYXIgLT4gJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG4gIHwgSWdub3JlZF9wYXJhbSA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV8gKilcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ3ksICd4KSBpZ25vcmVkICogKCd4LCAnYiwgJ2MsICd5LCAnZSwgJ2YpIGZtdCAtPlxuICAgICAgICAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG5cbiAgKCogQ3VzdG9tIHByaW50aW5nIGZvcm1hdCAoUFIjNjQ1MiwgR1BSIzE0MClcblxuICAgICBXZSBpbmNsdWRlIGEgdHlwZSBDdXN0b20gb2YgXCJjdXN0b20gY29udmVydGVyc1wiLCB3aGVyZSBhblxuICAgICBhcmJpdHJhcnkgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gY29udmVydCBvbmUgb3IgbW9yZVxuICAgICBhcmd1bWVudHMuIFRoZXJlIGlzIG5vIHN5bnRheCBmb3IgY3VzdG9tIGNvbnZlcnRlcnMsIGl0IGlzIG9ubHlcbiAgICAgaW50ZWRlZCBmb3IgY3VzdG9tIHByb2Nlc3NvcnMgdGhhdCB3aXNoIHRvIHJlbHkgb24gdGhlXG4gICAgIHN0ZGxpYi1kZWZpbmVkIGZvcm1hdCBHQURUcy5cblxuICAgICBGb3IgaW5zdGFuY2UgYSBwcmUtcHJvY2Vzc29yIGNvdWxkIGNob29zZSB0byBpbnRlcnByZXQgc3RyaW5nc1xuICAgICBwcmVmaXhlZCB3aXRoIFtcIiFcIl0gYXMgZm9ybWF0IHN0cmluZ3Mgd2hlcmUgWyV7eyAuLi4gfX1dIGlzXG4gICAgIGEgc3BlY2lhbCBmb3JtIHRvIHBhc3MgYSB0b19zdHJpbmcgZnVuY3Rpb24sIHNvIHRoYXQgb25lIGNvdWxkXG4gICAgIHdyaXRlOlxuXG4gICAgIHtbXG4gICAgICAgdHlwZSB0ID0geyB4IDogaW50OyB5IDogaW50IH1cblxuICAgICAgIGxldCBzdHJpbmdfb2ZfdCB0ID0gUHJpbnRmLnNwcmludGYgXCJ7IHggPSAlZDsgeSA9ICVkIH1cIiB0LnggdC55XG5cbiAgICAgICBQcmludGYucHJpbnRmICFcInQgPSAle3tzdHJpbmdfb2ZfdH19XCIgeyB4ID0gNDI7IHkgPSA0MiB9XG4gICAgIF19XG4gICopXG4gIHwgQ3VzdG9tIDpcbiAgICAgICgnYSwgJ3gsICd5KSBjdXN0b21fYXJpdHkgKiAodW5pdCAtPiAneCkgKiAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm10IC0+XG4gICAgICAoJ3ksICdiLCAnYywgJ2QsICdlLCAnZikgZm10XG5cbiAgKCogZW5kIG9mIGEgZm9ybWF0IHNwZWNpZmljYXRpb24gKilcbiAgfCBFbmRfb2ZfZm9ybWF0IDpcbiAgICAgICAgKCdmLCAnYiwgJ2MsICdlLCAnZSwgJ2YpIGZtdFxuXG4oKioqKVxuXG4oKiBUeXBlIGZvciBpZ25vcmVkIHBhcmFtZXRlcnMgKHNlZSBcIiVfXCIpLiAqKVxuYW5kICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBpZ25vcmVkID1cbiAgfCBJZ25vcmVkX2NoYXIgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlX2MgKilcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKSBpZ25vcmVkXG4gIHwgSWdub3JlZF9jYW1sX2NoYXIgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV9DICopXG4gICAgICAoJ2EsICdiLCAnYywgJ2QsICdkLCAnYSkgaWdub3JlZFxuICB8IElnbm9yZWRfc3RyaW5nIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVfcyAqKVxuICAgICAgcGFkX29wdGlvbiAtPiAoJ2EsICdiLCAnYywgJ2QsICdkLCAnYSkgaWdub3JlZFxuICB8IElnbm9yZWRfY2FtbF9zdHJpbmcgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVfUyAqKVxuICAgICAgcGFkX29wdGlvbiAtPiAoJ2EsICdiLCAnYywgJ2QsICdkLCAnYSkgaWdub3JlZFxuICB8IElnbm9yZWRfaW50IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVfZCAqKVxuICAgICAgaW50X2NvbnYgKiBwYWRfb3B0aW9uIC0+ICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKSBpZ25vcmVkXG4gIHwgSWdub3JlZF9pbnQzMiA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV9sZCAqKVxuICAgICAgaW50X2NvbnYgKiBwYWRfb3B0aW9uIC0+ICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKSBpZ25vcmVkXG4gIHwgSWdub3JlZF9uYXRpdmVpbnQgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV9uZCAqKVxuICAgICAgaW50X2NvbnYgKiBwYWRfb3B0aW9uIC0+ICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKSBpZ25vcmVkXG4gIHwgSWdub3JlZF9pbnQ2NCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV9MZCAqKVxuICAgICAgaW50X2NvbnYgKiBwYWRfb3B0aW9uIC0+ICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKSBpZ25vcmVkXG4gIHwgSWdub3JlZF9mbG9hdCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV9mICopXG4gICAgICBwYWRfb3B0aW9uICogcHJlY19vcHRpb24gLT4gKCdhLCAnYiwgJ2MsICdkLCAnZCwgJ2EpIGlnbm9yZWRcbiAgfCBJZ25vcmVkX2Jvb2wgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlX0IgKilcbiAgICAgICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKSBpZ25vcmVkXG4gIHwgSWdub3JlZF9mb3JtYXRfYXJnIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV97Li4uJX0gKilcbiAgICAgIHBhZF9vcHRpb24gKiAoJ2csICdoLCAnaSwgJ2osICdrLCAnbCkgZm10dHkgLT5cbiAgICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZCwgJ2EpIGlnbm9yZWRcbiAgfCBJZ25vcmVkX2Zvcm1hdF9zdWJzdCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKiAlXyguLi4lKSAqKVxuICAgICAgcGFkX29wdGlvbiAqICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXR0eSAtPlxuICAgICAgICAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgaWdub3JlZFxuICB8IElnbm9yZWRfcmVhZGVyIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVfciAqKVxuICAgICAgKCdhLCAnYiwgJ2MsICgnYiAtPiAneCkgLT4gJ2QsICdkLCAnYSkgaWdub3JlZFxuICB8IElnbm9yZWRfc2Nhbl9jaGFyX3NldCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVfWy4uLl0gKilcbiAgICAgIHBhZF9vcHRpb24gKiBjaGFyX3NldCAtPiAoJ2EsICdiLCAnYywgJ2QsICdkLCAnYSkgaWdub3JlZFxuICB8IElnbm9yZWRfc2Nhbl9nZXRfY291bnRlciA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqICVfW25sTkxdICopXG4gICAgICBjb3VudGVyIC0+ICgnYSwgJ2IsICdjLCAnZCwgJ2QsICdhKSBpZ25vcmVkXG4gIHwgSWdub3JlZF9zY2FuX25leHRfY2hhciA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCogJV8wYyAqKVxuICAgICAgKCdhLCAnYiwgJ2MsICdkLCAnZCwgJ2EpIGlnbm9yZWRcblxuYW5kICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmb3JtYXQ2ID1cbiAgRm9ybWF0IG9mICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmbXQgKiBzdHJpbmdcblxubGV0IHJlYyBlcmFzZV9yZWwgOiB0eXBlIGEgYiBjIGQgZSBmIGcgaCBpIGogayBsIC5cbiAgKGEsIGIsIGMsIGQsIGUsIGYsXG4gICBnLCBoLCBpLCBqLCBrLCBsKSBmbXR0eV9yZWwgLT4gKGEsIGIsIGMsIGQsIGUsIGYpIGZtdHR5XG49IGZ1bmN0aW9uXG4gIHwgQ2hhcl90eSByZXN0IC0+XG4gICAgQ2hhcl90eSAoZXJhc2VfcmVsIHJlc3QpXG4gIHwgU3RyaW5nX3R5IHJlc3QgLT5cbiAgICBTdHJpbmdfdHkgKGVyYXNlX3JlbCByZXN0KVxuICB8IEludF90eSByZXN0IC0+XG4gICAgSW50X3R5IChlcmFzZV9yZWwgcmVzdClcbiAgfCBJbnQzMl90eSByZXN0IC0+XG4gICAgSW50MzJfdHkgKGVyYXNlX3JlbCByZXN0KVxuICB8IEludDY0X3R5IHJlc3QgLT5cbiAgICBJbnQ2NF90eSAoZXJhc2VfcmVsIHJlc3QpXG4gIHwgTmF0aXZlaW50X3R5IHJlc3QgLT5cbiAgICBOYXRpdmVpbnRfdHkgKGVyYXNlX3JlbCByZXN0KVxuICB8IEZsb2F0X3R5IHJlc3QgLT5cbiAgICBGbG9hdF90eSAoZXJhc2VfcmVsIHJlc3QpXG4gIHwgQm9vbF90eSByZXN0IC0+XG4gICAgQm9vbF90eSAoZXJhc2VfcmVsIHJlc3QpXG4gIHwgRm9ybWF0X2FyZ190eSAodHksIHJlc3QpIC0+XG4gICAgRm9ybWF0X2FyZ190eSAodHksIGVyYXNlX3JlbCByZXN0KVxuICB8IEZvcm1hdF9zdWJzdF90eSAodHkxLCB0eTIsIHJlc3QpIC0+XG4gICAgRm9ybWF0X3N1YnN0X3R5ICh0eTEsIHR5MSwgZXJhc2VfcmVsIHJlc3QpXG4gIHwgQWxwaGFfdHkgcmVzdCAtPlxuICAgIEFscGhhX3R5IChlcmFzZV9yZWwgcmVzdClcbiAgfCBUaGV0YV90eSByZXN0IC0+XG4gICAgVGhldGFfdHkgKGVyYXNlX3JlbCByZXN0KVxuICB8IEFueV90eSByZXN0IC0+XG4gICAgQW55X3R5IChlcmFzZV9yZWwgcmVzdClcbiAgfCBSZWFkZXJfdHkgcmVzdCAtPlxuICAgIFJlYWRlcl90eSAoZXJhc2VfcmVsIHJlc3QpXG4gIHwgSWdub3JlZF9yZWFkZXJfdHkgcmVzdCAtPlxuICAgIElnbm9yZWRfcmVhZGVyX3R5IChlcmFzZV9yZWwgcmVzdClcbiAgfCBFbmRfb2ZfZm10dHkgLT4gRW5kX29mX2ZtdHR5XG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4gICAgICAgICAgICAgICAgICAgICAgICAgKCogRm9ybWF0IHR5cGUgY29uY2F0ZW5hdGlvbiAqKVxuXG4oKiBDb25jYXRlbmF0ZSB0d28gZm9ybWF0IHR5cGVzLiAqKVxuKCogVXNlZCBieTpcbiAgICogcmVhZGVyX25iX3VuaWZpZXJfb2ZfZm10dHkgdG8gY291bnQgcmVhZGVycyBpbiBhbiBmbXR0eSxcbiAgICogU2NhbmYudGFrZV9mbXR0eV9mb3JtYXRfcmVhZGVycyB0byBleHRyYWN0IHJlYWRlcnMgaW5zaWRlICUoLi4uJSksXG4gICAqIENhbWxpbnRlcm5hbEZvcm1hdC5mbXR0eV9vZl9pZ25vcmVkX2Zvcm1hdCB0byBleHRyYWN0IGZvcm1hdCB0eXBlLiAqKVxuXG4oKlxubGV0IHJlYyBjb25jYXRfZm10dHkgOiB0eXBlIGEgYiBjIGQgZSBmIGcgaCAuXG4gICAgKGEsIGIsIGMsIGQsIGUsIGYpIGZtdHR5IC0+XG4gICAgKGYsIGIsIGMsIGUsIGcsIGgpIGZtdHR5IC0+XG4gICAgKGEsIGIsIGMsIGQsIGcsIGgpIGZtdHR5ID1cbiopXG5sZXQgcmVjIGNvbmNhdF9mbXR0eSA6XG4gIHR5cGUgYTEgYjEgYzEgZDEgZTEgZjFcbiAgICAgICBhMiBiMiBjMiBkMiBlMiBmMlxuICAgICAgIGcxIGoxIGcyIGoyXG4gIC5cbiAgICAoZzEsIGIxLCBjMSwgajEsIGQxLCBhMSxcbiAgICAgZzIsIGIyLCBjMiwgajIsIGQyLCBhMikgZm10dHlfcmVsIC0+XG4gICAgKGExLCBiMSwgYzEsIGQxLCBlMSwgZjEsXG4gICAgIGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIpIGZtdHR5X3JlbCAtPlxuICAgIChnMSwgYjEsIGMxLCBqMSwgZTEsIGYxLFxuICAgICBnMiwgYjIsIGMyLCBqMiwgZTIsIGYyKSBmbXR0eV9yZWwgPVxuZnVuIGZtdHR5MSBmbXR0eTIgLT4gbWF0Y2ggZm10dHkxIHdpdGhcbiAgfCBDaGFyX3R5IHJlc3QgLT5cbiAgICBDaGFyX3R5IChjb25jYXRfZm10dHkgcmVzdCBmbXR0eTIpXG4gIHwgU3RyaW5nX3R5IHJlc3QgLT5cbiAgICBTdHJpbmdfdHkgKGNvbmNhdF9mbXR0eSByZXN0IGZtdHR5MilcbiAgfCBJbnRfdHkgcmVzdCAtPlxuICAgIEludF90eSAoY29uY2F0X2ZtdHR5IHJlc3QgZm10dHkyKVxuICB8IEludDMyX3R5IHJlc3QgLT5cbiAgICBJbnQzMl90eSAoY29uY2F0X2ZtdHR5IHJlc3QgZm10dHkyKVxuICB8IE5hdGl2ZWludF90eSByZXN0IC0+XG4gICAgTmF0aXZlaW50X3R5IChjb25jYXRfZm10dHkgcmVzdCBmbXR0eTIpXG4gIHwgSW50NjRfdHkgcmVzdCAtPlxuICAgIEludDY0X3R5IChjb25jYXRfZm10dHkgcmVzdCBmbXR0eTIpXG4gIHwgRmxvYXRfdHkgcmVzdCAtPlxuICAgIEZsb2F0X3R5IChjb25jYXRfZm10dHkgcmVzdCBmbXR0eTIpXG4gIHwgQm9vbF90eSByZXN0IC0+XG4gICAgQm9vbF90eSAoY29uY2F0X2ZtdHR5IHJlc3QgZm10dHkyKVxuICB8IEFscGhhX3R5IHJlc3QgLT5cbiAgICBBbHBoYV90eSAoY29uY2F0X2ZtdHR5IHJlc3QgZm10dHkyKVxuICB8IFRoZXRhX3R5IHJlc3QgLT5cbiAgICBUaGV0YV90eSAoY29uY2F0X2ZtdHR5IHJlc3QgZm10dHkyKVxuICB8IEFueV90eSByZXN0IC0+XG4gICAgQW55X3R5IChjb25jYXRfZm10dHkgcmVzdCBmbXR0eTIpXG4gIHwgUmVhZGVyX3R5IHJlc3QgLT5cbiAgICBSZWFkZXJfdHkgKGNvbmNhdF9mbXR0eSByZXN0IGZtdHR5MilcbiAgfCBJZ25vcmVkX3JlYWRlcl90eSByZXN0IC0+XG4gICAgSWdub3JlZF9yZWFkZXJfdHkgKGNvbmNhdF9mbXR0eSByZXN0IGZtdHR5MilcbiAgfCBGb3JtYXRfYXJnX3R5ICh0eSwgcmVzdCkgLT5cbiAgICBGb3JtYXRfYXJnX3R5ICh0eSwgY29uY2F0X2ZtdHR5IHJlc3QgZm10dHkyKVxuICB8IEZvcm1hdF9zdWJzdF90eSAodHkxLCB0eTIsIHJlc3QpIC0+XG4gICAgRm9ybWF0X3N1YnN0X3R5ICh0eTEsIHR5MiwgY29uY2F0X2ZtdHR5IHJlc3QgZm10dHkyKVxuICB8IEVuZF9vZl9mbXR0eSAtPiBmbXR0eTJcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIEZvcm1hdCBjb25jYXRlbmF0aW9uICopXG5cbigqIENvbmNhdGVuYXRlIHR3byBmb3JtYXRzLiAqKVxubGV0IHJlYyBjb25jYXRfZm10IDogdHlwZSBhIGIgYyBkIGUgZiBnIGggLlxuICAgIChhLCBiLCBjLCBkLCBlLCBmKSBmbXQgLT5cbiAgICAoZiwgYiwgYywgZSwgZywgaCkgZm10IC0+XG4gICAgKGEsIGIsIGMsIGQsIGcsIGgpIGZtdCA9XG5mdW4gZm10MSBmbXQyIC0+IG1hdGNoIGZtdDEgd2l0aFxuICB8IFN0cmluZyAocGFkLCByZXN0KSAtPlxuICAgIFN0cmluZyAocGFkLCBjb25jYXRfZm10IHJlc3QgZm10MilcbiAgfCBDYW1sX3N0cmluZyAocGFkLCByZXN0KSAtPlxuICAgIENhbWxfc3RyaW5nIChwYWQsIGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuXG4gIHwgSW50IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIEludCAoaWNvbnYsIHBhZCwgcHJlYywgY29uY2F0X2ZtdCByZXN0IGZtdDIpXG4gIHwgSW50MzIgKGljb252LCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgSW50MzIgKGljb252LCBwYWQsIHByZWMsIGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuICB8IE5hdGl2ZWludCAoaWNvbnYsIHBhZCwgcHJlYywgcmVzdCkgLT5cbiAgICBOYXRpdmVpbnQgKGljb252LCBwYWQsIHByZWMsIGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuICB8IEludDY0IChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIEludDY0IChpY29udiwgcGFkLCBwcmVjLCBjb25jYXRfZm10IHJlc3QgZm10MilcbiAgfCBGbG9hdCAoZmNvbnYsIHBhZCwgcHJlYywgcmVzdCkgLT5cbiAgICBGbG9hdCAoZmNvbnYsIHBhZCwgcHJlYywgY29uY2F0X2ZtdCByZXN0IGZtdDIpXG5cbiAgfCBDaGFyIChyZXN0KSAtPlxuICAgIENoYXIgKGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuICB8IENhbWxfY2hhciByZXN0IC0+XG4gICAgQ2FtbF9jaGFyIChjb25jYXRfZm10IHJlc3QgZm10MilcbiAgfCBCb29sIHJlc3QgLT5cbiAgICBCb29sIChjb25jYXRfZm10IHJlc3QgZm10MilcbiAgfCBBbHBoYSByZXN0IC0+XG4gICAgQWxwaGEgKGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuICB8IFRoZXRhIHJlc3QgLT5cbiAgICBUaGV0YSAoY29uY2F0X2ZtdCByZXN0IGZtdDIpXG4gIHwgQ3VzdG9tIChhcml0eSwgZiwgcmVzdCkgLT5cbiAgICBDdXN0b20gKGFyaXR5LCBmLCBjb25jYXRfZm10IHJlc3QgZm10MilcbiAgfCBSZWFkZXIgcmVzdCAtPlxuICAgIFJlYWRlciAoY29uY2F0X2ZtdCByZXN0IGZtdDIpXG4gIHwgRmx1c2ggcmVzdCAtPlxuICAgIEZsdXNoIChjb25jYXRfZm10IHJlc3QgZm10MilcblxuICB8IFN0cmluZ19saXRlcmFsIChzdHIsIHJlc3QpIC0+XG4gICAgU3RyaW5nX2xpdGVyYWwgKHN0ciwgY29uY2F0X2ZtdCByZXN0IGZtdDIpXG4gIHwgQ2hhcl9saXRlcmFsIChjaHIsIHJlc3QpIC0+XG4gICAgQ2hhcl9saXRlcmFsICAgKGNociwgY29uY2F0X2ZtdCByZXN0IGZtdDIpXG5cbiAgfCBGb3JtYXRfYXJnIChwYWQsIGZtdHR5LCByZXN0KSAtPlxuICAgIEZvcm1hdF9hcmcgICAocGFkLCBmbXR0eSwgY29uY2F0X2ZtdCByZXN0IGZtdDIpXG4gIHwgRm9ybWF0X3N1YnN0IChwYWQsIGZtdHR5LCByZXN0KSAtPlxuICAgIEZvcm1hdF9zdWJzdCAocGFkLCBmbXR0eSwgY29uY2F0X2ZtdCByZXN0IGZtdDIpXG5cbiAgfCBTY2FuX2NoYXJfc2V0ICh3aWR0aF9vcHQsIGNoYXJfc2V0LCByZXN0KSAtPlxuICAgIFNjYW5fY2hhcl9zZXQgKHdpZHRoX29wdCwgY2hhcl9zZXQsIGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuICB8IFNjYW5fZ2V0X2NvdW50ZXIgKGNvdW50ZXIsIHJlc3QpIC0+XG4gICAgU2Nhbl9nZXRfY291bnRlciAoY291bnRlciwgY29uY2F0X2ZtdCByZXN0IGZtdDIpXG4gIHwgU2Nhbl9uZXh0X2NoYXIgKHJlc3QpIC0+XG4gICAgU2Nhbl9uZXh0X2NoYXIgKGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuICB8IElnbm9yZWRfcGFyYW0gKGlnbiwgcmVzdCkgLT5cbiAgICBJZ25vcmVkX3BhcmFtIChpZ24sIGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuXG4gIHwgRm9ybWF0dGluZ19saXQgKGZtdGluZ19saXQsIHJlc3QpIC0+XG4gICAgRm9ybWF0dGluZ19saXQgKGZtdGluZ19saXQsIGNvbmNhdF9mbXQgcmVzdCBmbXQyKVxuICB8IEZvcm1hdHRpbmdfZ2VuIChmbXRpbmdfZ2VuLCByZXN0KSAtPlxuICAgIEZvcm1hdHRpbmdfZ2VuIChmbXRpbmdfZ2VuLCBjb25jYXRfZm10IHJlc3QgZm10MilcblxuICB8IEVuZF9vZl9mb3JtYXQgLT5cbiAgICBmbXQyXG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIHR5cGUgJ2Egb3B0aW9uID0gTm9uZSB8IFNvbWUgb2YgJ2EgKilcblxuKCogRXhjZXB0aW9ucyAqKVxuXG5leHRlcm5hbCByZWdpc3Rlcl9uYW1lZF92YWx1ZSA6IHN0cmluZyAtPiAnYSAtPiB1bml0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiY2FtbF9yZWdpc3Rlcl9uYW1lZF92YWx1ZVwiXG5cbmxldCAoKSA9XG4gICgqIGZvciBhc21ydW4vZmFpbC5jICopXG4gIHJlZ2lzdGVyX25hbWVkX3ZhbHVlIFwiUGVydmFzaXZlcy5hcnJheV9ib3VuZF9lcnJvclwiXG4gICAgKEludmFsaWRfYXJndW1lbnQgXCJpbmRleCBvdXQgb2YgYm91bmRzXCIpXG5cblxuZXh0ZXJuYWwgcmFpc2UgOiBleG4gLT4gJ2EgPSBcIiVyYWlzZVwiXG5leHRlcm5hbCByYWlzZV9ub3RyYWNlIDogZXhuIC0+ICdhID0gXCIlcmFpc2Vfbm90cmFjZVwiXG5cbmxldCBmYWlsd2l0aCBzID0gcmFpc2UoRmFpbHVyZSBzKVxubGV0IGludmFsaWRfYXJnIHMgPSByYWlzZShJbnZhbGlkX2FyZ3VtZW50IHMpXG5cbmV4Y2VwdGlvbiBFeGl0XG5cbigqIENvbXBvc2l0aW9uIG9wZXJhdG9ycyAqKVxuXG5leHRlcm5hbCAoIHw+ICkgOiAnYSAtPiAoJ2EgLT4gJ2IpIC0+ICdiID0gXCIlcmV2YXBwbHlcIlxuZXh0ZXJuYWwgKCBAQCApIDogKCdhIC0+ICdiKSAtPiAnYSAtPiAnYiA9IFwiJWFwcGx5XCJcblxuKCogRGVidWdnaW5nICopXG5cbmV4dGVybmFsIF9fTE9DX18gOiBzdHJpbmcgPSBcIiVsb2NfTE9DXCJcbmV4dGVybmFsIF9fRklMRV9fIDogc3RyaW5nID0gXCIlbG9jX0ZJTEVcIlxuZXh0ZXJuYWwgX19MSU5FX18gOiBpbnQgPSBcIiVsb2NfTElORVwiXG5leHRlcm5hbCBfX01PRFVMRV9fIDogc3RyaW5nID0gXCIlbG9jX01PRFVMRVwiXG5leHRlcm5hbCBfX1BPU19fIDogc3RyaW5nICogaW50ICogaW50ICogaW50ID0gXCIlbG9jX1BPU1wiXG5cbmV4dGVybmFsIF9fTE9DX09GX18gOiAnYSAtPiBzdHJpbmcgKiAnYSA9IFwiJWxvY19MT0NcIlxuZXh0ZXJuYWwgX19MSU5FX09GX18gOiAnYSAtPiBpbnQgKiAnYSA9IFwiJWxvY19MSU5FXCJcbmV4dGVybmFsIF9fUE9TX09GX18gOiAnYSAtPiAoc3RyaW5nICogaW50ICogaW50ICogaW50KSAqICdhID0gXCIlbG9jX1BPU1wiXG5cbigqIENvbXBhcmlzb25zICopXG5cbmV4dGVybmFsICggPSApIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWVxdWFsXCJcbmV4dGVybmFsICggPD4gKSA6ICdhIC0+ICdhIC0+IGJvb2wgPSBcIiVub3RlcXVhbFwiXG5leHRlcm5hbCAoIDwgKSA6ICdhIC0+ICdhIC0+IGJvb2wgPSBcIiVsZXNzdGhhblwiXG5leHRlcm5hbCAoID4gKSA6ICdhIC0+ICdhIC0+IGJvb2wgPSBcIiVncmVhdGVydGhhblwiXG5leHRlcm5hbCAoIDw9ICkgOiAnYSAtPiAnYSAtPiBib29sID0gXCIlbGVzc2VxdWFsXCJcbmV4dGVybmFsICggPj0gKSA6ICdhIC0+ICdhIC0+IGJvb2wgPSBcIiVncmVhdGVyZXF1YWxcIlxuZXh0ZXJuYWwgY29tcGFyZSA6ICdhIC0+ICdhIC0+IGludCA9IFwiJWNvbXBhcmVcIlxuXG5sZXQgbWluIHggeSA9IGlmIHggPD0geSB0aGVuIHggZWxzZSB5XG5sZXQgbWF4IHggeSA9IGlmIHggPj0geSB0aGVuIHggZWxzZSB5XG5cbmV4dGVybmFsICggPT0gKSA6ICdhIC0+ICdhIC0+IGJvb2wgPSBcIiVlcVwiXG5leHRlcm5hbCAoICE9ICkgOiAnYSAtPiAnYSAtPiBib29sID0gXCIlbm90ZXFcIlxuXG4oKiBCb29sZWFuIG9wZXJhdGlvbnMgKilcblxuZXh0ZXJuYWwgbm90IDogYm9vbCAtPiBib29sID0gXCIlYm9vbG5vdFwiXG5leHRlcm5hbCAoICYgKSA6IGJvb2wgLT4gYm9vbCAtPiBib29sID0gXCIlc2VxdWFuZFwiXG5leHRlcm5hbCAoICYmICkgOiBib29sIC0+IGJvb2wgLT4gYm9vbCA9IFwiJXNlcXVhbmRcIlxuZXh0ZXJuYWwgKCBvciApIDogYm9vbCAtPiBib29sIC0+IGJvb2wgPSBcIiVzZXF1b3JcIlxuZXh0ZXJuYWwgKCB8fCApIDogYm9vbCAtPiBib29sIC0+IGJvb2wgPSBcIiVzZXF1b3JcIlxuXG4oKiBJbnRlZ2VyIG9wZXJhdGlvbnMgKilcblxuZXh0ZXJuYWwgKCB+LSApIDogaW50IC0+IGludCA9IFwiJW5lZ2ludFwiXG5leHRlcm5hbCAoIH4rICkgOiBpbnQgLT4gaW50ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgc3VjYyA6IGludCAtPiBpbnQgPSBcIiVzdWNjaW50XCJcbmV4dGVybmFsIHByZWQgOiBpbnQgLT4gaW50ID0gXCIlcHJlZGludFwiXG5leHRlcm5hbCAoICsgKSA6IGludCAtPiBpbnQgLT4gaW50ID0gXCIlYWRkaW50XCJcbmV4dGVybmFsICggLSApIDogaW50IC0+IGludCAtPiBpbnQgPSBcIiVzdWJpbnRcIlxuZXh0ZXJuYWwgKCAqICkgOiBpbnQgLT4gaW50IC0+IGludCA9IFwiJW11bGludFwiXG5leHRlcm5hbCAoIC8gKSA6IGludCAtPiBpbnQgLT4gaW50ID0gXCIlZGl2aW50XCJcbmV4dGVybmFsICggbW9kICkgOiBpbnQgLT4gaW50IC0+IGludCA9IFwiJW1vZGludFwiXG5cbmxldCBhYnMgeCA9IGlmIHggPj0gMCB0aGVuIHggZWxzZSAteFxuXG5leHRlcm5hbCAoIGxhbmQgKSA6IGludCAtPiBpbnQgLT4gaW50ID0gXCIlYW5kaW50XCJcbmV4dGVybmFsICggbG9yICkgOiBpbnQgLT4gaW50IC0+IGludCA9IFwiJW9yaW50XCJcbmV4dGVybmFsICggbHhvciApIDogaW50IC0+IGludCAtPiBpbnQgPSBcIiV4b3JpbnRcIlxuXG5sZXQgbG5vdCB4ID0geCBseG9yICgtMSlcblxuZXh0ZXJuYWwgKCBsc2wgKSA6IGludCAtPiBpbnQgLT4gaW50ID0gXCIlbHNsaW50XCJcbmV4dGVybmFsICggbHNyICkgOiBpbnQgLT4gaW50IC0+IGludCA9IFwiJWxzcmludFwiXG5leHRlcm5hbCAoIGFzciApIDogaW50IC0+IGludCAtPiBpbnQgPSBcIiVhc3JpbnRcIlxuXG5sZXQgbWF4X2ludCA9ICgtMSkgbHNyIDFcbmxldCBtaW5faW50ID0gbWF4X2ludCArIDFcblxuKCogRmxvYXRpbmctcG9pbnQgb3BlcmF0aW9ucyAqKVxuXG5leHRlcm5hbCAoIH4tLiApIDogZmxvYXQgLT4gZmxvYXQgPSBcIiVuZWdmbG9hdFwiXG5leHRlcm5hbCAoIH4rLiApIDogZmxvYXQgLT4gZmxvYXQgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCAoICsuICkgOiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCA9IFwiJWFkZGZsb2F0XCJcbmV4dGVybmFsICggLS4gKSA6IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0ID0gXCIlc3ViZmxvYXRcIlxuZXh0ZXJuYWwgKCAqLiApIDogZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgPSBcIiVtdWxmbG9hdFwiXG5leHRlcm5hbCAoIC8uICkgOiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCA9IFwiJWRpdmZsb2F0XCJcbmV4dGVybmFsICggKiogKSA6IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX3Bvd2VyX2Zsb2F0XCIgXCJwb3dcIiBcImZsb2F0XCJcbmV4dGVybmFsIGV4cCA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX2V4cF9mbG9hdFwiIFwiZXhwXCIgXCJmbG9hdFwiXG5leHRlcm5hbCBleHBtMSA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX2V4cG0xX2Zsb2F0XCIgXCJjYW1sX2V4cG0xXCIgXCJmbG9hdFwiXG5leHRlcm5hbCBhY29zIDogZmxvYXQgLT4gZmxvYXQgPSBcImNhbWxfYWNvc19mbG9hdFwiIFwiYWNvc1wiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgYXNpbiA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX2FzaW5fZmxvYXRcIiBcImFzaW5cIiBcImZsb2F0XCJcbmV4dGVybmFsIGF0YW4gOiBmbG9hdCAtPiBmbG9hdCA9IFwiY2FtbF9hdGFuX2Zsb2F0XCIgXCJhdGFuXCIgXCJmbG9hdFwiXG5leHRlcm5hbCBhdGFuMiA6IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX2F0YW4yX2Zsb2F0XCIgXCJhdGFuMlwiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgaHlwb3QgOiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdFxuICAgICAgICAgICAgICAgPSBcImNhbWxfaHlwb3RfZmxvYXRcIiBcImNhbWxfaHlwb3RcIiBcImZsb2F0XCJcbmV4dGVybmFsIGNvcyA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX2Nvc19mbG9hdFwiIFwiY29zXCIgXCJmbG9hdFwiXG5leHRlcm5hbCBjb3NoIDogZmxvYXQgLT4gZmxvYXQgPSBcImNhbWxfY29zaF9mbG9hdFwiIFwiY29zaFwiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgbG9nIDogZmxvYXQgLT4gZmxvYXQgPSBcImNhbWxfbG9nX2Zsb2F0XCIgXCJsb2dcIiBcImZsb2F0XCJcbmV4dGVybmFsIGxvZzEwIDogZmxvYXQgLT4gZmxvYXQgPSBcImNhbWxfbG9nMTBfZmxvYXRcIiBcImxvZzEwXCIgXCJmbG9hdFwiXG5leHRlcm5hbCBsb2cxcCA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX2xvZzFwX2Zsb2F0XCIgXCJjYW1sX2xvZzFwXCIgXCJmbG9hdFwiXG5leHRlcm5hbCBzaW4gOiBmbG9hdCAtPiBmbG9hdCA9IFwiY2FtbF9zaW5fZmxvYXRcIiBcInNpblwiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgc2luaCA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX3NpbmhfZmxvYXRcIiBcInNpbmhcIiBcImZsb2F0XCJcbmV4dGVybmFsIHNxcnQgOiBmbG9hdCAtPiBmbG9hdCA9IFwiY2FtbF9zcXJ0X2Zsb2F0XCIgXCJzcXJ0XCIgXCJmbG9hdFwiXG5leHRlcm5hbCB0YW4gOiBmbG9hdCAtPiBmbG9hdCA9IFwiY2FtbF90YW5fZmxvYXRcIiBcInRhblwiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgdGFuaCA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX3RhbmhfZmxvYXRcIiBcInRhbmhcIiBcImZsb2F0XCJcbmV4dGVybmFsIGNlaWwgOiBmbG9hdCAtPiBmbG9hdCA9IFwiY2FtbF9jZWlsX2Zsb2F0XCIgXCJjZWlsXCIgXCJmbG9hdFwiXG5leHRlcm5hbCBmbG9vciA6IGZsb2F0IC0+IGZsb2F0ID0gXCJjYW1sX2Zsb29yX2Zsb2F0XCIgXCJmbG9vclwiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgYWJzX2Zsb2F0IDogZmxvYXQgLT4gZmxvYXQgPSBcIiVhYnNmbG9hdFwiXG5leHRlcm5hbCBjb3B5c2lnbiA6IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0XG4gICAgICAgICAgICAgICAgICA9IFwiY2FtbF9jb3B5c2lnbl9mbG9hdFwiIFwiY2FtbF9jb3B5c2lnblwiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgbW9kX2Zsb2F0IDogZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgPSBcImNhbWxfZm1vZF9mbG9hdFwiIFwiZm1vZFwiIFwiZmxvYXRcIlxuZXh0ZXJuYWwgZnJleHAgOiBmbG9hdCAtPiBmbG9hdCAqIGludCA9IFwiY2FtbF9mcmV4cF9mbG9hdFwiXG5leHRlcm5hbCBsZGV4cCA6IGZsb2F0IC0+IGludCAtPiBmbG9hdCA9IFwiY2FtbF9sZGV4cF9mbG9hdFwiXG5leHRlcm5hbCBtb2RmIDogZmxvYXQgLT4gZmxvYXQgKiBmbG9hdCA9IFwiY2FtbF9tb2RmX2Zsb2F0XCJcbmV4dGVybmFsIGZsb2F0IDogaW50IC0+IGZsb2F0ID0gXCIlZmxvYXRvZmludFwiXG5leHRlcm5hbCBmbG9hdF9vZl9pbnQgOiBpbnQgLT4gZmxvYXQgPSBcIiVmbG9hdG9maW50XCJcbmV4dGVybmFsIHRydW5jYXRlIDogZmxvYXQgLT4gaW50ID0gXCIlaW50b2ZmbG9hdFwiXG5leHRlcm5hbCBpbnRfb2ZfZmxvYXQgOiBmbG9hdCAtPiBpbnQgPSBcIiVpbnRvZmZsb2F0XCJcbmV4dGVybmFsIGZsb2F0X29mX2JpdHMgOiBpbnQ2NCAtPiBmbG9hdCA9IFwiY2FtbF9pbnQ2NF9mbG9hdF9vZl9iaXRzXCJcbmxldCBpbmZpbml0eSA9XG4gIGZsb2F0X29mX2JpdHMgMHg3Rl9GMF8wMF8wMF8wMF8wMF8wMF8wMExcbmxldCBuZWdfaW5maW5pdHkgPVxuICBmbG9hdF9vZl9iaXRzIDB4RkZfRjBfMDBfMDBfMDBfMDBfMDBfMDBMXG5sZXQgbmFuID1cbiAgZmxvYXRfb2ZfYml0cyAweDdGX0YwXzAwXzAwXzAwXzAwXzAwXzAxTFxubGV0IG1heF9mbG9hdCA9XG4gIGZsb2F0X29mX2JpdHMgMHg3Rl9FRl9GRl9GRl9GRl9GRl9GRl9GRkxcbmxldCBtaW5fZmxvYXQgPVxuICBmbG9hdF9vZl9iaXRzIDB4MDBfMTBfMDBfMDBfMDBfMDBfMDBfMDBMXG5sZXQgZXBzaWxvbl9mbG9hdCA9XG4gIGZsb2F0X29mX2JpdHMgMHgzQ19CMF8wMF8wMF8wMF8wMF8wMF8wMExcblxudHlwZSBmcGNsYXNzID1cbiAgICBGUF9ub3JtYWxcbiAgfCBGUF9zdWJub3JtYWxcbiAgfCBGUF96ZXJvXG4gIHwgRlBfaW5maW5pdGVcbiAgfCBGUF9uYW5cbmV4dGVybmFsIGNsYXNzaWZ5X2Zsb2F0IDogZmxvYXQgLT4gZnBjbGFzcyA9IFwiY2FtbF9jbGFzc2lmeV9mbG9hdFwiXG5cbigqIFN0cmluZyBhbmQgYnl0ZSBzZXF1ZW5jZSBvcGVyYXRpb25zIC0tIG1vcmUgaW4gbW9kdWxlcyBTdHJpbmcgYW5kIEJ5dGVzICopXG5cbmV4dGVybmFsIHN0cmluZ19sZW5ndGggOiBzdHJpbmcgLT4gaW50ID0gXCIlc3RyaW5nX2xlbmd0aFwiXG5leHRlcm5hbCBieXRlc19sZW5ndGggOiBieXRlcyAtPiBpbnQgPSBcIiVzdHJpbmdfbGVuZ3RoXCJcbmV4dGVybmFsIGJ5dGVzX2NyZWF0ZSA6IGludCAtPiBieXRlcyA9IFwiY2FtbF9jcmVhdGVfc3RyaW5nXCJcbmV4dGVybmFsIHN0cmluZ19ibGl0IDogc3RyaW5nIC0+IGludCAtPiBieXRlcyAtPiBpbnQgLT4gaW50IC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX2JsaXRfc3RyaW5nXCIgXCJub2FsbG9jXCJcbmV4dGVybmFsIGJ5dGVzX2JsaXQgOiBieXRlcyAtPiBpbnQgLT4gYnl0ZXMgLT4gaW50IC0+IGludCAtPiB1bml0XG4gICAgICAgICAgICAgICAgICAgICAgICA9IFwiY2FtbF9ibGl0X3N0cmluZ1wiIFwibm9hbGxvY1wiXG5leHRlcm5hbCBieXRlc191bnNhZmVfdG9fc3RyaW5nIDogYnl0ZXMgLT4gc3RyaW5nID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgYnl0ZXNfdW5zYWZlX29mX3N0cmluZyA6IHN0cmluZyAtPiBieXRlcyA9IFwiJWlkZW50aXR5XCJcblxubGV0ICggXiApIHMxIHMyID1cbiAgbGV0IGwxID0gc3RyaW5nX2xlbmd0aCBzMSBhbmQgbDIgPSBzdHJpbmdfbGVuZ3RoIHMyIGluXG4gIGxldCBzID0gYnl0ZXNfY3JlYXRlIChsMSArIGwyKSBpblxuICBzdHJpbmdfYmxpdCBzMSAwIHMgMCBsMTtcbiAgc3RyaW5nX2JsaXQgczIgMCBzIGwxIGwyO1xuICBieXRlc191bnNhZmVfdG9fc3RyaW5nIHNcblxuKCogQ2hhcmFjdGVyIG9wZXJhdGlvbnMgLS0gbW9yZSBpbiBtb2R1bGUgQ2hhciAqKVxuXG5leHRlcm5hbCBpbnRfb2ZfY2hhciA6IGNoYXIgLT4gaW50ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgdW5zYWZlX2NoYXJfb2ZfaW50IDogaW50IC0+IGNoYXIgPSBcIiVpZGVudGl0eVwiXG5sZXQgY2hhcl9vZl9pbnQgbiA9XG4gIGlmIG4gPCAwIHx8IG4gPiAyNTUgdGhlbiBpbnZhbGlkX2FyZyBcImNoYXJfb2ZfaW50XCIgZWxzZSB1bnNhZmVfY2hhcl9vZl9pbnQgblxuXG4oKiBVbml0IG9wZXJhdGlvbnMgKilcblxuZXh0ZXJuYWwgaWdub3JlIDogJ2EgLT4gdW5pdCA9IFwiJWlnbm9yZVwiXG5cbigqIFBhaXIgb3BlcmF0aW9ucyAqKVxuXG5leHRlcm5hbCBmc3QgOiAnYSAqICdiIC0+ICdhID0gXCIlZmllbGQwXCJcbmV4dGVybmFsIHNuZCA6ICdhICogJ2IgLT4gJ2IgPSBcIiVmaWVsZDFcIlxuXG4oKiBSZWZlcmVuY2VzICopXG5cbnR5cGUgJ2EgcmVmID0geyBtdXRhYmxlIGNvbnRlbnRzIDogJ2EgfVxuZXh0ZXJuYWwgcmVmIDogJ2EgLT4gJ2EgcmVmID0gXCIlbWFrZW11dGFibGVcIlxuZXh0ZXJuYWwgKCAhICkgOiAnYSByZWYgLT4gJ2EgPSBcIiVmaWVsZDBcIlxuZXh0ZXJuYWwgKCA6PSApIDogJ2EgcmVmIC0+ICdhIC0+IHVuaXQgPSBcIiVzZXRmaWVsZDBcIlxuZXh0ZXJuYWwgaW5jciA6IGludCByZWYgLT4gdW5pdCA9IFwiJWluY3JcIlxuZXh0ZXJuYWwgZGVjciA6IGludCByZWYgLT4gdW5pdCA9IFwiJWRlY3JcIlxuXG4oKiBTdHJpbmcgY29udmVyc2lvbiBmdW5jdGlvbnMgKilcblxuZXh0ZXJuYWwgZm9ybWF0X2ludCA6IHN0cmluZyAtPiBpbnQgLT4gc3RyaW5nID0gXCJjYW1sX2Zvcm1hdF9pbnRcIlxuZXh0ZXJuYWwgZm9ybWF0X2Zsb2F0IDogc3RyaW5nIC0+IGZsb2F0IC0+IHN0cmluZyA9IFwiY2FtbF9mb3JtYXRfZmxvYXRcIlxuXG5sZXQgc3RyaW5nX29mX2Jvb2wgYiA9XG4gIGlmIGIgdGhlbiBcInRydWVcIiBlbHNlIFwiZmFsc2VcIlxubGV0IGJvb2xfb2Zfc3RyaW5nID0gZnVuY3Rpb25cbiAgfCBcInRydWVcIiAtPiB0cnVlXG4gIHwgXCJmYWxzZVwiIC0+IGZhbHNlXG4gIHwgXyAtPiBpbnZhbGlkX2FyZyBcImJvb2xfb2Zfc3RyaW5nXCJcblxubGV0IHN0cmluZ19vZl9pbnQgbiA9XG4gIGZvcm1hdF9pbnQgXCIlZFwiIG5cblxuZXh0ZXJuYWwgaW50X29mX3N0cmluZyA6IHN0cmluZyAtPiBpbnQgPSBcImNhbWxfaW50X29mX3N0cmluZ1wiXG5leHRlcm5hbCBzdHJpbmdfZ2V0IDogc3RyaW5nIC0+IGludCAtPiBjaGFyID0gXCIlc3RyaW5nX3NhZmVfZ2V0XCJcblxubGV0IHZhbGlkX2Zsb2F0X2xleGVtIHMgPVxuICBsZXQgbCA9IHN0cmluZ19sZW5ndGggcyBpblxuICBsZXQgcmVjIGxvb3AgaSA9XG4gICAgaWYgaSA+PSBsIHRoZW4gcyBeIFwiLlwiIGVsc2VcbiAgICBtYXRjaCBzdHJpbmdfZ2V0IHMgaSB3aXRoXG4gICAgfCAnMCcgLi4gJzknIHwgJy0nIC0+IGxvb3AgKGkgKyAxKVxuICAgIHwgXyAtPiBzXG4gIGluXG4gIGxvb3AgMFxuOztcblxubGV0IHN0cmluZ19vZl9mbG9hdCBmID0gdmFsaWRfZmxvYXRfbGV4ZW0gKGZvcm1hdF9mbG9hdCBcIiUuMTJnXCIgZik7O1xuXG5leHRlcm5hbCBmbG9hdF9vZl9zdHJpbmcgOiBzdHJpbmcgLT4gZmxvYXQgPSBcImNhbWxfZmxvYXRfb2Zfc3RyaW5nXCJcblxuKCogTGlzdCBvcGVyYXRpb25zIC0tIG1vcmUgaW4gbW9kdWxlIExpc3QgKilcblxubGV0IHJlYyAoIEAgKSBsMSBsMiA9XG4gIG1hdGNoIGwxIHdpdGhcbiAgICBbXSAtPiBsMlxuICB8IGhkIDo6IHRsIC0+IGhkIDo6ICh0bCBAIGwyKVxuXG4oKiBJL08gb3BlcmF0aW9ucyAqKVxuXG50eXBlIGluX2NoYW5uZWxcbnR5cGUgb3V0X2NoYW5uZWxcblxuZXh0ZXJuYWwgb3Blbl9kZXNjcmlwdG9yX291dCA6IGludCAtPiBvdXRfY2hhbm5lbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3Jfb3V0XCJcbmV4dGVybmFsIG9wZW5fZGVzY3JpcHRvcl9pbiA6IGludCAtPiBpbl9jaGFubmVsID0gXCJjYW1sX21sX29wZW5fZGVzY3JpcHRvcl9pblwiXG5cbmxldCBzdGRpbiA9IG9wZW5fZGVzY3JpcHRvcl9pbiAwXG5sZXQgc3Rkb3V0ID0gb3Blbl9kZXNjcmlwdG9yX291dCAxXG5sZXQgc3RkZXJyID0gb3Blbl9kZXNjcmlwdG9yX291dCAyXG5cbigqIEdlbmVyYWwgb3V0cHV0IGZ1bmN0aW9ucyAqKVxuXG50eXBlIG9wZW5fZmxhZyA9XG4gICAgT3Blbl9yZG9ubHkgfCBPcGVuX3dyb25seSB8IE9wZW5fYXBwZW5kXG4gIHwgT3Blbl9jcmVhdCB8IE9wZW5fdHJ1bmMgfCBPcGVuX2V4Y2xcbiAgfCBPcGVuX2JpbmFyeSB8IE9wZW5fdGV4dCB8IE9wZW5fbm9uYmxvY2tcblxuZXh0ZXJuYWwgb3Blbl9kZXNjIDogc3RyaW5nIC0+IG9wZW5fZmxhZyBsaXN0IC0+IGludCAtPiBpbnQgPSBcImNhbWxfc3lzX29wZW5cIlxuXG5sZXQgb3Blbl9vdXRfZ2VuIG1vZGUgcGVybSBuYW1lID1cbiAgb3Blbl9kZXNjcmlwdG9yX291dChvcGVuX2Rlc2MgbmFtZSBtb2RlIHBlcm0pXG5cbmxldCBvcGVuX291dCBuYW1lID1cbiAgb3Blbl9vdXRfZ2VuIFtPcGVuX3dyb25seTsgT3Blbl9jcmVhdDsgT3Blbl90cnVuYzsgT3Blbl90ZXh0XSAwbzY2NiBuYW1lXG5cbmxldCBvcGVuX291dF9iaW4gbmFtZSA9XG4gIG9wZW5fb3V0X2dlbiBbT3Blbl93cm9ubHk7IE9wZW5fY3JlYXQ7IE9wZW5fdHJ1bmM7IE9wZW5fYmluYXJ5XSAwbzY2NiBuYW1lXG5cbmV4dGVybmFsIGZsdXNoIDogb3V0X2NoYW5uZWwgLT4gdW5pdCA9IFwiY2FtbF9tbF9mbHVzaFwiXG5cbmV4dGVybmFsIG91dF9jaGFubmVsc19saXN0IDogdW5pdCAtPiBvdXRfY2hhbm5lbCBsaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiY2FtbF9tbF9vdXRfY2hhbm5lbHNfbGlzdFwiXG5cbmxldCBmbHVzaF9hbGwgKCkgPVxuICBsZXQgcmVjIGl0ZXIgPSBmdW5jdGlvblxuICAgICAgW10gLT4gKClcbiAgICB8IGEgOjogbCAtPiAodHJ5IGZsdXNoIGEgd2l0aCBfIC0+ICgpKTsgaXRlciBsXG4gIGluIGl0ZXIgKG91dF9jaGFubmVsc19saXN0ICgpKVxuXG5leHRlcm5hbCB1bnNhZmVfb3V0cHV0IDogb3V0X2NoYW5uZWwgLT4gYnl0ZXMgLT4gaW50IC0+IGludCAtPiB1bml0XG4gICAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX21sX291dHB1dFwiXG5leHRlcm5hbCB1bnNhZmVfb3V0cHV0X3N0cmluZyA6IG91dF9jaGFubmVsIC0+IHN0cmluZyAtPiBpbnQgLT4gaW50IC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX21sX291dHB1dFwiXG5cbmV4dGVybmFsIG91dHB1dF9jaGFyIDogb3V0X2NoYW5uZWwgLT4gY2hhciAtPiB1bml0ID0gXCJjYW1sX21sX291dHB1dF9jaGFyXCJcblxubGV0IG91dHB1dF9ieXRlcyBvYyBzID1cbiAgdW5zYWZlX291dHB1dCBvYyBzIDAgKGJ5dGVzX2xlbmd0aCBzKVxuXG5sZXQgb3V0cHV0X3N0cmluZyBvYyBzID1cbiAgdW5zYWZlX291dHB1dF9zdHJpbmcgb2MgcyAwIChzdHJpbmdfbGVuZ3RoIHMpXG5cbmxldCBvdXRwdXQgb2MgcyBvZnMgbGVuID1cbiAgaWYgb2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IGJ5dGVzX2xlbmd0aCBzIC0gbGVuXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJvdXRwdXRcIlxuICBlbHNlIHVuc2FmZV9vdXRwdXQgb2MgcyBvZnMgbGVuXG5cbmxldCBvdXRwdXRfc3Vic3RyaW5nIG9jIHMgb2ZzIGxlbiA9XG4gIGlmIG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiBzdHJpbmdfbGVuZ3RoIHMgLSBsZW5cbiAgdGhlbiBpbnZhbGlkX2FyZyBcIm91dHB1dF9zdWJzdHJpbmdcIlxuICBlbHNlIHVuc2FmZV9vdXRwdXRfc3RyaW5nIG9jIHMgb2ZzIGxlblxuXG5leHRlcm5hbCBvdXRwdXRfYnl0ZSA6IG91dF9jaGFubmVsIC0+IGludCAtPiB1bml0ID0gXCJjYW1sX21sX291dHB1dF9jaGFyXCJcbmV4dGVybmFsIG91dHB1dF9iaW5hcnlfaW50IDogb3V0X2NoYW5uZWwgLT4gaW50IC0+IHVuaXQgPSBcImNhbWxfbWxfb3V0cHV0X2ludFwiXG5cbmV4dGVybmFsIG1hcnNoYWxfdG9fY2hhbm5lbCA6IG91dF9jaGFubmVsIC0+ICdhIC0+IHVuaXQgbGlzdCAtPiB1bml0XG4gICAgID0gXCJjYW1sX291dHB1dF92YWx1ZVwiXG5sZXQgb3V0cHV0X3ZhbHVlIGNoYW4gdiA9IG1hcnNoYWxfdG9fY2hhbm5lbCBjaGFuIHYgW11cblxuZXh0ZXJuYWwgc2Vla19vdXQgOiBvdXRfY2hhbm5lbCAtPiBpbnQgLT4gdW5pdCA9IFwiY2FtbF9tbF9zZWVrX291dFwiXG5leHRlcm5hbCBwb3Nfb3V0IDogb3V0X2NoYW5uZWwgLT4gaW50ID0gXCJjYW1sX21sX3Bvc19vdXRcIlxuZXh0ZXJuYWwgb3V0X2NoYW5uZWxfbGVuZ3RoIDogb3V0X2NoYW5uZWwgLT4gaW50ID0gXCJjYW1sX21sX2NoYW5uZWxfc2l6ZVwiXG5leHRlcm5hbCBjbG9zZV9vdXRfY2hhbm5lbCA6IG91dF9jaGFubmVsIC0+IHVuaXQgPSBcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiXG5sZXQgY2xvc2Vfb3V0IG9jID0gZmx1c2ggb2M7IGNsb3NlX291dF9jaGFubmVsIG9jXG5sZXQgY2xvc2Vfb3V0X25vZXJyIG9jID1cbiAgKHRyeSBmbHVzaCBvYyB3aXRoIF8gLT4gKCkpO1xuICAodHJ5IGNsb3NlX291dF9jaGFubmVsIG9jIHdpdGggXyAtPiAoKSlcbmV4dGVybmFsIHNldF9iaW5hcnlfbW9kZV9vdXQgOiBvdXRfY2hhbm5lbCAtPiBib29sIC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBcImNhbWxfbWxfc2V0X2JpbmFyeV9tb2RlXCJcblxuKCogR2VuZXJhbCBpbnB1dCBmdW5jdGlvbnMgKilcblxubGV0IG9wZW5faW5fZ2VuIG1vZGUgcGVybSBuYW1lID1cbiAgb3Blbl9kZXNjcmlwdG9yX2luKG9wZW5fZGVzYyBuYW1lIG1vZGUgcGVybSlcblxubGV0IG9wZW5faW4gbmFtZSA9XG4gIG9wZW5faW5fZ2VuIFtPcGVuX3Jkb25seTsgT3Blbl90ZXh0XSAwIG5hbWVcblxubGV0IG9wZW5faW5fYmluIG5hbWUgPVxuICBvcGVuX2luX2dlbiBbT3Blbl9yZG9ubHk7IE9wZW5fYmluYXJ5XSAwIG5hbWVcblxuZXh0ZXJuYWwgaW5wdXRfY2hhciA6IGluX2NoYW5uZWwgLT4gY2hhciA9IFwiY2FtbF9tbF9pbnB1dF9jaGFyXCJcblxuZXh0ZXJuYWwgdW5zYWZlX2lucHV0IDogaW5fY2hhbm5lbCAtPiBieXRlcyAtPiBpbnQgLT4gaW50IC0+IGludFxuICAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX21sX2lucHV0XCJcblxubGV0IGlucHV0IGljIHMgb2ZzIGxlbiA9XG4gIGlmIG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiBieXRlc19sZW5ndGggcyAtIGxlblxuICB0aGVuIGludmFsaWRfYXJnIFwiaW5wdXRcIlxuICBlbHNlIHVuc2FmZV9pbnB1dCBpYyBzIG9mcyBsZW5cblxubGV0IHJlYyB1bnNhZmVfcmVhbGx5X2lucHV0IGljIHMgb2ZzIGxlbiA9XG4gIGlmIGxlbiA8PSAwIHRoZW4gKCkgZWxzZSBiZWdpblxuICAgIGxldCByID0gdW5zYWZlX2lucHV0IGljIHMgb2ZzIGxlbiBpblxuICAgIGlmIHIgPSAwXG4gICAgdGhlbiByYWlzZSBFbmRfb2ZfZmlsZVxuICAgIGVsc2UgdW5zYWZlX3JlYWxseV9pbnB1dCBpYyBzIChvZnMgKyByKSAobGVuIC0gcilcbiAgZW5kXG5cbmxldCByZWFsbHlfaW5wdXQgaWMgcyBvZnMgbGVuID1cbiAgaWYgb2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IGJ5dGVzX2xlbmd0aCBzIC0gbGVuXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJyZWFsbHlfaW5wdXRcIlxuICBlbHNlIHVuc2FmZV9yZWFsbHlfaW5wdXQgaWMgcyBvZnMgbGVuXG5cbmxldCByZWFsbHlfaW5wdXRfc3RyaW5nIGljIGxlbiA9XG4gIGxldCBzID0gYnl0ZXNfY3JlYXRlIGxlbiBpblxuICByZWFsbHlfaW5wdXQgaWMgcyAwIGxlbjtcbiAgYnl0ZXNfdW5zYWZlX3RvX3N0cmluZyBzXG5cbmV4dGVybmFsIGlucHV0X3NjYW5fbGluZSA6IGluX2NoYW5uZWwgLT4gaW50ID0gXCJjYW1sX21sX2lucHV0X3NjYW5fbGluZVwiXG5cbmxldCBpbnB1dF9saW5lIGNoYW4gPVxuICBsZXQgcmVjIGJ1aWxkX3Jlc3VsdCBidWYgcG9zID0gZnVuY3Rpb25cbiAgICBbXSAtPiBidWZcbiAgfCBoZCA6OiB0bCAtPlxuICAgICAgbGV0IGxlbiA9IGJ5dGVzX2xlbmd0aCBoZCBpblxuICAgICAgYnl0ZXNfYmxpdCBoZCAwIGJ1ZiAocG9zIC0gbGVuKSBsZW47XG4gICAgICBidWlsZF9yZXN1bHQgYnVmIChwb3MgLSBsZW4pIHRsIGluXG4gIGxldCByZWMgc2NhbiBhY2N1IGxlbiA9XG4gICAgbGV0IG4gPSBpbnB1dF9zY2FuX2xpbmUgY2hhbiBpblxuICAgIGlmIG4gPSAwIHRoZW4gYmVnaW4gICAgICAgICAgICAgICAgICAgKCogbiA9IDA6IHdlIGFyZSBhdCBFT0YgKilcbiAgICAgIG1hdGNoIGFjY3Ugd2l0aFxuICAgICAgICBbXSAtPiByYWlzZSBFbmRfb2ZfZmlsZVxuICAgICAgfCBfICAtPiBidWlsZF9yZXN1bHQgKGJ5dGVzX2NyZWF0ZSBsZW4pIGxlbiBhY2N1XG4gICAgZW5kIGVsc2UgaWYgbiA+IDAgdGhlbiBiZWdpbiAgICAgICAgICAoKiBuID4gMDogbmV3bGluZSBmb3VuZCBpbiBidWZmZXIgKilcbiAgICAgIGxldCByZXMgPSBieXRlc19jcmVhdGUgKG4gLSAxKSBpblxuICAgICAgaWdub3JlICh1bnNhZmVfaW5wdXQgY2hhbiByZXMgMCAobiAtIDEpKTtcbiAgICAgIGlnbm9yZSAoaW5wdXRfY2hhciBjaGFuKTsgICAgICAgICAgICgqIHNraXAgdGhlIG5ld2xpbmUgKilcbiAgICAgIG1hdGNoIGFjY3Ugd2l0aFxuICAgICAgICBbXSAtPiByZXNcbiAgICAgIHwgIF8gLT4gbGV0IGxlbiA9IGxlbiArIG4gLSAxIGluXG4gICAgICAgICAgICAgIGJ1aWxkX3Jlc3VsdCAoYnl0ZXNfY3JlYXRlIGxlbikgbGVuIChyZXMgOjogYWNjdSlcbiAgICBlbmQgZWxzZSBiZWdpbiAgICAgICAgICAgICAgICAgICAgICAgICgqIG4gPCAwOiBuZXdsaW5lIG5vdCBmb3VuZCAqKVxuICAgICAgbGV0IGJlZyA9IGJ5dGVzX2NyZWF0ZSAoLW4pIGluXG4gICAgICBpZ25vcmUodW5zYWZlX2lucHV0IGNoYW4gYmVnIDAgKC1uKSk7XG4gICAgICBzY2FuIChiZWcgOjogYWNjdSkgKGxlbiAtIG4pXG4gICAgZW5kXG4gIGluIGJ5dGVzX3Vuc2FmZV90b19zdHJpbmcgKHNjYW4gW10gMClcblxuZXh0ZXJuYWwgaW5wdXRfYnl0ZSA6IGluX2NoYW5uZWwgLT4gaW50ID0gXCJjYW1sX21sX2lucHV0X2NoYXJcIlxuZXh0ZXJuYWwgaW5wdXRfYmluYXJ5X2ludCA6IGluX2NoYW5uZWwgLT4gaW50ID0gXCJjYW1sX21sX2lucHV0X2ludFwiXG5leHRlcm5hbCBpbnB1dF92YWx1ZSA6IGluX2NoYW5uZWwgLT4gJ2EgPSBcImNhbWxfaW5wdXRfdmFsdWVcIlxuZXh0ZXJuYWwgc2Vla19pbiA6IGluX2NoYW5uZWwgLT4gaW50IC0+IHVuaXQgPSBcImNhbWxfbWxfc2Vla19pblwiXG5leHRlcm5hbCBwb3NfaW4gOiBpbl9jaGFubmVsIC0+IGludCA9IFwiY2FtbF9tbF9wb3NfaW5cIlxuZXh0ZXJuYWwgaW5fY2hhbm5lbF9sZW5ndGggOiBpbl9jaGFubmVsIC0+IGludCA9IFwiY2FtbF9tbF9jaGFubmVsX3NpemVcIlxuZXh0ZXJuYWwgY2xvc2VfaW4gOiBpbl9jaGFubmVsIC0+IHVuaXQgPSBcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiXG5sZXQgY2xvc2VfaW5fbm9lcnIgaWMgPSAodHJ5IGNsb3NlX2luIGljIHdpdGggXyAtPiAoKSk7O1xuZXh0ZXJuYWwgc2V0X2JpbmFyeV9tb2RlX2luIDogaW5fY2hhbm5lbCAtPiBib29sIC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiY2FtbF9tbF9zZXRfYmluYXJ5X21vZGVcIlxuXG4oKiBPdXRwdXQgZnVuY3Rpb25zIG9uIHN0YW5kYXJkIG91dHB1dCAqKVxuXG5sZXQgcHJpbnRfY2hhciBjID0gb3V0cHV0X2NoYXIgc3Rkb3V0IGNcbmxldCBwcmludF9zdHJpbmcgcyA9IG91dHB1dF9zdHJpbmcgc3Rkb3V0IHNcbmxldCBwcmludF9ieXRlcyBzID0gb3V0cHV0X2J5dGVzIHN0ZG91dCBzXG5sZXQgcHJpbnRfaW50IGkgPSBvdXRwdXRfc3RyaW5nIHN0ZG91dCAoc3RyaW5nX29mX2ludCBpKVxubGV0IHByaW50X2Zsb2F0IGYgPSBvdXRwdXRfc3RyaW5nIHN0ZG91dCAoc3RyaW5nX29mX2Zsb2F0IGYpXG5sZXQgcHJpbnRfZW5kbGluZSBzID1cbiAgb3V0cHV0X3N0cmluZyBzdGRvdXQgczsgb3V0cHV0X2NoYXIgc3Rkb3V0ICdcXG4nOyBmbHVzaCBzdGRvdXRcbmxldCBwcmludF9uZXdsaW5lICgpID0gb3V0cHV0X2NoYXIgc3Rkb3V0ICdcXG4nOyBmbHVzaCBzdGRvdXRcblxuKCogT3V0cHV0IGZ1bmN0aW9ucyBvbiBzdGFuZGFyZCBlcnJvciAqKVxuXG5sZXQgcHJlcnJfY2hhciBjID0gb3V0cHV0X2NoYXIgc3RkZXJyIGNcbmxldCBwcmVycl9zdHJpbmcgcyA9IG91dHB1dF9zdHJpbmcgc3RkZXJyIHNcbmxldCBwcmVycl9ieXRlcyBzID0gb3V0cHV0X2J5dGVzIHN0ZGVyciBzXG5sZXQgcHJlcnJfaW50IGkgPSBvdXRwdXRfc3RyaW5nIHN0ZGVyciAoc3RyaW5nX29mX2ludCBpKVxubGV0IHByZXJyX2Zsb2F0IGYgPSBvdXRwdXRfc3RyaW5nIHN0ZGVyciAoc3RyaW5nX29mX2Zsb2F0IGYpXG5sZXQgcHJlcnJfZW5kbGluZSBzID1cbiAgb3V0cHV0X3N0cmluZyBzdGRlcnIgczsgb3V0cHV0X2NoYXIgc3RkZXJyICdcXG4nOyBmbHVzaCBzdGRlcnJcbmxldCBwcmVycl9uZXdsaW5lICgpID0gb3V0cHV0X2NoYXIgc3RkZXJyICdcXG4nOyBmbHVzaCBzdGRlcnJcblxuKCogSW5wdXQgZnVuY3Rpb25zIG9uIHN0YW5kYXJkIGlucHV0ICopXG5cbmxldCByZWFkX2xpbmUgKCkgPSBmbHVzaCBzdGRvdXQ7IGlucHV0X2xpbmUgc3RkaW5cbmxldCByZWFkX2ludCAoKSA9IGludF9vZl9zdHJpbmcocmVhZF9saW5lKCkpXG5sZXQgcmVhZF9mbG9hdCAoKSA9IGZsb2F0X29mX3N0cmluZyhyZWFkX2xpbmUoKSlcblxuKCogT3BlcmF0aW9ucyBvbiBsYXJnZSBmaWxlcyAqKVxuXG5tb2R1bGUgTGFyZ2VGaWxlID1cbiAgc3RydWN0XG4gICAgZXh0ZXJuYWwgc2Vla19vdXQgOiBvdXRfY2hhbm5lbCAtPiBpbnQ2NCAtPiB1bml0ID0gXCJjYW1sX21sX3NlZWtfb3V0XzY0XCJcbiAgICBleHRlcm5hbCBwb3Nfb3V0IDogb3V0X2NoYW5uZWwgLT4gaW50NjQgPSBcImNhbWxfbWxfcG9zX291dF82NFwiXG4gICAgZXh0ZXJuYWwgb3V0X2NoYW5uZWxfbGVuZ3RoIDogb3V0X2NoYW5uZWwgLT4gaW50NjRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBcImNhbWxfbWxfY2hhbm5lbF9zaXplXzY0XCJcbiAgICBleHRlcm5hbCBzZWVrX2luIDogaW5fY2hhbm5lbCAtPiBpbnQ2NCAtPiB1bml0ID0gXCJjYW1sX21sX3NlZWtfaW5fNjRcIlxuICAgIGV4dGVybmFsIHBvc19pbiA6IGluX2NoYW5uZWwgLT4gaW50NjQgPSBcImNhbWxfbWxfcG9zX2luXzY0XCJcbiAgICBleHRlcm5hbCBpbl9jaGFubmVsX2xlbmd0aCA6IGluX2NoYW5uZWwgLT4gaW50NjQgPSBcImNhbWxfbWxfY2hhbm5lbF9zaXplXzY0XCJcbiAgZW5kXG5cbigqIEZvcm1hdHMgKilcblxudHlwZSAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm9ybWF0NlxuICAgPSAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmZvcm1hdDZcbiAgID0gRm9ybWF0IG9mICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuZm10XG4gICAgICAgICAgICAgICAqIHN0cmluZ1xuXG50eXBlICgnYSwgJ2IsICdjLCAnZCkgZm9ybWF0NCA9ICgnYSwgJ2IsICdjLCAnYywgJ2MsICdkKSBmb3JtYXQ2XG5cbnR5cGUgKCdhLCAnYiwgJ2MpIGZvcm1hdCA9ICgnYSwgJ2IsICdjLCAnYykgZm9ybWF0NFxuXG5sZXQgc3RyaW5nX29mX2Zvcm1hdCAoRm9ybWF0IChmbXQsIHN0cikpID0gc3RyXG5cbmV4dGVybmFsIGZvcm1hdF9vZl9zdHJpbmcgOlxuICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmb3JtYXQ2IC0+XG4gKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZvcm1hdDYgPSBcIiVpZGVudGl0eVwiXG5cbmxldCAoXl4pIChGb3JtYXQgKGZtdDEsIHN0cjEpKSAoRm9ybWF0IChmbXQyLCBzdHIyKSkgPVxuICBGb3JtYXQgKENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5jb25jYXRfZm10IGZtdDEgZm10MixcbiAgICAgICAgICBzdHIxIF4gXCIlLFwiIF4gc3RyMilcblxuKCogTWlzY2VsbGFuZW91cyAqKVxuXG5leHRlcm5hbCBzeXNfZXhpdCA6IGludCAtPiAnYSA9IFwiY2FtbF9zeXNfZXhpdFwiXG5cbmxldCBleGl0X2Z1bmN0aW9uID0gcmVmIGZsdXNoX2FsbFxuXG5sZXQgYXRfZXhpdCBmID1cbiAgbGV0IGcgPSAhZXhpdF9mdW5jdGlvbiBpblxuICBleGl0X2Z1bmN0aW9uIDo9IChmdW4gKCkgLT4gZigpOyBnKCkpXG5cbmxldCBkb19hdF9leGl0ICgpID0gKCFleGl0X2Z1bmN0aW9uKSAoKVxuXG5sZXQgZXhpdCByZXRjb2RlID1cbiAgZG9fYXRfZXhpdCAoKTtcbiAgc3lzX2V4aXQgcmV0Y29kZVxuXG5sZXQgXyA9IHJlZ2lzdGVyX25hbWVkX3ZhbHVlIFwiUGVydmFzaXZlcy5kb19hdF9leGl0XCIgZG9fYXRfZXhpdFxuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBBcnJheSBvcGVyYXRpb25zICopXG5cbmV4dGVybmFsIGxlbmd0aCA6ICdhIGFycmF5IC0+IGludCA9IFwiJWFycmF5X2xlbmd0aFwiXG5leHRlcm5hbCBnZXQ6ICdhIGFycmF5IC0+IGludCAtPiAnYSA9IFwiJWFycmF5X3NhZmVfZ2V0XCJcbmV4dGVybmFsIHNldDogJ2EgYXJyYXkgLT4gaW50IC0+ICdhIC0+IHVuaXQgPSBcIiVhcnJheV9zYWZlX3NldFwiXG5leHRlcm5hbCB1bnNhZmVfZ2V0OiAnYSBhcnJheSAtPiBpbnQgLT4gJ2EgPSBcIiVhcnJheV91bnNhZmVfZ2V0XCJcbmV4dGVybmFsIHVuc2FmZV9zZXQ6ICdhIGFycmF5IC0+IGludCAtPiAnYSAtPiB1bml0ID0gXCIlYXJyYXlfdW5zYWZlX3NldFwiXG5leHRlcm5hbCBtYWtlOiBpbnQgLT4gJ2EgLT4gJ2EgYXJyYXkgPSBcImNhbWxfbWFrZV92ZWN0XCJcbmV4dGVybmFsIGNyZWF0ZTogaW50IC0+ICdhIC0+ICdhIGFycmF5ID0gXCJjYW1sX21ha2VfdmVjdFwiXG5leHRlcm5hbCB1bnNhZmVfc3ViIDogJ2EgYXJyYXkgLT4gaW50IC0+IGludCAtPiAnYSBhcnJheSA9IFwiY2FtbF9hcnJheV9zdWJcIlxuZXh0ZXJuYWwgYXBwZW5kX3ByaW0gOiAnYSBhcnJheSAtPiAnYSBhcnJheSAtPiAnYSBhcnJheSA9IFwiY2FtbF9hcnJheV9hcHBlbmRcIlxuZXh0ZXJuYWwgY29uY2F0IDogJ2EgYXJyYXkgbGlzdCAtPiAnYSBhcnJheSA9IFwiY2FtbF9hcnJheV9jb25jYXRcIlxuZXh0ZXJuYWwgdW5zYWZlX2JsaXQgOlxuICAnYSBhcnJheSAtPiBpbnQgLT4gJ2EgYXJyYXkgLT4gaW50IC0+IGludCAtPiB1bml0ID0gXCJjYW1sX2FycmF5X2JsaXRcIlxuZXh0ZXJuYWwgbWFrZV9mbG9hdDogaW50IC0+IGZsb2F0IGFycmF5ID0gXCJjYW1sX21ha2VfZmxvYXRfdmVjdFwiXG5cbmxldCBpbml0IGwgZiA9XG4gIGlmIGwgPSAwIHRoZW4gW3x8XSBlbHNlXG4gIGlmIGwgPCAwIHRoZW4gaW52YWxpZF9hcmcgXCJBcnJheS5pbml0XCJcbiAgKCogU2VlICM2NTc1LiBXZSBjb3VsZCBhbHNvIGNoZWNrIGZvciBtYXhpbXVtIGFycmF5IHNpemUsIGJ1dCB0aGlzIGRlcGVuZHNcbiAgICAgb24gd2hldGhlciB3ZSBjcmVhdGUgYSBmbG9hdCBhcnJheSBvciBhIHJlZ3VsYXIgb25lLi4uICopXG4gIGVsc2VcbiAgIGxldCByZXMgPSBjcmVhdGUgbCAoZiAwKSBpblxuICAgZm9yIGkgPSAxIHRvIHByZWQgbCBkb1xuICAgICB1bnNhZmVfc2V0IHJlcyBpIChmIGkpXG4gICBkb25lO1xuICAgcmVzXG5cbmxldCBtYWtlX21hdHJpeCBzeCBzeSBpbml0ID1cbiAgbGV0IHJlcyA9IGNyZWF0ZSBzeCBbfHxdIGluXG4gIGZvciB4ID0gMCB0byBwcmVkIHN4IGRvXG4gICAgdW5zYWZlX3NldCByZXMgeCAoY3JlYXRlIHN5IGluaXQpXG4gIGRvbmU7XG4gIHJlc1xuXG5sZXQgY3JlYXRlX21hdHJpeCA9IG1ha2VfbWF0cml4XG5cbmxldCBjb3B5IGEgPVxuICBsZXQgbCA9IGxlbmd0aCBhIGluIGlmIGwgPSAwIHRoZW4gW3x8XSBlbHNlIHVuc2FmZV9zdWIgYSAwIGxcblxubGV0IGFwcGVuZCBhMSBhMiA9XG4gIGxldCBsMSA9IGxlbmd0aCBhMSBpblxuICBpZiBsMSA9IDAgdGhlbiBjb3B5IGEyXG4gIGVsc2UgaWYgbGVuZ3RoIGEyID0gMCB0aGVuIHVuc2FmZV9zdWIgYTEgMCBsMVxuICBlbHNlIGFwcGVuZF9wcmltIGExIGEyXG5cbmxldCBzdWIgYSBvZnMgbGVuID1cbiAgaWYgbGVuIDwgMCB8fCBvZnMgPiBsZW5ndGggYSAtIGxlblxuICB0aGVuIGludmFsaWRfYXJnIFwiQXJyYXkuc3ViXCJcbiAgZWxzZSB1bnNhZmVfc3ViIGEgb2ZzIGxlblxuXG5sZXQgZmlsbCBhIG9mcyBsZW4gdiA9XG4gIGlmIG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiBsZW5ndGggYSAtIGxlblxuICB0aGVuIGludmFsaWRfYXJnIFwiQXJyYXkuZmlsbFwiXG4gIGVsc2UgZm9yIGkgPSBvZnMgdG8gb2ZzICsgbGVuIC0gMSBkbyB1bnNhZmVfc2V0IGEgaSB2IGRvbmVcblxubGV0IGJsaXQgYTEgb2ZzMSBhMiBvZnMyIGxlbiA9XG4gIGlmIGxlbiA8IDAgfHwgb2ZzMSA8IDAgfHwgb2ZzMSA+IGxlbmd0aCBhMSAtIGxlblxuICAgICAgICAgICAgIHx8IG9mczIgPCAwIHx8IG9mczIgPiBsZW5ndGggYTIgLSBsZW5cbiAgdGhlbiBpbnZhbGlkX2FyZyBcIkFycmF5LmJsaXRcIlxuICBlbHNlIHVuc2FmZV9ibGl0IGExIG9mczEgYTIgb2ZzMiBsZW5cblxubGV0IGl0ZXIgZiBhID1cbiAgZm9yIGkgPSAwIHRvIGxlbmd0aCBhIC0gMSBkbyBmKHVuc2FmZV9nZXQgYSBpKSBkb25lXG5cbmxldCBtYXAgZiBhID1cbiAgbGV0IGwgPSBsZW5ndGggYSBpblxuICBpZiBsID0gMCB0aGVuIFt8fF0gZWxzZSBiZWdpblxuICAgIGxldCByID0gY3JlYXRlIGwgKGYodW5zYWZlX2dldCBhIDApKSBpblxuICAgIGZvciBpID0gMSB0byBsIC0gMSBkb1xuICAgICAgdW5zYWZlX3NldCByIGkgKGYodW5zYWZlX2dldCBhIGkpKVxuICAgIGRvbmU7XG4gICAgclxuICBlbmRcblxubGV0IGl0ZXJpIGYgYSA9XG4gIGZvciBpID0gMCB0byBsZW5ndGggYSAtIDEgZG8gZiBpICh1bnNhZmVfZ2V0IGEgaSkgZG9uZVxuXG5sZXQgbWFwaSBmIGEgPVxuICBsZXQgbCA9IGxlbmd0aCBhIGluXG4gIGlmIGwgPSAwIHRoZW4gW3x8XSBlbHNlIGJlZ2luXG4gICAgbGV0IHIgPSBjcmVhdGUgbCAoZiAwICh1bnNhZmVfZ2V0IGEgMCkpIGluXG4gICAgZm9yIGkgPSAxIHRvIGwgLSAxIGRvXG4gICAgICB1bnNhZmVfc2V0IHIgaSAoZiBpICh1bnNhZmVfZ2V0IGEgaSkpXG4gICAgZG9uZTtcbiAgICByXG4gIGVuZFxuXG5sZXQgdG9fbGlzdCBhID1cbiAgbGV0IHJlYyB0b2xpc3QgaSByZXMgPVxuICAgIGlmIGkgPCAwIHRoZW4gcmVzIGVsc2UgdG9saXN0IChpIC0gMSkgKHVuc2FmZV9nZXQgYSBpIDo6IHJlcykgaW5cbiAgdG9saXN0IChsZW5ndGggYSAtIDEpIFtdXG5cbigqIENhbm5vdCB1c2UgTGlzdC5sZW5ndGggaGVyZSBiZWNhdXNlIHRoZSBMaXN0IG1vZHVsZSBkZXBlbmRzIG9uIEFycmF5LiAqKVxubGV0IHJlYyBsaXN0X2xlbmd0aCBhY2N1ID0gZnVuY3Rpb25cbiAgfCBbXSAtPiBhY2N1XG4gIHwgaDo6dCAtPiBsaXN0X2xlbmd0aCAoc3VjYyBhY2N1KSB0XG47O1xuXG5sZXQgb2ZfbGlzdCA9IGZ1bmN0aW9uXG4gICAgW10gLT4gW3x8XVxuICB8IGhkOjp0bCBhcyBsIC0+XG4gICAgICBsZXQgYSA9IGNyZWF0ZSAobGlzdF9sZW5ndGggMCBsKSBoZCBpblxuICAgICAgbGV0IHJlYyBmaWxsIGkgPSBmdW5jdGlvblxuICAgICAgICAgIFtdIC0+IGFcbiAgICAgICAgfCBoZDo6dGwgLT4gdW5zYWZlX3NldCBhIGkgaGQ7IGZpbGwgKGkrMSkgdGwgaW5cbiAgICAgIGZpbGwgMSB0bFxuXG5sZXQgZm9sZF9sZWZ0IGYgeCBhID1cbiAgbGV0IHIgPSByZWYgeCBpblxuICBmb3IgaSA9IDAgdG8gbGVuZ3RoIGEgLSAxIGRvXG4gICAgciA6PSBmICFyICh1bnNhZmVfZ2V0IGEgaSlcbiAgZG9uZTtcbiAgIXJcblxubGV0IGZvbGRfcmlnaHQgZiBhIHggPVxuICBsZXQgciA9IHJlZiB4IGluXG4gIGZvciBpID0gbGVuZ3RoIGEgLSAxIGRvd250byAwIGRvXG4gICAgciA6PSBmICh1bnNhZmVfZ2V0IGEgaSkgIXJcbiAgZG9uZTtcbiAgIXJcblxuZXhjZXB0aW9uIEJvdHRvbSBvZiBpbnQ7O1xubGV0IHNvcnQgY21wIGEgPVxuICBsZXQgbWF4c29uIGwgaSA9XG4gICAgbGV0IGkzMSA9IGkraStpKzEgaW5cbiAgICBsZXQgeCA9IHJlZiBpMzEgaW5cbiAgICBpZiBpMzErMiA8IGwgdGhlbiBiZWdpblxuICAgICAgaWYgY21wIChnZXQgYSBpMzEpIChnZXQgYSAoaTMxKzEpKSA8IDAgdGhlbiB4IDo9IGkzMSsxO1xuICAgICAgaWYgY21wIChnZXQgYSAheCkgKGdldCBhIChpMzErMikpIDwgMCB0aGVuIHggOj0gaTMxKzI7XG4gICAgICAheFxuICAgIGVuZCBlbHNlXG4gICAgICBpZiBpMzErMSA8IGwgJiYgY21wIChnZXQgYSBpMzEpIChnZXQgYSAoaTMxKzEpKSA8IDBcbiAgICAgIHRoZW4gaTMxKzFcbiAgICAgIGVsc2UgaWYgaTMxIDwgbCB0aGVuIGkzMSBlbHNlIHJhaXNlIChCb3R0b20gaSlcbiAgaW5cbiAgbGV0IHJlYyB0cmlja2xlZG93biBsIGkgZSA9XG4gICAgbGV0IGogPSBtYXhzb24gbCBpIGluXG4gICAgaWYgY21wIChnZXQgYSBqKSBlID4gMCB0aGVuIGJlZ2luXG4gICAgICBzZXQgYSBpIChnZXQgYSBqKTtcbiAgICAgIHRyaWNrbGVkb3duIGwgaiBlO1xuICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICBzZXQgYSBpIGU7XG4gICAgZW5kO1xuICBpblxuICBsZXQgdHJpY2tsZSBsIGkgZSA9IHRyeSB0cmlja2xlZG93biBsIGkgZSB3aXRoIEJvdHRvbSBpIC0+IHNldCBhIGkgZSBpblxuICBsZXQgcmVjIGJ1YmJsZWRvd24gbCBpID1cbiAgICBsZXQgaiA9IG1heHNvbiBsIGkgaW5cbiAgICBzZXQgYSBpIChnZXQgYSBqKTtcbiAgICBidWJibGVkb3duIGwgalxuICBpblxuICBsZXQgYnViYmxlIGwgaSA9IHRyeSBidWJibGVkb3duIGwgaSB3aXRoIEJvdHRvbSBpIC0+IGkgaW5cbiAgbGV0IHJlYyB0cmlja2xldXAgaSBlID1cbiAgICBsZXQgZmF0aGVyID0gKGkgLSAxKSAvIDMgaW5cbiAgICBhc3NlcnQgKGkgPD4gZmF0aGVyKTtcbiAgICBpZiBjbXAgKGdldCBhIGZhdGhlcikgZSA8IDAgdGhlbiBiZWdpblxuICAgICAgc2V0IGEgaSAoZ2V0IGEgZmF0aGVyKTtcbiAgICAgIGlmIGZhdGhlciA+IDAgdGhlbiB0cmlja2xldXAgZmF0aGVyIGUgZWxzZSBzZXQgYSAwIGU7XG4gICAgZW5kIGVsc2UgYmVnaW5cbiAgICAgIHNldCBhIGkgZTtcbiAgICBlbmQ7XG4gIGluXG4gIGxldCBsID0gbGVuZ3RoIGEgaW5cbiAgZm9yIGkgPSAobCArIDEpIC8gMyAtIDEgZG93bnRvIDAgZG8gdHJpY2tsZSBsIGkgKGdldCBhIGkpOyBkb25lO1xuICBmb3IgaSA9IGwgLSAxIGRvd250byAyIGRvXG4gICAgbGV0IGUgPSAoZ2V0IGEgaSkgaW5cbiAgICBzZXQgYSBpIChnZXQgYSAwKTtcbiAgICB0cmlja2xldXAgKGJ1YmJsZSBpIDApIGU7XG4gIGRvbmU7XG4gIGlmIGwgPiAxIHRoZW4gKGxldCBlID0gKGdldCBhIDEpIGluIHNldCBhIDEgKGdldCBhIDApOyBzZXQgYSAwIGUpO1xuOztcblxubGV0IGN1dG9mZiA9IDU7O1xubGV0IHN0YWJsZV9zb3J0IGNtcCBhID1cbiAgbGV0IG1lcmdlIHNyYzFvZnMgc3JjMWxlbiBzcmMyIHNyYzJvZnMgc3JjMmxlbiBkc3QgZHN0b2ZzID1cbiAgICBsZXQgc3JjMXIgPSBzcmMxb2ZzICsgc3JjMWxlbiBhbmQgc3JjMnIgPSBzcmMyb2ZzICsgc3JjMmxlbiBpblxuICAgIGxldCByZWMgbG9vcCBpMSBzMSBpMiBzMiBkID1cbiAgICAgIGlmIGNtcCBzMSBzMiA8PSAwIHRoZW4gYmVnaW5cbiAgICAgICAgc2V0IGRzdCBkIHMxO1xuICAgICAgICBsZXQgaTEgPSBpMSArIDEgaW5cbiAgICAgICAgaWYgaTEgPCBzcmMxciB0aGVuXG4gICAgICAgICAgbG9vcCBpMSAoZ2V0IGEgaTEpIGkyIHMyIChkICsgMSlcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGJsaXQgc3JjMiBpMiBkc3QgKGQgKyAxKSAoc3JjMnIgLSBpMilcbiAgICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICAgIHNldCBkc3QgZCBzMjtcbiAgICAgICAgbGV0IGkyID0gaTIgKyAxIGluXG4gICAgICAgIGlmIGkyIDwgc3JjMnIgdGhlblxuICAgICAgICAgIGxvb3AgaTEgczEgaTIgKGdldCBzcmMyIGkyKSAoZCArIDEpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBibGl0IGEgaTEgZHN0IChkICsgMSkgKHNyYzFyIC0gaTEpXG4gICAgICBlbmRcbiAgICBpbiBsb29wIHNyYzFvZnMgKGdldCBhIHNyYzFvZnMpIHNyYzJvZnMgKGdldCBzcmMyIHNyYzJvZnMpIGRzdG9mcztcbiAgaW5cbiAgbGV0IGlzb3J0dG8gc3Jjb2ZzIGRzdCBkc3RvZnMgbGVuID1cbiAgICBmb3IgaSA9IDAgdG8gbGVuIC0gMSBkb1xuICAgICAgbGV0IGUgPSAoZ2V0IGEgKHNyY29mcyArIGkpKSBpblxuICAgICAgbGV0IGogPSByZWYgKGRzdG9mcyArIGkgLSAxKSBpblxuICAgICAgd2hpbGUgKCFqID49IGRzdG9mcyAmJiBjbXAgKGdldCBkc3QgIWopIGUgPiAwKSBkb1xuICAgICAgICBzZXQgZHN0ICghaiArIDEpIChnZXQgZHN0ICFqKTtcbiAgICAgICAgZGVjciBqO1xuICAgICAgZG9uZTtcbiAgICAgIHNldCBkc3QgKCFqICsgMSkgZTtcbiAgICBkb25lO1xuICBpblxuICBsZXQgcmVjIHNvcnR0byBzcmNvZnMgZHN0IGRzdG9mcyBsZW4gPVxuICAgIGlmIGxlbiA8PSBjdXRvZmYgdGhlbiBpc29ydHRvIHNyY29mcyBkc3QgZHN0b2ZzIGxlbiBlbHNlIGJlZ2luXG4gICAgICBsZXQgbDEgPSBsZW4gLyAyIGluXG4gICAgICBsZXQgbDIgPSBsZW4gLSBsMSBpblxuICAgICAgc29ydHRvIChzcmNvZnMgKyBsMSkgZHN0IChkc3RvZnMgKyBsMSkgbDI7XG4gICAgICBzb3J0dG8gc3Jjb2ZzIGEgKHNyY29mcyArIGwyKSBsMTtcbiAgICAgIG1lcmdlIChzcmNvZnMgKyBsMikgbDEgZHN0IChkc3RvZnMgKyBsMSkgbDIgZHN0IGRzdG9mcztcbiAgICBlbmQ7XG4gIGluXG4gIGxldCBsID0gbGVuZ3RoIGEgaW5cbiAgaWYgbCA8PSBjdXRvZmYgdGhlbiBpc29ydHRvIDAgYSAwIGwgZWxzZSBiZWdpblxuICAgIGxldCBsMSA9IGwgLyAyIGluXG4gICAgbGV0IGwyID0gbCAtIGwxIGluXG4gICAgbGV0IHQgPSBtYWtlIGwyIChnZXQgYSAwKSBpblxuICAgIHNvcnR0byBsMSB0IDAgbDI7XG4gICAgc29ydHRvIDAgYSBsMiBsMTtcbiAgICBtZXJnZSBsMiBsMSB0IDAgbDIgYSAwO1xuICBlbmQ7XG47O1xuXG5sZXQgZmFzdF9zb3J0ID0gc3RhYmxlX3NvcnQ7O1xuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBMaXN0IG9wZXJhdGlvbnMgKilcblxubGV0IHJlYyBsZW5ndGhfYXV4IGxlbiA9IGZ1bmN0aW9uXG4gICAgW10gLT4gbGVuXG4gIHwgYTo6bCAtPiBsZW5ndGhfYXV4IChsZW4gKyAxKSBsXG5cbmxldCBsZW5ndGggbCA9IGxlbmd0aF9hdXggMCBsXG5cbmxldCBoZCA9IGZ1bmN0aW9uXG4gICAgW10gLT4gZmFpbHdpdGggXCJoZFwiXG4gIHwgYTo6bCAtPiBhXG5cbmxldCB0bCA9IGZ1bmN0aW9uXG4gICAgW10gLT4gZmFpbHdpdGggXCJ0bFwiXG4gIHwgYTo6bCAtPiBsXG5cbmxldCBudGggbCBuID1cbiAgaWYgbiA8IDAgdGhlbiBpbnZhbGlkX2FyZyBcIkxpc3QubnRoXCIgZWxzZVxuICBsZXQgcmVjIG50aF9hdXggbCBuID1cbiAgICBtYXRjaCBsIHdpdGhcbiAgICB8IFtdIC0+IGZhaWx3aXRoIFwibnRoXCJcbiAgICB8IGE6OmwgLT4gaWYgbiA9IDAgdGhlbiBhIGVsc2UgbnRoX2F1eCBsIChuLTEpXG4gIGluIG50aF9hdXggbCBuXG5cbmxldCBhcHBlbmQgPSAoQClcblxubGV0IHJlYyByZXZfYXBwZW5kIGwxIGwyID1cbiAgbWF0Y2ggbDEgd2l0aFxuICAgIFtdIC0+IGwyXG4gIHwgYSA6OiBsIC0+IHJldl9hcHBlbmQgbCAoYSA6OiBsMilcblxubGV0IHJldiBsID0gcmV2X2FwcGVuZCBsIFtdXG5cbmxldCByZWMgZmxhdHRlbiA9IGZ1bmN0aW9uXG4gICAgW10gLT4gW11cbiAgfCBsOjpyIC0+IGwgQCBmbGF0dGVuIHJcblxubGV0IGNvbmNhdCA9IGZsYXR0ZW5cblxubGV0IHJlYyBtYXAgZiA9IGZ1bmN0aW9uXG4gICAgW10gLT4gW11cbiAgfCBhOjpsIC0+IGxldCByID0gZiBhIGluIHIgOjogbWFwIGYgbFxuXG5sZXQgcmVjIG1hcGkgaSBmID0gZnVuY3Rpb25cbiAgICBbXSAtPiBbXVxuICB8IGE6OmwgLT4gbGV0IHIgPSBmIGkgYSBpbiByIDo6IG1hcGkgKGkgKyAxKSBmIGxcblxubGV0IG1hcGkgZiBsID0gbWFwaSAwIGYgbFxuXG5sZXQgcmV2X21hcCBmIGwgPVxuICBsZXQgcmVjIHJtYXBfZiBhY2N1ID0gZnVuY3Rpb25cbiAgICB8IFtdIC0+IGFjY3VcbiAgICB8IGE6OmwgLT4gcm1hcF9mIChmIGEgOjogYWNjdSkgbFxuICBpblxuICBybWFwX2YgW10gbFxuOztcblxubGV0IHJlYyBpdGVyIGYgPSBmdW5jdGlvblxuICAgIFtdIC0+ICgpXG4gIHwgYTo6bCAtPiBmIGE7IGl0ZXIgZiBsXG5cbmxldCByZWMgaXRlcmkgaSBmID0gZnVuY3Rpb25cbiAgICBbXSAtPiAoKVxuICB8IGE6OmwgLT4gZiBpIGE7IGl0ZXJpIChpICsgMSkgZiBsXG5cbmxldCBpdGVyaSBmIGwgPSBpdGVyaSAwIGYgbFxuXG5sZXQgcmVjIGZvbGRfbGVmdCBmIGFjY3UgbCA9XG4gIG1hdGNoIGwgd2l0aFxuICAgIFtdIC0+IGFjY3VcbiAgfCBhOjpsIC0+IGZvbGRfbGVmdCBmIChmIGFjY3UgYSkgbFxuXG5sZXQgcmVjIGZvbGRfcmlnaHQgZiBsIGFjY3UgPVxuICBtYXRjaCBsIHdpdGhcbiAgICBbXSAtPiBhY2N1XG4gIHwgYTo6bCAtPiBmIGEgKGZvbGRfcmlnaHQgZiBsIGFjY3UpXG5cbmxldCByZWMgbWFwMiBmIGwxIGwyID1cbiAgbWF0Y2ggKGwxLCBsMikgd2l0aFxuICAgIChbXSwgW10pIC0+IFtdXG4gIHwgKGExOjpsMSwgYTI6OmwyKSAtPiBsZXQgciA9IGYgYTEgYTIgaW4gciA6OiBtYXAyIGYgbDEgbDJcbiAgfCAoXywgXykgLT4gaW52YWxpZF9hcmcgXCJMaXN0Lm1hcDJcIlxuXG5sZXQgcmV2X21hcDIgZiBsMSBsMiA9XG4gIGxldCByZWMgcm1hcDJfZiBhY2N1IGwxIGwyID1cbiAgICBtYXRjaCAobDEsIGwyKSB3aXRoXG4gICAgfCAoW10sIFtdKSAtPiBhY2N1XG4gICAgfCAoYTE6OmwxLCBhMjo6bDIpIC0+IHJtYXAyX2YgKGYgYTEgYTIgOjogYWNjdSkgbDEgbDJcbiAgICB8IChfLCBfKSAtPiBpbnZhbGlkX2FyZyBcIkxpc3QucmV2X21hcDJcIlxuICBpblxuICBybWFwMl9mIFtdIGwxIGwyXG47O1xuXG5sZXQgcmVjIGl0ZXIyIGYgbDEgbDIgPVxuICBtYXRjaCAobDEsIGwyKSB3aXRoXG4gICAgKFtdLCBbXSkgLT4gKClcbiAgfCAoYTE6OmwxLCBhMjo6bDIpIC0+IGYgYTEgYTI7IGl0ZXIyIGYgbDEgbDJcbiAgfCAoXywgXykgLT4gaW52YWxpZF9hcmcgXCJMaXN0Lml0ZXIyXCJcblxubGV0IHJlYyBmb2xkX2xlZnQyIGYgYWNjdSBsMSBsMiA9XG4gIG1hdGNoIChsMSwgbDIpIHdpdGhcbiAgICAoW10sIFtdKSAtPiBhY2N1XG4gIHwgKGExOjpsMSwgYTI6OmwyKSAtPiBmb2xkX2xlZnQyIGYgKGYgYWNjdSBhMSBhMikgbDEgbDJcbiAgfCAoXywgXykgLT4gaW52YWxpZF9hcmcgXCJMaXN0LmZvbGRfbGVmdDJcIlxuXG5sZXQgcmVjIGZvbGRfcmlnaHQyIGYgbDEgbDIgYWNjdSA9XG4gIG1hdGNoIChsMSwgbDIpIHdpdGhcbiAgICAoW10sIFtdKSAtPiBhY2N1XG4gIHwgKGExOjpsMSwgYTI6OmwyKSAtPiBmIGExIGEyIChmb2xkX3JpZ2h0MiBmIGwxIGwyIGFjY3UpXG4gIHwgKF8sIF8pIC0+IGludmFsaWRfYXJnIFwiTGlzdC5mb2xkX3JpZ2h0MlwiXG5cbmxldCByZWMgZm9yX2FsbCBwID0gZnVuY3Rpb25cbiAgICBbXSAtPiB0cnVlXG4gIHwgYTo6bCAtPiBwIGEgJiYgZm9yX2FsbCBwIGxcblxubGV0IHJlYyBleGlzdHMgcCA9IGZ1bmN0aW9uXG4gICAgW10gLT4gZmFsc2VcbiAgfCBhOjpsIC0+IHAgYSB8fCBleGlzdHMgcCBsXG5cbmxldCByZWMgZm9yX2FsbDIgcCBsMSBsMiA9XG4gIG1hdGNoIChsMSwgbDIpIHdpdGhcbiAgICAoW10sIFtdKSAtPiB0cnVlXG4gIHwgKGExOjpsMSwgYTI6OmwyKSAtPiBwIGExIGEyICYmIGZvcl9hbGwyIHAgbDEgbDJcbiAgfCAoXywgXykgLT4gaW52YWxpZF9hcmcgXCJMaXN0LmZvcl9hbGwyXCJcblxubGV0IHJlYyBleGlzdHMyIHAgbDEgbDIgPVxuICBtYXRjaCAobDEsIGwyKSB3aXRoXG4gICAgKFtdLCBbXSkgLT4gZmFsc2VcbiAgfCAoYTE6OmwxLCBhMjo6bDIpIC0+IHAgYTEgYTIgfHwgZXhpc3RzMiBwIGwxIGwyXG4gIHwgKF8sIF8pIC0+IGludmFsaWRfYXJnIFwiTGlzdC5leGlzdHMyXCJcblxubGV0IHJlYyBtZW0geCA9IGZ1bmN0aW9uXG4gICAgW10gLT4gZmFsc2VcbiAgfCBhOjpsIC0+IGNvbXBhcmUgYSB4ID0gMCB8fCBtZW0geCBsXG5cbmxldCByZWMgbWVtcSB4ID0gZnVuY3Rpb25cbiAgICBbXSAtPiBmYWxzZVxuICB8IGE6OmwgLT4gYSA9PSB4IHx8IG1lbXEgeCBsXG5cbmxldCByZWMgYXNzb2MgeCA9IGZ1bmN0aW9uXG4gICAgW10gLT4gcmFpc2UgTm90X2ZvdW5kXG4gIHwgKGEsYik6OmwgLT4gaWYgY29tcGFyZSBhIHggPSAwIHRoZW4gYiBlbHNlIGFzc29jIHggbFxuXG5sZXQgcmVjIGFzc3EgeCA9IGZ1bmN0aW9uXG4gICAgW10gLT4gcmFpc2UgTm90X2ZvdW5kXG4gIHwgKGEsYik6OmwgLT4gaWYgYSA9PSB4IHRoZW4gYiBlbHNlIGFzc3EgeCBsXG5cbmxldCByZWMgbWVtX2Fzc29jIHggPSBmdW5jdGlvblxuICB8IFtdIC0+IGZhbHNlXG4gIHwgKGEsIGIpIDo6IGwgLT4gY29tcGFyZSBhIHggPSAwIHx8IG1lbV9hc3NvYyB4IGxcblxubGV0IHJlYyBtZW1fYXNzcSB4ID0gZnVuY3Rpb25cbiAgfCBbXSAtPiBmYWxzZVxuICB8IChhLCBiKSA6OiBsIC0+IGEgPT0geCB8fCBtZW1fYXNzcSB4IGxcblxubGV0IHJlYyByZW1vdmVfYXNzb2MgeCA9IGZ1bmN0aW9uXG4gIHwgW10gLT4gW11cbiAgfCAoYSwgYiBhcyBwYWlyKSA6OiBsIC0+XG4gICAgICBpZiBjb21wYXJlIGEgeCA9IDAgdGhlbiBsIGVsc2UgcGFpciA6OiByZW1vdmVfYXNzb2MgeCBsXG5cbmxldCByZWMgcmVtb3ZlX2Fzc3EgeCA9IGZ1bmN0aW9uXG4gIHwgW10gLT4gW11cbiAgfCAoYSwgYiBhcyBwYWlyKSA6OiBsIC0+IGlmIGEgPT0geCB0aGVuIGwgZWxzZSBwYWlyIDo6IHJlbW92ZV9hc3NxIHggbFxuXG5sZXQgcmVjIGZpbmQgcCA9IGZ1bmN0aW9uXG4gIHwgW10gLT4gcmFpc2UgTm90X2ZvdW5kXG4gIHwgeCA6OiBsIC0+IGlmIHAgeCB0aGVuIHggZWxzZSBmaW5kIHAgbFxuXG5sZXQgZmluZF9hbGwgcCA9XG4gIGxldCByZWMgZmluZCBhY2N1ID0gZnVuY3Rpb25cbiAgfCBbXSAtPiByZXYgYWNjdVxuICB8IHggOjogbCAtPiBpZiBwIHggdGhlbiBmaW5kICh4IDo6IGFjY3UpIGwgZWxzZSBmaW5kIGFjY3UgbCBpblxuICBmaW5kIFtdXG5cbmxldCBmaWx0ZXIgPSBmaW5kX2FsbFxuXG5sZXQgcGFydGl0aW9uIHAgbCA9XG4gIGxldCByZWMgcGFydCB5ZXMgbm8gPSBmdW5jdGlvblxuICB8IFtdIC0+IChyZXYgeWVzLCByZXYgbm8pXG4gIHwgeCA6OiBsIC0+IGlmIHAgeCB0aGVuIHBhcnQgKHggOjogeWVzKSBubyBsIGVsc2UgcGFydCB5ZXMgKHggOjogbm8pIGwgaW5cbiAgcGFydCBbXSBbXSBsXG5cbmxldCByZWMgc3BsaXQgPSBmdW5jdGlvblxuICAgIFtdIC0+IChbXSwgW10pXG4gIHwgKHgseSk6OmwgLT5cbiAgICAgIGxldCAocngsIHJ5KSA9IHNwbGl0IGwgaW4gKHg6OnJ4LCB5OjpyeSlcblxubGV0IHJlYyBjb21iaW5lIGwxIGwyID1cbiAgbWF0Y2ggKGwxLCBsMikgd2l0aFxuICAgIChbXSwgW10pIC0+IFtdXG4gIHwgKGExOjpsMSwgYTI6OmwyKSAtPiAoYTEsIGEyKSA6OiBjb21iaW5lIGwxIGwyXG4gIHwgKF8sIF8pIC0+IGludmFsaWRfYXJnIFwiTGlzdC5jb21iaW5lXCJcblxuKCoqIHNvcnRpbmcgKilcblxubGV0IHJlYyBtZXJnZSBjbXAgbDEgbDIgPVxuICBtYXRjaCBsMSwgbDIgd2l0aFxuICB8IFtdLCBsMiAtPiBsMlxuICB8IGwxLCBbXSAtPiBsMVxuICB8IGgxIDo6IHQxLCBoMiA6OiB0MiAtPlxuICAgICAgaWYgY21wIGgxIGgyIDw9IDBcbiAgICAgIHRoZW4gaDEgOjogbWVyZ2UgY21wIHQxIGwyXG4gICAgICBlbHNlIGgyIDo6IG1lcmdlIGNtcCBsMSB0MlxuOztcblxubGV0IHJlYyBjaG9wIGsgbCA9XG4gIGlmIGsgPSAwIHRoZW4gbCBlbHNlIGJlZ2luXG4gICAgbWF0Y2ggbCB3aXRoXG4gICAgfCB4Ojp0IC0+IGNob3AgKGstMSkgdFxuICAgIHwgXyAtPiBhc3NlcnQgZmFsc2VcbiAgZW5kXG47O1xuXG5sZXQgc3RhYmxlX3NvcnQgY21wIGwgPVxuICBsZXQgcmVjIHJldl9tZXJnZSBsMSBsMiBhY2N1ID1cbiAgICBtYXRjaCBsMSwgbDIgd2l0aFxuICAgIHwgW10sIGwyIC0+IHJldl9hcHBlbmQgbDIgYWNjdVxuICAgIHwgbDEsIFtdIC0+IHJldl9hcHBlbmQgbDEgYWNjdVxuICAgIHwgaDE6OnQxLCBoMjo6dDIgLT5cbiAgICAgICAgaWYgY21wIGgxIGgyIDw9IDBcbiAgICAgICAgdGhlbiByZXZfbWVyZ2UgdDEgbDIgKGgxOjphY2N1KVxuICAgICAgICBlbHNlIHJldl9tZXJnZSBsMSB0MiAoaDI6OmFjY3UpXG4gIGluXG4gIGxldCByZWMgcmV2X21lcmdlX3JldiBsMSBsMiBhY2N1ID1cbiAgICBtYXRjaCBsMSwgbDIgd2l0aFxuICAgIHwgW10sIGwyIC0+IHJldl9hcHBlbmQgbDIgYWNjdVxuICAgIHwgbDEsIFtdIC0+IHJldl9hcHBlbmQgbDEgYWNjdVxuICAgIHwgaDE6OnQxLCBoMjo6dDIgLT5cbiAgICAgICAgaWYgY21wIGgxIGgyID4gMFxuICAgICAgICB0aGVuIHJldl9tZXJnZV9yZXYgdDEgbDIgKGgxOjphY2N1KVxuICAgICAgICBlbHNlIHJldl9tZXJnZV9yZXYgbDEgdDIgKGgyOjphY2N1KVxuICBpblxuICBsZXQgcmVjIHNvcnQgbiBsID1cbiAgICBtYXRjaCBuLCBsIHdpdGhcbiAgICB8IDIsIHgxIDo6IHgyIDo6IF8gLT5cbiAgICAgICBpZiBjbXAgeDEgeDIgPD0gMCB0aGVuIFt4MTsgeDJdIGVsc2UgW3gyOyB4MV1cbiAgICB8IDMsIHgxIDo6IHgyIDo6IHgzIDo6IF8gLT5cbiAgICAgICBpZiBjbXAgeDEgeDIgPD0gMCB0aGVuIGJlZ2luXG4gICAgICAgICBpZiBjbXAgeDIgeDMgPD0gMCB0aGVuIFt4MTsgeDI7IHgzXVxuICAgICAgICAgZWxzZSBpZiBjbXAgeDEgeDMgPD0gMCB0aGVuIFt4MTsgeDM7IHgyXVxuICAgICAgICAgZWxzZSBbeDM7IHgxOyB4Ml1cbiAgICAgICBlbmQgZWxzZSBiZWdpblxuICAgICAgICAgaWYgY21wIHgxIHgzIDw9IDAgdGhlbiBbeDI7IHgxOyB4M11cbiAgICAgICAgIGVsc2UgaWYgY21wIHgyIHgzIDw9IDAgdGhlbiBbeDI7IHgzOyB4MV1cbiAgICAgICAgIGVsc2UgW3gzOyB4MjsgeDFdXG4gICAgICAgZW5kXG4gICAgfCBuLCBsIC0+XG4gICAgICAgbGV0IG4xID0gbiBhc3IgMSBpblxuICAgICAgIGxldCBuMiA9IG4gLSBuMSBpblxuICAgICAgIGxldCBsMiA9IGNob3AgbjEgbCBpblxuICAgICAgIGxldCBzMSA9IHJldl9zb3J0IG4xIGwgaW5cbiAgICAgICBsZXQgczIgPSByZXZfc29ydCBuMiBsMiBpblxuICAgICAgIHJldl9tZXJnZV9yZXYgczEgczIgW11cbiAgYW5kIHJldl9zb3J0IG4gbCA9XG4gICAgbWF0Y2ggbiwgbCB3aXRoXG4gICAgfCAyLCB4MSA6OiB4MiA6OiBfIC0+XG4gICAgICAgaWYgY21wIHgxIHgyID4gMCB0aGVuIFt4MTsgeDJdIGVsc2UgW3gyOyB4MV1cbiAgICB8IDMsIHgxIDo6IHgyIDo6IHgzIDo6IF8gLT5cbiAgICAgICBpZiBjbXAgeDEgeDIgPiAwIHRoZW4gYmVnaW5cbiAgICAgICAgIGlmIGNtcCB4MiB4MyA+IDAgdGhlbiBbeDE7IHgyOyB4M11cbiAgICAgICAgIGVsc2UgaWYgY21wIHgxIHgzID4gMCB0aGVuIFt4MTsgeDM7IHgyXVxuICAgICAgICAgZWxzZSBbeDM7IHgxOyB4Ml1cbiAgICAgICBlbmQgZWxzZSBiZWdpblxuICAgICAgICAgaWYgY21wIHgxIHgzID4gMCB0aGVuIFt4MjsgeDE7IHgzXVxuICAgICAgICAgZWxzZSBpZiBjbXAgeDIgeDMgPiAwIHRoZW4gW3gyOyB4MzsgeDFdXG4gICAgICAgICBlbHNlIFt4MzsgeDI7IHgxXVxuICAgICAgIGVuZFxuICAgIHwgbiwgbCAtPlxuICAgICAgIGxldCBuMSA9IG4gYXNyIDEgaW5cbiAgICAgICBsZXQgbjIgPSBuIC0gbjEgaW5cbiAgICAgICBsZXQgbDIgPSBjaG9wIG4xIGwgaW5cbiAgICAgICBsZXQgczEgPSBzb3J0IG4xIGwgaW5cbiAgICAgICBsZXQgczIgPSBzb3J0IG4yIGwyIGluXG4gICAgICAgcmV2X21lcmdlIHMxIHMyIFtdXG4gIGluXG4gIGxldCBsZW4gPSBsZW5ndGggbCBpblxuICBpZiBsZW4gPCAyIHRoZW4gbCBlbHNlIHNvcnQgbGVuIGxcbjs7XG5cbmxldCBzb3J0ID0gc3RhYmxlX3NvcnQ7O1xubGV0IGZhc3Rfc29ydCA9IHN0YWJsZV9zb3J0OztcblxuKCogTm90ZTogb24gYSBsaXN0IG9mIGxlbmd0aCBiZXR3ZWVuIGFib3V0IDEwMDAwMCAoZGVwZW5kaW5nIG9uIHRoZSBtaW5vclxuICAgaGVhcCBzaXplIGFuZCB0aGUgdHlwZSBvZiB0aGUgbGlzdCkgYW5kIFN5cy5tYXhfYXJyYXlfc2l6ZSwgaXQgaXNcbiAgIGFjdHVhbGx5IGZhc3RlciB0byB1c2UgdGhlIGZvbGxvd2luZywgYnV0IGl0IG1pZ2h0IGFsc28gdXNlIG1vcmUgbWVtb3J5XG4gICBiZWNhdXNlIHRoZSBhcmd1bWVudCBsaXN0IGNhbm5vdCBiZSBkZWFsbG9jYXRlZCBpbmNyZW1lbnRhbGx5LlxuXG4gICBBbHNvLCB0aGVyZSBzZWVtcyB0byBiZSBhIGJ1ZyBpbiB0aGlzIGNvZGUgb3IgaW4gdGhlXG4gICBpbXBsZW1lbnRhdGlvbiBvZiBvYmpfdHJ1bmNhdGUuXG5cbmV4dGVybmFsIG9ial90cnVuY2F0ZSA6ICdhIGFycmF5IC0+IGludCAtPiB1bml0ID0gXCJjYW1sX29ial90cnVuY2F0ZVwiXG5cbmxldCBhcnJheV90b19saXN0X2luX3BsYWNlIGEgPVxuICBsZXQgbCA9IEFycmF5Lmxlbmd0aCBhIGluXG4gIGxldCByZWMgbG9vcCBhY2N1IG4gcCA9XG4gICAgaWYgcCA8PSAwIHRoZW4gYWNjdSBlbHNlIGJlZ2luXG4gICAgICBpZiBwID0gbiB0aGVuIGJlZ2luXG4gICAgICAgIG9ial90cnVuY2F0ZSBhIHA7XG4gICAgICAgIGxvb3AgKGEuKHAtMSkgOjogYWNjdSkgKG4tMTAwMCkgKHAtMSlcbiAgICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICAgIGxvb3AgKGEuKHAtMSkgOjogYWNjdSkgbiAocC0xKVxuICAgICAgZW5kXG4gICAgZW5kXG4gIGluXG4gIGxvb3AgW10gKGwtMTAwMCkgbFxuOztcblxubGV0IHN0YWJsZV9zb3J0IGNtcCBsID1cbiAgbGV0IGEgPSBBcnJheS5vZl9saXN0IGwgaW5cbiAgQXJyYXkuc3RhYmxlX3NvcnQgY21wIGE7XG4gIGFycmF5X3RvX2xpc3RfaW5fcGxhY2UgYVxuOztcbiopXG5cblxuKCoqIHNvcnRpbmcgKyByZW1vdmluZyBkdXBsaWNhdGVzICopXG5cbmxldCBzb3J0X3VuaXEgY21wIGwgPVxuICBsZXQgcmVjIHJldl9tZXJnZSBsMSBsMiBhY2N1ID1cbiAgICBtYXRjaCBsMSwgbDIgd2l0aFxuICAgIHwgW10sIGwyIC0+IHJldl9hcHBlbmQgbDIgYWNjdVxuICAgIHwgbDEsIFtdIC0+IHJldl9hcHBlbmQgbDEgYWNjdVxuICAgIHwgaDE6OnQxLCBoMjo6dDIgLT5cbiAgICAgICAgbGV0IGMgPSBjbXAgaDEgaDIgaW5cbiAgICAgICAgaWYgYyA9IDAgdGhlbiByZXZfbWVyZ2UgdDEgdDIgKGgxOjphY2N1KVxuICAgICAgICBlbHNlIGlmIGMgPCAwXG4gICAgICAgIHRoZW4gcmV2X21lcmdlIHQxIGwyIChoMTo6YWNjdSlcbiAgICAgICAgZWxzZSByZXZfbWVyZ2UgbDEgdDIgKGgyOjphY2N1KVxuICBpblxuICBsZXQgcmVjIHJldl9tZXJnZV9yZXYgbDEgbDIgYWNjdSA9XG4gICAgbWF0Y2ggbDEsIGwyIHdpdGhcbiAgICB8IFtdLCBsMiAtPiByZXZfYXBwZW5kIGwyIGFjY3VcbiAgICB8IGwxLCBbXSAtPiByZXZfYXBwZW5kIGwxIGFjY3VcbiAgICB8IGgxOjp0MSwgaDI6OnQyIC0+XG4gICAgICAgIGxldCBjID0gY21wIGgxIGgyIGluXG4gICAgICAgIGlmIGMgPSAwIHRoZW4gcmV2X21lcmdlX3JldiB0MSB0MiAoaDE6OmFjY3UpXG4gICAgICAgIGVsc2UgaWYgYyA+IDBcbiAgICAgICAgdGhlbiByZXZfbWVyZ2VfcmV2IHQxIGwyIChoMTo6YWNjdSlcbiAgICAgICAgZWxzZSByZXZfbWVyZ2VfcmV2IGwxIHQyIChoMjo6YWNjdSlcbiAgaW5cbiAgbGV0IHJlYyBzb3J0IG4gbCA9XG4gICAgbWF0Y2ggbiwgbCB3aXRoXG4gICAgfCAyLCB4MSA6OiB4MiA6OiBfIC0+XG4gICAgICAgbGV0IGMgPSBjbXAgeDEgeDIgaW5cbiAgICAgICBpZiBjID0gMCB0aGVuIFt4MV1cbiAgICAgICBlbHNlIGlmIGMgPCAwIHRoZW4gW3gxOyB4Ml0gZWxzZSBbeDI7IHgxXVxuICAgIHwgMywgeDEgOjogeDIgOjogeDMgOjogXyAtPlxuICAgICAgIGxldCBjID0gY21wIHgxIHgyIGluXG4gICAgICAgaWYgYyA9IDAgdGhlbiBiZWdpblxuICAgICAgICAgbGV0IGMgPSBjbXAgeDIgeDMgaW5cbiAgICAgICAgIGlmIGMgPSAwIHRoZW4gW3gyXVxuICAgICAgICAgZWxzZSBpZiBjIDwgMCB0aGVuIFt4MjsgeDNdIGVsc2UgW3gzOyB4Ml1cbiAgICAgICBlbmQgZWxzZSBpZiBjIDwgMCB0aGVuIGJlZ2luXG4gICAgICAgICBsZXQgYyA9IGNtcCB4MiB4MyBpblxuICAgICAgICAgaWYgYyA9IDAgdGhlbiBbeDE7IHgyXVxuICAgICAgICAgZWxzZSBpZiBjIDwgMCB0aGVuIFt4MTsgeDI7IHgzXVxuICAgICAgICAgZWxzZSBsZXQgYyA9IGNtcCB4MSB4MyBpblxuICAgICAgICAgaWYgYyA9IDAgdGhlbiBbeDE7IHgyXVxuICAgICAgICAgZWxzZSBpZiBjIDwgMCB0aGVuIFt4MTsgeDM7IHgyXVxuICAgICAgICAgZWxzZSBbeDM7IHgxOyB4Ml1cbiAgICAgICBlbmQgZWxzZSBiZWdpblxuICAgICAgICAgbGV0IGMgPSBjbXAgeDEgeDMgaW5cbiAgICAgICAgIGlmIGMgPSAwIHRoZW4gW3gyOyB4MV1cbiAgICAgICAgIGVsc2UgaWYgYyA8IDAgdGhlbiBbeDI7IHgxOyB4M11cbiAgICAgICAgIGVsc2UgbGV0IGMgPSBjbXAgeDIgeDMgaW5cbiAgICAgICAgIGlmIGMgPSAwIHRoZW4gW3gyOyB4MV1cbiAgICAgICAgIGVsc2UgaWYgYyA8IDAgdGhlbiBbeDI7IHgzOyB4MV1cbiAgICAgICAgIGVsc2UgW3gzOyB4MjsgeDFdXG4gICAgICAgZW5kXG4gICAgfCBuLCBsIC0+XG4gICAgICAgbGV0IG4xID0gbiBhc3IgMSBpblxuICAgICAgIGxldCBuMiA9IG4gLSBuMSBpblxuICAgICAgIGxldCBsMiA9IGNob3AgbjEgbCBpblxuICAgICAgIGxldCBzMSA9IHJldl9zb3J0IG4xIGwgaW5cbiAgICAgICBsZXQgczIgPSByZXZfc29ydCBuMiBsMiBpblxuICAgICAgIHJldl9tZXJnZV9yZXYgczEgczIgW11cbiAgYW5kIHJldl9zb3J0IG4gbCA9XG4gICAgbWF0Y2ggbiwgbCB3aXRoXG4gICAgfCAyLCB4MSA6OiB4MiA6OiBfIC0+XG4gICAgICAgbGV0IGMgPSBjbXAgeDEgeDIgaW5cbiAgICAgICBpZiBjID0gMCB0aGVuIFt4MV1cbiAgICAgICBlbHNlIGlmIGMgPiAwIHRoZW4gW3gxOyB4Ml0gZWxzZSBbeDI7IHgxXVxuICAgIHwgMywgeDEgOjogeDIgOjogeDMgOjogXyAtPlxuICAgICAgIGxldCBjID0gY21wIHgxIHgyIGluXG4gICAgICAgaWYgYyA9IDAgdGhlbiBiZWdpblxuICAgICAgICAgbGV0IGMgPSBjbXAgeDIgeDMgaW5cbiAgICAgICAgIGlmIGMgPSAwIHRoZW4gW3gyXVxuICAgICAgICAgZWxzZSBpZiBjID4gMCB0aGVuIFt4MjsgeDNdIGVsc2UgW3gzOyB4Ml1cbiAgICAgICBlbmQgZWxzZSBpZiBjID4gMCB0aGVuIGJlZ2luXG4gICAgICAgICBsZXQgYyA9IGNtcCB4MiB4MyBpblxuICAgICAgICAgaWYgYyA9IDAgdGhlbiBbeDE7IHgyXVxuICAgICAgICAgZWxzZSBpZiBjID4gMCB0aGVuIFt4MTsgeDI7IHgzXVxuICAgICAgICAgZWxzZSBsZXQgYyA9IGNtcCB4MSB4MyBpblxuICAgICAgICAgaWYgYyA9IDAgdGhlbiBbeDE7IHgyXVxuICAgICAgICAgZWxzZSBpZiBjID4gMCB0aGVuIFt4MTsgeDM7IHgyXVxuICAgICAgICAgZWxzZSBbeDM7IHgxOyB4Ml1cbiAgICAgICBlbmQgZWxzZSBiZWdpblxuICAgICAgICAgbGV0IGMgPSBjbXAgeDEgeDMgaW5cbiAgICAgICAgIGlmIGMgPSAwIHRoZW4gW3gyOyB4MV1cbiAgICAgICAgIGVsc2UgaWYgYyA+IDAgdGhlbiBbeDI7IHgxOyB4M11cbiAgICAgICAgIGVsc2UgbGV0IGMgPSBjbXAgeDIgeDMgaW5cbiAgICAgICAgIGlmIGMgPSAwIHRoZW4gW3gyOyB4MV1cbiAgICAgICAgIGVsc2UgaWYgYyA+IDAgdGhlbiBbeDI7IHgzOyB4MV1cbiAgICAgICAgIGVsc2UgW3gzOyB4MjsgeDFdXG4gICAgICAgZW5kXG4gICAgfCBuLCBsIC0+XG4gICAgICAgbGV0IG4xID0gbiBhc3IgMSBpblxuICAgICAgIGxldCBuMiA9IG4gLSBuMSBpblxuICAgICAgIGxldCBsMiA9IGNob3AgbjEgbCBpblxuICAgICAgIGxldCBzMSA9IHNvcnQgbjEgbCBpblxuICAgICAgIGxldCBzMiA9IHNvcnQgbjIgbDIgaW5cbiAgICAgICByZXZfbWVyZ2UgczEgczIgW11cbiAgaW5cbiAgbGV0IGxlbiA9IGxlbmd0aCBsIGluXG4gIGlmIGxlbiA8IDIgdGhlbiBsIGVsc2Ugc29ydCBsZW4gbFxuOztcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgWGF2aWVyIExlcm95LCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogQ2hhcmFjdGVyIG9wZXJhdGlvbnMgKilcblxuZXh0ZXJuYWwgY29kZTogY2hhciAtPiBpbnQgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCB1bnNhZmVfY2hyOiBpbnQgLT4gY2hhciA9IFwiJWlkZW50aXR5XCJcblxubGV0IGNociBuID1cbiAgaWYgbiA8IDAgfHwgbiA+IDI1NSB0aGVuIGludmFsaWRfYXJnIFwiQ2hhci5jaHJcIiBlbHNlIHVuc2FmZV9jaHIgblxuXG5leHRlcm5hbCBpc19wcmludGFibGU6IGNoYXIgLT4gYm9vbCA9IFwiY2FtbF9pc19wcmludGFibGVcIlxuXG5leHRlcm5hbCBzdHJpbmdfY3JlYXRlOiBpbnQgLT4gc3RyaW5nID0gXCJjYW1sX2NyZWF0ZV9zdHJpbmdcIlxuZXh0ZXJuYWwgc3RyaW5nX3Vuc2FmZV9nZXQgOiBzdHJpbmcgLT4gaW50IC0+IGNoYXIgPSBcIiVzdHJpbmdfdW5zYWZlX2dldFwiXG5leHRlcm5hbCBzdHJpbmdfdW5zYWZlX3NldCA6IHN0cmluZyAtPiBpbnQgLT4gY2hhciAtPiB1bml0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiJXN0cmluZ191bnNhZmVfc2V0XCJcblxubGV0IGVzY2FwZWQgPSBmdW5jdGlvblxuICB8ICdcXCcnIC0+IFwiXFxcXCdcIlxuICB8ICdcXFxcJyAtPiBcIlxcXFxcXFxcXCJcbiAgfCAnXFxuJyAtPiBcIlxcXFxuXCJcbiAgfCAnXFx0JyAtPiBcIlxcXFx0XCJcbiAgfCAnXFxyJyAtPiBcIlxcXFxyXCJcbiAgfCAnXFxiJyAtPiBcIlxcXFxiXCJcbiAgfCBjIC0+XG4gICAgaWYgaXNfcHJpbnRhYmxlIGMgdGhlbiBiZWdpblxuICAgICAgbGV0IHMgPSBzdHJpbmdfY3JlYXRlIDEgaW5cbiAgICAgIHN0cmluZ191bnNhZmVfc2V0IHMgMCBjO1xuICAgICAgc1xuICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICBsZXQgbiA9IGNvZGUgYyBpblxuICAgICAgbGV0IHMgPSBzdHJpbmdfY3JlYXRlIDQgaW5cbiAgICAgIHN0cmluZ191bnNhZmVfc2V0IHMgMCAnXFxcXCc7XG4gICAgICBzdHJpbmdfdW5zYWZlX3NldCBzIDEgKHVuc2FmZV9jaHIgKDQ4ICsgbiAvIDEwMCkpO1xuICAgICAgc3RyaW5nX3Vuc2FmZV9zZXQgcyAyICh1bnNhZmVfY2hyICg0OCArIChuIC8gMTApIG1vZCAxMCkpO1xuICAgICAgc3RyaW5nX3Vuc2FmZV9zZXQgcyAzICh1bnNhZmVfY2hyICg0OCArIG4gbW9kIDEwKSk7XG4gICAgICBzXG4gICAgZW5kXG5cbmxldCBsb3dlcmNhc2UgYyA9XG4gIGlmIChjID49ICdBJyAmJiBjIDw9ICdaJylcbiAgfHwgKGMgPj0gJ1xcMTkyJyAmJiBjIDw9ICdcXDIxNCcpXG4gIHx8IChjID49ICdcXDIxNicgJiYgYyA8PSAnXFwyMjInKVxuICB0aGVuIHVuc2FmZV9jaHIoY29kZSBjICsgMzIpXG4gIGVsc2UgY1xuXG5sZXQgdXBwZXJjYXNlIGMgPVxuICBpZiAoYyA+PSAnYScgJiYgYyA8PSAneicpXG4gIHx8IChjID49ICdcXDIyNCcgJiYgYyA8PSAnXFwyNDYnKVxuICB8fCAoYyA+PSAnXFwyNDgnICYmIGMgPD0gJ1xcMjU0JylcbiAgdGhlbiB1bnNhZmVfY2hyKGNvZGUgYyAtIDMyKVxuICBlbHNlIGNcblxudHlwZSB0ID0gY2hhclxuXG5sZXQgY29tcGFyZSBjMSBjMiA9IGNvZGUgYzEgLSBjb2RlIGMyXG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIEJ5dGUgc2VxdWVuY2Ugb3BlcmF0aW9ucyAqKVxuXG5leHRlcm5hbCBsZW5ndGggOiBieXRlcyAtPiBpbnQgPSBcIiVzdHJpbmdfbGVuZ3RoXCJcbmV4dGVybmFsIHN0cmluZ19sZW5ndGggOiBzdHJpbmcgLT4gaW50ID0gXCIlc3RyaW5nX2xlbmd0aFwiXG5leHRlcm5hbCBnZXQgOiBieXRlcyAtPiBpbnQgLT4gY2hhciA9IFwiJXN0cmluZ19zYWZlX2dldFwiXG5leHRlcm5hbCBzZXQgOiBieXRlcyAtPiBpbnQgLT4gY2hhciAtPiB1bml0ID0gXCIlc3RyaW5nX3NhZmVfc2V0XCJcbmV4dGVybmFsIGNyZWF0ZSA6IGludCAtPiBieXRlcyA9IFwiY2FtbF9jcmVhdGVfc3RyaW5nXCJcbmV4dGVybmFsIHVuc2FmZV9nZXQgOiBieXRlcyAtPiBpbnQgLT4gY2hhciA9IFwiJXN0cmluZ191bnNhZmVfZ2V0XCJcbmV4dGVybmFsIHVuc2FmZV9zZXQgOiBieXRlcyAtPiBpbnQgLT4gY2hhciAtPiB1bml0ID0gXCIlc3RyaW5nX3Vuc2FmZV9zZXRcIlxuZXh0ZXJuYWwgdW5zYWZlX2ZpbGwgOiBieXRlcyAtPiBpbnQgLT4gaW50IC0+IGNoYXIgLT4gdW5pdFxuICAgICAgICAgICAgICAgICAgICAgPSBcImNhbWxfZmlsbF9zdHJpbmdcIiBcIm5vYWxsb2NcIlxuZXh0ZXJuYWwgdW5zYWZlX3RvX3N0cmluZyA6IGJ5dGVzIC0+IHN0cmluZyA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIHVuc2FmZV9vZl9zdHJpbmcgOiBzdHJpbmcgLT4gYnl0ZXMgPSBcIiVpZGVudGl0eVwiXG5cbmV4dGVybmFsIHVuc2FmZV9ibGl0IDogYnl0ZXMgLT4gaW50IC0+IGJ5dGVzIC0+IGludCAtPiBpbnQgLT4gdW5pdFxuICAgICAgICAgICAgICAgICAgICAgPSBcImNhbWxfYmxpdF9zdHJpbmdcIiBcIm5vYWxsb2NcIlxuZXh0ZXJuYWwgdW5zYWZlX2JsaXRfc3RyaW5nIDogc3RyaW5nIC0+IGludCAtPiBieXRlcyAtPiBpbnQgLT4gaW50IC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX2JsaXRfc3RyaW5nXCIgXCJub2FsbG9jXCJcblxubGV0IG1ha2UgbiBjID1cbiAgbGV0IHMgPSBjcmVhdGUgbiBpblxuICB1bnNhZmVfZmlsbCBzIDAgbiBjO1xuICBzXG5cbmxldCBpbml0IG4gZiA9XG4gIGxldCBzID0gY3JlYXRlIG4gaW5cbiAgZm9yIGkgPSAwIHRvIG4gLSAxIGRvXG4gICAgdW5zYWZlX3NldCBzIGkgKGYgaSlcbiAgZG9uZTtcbiAgc1xuXG5sZXQgZW1wdHkgPSBjcmVhdGUgMDs7XG5cbmxldCBjb3B5IHMgPVxuICBsZXQgbGVuID0gbGVuZ3RoIHMgaW5cbiAgbGV0IHIgPSBjcmVhdGUgbGVuIGluXG4gIHVuc2FmZV9ibGl0IHMgMCByIDAgbGVuO1xuICByXG5cbmxldCB0b19zdHJpbmcgYiA9IHVuc2FmZV90b19zdHJpbmcgKGNvcHkgYilcbmxldCBvZl9zdHJpbmcgcyA9IGNvcHkgKHVuc2FmZV9vZl9zdHJpbmcgcylcblxubGV0IHN1YiBzIG9mcyBsZW4gPVxuICBpZiBvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gbGVuZ3RoIHMgLSBsZW5cbiAgdGhlbiBpbnZhbGlkX2FyZyBcIlN0cmluZy5zdWIgLyBCeXRlcy5zdWJcIlxuICBlbHNlIGJlZ2luXG4gICAgbGV0IHIgPSBjcmVhdGUgbGVuIGluXG4gICAgdW5zYWZlX2JsaXQgcyBvZnMgciAwIGxlbjtcbiAgICByXG4gIGVuZFxuXG5sZXQgc3ViX3N0cmluZyBiIG9mcyBsZW4gPSB1bnNhZmVfdG9fc3RyaW5nIChzdWIgYiBvZnMgbGVuKVxuXG5sZXQgZXh0ZW5kIHMgbGVmdCByaWdodCA9XG4gIGxldCBsZW4gPSBsZW5ndGggcyArIGxlZnQgKyByaWdodCBpblxuICBsZXQgciA9IGNyZWF0ZSBsZW4gaW5cbiAgbGV0IChzcmNvZmYsIGRzdG9mZikgPSBpZiBsZWZ0IDwgMCB0aGVuIC1sZWZ0LCAwIGVsc2UgMCwgbGVmdCBpblxuICBsZXQgY3B5bGVuID0gbWluIChsZW5ndGggcyAtIHNyY29mZikgKGxlbiAtIGRzdG9mZikgaW5cbiAgaWYgY3B5bGVuID4gMCB0aGVuIHVuc2FmZV9ibGl0IHMgc3Jjb2ZmIHIgZHN0b2ZmIGNweWxlbjtcbiAgclxuXG5sZXQgZmlsbCBzIG9mcyBsZW4gYyA9XG4gIGlmIG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiBsZW5ndGggcyAtIGxlblxuICB0aGVuIGludmFsaWRfYXJnIFwiU3RyaW5nLmZpbGwgLyBCeXRlcy5maWxsXCJcbiAgZWxzZSB1bnNhZmVfZmlsbCBzIG9mcyBsZW4gY1xuXG5sZXQgYmxpdCBzMSBvZnMxIHMyIG9mczIgbGVuID1cbiAgaWYgbGVuIDwgMCB8fCBvZnMxIDwgMCB8fCBvZnMxID4gbGVuZ3RoIHMxIC0gbGVuXG4gICAgICAgICAgICAgfHwgb2ZzMiA8IDAgfHwgb2ZzMiA+IGxlbmd0aCBzMiAtIGxlblxuICB0aGVuIGludmFsaWRfYXJnIFwiQnl0ZXMuYmxpdFwiXG4gIGVsc2UgdW5zYWZlX2JsaXQgczEgb2ZzMSBzMiBvZnMyIGxlblxuXG5sZXQgYmxpdF9zdHJpbmcgczEgb2ZzMSBzMiBvZnMyIGxlbiA9XG4gIGlmIGxlbiA8IDAgfHwgb2ZzMSA8IDAgfHwgb2ZzMSA+IHN0cmluZ19sZW5ndGggczEgLSBsZW5cbiAgICAgICAgICAgICB8fCBvZnMyIDwgMCB8fCBvZnMyID4gbGVuZ3RoIHMyIC0gbGVuXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJTdHJpbmcuYmxpdCAvIEJ5dGVzLmJsaXRfc3RyaW5nXCJcbiAgZWxzZSB1bnNhZmVfYmxpdF9zdHJpbmcgczEgb2ZzMSBzMiBvZnMyIGxlblxuXG5sZXQgaXRlciBmIGEgPVxuICBmb3IgaSA9IDAgdG8gbGVuZ3RoIGEgLSAxIGRvIGYodW5zYWZlX2dldCBhIGkpIGRvbmVcblxubGV0IGl0ZXJpIGYgYSA9XG4gIGZvciBpID0gMCB0byBsZW5ndGggYSAtIDEgZG8gZiBpICh1bnNhZmVfZ2V0IGEgaSkgZG9uZVxuXG5sZXQgY29uY2F0IHNlcCBsID1cbiAgbWF0Y2ggbCB3aXRoXG4gICAgW10gLT4gZW1wdHlcbiAgfCBoZCA6OiB0bCAtPlxuICAgICAgbGV0IG51bSA9IHJlZiAwIGFuZCBsZW4gPSByZWYgMCBpblxuICAgICAgTGlzdC5pdGVyIChmdW4gcyAtPiBpbmNyIG51bTsgbGVuIDo9ICFsZW4gKyBsZW5ndGggcykgbDtcbiAgICAgIGxldCByID0gY3JlYXRlICghbGVuICsgbGVuZ3RoIHNlcCAqICghbnVtIC0gMSkpIGluXG4gICAgICB1bnNhZmVfYmxpdCBoZCAwIHIgMCAobGVuZ3RoIGhkKTtcbiAgICAgIGxldCBwb3MgPSByZWYobGVuZ3RoIGhkKSBpblxuICAgICAgTGlzdC5pdGVyXG4gICAgICAgIChmdW4gcyAtPlxuICAgICAgICAgIHVuc2FmZV9ibGl0IHNlcCAwIHIgIXBvcyAobGVuZ3RoIHNlcCk7XG4gICAgICAgICAgcG9zIDo9ICFwb3MgKyBsZW5ndGggc2VwO1xuICAgICAgICAgIHVuc2FmZV9ibGl0IHMgMCByICFwb3MgKGxlbmd0aCBzKTtcbiAgICAgICAgICBwb3MgOj0gIXBvcyArIGxlbmd0aCBzKVxuICAgICAgICB0bDtcbiAgICAgIHJcblxubGV0IGNhdCBzMSBzMiA9XG4gIGxldCBsMSA9IGxlbmd0aCBzMSBpblxuICBsZXQgbDIgPSBsZW5ndGggczIgaW5cbiAgbGV0IHIgPSBjcmVhdGUgKGwxICsgbDIpIGluXG4gIHVuc2FmZV9ibGl0IHMxIDAgciAwIGwxO1xuICB1bnNhZmVfYmxpdCBzMiAwIHIgbDEgbDI7XG4gIHJcbjs7XG5cbmV4dGVybmFsIGlzX3ByaW50YWJsZTogY2hhciAtPiBib29sID0gXCJjYW1sX2lzX3ByaW50YWJsZVwiXG5leHRlcm5hbCBjaGFyX2NvZGU6IGNoYXIgLT4gaW50ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgY2hhcl9jaHI6IGludCAtPiBjaGFyID0gXCIlaWRlbnRpdHlcIlxuXG5sZXQgaXNfc3BhY2UgPSBmdW5jdGlvblxuICB8ICcgJyB8ICdcXDAxMicgfCAnXFxuJyB8ICdcXHInIHwgJ1xcdCcgLT4gdHJ1ZVxuICB8IF8gLT4gZmFsc2VcblxubGV0IHRyaW0gcyA9XG4gIGxldCBsZW4gPSBsZW5ndGggcyBpblxuICBsZXQgaSA9IHJlZiAwIGluXG4gIHdoaWxlICFpIDwgbGVuICYmIGlzX3NwYWNlICh1bnNhZmVfZ2V0IHMgIWkpIGRvXG4gICAgaW5jciBpXG4gIGRvbmU7XG4gIGxldCBqID0gcmVmIChsZW4gLSAxKSBpblxuICB3aGlsZSAhaiA+PSAhaSAmJiBpc19zcGFjZSAodW5zYWZlX2dldCBzICFqKSBkb1xuICAgIGRlY3IgalxuICBkb25lO1xuICBpZiAhaiA+PSAhaSB0aGVuXG4gICAgc3ViIHMgIWkgKCFqIC0gIWkgKyAxKVxuICBlbHNlXG4gICAgZW1wdHlcblxubGV0IGVzY2FwZWQgcyA9XG4gIGxldCBuID0gcmVmIDAgaW5cbiAgZm9yIGkgPSAwIHRvIGxlbmd0aCBzIC0gMSBkb1xuICAgIG4gOj0gIW4gK1xuICAgICAgKG1hdGNoIHVuc2FmZV9nZXQgcyBpIHdpdGhcbiAgICAgICB8ICdcIicgfCAnXFxcXCcgfCAnXFxuJyB8ICdcXHQnIHwgJ1xccicgfCAnXFxiJyAtPiAyXG4gICAgICAgfCBjIC0+IGlmIGlzX3ByaW50YWJsZSBjIHRoZW4gMSBlbHNlIDQpXG4gIGRvbmU7XG4gIGlmICFuID0gbGVuZ3RoIHMgdGhlbiBjb3B5IHMgZWxzZSBiZWdpblxuICAgIGxldCBzJyA9IGNyZWF0ZSAhbiBpblxuICAgIG4gOj0gMDtcbiAgICBmb3IgaSA9IDAgdG8gbGVuZ3RoIHMgLSAxIGRvXG4gICAgICBiZWdpbiBtYXRjaCB1bnNhZmVfZ2V0IHMgaSB3aXRoXG4gICAgICB8ICgnXCInIHwgJ1xcXFwnKSBhcyBjIC0+XG4gICAgICAgICAgdW5zYWZlX3NldCBzJyAhbiAnXFxcXCc7IGluY3IgbjsgdW5zYWZlX3NldCBzJyAhbiBjXG4gICAgICB8ICdcXG4nIC0+XG4gICAgICAgICAgdW5zYWZlX3NldCBzJyAhbiAnXFxcXCc7IGluY3IgbjsgdW5zYWZlX3NldCBzJyAhbiAnbidcbiAgICAgIHwgJ1xcdCcgLT5cbiAgICAgICAgICB1bnNhZmVfc2V0IHMnICFuICdcXFxcJzsgaW5jciBuOyB1bnNhZmVfc2V0IHMnICFuICd0J1xuICAgICAgfCAnXFxyJyAtPlxuICAgICAgICAgIHVuc2FmZV9zZXQgcycgIW4gJ1xcXFwnOyBpbmNyIG47IHVuc2FmZV9zZXQgcycgIW4gJ3InXG4gICAgICB8ICdcXGInIC0+XG4gICAgICAgICAgdW5zYWZlX3NldCBzJyAhbiAnXFxcXCc7IGluY3IgbjsgdW5zYWZlX3NldCBzJyAhbiAnYidcbiAgICAgIHwgYyAtPlxuICAgICAgICAgIGlmIGlzX3ByaW50YWJsZSBjIHRoZW5cbiAgICAgICAgICAgIHVuc2FmZV9zZXQgcycgIW4gY1xuICAgICAgICAgIGVsc2UgYmVnaW5cbiAgICAgICAgICAgIGxldCBhID0gY2hhcl9jb2RlIGMgaW5cbiAgICAgICAgICAgIHVuc2FmZV9zZXQgcycgIW4gJ1xcXFwnO1xuICAgICAgICAgICAgaW5jciBuO1xuICAgICAgICAgICAgdW5zYWZlX3NldCBzJyAhbiAoY2hhcl9jaHIgKDQ4ICsgYSAvIDEwMCkpO1xuICAgICAgICAgICAgaW5jciBuO1xuICAgICAgICAgICAgdW5zYWZlX3NldCBzJyAhbiAoY2hhcl9jaHIgKDQ4ICsgKGEgLyAxMCkgbW9kIDEwKSk7XG4gICAgICAgICAgICBpbmNyIG47XG4gICAgICAgICAgICB1bnNhZmVfc2V0IHMnICFuIChjaGFyX2NociAoNDggKyBhIG1vZCAxMCkpXG4gICAgICAgICAgZW5kXG4gICAgICBlbmQ7XG4gICAgICBpbmNyIG5cbiAgICBkb25lO1xuICAgIHMnXG4gIGVuZFxuXG5sZXQgbWFwIGYgcyA9XG4gIGxldCBsID0gbGVuZ3RoIHMgaW5cbiAgaWYgbCA9IDAgdGhlbiBzIGVsc2UgYmVnaW5cbiAgICBsZXQgciA9IGNyZWF0ZSBsIGluXG4gICAgZm9yIGkgPSAwIHRvIGwgLSAxIGRvIHVuc2FmZV9zZXQgciBpIChmICh1bnNhZmVfZ2V0IHMgaSkpIGRvbmU7XG4gICAgclxuICBlbmRcblxubGV0IG1hcGkgZiBzID1cbiAgbGV0IGwgPSBsZW5ndGggcyBpblxuICBpZiBsID0gMCB0aGVuIHMgZWxzZSBiZWdpblxuICAgIGxldCByID0gY3JlYXRlIGwgaW5cbiAgICBmb3IgaSA9IDAgdG8gbCAtIDEgZG8gdW5zYWZlX3NldCByIGkgKGYgaSAodW5zYWZlX2dldCBzIGkpKSBkb25lO1xuICAgIHJcbiAgZW5kXG5cbmxldCB1cHBlcmNhc2UgcyA9IG1hcCBDaGFyLnVwcGVyY2FzZSBzXG5sZXQgbG93ZXJjYXNlIHMgPSBtYXAgQ2hhci5sb3dlcmNhc2Ugc1xuXG5sZXQgYXBwbHkxIGYgcyA9XG4gIGlmIGxlbmd0aCBzID0gMCB0aGVuIHMgZWxzZSBiZWdpblxuICAgIGxldCByID0gY29weSBzIGluXG4gICAgdW5zYWZlX3NldCByIDAgKGYodW5zYWZlX2dldCBzIDApKTtcbiAgICByXG4gIGVuZFxuXG5sZXQgY2FwaXRhbGl6ZSBzID0gYXBwbHkxIENoYXIudXBwZXJjYXNlIHNcbmxldCB1bmNhcGl0YWxpemUgcyA9IGFwcGx5MSBDaGFyLmxvd2VyY2FzZSBzXG5cbmxldCByZWMgaW5kZXhfcmVjIHMgbGltIGkgYyA9XG4gIGlmIGkgPj0gbGltIHRoZW4gcmFpc2UgTm90X2ZvdW5kIGVsc2VcbiAgaWYgdW5zYWZlX2dldCBzIGkgPSBjIHRoZW4gaSBlbHNlIGluZGV4X3JlYyBzIGxpbSAoaSArIDEpIGM7O1xuXG5sZXQgaW5kZXggcyBjID0gaW5kZXhfcmVjIHMgKGxlbmd0aCBzKSAwIGM7O1xuXG5sZXQgaW5kZXhfZnJvbSBzIGkgYyA9XG4gIGxldCBsID0gbGVuZ3RoIHMgaW5cbiAgaWYgaSA8IDAgfHwgaSA+IGwgdGhlbiBpbnZhbGlkX2FyZyBcIlN0cmluZy5pbmRleF9mcm9tIC8gQnl0ZXMuaW5kZXhfZnJvbVwiIGVsc2VcbiAgaW5kZXhfcmVjIHMgbCBpIGM7O1xuXG5sZXQgcmVjIHJpbmRleF9yZWMgcyBpIGMgPVxuICBpZiBpIDwgMCB0aGVuIHJhaXNlIE5vdF9mb3VuZCBlbHNlXG4gIGlmIHVuc2FmZV9nZXQgcyBpID0gYyB0aGVuIGkgZWxzZSByaW5kZXhfcmVjIHMgKGkgLSAxKSBjOztcblxubGV0IHJpbmRleCBzIGMgPSByaW5kZXhfcmVjIHMgKGxlbmd0aCBzIC0gMSkgYzs7XG5cbmxldCByaW5kZXhfZnJvbSBzIGkgYyA9XG4gIGlmIGkgPCAtMSB8fCBpID49IGxlbmd0aCBzIHRoZW5cbiAgICBpbnZhbGlkX2FyZyBcIlN0cmluZy5yaW5kZXhfZnJvbSAvIEJ5dGVzLnJpbmRleF9mcm9tXCJcbiAgZWxzZVxuICAgIHJpbmRleF9yZWMgcyBpIGNcbjs7XG5cbmxldCBjb250YWluc19mcm9tIHMgaSBjID1cbiAgbGV0IGwgPSBsZW5ndGggcyBpblxuICBpZiBpIDwgMCB8fCBpID4gbCB0aGVuXG4gICAgaW52YWxpZF9hcmcgXCJTdHJpbmcuY29udGFpbnNfZnJvbSAvIEJ5dGVzLmNvbnRhaW5zX2Zyb21cIlxuICBlbHNlXG4gICAgdHJ5IGlnbm9yZSAoaW5kZXhfcmVjIHMgbCBpIGMpOyB0cnVlIHdpdGggTm90X2ZvdW5kIC0+IGZhbHNlXG47O1xuXG5sZXQgY29udGFpbnMgcyBjID0gY29udGFpbnNfZnJvbSBzIDAgYzs7XG5cbmxldCByY29udGFpbnNfZnJvbSBzIGkgYyA9XG4gIGlmIGkgPCAwIHx8IGkgPj0gbGVuZ3RoIHMgdGhlblxuICAgIGludmFsaWRfYXJnIFwiU3RyaW5nLnJjb250YWluc19mcm9tIC8gQnl0ZXMucmNvbnRhaW5zX2Zyb21cIlxuICBlbHNlXG4gICAgdHJ5IGlnbm9yZSAocmluZGV4X3JlYyBzIGkgYyk7IHRydWUgd2l0aCBOb3RfZm91bmQgLT4gZmFsc2Vcbjs7XG5cbnR5cGUgdCA9IGJ5dGVzXG5cbmxldCBjb21wYXJlICh4OiB0KSAoeTogdCkgPSBQZXJ2YXNpdmVzLmNvbXBhcmUgeCB5XG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICBEYW1pZW4gRG9saWdleiwgcHJvamV0IEdhbGxpdW0sIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDIwMTQgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIFN0cmluZyBvcGVyYXRpb25zLCBiYXNlZCBvbiBieXRlIHNlcXVlbmNlIG9wZXJhdGlvbnMgKilcblxuZXh0ZXJuYWwgbGVuZ3RoIDogc3RyaW5nIC0+IGludCA9IFwiJXN0cmluZ19sZW5ndGhcIlxuZXh0ZXJuYWwgZ2V0IDogc3RyaW5nIC0+IGludCAtPiBjaGFyID0gXCIlc3RyaW5nX3NhZmVfZ2V0XCJcbmV4dGVybmFsIHNldCA6IGJ5dGVzIC0+IGludCAtPiBjaGFyIC0+IHVuaXQgPSBcIiVzdHJpbmdfc2FmZV9zZXRcIlxuZXh0ZXJuYWwgY3JlYXRlIDogaW50IC0+IGJ5dGVzID0gXCJjYW1sX2NyZWF0ZV9zdHJpbmdcIlxuZXh0ZXJuYWwgdW5zYWZlX2dldCA6IHN0cmluZyAtPiBpbnQgLT4gY2hhciA9IFwiJXN0cmluZ191bnNhZmVfZ2V0XCJcbmV4dGVybmFsIHVuc2FmZV9zZXQgOiBieXRlcyAtPiBpbnQgLT4gY2hhciAtPiB1bml0ID0gXCIlc3RyaW5nX3Vuc2FmZV9zZXRcIlxuZXh0ZXJuYWwgdW5zYWZlX2JsaXQgOiBzdHJpbmcgLT4gaW50IC0+ICBieXRlcyAtPiBpbnQgLT4gaW50IC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX2JsaXRfc3RyaW5nXCIgXCJub2FsbG9jXCJcbmV4dGVybmFsIHVuc2FmZV9maWxsIDogYnl0ZXMgLT4gaW50IC0+IGludCAtPiBjaGFyIC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX2ZpbGxfc3RyaW5nXCIgXCJub2FsbG9jXCJcblxubW9kdWxlIEIgPSBCeXRlc1xuXG5sZXQgYnRzID0gQi51bnNhZmVfdG9fc3RyaW5nXG5sZXQgYm9zID0gQi51bnNhZmVfb2Zfc3RyaW5nXG5cbmxldCBtYWtlIG4gYyA9XG4gIEIubWFrZSBuIGMgfD4gYnRzXG5sZXQgaW5pdCBuIGYgPVxuICBCLmluaXQgbiBmIHw+IGJ0c1xubGV0IGNvcHkgcyA9XG4gIEIuY29weSAoYm9zIHMpIHw+IGJ0c1xubGV0IHN1YiBzIG9mcyBsZW4gPVxuICBCLnN1YiAoYm9zIHMpIG9mcyBsZW4gfD4gYnRzXG5sZXQgZmlsbCA9XG4gIEIuZmlsbFxubGV0IGJsaXQgPVxuICBCLmJsaXRfc3RyaW5nXG5cbmxldCBjb25jYXQgc2VwIGwgPVxuICBtYXRjaCBsIHdpdGhcbiAgfCBbXSAtPiBcIlwiXG4gIHwgaGQgOjogdGwgLT5cbiAgICAgIGxldCBudW0gPSByZWYgMCBhbmQgbGVuID0gcmVmIDAgaW5cbiAgICAgIExpc3QuaXRlciAoZnVuIHMgLT4gaW5jciBudW07IGxlbiA6PSAhbGVuICsgbGVuZ3RoIHMpIGw7XG4gICAgICBsZXQgciA9IEIuY3JlYXRlICghbGVuICsgbGVuZ3RoIHNlcCAqICghbnVtIC0gMSkpIGluXG4gICAgICB1bnNhZmVfYmxpdCBoZCAwIHIgMCAobGVuZ3RoIGhkKTtcbiAgICAgIGxldCBwb3MgPSByZWYobGVuZ3RoIGhkKSBpblxuICAgICAgTGlzdC5pdGVyXG4gICAgICAgIChmdW4gcyAtPlxuICAgICAgICAgIHVuc2FmZV9ibGl0IHNlcCAwIHIgIXBvcyAobGVuZ3RoIHNlcCk7XG4gICAgICAgICAgcG9zIDo9ICFwb3MgKyBsZW5ndGggc2VwO1xuICAgICAgICAgIHVuc2FmZV9ibGl0IHMgMCByICFwb3MgKGxlbmd0aCBzKTtcbiAgICAgICAgICBwb3MgOj0gIXBvcyArIGxlbmd0aCBzKVxuICAgICAgICB0bDtcbiAgICAgIEJ5dGVzLnVuc2FmZV90b19zdHJpbmcgclxuXG5sZXQgaXRlciBmIHMgPVxuICBCLml0ZXIgZiAoYm9zIHMpXG5sZXQgaXRlcmkgZiBzID1cbiAgQi5pdGVyaSBmIChib3MgcylcbmxldCBtYXAgZiBzID1cbiAgQi5tYXAgZiAoYm9zIHMpIHw+IGJ0c1xubGV0IG1hcGkgZiBzID1cbiAgQi5tYXBpIGYgKGJvcyBzKSB8PiBidHNcblxuKCogQmV3YXJlOiB3ZSBjYW5ub3QgdXNlIEIudHJpbSBvciBCLmVzY2FwZSBiZWNhdXNlIHRoZXkgYWx3YXlzIG1ha2UgYVxuICAgY29weSwgYnV0IFN0cmluZy5tbGkgc3BlbGxzIG91dCBzb21lIGNhc2VzIHdoZXJlIHdlIGFyZSBub3QgYWxsb3dlZFxuICAgdG8gbWFrZSBhIGNvcHkuICopXG5cbmV4dGVybmFsIGlzX3ByaW50YWJsZTogY2hhciAtPiBib29sID0gXCJjYW1sX2lzX3ByaW50YWJsZVwiXG5cbmxldCBpc19zcGFjZSA9IGZ1bmN0aW9uXG4gIHwgJyAnIHwgJ1xcMDEyJyB8ICdcXG4nIHwgJ1xccicgfCAnXFx0JyAtPiB0cnVlXG4gIHwgXyAtPiBmYWxzZVxuXG5sZXQgdHJpbSBzID1cbiAgaWYgcyA9IFwiXCIgdGhlbiBzXG4gIGVsc2UgaWYgaXNfc3BhY2UgKHVuc2FmZV9nZXQgcyAwKSB8fCBpc19zcGFjZSAodW5zYWZlX2dldCBzIChsZW5ndGggcyAtIDEpKVxuICAgIHRoZW4gYnRzIChCLnRyaW0gKGJvcyBzKSlcbiAgZWxzZSBzXG5cbmxldCBlc2NhcGVkIHMgPVxuICBsZXQgcmVjIG5lZWRzX2VzY2FwZSBpID1cbiAgICBpZiBpID49IGxlbmd0aCBzIHRoZW4gZmFsc2UgZWxzZVxuICAgICAgbWF0Y2ggdW5zYWZlX2dldCBzIGkgd2l0aFxuICAgICAgfCAnXCInIHwgJ1xcXFwnIHwgJ1xcbicgfCAnXFx0JyB8ICdcXHInIHwgJ1xcYicgLT4gdHJ1ZVxuICAgICAgfCBjIHdoZW4gaXNfcHJpbnRhYmxlIGMgLT4gbmVlZHNfZXNjYXBlIChpKzEpXG4gICAgICB8IF8gLT4gdHJ1ZVxuICBpblxuICBpZiBuZWVkc19lc2NhcGUgMCB0aGVuXG4gICAgYnRzIChCLmVzY2FwZWQgKGJvcyBzKSlcbiAgZWxzZVxuICAgIHNcblxubGV0IGluZGV4IHMgYyA9XG4gIEIuaW5kZXggKGJvcyBzKSBjXG5sZXQgcmluZGV4IHMgYyA9XG4gIEIucmluZGV4IChib3MgcykgY1xubGV0IGluZGV4X2Zyb20gcyBpIGM9XG4gIEIuaW5kZXhfZnJvbSAoYm9zIHMpIGkgY1xubGV0IHJpbmRleF9mcm9tIHMgaSBjID1cbiAgQi5yaW5kZXhfZnJvbSAoYm9zIHMpIGkgY1xubGV0IGNvbnRhaW5zIHMgYyA9XG4gIEIuY29udGFpbnMgKGJvcyBzKSBjXG5sZXQgY29udGFpbnNfZnJvbSBzIGkgYyA9XG4gIEIuY29udGFpbnNfZnJvbSAoYm9zIHMpIGkgY1xubGV0IHJjb250YWluc19mcm9tIHMgaSBjID1cbiAgQi5yY29udGFpbnNfZnJvbSAoYm9zIHMpIGkgY1xubGV0IHVwcGVyY2FzZSBzID1cbiAgQi51cHBlcmNhc2UgKGJvcyBzKSB8PiBidHNcbmxldCBsb3dlcmNhc2UgcyA9XG4gIEIubG93ZXJjYXNlIChib3MgcykgfD4gYnRzXG5sZXQgY2FwaXRhbGl6ZSBzID1cbiAgQi5jYXBpdGFsaXplIChib3MgcykgfD4gYnRzXG5sZXQgdW5jYXBpdGFsaXplIHMgPVxuICBCLnVuY2FwaXRhbGl6ZSAoYm9zIHMpIHw+IGJ0c1xuXG50eXBlIHQgPSBzdHJpbmdcblxubGV0IGNvbXBhcmUgKHg6IHQpICh5OiB0KSA9IFBlcnZhc2l2ZXMuY29tcGFyZSB4IHlcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgWGF2aWVyIExlcm95LCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogV0FSTklORzogc3lzLm1sIGlzIGdlbmVyYXRlZCBmcm9tIHN5cy5tbHAuICBETyBOT1QgRURJVCBzeXMubWwgb3JcbiAgIHlvdXIgY2hhbmdlcyB3aWxsIGJlIGxvc3QuXG4qKVxuXG4oKiBTeXN0ZW0gaW50ZXJmYWNlICopXG5cbmV4dGVybmFsIGdldF9jb25maWc6IHVuaXQgLT4gc3RyaW5nICogaW50ICogYm9vbCA9IFwiY2FtbF9zeXNfZ2V0X2NvbmZpZ1wiXG5leHRlcm5hbCBnZXRfYXJndjogdW5pdCAtPiBzdHJpbmcgKiBzdHJpbmcgYXJyYXkgPSBcImNhbWxfc3lzX2dldF9hcmd2XCJcbmV4dGVybmFsIGJpZ19lbmRpYW4gOiB1bml0IC0+IGJvb2wgPSBcIiViaWdfZW5kaWFuXCJcbmV4dGVybmFsIHdvcmRfc2l6ZSA6IHVuaXQgLT4gaW50ID0gXCIld29yZF9zaXplXCJcbmV4dGVybmFsIHVuaXggOiB1bml0IC0+IGJvb2wgPSBcIiVvc3R5cGVfdW5peFwiXG5leHRlcm5hbCB3aW4zMiA6IHVuaXQgLT4gYm9vbCA9IFwiJW9zdHlwZV93aW4zMlwiXG5leHRlcm5hbCBjeWd3aW4gOiB1bml0IC0+IGJvb2wgPSBcIiVvc3R5cGVfY3lnd2luXCJcblxubGV0IChleGVjdXRhYmxlX25hbWUsIGFyZ3YpID0gZ2V0X2FyZ3YoKVxubGV0IChvc190eXBlLCBfLCBfKSA9IGdldF9jb25maWcoKVxubGV0IGJpZ19lbmRpYW4gPSBiaWdfZW5kaWFuICgpXG5sZXQgd29yZF9zaXplID0gd29yZF9zaXplICgpXG5sZXQgdW5peCA9IHVuaXggKClcbmxldCB3aW4zMiA9IHdpbjMyICgpXG5sZXQgY3lnd2luID0gY3lnd2luICgpXG5sZXQgbWF4X2FycmF5X2xlbmd0aCA9ICgxIGxzbCAod29yZF9zaXplIC0gMTApKSAtIDE7O1xubGV0IG1heF9zdHJpbmdfbGVuZ3RoID0gd29yZF9zaXplIC8gOCAqIG1heF9hcnJheV9sZW5ndGggLSAxOztcblxuZXh0ZXJuYWwgZmlsZV9leGlzdHM6IHN0cmluZyAtPiBib29sID0gXCJjYW1sX3N5c19maWxlX2V4aXN0c1wiXG5leHRlcm5hbCBpc19kaXJlY3RvcnkgOiBzdHJpbmcgLT4gYm9vbCA9IFwiY2FtbF9zeXNfaXNfZGlyZWN0b3J5XCJcbmV4dGVybmFsIHJlbW92ZTogc3RyaW5nIC0+IHVuaXQgPSBcImNhbWxfc3lzX3JlbW92ZVwiXG5leHRlcm5hbCByZW5hbWUgOiBzdHJpbmcgLT4gc3RyaW5nIC0+IHVuaXQgPSBcImNhbWxfc3lzX3JlbmFtZVwiXG5leHRlcm5hbCBnZXRlbnY6IHN0cmluZyAtPiBzdHJpbmcgPSBcImNhbWxfc3lzX2dldGVudlwiXG5leHRlcm5hbCBjb21tYW5kOiBzdHJpbmcgLT4gaW50ID0gXCJjYW1sX3N5c19zeXN0ZW1fY29tbWFuZFwiXG5leHRlcm5hbCB0aW1lOiB1bml0IC0+IGZsb2F0ID0gXCJjYW1sX3N5c190aW1lXCJcbmV4dGVybmFsIGNoZGlyOiBzdHJpbmcgLT4gdW5pdCA9IFwiY2FtbF9zeXNfY2hkaXJcIlxuZXh0ZXJuYWwgZ2V0Y3dkOiB1bml0IC0+IHN0cmluZyA9IFwiY2FtbF9zeXNfZ2V0Y3dkXCJcbmV4dGVybmFsIHJlYWRkaXIgOiBzdHJpbmcgLT4gc3RyaW5nIGFycmF5ID0gXCJjYW1sX3N5c19yZWFkX2RpcmVjdG9yeVwiXG5cbmxldCBpbnRlcmFjdGl2ZSA9IHJlZiBmYWxzZVxuXG50eXBlIHNpZ25hbF9iZWhhdmlvciA9XG4gICAgU2lnbmFsX2RlZmF1bHRcbiAgfCBTaWduYWxfaWdub3JlXG4gIHwgU2lnbmFsX2hhbmRsZSBvZiAoaW50IC0+IHVuaXQpXG5cbmV4dGVybmFsIHNpZ25hbCA6IGludCAtPiBzaWduYWxfYmVoYXZpb3IgLT4gc2lnbmFsX2JlaGF2aW9yXG4gICAgICAgICAgICAgICAgPSBcImNhbWxfaW5zdGFsbF9zaWduYWxfaGFuZGxlclwiXG5cbmxldCBzZXRfc2lnbmFsIHNpZ19udW0gc2lnX2JlaCA9IGlnbm9yZShzaWduYWwgc2lnX251bSBzaWdfYmVoKVxuXG5sZXQgc2lnYWJydCA9IC0xXG5sZXQgc2lnYWxybSA9IC0yXG5sZXQgc2lnZnBlID0gLTNcbmxldCBzaWdodXAgPSAtNFxubGV0IHNpZ2lsbCA9IC01XG5sZXQgc2lnaW50ID0gLTZcbmxldCBzaWdraWxsID0gLTdcbmxldCBzaWdwaXBlID0gLThcbmxldCBzaWdxdWl0ID0gLTlcbmxldCBzaWdzZWd2ID0gLTEwXG5sZXQgc2lndGVybSA9IC0xMVxubGV0IHNpZ3VzcjEgPSAtMTJcbmxldCBzaWd1c3IyID0gLTEzXG5sZXQgc2lnY2hsZCA9IC0xNFxubGV0IHNpZ2NvbnQgPSAtMTVcbmxldCBzaWdzdG9wID0gLTE2XG5sZXQgc2lndHN0cCA9IC0xN1xubGV0IHNpZ3R0aW4gPSAtMThcbmxldCBzaWd0dG91ID0gLTE5XG5sZXQgc2lndnRhbHJtID0gLTIwXG5sZXQgc2lncHJvZiA9IC0yMVxuXG5leGNlcHRpb24gQnJlYWtcblxubGV0IGNhdGNoX2JyZWFrIG9uID1cbiAgaWYgb24gdGhlblxuICAgIHNldF9zaWduYWwgc2lnaW50IChTaWduYWxfaGFuZGxlKGZ1biBfIC0+IHJhaXNlIEJyZWFrKSlcbiAgZWxzZVxuICAgIHNldF9zaWduYWwgc2lnaW50IFNpZ25hbF9kZWZhdWx0XG5cblxuKCogVGhlIHZlcnNpb24gc3RyaW5nIGlzIGZvdW5kIGluIGZpbGUgLi4vVkVSU0lPTiAqKVxuXG5sZXQgb2NhbWxfdmVyc2lvbiA9IFwiNC4wMi4zXCI7O1xuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBNZXJnaW5nIGFuZCBzb3J0aW5nICopXG5cbm9wZW4gQXJyYXlcblxubGV0IHJlYyBtZXJnZSBvcmRlciBsMSBsMiA9XG4gIG1hdGNoIGwxIHdpdGhcbiAgICBbXSAtPiBsMlxuICB8IGgxIDo6IHQxIC0+XG4gICAgICBtYXRjaCBsMiB3aXRoXG4gICAgICAgIFtdIC0+IGwxXG4gICAgICB8IGgyIDo6IHQyIC0+XG4gICAgICAgICAgaWYgb3JkZXIgaDEgaDJcbiAgICAgICAgICB0aGVuIGgxIDo6IG1lcmdlIG9yZGVyIHQxIGwyXG4gICAgICAgICAgZWxzZSBoMiA6OiBtZXJnZSBvcmRlciBsMSB0MlxuXG5sZXQgbGlzdCBvcmRlciBsID1cbiAgbGV0IHJlYyBpbml0bGlzdCA9IGZ1bmN0aW9uXG4gICAgICBbXSAtPiBbXVxuICAgIHwgW2VdIC0+IFtbZV1dXG4gICAgfCBlMTo6ZTI6OnJlc3QgLT5cbiAgICAgICAgKGlmIG9yZGVyIGUxIGUyIHRoZW4gW2UxO2UyXSBlbHNlIFtlMjtlMV0pIDo6IGluaXRsaXN0IHJlc3QgaW5cbiAgbGV0IHJlYyBtZXJnZTIgPSBmdW5jdGlvblxuICAgICAgbDE6OmwyOjpyZXN0IC0+IG1lcmdlIG9yZGVyIGwxIGwyIDo6IG1lcmdlMiByZXN0XG4gICAgfCB4IC0+IHggaW5cbiAgbGV0IHJlYyBtZXJnZWFsbCA9IGZ1bmN0aW9uXG4gICAgICBbXSAtPiBbXVxuICAgIHwgW2xdIC0+IGxcbiAgICB8IGxsaXN0IC0+IG1lcmdlYWxsIChtZXJnZTIgbGxpc3QpIGluXG4gIG1lcmdlYWxsKGluaXRsaXN0IGwpXG5cbmxldCBzd2FwIGFyciBpIGogPVxuICBsZXQgdG1wID0gdW5zYWZlX2dldCBhcnIgaSBpblxuICB1bnNhZmVfc2V0IGFyciBpICh1bnNhZmVfZ2V0IGFyciBqKTtcbiAgdW5zYWZlX3NldCBhcnIgaiB0bXBcblxuKCogVGhlcmUgaXMgYSBrbm93biBwZXJmb3JtYW5jZSBidWcgaW4gdGhlIGNvZGUgYmVsb3cuICBJZiB5b3UgZmluZFxuICAgaXQsIGRvbid0IGJvdGhlciByZXBvcnRpbmcgaXQuICBZb3UncmUgbm90IHN1cHBvc2VkIHRvIHVzZSB0aGlzXG4gICBtb2R1bGUgYW55d2F5LiAqKVxubGV0IGFycmF5IGNtcCBhcnIgPVxuICBsZXQgcmVjIHFzb3J0IGxvIGhpID1cbiAgICBpZiBoaSAtIGxvID49IDYgdGhlbiBiZWdpblxuICAgICAgbGV0IG1pZCA9IChsbyArIGhpKSBsc3IgMSBpblxuICAgICAgKCogU2VsZWN0IG1lZGlhbiB2YWx1ZSBmcm9tIGFtb25nIExPLCBNSUQsIGFuZCBISS4gUmVhcnJhbmdlXG4gICAgICAgICBMTyBhbmQgSEkgc28gdGhlIHRocmVlIHZhbHVlcyBhcmUgc29ydGVkLiBUaGlzIGxvd2VycyB0aGVcbiAgICAgICAgIHByb2JhYmlsaXR5IG9mIHBpY2tpbmcgYSBwYXRob2xvZ2ljYWwgcGl2b3QuICBJdCBhbHNvXG4gICAgICAgICBhdm9pZHMgZXh0cmEgY29tcGFyaXNvbnMgb24gaSBhbmQgaiBpbiB0aGUgdHdvIHRpZ2h0IFwid2hpbGVcIlxuICAgICAgICAgbG9vcHMgYmVsb3cuICopXG4gICAgICBpZiBjbXAgKHVuc2FmZV9nZXQgYXJyIG1pZCkgKHVuc2FmZV9nZXQgYXJyIGxvKSB0aGVuIHN3YXAgYXJyIG1pZCBsbztcbiAgICAgIGlmIGNtcCAodW5zYWZlX2dldCBhcnIgaGkpICh1bnNhZmVfZ2V0IGFyciBtaWQpIHRoZW4gYmVnaW5cbiAgICAgICAgc3dhcCBhcnIgbWlkIGhpO1xuICAgICAgICBpZiBjbXAgKHVuc2FmZV9nZXQgYXJyIG1pZCkgKHVuc2FmZV9nZXQgYXJyIGxvKSB0aGVuIHN3YXAgYXJyIG1pZCBsb1xuICAgICAgZW5kO1xuICAgICAgbGV0IHBpdm90ID0gdW5zYWZlX2dldCBhcnIgbWlkIGluXG4gICAgICBsZXQgaSA9IHJlZiAobG8gKyAxKSBhbmQgaiA9IHJlZiAoaGkgLSAxKSBpblxuICAgICAgaWYgbm90IChjbXAgcGl2b3QgKHVuc2FmZV9nZXQgYXJyIGhpKSlcbiAgICAgICAgIHx8IG5vdCAoY21wICh1bnNhZmVfZ2V0IGFyciBsbykgcGl2b3QpXG4gICAgICB0aGVuIHJhaXNlIChJbnZhbGlkX2FyZ3VtZW50IFwiU29ydC5hcnJheVwiKTtcbiAgICAgIHdoaWxlICFpIDwgIWogZG9cbiAgICAgICAgd2hpbGUgbm90IChjbXAgcGl2b3QgKHVuc2FmZV9nZXQgYXJyICFpKSkgZG8gaW5jciBpIGRvbmU7XG4gICAgICAgIHdoaWxlIG5vdCAoY21wICh1bnNhZmVfZ2V0IGFyciAhaikgcGl2b3QpIGRvIGRlY3IgaiBkb25lO1xuICAgICAgICBpZiAhaSA8ICFqIHRoZW4gc3dhcCBhcnIgIWkgIWo7XG4gICAgICAgIGluY3IgaTsgZGVjciBqXG4gICAgICBkb25lO1xuICAgICAgKCogUmVjdXJzaW9uIG9uIHNtYWxsZXIgaGFsZiwgdGFpbC1jYWxsIG9uIGxhcmdlciBoYWxmICopXG4gICAgICBpZiAhaiAtIGxvIDw9IGhpIC0gIWkgdGhlbiBiZWdpblxuICAgICAgICBxc29ydCBsbyAhajsgcXNvcnQgIWkgaGlcbiAgICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICAgIHFzb3J0ICFpIGhpOyBxc29ydCBsbyAhalxuICAgICAgZW5kXG4gICAgZW5kIGluXG4gIHFzb3J0IDAgKEFycmF5Lmxlbmd0aCBhcnIgLSAxKTtcbiAgKCogRmluaXNoIHNvcnRpbmcgYnkgaW5zZXJ0aW9uIHNvcnQgKilcbiAgZm9yIGkgPSAxIHRvIEFycmF5Lmxlbmd0aCBhcnIgLSAxIGRvXG4gICAgbGV0IHZhbF9pID0gKHVuc2FmZV9nZXQgYXJyIGkpIGluXG4gICAgaWYgbm90IChjbXAgKHVuc2FmZV9nZXQgYXJyIChpIC0gMSkpIHZhbF9pKSB0aGVuIGJlZ2luXG4gICAgICB1bnNhZmVfc2V0IGFyciBpICh1bnNhZmVfZ2V0IGFyciAoaSAtIDEpKTtcbiAgICAgIGxldCBqID0gcmVmIChpIC0gMSkgaW5cbiAgICAgIHdoaWxlICFqID49IDEgJiYgbm90IChjbXAgKHVuc2FmZV9nZXQgYXJyICghaiAtIDEpKSB2YWxfaSkgZG9cbiAgICAgICAgdW5zYWZlX3NldCBhcnIgIWogKHVuc2FmZV9nZXQgYXJyICghaiAtIDEpKTtcbiAgICAgICAgZGVjciBqXG4gICAgICBkb25lO1xuICAgICAgdW5zYWZlX3NldCBhcnIgIWogdmFsX2lcbiAgICBlbmRcbiAgZG9uZVxuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk3IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG50eXBlIGV4dGVybl9mbGFncyA9XG4gICAgTm9fc2hhcmluZ1xuICB8IENsb3N1cmVzXG4gIHwgQ29tcGF0XzMyXG4oKiBub3RlOiB0aGlzIHR5cGUgZGVmaW5pdGlvbiBpcyB1c2VkIGluICdieXRlcnVuL2RlYnVnZ2VyLmMnICopXG5cbmV4dGVybmFsIHRvX2NoYW5uZWw6IG91dF9jaGFubmVsIC0+ICdhIC0+IGV4dGVybl9mbGFncyBsaXN0IC0+IHVuaXRcbiAgICA9IFwiY2FtbF9vdXRwdXRfdmFsdWVcIlxuZXh0ZXJuYWwgdG9fYnl0ZXM6ICdhIC0+IGV4dGVybl9mbGFncyBsaXN0IC0+IGJ5dGVzXG4gICAgPSBcImNhbWxfb3V0cHV0X3ZhbHVlX3RvX3N0cmluZ1wiXG5leHRlcm5hbCB0b19zdHJpbmc6ICdhIC0+IGV4dGVybl9mbGFncyBsaXN0IC0+IHN0cmluZ1xuICAgID0gXCJjYW1sX291dHB1dF92YWx1ZV90b19zdHJpbmdcIlxuZXh0ZXJuYWwgdG9fYnVmZmVyX3Vuc2FmZTpcbiAgICAgIGJ5dGVzIC0+IGludCAtPiBpbnQgLT4gJ2EgLT4gZXh0ZXJuX2ZsYWdzIGxpc3QgLT4gaW50XG4gICAgPSBcImNhbWxfb3V0cHV0X3ZhbHVlX3RvX2J1ZmZlclwiXG5cbmxldCB0b19idWZmZXIgYnVmZiBvZnMgbGVuIHYgZmxhZ3MgPVxuICBpZiBvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gQnl0ZXMubGVuZ3RoIGJ1ZmYgLSBsZW5cbiAgdGhlbiBpbnZhbGlkX2FyZyBcIk1hcnNoYWwudG9fYnVmZmVyOiBzdWJzdHJpbmcgb3V0IG9mIGJvdW5kc1wiXG4gIGVsc2UgdG9fYnVmZmVyX3Vuc2FmZSBidWZmIG9mcyBsZW4gdiBmbGFnc1xuXG4oKiBUaGUgZnVuY3Rpb25zIGJlbG93IHVzZSBieXRlIHNlcXVlbmNlcyBhcyBpbnB1dCwgbmV2ZXIgdXNpbmcgYW55XG4gICBtdXRhdGlvbi4gSXQgbWFrZXMgc2Vuc2UgdG8gdXNlIG5vbi1tdXRhdGVkIFtieXRlc10gcmF0aGVyIHRoYW5cbiAgIFtzdHJpbmddLCBiZWNhdXNlIHdlIHJlYWxseSB3b3JrIHdpdGggc2VxdWVuY2VzIG9mIGJ5dGVzLCBub3RcbiAgIGEgdGV4dCByZXByZXNlbnRhdGlvbi5cbiopXG5cbmV4dGVybmFsIGZyb21fY2hhbm5lbDogaW5fY2hhbm5lbCAtPiAnYSA9IFwiY2FtbF9pbnB1dF92YWx1ZVwiXG5leHRlcm5hbCBmcm9tX2J5dGVzX3Vuc2FmZTogYnl0ZXMgLT4gaW50IC0+ICdhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiY2FtbF9pbnB1dF92YWx1ZV9mcm9tX3N0cmluZ1wiXG5leHRlcm5hbCBkYXRhX3NpemVfdW5zYWZlOiBieXRlcyAtPiBpbnQgLT4gaW50ID0gXCJjYW1sX21hcnNoYWxfZGF0YV9zaXplXCJcblxubGV0IGhlYWRlcl9zaXplID0gMjBcbmxldCBkYXRhX3NpemUgYnVmZiBvZnMgPVxuICBpZiBvZnMgPCAwIHx8IG9mcyA+IEJ5dGVzLmxlbmd0aCBidWZmIC0gaGVhZGVyX3NpemVcbiAgdGhlbiBpbnZhbGlkX2FyZyBcIk1hcnNoYWwuZGF0YV9zaXplXCJcbiAgZWxzZSBkYXRhX3NpemVfdW5zYWZlIGJ1ZmYgb2ZzXG5sZXQgdG90YWxfc2l6ZSBidWZmIG9mcyA9IGhlYWRlcl9zaXplICsgZGF0YV9zaXplIGJ1ZmYgb2ZzXG5cbmxldCBmcm9tX2J5dGVzIGJ1ZmYgb2ZzID1cbiAgaWYgb2ZzIDwgMCB8fCBvZnMgPiBCeXRlcy5sZW5ndGggYnVmZiAtIGhlYWRlcl9zaXplXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJNYXJzaGFsLmZyb21fYnl0ZXNcIlxuICBlbHNlIGJlZ2luXG4gICAgbGV0IGxlbiA9IGRhdGFfc2l6ZV91bnNhZmUgYnVmZiBvZnMgaW5cbiAgICBpZiBvZnMgPiBCeXRlcy5sZW5ndGggYnVmZiAtIChoZWFkZXJfc2l6ZSArIGxlbilcbiAgICB0aGVuIGludmFsaWRfYXJnIFwiTWFyc2hhbC5mcm9tX2J5dGVzXCJcbiAgICBlbHNlIGZyb21fYnl0ZXNfdW5zYWZlIGJ1ZmYgb2ZzXG4gIGVuZFxuXG5sZXQgZnJvbV9zdHJpbmcgYnVmZiBvZnMgPVxuICAoKiBCeXRlcy51bnNhZmVfb2Zfc3RyaW5nIGlzIHNhZmUgaGVyZSwgYXMgdGhlIHByb2R1Y2VkIGJ5dGVcbiAgICAgc2VxdWVuY2UgaXMgbmV2ZXIgbXV0YXRlZCAqKVxuICBmcm9tX2J5dGVzIChCeXRlcy51bnNhZmVfb2Zfc3RyaW5nIGJ1ZmYpIG9mc1xuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBPcGVyYXRpb25zIG9uIGludGVybmFsIHJlcHJlc2VudGF0aW9ucyBvZiB2YWx1ZXMgKilcblxudHlwZSB0XG5cbmV4dGVybmFsIHJlcHIgOiAnYSAtPiB0ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgb2JqIDogdCAtPiAnYSA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIG1hZ2ljIDogJ2EgLT4gJ2IgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCBpc19ibG9jayA6IHQgLT4gYm9vbCA9IFwiY2FtbF9vYmpfaXNfYmxvY2tcIlxuZXh0ZXJuYWwgaXNfaW50IDogdCAtPiBib29sID0gXCIlb2JqX2lzX2ludFwiXG5leHRlcm5hbCB0YWcgOiB0IC0+IGludCA9IFwiY2FtbF9vYmpfdGFnXCJcbmV4dGVybmFsIHNldF90YWcgOiB0IC0+IGludCAtPiB1bml0ID0gXCJjYW1sX29ial9zZXRfdGFnXCJcbmV4dGVybmFsIHNpemUgOiB0IC0+IGludCA9IFwiJW9ial9zaXplXCJcbmV4dGVybmFsIGZpZWxkIDogdCAtPiBpbnQgLT4gdCA9IFwiJW9ial9maWVsZFwiXG5leHRlcm5hbCBzZXRfZmllbGQgOiB0IC0+IGludCAtPiB0IC0+IHVuaXQgPSBcIiVvYmpfc2V0X2ZpZWxkXCJcbmxldCBkb3VibGVfZmllbGQgeCBpID0gQXJyYXkuZ2V0IChvYmogeCA6IGZsb2F0IGFycmF5KSBpXG5sZXQgc2V0X2RvdWJsZV9maWVsZCB4IGkgdiA9IEFycmF5LnNldCAob2JqIHggOiBmbG9hdCBhcnJheSkgaSB2XG5leHRlcm5hbCBuZXdfYmxvY2sgOiBpbnQgLT4gaW50IC0+IHQgPSBcImNhbWxfb2JqX2Jsb2NrXCJcbmV4dGVybmFsIGR1cCA6IHQgLT4gdCA9IFwiY2FtbF9vYmpfZHVwXCJcbmV4dGVybmFsIHRydW5jYXRlIDogdCAtPiBpbnQgLT4gdW5pdCA9IFwiY2FtbF9vYmpfdHJ1bmNhdGVcIlxuZXh0ZXJuYWwgYWRkX29mZnNldCA6IHQgLT4gSW50MzIudCAtPiB0ID0gXCJjYW1sX29ial9hZGRfb2Zmc2V0XCJcblxubGV0IG1hcnNoYWwgKG9iaiA6IHQpID1cbiAgTWFyc2hhbC50b19ieXRlcyBvYmogW11cbmxldCB1bm1hcnNoYWwgc3RyIHBvcyA9XG4gIChNYXJzaGFsLmZyb21fYnl0ZXMgc3RyIHBvcywgcG9zICsgTWFyc2hhbC50b3RhbF9zaXplIHN0ciBwb3MpXG5cbmxldCBmaXJzdF9ub25fY29uc3RhbnRfY29uc3RydWN0b3JfdGFnID0gMFxubGV0IGxhc3Rfbm9uX2NvbnN0YW50X2NvbnN0cnVjdG9yX3RhZyA9IDI0NVxuXG5sZXQgbGF6eV90YWcgPSAyNDZcbmxldCBjbG9zdXJlX3RhZyA9IDI0N1xubGV0IG9iamVjdF90YWcgPSAyNDhcbmxldCBpbmZpeF90YWcgPSAyNDlcbmxldCBmb3J3YXJkX3RhZyA9IDI1MFxuXG5sZXQgbm9fc2Nhbl90YWcgPSAyNTFcblxubGV0IGFic3RyYWN0X3RhZyA9IDI1MVxubGV0IHN0cmluZ190YWcgPSAyNTJcbmxldCBkb3VibGVfdGFnID0gMjUzXG5sZXQgZG91YmxlX2FycmF5X3RhZyA9IDI1NFxubGV0IGN1c3RvbV90YWcgPSAyNTVcbmxldCBmaW5hbF90YWcgPSBjdXN0b21fdGFnXG5cblxubGV0IGludF90YWcgPSAxMDAwXG5sZXQgb3V0X29mX2hlYXBfdGFnID0gMTAwMVxubGV0IHVuYWxpZ25lZF90YWcgPSAxMDAyXG5cbmxldCBleHRlbnNpb25fc2xvdCB4ID1cbiAgbGV0IHggPSByZXByIHggaW5cbiAgbGV0IHNsb3QgPVxuICAgIGlmIChpc19ibG9jayB4KSAmJiAodGFnIHgpIDw+IG9iamVjdF90YWcgJiYgKHNpemUgeCkgPj0gMSB0aGVuIGZpZWxkIHggMFxuICAgIGVsc2UgeFxuICBpblxuICBsZXQgbmFtZSA9XG4gICAgaWYgKGlzX2Jsb2NrIHNsb3QpICYmICh0YWcgc2xvdCkgPSBvYmplY3RfdGFnIHRoZW4gZmllbGQgc2xvdCAwXG4gICAgZWxzZSByYWlzZSBOb3RfZm91bmRcbiAgaW5cbiAgICBpZiAodGFnIG5hbWUpID0gc3RyaW5nX3RhZyB0aGVuIHNsb3RcbiAgICBlbHNlIHJhaXNlIE5vdF9mb3VuZFxuXG5sZXQgZXh0ZW5zaW9uX25hbWUgeCA9XG4gIHRyeVxuICAgIGxldCBzbG90ID0gZXh0ZW5zaW9uX3Nsb3QgeCBpblxuICAgICAgKG9iaiAoZmllbGQgc2xvdCAwKSA6IHN0cmluZylcbiAgd2l0aCBOb3RfZm91bmQgLT4gaW52YWxpZF9hcmcgXCJPYmouZXh0ZW5zaW9uX25hbWVcIlxuXG5sZXQgZXh0ZW5zaW9uX2lkIHggPVxuICB0cnlcbiAgICBsZXQgc2xvdCA9IGV4dGVuc2lvbl9zbG90IHggaW5cbiAgICAgIChvYmogKGZpZWxkIHNsb3QgMSkgOiBpbnQpXG4gIHdpdGggTm90X2ZvdW5kIC0+IGludmFsaWRfYXJnIFwiT2JqLmV4dGVuc2lvbl9pZFwiXG5cbmxldCBleHRlbnNpb25fc2xvdCB4ID1cbiAgdHJ5XG4gICAgZXh0ZW5zaW9uX3Nsb3QgeFxuICB3aXRoIE5vdF9mb3VuZCAtPiBpbnZhbGlkX2FyZyBcIk9iai5leHRlbnNpb25fc2xvdFwiXG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIE1vZHVsZSBbSW50MzJdOiAzMi1iaXQgaW50ZWdlcnMgKilcblxuZXh0ZXJuYWwgbmVnIDogaW50MzIgLT4gaW50MzIgPSBcIiVpbnQzMl9uZWdcIlxuZXh0ZXJuYWwgYWRkIDogaW50MzIgLT4gaW50MzIgLT4gaW50MzIgPSBcIiVpbnQzMl9hZGRcIlxuZXh0ZXJuYWwgc3ViIDogaW50MzIgLT4gaW50MzIgLT4gaW50MzIgPSBcIiVpbnQzMl9zdWJcIlxuZXh0ZXJuYWwgbXVsIDogaW50MzIgLT4gaW50MzIgLT4gaW50MzIgPSBcIiVpbnQzMl9tdWxcIlxuZXh0ZXJuYWwgZGl2IDogaW50MzIgLT4gaW50MzIgLT4gaW50MzIgPSBcIiVpbnQzMl9kaXZcIlxuZXh0ZXJuYWwgcmVtIDogaW50MzIgLT4gaW50MzIgLT4gaW50MzIgPSBcIiVpbnQzMl9tb2RcIlxuZXh0ZXJuYWwgbG9nYW5kIDogaW50MzIgLT4gaW50MzIgLT4gaW50MzIgPSBcIiVpbnQzMl9hbmRcIlxuZXh0ZXJuYWwgbG9nb3IgOiBpbnQzMiAtPiBpbnQzMiAtPiBpbnQzMiA9IFwiJWludDMyX29yXCJcbmV4dGVybmFsIGxvZ3hvciA6IGludDMyIC0+IGludDMyIC0+IGludDMyID0gXCIlaW50MzJfeG9yXCJcbmV4dGVybmFsIHNoaWZ0X2xlZnQgOiBpbnQzMiAtPiBpbnQgLT4gaW50MzIgPSBcIiVpbnQzMl9sc2xcIlxuZXh0ZXJuYWwgc2hpZnRfcmlnaHQgOiBpbnQzMiAtPiBpbnQgLT4gaW50MzIgPSBcIiVpbnQzMl9hc3JcIlxuZXh0ZXJuYWwgc2hpZnRfcmlnaHRfbG9naWNhbCA6IGludDMyIC0+IGludCAtPiBpbnQzMiA9IFwiJWludDMyX2xzclwiXG5leHRlcm5hbCBvZl9pbnQgOiBpbnQgLT4gaW50MzIgPSBcIiVpbnQzMl9vZl9pbnRcIlxuZXh0ZXJuYWwgdG9faW50IDogaW50MzIgLT4gaW50ID0gXCIlaW50MzJfdG9faW50XCJcbmV4dGVybmFsIG9mX2Zsb2F0IDogZmxvYXQgLT4gaW50MzIgPSBcImNhbWxfaW50MzJfb2ZfZmxvYXRcIlxuZXh0ZXJuYWwgdG9fZmxvYXQgOiBpbnQzMiAtPiBmbG9hdCA9IFwiY2FtbF9pbnQzMl90b19mbG9hdFwiXG5leHRlcm5hbCBiaXRzX29mX2Zsb2F0IDogZmxvYXQgLT4gaW50MzIgPSBcImNhbWxfaW50MzJfYml0c19vZl9mbG9hdFwiXG5leHRlcm5hbCBmbG9hdF9vZl9iaXRzIDogaW50MzIgLT4gZmxvYXQgPSBcImNhbWxfaW50MzJfZmxvYXRfb2ZfYml0c1wiXG5cbmxldCB6ZXJvID0gMGxcbmxldCBvbmUgPSAxbFxubGV0IG1pbnVzX29uZSA9IC0xbFxubGV0IHN1Y2MgbiA9IGFkZCBuIDFsXG5sZXQgcHJlZCBuID0gc3ViIG4gMWxcbmxldCBhYnMgbiA9IGlmIG4gPj0gMGwgdGhlbiBuIGVsc2UgbmVnIG5cbmxldCBtaW5faW50ID0gMHg4MDAwMDAwMGxcbmxldCBtYXhfaW50ID0gMHg3RkZGRkZGRmxcbmxldCBsb2dub3QgbiA9IGxvZ3hvciBuICgtMWwpXG5cbmV4dGVybmFsIGZvcm1hdCA6IHN0cmluZyAtPiBpbnQzMiAtPiBzdHJpbmcgPSBcImNhbWxfaW50MzJfZm9ybWF0XCJcbmxldCB0b19zdHJpbmcgbiA9IGZvcm1hdCBcIiVkXCIgblxuXG5leHRlcm5hbCBvZl9zdHJpbmcgOiBzdHJpbmcgLT4gaW50MzIgPSBcImNhbWxfaW50MzJfb2Zfc3RyaW5nXCJcblxudHlwZSB0ID0gaW50MzJcblxubGV0IGNvbXBhcmUgKHg6IHQpICh5OiB0KSA9IFBlcnZhc2l2ZXMuY29tcGFyZSB4IHlcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgWGF2aWVyIExlcm95LCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogTW9kdWxlIFtJbnQ2NF06IDY0LWJpdCBpbnRlZ2VycyAqKVxuXG5leHRlcm5hbCBuZWcgOiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWludDY0X25lZ1wiXG5leHRlcm5hbCBhZGQgOiBpbnQ2NCAtPiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWludDY0X2FkZFwiXG5leHRlcm5hbCBzdWIgOiBpbnQ2NCAtPiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWludDY0X3N1YlwiXG5leHRlcm5hbCBtdWwgOiBpbnQ2NCAtPiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWludDY0X211bFwiXG5leHRlcm5hbCBkaXYgOiBpbnQ2NCAtPiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWludDY0X2RpdlwiXG5leHRlcm5hbCByZW0gOiBpbnQ2NCAtPiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWludDY0X21vZFwiXG5leHRlcm5hbCBsb2dhbmQgOiBpbnQ2NCAtPiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWludDY0X2FuZFwiXG5leHRlcm5hbCBsb2dvciA6IGludDY0IC0+IGludDY0IC0+IGludDY0ID0gXCIlaW50NjRfb3JcIlxuZXh0ZXJuYWwgbG9neG9yIDogaW50NjQgLT4gaW50NjQgLT4gaW50NjQgPSBcIiVpbnQ2NF94b3JcIlxuZXh0ZXJuYWwgc2hpZnRfbGVmdCA6IGludDY0IC0+IGludCAtPiBpbnQ2NCA9IFwiJWludDY0X2xzbFwiXG5leHRlcm5hbCBzaGlmdF9yaWdodCA6IGludDY0IC0+IGludCAtPiBpbnQ2NCA9IFwiJWludDY0X2FzclwiXG5leHRlcm5hbCBzaGlmdF9yaWdodF9sb2dpY2FsIDogaW50NjQgLT4gaW50IC0+IGludDY0ID0gXCIlaW50NjRfbHNyXCJcbmV4dGVybmFsIG9mX2ludCA6IGludCAtPiBpbnQ2NCA9IFwiJWludDY0X29mX2ludFwiXG5leHRlcm5hbCB0b19pbnQgOiBpbnQ2NCAtPiBpbnQgPSBcIiVpbnQ2NF90b19pbnRcIlxuZXh0ZXJuYWwgb2ZfZmxvYXQgOiBmbG9hdCAtPiBpbnQ2NCA9IFwiY2FtbF9pbnQ2NF9vZl9mbG9hdFwiXG5leHRlcm5hbCB0b19mbG9hdCA6IGludDY0IC0+IGZsb2F0ID0gXCJjYW1sX2ludDY0X3RvX2Zsb2F0XCJcbmV4dGVybmFsIG9mX2ludDMyIDogaW50MzIgLT4gaW50NjQgPSBcIiVpbnQ2NF9vZl9pbnQzMlwiXG5leHRlcm5hbCB0b19pbnQzMiA6IGludDY0IC0+IGludDMyID0gXCIlaW50NjRfdG9faW50MzJcIlxuZXh0ZXJuYWwgb2ZfbmF0aXZlaW50IDogbmF0aXZlaW50IC0+IGludDY0ID0gXCIlaW50NjRfb2ZfbmF0aXZlaW50XCJcbmV4dGVybmFsIHRvX25hdGl2ZWludCA6IGludDY0IC0+IG5hdGl2ZWludCA9IFwiJWludDY0X3RvX25hdGl2ZWludFwiXG5cbmxldCB6ZXJvID0gMExcbmxldCBvbmUgPSAxTFxubGV0IG1pbnVzX29uZSA9IC0xTFxubGV0IHN1Y2MgbiA9IGFkZCBuIDFMXG5sZXQgcHJlZCBuID0gc3ViIG4gMUxcbmxldCBhYnMgbiA9IGlmIG4gPj0gMEwgdGhlbiBuIGVsc2UgbmVnIG5cbmxldCBtaW5faW50ID0gMHg4MDAwMDAwMDAwMDAwMDAwTFxubGV0IG1heF9pbnQgPSAweDdGRkZGRkZGRkZGRkZGRkZMXG5sZXQgbG9nbm90IG4gPSBsb2d4b3IgbiAoLTFMKVxuXG5leHRlcm5hbCBmb3JtYXQgOiBzdHJpbmcgLT4gaW50NjQgLT4gc3RyaW5nID0gXCJjYW1sX2ludDY0X2Zvcm1hdFwiXG5sZXQgdG9fc3RyaW5nIG4gPSBmb3JtYXQgXCIlZFwiIG5cblxuZXh0ZXJuYWwgb2Zfc3RyaW5nIDogc3RyaW5nIC0+IGludDY0ID0gXCJjYW1sX2ludDY0X29mX3N0cmluZ1wiXG5cbmV4dGVybmFsIGJpdHNfb2ZfZmxvYXQgOiBmbG9hdCAtPiBpbnQ2NCA9IFwiY2FtbF9pbnQ2NF9iaXRzX29mX2Zsb2F0XCJcbmV4dGVybmFsIGZsb2F0X29mX2JpdHMgOiBpbnQ2NCAtPiBmbG9hdCA9IFwiY2FtbF9pbnQ2NF9mbG9hdF9vZl9iaXRzXCJcblxudHlwZSB0ID0gaW50NjRcblxubGV0IGNvbXBhcmUgKHg6IHQpICh5OiB0KSA9IFBlcnZhc2l2ZXMuY29tcGFyZSB4IHlcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgWGF2aWVyIExlcm95LCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogTW9kdWxlIFtOYXRpdmVpbnRdOiBwcm9jZXNzb3ItbmF0aXZlIGludGVnZXJzICopXG5cbmV4dGVybmFsIG5lZzogbmF0aXZlaW50IC0+IG5hdGl2ZWludCA9IFwiJW5hdGl2ZWludF9uZWdcIlxuZXh0ZXJuYWwgYWRkOiBuYXRpdmVpbnQgLT4gbmF0aXZlaW50IC0+IG5hdGl2ZWludCA9IFwiJW5hdGl2ZWludF9hZGRcIlxuZXh0ZXJuYWwgc3ViOiBuYXRpdmVpbnQgLT4gbmF0aXZlaW50IC0+IG5hdGl2ZWludCA9IFwiJW5hdGl2ZWludF9zdWJcIlxuZXh0ZXJuYWwgbXVsOiBuYXRpdmVpbnQgLT4gbmF0aXZlaW50IC0+IG5hdGl2ZWludCA9IFwiJW5hdGl2ZWludF9tdWxcIlxuZXh0ZXJuYWwgZGl2OiBuYXRpdmVpbnQgLT4gbmF0aXZlaW50IC0+IG5hdGl2ZWludCA9IFwiJW5hdGl2ZWludF9kaXZcIlxuZXh0ZXJuYWwgcmVtOiBuYXRpdmVpbnQgLT4gbmF0aXZlaW50IC0+IG5hdGl2ZWludCA9IFwiJW5hdGl2ZWludF9tb2RcIlxuZXh0ZXJuYWwgbG9nYW5kOiBuYXRpdmVpbnQgLT4gbmF0aXZlaW50IC0+IG5hdGl2ZWludCA9IFwiJW5hdGl2ZWludF9hbmRcIlxuZXh0ZXJuYWwgbG9nb3I6IG5hdGl2ZWludCAtPiBuYXRpdmVpbnQgLT4gbmF0aXZlaW50ID0gXCIlbmF0aXZlaW50X29yXCJcbmV4dGVybmFsIGxvZ3hvcjogbmF0aXZlaW50IC0+IG5hdGl2ZWludCAtPiBuYXRpdmVpbnQgPSBcIiVuYXRpdmVpbnRfeG9yXCJcbmV4dGVybmFsIHNoaWZ0X2xlZnQ6IG5hdGl2ZWludCAtPiBpbnQgLT4gbmF0aXZlaW50ID0gXCIlbmF0aXZlaW50X2xzbFwiXG5leHRlcm5hbCBzaGlmdF9yaWdodDogbmF0aXZlaW50IC0+IGludCAtPiBuYXRpdmVpbnQgPSBcIiVuYXRpdmVpbnRfYXNyXCJcbmV4dGVybmFsIHNoaWZ0X3JpZ2h0X2xvZ2ljYWw6IG5hdGl2ZWludCAtPiBpbnQgLT4gbmF0aXZlaW50ID0gXCIlbmF0aXZlaW50X2xzclwiXG5leHRlcm5hbCBvZl9pbnQ6IGludCAtPiBuYXRpdmVpbnQgPSBcIiVuYXRpdmVpbnRfb2ZfaW50XCJcbmV4dGVybmFsIHRvX2ludDogbmF0aXZlaW50IC0+IGludCA9IFwiJW5hdGl2ZWludF90b19pbnRcIlxuZXh0ZXJuYWwgb2ZfZmxvYXQgOiBmbG9hdCAtPiBuYXRpdmVpbnQgPSBcImNhbWxfbmF0aXZlaW50X29mX2Zsb2F0XCJcbmV4dGVybmFsIHRvX2Zsb2F0IDogbmF0aXZlaW50IC0+IGZsb2F0ID0gXCJjYW1sX25hdGl2ZWludF90b19mbG9hdFwiXG5leHRlcm5hbCBvZl9pbnQzMjogaW50MzIgLT4gbmF0aXZlaW50ID0gXCIlbmF0aXZlaW50X29mX2ludDMyXCJcbmV4dGVybmFsIHRvX2ludDMyOiBuYXRpdmVpbnQgLT4gaW50MzIgPSBcIiVuYXRpdmVpbnRfdG9faW50MzJcIlxuXG5sZXQgemVybyA9IDBuXG5sZXQgb25lID0gMW5cbmxldCBtaW51c19vbmUgPSAtMW5cbmxldCBzdWNjIG4gPSBhZGQgbiAxblxubGV0IHByZWQgbiA9IHN1YiBuIDFuXG5sZXQgYWJzIG4gPSBpZiBuID49IDBuIHRoZW4gbiBlbHNlIG5lZyBuXG5sZXQgc2l6ZSA9IFN5cy53b3JkX3NpemVcbmxldCBtaW5faW50ID0gc2hpZnRfbGVmdCAxbiAoc2l6ZSAtIDEpXG5sZXQgbWF4X2ludCA9IHN1YiBtaW5faW50IDFuXG5sZXQgbG9nbm90IG4gPSBsb2d4b3IgbiAoLTFuKVxuXG5leHRlcm5hbCBmb3JtYXQgOiBzdHJpbmcgLT4gbmF0aXZlaW50IC0+IHN0cmluZyA9IFwiY2FtbF9uYXRpdmVpbnRfZm9ybWF0XCJcbmxldCB0b19zdHJpbmcgbiA9IGZvcm1hdCBcIiVkXCIgblxuXG5leHRlcm5hbCBvZl9zdHJpbmc6IHN0cmluZyAtPiBuYXRpdmVpbnQgPSBcImNhbWxfbmF0aXZlaW50X29mX3N0cmluZ1wiXG5cbnR5cGUgdCA9IG5hdGl2ZWludFxuXG5sZXQgY29tcGFyZSAoeDogdCkgKHk6IHQpID0gUGVydmFzaXZlcy5jb21wYXJlIHggeVxuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBUaGUgcnVuLXRpbWUgbGlicmFyeSBmb3IgbGV4ZXJzIGdlbmVyYXRlZCBieSBjYW1sbGV4ICopXG5cbnR5cGUgcG9zaXRpb24gPSB7XG4gIHBvc19mbmFtZSA6IHN0cmluZztcbiAgcG9zX2xudW0gOiBpbnQ7XG4gIHBvc19ib2wgOiBpbnQ7XG4gIHBvc19jbnVtIDogaW50O1xufVxuXG5sZXQgZHVtbXlfcG9zID0ge1xuICBwb3NfZm5hbWUgPSBcIlwiO1xuICBwb3NfbG51bSA9IDA7XG4gIHBvc19ib2wgPSAwO1xuICBwb3NfY251bSA9IC0xO1xufVxuXG50eXBlIGxleGJ1ZiA9XG4gIHsgcmVmaWxsX2J1ZmYgOiBsZXhidWYgLT4gdW5pdDtcbiAgICBtdXRhYmxlIGxleF9idWZmZXIgOiBieXRlcztcbiAgICBtdXRhYmxlIGxleF9idWZmZXJfbGVuIDogaW50O1xuICAgIG11dGFibGUgbGV4X2Fic19wb3MgOiBpbnQ7XG4gICAgbXV0YWJsZSBsZXhfc3RhcnRfcG9zIDogaW50O1xuICAgIG11dGFibGUgbGV4X2N1cnJfcG9zIDogaW50O1xuICAgIG11dGFibGUgbGV4X2xhc3RfcG9zIDogaW50O1xuICAgIG11dGFibGUgbGV4X2xhc3RfYWN0aW9uIDogaW50O1xuICAgIG11dGFibGUgbGV4X2VvZl9yZWFjaGVkIDogYm9vbDtcbiAgICBtdXRhYmxlIGxleF9tZW0gOiBpbnQgYXJyYXk7XG4gICAgbXV0YWJsZSBsZXhfc3RhcnRfcCA6IHBvc2l0aW9uO1xuICAgIG11dGFibGUgbGV4X2N1cnJfcCA6IHBvc2l0aW9uO1xuICB9XG5cbnR5cGUgbGV4X3RhYmxlcyA9XG4gIHsgbGV4X2Jhc2U6IHN0cmluZztcbiAgICBsZXhfYmFja3Ryazogc3RyaW5nO1xuICAgIGxleF9kZWZhdWx0OiBzdHJpbmc7XG4gICAgbGV4X3RyYW5zOiBzdHJpbmc7XG4gICAgbGV4X2NoZWNrOiBzdHJpbmc7XG4gICAgbGV4X2Jhc2VfY29kZSA6IHN0cmluZztcbiAgICBsZXhfYmFja3Rya19jb2RlIDogc3RyaW5nO1xuICAgIGxleF9kZWZhdWx0X2NvZGUgOiBzdHJpbmc7XG4gICAgbGV4X3RyYW5zX2NvZGUgOiBzdHJpbmc7XG4gICAgbGV4X2NoZWNrX2NvZGUgOiBzdHJpbmc7XG4gICAgbGV4X2NvZGU6IHN0cmluZzt9XG5cbmV4dGVybmFsIGNfZW5naW5lIDogbGV4X3RhYmxlcyAtPiBpbnQgLT4gbGV4YnVmIC0+IGludCA9IFwiY2FtbF9sZXhfZW5naW5lXCJcbmV4dGVybmFsIGNfbmV3X2VuZ2luZSA6IGxleF90YWJsZXMgLT4gaW50IC0+IGxleGJ1ZiAtPiBpbnRcbiAgICAgICAgICAgICAgICAgICAgICA9IFwiY2FtbF9uZXdfbGV4X2VuZ2luZVwiXG5cbmxldCBlbmdpbmUgdGJsIHN0YXRlIGJ1ZiA9XG4gIGxldCByZXN1bHQgPSBjX2VuZ2luZSB0Ymwgc3RhdGUgYnVmIGluXG4gIGlmIHJlc3VsdCA+PSAwIHRoZW4gYmVnaW5cbiAgICBidWYubGV4X3N0YXJ0X3AgPC0gYnVmLmxleF9jdXJyX3A7XG4gICAgYnVmLmxleF9jdXJyX3AgPC0ge2J1Zi5sZXhfY3Vycl9wXG4gICAgICAgICAgICAgICAgICAgICAgIHdpdGggcG9zX2NudW0gPSBidWYubGV4X2Fic19wb3MgKyBidWYubGV4X2N1cnJfcG9zfTtcbiAgZW5kO1xuICByZXN1bHRcbjs7XG5cbmxldCBuZXdfZW5naW5lIHRibCBzdGF0ZSBidWYgPVxuICBsZXQgcmVzdWx0ID0gY19uZXdfZW5naW5lIHRibCBzdGF0ZSBidWYgaW5cbiAgaWYgcmVzdWx0ID49IDAgdGhlbiBiZWdpblxuICAgIGJ1Zi5sZXhfc3RhcnRfcCA8LSBidWYubGV4X2N1cnJfcDtcbiAgICBidWYubGV4X2N1cnJfcCA8LSB7YnVmLmxleF9jdXJyX3BcbiAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBwb3NfY251bSA9IGJ1Zi5sZXhfYWJzX3BvcyArIGJ1Zi5sZXhfY3Vycl9wb3N9O1xuICBlbmQ7XG4gIHJlc3VsdFxuOztcblxubGV0IGxleF9yZWZpbGwgcmVhZF9mdW4gYXV4X2J1ZmZlciBsZXhidWYgPVxuICBsZXQgcmVhZCA9XG4gICAgcmVhZF9mdW4gYXV4X2J1ZmZlciAoQnl0ZXMubGVuZ3RoIGF1eF9idWZmZXIpIGluXG4gIGxldCBuID1cbiAgICBpZiByZWFkID4gMFxuICAgIHRoZW4gcmVhZFxuICAgIGVsc2UgKGxleGJ1Zi5sZXhfZW9mX3JlYWNoZWQgPC0gdHJ1ZTsgMCkgaW5cbiAgKCogQ3VycmVudCBzdGF0ZSBvZiB0aGUgYnVmZmVyOlxuICAgICAgICA8LS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0+XG4gICAgICAgIHwgIGp1bmsgfCAgICAgIHZhbGlkIGRhdGEgICAgIHwgICBqdW5rICAgIHxcbiAgICAgICAgXiAgICAgICBeICAgICAgICAgICAgICAgICAgICAgXiAgICAgICAgICAgXlxuICAgICAgICAwICAgIHN0YXJ0X3BvcyAgICAgICAgICAgICBidWZmZXJfZW5kICAgIEJ5dGVzLmxlbmd0aCBidWZmZXJcbiAgKilcbiAgaWYgbGV4YnVmLmxleF9idWZmZXJfbGVuICsgbiA+IEJ5dGVzLmxlbmd0aCBsZXhidWYubGV4X2J1ZmZlciB0aGVuIGJlZ2luXG4gICAgKCogVGhlcmUgaXMgbm90IGVub3VnaCBzcGFjZSBhdCB0aGUgZW5kIG9mIHRoZSBidWZmZXIgKilcbiAgICBpZiBsZXhidWYubGV4X2J1ZmZlcl9sZW4gLSBsZXhidWYubGV4X3N0YXJ0X3BvcyArIG5cbiAgICAgICA8PSBCeXRlcy5sZW5ndGggbGV4YnVmLmxleF9idWZmZXJcbiAgICB0aGVuIGJlZ2luXG4gICAgICAoKiBCdXQgdGhlcmUgaXMgZW5vdWdoIHNwYWNlIGlmIHdlIHJlY2xhaW0gdGhlIGp1bmsgYXQgdGhlIGJlZ2lubmluZ1xuICAgICAgICAgb2YgdGhlIGJ1ZmZlciAqKVxuICAgICAgQnl0ZXMuYmxpdCBsZXhidWYubGV4X2J1ZmZlciBsZXhidWYubGV4X3N0YXJ0X3Bvc1xuICAgICAgICAgICAgICAgICAgbGV4YnVmLmxleF9idWZmZXIgMFxuICAgICAgICAgICAgICAgICAgKGxleGJ1Zi5sZXhfYnVmZmVyX2xlbiAtIGxleGJ1Zi5sZXhfc3RhcnRfcG9zKVxuICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICAoKiBXZSBtdXN0IGdyb3cgdGhlIGJ1ZmZlci4gIERvdWJsaW5nIGl0cyBzaXplIHdpbGwgcHJvdmlkZSBlbm91Z2hcbiAgICAgICAgIHNwYWNlIHNpbmNlIG4gPD0gU3RyaW5nLmxlbmd0aCBhdXhfYnVmZmVyIDw9IFN0cmluZy5sZW5ndGggYnVmZmVyLlxuICAgICAgICAgV2F0Y2ggb3V0IGZvciBzdHJpbmcgbGVuZ3RoIG92ZXJmbG93LCB0aG91Z2guICopXG4gICAgICBsZXQgbmV3bGVuID1cbiAgICAgICAgbWluICgyICogQnl0ZXMubGVuZ3RoIGxleGJ1Zi5sZXhfYnVmZmVyKSBTeXMubWF4X3N0cmluZ19sZW5ndGggaW5cbiAgICAgIGlmIGxleGJ1Zi5sZXhfYnVmZmVyX2xlbiAtIGxleGJ1Zi5sZXhfc3RhcnRfcG9zICsgbiA+IG5ld2xlblxuICAgICAgdGhlbiBmYWlsd2l0aCBcIkxleGluZy5sZXhfcmVmaWxsOiBjYW5ub3QgZ3JvdyBidWZmZXJcIjtcbiAgICAgIGxldCBuZXdidWYgPSBCeXRlcy5jcmVhdGUgbmV3bGVuIGluXG4gICAgICAoKiBDb3B5IHRoZSB2YWxpZCBkYXRhIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5ldyBidWZmZXIgKilcbiAgICAgIEJ5dGVzLmJsaXQgbGV4YnVmLmxleF9idWZmZXIgbGV4YnVmLmxleF9zdGFydF9wb3NcbiAgICAgICAgICAgICAgICAgIG5ld2J1ZiAwXG4gICAgICAgICAgICAgICAgICAobGV4YnVmLmxleF9idWZmZXJfbGVuIC0gbGV4YnVmLmxleF9zdGFydF9wb3MpO1xuICAgICAgbGV4YnVmLmxleF9idWZmZXIgPC0gbmV3YnVmXG4gICAgZW5kO1xuICAgICgqIFJlYWxsb2NhdGlvbiBvciBub3QsIHdlIGhhdmUgc2hpZnRlZCB0aGUgZGF0YSBsZWZ0IGJ5XG4gICAgICAgc3RhcnRfcG9zIGNoYXJhY3RlcnM7IHVwZGF0ZSB0aGUgcG9zaXRpb25zICopXG4gICAgbGV0IHMgPSBsZXhidWYubGV4X3N0YXJ0X3BvcyBpblxuICAgIGxleGJ1Zi5sZXhfYWJzX3BvcyA8LSBsZXhidWYubGV4X2Fic19wb3MgKyBzO1xuICAgIGxleGJ1Zi5sZXhfY3Vycl9wb3MgPC0gbGV4YnVmLmxleF9jdXJyX3BvcyAtIHM7XG4gICAgbGV4YnVmLmxleF9zdGFydF9wb3MgPC0gMDtcbiAgICBsZXhidWYubGV4X2xhc3RfcG9zIDwtIGxleGJ1Zi5sZXhfbGFzdF9wb3MgLSBzO1xuICAgIGxleGJ1Zi5sZXhfYnVmZmVyX2xlbiA8LSBsZXhidWYubGV4X2J1ZmZlcl9sZW4gLSBzIDtcbiAgICBsZXQgdCA9IGxleGJ1Zi5sZXhfbWVtIGluXG4gICAgZm9yIGkgPSAwIHRvIEFycmF5Lmxlbmd0aCB0LTEgZG9cbiAgICAgIGxldCB2ID0gdC4oaSkgaW5cbiAgICAgIGlmIHYgPj0gMCB0aGVuXG4gICAgICAgIHQuKGkpIDwtIHYtc1xuICAgIGRvbmVcbiAgZW5kO1xuICAoKiBUaGVyZSBpcyBub3cgZW5vdWdoIHNwYWNlIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciAqKVxuICBCeXRlcy5ibGl0IGF1eF9idWZmZXIgMCBsZXhidWYubGV4X2J1ZmZlciBsZXhidWYubGV4X2J1ZmZlcl9sZW4gbjtcbiAgbGV4YnVmLmxleF9idWZmZXJfbGVuIDwtIGxleGJ1Zi5sZXhfYnVmZmVyX2xlbiArIG5cblxubGV0IHplcm9fcG9zID0ge1xuICBwb3NfZm5hbWUgPSBcIlwiO1xuICBwb3NfbG51bSA9IDE7XG4gIHBvc19ib2wgPSAwO1xuICBwb3NfY251bSA9IDA7XG59OztcblxubGV0IGZyb21fZnVuY3Rpb24gZiA9XG4gIHsgcmVmaWxsX2J1ZmYgPSBsZXhfcmVmaWxsIGYgKEJ5dGVzLmNyZWF0ZSA1MTIpO1xuICAgIGxleF9idWZmZXIgPSBCeXRlcy5jcmVhdGUgMTAyNDtcbiAgICBsZXhfYnVmZmVyX2xlbiA9IDA7XG4gICAgbGV4X2Fic19wb3MgPSAwO1xuICAgIGxleF9zdGFydF9wb3MgPSAwO1xuICAgIGxleF9jdXJyX3BvcyA9IDA7XG4gICAgbGV4X2xhc3RfcG9zID0gMDtcbiAgICBsZXhfbGFzdF9hY3Rpb24gPSAwO1xuICAgIGxleF9tZW0gPSBbfHxdO1xuICAgIGxleF9lb2ZfcmVhY2hlZCA9IGZhbHNlO1xuICAgIGxleF9zdGFydF9wID0gemVyb19wb3M7XG4gICAgbGV4X2N1cnJfcCA9IHplcm9fcG9zO1xuICB9XG5cbmxldCBmcm9tX2NoYW5uZWwgaWMgPVxuICBmcm9tX2Z1bmN0aW9uIChmdW4gYnVmIG4gLT4gaW5wdXQgaWMgYnVmIDAgbilcblxubGV0IGZyb21fc3RyaW5nIHMgPVxuICB7IHJlZmlsbF9idWZmID0gKGZ1biBsZXhidWYgLT4gbGV4YnVmLmxleF9lb2ZfcmVhY2hlZCA8LSB0cnVlKTtcbiAgICBsZXhfYnVmZmVyID0gQnl0ZXMub2Zfc3RyaW5nIHM7ICgqIGhhdmUgdG8gbWFrZSBhIGNvcHkgZm9yIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdW5zYWZlLXN0cmluZyBtb2RlICopXG4gICAgbGV4X2J1ZmZlcl9sZW4gPSBTdHJpbmcubGVuZ3RoIHM7XG4gICAgbGV4X2Fic19wb3MgPSAwO1xuICAgIGxleF9zdGFydF9wb3MgPSAwO1xuICAgIGxleF9jdXJyX3BvcyA9IDA7XG4gICAgbGV4X2xhc3RfcG9zID0gMDtcbiAgICBsZXhfbGFzdF9hY3Rpb24gPSAwO1xuICAgIGxleF9tZW0gPSBbfHxdO1xuICAgIGxleF9lb2ZfcmVhY2hlZCA9IHRydWU7XG4gICAgbGV4X3N0YXJ0X3AgPSB6ZXJvX3BvcztcbiAgICBsZXhfY3Vycl9wID0gemVyb19wb3M7XG4gIH1cblxubGV0IGxleGVtZSBsZXhidWYgPVxuICBsZXQgbGVuID0gbGV4YnVmLmxleF9jdXJyX3BvcyAtIGxleGJ1Zi5sZXhfc3RhcnRfcG9zIGluXG4gIEJ5dGVzLnN1Yl9zdHJpbmcgbGV4YnVmLmxleF9idWZmZXIgbGV4YnVmLmxleF9zdGFydF9wb3MgbGVuXG5cbmxldCBzdWJfbGV4ZW1lIGxleGJ1ZiBpMSBpMiA9XG4gIGxldCBsZW4gPSBpMi1pMSBpblxuICBCeXRlcy5zdWJfc3RyaW5nIGxleGJ1Zi5sZXhfYnVmZmVyIGkxIGxlblxuXG5sZXQgc3ViX2xleGVtZV9vcHQgbGV4YnVmIGkxIGkyID1cbiAgaWYgaTEgPj0gMCB0aGVuIGJlZ2luXG4gICAgbGV0IGxlbiA9IGkyLWkxIGluXG4gICAgU29tZSAoQnl0ZXMuc3ViX3N0cmluZyBsZXhidWYubGV4X2J1ZmZlciBpMSBsZW4pXG4gIGVuZCBlbHNlIGJlZ2luXG4gICAgTm9uZVxuICBlbmRcblxubGV0IHN1Yl9sZXhlbWVfY2hhciBsZXhidWYgaSA9IEJ5dGVzLmdldCBsZXhidWYubGV4X2J1ZmZlciBpXG5cbmxldCBzdWJfbGV4ZW1lX2NoYXJfb3B0IGxleGJ1ZiBpID1cbiAgaWYgaSA+PSAwIHRoZW5cbiAgICBTb21lIChCeXRlcy5nZXQgbGV4YnVmLmxleF9idWZmZXIgaSlcbiAgZWxzZVxuICAgIE5vbmVcblxuXG5sZXQgbGV4ZW1lX2NoYXIgbGV4YnVmIGkgPVxuICBCeXRlcy5nZXQgbGV4YnVmLmxleF9idWZmZXIgKGxleGJ1Zi5sZXhfc3RhcnRfcG9zICsgaSlcblxubGV0IGxleGVtZV9zdGFydCBsZXhidWYgPSBsZXhidWYubGV4X3N0YXJ0X3AucG9zX2NudW07O1xubGV0IGxleGVtZV9lbmQgbGV4YnVmID0gbGV4YnVmLmxleF9jdXJyX3AucG9zX2NudW07O1xuXG5sZXQgbGV4ZW1lX3N0YXJ0X3AgbGV4YnVmID0gbGV4YnVmLmxleF9zdGFydF9wOztcbmxldCBsZXhlbWVfZW5kX3AgbGV4YnVmID0gbGV4YnVmLmxleF9jdXJyX3A7O1xuXG5sZXQgbmV3X2xpbmUgbGV4YnVmID1cbiAgbGV0IGxjcCA9IGxleGJ1Zi5sZXhfY3Vycl9wIGluXG4gIGxleGJ1Zi5sZXhfY3Vycl9wIDwtIHsgbGNwIHdpdGhcbiAgICBwb3NfbG51bSA9IGxjcC5wb3NfbG51bSArIDE7XG4gICAgcG9zX2JvbCA9IGxjcC5wb3NfY251bTtcbiAgfVxuOztcblxuXG4oKiBEaXNjYXJkIGRhdGEgbGVmdCBpbiBsZXhlciBidWZmZXIuICopXG5cbmxldCBmbHVzaF9pbnB1dCBsYiA9XG4gIGxiLmxleF9jdXJyX3BvcyA8LSAwO1xuICBsYi5sZXhfYWJzX3BvcyA8LSAwO1xuICBsYi5sZXhfY3Vycl9wIDwtIHtsYi5sZXhfY3Vycl9wIHdpdGggcG9zX2NudW0gPSAwfTtcbiAgbGIubGV4X2J1ZmZlcl9sZW4gPC0gMDtcbjs7XG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIFRoZSBwYXJzaW5nIGVuZ2luZSAqKVxuXG5vcGVuIExleGluZ1xuXG4oKiBJbnRlcm5hbCBpbnRlcmZhY2UgdG8gdGhlIHBhcnNpbmcgZW5naW5lICopXG5cbnR5cGUgcGFyc2VyX2VudiA9XG4gIHsgbXV0YWJsZSBzX3N0YWNrIDogaW50IGFycmF5OyAgICAgICAgKCogU3RhdGVzICopXG4gICAgbXV0YWJsZSB2X3N0YWNrIDogT2JqLnQgYXJyYXk7ICAgICAgKCogU2VtYW50aWMgYXR0cmlidXRlcyAqKVxuICAgIG11dGFibGUgc3ltYl9zdGFydF9zdGFjayA6IHBvc2l0aW9uIGFycmF5OyAoKiBTdGFydCBwb3NpdGlvbnMgKilcbiAgICBtdXRhYmxlIHN5bWJfZW5kX3N0YWNrIDogcG9zaXRpb24gYXJyYXk7ICAgKCogRW5kIHBvc2l0aW9ucyAqKVxuICAgIG11dGFibGUgc3RhY2tzaXplIDogaW50OyAgICAgICAgICAgICgqIFNpemUgb2YgdGhlIHN0YWNrcyAqKVxuICAgIG11dGFibGUgc3RhY2tiYXNlIDogaW50OyAgICAgICAgICAgICgqIEJhc2Ugc3AgZm9yIGN1cnJlbnQgcGFyc2UgKilcbiAgICBtdXRhYmxlIGN1cnJfY2hhciA6IGludDsgICAgICAgICAgICAoKiBMYXN0IHRva2VuIHJlYWQgKilcbiAgICBtdXRhYmxlIGx2YWwgOiBPYmoudDsgICAgICAgICAgICAgICAoKiBJdHMgc2VtYW50aWMgYXR0cmlidXRlICopXG4gICAgbXV0YWJsZSBzeW1iX3N0YXJ0IDogcG9zaXRpb247ICAgICAgKCogU3RhcnQgcG9zLiBvZiB0aGUgY3VycmVudCBzeW1ib2wqKVxuICAgIG11dGFibGUgc3ltYl9lbmQgOiBwb3NpdGlvbjsgICAgICAgICgqIEVuZCBwb3MuIG9mIHRoZSBjdXJyZW50IHN5bWJvbCAqKVxuICAgIG11dGFibGUgYXNwIDogaW50OyAgICAgICAgICAgICAgICAgICgqIFRoZSBzdGFjayBwb2ludGVyIGZvciBhdHRyaWJ1dGVzICopXG4gICAgbXV0YWJsZSBydWxlX2xlbiA6IGludDsgICAgICAgICAgICAgKCogTnVtYmVyIG9mIHJocyBpdGVtcyBpbiB0aGUgcnVsZSAqKVxuICAgIG11dGFibGUgcnVsZV9udW1iZXIgOiBpbnQ7ICAgICAgICAgICgqIFJ1bGUgbnVtYmVyIHRvIHJlZHVjZSBieSAqKVxuICAgIG11dGFibGUgc3AgOiBpbnQ7ICAgICAgICAgICAgICAgICAgICgqIFNhdmVkIHNwIGZvciBwYXJzZV9lbmdpbmUgKilcbiAgICBtdXRhYmxlIHN0YXRlIDogaW50OyAgICAgICAgICAgICAgICAoKiBTYXZlZCBzdGF0ZSBmb3IgcGFyc2VfZW5naW5lICopXG4gICAgbXV0YWJsZSBlcnJmbGFnIDogaW50IH0gICAgICAgICAgICAgKCogU2F2ZWQgZXJyb3IgZmxhZyBmb3IgcGFyc2VfZW5naW5lICopXG5cbnR5cGUgcGFyc2VfdGFibGVzID1cbiAgeyBhY3Rpb25zIDogKHBhcnNlcl9lbnYgLT4gT2JqLnQpIGFycmF5O1xuICAgIHRyYW5zbF9jb25zdCA6IGludCBhcnJheTtcbiAgICB0cmFuc2xfYmxvY2sgOiBpbnQgYXJyYXk7XG4gICAgbGhzIDogc3RyaW5nO1xuICAgIGxlbiA6IHN0cmluZztcbiAgICBkZWZyZWQgOiBzdHJpbmc7XG4gICAgZGdvdG8gOiBzdHJpbmc7XG4gICAgc2luZGV4IDogc3RyaW5nO1xuICAgIHJpbmRleCA6IHN0cmluZztcbiAgICBnaW5kZXggOiBzdHJpbmc7XG4gICAgdGFibGVzaXplIDogaW50O1xuICAgIHRhYmxlIDogc3RyaW5nO1xuICAgIGNoZWNrIDogc3RyaW5nO1xuICAgIGVycm9yX2Z1bmN0aW9uIDogc3RyaW5nIC0+IHVuaXQ7XG4gICAgbmFtZXNfY29uc3QgOiBzdHJpbmc7XG4gICAgbmFtZXNfYmxvY2sgOiBzdHJpbmcgfVxuXG5leGNlcHRpb24gWVlleGl0IG9mIE9iai50XG5leGNlcHRpb24gUGFyc2VfZXJyb3JcblxudHlwZSBwYXJzZXJfaW5wdXQgPVxuICAgIFN0YXJ0XG4gIHwgVG9rZW5fcmVhZFxuICB8IFN0YWNrc19ncm93bl8xXG4gIHwgU3RhY2tzX2dyb3duXzJcbiAgfCBTZW1hbnRpY19hY3Rpb25fY29tcHV0ZWRcbiAgfCBFcnJvcl9kZXRlY3RlZFxuXG50eXBlIHBhcnNlcl9vdXRwdXQgPVxuICAgIFJlYWRfdG9rZW5cbiAgfCBSYWlzZV9wYXJzZV9lcnJvclxuICB8IEdyb3dfc3RhY2tzXzFcbiAgfCBHcm93X3N0YWNrc18yXG4gIHwgQ29tcHV0ZV9zZW1hbnRpY19hY3Rpb25cbiAgfCBDYWxsX2Vycm9yX2Z1bmN0aW9uXG5cbigqIHRvIGF2b2lkIHdhcm5pbmdzICopXG5sZXQgXyA9IFtSZWFkX3Rva2VuOyBSYWlzZV9wYXJzZV9lcnJvcjsgR3Jvd19zdGFja3NfMTsgR3Jvd19zdGFja3NfMjtcbiAgICAgICAgIENvbXB1dGVfc2VtYW50aWNfYWN0aW9uOyBDYWxsX2Vycm9yX2Z1bmN0aW9uXVxuXG5leHRlcm5hbCBwYXJzZV9lbmdpbmUgOlxuICAgIHBhcnNlX3RhYmxlcyAtPiBwYXJzZXJfZW52IC0+IHBhcnNlcl9pbnB1dCAtPiBPYmoudCAtPiBwYXJzZXJfb3V0cHV0XG4gICAgPSBcImNhbWxfcGFyc2VfZW5naW5lXCJcblxuZXh0ZXJuYWwgc2V0X3RyYWNlOiBib29sIC0+IGJvb2xcbiAgICA9IFwiY2FtbF9zZXRfcGFyc2VyX3RyYWNlXCJcblxubGV0IGVudiA9XG4gIHsgc19zdGFjayA9IEFycmF5Lm1ha2UgMTAwIDA7XG4gICAgdl9zdGFjayA9IEFycmF5Lm1ha2UgMTAwIChPYmoucmVwciAoKSk7XG4gICAgc3ltYl9zdGFydF9zdGFjayA9IEFycmF5Lm1ha2UgMTAwIGR1bW15X3BvcztcbiAgICBzeW1iX2VuZF9zdGFjayA9IEFycmF5Lm1ha2UgMTAwIGR1bW15X3BvcztcbiAgICBzdGFja3NpemUgPSAxMDA7XG4gICAgc3RhY2tiYXNlID0gMDtcbiAgICBjdXJyX2NoYXIgPSAwO1xuICAgIGx2YWwgPSBPYmoucmVwciAoKTtcbiAgICBzeW1iX3N0YXJ0ID0gZHVtbXlfcG9zO1xuICAgIHN5bWJfZW5kID0gZHVtbXlfcG9zO1xuICAgIGFzcCA9IDA7XG4gICAgcnVsZV9sZW4gPSAwO1xuICAgIHJ1bGVfbnVtYmVyID0gMDtcbiAgICBzcCA9IDA7XG4gICAgc3RhdGUgPSAwO1xuICAgIGVycmZsYWcgPSAwIH1cblxubGV0IGdyb3dfc3RhY2tzKCkgPVxuICBsZXQgb2xkc2l6ZSA9IGVudi5zdGFja3NpemUgaW5cbiAgbGV0IG5ld3NpemUgPSBvbGRzaXplICogMiBpblxuICBsZXQgbmV3X3MgPSBBcnJheS5tYWtlIG5ld3NpemUgMFxuICBhbmQgbmV3X3YgPSBBcnJheS5tYWtlIG5ld3NpemUgKE9iai5yZXByICgpKVxuICBhbmQgbmV3X3N0YXJ0ID0gQXJyYXkubWFrZSBuZXdzaXplIGR1bW15X3Bvc1xuICBhbmQgbmV3X2VuZCA9IEFycmF5Lm1ha2UgbmV3c2l6ZSBkdW1teV9wb3MgaW5cbiAgICBBcnJheS5ibGl0IGVudi5zX3N0YWNrIDAgbmV3X3MgMCBvbGRzaXplO1xuICAgIGVudi5zX3N0YWNrIDwtIG5ld19zO1xuICAgIEFycmF5LmJsaXQgZW52LnZfc3RhY2sgMCBuZXdfdiAwIG9sZHNpemU7XG4gICAgZW52LnZfc3RhY2sgPC0gbmV3X3Y7XG4gICAgQXJyYXkuYmxpdCBlbnYuc3ltYl9zdGFydF9zdGFjayAwIG5ld19zdGFydCAwIG9sZHNpemU7XG4gICAgZW52LnN5bWJfc3RhcnRfc3RhY2sgPC0gbmV3X3N0YXJ0O1xuICAgIEFycmF5LmJsaXQgZW52LnN5bWJfZW5kX3N0YWNrIDAgbmV3X2VuZCAwIG9sZHNpemU7XG4gICAgZW52LnN5bWJfZW5kX3N0YWNrIDwtIG5ld19lbmQ7XG4gICAgZW52LnN0YWNrc2l6ZSA8LSBuZXdzaXplXG5cbmxldCBjbGVhcl9wYXJzZXIoKSA9XG4gIEFycmF5LmZpbGwgZW52LnZfc3RhY2sgMCBlbnYuc3RhY2tzaXplIChPYmoucmVwciAoKSk7XG4gIGVudi5sdmFsIDwtIE9iai5yZXByICgpXG5cbmxldCBjdXJyZW50X2xvb2thaGVhZF9mdW4gPSByZWYgKGZ1biAoeCA6IE9iai50KSAtPiBmYWxzZSlcblxubGV0IHl5cGFyc2UgdGFibGVzIHN0YXJ0IGxleGVyIGxleGJ1ZiA9XG4gIGxldCByZWMgbG9vcCBjbWQgYXJnID1cbiAgICBtYXRjaCBwYXJzZV9lbmdpbmUgdGFibGVzIGVudiBjbWQgYXJnIHdpdGhcbiAgICAgIFJlYWRfdG9rZW4gLT5cbiAgICAgICAgbGV0IHQgPSBPYmoucmVwcihsZXhlciBsZXhidWYpIGluXG4gICAgICAgIGVudi5zeW1iX3N0YXJ0IDwtIGxleGJ1Zi5sZXhfc3RhcnRfcDtcbiAgICAgICAgZW52LnN5bWJfZW5kIDwtIGxleGJ1Zi5sZXhfY3Vycl9wO1xuICAgICAgICBsb29wIFRva2VuX3JlYWQgdFxuICAgIHwgUmFpc2VfcGFyc2VfZXJyb3IgLT5cbiAgICAgICAgcmFpc2UgUGFyc2VfZXJyb3JcbiAgICB8IENvbXB1dGVfc2VtYW50aWNfYWN0aW9uIC0+XG4gICAgICAgIGxldCAoYWN0aW9uLCB2YWx1ZSkgPVxuICAgICAgICAgIHRyeVxuICAgICAgICAgICAgKFNlbWFudGljX2FjdGlvbl9jb21wdXRlZCwgdGFibGVzLmFjdGlvbnMuKGVudi5ydWxlX251bWJlcikgZW52KVxuICAgICAgICAgIHdpdGggUGFyc2VfZXJyb3IgLT5cbiAgICAgICAgICAgIChFcnJvcl9kZXRlY3RlZCwgT2JqLnJlcHIgKCkpIGluXG4gICAgICAgIGxvb3AgYWN0aW9uIHZhbHVlXG4gICAgfCBHcm93X3N0YWNrc18xIC0+XG4gICAgICAgIGdyb3dfc3RhY2tzKCk7IGxvb3AgU3RhY2tzX2dyb3duXzEgKE9iai5yZXByICgpKVxuICAgIHwgR3Jvd19zdGFja3NfMiAtPlxuICAgICAgICBncm93X3N0YWNrcygpOyBsb29wIFN0YWNrc19ncm93bl8yIChPYmoucmVwciAoKSlcbiAgICB8IENhbGxfZXJyb3JfZnVuY3Rpb24gLT5cbiAgICAgICAgdGFibGVzLmVycm9yX2Z1bmN0aW9uIFwic3ludGF4IGVycm9yXCI7XG4gICAgICAgIGxvb3AgRXJyb3JfZGV0ZWN0ZWQgKE9iai5yZXByICgpKSBpblxuICBsZXQgaW5pdF9hc3AgPSBlbnYuYXNwXG4gIGFuZCBpbml0X3NwID0gZW52LnNwXG4gIGFuZCBpbml0X3N0YWNrYmFzZSA9IGVudi5zdGFja2Jhc2VcbiAgYW5kIGluaXRfc3RhdGUgPSBlbnYuc3RhdGVcbiAgYW5kIGluaXRfY3Vycl9jaGFyID0gZW52LmN1cnJfY2hhclxuICBhbmQgaW5pdF9sdmFsID0gZW52Lmx2YWxcbiAgYW5kIGluaXRfZXJyZmxhZyA9IGVudi5lcnJmbGFnIGluXG4gIGVudi5zdGFja2Jhc2UgPC0gZW52LnNwICsgMTtcbiAgZW52LmN1cnJfY2hhciA8LSBzdGFydDtcbiAgZW52LnN5bWJfZW5kIDwtIGxleGJ1Zi5sZXhfY3Vycl9wO1xuICB0cnlcbiAgICBsb29wIFN0YXJ0IChPYmoucmVwciAoKSlcbiAgd2l0aCBleG4gLT5cbiAgICBsZXQgY3Vycl9jaGFyID0gZW52LmN1cnJfY2hhciBpblxuICAgIGVudi5hc3AgPC0gaW5pdF9hc3A7XG4gICAgZW52LnNwIDwtIGluaXRfc3A7XG4gICAgZW52LnN0YWNrYmFzZSA8LSBpbml0X3N0YWNrYmFzZTtcbiAgICBlbnYuc3RhdGUgPC0gaW5pdF9zdGF0ZTtcbiAgICBlbnYuY3Vycl9jaGFyIDwtIGluaXRfY3Vycl9jaGFyO1xuICAgIGVudi5sdmFsIDwtIGluaXRfbHZhbDtcbiAgICBlbnYuZXJyZmxhZyA8LSBpbml0X2VycmZsYWc7XG4gICAgbWF0Y2ggZXhuIHdpdGhcbiAgICAgIFlZZXhpdCB2IC0+XG4gICAgICAgIE9iai5tYWdpYyB2XG4gICAgfCBfIC0+XG4gICAgICAgIGN1cnJlbnRfbG9va2FoZWFkX2Z1biA6PVxuICAgICAgICAgIChmdW4gdG9rIC0+XG4gICAgICAgICAgICBpZiBPYmouaXNfYmxvY2sgdG9rXG4gICAgICAgICAgICB0aGVuIHRhYmxlcy50cmFuc2xfYmxvY2suKE9iai50YWcgdG9rKSA9IGN1cnJfY2hhclxuICAgICAgICAgICAgZWxzZSB0YWJsZXMudHJhbnNsX2NvbnN0LihPYmoubWFnaWMgdG9rKSA9IGN1cnJfY2hhcik7XG4gICAgICAgIHJhaXNlIGV4blxuXG5sZXQgcGVla192YWwgZW52IG4gPVxuICBPYmoubWFnaWMgZW52LnZfc3RhY2suKGVudi5hc3AgLSBuKVxuXG5sZXQgc3ltYm9sX3N0YXJ0X3BvcyAoKSA9XG4gIGxldCByZWMgbG9vcCBpID1cbiAgICBpZiBpIDw9IDAgdGhlbiBlbnYuc3ltYl9lbmRfc3RhY2suKGVudi5hc3ApXG4gICAgZWxzZSBiZWdpblxuICAgICAgbGV0IHN0ID0gZW52LnN5bWJfc3RhcnRfc3RhY2suKGVudi5hc3AgLSBpICsgMSkgaW5cbiAgICAgIGxldCBlbiA9IGVudi5zeW1iX2VuZF9zdGFjay4oZW52LmFzcCAtIGkgKyAxKSBpblxuICAgICAgaWYgc3QgPD4gZW4gdGhlbiBzdCBlbHNlIGxvb3AgKGkgLSAxKVxuICAgIGVuZFxuICBpblxuICBsb29wIGVudi5ydWxlX2xlblxuOztcbmxldCBzeW1ib2xfZW5kX3BvcyAoKSA9IGVudi5zeW1iX2VuZF9zdGFjay4oZW52LmFzcCk7O1xubGV0IHJoc19zdGFydF9wb3MgbiA9IGVudi5zeW1iX3N0YXJ0X3N0YWNrLihlbnYuYXNwIC0gKGVudi5ydWxlX2xlbiAtIG4pKTs7XG5sZXQgcmhzX2VuZF9wb3MgbiA9IGVudi5zeW1iX2VuZF9zdGFjay4oZW52LmFzcCAtIChlbnYucnVsZV9sZW4gLSBuKSk7O1xuXG5sZXQgc3ltYm9sX3N0YXJ0ICgpID0gKHN5bWJvbF9zdGFydF9wb3MgKCkpLnBvc19jbnVtOztcbmxldCBzeW1ib2xfZW5kICgpID0gKHN5bWJvbF9lbmRfcG9zICgpKS5wb3NfY251bTs7XG5sZXQgcmhzX3N0YXJ0IG4gPSAocmhzX3N0YXJ0X3BvcyBuKS5wb3NfY251bTs7XG5sZXQgcmhzX2VuZCBuID0gKHJoc19lbmRfcG9zIG4pLnBvc19jbnVtOztcblxubGV0IGlzX2N1cnJlbnRfbG9va2FoZWFkIHRvayA9XG4gICghY3VycmVudF9sb29rYWhlYWRfZnVuKShPYmoucmVwciB0b2spXG5cbmxldCBwYXJzZV9lcnJvciAobXNnIDogc3RyaW5nKSA9ICgpXG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIFNldHMgb3ZlciBvcmRlcmVkIHR5cGVzICopXG5cbm1vZHVsZSB0eXBlIE9yZGVyZWRUeXBlID1cbiAgc2lnXG4gICAgdHlwZSB0XG4gICAgdmFsIGNvbXBhcmU6IHQgLT4gdCAtPiBpbnRcbiAgZW5kXG5cbm1vZHVsZSB0eXBlIFMgPVxuICBzaWdcbiAgICB0eXBlIGVsdFxuICAgIHR5cGUgdFxuICAgIHZhbCBlbXB0eTogdFxuICAgIHZhbCBpc19lbXB0eTogdCAtPiBib29sXG4gICAgdmFsIG1lbTogZWx0IC0+IHQgLT4gYm9vbFxuICAgIHZhbCBhZGQ6IGVsdCAtPiB0IC0+IHRcbiAgICB2YWwgc2luZ2xldG9uOiBlbHQgLT4gdFxuICAgIHZhbCByZW1vdmU6IGVsdCAtPiB0IC0+IHRcbiAgICB2YWwgdW5pb246IHQgLT4gdCAtPiB0XG4gICAgdmFsIGludGVyOiB0IC0+IHQgLT4gdFxuICAgIHZhbCBkaWZmOiB0IC0+IHQgLT4gdFxuICAgIHZhbCBjb21wYXJlOiB0IC0+IHQgLT4gaW50XG4gICAgdmFsIGVxdWFsOiB0IC0+IHQgLT4gYm9vbFxuICAgIHZhbCBzdWJzZXQ6IHQgLT4gdCAtPiBib29sXG4gICAgdmFsIGl0ZXI6IChlbHQgLT4gdW5pdCkgLT4gdCAtPiB1bml0XG4gICAgdmFsIGZvbGQ6IChlbHQgLT4gJ2EgLT4gJ2EpIC0+IHQgLT4gJ2EgLT4gJ2FcbiAgICB2YWwgZm9yX2FsbDogKGVsdCAtPiBib29sKSAtPiB0IC0+IGJvb2xcbiAgICB2YWwgZXhpc3RzOiAoZWx0IC0+IGJvb2wpIC0+IHQgLT4gYm9vbFxuICAgIHZhbCBmaWx0ZXI6IChlbHQgLT4gYm9vbCkgLT4gdCAtPiB0XG4gICAgdmFsIHBhcnRpdGlvbjogKGVsdCAtPiBib29sKSAtPiB0IC0+IHQgKiB0XG4gICAgdmFsIGNhcmRpbmFsOiB0IC0+IGludFxuICAgIHZhbCBlbGVtZW50czogdCAtPiBlbHQgbGlzdFxuICAgIHZhbCBtaW5fZWx0OiB0IC0+IGVsdFxuICAgIHZhbCBtYXhfZWx0OiB0IC0+IGVsdFxuICAgIHZhbCBjaG9vc2U6IHQgLT4gZWx0XG4gICAgdmFsIHNwbGl0OiBlbHQgLT4gdCAtPiB0ICogYm9vbCAqIHRcbiAgICB2YWwgZmluZDogZWx0IC0+IHQgLT4gZWx0XG4gICAgdmFsIG9mX2xpc3Q6IGVsdCBsaXN0IC0+IHRcbiAgZW5kXG5cbm1vZHVsZSBNYWtlKE9yZDogT3JkZXJlZFR5cGUpID1cbiAgc3RydWN0XG4gICAgdHlwZSBlbHQgPSBPcmQudFxuICAgIHR5cGUgdCA9IEVtcHR5IHwgTm9kZSBvZiB0ICogZWx0ICogdCAqIGludFxuXG4gICAgKCogU2V0cyBhcmUgcmVwcmVzZW50ZWQgYnkgYmFsYW5jZWQgYmluYXJ5IHRyZWVzICh0aGUgaGVpZ2h0cyBvZiB0aGVcbiAgICAgICBjaGlsZHJlbiBkaWZmZXIgYnkgYXQgbW9zdCAyICopXG5cbiAgICBsZXQgaGVpZ2h0ID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gMFxuICAgICAgfCBOb2RlKF8sIF8sIF8sIGgpIC0+IGhcblxuICAgICgqIENyZWF0ZXMgYSBuZXcgbm9kZSB3aXRoIGxlZnQgc29uIGwsIHZhbHVlIHYgYW5kIHJpZ2h0IHNvbiByLlxuICAgICAgIFdlIG11c3QgaGF2ZSBhbGwgZWxlbWVudHMgb2YgbCA8IHYgPCBhbGwgZWxlbWVudHMgb2Ygci5cbiAgICAgICBsIGFuZCByIG11c3QgYmUgYmFsYW5jZWQgYW5kIHwgaGVpZ2h0IGwgLSBoZWlnaHQgciB8IDw9IDIuXG4gICAgICAgSW5saW5lIGV4cGFuc2lvbiBvZiBoZWlnaHQgZm9yIGJldHRlciBzcGVlZC4gKilcblxuICAgIGxldCBjcmVhdGUgbCB2IHIgPVxuICAgICAgbGV0IGhsID0gbWF0Y2ggbCB3aXRoIEVtcHR5IC0+IDAgfCBOb2RlKF8sXyxfLGgpIC0+IGggaW5cbiAgICAgIGxldCBociA9IG1hdGNoIHIgd2l0aCBFbXB0eSAtPiAwIHwgTm9kZShfLF8sXyxoKSAtPiBoIGluXG4gICAgICBOb2RlKGwsIHYsIHIsIChpZiBobCA+PSBociB0aGVuIGhsICsgMSBlbHNlIGhyICsgMSkpXG5cbiAgICAoKiBTYW1lIGFzIGNyZWF0ZSwgYnV0IHBlcmZvcm1zIG9uZSBzdGVwIG9mIHJlYmFsYW5jaW5nIGlmIG5lY2Vzc2FyeS5cbiAgICAgICBBc3N1bWVzIGwgYW5kIHIgYmFsYW5jZWQgYW5kIHwgaGVpZ2h0IGwgLSBoZWlnaHQgciB8IDw9IDMuXG4gICAgICAgSW5saW5lIGV4cGFuc2lvbiBvZiBjcmVhdGUgZm9yIGJldHRlciBzcGVlZCBpbiB0aGUgbW9zdCBmcmVxdWVudCBjYXNlXG4gICAgICAgd2hlcmUgbm8gcmViYWxhbmNpbmcgaXMgcmVxdWlyZWQuICopXG5cbiAgICBsZXQgYmFsIGwgdiByID1cbiAgICAgIGxldCBobCA9IG1hdGNoIGwgd2l0aCBFbXB0eSAtPiAwIHwgTm9kZShfLF8sXyxoKSAtPiBoIGluXG4gICAgICBsZXQgaHIgPSBtYXRjaCByIHdpdGggRW1wdHkgLT4gMCB8IE5vZGUoXyxfLF8saCkgLT4gaCBpblxuICAgICAgaWYgaGwgPiBociArIDIgdGhlbiBiZWdpblxuICAgICAgICBtYXRjaCBsIHdpdGhcbiAgICAgICAgICBFbXB0eSAtPiBpbnZhbGlkX2FyZyBcIlNldC5iYWxcIlxuICAgICAgICB8IE5vZGUobGwsIGx2LCBsciwgXykgLT5cbiAgICAgICAgICAgIGlmIGhlaWdodCBsbCA+PSBoZWlnaHQgbHIgdGhlblxuICAgICAgICAgICAgICBjcmVhdGUgbGwgbHYgKGNyZWF0ZSBsciB2IHIpXG4gICAgICAgICAgICBlbHNlIGJlZ2luXG4gICAgICAgICAgICAgIG1hdGNoIGxyIHdpdGhcbiAgICAgICAgICAgICAgICBFbXB0eSAtPiBpbnZhbGlkX2FyZyBcIlNldC5iYWxcIlxuICAgICAgICAgICAgICB8IE5vZGUobHJsLCBscnYsIGxyciwgXyktPlxuICAgICAgICAgICAgICAgICAgY3JlYXRlIChjcmVhdGUgbGwgbHYgbHJsKSBscnYgKGNyZWF0ZSBscnIgdiByKVxuICAgICAgICAgICAgZW5kXG4gICAgICBlbmQgZWxzZSBpZiBociA+IGhsICsgMiB0aGVuIGJlZ2luXG4gICAgICAgIG1hdGNoIHIgd2l0aFxuICAgICAgICAgIEVtcHR5IC0+IGludmFsaWRfYXJnIFwiU2V0LmJhbFwiXG4gICAgICAgIHwgTm9kZShybCwgcnYsIHJyLCBfKSAtPlxuICAgICAgICAgICAgaWYgaGVpZ2h0IHJyID49IGhlaWdodCBybCB0aGVuXG4gICAgICAgICAgICAgIGNyZWF0ZSAoY3JlYXRlIGwgdiBybCkgcnYgcnJcbiAgICAgICAgICAgIGVsc2UgYmVnaW5cbiAgICAgICAgICAgICAgbWF0Y2ggcmwgd2l0aFxuICAgICAgICAgICAgICAgIEVtcHR5IC0+IGludmFsaWRfYXJnIFwiU2V0LmJhbFwiXG4gICAgICAgICAgICAgIHwgTm9kZShybGwsIHJsdiwgcmxyLCBfKSAtPlxuICAgICAgICAgICAgICAgICAgY3JlYXRlIChjcmVhdGUgbCB2IHJsbCkgcmx2IChjcmVhdGUgcmxyIHJ2IHJyKVxuICAgICAgICAgICAgZW5kXG4gICAgICBlbmQgZWxzZVxuICAgICAgICBOb2RlKGwsIHYsIHIsIChpZiBobCA+PSBociB0aGVuIGhsICsgMSBlbHNlIGhyICsgMSkpXG5cbiAgICAoKiBJbnNlcnRpb24gb2Ygb25lIGVsZW1lbnQgKilcblxuICAgIGxldCByZWMgYWRkIHggPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiBOb2RlKEVtcHR5LCB4LCBFbXB0eSwgMSlcbiAgICAgIHwgTm9kZShsLCB2LCByLCBfKSBhcyB0IC0+XG4gICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB4IHYgaW5cbiAgICAgICAgICBpZiBjID0gMCB0aGVuIHQgZWxzZVxuICAgICAgICAgIGlmIGMgPCAwIHRoZW4gYmFsIChhZGQgeCBsKSB2IHIgZWxzZSBiYWwgbCB2IChhZGQgeCByKVxuXG4gICAgbGV0IHNpbmdsZXRvbiB4ID0gTm9kZShFbXB0eSwgeCwgRW1wdHksIDEpXG5cbiAgICAoKiBCZXdhcmU6IHRob3NlIHR3byBmdW5jdGlvbnMgYXNzdW1lIHRoYXQgdGhlIGFkZGVkIHYgaXMgKnN0cmljdGx5KlxuICAgICAgIHNtYWxsZXIgKG9yIGJpZ2dlcikgdGhhbiBhbGwgdGhlIHByZXNlbnQgZWxlbWVudHMgaW4gdGhlIHRyZWU7IGl0XG4gICAgICAgZG9lcyBub3QgdGVzdCBmb3IgZXF1YWxpdHkgd2l0aCB0aGUgY3VycmVudCBtaW4gKG9yIG1heCkgZWxlbWVudC5cbiAgICAgICBJbmRlZWQsIHRoZXkgYXJlIG9ubHkgdXNlZCBkdXJpbmcgdGhlIFwiam9pblwiIG9wZXJhdGlvbiB3aGljaFxuICAgICAgIHJlc3BlY3RzIHRoaXMgcHJlY29uZGl0aW9uLlxuICAgICopXG5cbiAgICBsZXQgcmVjIGFkZF9taW5fZWxlbWVudCB2ID0gZnVuY3Rpb25cbiAgICAgIHwgRW1wdHkgLT4gc2luZ2xldG9uIHZcbiAgICAgIHwgTm9kZSAobCwgeCwgciwgaCkgLT5cbiAgICAgICAgYmFsIChhZGRfbWluX2VsZW1lbnQgdiBsKSB4IHJcblxuICAgIGxldCByZWMgYWRkX21heF9lbGVtZW50IHYgPSBmdW5jdGlvblxuICAgICAgfCBFbXB0eSAtPiBzaW5nbGV0b24gdlxuICAgICAgfCBOb2RlIChsLCB4LCByLCBoKSAtPlxuICAgICAgICBiYWwgbCB4IChhZGRfbWF4X2VsZW1lbnQgdiByKVxuXG4gICAgKCogU2FtZSBhcyBjcmVhdGUgYW5kIGJhbCwgYnV0IG5vIGFzc3VtcHRpb25zIGFyZSBtYWRlIG9uIHRoZVxuICAgICAgIHJlbGF0aXZlIGhlaWdodHMgb2YgbCBhbmQgci4gKilcblxuICAgIGxldCByZWMgam9pbiBsIHYgciA9XG4gICAgICBtYXRjaCAobCwgcikgd2l0aFxuICAgICAgICAoRW1wdHksIF8pIC0+IGFkZF9taW5fZWxlbWVudCB2IHJcbiAgICAgIHwgKF8sIEVtcHR5KSAtPiBhZGRfbWF4X2VsZW1lbnQgdiBsXG4gICAgICB8IChOb2RlKGxsLCBsdiwgbHIsIGxoKSwgTm9kZShybCwgcnYsIHJyLCByaCkpIC0+XG4gICAgICAgICAgaWYgbGggPiByaCArIDIgdGhlbiBiYWwgbGwgbHYgKGpvaW4gbHIgdiByKSBlbHNlXG4gICAgICAgICAgaWYgcmggPiBsaCArIDIgdGhlbiBiYWwgKGpvaW4gbCB2IHJsKSBydiByciBlbHNlXG4gICAgICAgICAgY3JlYXRlIGwgdiByXG5cbiAgICAoKiBTbWFsbGVzdCBhbmQgZ3JlYXRlc3QgZWxlbWVudCBvZiBhIHNldCAqKVxuXG4gICAgbGV0IHJlYyBtaW5fZWx0ID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gcmFpc2UgTm90X2ZvdW5kXG4gICAgICB8IE5vZGUoRW1wdHksIHYsIHIsIF8pIC0+IHZcbiAgICAgIHwgTm9kZShsLCB2LCByLCBfKSAtPiBtaW5fZWx0IGxcblxuICAgIGxldCByZWMgbWF4X2VsdCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IHJhaXNlIE5vdF9mb3VuZFxuICAgICAgfCBOb2RlKGwsIHYsIEVtcHR5LCBfKSAtPiB2XG4gICAgICB8IE5vZGUobCwgdiwgciwgXykgLT4gbWF4X2VsdCByXG5cbiAgICAoKiBSZW1vdmUgdGhlIHNtYWxsZXN0IGVsZW1lbnQgb2YgdGhlIGdpdmVuIHNldCAqKVxuXG4gICAgbGV0IHJlYyByZW1vdmVfbWluX2VsdCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IGludmFsaWRfYXJnIFwiU2V0LnJlbW92ZV9taW5fZWx0XCJcbiAgICAgIHwgTm9kZShFbXB0eSwgdiwgciwgXykgLT4gclxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+IGJhbCAocmVtb3ZlX21pbl9lbHQgbCkgdiByXG5cbiAgICAoKiBNZXJnZSB0d28gdHJlZXMgbCBhbmQgciBpbnRvIG9uZS5cbiAgICAgICBBbGwgZWxlbWVudHMgb2YgbCBtdXN0IHByZWNlZGUgdGhlIGVsZW1lbnRzIG9mIHIuXG4gICAgICAgQXNzdW1lIHwgaGVpZ2h0IGwgLSBoZWlnaHQgciB8IDw9IDIuICopXG5cbiAgICBsZXQgbWVyZ2UgdDEgdDIgPVxuICAgICAgbWF0Y2ggKHQxLCB0Mikgd2l0aFxuICAgICAgICAoRW1wdHksIHQpIC0+IHRcbiAgICAgIHwgKHQsIEVtcHR5KSAtPiB0XG4gICAgICB8IChfLCBfKSAtPiBiYWwgdDEgKG1pbl9lbHQgdDIpIChyZW1vdmVfbWluX2VsdCB0MilcblxuICAgICgqIE1lcmdlIHR3byB0cmVlcyBsIGFuZCByIGludG8gb25lLlxuICAgICAgIEFsbCBlbGVtZW50cyBvZiBsIG11c3QgcHJlY2VkZSB0aGUgZWxlbWVudHMgb2Ygci5cbiAgICAgICBObyBhc3N1bXB0aW9uIG9uIHRoZSBoZWlnaHRzIG9mIGwgYW5kIHIuICopXG5cbiAgICBsZXQgY29uY2F0IHQxIHQyID1cbiAgICAgIG1hdGNoICh0MSwgdDIpIHdpdGhcbiAgICAgICAgKEVtcHR5LCB0KSAtPiB0XG4gICAgICB8ICh0LCBFbXB0eSkgLT4gdFxuICAgICAgfCAoXywgXykgLT4gam9pbiB0MSAobWluX2VsdCB0MikgKHJlbW92ZV9taW5fZWx0IHQyKVxuXG4gICAgKCogU3BsaXR0aW5nLiAgc3BsaXQgeCBzIHJldHVybnMgYSB0cmlwbGUgKGwsIHByZXNlbnQsIHIpIHdoZXJlXG4gICAgICAgIC0gbCBpcyB0aGUgc2V0IG9mIGVsZW1lbnRzIG9mIHMgdGhhdCBhcmUgPCB4XG4gICAgICAgIC0gciBpcyB0aGUgc2V0IG9mIGVsZW1lbnRzIG9mIHMgdGhhdCBhcmUgPiB4XG4gICAgICAgIC0gcHJlc2VudCBpcyBmYWxzZSBpZiBzIGNvbnRhaW5zIG5vIGVsZW1lbnQgZXF1YWwgdG8geCxcbiAgICAgICAgICBvciB0cnVlIGlmIHMgY29udGFpbnMgYW4gZWxlbWVudCBlcXVhbCB0byB4LiAqKVxuXG4gICAgbGV0IHJlYyBzcGxpdCB4ID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT5cbiAgICAgICAgICAoRW1wdHksIGZhbHNlLCBFbXB0eSlcbiAgICAgIHwgTm9kZShsLCB2LCByLCBfKSAtPlxuICAgICAgICAgIGxldCBjID0gT3JkLmNvbXBhcmUgeCB2IGluXG4gICAgICAgICAgaWYgYyA9IDAgdGhlbiAobCwgdHJ1ZSwgcilcbiAgICAgICAgICBlbHNlIGlmIGMgPCAwIHRoZW5cbiAgICAgICAgICAgIGxldCAobGwsIHByZXMsIHJsKSA9IHNwbGl0IHggbCBpbiAobGwsIHByZXMsIGpvaW4gcmwgdiByKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxldCAobHIsIHByZXMsIHJyKSA9IHNwbGl0IHggciBpbiAoam9pbiBsIHYgbHIsIHByZXMsIHJyKVxuXG4gICAgKCogSW1wbGVtZW50YXRpb24gb2YgdGhlIHNldCBvcGVyYXRpb25zICopXG5cbiAgICBsZXQgZW1wdHkgPSBFbXB0eVxuXG4gICAgbGV0IGlzX2VtcHR5ID0gZnVuY3Rpb24gRW1wdHkgLT4gdHJ1ZSB8IF8gLT4gZmFsc2VcblxuICAgIGxldCByZWMgbWVtIHggPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiBmYWxzZVxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+XG4gICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB4IHYgaW5cbiAgICAgICAgICBjID0gMCB8fCBtZW0geCAoaWYgYyA8IDAgdGhlbiBsIGVsc2UgcilcblxuICAgIGxldCByZWMgcmVtb3ZlIHggPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiBFbXB0eVxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+XG4gICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB4IHYgaW5cbiAgICAgICAgICBpZiBjID0gMCB0aGVuIG1lcmdlIGwgciBlbHNlXG4gICAgICAgICAgaWYgYyA8IDAgdGhlbiBiYWwgKHJlbW92ZSB4IGwpIHYgciBlbHNlIGJhbCBsIHYgKHJlbW92ZSB4IHIpXG5cbiAgICBsZXQgcmVjIHVuaW9uIHMxIHMyID1cbiAgICAgIG1hdGNoIChzMSwgczIpIHdpdGhcbiAgICAgICAgKEVtcHR5LCB0MikgLT4gdDJcbiAgICAgIHwgKHQxLCBFbXB0eSkgLT4gdDFcbiAgICAgIHwgKE5vZGUobDEsIHYxLCByMSwgaDEpLCBOb2RlKGwyLCB2MiwgcjIsIGgyKSkgLT5cbiAgICAgICAgICBpZiBoMSA+PSBoMiB0aGVuXG4gICAgICAgICAgICBpZiBoMiA9IDEgdGhlbiBhZGQgdjIgczEgZWxzZSBiZWdpblxuICAgICAgICAgICAgICBsZXQgKGwyLCBfLCByMikgPSBzcGxpdCB2MSBzMiBpblxuICAgICAgICAgICAgICBqb2luICh1bmlvbiBsMSBsMikgdjEgKHVuaW9uIHIxIHIyKVxuICAgICAgICAgICAgZW5kXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgaWYgaDEgPSAxIHRoZW4gYWRkIHYxIHMyIGVsc2UgYmVnaW5cbiAgICAgICAgICAgICAgbGV0IChsMSwgXywgcjEpID0gc3BsaXQgdjIgczEgaW5cbiAgICAgICAgICAgICAgam9pbiAodW5pb24gbDEgbDIpIHYyICh1bmlvbiByMSByMilcbiAgICAgICAgICAgIGVuZFxuXG4gICAgbGV0IHJlYyBpbnRlciBzMSBzMiA9XG4gICAgICBtYXRjaCAoczEsIHMyKSB3aXRoXG4gICAgICAgIChFbXB0eSwgdDIpIC0+IEVtcHR5XG4gICAgICB8ICh0MSwgRW1wdHkpIC0+IEVtcHR5XG4gICAgICB8IChOb2RlKGwxLCB2MSwgcjEsIF8pLCB0MikgLT5cbiAgICAgICAgICBtYXRjaCBzcGxpdCB2MSB0MiB3aXRoXG4gICAgICAgICAgICAobDIsIGZhbHNlLCByMikgLT5cbiAgICAgICAgICAgICAgY29uY2F0IChpbnRlciBsMSBsMikgKGludGVyIHIxIHIyKVxuICAgICAgICAgIHwgKGwyLCB0cnVlLCByMikgLT5cbiAgICAgICAgICAgICAgam9pbiAoaW50ZXIgbDEgbDIpIHYxIChpbnRlciByMSByMilcblxuICAgIGxldCByZWMgZGlmZiBzMSBzMiA9XG4gICAgICBtYXRjaCAoczEsIHMyKSB3aXRoXG4gICAgICAgIChFbXB0eSwgdDIpIC0+IEVtcHR5XG4gICAgICB8ICh0MSwgRW1wdHkpIC0+IHQxXG4gICAgICB8IChOb2RlKGwxLCB2MSwgcjEsIF8pLCB0MikgLT5cbiAgICAgICAgICBtYXRjaCBzcGxpdCB2MSB0MiB3aXRoXG4gICAgICAgICAgICAobDIsIGZhbHNlLCByMikgLT5cbiAgICAgICAgICAgICAgam9pbiAoZGlmZiBsMSBsMikgdjEgKGRpZmYgcjEgcjIpXG4gICAgICAgICAgfCAobDIsIHRydWUsIHIyKSAtPlxuICAgICAgICAgICAgICBjb25jYXQgKGRpZmYgbDEgbDIpIChkaWZmIHIxIHIyKVxuXG4gICAgdHlwZSBlbnVtZXJhdGlvbiA9IEVuZCB8IE1vcmUgb2YgZWx0ICogdCAqIGVudW1lcmF0aW9uXG5cbiAgICBsZXQgcmVjIGNvbnNfZW51bSBzIGUgPVxuICAgICAgbWF0Y2ggcyB3aXRoXG4gICAgICAgIEVtcHR5IC0+IGVcbiAgICAgIHwgTm9kZShsLCB2LCByLCBfKSAtPiBjb25zX2VudW0gbCAoTW9yZSh2LCByLCBlKSlcblxuICAgIGxldCByZWMgY29tcGFyZV9hdXggZTEgZTIgPVxuICAgICAgICBtYXRjaCAoZTEsIGUyKSB3aXRoXG4gICAgICAgIChFbmQsIEVuZCkgLT4gMFxuICAgICAgfCAoRW5kLCBfKSAgLT4gLTFcbiAgICAgIHwgKF8sIEVuZCkgLT4gMVxuICAgICAgfCAoTW9yZSh2MSwgcjEsIGUxKSwgTW9yZSh2MiwgcjIsIGUyKSkgLT5cbiAgICAgICAgICBsZXQgYyA9IE9yZC5jb21wYXJlIHYxIHYyIGluXG4gICAgICAgICAgaWYgYyA8PiAwXG4gICAgICAgICAgdGhlbiBjXG4gICAgICAgICAgZWxzZSBjb21wYXJlX2F1eCAoY29uc19lbnVtIHIxIGUxKSAoY29uc19lbnVtIHIyIGUyKVxuXG4gICAgbGV0IGNvbXBhcmUgczEgczIgPVxuICAgICAgY29tcGFyZV9hdXggKGNvbnNfZW51bSBzMSBFbmQpIChjb25zX2VudW0gczIgRW5kKVxuXG4gICAgbGV0IGVxdWFsIHMxIHMyID1cbiAgICAgIGNvbXBhcmUgczEgczIgPSAwXG5cbiAgICBsZXQgcmVjIHN1YnNldCBzMSBzMiA9XG4gICAgICBtYXRjaCAoczEsIHMyKSB3aXRoXG4gICAgICAgIEVtcHR5LCBfIC0+XG4gICAgICAgICAgdHJ1ZVxuICAgICAgfCBfLCBFbXB0eSAtPlxuICAgICAgICAgIGZhbHNlXG4gICAgICB8IE5vZGUgKGwxLCB2MSwgcjEsIF8pLCAoTm9kZSAobDIsIHYyLCByMiwgXykgYXMgdDIpIC0+XG4gICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB2MSB2MiBpblxuICAgICAgICAgIGlmIGMgPSAwIHRoZW5cbiAgICAgICAgICAgIHN1YnNldCBsMSBsMiAmJiBzdWJzZXQgcjEgcjJcbiAgICAgICAgICBlbHNlIGlmIGMgPCAwIHRoZW5cbiAgICAgICAgICAgIHN1YnNldCAoTm9kZSAobDEsIHYxLCBFbXB0eSwgMCkpIGwyICYmIHN1YnNldCByMSB0MlxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHN1YnNldCAoTm9kZSAoRW1wdHksIHYxLCByMSwgMCkpIHIyICYmIHN1YnNldCBsMSB0MlxuXG4gICAgbGV0IHJlYyBpdGVyIGYgPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiAoKVxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+IGl0ZXIgZiBsOyBmIHY7IGl0ZXIgZiByXG5cbiAgICBsZXQgcmVjIGZvbGQgZiBzIGFjY3UgPVxuICAgICAgbWF0Y2ggcyB3aXRoXG4gICAgICAgIEVtcHR5IC0+IGFjY3VcbiAgICAgIHwgTm9kZShsLCB2LCByLCBfKSAtPiBmb2xkIGYgciAoZiB2IChmb2xkIGYgbCBhY2N1KSlcblxuICAgIGxldCByZWMgZm9yX2FsbCBwID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gdHJ1ZVxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+IHAgdiAmJiBmb3JfYWxsIHAgbCAmJiBmb3JfYWxsIHAgclxuXG4gICAgbGV0IHJlYyBleGlzdHMgcCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IGZhbHNlXG4gICAgICB8IE5vZGUobCwgdiwgciwgXykgLT4gcCB2IHx8IGV4aXN0cyBwIGwgfHwgZXhpc3RzIHAgclxuXG4gICAgbGV0IHJlYyBmaWx0ZXIgcCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IEVtcHR5XG4gICAgICB8IE5vZGUobCwgdiwgciwgXykgLT5cbiAgICAgICAgICAoKiBjYWxsIFtwXSBpbiB0aGUgZXhwZWN0ZWQgbGVmdC10by1yaWdodCBvcmRlciAqKVxuICAgICAgICAgIGxldCBsJyA9IGZpbHRlciBwIGwgaW5cbiAgICAgICAgICBsZXQgcHYgPSBwIHYgaW5cbiAgICAgICAgICBsZXQgcicgPSBmaWx0ZXIgcCByIGluXG4gICAgICAgICAgaWYgcHYgdGhlbiBqb2luIGwnIHYgcicgZWxzZSBjb25jYXQgbCcgcidcblxuICAgIGxldCByZWMgcGFydGl0aW9uIHAgPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiAoRW1wdHksIEVtcHR5KVxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+XG4gICAgICAgICAgKCogY2FsbCBbcF0gaW4gdGhlIGV4cGVjdGVkIGxlZnQtdG8tcmlnaHQgb3JkZXIgKilcbiAgICAgICAgICBsZXQgKGx0LCBsZikgPSBwYXJ0aXRpb24gcCBsIGluXG4gICAgICAgICAgbGV0IHB2ID0gcCB2IGluXG4gICAgICAgICAgbGV0IChydCwgcmYpID0gcGFydGl0aW9uIHAgciBpblxuICAgICAgICAgIGlmIHB2XG4gICAgICAgICAgdGhlbiAoam9pbiBsdCB2IHJ0LCBjb25jYXQgbGYgcmYpXG4gICAgICAgICAgZWxzZSAoY29uY2F0IGx0IHJ0LCBqb2luIGxmIHYgcmYpXG5cbiAgICBsZXQgcmVjIGNhcmRpbmFsID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gMFxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+IGNhcmRpbmFsIGwgKyAxICsgY2FyZGluYWwgclxuXG4gICAgbGV0IHJlYyBlbGVtZW50c19hdXggYWNjdSA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IGFjY3VcbiAgICAgIHwgTm9kZShsLCB2LCByLCBfKSAtPiBlbGVtZW50c19hdXggKHYgOjogZWxlbWVudHNfYXV4IGFjY3UgcikgbFxuXG4gICAgbGV0IGVsZW1lbnRzIHMgPVxuICAgICAgZWxlbWVudHNfYXV4IFtdIHNcblxuICAgIGxldCBjaG9vc2UgPSBtaW5fZWx0XG5cbiAgICBsZXQgcmVjIGZpbmQgeCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IHJhaXNlIE5vdF9mb3VuZFxuICAgICAgfCBOb2RlKGwsIHYsIHIsIF8pIC0+XG4gICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB4IHYgaW5cbiAgICAgICAgICBpZiBjID0gMCB0aGVuIHZcbiAgICAgICAgICBlbHNlIGZpbmQgeCAoaWYgYyA8IDAgdGhlbiBsIGVsc2UgcilcblxuICAgIGxldCBvZl9zb3J0ZWRfbGlzdCBsID1cbiAgICAgIGxldCByZWMgc3ViIG4gbCA9XG4gICAgICAgIG1hdGNoIG4sIGwgd2l0aFxuICAgICAgICB8IDAsIGwgLT4gRW1wdHksIGxcbiAgICAgICAgfCAxLCB4MCA6OiBsIC0+IE5vZGUgKEVtcHR5LCB4MCwgRW1wdHksIDEpLCBsXG4gICAgICAgIHwgMiwgeDAgOjogeDEgOjogbCAtPiBOb2RlIChOb2RlKEVtcHR5LCB4MCwgRW1wdHksIDEpLCB4MSwgRW1wdHksIDIpLCBsXG4gICAgICAgIHwgMywgeDAgOjogeDEgOjogeDIgOjogbCAtPlxuICAgICAgICAgICAgTm9kZSAoTm9kZShFbXB0eSwgeDAsIEVtcHR5LCAxKSwgeDEsIE5vZGUoRW1wdHksIHgyLCBFbXB0eSwgMSksIDIpLGxcbiAgICAgICAgfCBuLCBsIC0+XG4gICAgICAgICAgbGV0IG5sID0gbiAvIDIgaW5cbiAgICAgICAgICBsZXQgbGVmdCwgbCA9IHN1YiBubCBsIGluXG4gICAgICAgICAgbWF0Y2ggbCB3aXRoXG4gICAgICAgICAgfCBbXSAtPiBhc3NlcnQgZmFsc2VcbiAgICAgICAgICB8IG1pZCA6OiBsIC0+XG4gICAgICAgICAgICBsZXQgcmlnaHQsIGwgPSBzdWIgKG4gLSBubCAtIDEpIGwgaW5cbiAgICAgICAgICAgIGNyZWF0ZSBsZWZ0IG1pZCByaWdodCwgbFxuICAgICAgaW5cbiAgICAgIGZzdCAoc3ViIChMaXN0Lmxlbmd0aCBsKSBsKVxuXG4gICAgbGV0IG9mX2xpc3QgbCA9XG4gICAgICBtYXRjaCBsIHdpdGhcbiAgICAgIHwgW10gLT4gZW1wdHlcbiAgICAgIHwgW3gwXSAtPiBzaW5nbGV0b24geDBcbiAgICAgIHwgW3gwOyB4MV0gLT4gYWRkIHgxIChzaW5nbGV0b24geDApXG4gICAgICB8IFt4MDsgeDE7IHgyXSAtPiBhZGQgeDIgKGFkZCB4MSAoc2luZ2xldG9uIHgwKSlcbiAgICAgIHwgW3gwOyB4MTsgeDI7IHgzXSAtPiBhZGQgeDMgKGFkZCB4MiAoYWRkIHgxIChzaW5nbGV0b24geDApKSlcbiAgICAgIHwgW3gwOyB4MTsgeDI7IHgzOyB4NF0gLT4gYWRkIHg0IChhZGQgeDMgKGFkZCB4MiAoYWRkIHgxIChzaW5nbGV0b24geDApKSkpXG4gICAgICB8IF8gLT4gb2Zfc29ydGVkX2xpc3QgKExpc3Quc29ydF91bmlxIE9yZC5jb21wYXJlIGwpXG4gIGVuZFxuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5tb2R1bGUgdHlwZSBPcmRlcmVkVHlwZSA9XG4gIHNpZ1xuICAgIHR5cGUgdFxuICAgIHZhbCBjb21wYXJlOiB0IC0+IHQgLT4gaW50XG4gIGVuZFxuXG5tb2R1bGUgdHlwZSBTID1cbiAgc2lnXG4gICAgdHlwZSBrZXlcbiAgICB0eXBlICsnYSB0XG4gICAgdmFsIGVtcHR5OiAnYSB0XG4gICAgdmFsIGlzX2VtcHR5OiAnYSB0IC0+IGJvb2xcbiAgICB2YWwgbWVtOiAga2V5IC0+ICdhIHQgLT4gYm9vbFxuICAgIHZhbCBhZGQ6IGtleSAtPiAnYSAtPiAnYSB0IC0+ICdhIHRcbiAgICB2YWwgc2luZ2xldG9uOiBrZXkgLT4gJ2EgLT4gJ2EgdFxuICAgIHZhbCByZW1vdmU6IGtleSAtPiAnYSB0IC0+ICdhIHRcbiAgICB2YWwgbWVyZ2U6XG4gICAgICAgICAgKGtleSAtPiAnYSBvcHRpb24gLT4gJ2Igb3B0aW9uIC0+ICdjIG9wdGlvbikgLT4gJ2EgdCAtPiAnYiB0IC0+ICdjIHRcbiAgICB2YWwgY29tcGFyZTogKCdhIC0+ICdhIC0+IGludCkgLT4gJ2EgdCAtPiAnYSB0IC0+IGludFxuICAgIHZhbCBlcXVhbDogKCdhIC0+ICdhIC0+IGJvb2wpIC0+ICdhIHQgLT4gJ2EgdCAtPiBib29sXG4gICAgdmFsIGl0ZXI6IChrZXkgLT4gJ2EgLT4gdW5pdCkgLT4gJ2EgdCAtPiB1bml0XG4gICAgdmFsIGZvbGQ6IChrZXkgLT4gJ2EgLT4gJ2IgLT4gJ2IpIC0+ICdhIHQgLT4gJ2IgLT4gJ2JcbiAgICB2YWwgZm9yX2FsbDogKGtleSAtPiAnYSAtPiBib29sKSAtPiAnYSB0IC0+IGJvb2xcbiAgICB2YWwgZXhpc3RzOiAoa2V5IC0+ICdhIC0+IGJvb2wpIC0+ICdhIHQgLT4gYm9vbFxuICAgIHZhbCBmaWx0ZXI6IChrZXkgLT4gJ2EgLT4gYm9vbCkgLT4gJ2EgdCAtPiAnYSB0XG4gICAgdmFsIHBhcnRpdGlvbjogKGtleSAtPiAnYSAtPiBib29sKSAtPiAnYSB0IC0+ICdhIHQgKiAnYSB0XG4gICAgdmFsIGNhcmRpbmFsOiAnYSB0IC0+IGludFxuICAgIHZhbCBiaW5kaW5nczogJ2EgdCAtPiAoa2V5ICogJ2EpIGxpc3RcbiAgICB2YWwgbWluX2JpbmRpbmc6ICdhIHQgLT4gKGtleSAqICdhKVxuICAgIHZhbCBtYXhfYmluZGluZzogJ2EgdCAtPiAoa2V5ICogJ2EpXG4gICAgdmFsIGNob29zZTogJ2EgdCAtPiAoa2V5ICogJ2EpXG4gICAgdmFsIHNwbGl0OiBrZXkgLT4gJ2EgdCAtPiAnYSB0ICogJ2Egb3B0aW9uICogJ2EgdFxuICAgIHZhbCBmaW5kOiBrZXkgLT4gJ2EgdCAtPiAnYVxuICAgIHZhbCBtYXA6ICgnYSAtPiAnYikgLT4gJ2EgdCAtPiAnYiB0XG4gICAgdmFsIG1hcGk6IChrZXkgLT4gJ2EgLT4gJ2IpIC0+ICdhIHQgLT4gJ2IgdFxuICBlbmRcblxubW9kdWxlIE1ha2UoT3JkOiBPcmRlcmVkVHlwZSkgPSBzdHJ1Y3RcblxuICAgIHR5cGUga2V5ID0gT3JkLnRcblxuICAgIHR5cGUgJ2EgdCA9XG4gICAgICAgIEVtcHR5XG4gICAgICB8IE5vZGUgb2YgJ2EgdCAqIGtleSAqICdhICogJ2EgdCAqIGludFxuXG4gICAgbGV0IGhlaWdodCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IDBcbiAgICAgIHwgTm9kZShfLF8sXyxfLGgpIC0+IGhcblxuICAgIGxldCBjcmVhdGUgbCB4IGQgciA9XG4gICAgICBsZXQgaGwgPSBoZWlnaHQgbCBhbmQgaHIgPSBoZWlnaHQgciBpblxuICAgICAgTm9kZShsLCB4LCBkLCByLCAoaWYgaGwgPj0gaHIgdGhlbiBobCArIDEgZWxzZSBociArIDEpKVxuXG4gICAgbGV0IHNpbmdsZXRvbiB4IGQgPSBOb2RlKEVtcHR5LCB4LCBkLCBFbXB0eSwgMSlcblxuICAgIGxldCBiYWwgbCB4IGQgciA9XG4gICAgICBsZXQgaGwgPSBtYXRjaCBsIHdpdGggRW1wdHkgLT4gMCB8IE5vZGUoXyxfLF8sXyxoKSAtPiBoIGluXG4gICAgICBsZXQgaHIgPSBtYXRjaCByIHdpdGggRW1wdHkgLT4gMCB8IE5vZGUoXyxfLF8sXyxoKSAtPiBoIGluXG4gICAgICBpZiBobCA+IGhyICsgMiB0aGVuIGJlZ2luXG4gICAgICAgIG1hdGNoIGwgd2l0aFxuICAgICAgICAgIEVtcHR5IC0+IGludmFsaWRfYXJnIFwiTWFwLmJhbFwiXG4gICAgICAgIHwgTm9kZShsbCwgbHYsIGxkLCBsciwgXykgLT5cbiAgICAgICAgICAgIGlmIGhlaWdodCBsbCA+PSBoZWlnaHQgbHIgdGhlblxuICAgICAgICAgICAgICBjcmVhdGUgbGwgbHYgbGQgKGNyZWF0ZSBsciB4IGQgcilcbiAgICAgICAgICAgIGVsc2UgYmVnaW5cbiAgICAgICAgICAgICAgbWF0Y2ggbHIgd2l0aFxuICAgICAgICAgICAgICAgIEVtcHR5IC0+IGludmFsaWRfYXJnIFwiTWFwLmJhbFwiXG4gICAgICAgICAgICAgIHwgTm9kZShscmwsIGxydiwgbHJkLCBscnIsIF8pLT5cbiAgICAgICAgICAgICAgICAgIGNyZWF0ZSAoY3JlYXRlIGxsIGx2IGxkIGxybCkgbHJ2IGxyZCAoY3JlYXRlIGxyciB4IGQgcilcbiAgICAgICAgICAgIGVuZFxuICAgICAgZW5kIGVsc2UgaWYgaHIgPiBobCArIDIgdGhlbiBiZWdpblxuICAgICAgICBtYXRjaCByIHdpdGhcbiAgICAgICAgICBFbXB0eSAtPiBpbnZhbGlkX2FyZyBcIk1hcC5iYWxcIlxuICAgICAgICB8IE5vZGUocmwsIHJ2LCByZCwgcnIsIF8pIC0+XG4gICAgICAgICAgICBpZiBoZWlnaHQgcnIgPj0gaGVpZ2h0IHJsIHRoZW5cbiAgICAgICAgICAgICAgY3JlYXRlIChjcmVhdGUgbCB4IGQgcmwpIHJ2IHJkIHJyXG4gICAgICAgICAgICBlbHNlIGJlZ2luXG4gICAgICAgICAgICAgIG1hdGNoIHJsIHdpdGhcbiAgICAgICAgICAgICAgICBFbXB0eSAtPiBpbnZhbGlkX2FyZyBcIk1hcC5iYWxcIlxuICAgICAgICAgICAgICB8IE5vZGUocmxsLCBybHYsIHJsZCwgcmxyLCBfKSAtPlxuICAgICAgICAgICAgICAgICAgY3JlYXRlIChjcmVhdGUgbCB4IGQgcmxsKSBybHYgcmxkIChjcmVhdGUgcmxyIHJ2IHJkIHJyKVxuICAgICAgICAgICAgZW5kXG4gICAgICBlbmQgZWxzZVxuICAgICAgICBOb2RlKGwsIHgsIGQsIHIsIChpZiBobCA+PSBociB0aGVuIGhsICsgMSBlbHNlIGhyICsgMSkpXG5cbiAgICBsZXQgZW1wdHkgPSBFbXB0eVxuXG4gICAgbGV0IGlzX2VtcHR5ID0gZnVuY3Rpb24gRW1wdHkgLT4gdHJ1ZSB8IF8gLT4gZmFsc2VcblxuICAgIGxldCByZWMgYWRkIHggZGF0YSA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+XG4gICAgICAgICAgTm9kZShFbXB0eSwgeCwgZGF0YSwgRW1wdHksIDEpXG4gICAgICB8IE5vZGUobCwgdiwgZCwgciwgaCkgLT5cbiAgICAgICAgICBsZXQgYyA9IE9yZC5jb21wYXJlIHggdiBpblxuICAgICAgICAgIGlmIGMgPSAwIHRoZW5cbiAgICAgICAgICAgIE5vZGUobCwgeCwgZGF0YSwgciwgaClcbiAgICAgICAgICBlbHNlIGlmIGMgPCAwIHRoZW5cbiAgICAgICAgICAgIGJhbCAoYWRkIHggZGF0YSBsKSB2IGQgclxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJhbCBsIHYgZCAoYWRkIHggZGF0YSByKVxuXG4gICAgbGV0IHJlYyBmaW5kIHggPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPlxuICAgICAgICAgIHJhaXNlIE5vdF9mb3VuZFxuICAgICAgfCBOb2RlKGwsIHYsIGQsIHIsIF8pIC0+XG4gICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB4IHYgaW5cbiAgICAgICAgICBpZiBjID0gMCB0aGVuIGRcbiAgICAgICAgICBlbHNlIGZpbmQgeCAoaWYgYyA8IDAgdGhlbiBsIGVsc2UgcilcblxuICAgIGxldCByZWMgbWVtIHggPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPlxuICAgICAgICAgIGZhbHNlXG4gICAgICB8IE5vZGUobCwgdiwgZCwgciwgXykgLT5cbiAgICAgICAgICBsZXQgYyA9IE9yZC5jb21wYXJlIHggdiBpblxuICAgICAgICAgIGMgPSAwIHx8IG1lbSB4IChpZiBjIDwgMCB0aGVuIGwgZWxzZSByKVxuXG4gICAgbGV0IHJlYyBtaW5fYmluZGluZyA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IHJhaXNlIE5vdF9mb3VuZFxuICAgICAgfCBOb2RlKEVtcHR5LCB4LCBkLCByLCBfKSAtPiAoeCwgZClcbiAgICAgIHwgTm9kZShsLCB4LCBkLCByLCBfKSAtPiBtaW5fYmluZGluZyBsXG5cbiAgICBsZXQgcmVjIG1heF9iaW5kaW5nID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gcmFpc2UgTm90X2ZvdW5kXG4gICAgICB8IE5vZGUobCwgeCwgZCwgRW1wdHksIF8pIC0+ICh4LCBkKVxuICAgICAgfCBOb2RlKGwsIHgsIGQsIHIsIF8pIC0+IG1heF9iaW5kaW5nIHJcblxuICAgIGxldCByZWMgcmVtb3ZlX21pbl9iaW5kaW5nID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gaW52YWxpZF9hcmcgXCJNYXAucmVtb3ZlX21pbl9lbHRcIlxuICAgICAgfCBOb2RlKEVtcHR5LCB4LCBkLCByLCBfKSAtPiByXG4gICAgICB8IE5vZGUobCwgeCwgZCwgciwgXykgLT4gYmFsIChyZW1vdmVfbWluX2JpbmRpbmcgbCkgeCBkIHJcblxuICAgIGxldCBtZXJnZSB0MSB0MiA9XG4gICAgICBtYXRjaCAodDEsIHQyKSB3aXRoXG4gICAgICAgIChFbXB0eSwgdCkgLT4gdFxuICAgICAgfCAodCwgRW1wdHkpIC0+IHRcbiAgICAgIHwgKF8sIF8pIC0+XG4gICAgICAgICAgbGV0ICh4LCBkKSA9IG1pbl9iaW5kaW5nIHQyIGluXG4gICAgICAgICAgYmFsIHQxIHggZCAocmVtb3ZlX21pbl9iaW5kaW5nIHQyKVxuXG4gICAgbGV0IHJlYyByZW1vdmUgeCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+XG4gICAgICAgICAgRW1wdHlcbiAgICAgIHwgTm9kZShsLCB2LCBkLCByLCBoKSAtPlxuICAgICAgICAgIGxldCBjID0gT3JkLmNvbXBhcmUgeCB2IGluXG4gICAgICAgICAgaWYgYyA9IDAgdGhlblxuICAgICAgICAgICAgbWVyZ2UgbCByXG4gICAgICAgICAgZWxzZSBpZiBjIDwgMCB0aGVuXG4gICAgICAgICAgICBiYWwgKHJlbW92ZSB4IGwpIHYgZCByXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYmFsIGwgdiBkIChyZW1vdmUgeCByKVxuXG4gICAgbGV0IHJlYyBpdGVyIGYgPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiAoKVxuICAgICAgfCBOb2RlKGwsIHYsIGQsIHIsIF8pIC0+XG4gICAgICAgICAgaXRlciBmIGw7IGYgdiBkOyBpdGVyIGYgclxuXG4gICAgbGV0IHJlYyBtYXAgZiA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+XG4gICAgICAgICAgRW1wdHlcbiAgICAgIHwgTm9kZShsLCB2LCBkLCByLCBoKSAtPlxuICAgICAgICAgIGxldCBsJyA9IG1hcCBmIGwgaW5cbiAgICAgICAgICBsZXQgZCcgPSBmIGQgaW5cbiAgICAgICAgICBsZXQgcicgPSBtYXAgZiByIGluXG4gICAgICAgICAgTm9kZShsJywgdiwgZCcsIHInLCBoKVxuXG4gICAgbGV0IHJlYyBtYXBpIGYgPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPlxuICAgICAgICAgIEVtcHR5XG4gICAgICB8IE5vZGUobCwgdiwgZCwgciwgaCkgLT5cbiAgICAgICAgICBsZXQgbCcgPSBtYXBpIGYgbCBpblxuICAgICAgICAgIGxldCBkJyA9IGYgdiBkIGluXG4gICAgICAgICAgbGV0IHInID0gbWFwaSBmIHIgaW5cbiAgICAgICAgICBOb2RlKGwnLCB2LCBkJywgcicsIGgpXG5cbiAgICBsZXQgcmVjIGZvbGQgZiBtIGFjY3UgPVxuICAgICAgbWF0Y2ggbSB3aXRoXG4gICAgICAgIEVtcHR5IC0+IGFjY3VcbiAgICAgIHwgTm9kZShsLCB2LCBkLCByLCBfKSAtPlxuICAgICAgICAgIGZvbGQgZiByIChmIHYgZCAoZm9sZCBmIGwgYWNjdSkpXG5cbiAgICBsZXQgcmVjIGZvcl9hbGwgcCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IHRydWVcbiAgICAgIHwgTm9kZShsLCB2LCBkLCByLCBfKSAtPiBwIHYgZCAmJiBmb3JfYWxsIHAgbCAmJiBmb3JfYWxsIHAgclxuXG4gICAgbGV0IHJlYyBleGlzdHMgcCA9IGZ1bmN0aW9uXG4gICAgICAgIEVtcHR5IC0+IGZhbHNlXG4gICAgICB8IE5vZGUobCwgdiwgZCwgciwgXykgLT4gcCB2IGQgfHwgZXhpc3RzIHAgbCB8fCBleGlzdHMgcCByXG5cbiAgICAoKiBCZXdhcmU6IHRob3NlIHR3byBmdW5jdGlvbnMgYXNzdW1lIHRoYXQgdGhlIGFkZGVkIGsgaXMgKnN0cmljdGx5KlxuICAgICAgIHNtYWxsZXIgKG9yIGJpZ2dlcikgdGhhbiBhbGwgdGhlIHByZXNlbnQga2V5cyBpbiB0aGUgdHJlZTsgaXRcbiAgICAgICBkb2VzIG5vdCB0ZXN0IGZvciBlcXVhbGl0eSB3aXRoIHRoZSBjdXJyZW50IG1pbiAob3IgbWF4KSBrZXkuXG5cbiAgICAgICBJbmRlZWQsIHRoZXkgYXJlIG9ubHkgdXNlZCBkdXJpbmcgdGhlIFwiam9pblwiIG9wZXJhdGlvbiB3aGljaFxuICAgICAgIHJlc3BlY3RzIHRoaXMgcHJlY29uZGl0aW9uLlxuICAgICopXG5cbiAgICBsZXQgcmVjIGFkZF9taW5fYmluZGluZyBrIHYgPSBmdW5jdGlvblxuICAgICAgfCBFbXB0eSAtPiBzaW5nbGV0b24gayB2XG4gICAgICB8IE5vZGUgKGwsIHgsIGQsIHIsIGgpIC0+XG4gICAgICAgIGJhbCAoYWRkX21pbl9iaW5kaW5nIGsgdiBsKSB4IGQgclxuXG4gICAgbGV0IHJlYyBhZGRfbWF4X2JpbmRpbmcgayB2ID0gZnVuY3Rpb25cbiAgICAgIHwgRW1wdHkgLT4gc2luZ2xldG9uIGsgdlxuICAgICAgfCBOb2RlIChsLCB4LCBkLCByLCBoKSAtPlxuICAgICAgICBiYWwgbCB4IGQgKGFkZF9tYXhfYmluZGluZyBrIHYgcilcblxuICAgICgqIFNhbWUgYXMgY3JlYXRlIGFuZCBiYWwsIGJ1dCBubyBhc3N1bXB0aW9ucyBhcmUgbWFkZSBvbiB0aGVcbiAgICAgICByZWxhdGl2ZSBoZWlnaHRzIG9mIGwgYW5kIHIuICopXG5cbiAgICBsZXQgcmVjIGpvaW4gbCB2IGQgciA9XG4gICAgICBtYXRjaCAobCwgcikgd2l0aFxuICAgICAgICAoRW1wdHksIF8pIC0+IGFkZF9taW5fYmluZGluZyB2IGQgclxuICAgICAgfCAoXywgRW1wdHkpIC0+IGFkZF9tYXhfYmluZGluZyB2IGQgbFxuICAgICAgfCAoTm9kZShsbCwgbHYsIGxkLCBsciwgbGgpLCBOb2RlKHJsLCBydiwgcmQsIHJyLCByaCkpIC0+XG4gICAgICAgICAgaWYgbGggPiByaCArIDIgdGhlbiBiYWwgbGwgbHYgbGQgKGpvaW4gbHIgdiBkIHIpIGVsc2VcbiAgICAgICAgICBpZiByaCA+IGxoICsgMiB0aGVuIGJhbCAoam9pbiBsIHYgZCBybCkgcnYgcmQgcnIgZWxzZVxuICAgICAgICAgIGNyZWF0ZSBsIHYgZCByXG5cbiAgICAoKiBNZXJnZSB0d28gdHJlZXMgbCBhbmQgciBpbnRvIG9uZS5cbiAgICAgICBBbGwgZWxlbWVudHMgb2YgbCBtdXN0IHByZWNlZGUgdGhlIGVsZW1lbnRzIG9mIHIuXG4gICAgICAgTm8gYXNzdW1wdGlvbiBvbiB0aGUgaGVpZ2h0cyBvZiBsIGFuZCByLiAqKVxuXG4gICAgbGV0IGNvbmNhdCB0MSB0MiA9XG4gICAgICBtYXRjaCAodDEsIHQyKSB3aXRoXG4gICAgICAgIChFbXB0eSwgdCkgLT4gdFxuICAgICAgfCAodCwgRW1wdHkpIC0+IHRcbiAgICAgIHwgKF8sIF8pIC0+XG4gICAgICAgICAgbGV0ICh4LCBkKSA9IG1pbl9iaW5kaW5nIHQyIGluXG4gICAgICAgICAgam9pbiB0MSB4IGQgKHJlbW92ZV9taW5fYmluZGluZyB0MilcblxuICAgIGxldCBjb25jYXRfb3Jfam9pbiB0MSB2IGQgdDIgPVxuICAgICAgbWF0Y2ggZCB3aXRoXG4gICAgICB8IFNvbWUgZCAtPiBqb2luIHQxIHYgZCB0MlxuICAgICAgfCBOb25lIC0+IGNvbmNhdCB0MSB0MlxuXG4gICAgbGV0IHJlYyBzcGxpdCB4ID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT5cbiAgICAgICAgICAoRW1wdHksIE5vbmUsIEVtcHR5KVxuICAgICAgfCBOb2RlKGwsIHYsIGQsIHIsIF8pIC0+XG4gICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB4IHYgaW5cbiAgICAgICAgICBpZiBjID0gMCB0aGVuIChsLCBTb21lIGQsIHIpXG4gICAgICAgICAgZWxzZSBpZiBjIDwgMCB0aGVuXG4gICAgICAgICAgICBsZXQgKGxsLCBwcmVzLCBybCkgPSBzcGxpdCB4IGwgaW4gKGxsLCBwcmVzLCBqb2luIHJsIHYgZCByKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxldCAobHIsIHByZXMsIHJyKSA9IHNwbGl0IHggciBpbiAoam9pbiBsIHYgZCBsciwgcHJlcywgcnIpXG5cbiAgICBsZXQgcmVjIG1lcmdlIGYgczEgczIgPVxuICAgICAgbWF0Y2ggKHMxLCBzMikgd2l0aFxuICAgICAgICAoRW1wdHksIEVtcHR5KSAtPiBFbXB0eVxuICAgICAgfCAoTm9kZSAobDEsIHYxLCBkMSwgcjEsIGgxKSwgXykgd2hlbiBoMSA+PSBoZWlnaHQgczIgLT5cbiAgICAgICAgICBsZXQgKGwyLCBkMiwgcjIpID0gc3BsaXQgdjEgczIgaW5cbiAgICAgICAgICBjb25jYXRfb3Jfam9pbiAobWVyZ2UgZiBsMSBsMikgdjEgKGYgdjEgKFNvbWUgZDEpIGQyKSAobWVyZ2UgZiByMSByMilcbiAgICAgIHwgKF8sIE5vZGUgKGwyLCB2MiwgZDIsIHIyLCBoMikpIC0+XG4gICAgICAgICAgbGV0IChsMSwgZDEsIHIxKSA9IHNwbGl0IHYyIHMxIGluXG4gICAgICAgICAgY29uY2F0X29yX2pvaW4gKG1lcmdlIGYgbDEgbDIpIHYyIChmIHYyIGQxIChTb21lIGQyKSkgKG1lcmdlIGYgcjEgcjIpXG4gICAgICB8IF8gLT5cbiAgICAgICAgICBhc3NlcnQgZmFsc2VcblxuICAgIGxldCByZWMgZmlsdGVyIHAgPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiBFbXB0eVxuICAgICAgfCBOb2RlKGwsIHYsIGQsIHIsIF8pIC0+XG4gICAgICAgICAgKCogY2FsbCBbcF0gaW4gdGhlIGV4cGVjdGVkIGxlZnQtdG8tcmlnaHQgb3JkZXIgKilcbiAgICAgICAgICBsZXQgbCcgPSBmaWx0ZXIgcCBsIGluXG4gICAgICAgICAgbGV0IHB2ZCA9IHAgdiBkIGluXG4gICAgICAgICAgbGV0IHInID0gZmlsdGVyIHAgciBpblxuICAgICAgICAgIGlmIHB2ZCB0aGVuIGpvaW4gbCcgdiBkIHInIGVsc2UgY29uY2F0IGwnIHInXG5cbiAgICBsZXQgcmVjIHBhcnRpdGlvbiBwID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gKEVtcHR5LCBFbXB0eSlcbiAgICAgIHwgTm9kZShsLCB2LCBkLCByLCBfKSAtPlxuICAgICAgICAgICgqIGNhbGwgW3BdIGluIHRoZSBleHBlY3RlZCBsZWZ0LXRvLXJpZ2h0IG9yZGVyICopXG4gICAgICAgICAgbGV0IChsdCwgbGYpID0gcGFydGl0aW9uIHAgbCBpblxuICAgICAgICAgIGxldCBwdmQgPSBwIHYgZCBpblxuICAgICAgICAgIGxldCAocnQsIHJmKSA9IHBhcnRpdGlvbiBwIHIgaW5cbiAgICAgICAgICBpZiBwdmRcbiAgICAgICAgICB0aGVuIChqb2luIGx0IHYgZCBydCwgY29uY2F0IGxmIHJmKVxuICAgICAgICAgIGVsc2UgKGNvbmNhdCBsdCBydCwgam9pbiBsZiB2IGQgcmYpXG5cbiAgICB0eXBlICdhIGVudW1lcmF0aW9uID0gRW5kIHwgTW9yZSBvZiBrZXkgKiAnYSAqICdhIHQgKiAnYSBlbnVtZXJhdGlvblxuXG4gICAgbGV0IHJlYyBjb25zX2VudW0gbSBlID1cbiAgICAgIG1hdGNoIG0gd2l0aFxuICAgICAgICBFbXB0eSAtPiBlXG4gICAgICB8IE5vZGUobCwgdiwgZCwgciwgXykgLT4gY29uc19lbnVtIGwgKE1vcmUodiwgZCwgciwgZSkpXG5cbiAgICBsZXQgY29tcGFyZSBjbXAgbTEgbTIgPVxuICAgICAgbGV0IHJlYyBjb21wYXJlX2F1eCBlMSBlMiA9XG4gICAgICAgICAgbWF0Y2ggKGUxLCBlMikgd2l0aFxuICAgICAgICAgIChFbmQsIEVuZCkgLT4gMFxuICAgICAgICB8IChFbmQsIF8pICAtPiAtMVxuICAgICAgICB8IChfLCBFbmQpIC0+IDFcbiAgICAgICAgfCAoTW9yZSh2MSwgZDEsIHIxLCBlMSksIE1vcmUodjIsIGQyLCByMiwgZTIpKSAtPlxuICAgICAgICAgICAgbGV0IGMgPSBPcmQuY29tcGFyZSB2MSB2MiBpblxuICAgICAgICAgICAgaWYgYyA8PiAwIHRoZW4gYyBlbHNlXG4gICAgICAgICAgICBsZXQgYyA9IGNtcCBkMSBkMiBpblxuICAgICAgICAgICAgaWYgYyA8PiAwIHRoZW4gYyBlbHNlXG4gICAgICAgICAgICBjb21wYXJlX2F1eCAoY29uc19lbnVtIHIxIGUxKSAoY29uc19lbnVtIHIyIGUyKVxuICAgICAgaW4gY29tcGFyZV9hdXggKGNvbnNfZW51bSBtMSBFbmQpIChjb25zX2VudW0gbTIgRW5kKVxuXG4gICAgbGV0IGVxdWFsIGNtcCBtMSBtMiA9XG4gICAgICBsZXQgcmVjIGVxdWFsX2F1eCBlMSBlMiA9XG4gICAgICAgICAgbWF0Y2ggKGUxLCBlMikgd2l0aFxuICAgICAgICAgIChFbmQsIEVuZCkgLT4gdHJ1ZVxuICAgICAgICB8IChFbmQsIF8pICAtPiBmYWxzZVxuICAgICAgICB8IChfLCBFbmQpIC0+IGZhbHNlXG4gICAgICAgIHwgKE1vcmUodjEsIGQxLCByMSwgZTEpLCBNb3JlKHYyLCBkMiwgcjIsIGUyKSkgLT5cbiAgICAgICAgICAgIE9yZC5jb21wYXJlIHYxIHYyID0gMCAmJiBjbXAgZDEgZDIgJiZcbiAgICAgICAgICAgIGVxdWFsX2F1eCAoY29uc19lbnVtIHIxIGUxKSAoY29uc19lbnVtIHIyIGUyKVxuICAgICAgaW4gZXF1YWxfYXV4IChjb25zX2VudW0gbTEgRW5kKSAoY29uc19lbnVtIG0yIEVuZClcblxuICAgIGxldCByZWMgY2FyZGluYWwgPSBmdW5jdGlvblxuICAgICAgICBFbXB0eSAtPiAwXG4gICAgICB8IE5vZGUobCwgXywgXywgciwgXykgLT4gY2FyZGluYWwgbCArIDEgKyBjYXJkaW5hbCByXG5cbiAgICBsZXQgcmVjIGJpbmRpbmdzX2F1eCBhY2N1ID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gYWNjdVxuICAgICAgfCBOb2RlKGwsIHYsIGQsIHIsIF8pIC0+IGJpbmRpbmdzX2F1eCAoKHYsIGQpIDo6IGJpbmRpbmdzX2F1eCBhY2N1IHIpIGxcblxuICAgIGxldCBiaW5kaW5ncyBzID1cbiAgICAgIGJpbmRpbmdzX2F1eCBbXSBzXG5cbiAgICBsZXQgY2hvb3NlID0gbWluX2JpbmRpbmdcblxuZW5kXG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbnR5cGUgJ2EgdCA9IHsgbXV0YWJsZSBjIDogJ2EgbGlzdCB9XG5cbmV4Y2VwdGlvbiBFbXB0eVxuXG5sZXQgY3JlYXRlICgpID0geyBjID0gW10gfVxuXG5sZXQgY2xlYXIgcyA9IHMuYyA8LSBbXVxuXG5sZXQgY29weSBzID0geyBjID0gcy5jIH1cblxubGV0IHB1c2ggeCBzID0gcy5jIDwtIHggOjogcy5jXG5cbmxldCBwb3AgcyA9XG4gIG1hdGNoIHMuYyB3aXRoXG4gICAgaGQ6OnRsIC0+IHMuYyA8LSB0bDsgaGRcbiAgfCBbXSAgICAgLT4gcmFpc2UgRW1wdHlcblxubGV0IHRvcCBzID1cbiAgbWF0Y2ggcy5jIHdpdGhcbiAgICBoZDo6XyAtPiBoZFxuICB8IFtdICAgICAtPiByYWlzZSBFbXB0eVxuXG5sZXQgaXNfZW1wdHkgcyA9IChzLmMgPSBbXSlcblxubGV0IGxlbmd0aCBzID0gTGlzdC5sZW5ndGggcy5jXG5cbmxldCBpdGVyIGYgcyA9IExpc3QuaXRlciBmIHMuY1xuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgIEZyYW5jb2lzIFBvdHRpZXIsIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAyMDAyIEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5leGNlcHRpb24gRW1wdHlcblxuKCogT0NhbWwgY3VycmVudGx5IGRvZXMgbm90IGFsbG93IHRoZSBjb21wb25lbnRzIG9mIGEgc3VtIHR5cGUgdG8gYmVcbiAgIG11dGFibGUuIFlldCwgZm9yIG9wdGltYWwgc3BhY2UgZWZmaWNpZW5jeSwgd2UgbXVzdCBoYXZlIGNvbnMgY2VsbHNcbiAgIHdob3NlIFtuZXh0XSBmaWVsZCBpcyBtdXRhYmxlLiBUaGlzIGxlYWRzIHVzIHRvIGRlZmluZSBhIHR5cGUgb2ZcbiAgIGN5Y2xpYyBsaXN0cywgc28gYXMgdG8gZWxpbWluYXRlIHRoZSBbTmlsXSBjYXNlIGFuZCB0aGUgc3VtXG4gICB0eXBlLiAqKVxuXG50eXBlICdhIGNlbGwgPSB7XG4gICAgY29udGVudDogJ2E7XG4gICAgbXV0YWJsZSBuZXh0OiAnYSBjZWxsXG4gIH1cblxuKCogQSBxdWV1ZSBpcyBhIHJlZmVyZW5jZSB0byBlaXRoZXIgbm90aGluZyBvciBzb21lIGNlbGwgb2YgYSBjeWNsaWNcbiAgIGxpc3QuIEJ5IGNvbnZlbnRpb24sIHRoYXQgY2VsbCBpcyB0byBiZSB2aWV3ZWQgYXMgdGhlIGxhc3QgY2VsbCBpblxuICAgdGhlIHF1ZXVlLiBUaGUgZmlyc3QgY2VsbCBpbiB0aGUgcXVldWUgaXMgdGhlbiBmb3VuZCBpbiBjb25zdGFudFxuICAgdGltZTogaXQgaXMgdGhlIG5leHQgY2VsbCBpbiB0aGUgY3ljbGljIGxpc3QuIFRoZSBxdWV1ZSdzIGxlbmd0aCBpc1xuICAgYWxzbyByZWNvcmRlZCwgc28gYXMgdG8gbWFrZSBbbGVuZ3RoXSBhIGNvbnN0YW50LXRpbWUgb3BlcmF0aW9uLlxuXG4gICBUaGUgW3RhaWxdIGZpZWxkIHNob3VsZCByZWFsbHkgYmUgb2YgdHlwZSBbJ2EgY2VsbCBvcHRpb25dLCBidXRcbiAgIHRoZW4gaXQgd291bGQgYmUgW05vbmVdIHdoZW4gW2xlbmd0aF0gaXMgMCBhbmQgW1NvbWVdIG90aGVyd2lzZSxcbiAgIGxlYWRpbmcgdG8gcmVkdW5kYW50IG1lbW9yeSBhbGxvY2F0aW9uIGFuZCBhY2Nlc3Nlcy4gV2UgYXZvaWQgdGhpc1xuICAgb3ZlcmhlYWQgYnkgZmlsbGluZyBbdGFpbF0gd2l0aCBhIGR1bW15IHZhbHVlIHdoZW4gW2xlbmd0aF0gaXMgMC5cbiAgIE9mIGNvdXJzZSwgdGhpcyByZXF1aXJlcyBiZW5kaW5nIHRoZSB0eXBlIHN5c3RlbSdzIGFybSBzbGlnaHRseSxcbiAgIGJlY2F1c2UgaXQgZG9lcyBub3QgaGF2ZSBkZXBlbmRlbnQgc3Vtcy4gKilcblxudHlwZSAnYSB0ID0ge1xuICAgIG11dGFibGUgbGVuZ3RoOiBpbnQ7XG4gICAgbXV0YWJsZSB0YWlsOiAnYSBjZWxsXG4gIH1cblxubGV0IGNyZWF0ZSAoKSA9IHtcbiAgbGVuZ3RoID0gMDtcbiAgdGFpbCA9IE9iai5tYWdpYyBOb25lXG59XG5cbmxldCBjbGVhciBxID1cbiAgcS5sZW5ndGggPC0gMDtcbiAgcS50YWlsIDwtIE9iai5tYWdpYyBOb25lXG5cbmxldCBhZGQgeCBxID1cbiAgaWYgcS5sZW5ndGggPSAwIHRoZW5cbiAgICBsZXQgcmVjIGNlbGwgPSB7XG4gICAgICBjb250ZW50ID0geDtcbiAgICAgIG5leHQgPSBjZWxsXG4gICAgfSBpblxuICAgIHEubGVuZ3RoIDwtIDE7XG4gICAgcS50YWlsIDwtIGNlbGxcbiAgZWxzZVxuICAgIGxldCB0YWlsID0gcS50YWlsIGluXG4gICAgbGV0IGhlYWQgPSB0YWlsLm5leHQgaW5cbiAgICBsZXQgY2VsbCA9IHtcbiAgICAgIGNvbnRlbnQgPSB4O1xuICAgICAgbmV4dCA9IGhlYWRcbiAgICB9IGluXG4gICAgcS5sZW5ndGggPC0gcS5sZW5ndGggKyAxO1xuICAgIHRhaWwubmV4dCA8LSBjZWxsO1xuICAgIHEudGFpbCA8LSBjZWxsXG5cbmxldCBwdXNoID1cbiAgYWRkXG5cbmxldCBwZWVrIHEgPVxuICBpZiBxLmxlbmd0aCA9IDAgdGhlblxuICAgIHJhaXNlIEVtcHR5XG4gIGVsc2VcbiAgICBxLnRhaWwubmV4dC5jb250ZW50XG5cbmxldCB0b3AgPVxuICBwZWVrXG5cbmxldCB0YWtlIHEgPVxuICBpZiBxLmxlbmd0aCA9IDAgdGhlbiByYWlzZSBFbXB0eTtcbiAgcS5sZW5ndGggPC0gcS5sZW5ndGggLSAxO1xuICBsZXQgdGFpbCA9IHEudGFpbCBpblxuICBsZXQgaGVhZCA9IHRhaWwubmV4dCBpblxuICBpZiBoZWFkID09IHRhaWwgdGhlblxuICAgIHEudGFpbCA8LSBPYmoubWFnaWMgTm9uZVxuICBlbHNlXG4gICAgdGFpbC5uZXh0IDwtIGhlYWQubmV4dDtcbiAgaGVhZC5jb250ZW50XG5cbmxldCBwb3AgPVxuICB0YWtlXG5cbmxldCBjb3B5IHEgPVxuICBpZiBxLmxlbmd0aCA9IDAgdGhlblxuICAgIGNyZWF0ZSgpXG4gIGVsc2VcbiAgICBsZXQgdGFpbCA9IHEudGFpbCBpblxuXG4gICAgbGV0IHJlYyB0YWlsJyA9IHtcbiAgICAgIGNvbnRlbnQgPSB0YWlsLmNvbnRlbnQ7XG4gICAgICBuZXh0ID0gdGFpbCdcbiAgICB9IGluXG5cbiAgICBsZXQgcmVjIGNvcHkgcHJldiBjZWxsID1cbiAgICAgIGlmIGNlbGwgIT0gdGFpbFxuICAgICAgdGhlbiBsZXQgcmVzID0ge1xuICAgICAgICBjb250ZW50ID0gY2VsbC5jb250ZW50O1xuICAgICAgICBuZXh0ID0gdGFpbCdcbiAgICAgIH0gaW4gcHJldi5uZXh0IDwtIHJlcztcbiAgICAgIGNvcHkgcmVzIGNlbGwubmV4dCBpblxuXG4gICAgY29weSB0YWlsJyB0YWlsLm5leHQ7XG4gICAge1xuICAgICAgbGVuZ3RoID0gcS5sZW5ndGg7XG4gICAgICB0YWlsID0gdGFpbCdcbiAgICB9XG5cbmxldCBpc19lbXB0eSBxID1cbiAgcS5sZW5ndGggPSAwXG5cbmxldCBsZW5ndGggcSA9XG4gIHEubGVuZ3RoXG5cbmxldCBpdGVyIGYgcSA9XG4gIGlmIHEubGVuZ3RoID4gMCB0aGVuXG4gICAgbGV0IHRhaWwgPSBxLnRhaWwgaW5cbiAgICBsZXQgcmVjIGl0ZXIgY2VsbCA9XG4gICAgICBmIGNlbGwuY29udGVudDtcbiAgICAgIGlmIGNlbGwgIT0gdGFpbCB0aGVuXG4gICAgICAgIGl0ZXIgY2VsbC5uZXh0IGluXG4gICAgaXRlciB0YWlsLm5leHRcblxubGV0IGZvbGQgZiBhY2N1IHEgPVxuICBpZiBxLmxlbmd0aCA9IDAgdGhlblxuICAgIGFjY3VcbiAgZWxzZVxuICAgIGxldCB0YWlsID0gcS50YWlsIGluXG4gICAgbGV0IHJlYyBmb2xkIGFjY3UgY2VsbCA9XG4gICAgICBsZXQgYWNjdSA9IGYgYWNjdSBjZWxsLmNvbnRlbnQgaW5cbiAgICAgIGlmIGNlbGwgPT0gdGFpbCB0aGVuXG4gICAgICAgIGFjY3VcbiAgICAgIGVsc2VcbiAgICAgICAgZm9sZCBhY2N1IGNlbGwubmV4dCBpblxuICAgIGZvbGQgYWNjdSB0YWlsLm5leHRcblxubGV0IHRyYW5zZmVyIHExIHEyID1cbiAgbGV0IGxlbmd0aDEgPSBxMS5sZW5ndGggaW5cbiAgaWYgbGVuZ3RoMSA+IDAgdGhlblxuICAgIGxldCB0YWlsMSA9IHExLnRhaWwgaW5cbiAgICBjbGVhciBxMTtcbiAgICBpZiBxMi5sZW5ndGggPiAwIHRoZW4gYmVnaW5cbiAgICAgIGxldCB0YWlsMiA9IHEyLnRhaWwgaW5cbiAgICAgIGxldCBoZWFkMSA9IHRhaWwxLm5leHQgaW5cbiAgICAgIGxldCBoZWFkMiA9IHRhaWwyLm5leHQgaW5cbiAgICAgIHRhaWwxLm5leHQgPC0gaGVhZDI7XG4gICAgICB0YWlsMi5uZXh0IDwtIGhlYWQxXG4gICAgZW5kO1xuICAgIHEyLmxlbmd0aCA8LSBxMi5sZW5ndGggKyBsZW5ndGgxO1xuICAgIHEyLnRhaWwgPC0gdGFpbDFcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgRGFtaWVuIERvbGlnZXosIHByb2pldCBQYXJhLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NyBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogSW50ZXJuYWxzIG9mIGZvcmNpbmcgbGF6eSB2YWx1ZXMuICopXG5cbmV4Y2VwdGlvbiBVbmRlZmluZWQ7O1xuXG5sZXQgcmFpc2VfdW5kZWZpbmVkID0gT2JqLnJlcHIgKGZ1biAoKSAtPiByYWlzZSBVbmRlZmluZWQpOztcblxuKCogQXNzdW1lIFtibGtdIGlzIGEgYmxvY2sgd2l0aCB0YWcgbGF6eSAqKVxubGV0IGZvcmNlX2xhenlfYmxvY2sgKGJsayA6ICdhcmcgbGF6eV90KSA9XG4gIGxldCBjbG9zdXJlID0gKE9iai5vYmogKE9iai5maWVsZCAoT2JqLnJlcHIgYmxrKSAwKSA6IHVuaXQgLT4gJ2FyZykgaW5cbiAgT2JqLnNldF9maWVsZCAoT2JqLnJlcHIgYmxrKSAwIHJhaXNlX3VuZGVmaW5lZDtcbiAgdHJ5XG4gICAgbGV0IHJlc3VsdCA9IGNsb3N1cmUgKCkgaW5cbiAgICAoKiBkbyBzZXRfZmllbGQgQkVGT1JFIHNldF90YWcgKilcbiAgICBPYmouc2V0X2ZpZWxkIChPYmoucmVwciBibGspIDAgKE9iai5yZXByIHJlc3VsdCk7XG4gICAgT2JqLnNldF90YWcgKE9iai5yZXByIGJsaykgT2JqLmZvcndhcmRfdGFnO1xuICAgIHJlc3VsdFxuICB3aXRoIGUgLT5cbiAgICBPYmouc2V0X2ZpZWxkIChPYmoucmVwciBibGspIDAgKE9iai5yZXByIChmdW4gKCkgLT4gcmFpc2UgZSkpO1xuICAgIHJhaXNlIGVcbjs7XG5cbigqIEFzc3VtZSBbYmxrXSBpcyBhIGJsb2NrIHdpdGggdGFnIGxhenkgKilcbmxldCBmb3JjZV92YWxfbGF6eV9ibG9jayAoYmxrIDogJ2FyZyBsYXp5X3QpID1cbiAgbGV0IGNsb3N1cmUgPSAoT2JqLm9iaiAoT2JqLmZpZWxkIChPYmoucmVwciBibGspIDApIDogdW5pdCAtPiAnYXJnKSBpblxuICBPYmouc2V0X2ZpZWxkIChPYmoucmVwciBibGspIDAgcmFpc2VfdW5kZWZpbmVkO1xuICBsZXQgcmVzdWx0ID0gY2xvc3VyZSAoKSBpblxuICAoKiBkbyBzZXRfZmllbGQgQkVGT1JFIHNldF90YWcgKilcbiAgT2JqLnNldF9maWVsZCAoT2JqLnJlcHIgYmxrKSAwIChPYmoucmVwciByZXN1bHQpO1xuICBPYmouc2V0X3RhZyAoT2JqLnJlcHIgYmxrKSAoT2JqLmZvcndhcmRfdGFnKTtcbiAgcmVzdWx0XG47O1xuXG4oKiBbZm9yY2VdIGlzIG5vdCB1c2VkLCBzaW5jZSBbTGF6eS5mb3JjZV0gaXMgZGVjbGFyZWQgYXMgYSBwcmltaXRpdmVcbiAgIHdob3NlIGNvZGUgaW5saW5lcyB0aGUgdGFnIHRlc3RzIG9mIGl0cyBhcmd1bWVudC4gIFRoaXMgZnVuY3Rpb24gaXNcbiAgIGhlcmUgZm9yIHRoZSBzYWtlIG9mIGNvbXBsZXRlbmVzcywgYW5kIGZvciBkZWJ1Z2dpbmcgcHVycG9zZS4gKilcblxubGV0IGZvcmNlIChsenYgOiAnYXJnIGxhenlfdCkgPVxuICBsZXQgeCA9IE9iai5yZXByIGx6diBpblxuICBsZXQgdCA9IE9iai50YWcgeCBpblxuICBpZiB0ID0gT2JqLmZvcndhcmRfdGFnIHRoZW4gKE9iai5vYmogKE9iai5maWVsZCB4IDApIDogJ2FyZykgZWxzZVxuICBpZiB0IDw+IE9iai5sYXp5X3RhZyB0aGVuIChPYmoub2JqIHggOiAnYXJnKVxuICBlbHNlIGZvcmNlX2xhenlfYmxvY2sgbHp2XG47O1xuXG5sZXQgZm9yY2VfdmFsIChsenYgOiAnYXJnIGxhenlfdCkgPVxuICBsZXQgeCA9IE9iai5yZXByIGx6diBpblxuICBsZXQgdCA9IE9iai50YWcgeCBpblxuICBpZiB0ID0gT2JqLmZvcndhcmRfdGFnIHRoZW4gKE9iai5vYmogKE9iai5maWVsZCB4IDApIDogJ2FyZykgZWxzZVxuICBpZiB0IDw+IE9iai5sYXp5X3RhZyB0aGVuIChPYmoub2JqIHggOiAnYXJnKVxuICBlbHNlIGZvcmNlX3ZhbF9sYXp5X2Jsb2NrIGx6dlxuOztcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgRGFtaWVuIERvbGlnZXosIHByb2pldCBQYXJhLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NyBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogTW9kdWxlIFtMYXp5XTogZGVmZXJyZWQgY29tcHV0YXRpb25zICopXG5cblxuKCpcbiAgIFdBUk5JTkc6IHNvbWUgcHVycGxlIG1hZ2ljIGlzIGdvaW5nIG9uIGhlcmUuICBEbyBub3QgdGFrZSB0aGlzIGZpbGVcbiAgIGFzIGFuIGV4YW1wbGUgb2YgaG93IHRvIHByb2dyYW0gaW4gT0NhbWwuXG4qKVxuXG5cbigqIFdlIG1ha2UgdXNlIG9mIHR3byBzcGVjaWFsIHRhZ3MgcHJvdmlkZWQgYnkgdGhlIHJ1bnRpbWU6XG4gICBbbGF6eV90YWddIGFuZCBbZm9yd2FyZF90YWddLlxuXG4gICBBIHZhbHVlIG9mIHR5cGUgWydhIExhenkudF0gY2FuIGJlIG9uZSBvZiB0aHJlZSB0aGluZ3M6XG4gICAxLiBBIGJsb2NrIG9mIHNpemUgMSB3aXRoIHRhZyBbbGF6eV90YWddLiAgSXRzIGZpZWxkIGlzIGEgY2xvc3VyZSBvZlxuICAgICAgdHlwZSBbdW5pdCAtPiAnYV0gdGhhdCBjb21wdXRlcyB0aGUgdmFsdWUuXG4gICAyLiBBIGJsb2NrIG9mIHNpemUgMSB3aXRoIHRhZyBbZm9yd2FyZF90YWddLiAgSXRzIGZpZWxkIGlzIHRoZSB2YWx1ZVxuICAgICAgb2YgdHlwZSBbJ2FdIHRoYXQgd2FzIGNvbXB1dGVkLlxuICAgMy4gQW55dGhpbmcgZWxzZSBleGNlcHQgYSBmbG9hdC4gIFRoaXMgaGFzIHR5cGUgWydhXSBhbmQgaXMgdGhlIHZhbHVlXG4gICAgICB0aGF0IHdhcyBjb21wdXRlZC5cbiAgIEV4Y2VwdGlvbnMgYXJlIHN0b3JlZCBpbiBmb3JtYXQgKDEpLlxuICAgVGhlIEdDIHdpbGwgbWFnaWNhbGx5IGNoYW5nZSB0aGluZ3MgZnJvbSAoMikgdG8gKDMpIGFjY29yZGluZyB0byBpdHNcbiAgIGZhbmN5LlxuXG4gICBXZSBjYW5ub3QgdXNlIHJlcHJlc2VudGF0aW9uICgzKSBmb3IgYSBbZmxvYXQgTGF6eS50XSBiZWNhdXNlXG4gICBbY2FtbF9tYWtlX2FycmF5XSBhc3N1bWVzIHRoYXQgb25seSBhIFtmbG9hdF0gdmFsdWUgY2FuIGhhdmUgdGFnXG4gICBbRG91YmxlX3RhZ10uXG5cbiAgIFdlIGhhdmUgdG8gdXNlIHRoZSBidWlsdC1pbiB0eXBlIGNvbnN0cnVjdG9yIFtsYXp5X3RdIHRvXG4gICBsZXQgdGhlIGNvbXBpbGVyIGltcGxlbWVudCB0aGUgc3BlY2lhbCB0eXBpbmcgYW5kIGNvbXBpbGF0aW9uXG4gICBydWxlcyBmb3IgdGhlIFtsYXp5XSBrZXl3b3JkLlxuKilcblxudHlwZSAnYSB0ID0gJ2EgbGF6eV90OztcblxuZXhjZXB0aW9uIFVuZGVmaW5lZCA9IENhbWxpbnRlcm5hbExhenkuVW5kZWZpbmVkOztcblxuZXh0ZXJuYWwgbWFrZV9mb3J3YXJkIDogJ2EgLT4gJ2EgbGF6eV90ID0gXCJjYW1sX2xhenlfbWFrZV9mb3J3YXJkXCI7O1xuXG5leHRlcm5hbCBmb3JjZSA6ICdhIHQgLT4gJ2EgPSBcIiVsYXp5X2ZvcmNlXCI7O1xuXG4oKiBsZXQgZm9yY2UgPSBmb3JjZTs7ICopXG5cbmxldCBmb3JjZV92YWwgPSBDYW1saW50ZXJuYWxMYXp5LmZvcmNlX3ZhbDs7XG5cbmxldCBmcm9tX2Z1biAoZiA6IHVuaXQgLT4gJ2FyZykgPVxuICBsZXQgeCA9IE9iai5uZXdfYmxvY2sgT2JqLmxhenlfdGFnIDEgaW5cbiAgT2JqLnNldF9maWVsZCB4IDAgKE9iai5yZXByIGYpO1xuICAoT2JqLm9iaiB4IDogJ2FyZyB0KVxuOztcblxubGV0IGZyb21fdmFsICh2IDogJ2FyZykgPVxuICBsZXQgdCA9IE9iai50YWcgKE9iai5yZXByIHYpIGluXG4gIGlmIHQgPSBPYmouZm9yd2FyZF90YWcgfHwgdCA9IE9iai5sYXp5X3RhZyB8fCB0ID0gT2JqLmRvdWJsZV90YWcgdGhlbiBiZWdpblxuICAgIG1ha2VfZm9yd2FyZCB2XG4gIGVuZCBlbHNlIGJlZ2luXG4gICAgKE9iai5tYWdpYyB2IDogJ2FyZyB0KVxuICBlbmRcbjs7XG5cbmxldCBpc192YWwgKGwgOiAnYXJnIHQpID0gT2JqLnRhZyAoT2JqLnJlcHIgbCkgPD4gT2JqLmxhenlfdGFnOztcblxubGV0IGxhenlfZnJvbV9mdW4gPSBmcm9tX2Z1bjs7XG5cbmxldCBsYXp5X2Zyb21fdmFsID0gZnJvbV92YWw7O1xuXG5sZXQgbGF6eV9pc192YWwgPSBpc192YWw7O1xuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgIERhbmllbCBkZSBSYXVnbGF1ZHJlLCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk3IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBUaGUgZmllbGRzIG9mIHR5cGUgdCBhcmUgbm90IG11dGFibGUgdG8gcHJlc2VydmUgcG9seW1vcnBoaXNtIG9mXG4gICB0aGUgZW1wdHkgc3RyZWFtLiBUaGlzIGlzIHR5cGUgc2FmZSBiZWNhdXNlIHRoZSBlbXB0eSBzdHJlYW0gaXMgbmV2ZXJcbiAgIHBhdGNoZWQuICopXG5cbnR5cGUgJ2EgdCA9IHsgY291bnQgOiBpbnQ7IGRhdGEgOiAnYSBkYXRhIH1cbmFuZCAnYSBkYXRhID1cbiAgICBTZW1wdHlcbiAgfCBTY29ucyBvZiAnYSAqICdhIGRhdGFcbiAgfCBTYXBwIG9mICdhIGRhdGEgKiAnYSBkYXRhXG4gIHwgU2xhenkgb2YgJ2EgZGF0YSBMYXp5LnRcbiAgfCBTZ2VuIG9mICdhIGdlblxuICB8IFNidWZmaW8gb2YgYnVmZmlvXG5hbmQgJ2EgZ2VuID0geyBtdXRhYmxlIGN1cnIgOiAnYSBvcHRpb24gb3B0aW9uOyBmdW5jIDogaW50IC0+ICdhIG9wdGlvbiB9XG5hbmQgYnVmZmlvID1cbiAgeyBpYyA6IGluX2NoYW5uZWw7IGJ1ZmYgOiBieXRlczsgbXV0YWJsZSBsZW4gOiBpbnQ7IG11dGFibGUgaW5kIDogaW50IH1cbjs7XG5leGNlcHRpb24gRmFpbHVyZTs7XG5leGNlcHRpb24gRXJyb3Igb2Ygc3RyaW5nOztcblxuZXh0ZXJuYWwgY291bnQgOiAnYSB0IC0+IGludCA9IFwiJWZpZWxkMFwiOztcbmV4dGVybmFsIHNldF9jb3VudCA6ICdhIHQgLT4gaW50IC0+IHVuaXQgPSBcIiVzZXRmaWVsZDBcIjs7XG5sZXQgc2V0X2RhdGEgKHMgOiAnYSB0KSAoZCA6ICdhIGRhdGEpID1cbiAgT2JqLnNldF9maWVsZCAoT2JqLnJlcHIgcykgMSAoT2JqLnJlcHIgZClcbjs7XG5cbmxldCBmaWxsX2J1ZmYgYiA9XG4gIGIubGVuIDwtIGlucHV0IGIuaWMgYi5idWZmIDAgKEJ5dGVzLmxlbmd0aCBiLmJ1ZmYpOyBiLmluZCA8LSAwXG47O1xuXG5sZXQgcmVjIGdldF9kYXRhIGNvdW50IGQgPSBtYXRjaCBkIHdpdGhcbiAoKiBSZXR1cm5zIGVpdGhlciBTZW1wdHkgb3IgU2NvbnMoYSwgXykgZXZlbiB3aGVuIGQgaXMgYSBnZW5lcmF0b3JcbiAgICBvciBhIGJ1ZmZlci4gSW4gdGhvc2UgY2FzZXMsIHRoZSBpdGVtIGEgaXMgc2VlbiBhcyBleHRyYWN0ZWQgZnJvbVxuIHRoZSBnZW5lcmF0b3IvYnVmZmVyLlxuIFRoZSBjb3VudCBwYXJhbWV0ZXIgaXMgdXNlZCBmb3IgY2FsbGluZyBgU2dlbi1mdW5jdGlvbnMnLiAgKilcbiAgIFNlbXB0eSB8IFNjb25zIChfLCBfKSAtPiBkXG4gfCBTYXBwIChkMSwgZDIpIC0+XG4gICAgIGJlZ2luIG1hdGNoIGdldF9kYXRhIGNvdW50IGQxIHdpdGhcbiAgICAgICBTY29ucyAoYSwgZDExKSAtPiBTY29ucyAoYSwgU2FwcCAoZDExLCBkMikpXG4gICAgIHwgU2VtcHR5IC0+IGdldF9kYXRhIGNvdW50IGQyXG4gICAgIHwgXyAtPiBhc3NlcnQgZmFsc2VcbiAgICAgZW5kXG4gfCBTZ2VuIHtjdXJyID0gU29tZSBOb25lOyBmdW5jID0gXyB9IC0+IFNlbXB0eVxuIHwgU2dlbiAoe2N1cnIgPSBTb21lKFNvbWUgYSk7IGZ1bmMgPSBmfSBhcyBnKSAtPlxuICAgICBnLmN1cnIgPC0gTm9uZTsgU2NvbnMoYSwgZClcbiB8IFNnZW4gZyAtPlxuICAgICBiZWdpbiBtYXRjaCBnLmZ1bmMgY291bnQgd2l0aFxuICAgICAgIE5vbmUgLT4gZy5jdXJyIDwtIFNvbWUoTm9uZSk7IFNlbXB0eVxuICAgICB8IFNvbWUgYSAtPiBTY29ucyhhLCBkKVxuICAgICAgICAgKCogV2FybmluZzogYW55b25lIHVzaW5nIGcgdGhpbmtzIHRoYXQgYW4gaXRlbSBoYXMgYmVlbiByZWFkICopXG4gICAgIGVuZFxuIHwgU2J1ZmZpbyBiIC0+XG4gICAgIGlmIGIuaW5kID49IGIubGVuIHRoZW4gZmlsbF9idWZmIGI7XG4gICAgIGlmIGIubGVuID09IDAgdGhlbiBTZW1wdHkgZWxzZVxuICAgICAgIGxldCByID0gT2JqLm1hZ2ljIChCeXRlcy51bnNhZmVfZ2V0IGIuYnVmZiBiLmluZCkgaW5cbiAgICAgICAoKiBXYXJuaW5nOiBhbnlvbmUgdXNpbmcgZyB0aGlua3MgdGhhdCBhbiBpdGVtIGhhcyBiZWVuIHJlYWQgKilcbiAgICAgICBiLmluZCA8LSBzdWNjIGIuaW5kOyBTY29ucyhyLCBkKVxuIHwgU2xhenkgZiAtPiBnZXRfZGF0YSBjb3VudCAoTGF6eS5mb3JjZSBmKVxuOztcblxubGV0IHJlYyBwZWVrIHMgPVxuICgqIGNvbnN1bHQgdGhlIGZpcnN0IGl0ZW0gb2YgcyAqKVxuIG1hdGNoIHMuZGF0YSB3aXRoXG4gICBTZW1wdHkgLT4gTm9uZVxuIHwgU2NvbnMgKGEsIF8pIC0+IFNvbWUgYVxuIHwgU2FwcCAoXywgXykgLT5cbiAgICAgYmVnaW4gbWF0Y2ggZ2V0X2RhdGEgcy5jb3VudCBzLmRhdGEgd2l0aFxuICAgICAgIFNjb25zKGEsIF8pIGFzIGQgLT4gc2V0X2RhdGEgcyBkOyBTb21lIGFcbiAgICAgfCBTZW1wdHkgLT4gTm9uZVxuICAgICB8IF8gLT4gYXNzZXJ0IGZhbHNlXG4gICAgIGVuZFxuIHwgU2xhenkgZiAtPiBzZXRfZGF0YSBzIChMYXp5LmZvcmNlIGYpOyBwZWVrIHNcbiB8IFNnZW4ge2N1cnIgPSBTb21lIGF9IC0+IGFcbiB8IFNnZW4gZyAtPiBsZXQgeCA9IGcuZnVuYyBzLmNvdW50IGluIGcuY3VyciA8LSBTb21lIHg7IHhcbiB8IFNidWZmaW8gYiAtPlxuICAgICBpZiBiLmluZCA+PSBiLmxlbiB0aGVuIGZpbGxfYnVmZiBiO1xuICAgICBpZiBiLmxlbiA9PSAwIHRoZW4gYmVnaW4gc2V0X2RhdGEgcyBTZW1wdHk7IE5vbmUgZW5kXG4gICAgIGVsc2UgU29tZSAoT2JqLm1hZ2ljIChCeXRlcy51bnNhZmVfZ2V0IGIuYnVmZiBiLmluZCkpXG47O1xuXG5sZXQgcmVjIGp1bmsgcyA9XG4gIG1hdGNoIHMuZGF0YSB3aXRoXG4gICAgU2NvbnMgKF8sIGQpIC0+IHNldF9jb3VudCBzIChzdWNjIHMuY291bnQpOyBzZXRfZGF0YSBzIGRcbiAgfCBTZ2VuICh7Y3VyciA9IFNvbWUgX30gYXMgZykgLT4gc2V0X2NvdW50IHMgKHN1Y2Mgcy5jb3VudCk7IGcuY3VyciA8LSBOb25lXG4gIHwgU2J1ZmZpbyBiIC0+IHNldF9jb3VudCBzIChzdWNjIHMuY291bnQpOyBiLmluZCA8LSBzdWNjIGIuaW5kXG4gIHwgXyAtPlxuICAgICAgbWF0Y2ggcGVlayBzIHdpdGhcbiAgICAgICAgTm9uZSAtPiAoKVxuICAgICAgfCBTb21lIF8gLT4ganVuayBzXG47O1xuXG5sZXQgcmVjIG5nZXQgbiBzID1cbiAgaWYgbiA8PSAwIHRoZW4gW10sIHMuZGF0YSwgMFxuICBlbHNlXG4gICAgbWF0Y2ggcGVlayBzIHdpdGhcbiAgICAgIFNvbWUgYSAtPlxuICAgICAgICBqdW5rIHM7XG4gICAgICAgIGxldCAoYWwsIGQsIGspID0gbmdldCAocHJlZCBuKSBzIGluIGEgOjogYWwsIFNjb25zIChhLCBkKSwgc3VjYyBrXG4gICAgfCBOb25lIC0+IFtdLCBzLmRhdGEsIDBcbjs7XG5cbmxldCBucGVlayBuIHMgPVxuICBsZXQgKGFsLCBkLCBsZW4pID0gbmdldCBuIHMgaW4gc2V0X2NvdW50IHMgKHMuY291bnQgLSBsZW4pOyBzZXRfZGF0YSBzIGQ7IGFsXG47O1xuXG5sZXQgbmV4dCBzID1cbiAgbWF0Y2ggcGVlayBzIHdpdGhcbiAgICBTb21lIGEgLT4ganVuayBzOyBhXG4gIHwgTm9uZSAtPiByYWlzZSBGYWlsdXJlXG47O1xuXG5sZXQgZW1wdHkgcyA9XG4gIG1hdGNoIHBlZWsgcyB3aXRoXG4gICAgU29tZSBfIC0+IHJhaXNlIEZhaWx1cmVcbiAgfCBOb25lIC0+ICgpXG47O1xuXG5sZXQgaXRlciBmIHN0cm0gPVxuICBsZXQgcmVjIGRvX3JlYyAoKSA9XG4gICAgbWF0Y2ggcGVlayBzdHJtIHdpdGhcbiAgICAgIFNvbWUgYSAtPiBqdW5rIHN0cm07IGlnbm9yZShmIGEpOyBkb19yZWMgKClcbiAgICB8IE5vbmUgLT4gKClcbiAgaW5cbiAgZG9fcmVjICgpXG47O1xuXG4oKiBTdHJlYW0gYnVpbGRpbmcgZnVuY3Rpb25zICopXG5cbmxldCBmcm9tIGYgPSB7Y291bnQgPSAwOyBkYXRhID0gU2dlbiB7Y3VyciA9IE5vbmU7IGZ1bmMgPSBmfX07O1xuXG5sZXQgb2ZfbGlzdCBsID1cbiAge2NvdW50ID0gMDsgZGF0YSA9IExpc3QuZm9sZF9yaWdodCAoZnVuIHggbCAtPiBTY29ucyAoeCwgbCkpIGwgU2VtcHR5fVxuOztcblxubGV0IG9mX3N0cmluZyBzID1cbiAgbGV0IGNvdW50ID0gcmVmIDAgaW5cbiAgZnJvbSAoZnVuIF8gLT5cbiAgICAoKiBXZSBjYW5ub3QgdXNlIHRoZSBpbmRleCBwYXNzZWQgYnkgdGhlIFtmcm9tXSBmdW5jdGlvbiBkaXJlY3RseVxuICAgICAgIGJlY2F1c2UgaXQgcmV0dXJucyB0aGUgY3VycmVudCBzdHJlYW0gY291bnQsIHdpdGggYWJzb2x1dGVseSBub1xuICAgICAgIGd1YXJhbnRlZSB0aGF0IGl0IHdpbGwgc3RhcnQgZnJvbSAwLiBGb3IgZXhhbXBsZSwgaW4gdGhlIGNhc2VcbiAgICAgICBvZiBbU3RyZWFtLmljb25zICdjJyAoU3RyZWFtLmZyb21fc3RyaW5nIFwiYWJcIildLCB0aGUgZmlyc3RcbiAgICAgICBhY2Nlc3MgdG8gdGhlIHN0cmluZyB3aWxsIGJlIG1hZGUgd2l0aCBjb3VudCBbMV0gYWxyZWFkeS5cbiAgICAqKVxuICAgIGxldCBjID0gIWNvdW50IGluXG4gICAgaWYgYyA8IFN0cmluZy5sZW5ndGggc1xuICAgIHRoZW4gKGluY3IgY291bnQ7IFNvbWUgcy5bY10pXG4gICAgZWxzZSBOb25lKVxuOztcblxubGV0IG9mX2J5dGVzIHMgPVxuICBsZXQgY291bnQgPSByZWYgMCBpblxuICBmcm9tIChmdW4gXyAtPlxuICAgIGxldCBjID0gIWNvdW50IGluXG4gICAgaWYgYyA8IEJ5dGVzLmxlbmd0aCBzXG4gICAgdGhlbiAoaW5jciBjb3VudDsgU29tZSAoQnl0ZXMuZ2V0IHMgYykpXG4gICAgZWxzZSBOb25lKVxuOztcblxubGV0IG9mX2NoYW5uZWwgaWMgPVxuICB7Y291bnQgPSAwO1xuICAgZGF0YSA9IFNidWZmaW8ge2ljID0gaWM7IGJ1ZmYgPSBCeXRlcy5jcmVhdGUgNDA5NjsgbGVuID0gMDsgaW5kID0gMH19XG47O1xuXG4oKiBTdHJlYW0gZXhwcmVzc2lvbnMgYnVpbGRlcnMgKilcblxubGV0IGlhcHAgaSBzID0ge2NvdW50ID0gMDsgZGF0YSA9IFNhcHAgKGkuZGF0YSwgcy5kYXRhKX07O1xubGV0IGljb25zIGkgcyA9IHtjb3VudCA9IDA7IGRhdGEgPSBTY29ucyAoaSwgcy5kYXRhKX07O1xubGV0IGlzaW5nIGkgPSB7Y291bnQgPSAwOyBkYXRhID0gU2NvbnMgKGksIFNlbXB0eSl9OztcblxubGV0IGxhcHAgZiBzID1cbiAge2NvdW50ID0gMDsgZGF0YSA9IFNsYXp5IChsYXp5KFNhcHAgKChmICgpKS5kYXRhLCBzLmRhdGEpKSl9XG47O1xubGV0IGxjb25zIGYgcyA9IHtjb3VudCA9IDA7IGRhdGEgPSBTbGF6eSAobGF6eShTY29ucyAoZiAoKSwgcy5kYXRhKSkpfTs7XG5sZXQgbHNpbmcgZiA9IHtjb3VudCA9IDA7IGRhdGEgPSBTbGF6eSAobGF6eShTY29ucyAoZiAoKSwgU2VtcHR5KSkpfTs7XG5cbmxldCBzZW1wdHkgPSB7Y291bnQgPSAwOyBkYXRhID0gU2VtcHR5fTs7XG5sZXQgc2xhenkgZiA9IHtjb3VudCA9IDA7IGRhdGEgPSBTbGF6eSAobGF6eShmICgpKS5kYXRhKX07O1xuXG4oKiBGb3IgZGVidWdnaW5nIHVzZSAqKVxuXG5sZXQgcmVjIGR1bXAgZiBzID1cbiAgcHJpbnRfc3RyaW5nIFwie2NvdW50ID0gXCI7XG4gIHByaW50X2ludCBzLmNvdW50O1xuICBwcmludF9zdHJpbmcgXCI7IGRhdGEgPSBcIjtcbiAgZHVtcF9kYXRhIGYgcy5kYXRhO1xuICBwcmludF9zdHJpbmcgXCJ9XCI7XG4gIHByaW50X25ld2xpbmUgKClcbmFuZCBkdW1wX2RhdGEgZiA9XG4gIGZ1bmN0aW9uXG4gICAgU2VtcHR5IC0+IHByaW50X3N0cmluZyBcIlNlbXB0eVwiXG4gIHwgU2NvbnMgKGEsIGQpIC0+XG4gICAgICBwcmludF9zdHJpbmcgXCJTY29ucyAoXCI7XG4gICAgICBmIGE7XG4gICAgICBwcmludF9zdHJpbmcgXCIsIFwiO1xuICAgICAgZHVtcF9kYXRhIGYgZDtcbiAgICAgIHByaW50X3N0cmluZyBcIilcIlxuICB8IFNhcHAgKGQxLCBkMikgLT5cbiAgICAgIHByaW50X3N0cmluZyBcIlNhcHAgKFwiO1xuICAgICAgZHVtcF9kYXRhIGYgZDE7XG4gICAgICBwcmludF9zdHJpbmcgXCIsIFwiO1xuICAgICAgZHVtcF9kYXRhIGYgZDI7XG4gICAgICBwcmludF9zdHJpbmcgXCIpXCJcbiAgfCBTbGF6eSBfIC0+IHByaW50X3N0cmluZyBcIlNsYXp5XCJcbiAgfCBTZ2VuIF8gLT4gcHJpbnRfc3RyaW5nIFwiU2dlblwiXG4gIHwgU2J1ZmZpbyBiIC0+IHByaW50X3N0cmluZyBcIlNidWZmaW9cIlxuOztcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgUGllcnJlIFdlaXMgYW5kIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5OSBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogRXh0ZW5zaWJsZSBidWZmZXJzICopXG5cbnR5cGUgdCA9XG4ge211dGFibGUgYnVmZmVyIDogYnl0ZXM7XG4gIG11dGFibGUgcG9zaXRpb24gOiBpbnQ7XG4gIG11dGFibGUgbGVuZ3RoIDogaW50O1xuICBpbml0aWFsX2J1ZmZlciA6IGJ5dGVzfVxuXG5sZXQgY3JlYXRlIG4gPVxuIGxldCBuID0gaWYgbiA8IDEgdGhlbiAxIGVsc2UgbiBpblxuIGxldCBuID0gaWYgbiA+IFN5cy5tYXhfc3RyaW5nX2xlbmd0aCB0aGVuIFN5cy5tYXhfc3RyaW5nX2xlbmd0aCBlbHNlIG4gaW5cbiBsZXQgcyA9IEJ5dGVzLmNyZWF0ZSBuIGluXG4ge2J1ZmZlciA9IHM7IHBvc2l0aW9uID0gMDsgbGVuZ3RoID0gbjsgaW5pdGlhbF9idWZmZXIgPSBzfVxuXG5sZXQgY29udGVudHMgYiA9IEJ5dGVzLnN1Yl9zdHJpbmcgYi5idWZmZXIgMCBiLnBvc2l0aW9uXG5sZXQgdG9fYnl0ZXMgYiA9IEJ5dGVzLnN1YiBiLmJ1ZmZlciAwIGIucG9zaXRpb25cblxubGV0IHN1YiBiIG9mcyBsZW4gPVxuICBpZiBvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gYi5wb3NpdGlvbiAtIGxlblxuICB0aGVuIGludmFsaWRfYXJnIFwiQnVmZmVyLnN1YlwiXG4gIGVsc2UgQnl0ZXMuc3ViX3N0cmluZyBiLmJ1ZmZlciBvZnMgbGVuXG47O1xuXG5sZXQgYmxpdCBzcmMgc3Jjb2ZmIGRzdCBkc3RvZmYgbGVuID1cbiAgaWYgbGVuIDwgMCB8fCBzcmNvZmYgPCAwIHx8IHNyY29mZiA+IHNyYy5wb3NpdGlvbiAtIGxlblxuICAgICAgICAgICAgIHx8IGRzdG9mZiA8IDAgfHwgZHN0b2ZmID4gKEJ5dGVzLmxlbmd0aCBkc3QpIC0gbGVuXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJCdWZmZXIuYmxpdFwiXG4gIGVsc2VcbiAgICBCeXRlcy5ibGl0IHNyYy5idWZmZXIgc3Jjb2ZmIGRzdCBkc3RvZmYgbGVuXG47O1xuXG5sZXQgbnRoIGIgb2ZzID1cbiAgaWYgb2ZzIDwgMCB8fCBvZnMgPj0gYi5wb3NpdGlvbiB0aGVuXG4gICBpbnZhbGlkX2FyZyBcIkJ1ZmZlci5udGhcIlxuICBlbHNlIEJ5dGVzLnVuc2FmZV9nZXQgYi5idWZmZXIgb2ZzXG47O1xuXG5sZXQgbGVuZ3RoIGIgPSBiLnBvc2l0aW9uXG5cbmxldCBjbGVhciBiID0gYi5wb3NpdGlvbiA8LSAwXG5cbmxldCByZXNldCBiID1cbiAgYi5wb3NpdGlvbiA8LSAwOyBiLmJ1ZmZlciA8LSBiLmluaXRpYWxfYnVmZmVyO1xuICBiLmxlbmd0aCA8LSBCeXRlcy5sZW5ndGggYi5idWZmZXJcblxubGV0IHJlc2l6ZSBiIG1vcmUgPVxuICBsZXQgbGVuID0gYi5sZW5ndGggaW5cbiAgbGV0IG5ld19sZW4gPSByZWYgbGVuIGluXG4gIHdoaWxlIGIucG9zaXRpb24gKyBtb3JlID4gIW5ld19sZW4gZG8gbmV3X2xlbiA6PSAyICogIW5ld19sZW4gZG9uZTtcbiAgaWYgIW5ld19sZW4gPiBTeXMubWF4X3N0cmluZ19sZW5ndGggdGhlbiBiZWdpblxuICAgIGlmIGIucG9zaXRpb24gKyBtb3JlIDw9IFN5cy5tYXhfc3RyaW5nX2xlbmd0aFxuICAgIHRoZW4gbmV3X2xlbiA6PSBTeXMubWF4X3N0cmluZ19sZW5ndGhcbiAgICBlbHNlIGZhaWx3aXRoIFwiQnVmZmVyLmFkZDogY2Fubm90IGdyb3cgYnVmZmVyXCJcbiAgZW5kO1xuICBsZXQgbmV3X2J1ZmZlciA9IEJ5dGVzLmNyZWF0ZSAhbmV3X2xlbiBpblxuICBCeXRlcy5ibGl0IGIuYnVmZmVyIDAgbmV3X2J1ZmZlciAwIGIucG9zaXRpb247XG4gIGIuYnVmZmVyIDwtIG5ld19idWZmZXI7XG4gIGIubGVuZ3RoIDwtICFuZXdfbGVuXG5cbmxldCBhZGRfY2hhciBiIGMgPVxuICBsZXQgcG9zID0gYi5wb3NpdGlvbiBpblxuICBpZiBwb3MgPj0gYi5sZW5ndGggdGhlbiByZXNpemUgYiAxO1xuICBCeXRlcy51bnNhZmVfc2V0IGIuYnVmZmVyIHBvcyBjO1xuICBiLnBvc2l0aW9uIDwtIHBvcyArIDFcblxubGV0IGFkZF9zdWJzdHJpbmcgYiBzIG9mZnNldCBsZW4gPVxuICBpZiBvZmZzZXQgPCAwIHx8IGxlbiA8IDAgfHwgb2Zmc2V0ICsgbGVuID4gU3RyaW5nLmxlbmd0aCBzXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJCdWZmZXIuYWRkX3N1YnN0cmluZy9hZGRfc3ViYnl0ZXNcIjtcbiAgbGV0IG5ld19wb3NpdGlvbiA9IGIucG9zaXRpb24gKyBsZW4gaW5cbiAgaWYgbmV3X3Bvc2l0aW9uID4gYi5sZW5ndGggdGhlbiByZXNpemUgYiBsZW47XG4gIEJ5dGVzLmJsaXRfc3RyaW5nIHMgb2Zmc2V0IGIuYnVmZmVyIGIucG9zaXRpb24gbGVuO1xuICBiLnBvc2l0aW9uIDwtIG5ld19wb3NpdGlvblxuXG5sZXQgYWRkX3N1YmJ5dGVzIGIgcyBvZmZzZXQgbGVuID1cbiAgYWRkX3N1YnN0cmluZyBiIChCeXRlcy51bnNhZmVfdG9fc3RyaW5nIHMpIG9mZnNldCBsZW5cblxubGV0IGFkZF9zdHJpbmcgYiBzID1cbiAgbGV0IGxlbiA9IFN0cmluZy5sZW5ndGggcyBpblxuICBsZXQgbmV3X3Bvc2l0aW9uID0gYi5wb3NpdGlvbiArIGxlbiBpblxuICBpZiBuZXdfcG9zaXRpb24gPiBiLmxlbmd0aCB0aGVuIHJlc2l6ZSBiIGxlbjtcbiAgQnl0ZXMuYmxpdF9zdHJpbmcgcyAwIGIuYnVmZmVyIGIucG9zaXRpb24gbGVuO1xuICBiLnBvc2l0aW9uIDwtIG5ld19wb3NpdGlvblxuXG5sZXQgYWRkX2J5dGVzIGIgcyA9IGFkZF9zdHJpbmcgYiAoQnl0ZXMudW5zYWZlX3RvX3N0cmluZyBzKVxuXG5sZXQgYWRkX2J1ZmZlciBiIGJzID1cbiAgYWRkX3N1YmJ5dGVzIGIgYnMuYnVmZmVyIDAgYnMucG9zaXRpb25cblxubGV0IGFkZF9jaGFubmVsIGIgaWMgbGVuID1cbiAgaWYgbGVuIDwgMCB8fCBsZW4gPiBTeXMubWF4X3N0cmluZ19sZW5ndGggdGhlbiAgICgqIFBSIzUwMDQgKilcbiAgICBpbnZhbGlkX2FyZyBcIkJ1ZmZlci5hZGRfY2hhbm5lbFwiO1xuICBpZiBiLnBvc2l0aW9uICsgbGVuID4gYi5sZW5ndGggdGhlbiByZXNpemUgYiBsZW47XG4gIHJlYWxseV9pbnB1dCBpYyBiLmJ1ZmZlciBiLnBvc2l0aW9uIGxlbjtcbiAgYi5wb3NpdGlvbiA8LSBiLnBvc2l0aW9uICsgbGVuXG5cbmxldCBvdXRwdXRfYnVmZmVyIG9jIGIgPVxuICBvdXRwdXQgb2MgYi5idWZmZXIgMCBiLnBvc2l0aW9uXG5cbmxldCBjbG9zaW5nID0gZnVuY3Rpb25cbiAgfCAnKCcgLT4gJyknXG4gIHwgJ3snIC0+ICd9J1xuICB8IF8gLT4gYXNzZXJ0IGZhbHNlOztcblxuKCogb3BlbmluZyBhbmQgY2xvc2luZzogb3BlbiBhbmQgY2xvc2UgY2hhcmFjdGVycywgdHlwaWNhbGx5ICggYW5kIClcbiAgIGs6IGJhbGFuY2Ugb2Ygb3BlbmluZyBhbmQgY2xvc2luZyBjaGFyc1xuICAgczogdGhlIHN0cmluZyB3aGVyZSB3ZSBhcmUgc2VhcmNoaW5nXG4gICBzdGFydDogdGhlIGluZGV4IHdoZXJlIHdlIHN0YXJ0IHRoZSBzZWFyY2guICopXG5sZXQgYWR2YW5jZV90b19jbG9zaW5nIG9wZW5pbmcgY2xvc2luZyBrIHMgc3RhcnQgPVxuICBsZXQgcmVjIGFkdmFuY2UgayBpIGxpbSA9XG4gICAgaWYgaSA+PSBsaW0gdGhlbiByYWlzZSBOb3RfZm91bmQgZWxzZVxuICAgIGlmIHMuW2ldID0gb3BlbmluZyB0aGVuIGFkdmFuY2UgKGsgKyAxKSAoaSArIDEpIGxpbSBlbHNlXG4gICAgaWYgcy5baV0gPSBjbG9zaW5nIHRoZW5cbiAgICAgIGlmIGsgPSAwIHRoZW4gaSBlbHNlIGFkdmFuY2UgKGsgLSAxKSAoaSArIDEpIGxpbVxuICAgIGVsc2UgYWR2YW5jZSBrIChpICsgMSkgbGltIGluXG4gIGFkdmFuY2UgayBzdGFydCAoU3RyaW5nLmxlbmd0aCBzKTs7XG5cbmxldCBhZHZhbmNlX3RvX25vbl9hbHBoYSBzIHN0YXJ0ID1cbiAgbGV0IHJlYyBhZHZhbmNlIGkgbGltID1cbiAgICBpZiBpID49IGxpbSB0aGVuIGxpbSBlbHNlXG4gICAgbWF0Y2ggcy5baV0gd2l0aFxuICAgIHwgJ2EnIC4uICd6JyB8ICdBJyAuLiAnWicgfCAnMCcgLi4gJzknIHwgJ18nIC0+IGFkdmFuY2UgKGkgKyAxKSBsaW1cbiAgICB8IF8gLT4gaSBpblxuICBhZHZhbmNlIHN0YXJ0IChTdHJpbmcubGVuZ3RoIHMpOztcblxuKCogV2UgYXJlIGp1c3QgYXQgdGhlIGJlZ2lubmluZyBvZiBhbiBpZGVudCBpbiBzLCBzdGFydGluZyBhdCBzdGFydC4gKilcbmxldCBmaW5kX2lkZW50IHMgc3RhcnQgbGltID1cbiAgaWYgc3RhcnQgPj0gbGltIHRoZW4gcmFpc2UgTm90X2ZvdW5kIGVsc2VcbiAgbWF0Y2ggcy5bc3RhcnRdIHdpdGhcbiAgKCogUGFyZW50aGVzaXplZCBpZGVudCA/ICopXG4gIHwgJygnIHwgJ3snIGFzIGMgLT5cbiAgICAgbGV0IG5ld19zdGFydCA9IHN0YXJ0ICsgMSBpblxuICAgICBsZXQgc3RvcCA9IGFkdmFuY2VfdG9fY2xvc2luZyBjIChjbG9zaW5nIGMpIDAgcyBuZXdfc3RhcnQgaW5cbiAgICAgU3RyaW5nLnN1YiBzIG5ld19zdGFydCAoc3RvcCAtIHN0YXJ0IC0gMSksIHN0b3AgKyAxXG4gICgqIFJlZ3VsYXIgaWRlbnQgKilcbiAgfCBfIC0+XG4gICAgIGxldCBzdG9wID0gYWR2YW5jZV90b19ub25fYWxwaGEgcyAoc3RhcnQgKyAxKSBpblxuICAgICBTdHJpbmcuc3ViIHMgc3RhcnQgKHN0b3AgLSBzdGFydCksIHN0b3A7O1xuXG4oKiBTdWJzdGl0dXRlICRpZGVudCwgJChpZGVudCksIG9yICR7aWRlbnR9IGluIHMsXG4gICAgYWNjb3JkaW5nIHRvIHRoZSBmdW5jdGlvbiBtYXBwaW5nIGYuICopXG5sZXQgYWRkX3N1YnN0aXR1dGUgYiBmIHMgPVxuICBsZXQgbGltID0gU3RyaW5nLmxlbmd0aCBzIGluXG4gIGxldCByZWMgc3Vic3QgcHJldmlvdXMgaSA9XG4gICAgaWYgaSA8IGxpbSB0aGVuIGJlZ2luXG4gICAgICBtYXRjaCBzLltpXSB3aXRoXG4gICAgICB8ICckJyBhcyBjdXJyZW50IHdoZW4gcHJldmlvdXMgPSAnXFxcXCcgLT5cbiAgICAgICAgIGFkZF9jaGFyIGIgY3VycmVudDtcbiAgICAgICAgIHN1YnN0ICcgJyAoaSArIDEpXG4gICAgICB8ICckJyAtPlxuICAgICAgICAgbGV0IGogPSBpICsgMSBpblxuICAgICAgICAgbGV0IGlkZW50LCBuZXh0X2kgPSBmaW5kX2lkZW50IHMgaiBsaW0gaW5cbiAgICAgICAgIGFkZF9zdHJpbmcgYiAoZiBpZGVudCk7XG4gICAgICAgICBzdWJzdCAnICcgbmV4dF9pXG4gICAgICB8IGN1cnJlbnQgd2hlbiBwcmV2aW91cyA9PSAnXFxcXCcgLT5cbiAgICAgICAgIGFkZF9jaGFyIGIgJ1xcXFwnO1xuICAgICAgICAgYWRkX2NoYXIgYiBjdXJyZW50O1xuICAgICAgICAgc3Vic3QgJyAnIChpICsgMSlcbiAgICAgIHwgJ1xcXFwnIGFzIGN1cnJlbnQgLT5cbiAgICAgICAgIHN1YnN0IGN1cnJlbnQgKGkgKyAxKVxuICAgICAgfCBjdXJyZW50IC0+XG4gICAgICAgICBhZGRfY2hhciBiIGN1cnJlbnQ7XG4gICAgICAgICBzdWJzdCBjdXJyZW50IChpICsgMSlcbiAgICBlbmQgZWxzZVxuICAgIGlmIHByZXZpb3VzID0gJ1xcXFwnIHRoZW4gYWRkX2NoYXIgYiBwcmV2aW91cyBpblxuICBzdWJzdCAnICcgMDs7XG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgWGF2aWVyIExlcm95IGFuZCBQaWVycmUgV2VpcywgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbm9wZW4gQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzXG5vcGVuIENhbWxpbnRlcm5hbEZvcm1hdFxuXG5sZXQga2ZwcmludGYgayBvIChGb3JtYXQgKGZtdCwgXykpID1cbiAgbWFrZV9wcmludGYgKGZ1biBvIGFjYyAtPiBvdXRwdXRfYWNjIG8gYWNjOyBrIG8pIG8gRW5kX29mX2FjYyBmbXRcbmxldCBrYnByaW50ZiBrIGIgKEZvcm1hdCAoZm10LCBfKSkgPVxuICBtYWtlX3ByaW50ZiAoZnVuIGIgYWNjIC0+IGJ1ZnB1dF9hY2MgYiBhY2M7IGsgYikgYiBFbmRfb2ZfYWNjIGZtdFxubGV0IGlrZnByaW50ZiBrIG9jIChGb3JtYXQgKGZtdCwgXykpID1cbiAgbWFrZV9wcmludGYgKGZ1biBvYyBfIC0+IGsgb2MpIG9jIEVuZF9vZl9hY2MgZm10XG5cbmxldCBmcHJpbnRmIG9jIGZtdCA9IGtmcHJpbnRmIGlnbm9yZSBvYyBmbXRcbmxldCBicHJpbnRmIGIgZm10ID0ga2JwcmludGYgaWdub3JlIGIgZm10XG5sZXQgaWZwcmludGYgb2MgZm10ID0gaWtmcHJpbnRmIGlnbm9yZSBvYyBmbXRcbmxldCBwcmludGYgZm10ID0gZnByaW50ZiBzdGRvdXQgZm10XG5sZXQgZXByaW50ZiBmbXQgPSBmcHJpbnRmIHN0ZGVyciBmbXRcblxubGV0IGtzcHJpbnRmIGsgKEZvcm1hdCAoZm10LCBfKSkgPVxuICBsZXQgaycgKCkgYWNjID1cbiAgICBsZXQgYnVmID0gQnVmZmVyLmNyZWF0ZSA2NCBpblxuICAgIHN0cnB1dF9hY2MgYnVmIGFjYztcbiAgICBrIChCdWZmZXIuY29udGVudHMgYnVmKSBpblxuICBtYWtlX3ByaW50ZiBrJyAoKSBFbmRfb2ZfYWNjIGZtdFxuXG5sZXQgc3ByaW50ZiBmbXQgPSBrc3ByaW50ZiAoZnVuIHMgLT4gcykgZm10XG5cbmxldCBrcHJpbnRmID0ga3NwcmludGZcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgIERhbWllbiBEb2xpZ2V6LCBwcm9qZXQgUGFyYSwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxudHlwZSBrZXkgPSBzdHJpbmdcbnR5cGUgZG9jID0gc3RyaW5nXG50eXBlIHVzYWdlX21zZyA9IHN0cmluZ1xudHlwZSBhbm9uX2Z1biA9IChzdHJpbmcgLT4gdW5pdClcblxudHlwZSBzcGVjID1cbiAgfCBVbml0IG9mICh1bml0IC0+IHVuaXQpICAgICAoKiBDYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHVuaXQgYXJndW1lbnQgKilcbiAgfCBCb29sIG9mIChib29sIC0+IHVuaXQpICAgICAoKiBDYWxsIHRoZSBmdW5jdGlvbiB3aXRoIGEgYm9vbCBhcmd1bWVudCAqKVxuICB8IFNldCBvZiBib29sIHJlZiAgICAgICAgICAgICgqIFNldCB0aGUgcmVmZXJlbmNlIHRvIHRydWUgKilcbiAgfCBDbGVhciBvZiBib29sIHJlZiAgICAgICAgICAoKiBTZXQgdGhlIHJlZmVyZW5jZSB0byBmYWxzZSAqKVxuICB8IFN0cmluZyBvZiAoc3RyaW5nIC0+IHVuaXQpICgqIENhbGwgdGhlIGZ1bmN0aW9uIHdpdGggYSBzdHJpbmcgYXJndW1lbnQgKilcbiAgfCBTZXRfc3RyaW5nIG9mIHN0cmluZyByZWYgICAoKiBTZXQgdGhlIHJlZmVyZW5jZSB0byB0aGUgc3RyaW5nIGFyZ3VtZW50ICopXG4gIHwgSW50IG9mIChpbnQgLT4gdW5pdCkgICAgICAgKCogQ2FsbCB0aGUgZnVuY3Rpb24gd2l0aCBhbiBpbnQgYXJndW1lbnQgKilcbiAgfCBTZXRfaW50IG9mIGludCByZWYgICAgICAgICAoKiBTZXQgdGhlIHJlZmVyZW5jZSB0byB0aGUgaW50IGFyZ3VtZW50ICopXG4gIHwgRmxvYXQgb2YgKGZsb2F0IC0+IHVuaXQpICAgKCogQ2FsbCB0aGUgZnVuY3Rpb24gd2l0aCBhIGZsb2F0IGFyZ3VtZW50ICopXG4gIHwgU2V0X2Zsb2F0IG9mIGZsb2F0IHJlZiAgICAgKCogU2V0IHRoZSByZWZlcmVuY2UgdG8gdGhlIGZsb2F0IGFyZ3VtZW50ICopXG4gIHwgVHVwbGUgb2Ygc3BlYyBsaXN0ICAgICAgICAgKCogVGFrZSBzZXZlcmFsIGFyZ3VtZW50cyBhY2NvcmRpbmcgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlYyBsaXN0ICopXG4gIHwgU3ltYm9sIG9mIHN0cmluZyBsaXN0ICogKHN0cmluZyAtPiB1bml0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIFRha2Ugb25lIG9mIHRoZSBzeW1ib2xzIGFzIGFyZ3VtZW50IGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHN5bWJvbC4gKilcbiAgfCBSZXN0IG9mIChzdHJpbmcgLT4gdW5pdCkgICAoKiBTdG9wIGludGVycHJldGluZyBrZXl3b3JkcyBhbmQgY2FsbCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB3aXRoIGVhY2ggcmVtYWluaW5nIGFyZ3VtZW50ICopXG5cbmV4Y2VwdGlvbiBCYWQgb2Ygc3RyaW5nXG5leGNlcHRpb24gSGVscCBvZiBzdHJpbmdcblxudHlwZSBlcnJvciA9XG4gIHwgVW5rbm93biBvZiBzdHJpbmdcbiAgfCBXcm9uZyBvZiBzdHJpbmcgKiBzdHJpbmcgKiBzdHJpbmcgICgqIG9wdGlvbiwgYWN0dWFsLCBleHBlY3RlZCAqKVxuICB8IE1pc3Npbmcgb2Ygc3RyaW5nXG4gIHwgTWVzc2FnZSBvZiBzdHJpbmdcblxuZXhjZXB0aW9uIFN0b3Agb2YgZXJyb3I7OyAoKiB1c2VkIGludGVybmFsbHkgKilcblxub3BlbiBQcmludGZcblxubGV0IHJlYyBhc3NvYzMgeCBsID1cbiAgbWF0Y2ggbCB3aXRoXG4gIHwgW10gLT4gcmFpc2UgTm90X2ZvdW5kXG4gIHwgKHkxLCB5MiwgeTMpIDo6IHQgd2hlbiB5MSA9IHggLT4geTJcbiAgfCBfIDo6IHQgLT4gYXNzb2MzIHggdFxuOztcblxubGV0IG1ha2Vfc3ltbGlzdCBwcmVmaXggc2VwIHN1ZmZpeCBsID1cbiAgbWF0Y2ggbCB3aXRoXG4gIHwgW10gLT4gXCI8bm9uZT5cIlxuICB8IGg6OnQgLT4gKExpc3QuZm9sZF9sZWZ0IChmdW4geCB5IC0+IHggXiBzZXAgXiB5KSAocHJlZml4IF4gaCkgdCkgXiBzdWZmaXhcbjs7XG5cbmxldCBwcmludF9zcGVjIGJ1ZiAoa2V5LCBzcGVjLCBkb2MpID1cbiAgaWYgU3RyaW5nLmxlbmd0aCBkb2MgPiAwIHRoZW5cbiAgICBtYXRjaCBzcGVjIHdpdGhcbiAgICB8IFN5bWJvbCAobCwgXykgLT5cbiAgICAgICAgYnByaW50ZiBidWYgXCIgICVzICVzJXNcXG5cIiBrZXkgKG1ha2Vfc3ltbGlzdCBcIntcIiBcInxcIiBcIn1cIiBsKSBkb2NcbiAgICB8IF8gLT5cbiAgICAgICAgYnByaW50ZiBidWYgXCIgICVzICVzXFxuXCIga2V5IGRvY1xuOztcblxubGV0IGhlbHBfYWN0aW9uICgpID0gcmFpc2UgKFN0b3AgKFVua25vd24gXCItaGVscFwiKSk7O1xuXG5sZXQgYWRkX2hlbHAgc3BlY2xpc3QgPVxuICBsZXQgYWRkMSA9XG4gICAgdHJ5IGlnbm9yZSAoYXNzb2MzIFwiLWhlbHBcIiBzcGVjbGlzdCk7IFtdXG4gICAgd2l0aCBOb3RfZm91bmQgLT5cbiAgICAgICAgICAgIFtcIi1oZWxwXCIsIFVuaXQgaGVscF9hY3Rpb24sIFwiIERpc3BsYXkgdGhpcyBsaXN0IG9mIG9wdGlvbnNcIl1cbiAgYW5kIGFkZDIgPVxuICAgIHRyeSBpZ25vcmUgKGFzc29jMyBcIi0taGVscFwiIHNwZWNsaXN0KTsgW11cbiAgICB3aXRoIE5vdF9mb3VuZCAtPlxuICAgICAgICAgICAgW1wiLS1oZWxwXCIsIFVuaXQgaGVscF9hY3Rpb24sIFwiIERpc3BsYXkgdGhpcyBsaXN0IG9mIG9wdGlvbnNcIl1cbiAgaW5cbiAgc3BlY2xpc3QgQCAoYWRkMSBAIGFkZDIpXG47O1xuXG5sZXQgdXNhZ2VfYiBidWYgc3BlY2xpc3QgZXJybXNnID1cbiAgYnByaW50ZiBidWYgXCIlc1xcblwiIGVycm1zZztcbiAgTGlzdC5pdGVyIChwcmludF9zcGVjIGJ1ZikgKGFkZF9oZWxwIHNwZWNsaXN0KTtcbjs7XG5cbmxldCB1c2FnZV9zdHJpbmcgc3BlY2xpc3QgZXJybXNnID1cbiAgbGV0IGIgPSBCdWZmZXIuY3JlYXRlIDIwMCBpblxuICB1c2FnZV9iIGIgc3BlY2xpc3QgZXJybXNnO1xuICBCdWZmZXIuY29udGVudHMgYjtcbjs7XG5cbmxldCB1c2FnZSBzcGVjbGlzdCBlcnJtc2cgPVxuICBlcHJpbnRmIFwiJXNcIiAodXNhZ2Vfc3RyaW5nIHNwZWNsaXN0IGVycm1zZyk7XG47O1xuXG5sZXQgY3VycmVudCA9IHJlZiAwOztcblxubGV0IHBhcnNlX2FyZ3ZfZHluYW1pYyA/KGN1cnJlbnQ9Y3VycmVudCkgYXJndiBzcGVjbGlzdCBhbm9uZnVuIGVycm1zZyA9XG4gIGxldCBsID0gQXJyYXkubGVuZ3RoIGFyZ3YgaW5cbiAgbGV0IGIgPSBCdWZmZXIuY3JlYXRlIDIwMCBpblxuICBsZXQgaW5pdHBvcyA9ICFjdXJyZW50IGluXG4gIGxldCBzdG9wIGVycm9yID1cbiAgICBsZXQgcHJvZ25hbWUgPSBpZiBpbml0cG9zIDwgbCB0aGVuIGFyZ3YuKGluaXRwb3MpIGVsc2UgXCIoPylcIiBpblxuICAgIGJlZ2luIG1hdGNoIGVycm9yIHdpdGhcbiAgICAgIHwgVW5rbm93biBcIi1oZWxwXCIgLT4gKClcbiAgICAgIHwgVW5rbm93biBcIi0taGVscFwiIC0+ICgpXG4gICAgICB8IFVua25vd24gcyAtPlxuICAgICAgICAgIGJwcmludGYgYiBcIiVzOiB1bmtub3duIG9wdGlvbiAnJXMnLlxcblwiIHByb2duYW1lIHNcbiAgICAgIHwgTWlzc2luZyBzIC0+XG4gICAgICAgICAgYnByaW50ZiBiIFwiJXM6IG9wdGlvbiAnJXMnIG5lZWRzIGFuIGFyZ3VtZW50LlxcblwiIHByb2duYW1lIHNcbiAgICAgIHwgV3JvbmcgKG9wdCwgYXJnLCBleHBlY3RlZCkgLT5cbiAgICAgICAgICBicHJpbnRmIGIgXCIlczogd3JvbmcgYXJndW1lbnQgJyVzJzsgb3B0aW9uICclcycgZXhwZWN0cyAlcy5cXG5cIlxuICAgICAgICAgICAgICAgICAgcHJvZ25hbWUgYXJnIG9wdCBleHBlY3RlZFxuICAgICAgfCBNZXNzYWdlIHMgLT5cbiAgICAgICAgICBicHJpbnRmIGIgXCIlczogJXMuXFxuXCIgcHJvZ25hbWUgc1xuICAgIGVuZDtcbiAgICB1c2FnZV9iIGIgIXNwZWNsaXN0IGVycm1zZztcbiAgICBpZiBlcnJvciA9IFVua25vd24gXCItaGVscFwiIHx8IGVycm9yID0gVW5rbm93biBcIi0taGVscFwiXG4gICAgdGhlbiByYWlzZSAoSGVscCAoQnVmZmVyLmNvbnRlbnRzIGIpKVxuICAgIGVsc2UgcmFpc2UgKEJhZCAoQnVmZmVyLmNvbnRlbnRzIGIpKVxuICBpblxuICBpbmNyIGN1cnJlbnQ7XG4gIHdoaWxlICFjdXJyZW50IDwgbCBkb1xuICAgIGxldCBzID0gYXJndi4oIWN1cnJlbnQpIGluXG4gICAgaWYgU3RyaW5nLmxlbmd0aCBzID49IDEgJiYgcy5bMF0gPSAnLScgdGhlbiBiZWdpblxuICAgICAgbGV0IGFjdGlvbiA9XG4gICAgICAgIHRyeSBhc3NvYzMgcyAhc3BlY2xpc3RcbiAgICAgICAgd2l0aCBOb3RfZm91bmQgLT4gc3RvcCAoVW5rbm93biBzKVxuICAgICAgaW5cbiAgICAgIGJlZ2luIHRyeVxuICAgICAgICBsZXQgcmVjIHRyZWF0X2FjdGlvbiA9IGZ1bmN0aW9uXG4gICAgICAgIHwgVW5pdCBmIC0+IGYgKCk7XG4gICAgICAgIHwgQm9vbCBmIHdoZW4gIWN1cnJlbnQgKyAxIDwgbCAtPlxuICAgICAgICAgICAgbGV0IGFyZyA9IGFyZ3YuKCFjdXJyZW50ICsgMSkgaW5cbiAgICAgICAgICAgIGJlZ2luIHRyeSBmIChib29sX29mX3N0cmluZyBhcmcpXG4gICAgICAgICAgICB3aXRoIEludmFsaWRfYXJndW1lbnQgXCJib29sX29mX3N0cmluZ1wiIC0+XG4gICAgICAgICAgICAgICAgICAgcmFpc2UgKFN0b3AgKFdyb25nIChzLCBhcmcsIFwiYSBib29sZWFuXCIpKSlcbiAgICAgICAgICAgIGVuZDtcbiAgICAgICAgICAgIGluY3IgY3VycmVudDtcbiAgICAgICAgfCBTZXQgciAtPiByIDo9IHRydWU7XG4gICAgICAgIHwgQ2xlYXIgciAtPiByIDo9IGZhbHNlO1xuICAgICAgICB8IFN0cmluZyBmIHdoZW4gIWN1cnJlbnQgKyAxIDwgbCAtPlxuICAgICAgICAgICAgZiBhcmd2LighY3VycmVudCArIDEpO1xuICAgICAgICAgICAgaW5jciBjdXJyZW50O1xuICAgICAgICB8IFN5bWJvbCAoc3ltYiwgZikgd2hlbiAhY3VycmVudCArIDEgPCBsIC0+XG4gICAgICAgICAgICBsZXQgYXJnID0gYXJndi4oIWN1cnJlbnQgKyAxKSBpblxuICAgICAgICAgICAgaWYgTGlzdC5tZW0gYXJnIHN5bWIgdGhlbiBiZWdpblxuICAgICAgICAgICAgICBmIGFyZ3YuKCFjdXJyZW50ICsgMSk7XG4gICAgICAgICAgICAgIGluY3IgY3VycmVudDtcbiAgICAgICAgICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICAgICAgICAgIHJhaXNlIChTdG9wIChXcm9uZyAocywgYXJnLCBcIm9uZSBvZjogXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF4gKG1ha2Vfc3ltbGlzdCBcIlwiIFwiIFwiIFwiXCIgc3ltYikpKSlcbiAgICAgICAgICAgIGVuZFxuICAgICAgICB8IFNldF9zdHJpbmcgciB3aGVuICFjdXJyZW50ICsgMSA8IGwgLT5cbiAgICAgICAgICAgIHIgOj0gYXJndi4oIWN1cnJlbnQgKyAxKTtcbiAgICAgICAgICAgIGluY3IgY3VycmVudDtcbiAgICAgICAgfCBJbnQgZiB3aGVuICFjdXJyZW50ICsgMSA8IGwgLT5cbiAgICAgICAgICAgIGxldCBhcmcgPSBhcmd2LighY3VycmVudCArIDEpIGluXG4gICAgICAgICAgICBiZWdpbiB0cnkgZiAoaW50X29mX3N0cmluZyBhcmcpXG4gICAgICAgICAgICB3aXRoIEZhaWx1cmUgXCJpbnRfb2Zfc3RyaW5nXCIgLT5cbiAgICAgICAgICAgICAgICAgICByYWlzZSAoU3RvcCAoV3JvbmcgKHMsIGFyZywgXCJhbiBpbnRlZ2VyXCIpKSlcbiAgICAgICAgICAgIGVuZDtcbiAgICAgICAgICAgIGluY3IgY3VycmVudDtcbiAgICAgICAgfCBTZXRfaW50IHIgd2hlbiAhY3VycmVudCArIDEgPCBsIC0+XG4gICAgICAgICAgICBsZXQgYXJnID0gYXJndi4oIWN1cnJlbnQgKyAxKSBpblxuICAgICAgICAgICAgYmVnaW4gdHJ5IHIgOj0gKGludF9vZl9zdHJpbmcgYXJnKVxuICAgICAgICAgICAgd2l0aCBGYWlsdXJlIFwiaW50X29mX3N0cmluZ1wiIC0+XG4gICAgICAgICAgICAgICAgICAgcmFpc2UgKFN0b3AgKFdyb25nIChzLCBhcmcsIFwiYW4gaW50ZWdlclwiKSkpXG4gICAgICAgICAgICBlbmQ7XG4gICAgICAgICAgICBpbmNyIGN1cnJlbnQ7XG4gICAgICAgIHwgRmxvYXQgZiB3aGVuICFjdXJyZW50ICsgMSA8IGwgLT5cbiAgICAgICAgICAgIGxldCBhcmcgPSBhcmd2LighY3VycmVudCArIDEpIGluXG4gICAgICAgICAgICBiZWdpbiB0cnkgZiAoZmxvYXRfb2Zfc3RyaW5nIGFyZyk7XG4gICAgICAgICAgICB3aXRoIEZhaWx1cmUgXCJmbG9hdF9vZl9zdHJpbmdcIiAtPlxuICAgICAgICAgICAgICAgICAgIHJhaXNlIChTdG9wIChXcm9uZyAocywgYXJnLCBcImEgZmxvYXRcIikpKVxuICAgICAgICAgICAgZW5kO1xuICAgICAgICAgICAgaW5jciBjdXJyZW50O1xuICAgICAgICB8IFNldF9mbG9hdCByIHdoZW4gIWN1cnJlbnQgKyAxIDwgbCAtPlxuICAgICAgICAgICAgbGV0IGFyZyA9IGFyZ3YuKCFjdXJyZW50ICsgMSkgaW5cbiAgICAgICAgICAgIGJlZ2luIHRyeSByIDo9IChmbG9hdF9vZl9zdHJpbmcgYXJnKTtcbiAgICAgICAgICAgIHdpdGggRmFpbHVyZSBcImZsb2F0X29mX3N0cmluZ1wiIC0+XG4gICAgICAgICAgICAgICAgICAgcmFpc2UgKFN0b3AgKFdyb25nIChzLCBhcmcsIFwiYSBmbG9hdFwiKSkpXG4gICAgICAgICAgICBlbmQ7XG4gICAgICAgICAgICBpbmNyIGN1cnJlbnQ7XG4gICAgICAgIHwgVHVwbGUgc3BlY3MgLT5cbiAgICAgICAgICAgIExpc3QuaXRlciB0cmVhdF9hY3Rpb24gc3BlY3M7XG4gICAgICAgIHwgUmVzdCBmIC0+XG4gICAgICAgICAgICB3aGlsZSAhY3VycmVudCA8IGwgLSAxIGRvXG4gICAgICAgICAgICAgIGYgYXJndi4oIWN1cnJlbnQgKyAxKTtcbiAgICAgICAgICAgICAgaW5jciBjdXJyZW50O1xuICAgICAgICAgICAgZG9uZTtcbiAgICAgICAgfCBfIC0+IHJhaXNlIChTdG9wIChNaXNzaW5nIHMpKVxuICAgICAgICBpblxuICAgICAgICB0cmVhdF9hY3Rpb24gYWN0aW9uXG4gICAgICB3aXRoIEJhZCBtIC0+IHN0b3AgKE1lc3NhZ2UgbSk7XG4gICAgICAgICB8IFN0b3AgZSAtPiBzdG9wIGU7XG4gICAgICBlbmQ7XG4gICAgICBpbmNyIGN1cnJlbnQ7XG4gICAgZW5kIGVsc2UgYmVnaW5cbiAgICAgICh0cnkgYW5vbmZ1biBzIHdpdGggQmFkIG0gLT4gc3RvcCAoTWVzc2FnZSBtKSk7XG4gICAgICBpbmNyIGN1cnJlbnQ7XG4gICAgZW5kO1xuICBkb25lO1xuOztcblxubGV0IHBhcnNlX2FyZ3YgPyhjdXJyZW50PWN1cnJlbnQpIGFyZ3Ygc3BlY2xpc3QgYW5vbmZ1biBlcnJtc2cgPVxuICBwYXJzZV9hcmd2X2R5bmFtaWMgfmN1cnJlbnQ6Y3VycmVudCBhcmd2IChyZWYgc3BlY2xpc3QpIGFub25mdW4gZXJybXNnO1xuOztcblxubGV0IHBhcnNlIGwgZiBtc2cgPVxuICB0cnlcbiAgICBwYXJzZV9hcmd2IFN5cy5hcmd2IGwgZiBtc2c7XG4gIHdpdGhcbiAgfCBCYWQgbXNnIC0+IGVwcmludGYgXCIlc1wiIG1zZzsgZXhpdCAyO1xuICB8IEhlbHAgbXNnIC0+IHByaW50ZiBcIiVzXCIgbXNnOyBleGl0IDA7XG47O1xuXG5sZXQgcGFyc2VfZHluYW1pYyBsIGYgbXNnID1cbiAgdHJ5XG4gICAgcGFyc2VfYXJndl9keW5hbWljIFN5cy5hcmd2IGwgZiBtc2c7XG4gIHdpdGhcbiAgfCBCYWQgbXNnIC0+IGVwcmludGYgXCIlc1wiIG1zZzsgZXhpdCAyO1xuICB8IEhlbHAgbXNnIC0+IHByaW50ZiBcIiVzXCIgbXNnOyBleGl0IDA7XG47O1xuXG5sZXQgc2Vjb25kX3dvcmQgcyA9XG4gIGxldCBsZW4gPSBTdHJpbmcubGVuZ3RoIHMgaW5cbiAgbGV0IHJlYyBsb29wIG4gPVxuICAgIGlmIG4gPj0gbGVuIHRoZW4gbGVuXG4gICAgZWxzZSBpZiBzLltuXSA9ICcgJyB0aGVuIGxvb3AgKG4rMSlcbiAgICBlbHNlIG5cbiAgaW5cbiAgdHJ5IGxvb3AgKFN0cmluZy5pbmRleCBzICcgJylcbiAgd2l0aCBOb3RfZm91bmQgLT4gbGVuXG47O1xuXG5sZXQgbWF4X2FyZ19sZW4gY3VyIChrd2QsIHNwZWMsIGRvYykgPVxuICBtYXRjaCBzcGVjIHdpdGhcbiAgfCBTeW1ib2wgXyAtPiBtYXggY3VyIChTdHJpbmcubGVuZ3RoIGt3ZClcbiAgfCBfIC0+IG1heCBjdXIgKFN0cmluZy5sZW5ndGgga3dkICsgc2Vjb25kX3dvcmQgZG9jKVxuOztcblxubGV0IGFkZF9wYWRkaW5nIGxlbiBrc2QgPVxuICBtYXRjaCBrc2Qgd2l0aFxuICB8IChfLCBfLCBcIlwiKSAtPlxuICAgICAgKCogRG8gbm90IHBhZCB1bmRvY3VtZW50ZWQgb3B0aW9ucywgc28gdGhhdCB0aGV5IHN0aWxsIGRvbid0IHNob3cgdXAgd2hlblxuICAgICAgICogcnVuIHRocm91Z2ggW3VzYWdlXSBvciBbcGFyc2VdLiAqKVxuICAgICAga3NkXG4gIHwgKGt3ZCwgKFN5bWJvbCAobCwgXykgYXMgc3BlYyksIG1zZykgLT5cbiAgICAgIGxldCBjdXRjb2wgPSBzZWNvbmRfd29yZCBtc2cgaW5cbiAgICAgIGxldCBzcGFjZXMgPSBTdHJpbmcubWFrZSAoKG1heCAwIChsZW4gLSBjdXRjb2wpKSArIDMpICcgJyBpblxuICAgICAgKGt3ZCwgc3BlYywgXCJcXG5cIiBeIHNwYWNlcyBeIG1zZylcbiAgfCAoa3dkLCBzcGVjLCBtc2cpIC0+XG4gICAgICBsZXQgY3V0Y29sID0gc2Vjb25kX3dvcmQgbXNnIGluXG4gICAgICBsZXQga3dkX2xlbiA9IFN0cmluZy5sZW5ndGgga3dkIGluXG4gICAgICBsZXQgZGlmZiA9IGxlbiAtIGt3ZF9sZW4gLSBjdXRjb2wgaW5cbiAgICAgIGlmIGRpZmYgPD0gMCB0aGVuXG4gICAgICAgIChrd2QsIHNwZWMsIG1zZylcbiAgICAgIGVsc2VcbiAgICAgICAgbGV0IHNwYWNlcyA9IFN0cmluZy5tYWtlIGRpZmYgJyAnIGluXG4gICAgICAgIGxldCBwcmVmaXggPSBTdHJpbmcuc3ViIG1zZyAwIGN1dGNvbCBpblxuICAgICAgICBsZXQgc3VmZml4ID0gU3RyaW5nLnN1YiBtc2cgY3V0Y29sIChTdHJpbmcubGVuZ3RoIG1zZyAtIGN1dGNvbCkgaW5cbiAgICAgICAgKGt3ZCwgc3BlYywgcHJlZml4IF4gc3BhY2VzIF4gc3VmZml4KVxuOztcblxubGV0IGFsaWduID8obGltaXQ9bWF4X2ludCkgc3BlY2xpc3QgPVxuICBsZXQgY29tcGxldGVkID0gYWRkX2hlbHAgc3BlY2xpc3QgaW5cbiAgbGV0IGxlbiA9IExpc3QuZm9sZF9sZWZ0IG1heF9hcmdfbGVuIDAgY29tcGxldGVkIGluXG4gIGxldCBsZW4gPSBtaW4gbGVuIGxpbWl0IGluXG4gIExpc3QubWFwIChhZGRfcGFkZGluZyBsZW4pIGNvbXBsZXRlZFxuOztcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgRGFtaWVuIERvbGlnZXosIHByb2pldCBQYXJhLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxudHlwZSBzdGF0ID0ge1xuICBtaW5vcl93b3JkcyA6IGZsb2F0O1xuICBwcm9tb3RlZF93b3JkcyA6IGZsb2F0O1xuICBtYWpvcl93b3JkcyA6IGZsb2F0O1xuICBtaW5vcl9jb2xsZWN0aW9ucyA6IGludDtcbiAgbWFqb3JfY29sbGVjdGlvbnMgOiBpbnQ7XG4gIGhlYXBfd29yZHMgOiBpbnQ7XG4gIGhlYXBfY2h1bmtzIDogaW50O1xuICBsaXZlX3dvcmRzIDogaW50O1xuICBsaXZlX2Jsb2NrcyA6IGludDtcbiAgZnJlZV93b3JkcyA6IGludDtcbiAgZnJlZV9ibG9ja3MgOiBpbnQ7XG4gIGxhcmdlc3RfZnJlZSA6IGludDtcbiAgZnJhZ21lbnRzIDogaW50O1xuICBjb21wYWN0aW9ucyA6IGludDtcbiAgdG9wX2hlYXBfd29yZHMgOiBpbnQ7XG4gIHN0YWNrX3NpemUgOiBpbnQ7XG59OztcblxudHlwZSBjb250cm9sID0ge1xuICBtdXRhYmxlIG1pbm9yX2hlYXBfc2l6ZSA6IGludDtcbiAgbXV0YWJsZSBtYWpvcl9oZWFwX2luY3JlbWVudCA6IGludDtcbiAgbXV0YWJsZSBzcGFjZV9vdmVyaGVhZCA6IGludDtcbiAgbXV0YWJsZSB2ZXJib3NlIDogaW50O1xuICBtdXRhYmxlIG1heF9vdmVyaGVhZCA6IGludDtcbiAgbXV0YWJsZSBzdGFja19saW1pdCA6IGludDtcbiAgbXV0YWJsZSBhbGxvY2F0aW9uX3BvbGljeSA6IGludDtcbn07O1xuXG5leHRlcm5hbCBzdGF0IDogdW5pdCAtPiBzdGF0ID0gXCJjYW1sX2djX3N0YXRcIjs7XG5leHRlcm5hbCBxdWlja19zdGF0IDogdW5pdCAtPiBzdGF0ID0gXCJjYW1sX2djX3F1aWNrX3N0YXRcIjs7XG5leHRlcm5hbCBjb3VudGVycyA6IHVuaXQgLT4gKGZsb2F0ICogZmxvYXQgKiBmbG9hdCkgPSBcImNhbWxfZ2NfY291bnRlcnNcIjs7XG5leHRlcm5hbCBnZXQgOiB1bml0IC0+IGNvbnRyb2wgPSBcImNhbWxfZ2NfZ2V0XCI7O1xuZXh0ZXJuYWwgc2V0IDogY29udHJvbCAtPiB1bml0ID0gXCJjYW1sX2djX3NldFwiOztcbmV4dGVybmFsIG1pbm9yIDogdW5pdCAtPiB1bml0ID0gXCJjYW1sX2djX21pbm9yXCI7O1xuZXh0ZXJuYWwgbWFqb3Jfc2xpY2UgOiBpbnQgLT4gaW50ID0gXCJjYW1sX2djX21ham9yX3NsaWNlXCI7O1xuZXh0ZXJuYWwgbWFqb3IgOiB1bml0IC0+IHVuaXQgPSBcImNhbWxfZ2NfbWFqb3JcIjs7XG5leHRlcm5hbCBmdWxsX21ham9yIDogdW5pdCAtPiB1bml0ID0gXCJjYW1sX2djX2Z1bGxfbWFqb3JcIjs7XG5leHRlcm5hbCBjb21wYWN0IDogdW5pdCAtPiB1bml0ID0gXCJjYW1sX2djX2NvbXBhY3Rpb25cIjs7XG5cbm9wZW4gUHJpbnRmOztcblxubGV0IHByaW50X3N0YXQgYyA9XG4gIGxldCBzdCA9IHN0YXQgKCkgaW5cbiAgZnByaW50ZiBjIFwibWlub3Jfd29yZHM6ICUuMGZcXG5cIiBzdC5taW5vcl93b3JkcztcbiAgZnByaW50ZiBjIFwicHJvbW90ZWRfd29yZHM6ICUuMGZcXG5cIiBzdC5wcm9tb3RlZF93b3JkcztcbiAgZnByaW50ZiBjIFwibWFqb3Jfd29yZHM6ICUuMGZcXG5cIiBzdC5tYWpvcl93b3JkcztcbiAgZnByaW50ZiBjIFwibWlub3JfY29sbGVjdGlvbnM6ICVkXFxuXCIgc3QubWlub3JfY29sbGVjdGlvbnM7XG4gIGZwcmludGYgYyBcIm1ham9yX2NvbGxlY3Rpb25zOiAlZFxcblwiIHN0Lm1ham9yX2NvbGxlY3Rpb25zO1xuICBmcHJpbnRmIGMgXCJoZWFwX3dvcmRzOiAlZFxcblwiIHN0LmhlYXBfd29yZHM7XG4gIGZwcmludGYgYyBcImhlYXBfY2h1bmtzOiAlZFxcblwiIHN0LmhlYXBfY2h1bmtzO1xuICBmcHJpbnRmIGMgXCJ0b3BfaGVhcF93b3JkczogJWRcXG5cIiBzdC50b3BfaGVhcF93b3JkcztcbiAgZnByaW50ZiBjIFwibGl2ZV93b3JkczogJWRcXG5cIiBzdC5saXZlX3dvcmRzO1xuICBmcHJpbnRmIGMgXCJsaXZlX2Jsb2NrczogJWRcXG5cIiBzdC5saXZlX2Jsb2NrcztcbiAgZnByaW50ZiBjIFwiZnJlZV93b3JkczogJWRcXG5cIiBzdC5mcmVlX3dvcmRzO1xuICBmcHJpbnRmIGMgXCJmcmVlX2Jsb2NrczogJWRcXG5cIiBzdC5mcmVlX2Jsb2NrcztcbiAgZnByaW50ZiBjIFwibGFyZ2VzdF9mcmVlOiAlZFxcblwiIHN0Lmxhcmdlc3RfZnJlZTtcbiAgZnByaW50ZiBjIFwiZnJhZ21lbnRzOiAlZFxcblwiIHN0LmZyYWdtZW50cztcbiAgZnByaW50ZiBjIFwiY29tcGFjdGlvbnM6ICVkXFxuXCIgc3QuY29tcGFjdGlvbnM7XG47O1xuXG5sZXQgYWxsb2NhdGVkX2J5dGVzICgpID1cbiAgbGV0IChtaSwgcHJvLCBtYSkgPSBjb3VudGVycyAoKSBpblxuICAobWkgKy4gbWEgLS4gcHJvKSAqLiBmbG9hdF9vZl9pbnQgKFN5cy53b3JkX3NpemUgLyA4KVxuOztcblxuZXh0ZXJuYWwgZmluYWxpc2UgOiAoJ2EgLT4gdW5pdCkgLT4gJ2EgLT4gdW5pdCA9IFwiY2FtbF9maW5hbF9yZWdpc3RlclwiOztcbmV4dGVybmFsIGZpbmFsaXNlX3JlbGVhc2UgOiB1bml0IC0+IHVuaXQgPSBcImNhbWxfZmluYWxfcmVsZWFzZVwiOztcblxuXG50eXBlIGFsYXJtID0gYm9vbCByZWY7O1xudHlwZSBhbGFybV9yZWMgPSB7YWN0aXZlIDogYWxhcm07IGYgOiB1bml0IC0+IHVuaXR9OztcblxubGV0IHJlYyBjYWxsX2FsYXJtIGFyZWMgPVxuICBpZiAhKGFyZWMuYWN0aXZlKSB0aGVuIGJlZ2luXG4gICAgZmluYWxpc2UgY2FsbF9hbGFybSBhcmVjO1xuICAgIGFyZWMuZiAoKTtcbiAgZW5kO1xuOztcblxubGV0IGNyZWF0ZV9hbGFybSBmID1cbiAgbGV0IGFyZWMgPSB7IGFjdGl2ZSA9IHJlZiB0cnVlOyBmID0gZiB9IGluXG4gIGZpbmFsaXNlIGNhbGxfYWxhcm0gYXJlYztcbiAgYXJlYy5hY3RpdmVcbjs7XG5cbmxldCBkZWxldGVfYWxhcm0gYSA9IGEgOj0gZmFsc2U7O1xuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICBYYXZpZXIgTGVyb3ksIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBNZXNzYWdlIGRpZ2VzdCAoTUQ1KSAqKVxuXG50eXBlIHQgPSBzdHJpbmdcblxubGV0IGNvbXBhcmUgPSBTdHJpbmcuY29tcGFyZVxuXG5leHRlcm5hbCB1bnNhZmVfc3RyaW5nOiBzdHJpbmcgLT4gaW50IC0+IGludCAtPiB0ID0gXCJjYW1sX21kNV9zdHJpbmdcIlxuZXh0ZXJuYWwgY2hhbm5lbDogaW5fY2hhbm5lbCAtPiBpbnQgLT4gdCA9IFwiY2FtbF9tZDVfY2hhblwiXG5cbmxldCBzdHJpbmcgc3RyID1cbiAgdW5zYWZlX3N0cmluZyBzdHIgMCAoU3RyaW5nLmxlbmd0aCBzdHIpXG5cbmxldCBieXRlcyBiID0gc3RyaW5nIChCeXRlcy51bnNhZmVfdG9fc3RyaW5nIGIpXG5cbmxldCBzdWJzdHJpbmcgc3RyIG9mcyBsZW4gPVxuICBpZiBvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gU3RyaW5nLmxlbmd0aCBzdHIgLSBsZW5cbiAgdGhlbiBpbnZhbGlkX2FyZyBcIkRpZ2VzdC5zdWJzdHJpbmdcIlxuICBlbHNlIHVuc2FmZV9zdHJpbmcgc3RyIG9mcyBsZW5cblxubGV0IHN1YmJ5dGVzIGIgb2ZzIGxlbiA9IHN1YnN0cmluZyAoQnl0ZXMudW5zYWZlX3RvX3N0cmluZyBiKSBvZnMgbGVuXG5cbmxldCBmaWxlIGZpbGVuYW1lID1cbiAgbGV0IGljID0gb3Blbl9pbl9iaW4gZmlsZW5hbWUgaW5cbiAgbWF0Y2ggY2hhbm5lbCBpYyAoLTEpIHdpdGhcbiAgICB8IGQgLT4gY2xvc2VfaW4gaWM7IGRcbiAgICB8IGV4Y2VwdGlvbiBlIC0+IGNsb3NlX2luIGljOyByYWlzZSBlXG5cbmxldCBvdXRwdXQgY2hhbiBkaWdlc3QgPVxuICBvdXRwdXRfc3RyaW5nIGNoYW4gZGlnZXN0XG5cbmxldCBpbnB1dCBjaGFuID0gcmVhbGx5X2lucHV0X3N0cmluZyBjaGFuIDE2XG5cbmxldCBjaGFyX2hleCBuID1cbiAgQ2hhci51bnNhZmVfY2hyIChuICsgaWYgbiA8IDEwIHRoZW4gQ2hhci5jb2RlICcwJyBlbHNlIChDaGFyLmNvZGUgJ2EnIC0gMTApKVxuXG5sZXQgdG9faGV4IGQgPVxuICBsZXQgcmVzdWx0ID0gQnl0ZXMuY3JlYXRlIDMyIGluXG4gIGZvciBpID0gMCB0byAxNSBkb1xuICAgIGxldCB4ID0gQ2hhci5jb2RlIGQuW2ldIGluXG4gICAgQnl0ZXMudW5zYWZlX3NldCByZXN1bHQgKGkqMikgKGNoYXJfaGV4ICh4IGxzciA0KSk7XG4gICAgQnl0ZXMudW5zYWZlX3NldCByZXN1bHQgKGkqMisxKSAoY2hhcl9oZXggKHggbGFuZCAweDBmKSk7XG4gIGRvbmU7XG4gIEJ5dGVzLnVuc2FmZV90b19zdHJpbmcgcmVzdWx0XG5cbmxldCBmcm9tX2hleCBzID1cbiAgaWYgU3RyaW5nLmxlbmd0aCBzIDw+IDMyIHRoZW4gcmFpc2UgKEludmFsaWRfYXJndW1lbnQgXCJEaWdlc3QuZnJvbV9oZXhcIik7XG4gIGxldCBkaWdpdCBjID1cbiAgICBtYXRjaCBjIHdpdGhcbiAgICB8ICcwJy4uJzknIC0+IENoYXIuY29kZSBjIC0gQ2hhci5jb2RlICcwJ1xuICAgIHwgJ0EnLi4nRicgLT4gQ2hhci5jb2RlIGMgLSBDaGFyLmNvZGUgJ0EnICsgMTBcbiAgICB8ICdhJy4uJ2YnIC0+IENoYXIuY29kZSBjIC0gQ2hhci5jb2RlICdhJyArIDEwXG4gICAgfCBfIC0+IHJhaXNlIChJbnZhbGlkX2FyZ3VtZW50IFwiRGlnZXN0LmZyb21faGV4XCIpXG4gIGluXG4gIGxldCBieXRlIGkgPSBkaWdpdCBzLltpXSBsc2wgNCArIGRpZ2l0IHMuW2krMV0gaW5cbiAgbGV0IHJlc3VsdCA9IEJ5dGVzLmNyZWF0ZSAxNiBpblxuICBmb3IgaSA9IDAgdG8gMTUgZG9cbiAgICBCeXRlcy5zZXQgcmVzdWx0IGkgKENoYXIuY2hyIChieXRlICgyICogaSkpKTtcbiAgZG9uZTtcbiAgQnl0ZXMudW5zYWZlX3RvX3N0cmluZyByZXN1bHRcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICBEYW1pZW4gRG9saWdleiwgcHJvamV0IFBhcmEsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogUHNldWRvLXJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXG4gICBUaGlzIGlzIGEgbGFnZ2VkLUZpYm9uYWNjaSBGKDU1LCAyNCwgKykgd2l0aCBhIG1vZGlmaWVkIGFkZGl0aW9uXG4gICBmdW5jdGlvbiB0byBlbmhhbmNlIHRoZSBtaXhpbmcgb2YgYml0cy5cbiAgIElmIHdlIHVzZSBub3JtYWwgYWRkaXRpb24sIHRoZSBsb3ctb3JkZXIgYml0IGZhaWxzIHRlc3RzIDEgYW5kIDdcbiAgIG9mIHRoZSBEaWVoYXJkIHRlc3Qgc3VpdGUsIGFuZCBiaXRzIDEgYW5kIDIgYWxzbyBmYWlsIHRlc3QgNy5cbiAgIElmIHdlIHVzZSBtdWx0aXBsaWNhdGlvbiBhcyBzdWdnZXN0ZWQgYnkgTWFyc2FnbGlhLCBpdCBkb2Vzbid0IGZhcmVcbiAgIG11Y2ggYmV0dGVyLlxuICAgQnkgbWl4aW5nIHRoZSBiaXRzIG9mIG9uZSBvZiB0aGUgbnVtYmVycyBiZWZvcmUgYWRkaXRpb24gKFhPUiB0aGVcbiAgIDUgaGlnaC1vcmRlciBiaXRzIGludG8gdGhlIGxvdy1vcmRlciBiaXRzKSwgd2UgZ2V0IGEgZ2VuZXJhdG9yIHRoYXRcbiAgIHBhc3NlcyBhbGwgdGhlIERpZWhhcmQgdGVzdHMuXG4qKVxuXG5leHRlcm5hbCByYW5kb21fc2VlZDogdW5pdCAtPiBpbnQgYXJyYXkgPSBcImNhbWxfc3lzX3JhbmRvbV9zZWVkXCI7O1xuXG5tb2R1bGUgU3RhdGUgPSBzdHJ1Y3RcblxuICB0eXBlIHQgPSB7IHN0IDogaW50IGFycmF5OyBtdXRhYmxlIGlkeCA6IGludCB9OztcblxuICBsZXQgbmV3X3N0YXRlICgpID0geyBzdCA9IEFycmF5Lm1ha2UgNTUgMDsgaWR4ID0gMCB9OztcbiAgbGV0IGFzc2lnbiBzdDEgc3QyID1cbiAgICBBcnJheS5ibGl0IHN0Mi5zdCAwIHN0MS5zdCAwIDU1O1xuICAgIHN0MS5pZHggPC0gc3QyLmlkeDtcbiAgOztcblxuICBsZXQgZnVsbF9pbml0IHMgc2VlZCA9XG4gICAgbGV0IGNvbWJpbmUgYWNjdSB4ID0gRGlnZXN0LnN0cmluZyAoYWNjdSBeIHN0cmluZ19vZl9pbnQgeCkgaW5cbiAgICBsZXQgZXh0cmFjdCBkID1cbiAgICAgIENoYXIuY29kZSBkLlswXSArIChDaGFyLmNvZGUgZC5bMV0gbHNsIDgpICsgKENoYXIuY29kZSBkLlsyXSBsc2wgMTYpXG4gICAgICArIChDaGFyLmNvZGUgZC5bM10gbHNsIDI0KVxuICAgIGluXG4gICAgbGV0IHNlZWQgPSBpZiBBcnJheS5sZW5ndGggc2VlZCA9IDAgdGhlbiBbfCAwIHxdIGVsc2Ugc2VlZCBpblxuICAgIGxldCBsID0gQXJyYXkubGVuZ3RoIHNlZWQgaW5cbiAgICBmb3IgaSA9IDAgdG8gNTQgZG9cbiAgICAgIHMuc3QuKGkpIDwtIGk7XG4gICAgZG9uZTtcbiAgICBsZXQgYWNjdSA9IHJlZiBcInhcIiBpblxuICAgIGZvciBpID0gMCB0byA1NCArIG1heCA1NSBsIGRvXG4gICAgICBsZXQgaiA9IGkgbW9kIDU1IGluXG4gICAgICBsZXQgayA9IGkgbW9kIGwgaW5cbiAgICAgIGFjY3UgOj0gY29tYmluZSAhYWNjdSBzZWVkLihrKTtcbiAgICAgIHMuc3QuKGopIDwtIChzLnN0LihqKSBseG9yIGV4dHJhY3QgIWFjY3UpIGxhbmQgMHgzRkZGRkZGRjsgICgqIFBSIzU1NzUgKilcbiAgICBkb25lO1xuICAgIHMuaWR4IDwtIDA7XG4gIDs7XG5cbiAgbGV0IG1ha2Ugc2VlZCA9XG4gICAgbGV0IHJlc3VsdCA9IG5ld19zdGF0ZSAoKSBpblxuICAgIGZ1bGxfaW5pdCByZXN1bHQgc2VlZDtcbiAgICByZXN1bHRcbiAgOztcblxuICBsZXQgbWFrZV9zZWxmX2luaXQgKCkgPSBtYWtlIChyYW5kb21fc2VlZCAoKSk7O1xuXG4gIGxldCBjb3B5IHMgPVxuICAgIGxldCByZXN1bHQgPSBuZXdfc3RhdGUgKCkgaW5cbiAgICBhc3NpZ24gcmVzdWx0IHM7XG4gICAgcmVzdWx0XG4gIDs7XG5cbiAgKCogUmV0dXJucyAzMCByYW5kb20gYml0cyBhcyBhbiBpbnRlZ2VyIDAgPD0geCA8IDEwNzM3NDE4MjQgKilcbiAgbGV0IGJpdHMgcyA9XG4gICAgcy5pZHggPC0gKHMuaWR4ICsgMSkgbW9kIDU1O1xuICAgIGxldCBjdXJ2YWwgPSBzLnN0LihzLmlkeCkgaW5cbiAgICBsZXQgbmV3dmFsID0gcy5zdC4oKHMuaWR4ICsgMjQpIG1vZCA1NSlcbiAgICAgICAgICAgICAgICAgKyAoY3VydmFsIGx4b3IgKChjdXJ2YWwgbHNyIDI1KSBsYW5kIDB4MUYpKSBpblxuICAgIGxldCBuZXd2YWwzMCA9IG5ld3ZhbCBsYW5kIDB4M0ZGRkZGRkYgaW4gICgqIFBSIzU1NzUgKilcbiAgICBzLnN0LihzLmlkeCkgPC0gbmV3dmFsMzA7XG4gICAgbmV3dmFsMzBcbiAgOztcblxuICBsZXQgcmVjIGludGF1eCBzIG4gPVxuICAgIGxldCByID0gYml0cyBzIGluXG4gICAgbGV0IHYgPSByIG1vZCBuIGluXG4gICAgaWYgciAtIHYgPiAweDNGRkZGRkZGIC0gbiArIDEgdGhlbiBpbnRhdXggcyBuIGVsc2UgdlxuICA7O1xuICBsZXQgaW50IHMgYm91bmQgPVxuICAgIGlmIGJvdW5kID4gMHgzRkZGRkZGRiB8fCBib3VuZCA8PSAwXG4gICAgdGhlbiBpbnZhbGlkX2FyZyBcIlJhbmRvbS5pbnRcIlxuICAgIGVsc2UgaW50YXV4IHMgYm91bmRcbiAgOztcblxuICBsZXQgcmVjIGludDMyYXV4IHMgbiA9XG4gICAgbGV0IGIxID0gSW50MzIub2ZfaW50IChiaXRzIHMpIGluXG4gICAgbGV0IGIyID0gSW50MzIuc2hpZnRfbGVmdCAoSW50MzIub2ZfaW50IChiaXRzIHMgbGFuZCAxKSkgMzAgaW5cbiAgICBsZXQgciA9IEludDMyLmxvZ29yIGIxIGIyIGluXG4gICAgbGV0IHYgPSBJbnQzMi5yZW0gciBuIGluXG4gICAgaWYgSW50MzIuc3ViIHIgdiA+IEludDMyLmFkZCAoSW50MzIuc3ViIEludDMyLm1heF9pbnQgbikgMWxcbiAgICB0aGVuIGludDMyYXV4IHMgblxuICAgIGVsc2UgdlxuICA7O1xuICBsZXQgaW50MzIgcyBib3VuZCA9XG4gICAgaWYgYm91bmQgPD0gMGxcbiAgICB0aGVuIGludmFsaWRfYXJnIFwiUmFuZG9tLmludDMyXCJcbiAgICBlbHNlIGludDMyYXV4IHMgYm91bmRcbiAgOztcblxuICBsZXQgcmVjIGludDY0YXV4IHMgbiA9XG4gICAgbGV0IGIxID0gSW50NjQub2ZfaW50IChiaXRzIHMpIGluXG4gICAgbGV0IGIyID0gSW50NjQuc2hpZnRfbGVmdCAoSW50NjQub2ZfaW50IChiaXRzIHMpKSAzMCBpblxuICAgIGxldCBiMyA9IEludDY0LnNoaWZ0X2xlZnQgKEludDY0Lm9mX2ludCAoYml0cyBzIGxhbmQgNykpIDYwIGluXG4gICAgbGV0IHIgPSBJbnQ2NC5sb2dvciBiMSAoSW50NjQubG9nb3IgYjIgYjMpIGluXG4gICAgbGV0IHYgPSBJbnQ2NC5yZW0gciBuIGluXG4gICAgaWYgSW50NjQuc3ViIHIgdiA+IEludDY0LmFkZCAoSW50NjQuc3ViIEludDY0Lm1heF9pbnQgbikgMUxcbiAgICB0aGVuIGludDY0YXV4IHMgblxuICAgIGVsc2UgdlxuICA7O1xuICBsZXQgaW50NjQgcyBib3VuZCA9XG4gICAgaWYgYm91bmQgPD0gMExcbiAgICB0aGVuIGludmFsaWRfYXJnIFwiUmFuZG9tLmludDY0XCJcbiAgICBlbHNlIGludDY0YXV4IHMgYm91bmRcbiAgOztcblxuICBsZXQgbmF0aXZlaW50ID1cbiAgICBpZiBOYXRpdmVpbnQuc2l6ZSA9IDMyXG4gICAgdGhlbiBmdW4gcyBib3VuZCAtPiBOYXRpdmVpbnQub2ZfaW50MzIgKGludDMyIHMgKE5hdGl2ZWludC50b19pbnQzMiBib3VuZCkpXG4gICAgZWxzZSBmdW4gcyBib3VuZCAtPiBJbnQ2NC50b19uYXRpdmVpbnQgKGludDY0IHMgKEludDY0Lm9mX25hdGl2ZWludCBib3VuZCkpXG4gIDs7XG5cbiAgKCogUmV0dXJucyBhIGZsb2F0IDAgPD0geCA8PSAxIHdpdGggYXQgbW9zdCA2MCBiaXRzIG9mIHByZWNpc2lvbi4gKilcbiAgbGV0IHJhd2Zsb2F0IHMgPVxuICAgIGxldCBzY2FsZSA9IDEwNzM3NDE4MjQuMCAgKCogMl4zMCAqKVxuICAgIGFuZCByMSA9IFBlcnZhc2l2ZXMuZmxvYXQgKGJpdHMgcylcbiAgICBhbmQgcjIgPSBQZXJ2YXNpdmVzLmZsb2F0IChiaXRzIHMpXG4gICAgaW4gKHIxIC8uIHNjYWxlICsuIHIyKSAvLiBzY2FsZVxuICA7O1xuXG4gIGxldCBmbG9hdCBzIGJvdW5kID0gcmF3ZmxvYXQgcyAqLiBib3VuZDs7XG5cbiAgbGV0IGJvb2wgcyA9IChiaXRzIHMgbGFuZCAxID0gMCk7O1xuXG5lbmQ7O1xuXG4oKiBUaGlzIGlzIHRoZSBzdGF0ZSB5b3UgZ2V0IHdpdGggW2luaXQgMjcxODI4MThdIGFuZCB0aGVuIGFwcGx5aW5nXG4gICB0aGUgXCJsYW5kIDB4M0ZGRkZGRkZcIiBmaWx0ZXIgdG8gdGhlbS4gIFNlZSAjNTU3NSwgIzU3OTMsICM1OTc3LiAqKVxubGV0IGRlZmF1bHQgPSB7XG4gIFN0YXRlLnN0ID0gW3xcbiAgICAgIDB4M2FlMjUyMmI7IDB4MWQ4ZDQ2MzQ7IDB4MTViNGZhZDA7IDB4MThiMTRhY2U7IDB4MTJmOGEzYzQ7IDB4M2IwODZjNDc7XG4gICAgICAweDE2ZDQ2N2Q2OyAweDEwMWQ5MWM3OyAweDMyMWRmMTc3OyAweDAxNzZjMTkzOyAweDFmZjcyYmYxOyAweDFlODg5MTA5O1xuICAgICAgMHgwYjQ2NGIxODsgMHgyYjg2Yjk3YzsgMHgwODkxZGE0ODsgMHgwMzEzNzQ2MzsgMHgwODVhYzVhMTsgMHgxNWQ2MWYyZjtcbiAgICAgIDB4M2JjZWQzNTk7IDB4MjljMWMxMzI7IDB4M2E4Njc2NmU7IDB4MzY2ZDhjODY7IDB4MWY1YjYyMjI7IDB4M2NlMWI1OWY7XG4gICAgICAweDJlYmY3OGUxOyAweDI3Y2QxYjg2OyAweDI1OGYzZGMzOyAweDM4OWE4MTk0OyAweDAyZTRjNDRjOyAweDE4YzQzZjdkO1xuICAgICAgMHgwZjZlNTM0ZjsgMHgxZTdkZjM1OTsgMHgwNTVkMGI3ZTsgMHgxMGU4NGU3ZTsgMHgxMjYxOThlNDsgMHgwZTc3MjJjYjtcbiAgICAgIDB4MWNiZWRlMjg7IDB4MzM5MWI5NjQ7IDB4M2Q0MGU5MmE7IDB4MGM1OTkzM2Q7IDB4MGI4Y2QwYjc7IDB4MjRlZmZmMWM7XG4gICAgICAweDI4MDNmZGFhOyAweDA4ZWJjNzJlOyAweDBmNTIyZTMyOyAweDA1Mzk4ZWRjOyAweDIxNDRhMDRjOyAweDBhZWYzY2JkO1xuICAgICAgMHgwMWFkNDcxOTsgMHgzNWI5M2NkNjsgMHgyYTU1OWQ0ZjsgMHgxZTZmZDc2ODsgMHgyNmUyN2YzNjsgMHgxODZmMThjMztcbiAgICAgIDB4MmZiZjk2N2E7XG4gICAgfF07XG4gIFN0YXRlLmlkeCA9IDA7XG59OztcblxubGV0IGJpdHMgKCkgPSBTdGF0ZS5iaXRzIGRlZmF1bHQ7O1xubGV0IGludCBib3VuZCA9IFN0YXRlLmludCBkZWZhdWx0IGJvdW5kOztcbmxldCBpbnQzMiBib3VuZCA9IFN0YXRlLmludDMyIGRlZmF1bHQgYm91bmQ7O1xubGV0IG5hdGl2ZWludCBib3VuZCA9IFN0YXRlLm5hdGl2ZWludCBkZWZhdWx0IGJvdW5kOztcbmxldCBpbnQ2NCBib3VuZCA9IFN0YXRlLmludDY0IGRlZmF1bHQgYm91bmQ7O1xubGV0IGZsb2F0IHNjYWxlID0gU3RhdGUuZmxvYXQgZGVmYXVsdCBzY2FsZTs7XG5sZXQgYm9vbCAoKSA9IFN0YXRlLmJvb2wgZGVmYXVsdDs7XG5cbmxldCBmdWxsX2luaXQgc2VlZCA9IFN0YXRlLmZ1bGxfaW5pdCBkZWZhdWx0IHNlZWQ7O1xubGV0IGluaXQgc2VlZCA9IFN0YXRlLmZ1bGxfaW5pdCBkZWZhdWx0IFt8IHNlZWQgfF07O1xubGV0IHNlbGZfaW5pdCAoKSA9IGZ1bGxfaW5pdCAocmFuZG9tX3NlZWQoKSk7O1xuXG4oKiBNYW5pcHVsYXRpbmcgdGhlIGN1cnJlbnQgc3RhdGUuICopXG5cbmxldCBnZXRfc3RhdGUgKCkgPSBTdGF0ZS5jb3B5IGRlZmF1bHQ7O1xubGV0IHNldF9zdGF0ZSBzID0gU3RhdGUuYXNzaWduIGRlZmF1bHQgczs7XG5cbigqKioqKioqKioqKioqKioqKioqKlxuXG4oKiBUZXN0IGZ1bmN0aW9ucy4gIE5vdCBpbmNsdWRlZCBpbiB0aGUgbGlicmFyeS5cbiAgIFRoZSBbY2hpc3F1YXJlXSBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIHdpdGggbiA+IDEwci5cbiAgIEl0IHJldHVybnMgYSB0cmlwbGUgKGxvdywgYWN0dWFsLCBoaWdoKS5cbiAgIElmIGxvdyA8PSBhY3R1YWwgPD0gaGlnaCwgdGhlIFtnXSBmdW5jdGlvbiBwYXNzZWQgdGhlIHRlc3QsXG4gICBvdGhlcndpc2UgaXQgZmFpbGVkLlxuXG4gIFNvbWUgcmVzdWx0czpcblxuaW5pdCAyNzE4MjgxODsgY2hpc3F1YXJlIGludCAxMDAwMDAgMTAwMDs7XG5pbml0IDI3MTgyODE4OyBjaGlzcXVhcmUgaW50IDEwMDAwMCAxMDA7O1xuaW5pdCAyNzE4MjgxODsgY2hpc3F1YXJlIGludCAxMDAwMDAgNTAwMDs7XG5pbml0IDI3MTgyODE4OyBjaGlzcXVhcmUgaW50IDEwMDAwMDAgMTAwMDs7XG5pbml0IDI3MTgyODE4OyBjaGlzcXVhcmUgaW50IDEwMDAwMCAxMDI0OztcbmluaXQgMjk5NzkyNjQzOyBjaGlzcXVhcmUgaW50IDEwMDAwMCAxMDI0OztcbmluaXQgMTQxNDIxMzY7IGNoaXNxdWFyZSBpbnQgMTAwMDAwIDEwMjQ7O1xuaW5pdCAyNzE4MjgxODsgaW5pdF9kaWZmIDEwMjQ7IGNoaXNxdWFyZSBkaWZmIDEwMDAwMCAxMDI0OztcbmluaXQgMjcxODI4MTg7IGluaXRfZGlmZiAxMDA7IGNoaXNxdWFyZSBkaWZmIDEwMDAwMCAxMDA7O1xuaW5pdCAyNzE4MjgxODsgaW5pdF9kaWZmMiAxMDI0OyBjaGlzcXVhcmUgZGlmZjIgMTAwMDAwIDEwMjQ7O1xuaW5pdCAyNzE4MjgxODsgaW5pdF9kaWZmMiAxMDA7IGNoaXNxdWFyZSBkaWZmMiAxMDAwMDAgMTAwOztcbmluaXQgMTQxNDIxMzY7IGluaXRfZGlmZjIgMTAwOyBjaGlzcXVhcmUgZGlmZjIgMTAwMDAwIDEwMDs7XG5pbml0IDI5OTc5MjY0MzsgaW5pdF9kaWZmMiAxMDA7IGNoaXNxdWFyZSBkaWZmMiAxMDAwMDAgMTAwOztcbi0gOiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgPSAoOTM2Ljc1NDQ0Njc5NjYzMjQ2NSwgOTk3LjUsIDEwNjMuMjQ1NTUzMjAzMzY3NTQpXG4jIC0gOiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgPSAoODAuLCA4OS43NDAwMDAwMDAwMDUyMzg3LCAxMjAuKVxuIyAtIDogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ID0gKDQ4NTguNTc4NjQzNzYyNjksIDUwNDUuNSwgNTE0MS40MjEzNTYyMzczMSlcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9XG4oOTM2Ljc1NDQ0Njc5NjYzMjQ2NSwgOTQ0LjgwNTk5OTk5OTk4MjMwNSwgMTA2My4yNDU1NTMyMDMzNjc1NClcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9ICg5NjAuLCAxMDE5LjE5NzQ0MDAwMDAwMzU1LCAxMDg4LilcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9ICg5NjAuLCAxMDU5LjMxNzc2MDAwMDAwNTM2LCAxMDg4LilcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9ICg5NjAuLCAxMDM5Ljk4NDYzOTk5OTk5NTEyLCAxMDg4LilcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9ICg5NjAuLCAxMDU0LjM4MjA3OTk5OTk5NTc3LCAxMDg4LilcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9ICg4MC4sIDkwLjA5NjAwMDAwMDAwNSwgMTIwLilcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9ICg5NjAuLCAxMDc2Ljc4NzIwMDAwMDAwNjEyLCAxMDg4LilcbiMgLSA6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCA9ICg4MC4sIDg1LjE3NjAwMDAwMDAwNjc1MjEsIDEyMC4pXG4jIC0gOiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgPSAoODAuLCA4NS4yMTYwMDAwMDAwMDAzNDkyLCAxMjAuKVxuIyAtIDogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ID0gKDgwLiwgODAuNjIyMDAwMDAwMDAzMDI2OCwgMTIwLilcblxuKilcblxuKCogUmV0dXJuIHRoZSBzdW0gb2YgdGhlIHNxdWFyZXMgb2YgdltpMCxpMVsgKilcbmxldCByZWMgc3Vtc3EgdiBpMCBpMSA9XG4gIGlmIGkwID49IGkxIHRoZW4gMC4wXG4gIGVsc2UgaWYgaTEgPSBpMCArIDEgdGhlbiBQZXJ2YXNpdmVzLmZsb2F0IHYuKGkwKSAqLiBQZXJ2YXNpdmVzLmZsb2F0IHYuKGkwKVxuICBlbHNlIHN1bXNxIHYgaTAgKChpMCtpMSkvMikgKy4gc3Vtc3EgdiAoKGkwK2kxKS8yKSBpMVxuOztcblxubGV0IGNoaXNxdWFyZSBnIG4gciA9XG4gIGlmIG4gPD0gMTAgKiByIHRoZW4gaW52YWxpZF9hcmcgXCJjaGlzcXVhcmVcIjtcbiAgbGV0IGYgPSBBcnJheS5tYWtlIHIgMCBpblxuICBmb3IgaSA9IDEgdG8gbiBkb1xuICAgIGxldCB0ID0gZyByIGluXG4gICAgZi4odCkgPC0gZi4odCkgKyAxXG4gIGRvbmU7XG4gIGxldCB0ID0gc3Vtc3EgZiAwIHJcbiAgYW5kIHIgPSBQZXJ2YXNpdmVzLmZsb2F0IHJcbiAgYW5kIG4gPSBQZXJ2YXNpdmVzLmZsb2F0IG4gaW5cbiAgbGV0IHNyID0gMi4wICouIHNxcnQgciBpblxuICAociAtLiBzciwgICAociAqLiB0IC8uIG4pIC0uIG4sICAgciArLiBzcilcbjs7XG5cbigqIFRoaXMgaXMgdG8gdGVzdCBmb3IgbGluZWFyIGRlcGVuZGVuY2llcyBiZXR3ZWVuIHN1Y2Nlc3NpdmUgcmFuZG9tIG51bWJlcnMuXG4qKVxubGV0IHN0ID0gcmVmIDA7O1xubGV0IGluaXRfZGlmZiByID0gc3QgOj0gaW50IHI7O1xubGV0IGRpZmYgciA9XG4gIGxldCB4MSA9ICFzdFxuICBhbmQgeDIgPSBpbnQgclxuICBpblxuICBzdCA6PSB4MjtcbiAgaWYgeDEgPj0geDIgdGhlblxuICAgIHgxIC0geDJcbiAgZWxzZVxuICAgIHIgKyB4MSAtIHgyXG47O1xuXG5sZXQgc3QxID0gcmVmIDBcbmFuZCBzdDIgPSByZWYgMFxuOztcblxuKCogVGhpcyBpcyB0byB0ZXN0IGZvciBxdWFkcmF0aWMgZGVwZW5kZW5jaWVzIGJldHdlZW4gc3VjY2Vzc2l2ZSByYW5kb21cbiAgIG51bWJlcnMuXG4qKVxubGV0IGluaXRfZGlmZjIgciA9IHN0MSA6PSBpbnQgcjsgc3QyIDo9IGludCByOztcbmxldCBkaWZmMiByID1cbiAgbGV0IHgxID0gIXN0MVxuICBhbmQgeDIgPSAhc3QyXG4gIGFuZCB4MyA9IGludCByXG4gIGluXG4gIHN0MSA6PSB4MjtcbiAgc3QyIDo9IHgzO1xuICAoeDMgLSB4MiAtIHgyICsgeDEgKyAyKnIpIG1vZCByXG47O1xuXG4qKioqKioqKioqKioqKioqKioqKilcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgWGF2aWVyIExlcm95LCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogSGFzaCB0YWJsZXMgKilcblxuZXh0ZXJuYWwgc2VlZGVkX2hhc2hfcGFyYW0gOlxuICBpbnQgLT4gaW50IC0+IGludCAtPiAnYSAtPiBpbnQgPSBcImNhbWxfaGFzaFwiIFwibm9hbGxvY1wiXG5leHRlcm5hbCBvbGRfaGFzaF9wYXJhbSA6XG4gIGludCAtPiBpbnQgLT4gJ2EgLT4gaW50ID0gXCJjYW1sX2hhc2hfdW5pdl9wYXJhbVwiIFwibm9hbGxvY1wiXG5cbmxldCBoYXNoIHggPSBzZWVkZWRfaGFzaF9wYXJhbSAxMCAxMDAgMCB4XG5sZXQgaGFzaF9wYXJhbSBuMSBuMiB4ID0gc2VlZGVkX2hhc2hfcGFyYW0gbjEgbjIgMCB4XG5sZXQgc2VlZGVkX2hhc2ggc2VlZCB4ID0gc2VlZGVkX2hhc2hfcGFyYW0gMTAgMTAwIHNlZWQgeFxuXG4oKiBXZSBkbyBkeW5hbWljIGhhc2hpbmcsIGFuZCByZXNpemUgdGhlIHRhYmxlIGFuZCByZWhhc2ggdGhlIGVsZW1lbnRzXG4gICB3aGVuIGJ1Y2tldHMgYmVjb21lIHRvbyBsb25nLiAqKVxuXG50eXBlICgnYSwgJ2IpIHQgPVxuICB7IG11dGFibGUgc2l6ZTogaW50OyAgICAgICAgICAgICAgICAgICAgICAgICgqIG51bWJlciBvZiBlbnRyaWVzICopXG4gICAgbXV0YWJsZSBkYXRhOiAoJ2EsICdiKSBidWNrZXRsaXN0IGFycmF5OyAgKCogdGhlIGJ1Y2tldHMgKilcbiAgICBtdXRhYmxlIHNlZWQ6IGludDsgICAgICAgICAgICAgICAgICAgICAgICAoKiBmb3IgcmFuZG9taXphdGlvbiAqKVxuICAgIGluaXRpYWxfc2l6ZTogaW50OyAgICAgICAgICAgICAgICAgICAgICAgICgqIGluaXRpYWwgYXJyYXkgc2l6ZSAqKVxuICB9XG5cbmFuZCAoJ2EsICdiKSBidWNrZXRsaXN0ID1cbiAgICBFbXB0eVxuICB8IENvbnMgb2YgJ2EgKiAnYiAqICgnYSwgJ2IpIGJ1Y2tldGxpc3RcblxuKCogVG8gcGljayByYW5kb20gc2VlZHMgaWYgcmVxdWVzdGVkICopXG5cbmxldCByYW5kb21pemVkX2RlZmF1bHQgPVxuICBsZXQgcGFyYW1zID1cbiAgICB0cnkgU3lzLmdldGVudiBcIk9DQU1MUlVOUEFSQU1cIiB3aXRoIE5vdF9mb3VuZCAtPlxuICAgIHRyeSBTeXMuZ2V0ZW52IFwiQ0FNTFJVTlBBUkFNXCIgd2l0aCBOb3RfZm91bmQgLT4gXCJcIiBpblxuICBTdHJpbmcuY29udGFpbnMgcGFyYW1zICdSJ1xuXG5sZXQgcmFuZG9taXplZCA9IHJlZiByYW5kb21pemVkX2RlZmF1bHRcblxubGV0IHJhbmRvbWl6ZSAoKSA9IHJhbmRvbWl6ZWQgOj0gdHJ1ZVxuXG5sZXQgcHJuZyA9IGxhenkgKFJhbmRvbS5TdGF0ZS5tYWtlX3NlbGZfaW5pdCgpKVxuXG4oKiBDcmVhdGluZyBhIGZyZXNoLCBlbXB0eSB0YWJsZSAqKVxuXG5sZXQgcmVjIHBvd2VyXzJfYWJvdmUgeCBuID1cbiAgaWYgeCA+PSBuIHRoZW4geFxuICBlbHNlIGlmIHggKiAyID4gU3lzLm1heF9hcnJheV9sZW5ndGggdGhlbiB4XG4gIGVsc2UgcG93ZXJfMl9hYm92ZSAoeCAqIDIpIG5cblxubGV0IGNyZWF0ZSA/KHJhbmRvbSA9ICFyYW5kb21pemVkKSBpbml0aWFsX3NpemUgPVxuICBsZXQgcyA9IHBvd2VyXzJfYWJvdmUgMTYgaW5pdGlhbF9zaXplIGluXG4gIGxldCBzZWVkID0gaWYgcmFuZG9tIHRoZW4gUmFuZG9tLlN0YXRlLmJpdHMgKExhenkuZm9yY2UgcHJuZykgZWxzZSAwIGluXG4gIHsgaW5pdGlhbF9zaXplID0gczsgc2l6ZSA9IDA7IHNlZWQgPSBzZWVkOyBkYXRhID0gQXJyYXkubWFrZSBzIEVtcHR5IH1cblxubGV0IGNsZWFyIGggPVxuICBoLnNpemUgPC0gMDtcbiAgbGV0IGxlbiA9IEFycmF5Lmxlbmd0aCBoLmRhdGEgaW5cbiAgZm9yIGkgPSAwIHRvIGxlbiAtIDEgZG9cbiAgICBoLmRhdGEuKGkpIDwtIEVtcHR5XG4gIGRvbmVcblxubGV0IHJlc2V0IGggPVxuICBsZXQgbGVuID0gQXJyYXkubGVuZ3RoIGguZGF0YSBpblxuICBpZiBPYmouc2l6ZSAoT2JqLnJlcHIgaCkgPCA0ICgqIGNvbXBhdGliaWxpdHkgd2l0aCBvbGQgaGFzaCB0YWJsZXMgKilcbiAgICB8fCBsZW4gPSBoLmluaXRpYWxfc2l6ZSB0aGVuXG4gICAgY2xlYXIgaFxuICBlbHNlIGJlZ2luXG4gICAgaC5zaXplIDwtIDA7XG4gICAgaC5kYXRhIDwtIEFycmF5Lm1ha2UgaC5pbml0aWFsX3NpemUgRW1wdHlcbiAgZW5kXG5cbmxldCBjb3B5IGggPSB7IGggd2l0aCBkYXRhID0gQXJyYXkuY29weSBoLmRhdGEgfVxuXG5sZXQgbGVuZ3RoIGggPSBoLnNpemVcblxubGV0IHJlc2l6ZSBpbmRleGZ1biBoID1cbiAgbGV0IG9kYXRhID0gaC5kYXRhIGluXG4gIGxldCBvc2l6ZSA9IEFycmF5Lmxlbmd0aCBvZGF0YSBpblxuICBsZXQgbnNpemUgPSBvc2l6ZSAqIDIgaW5cbiAgaWYgbnNpemUgPCBTeXMubWF4X2FycmF5X2xlbmd0aCB0aGVuIGJlZ2luXG4gICAgbGV0IG5kYXRhID0gQXJyYXkubWFrZSBuc2l6ZSBFbXB0eSBpblxuICAgIGguZGF0YSA8LSBuZGF0YTsgICAgICAgICAgKCogc28gdGhhdCBpbmRleGZ1biBzZWVzIHRoZSBuZXcgYnVja2V0IGNvdW50ICopXG4gICAgbGV0IHJlYyBpbnNlcnRfYnVja2V0ID0gZnVuY3Rpb25cbiAgICAgICAgRW1wdHkgLT4gKClcbiAgICAgIHwgQ29ucyhrZXksIGRhdGEsIHJlc3QpIC0+XG4gICAgICAgICAgaW5zZXJ0X2J1Y2tldCByZXN0OyAoKiBwcmVzZXJ2ZSBvcmlnaW5hbCBvcmRlciBvZiBlbGVtZW50cyAqKVxuICAgICAgICAgIGxldCBuaWR4ID0gaW5kZXhmdW4gaCBrZXkgaW5cbiAgICAgICAgICBuZGF0YS4obmlkeCkgPC0gQ29ucyhrZXksIGRhdGEsIG5kYXRhLihuaWR4KSkgaW5cbiAgICBmb3IgaSA9IDAgdG8gb3NpemUgLSAxIGRvXG4gICAgICBpbnNlcnRfYnVja2V0IG9kYXRhLihpKVxuICAgIGRvbmVcbiAgZW5kXG5cbmxldCBrZXlfaW5kZXggaCBrZXkgPVxuICAoKiBjb21wYXRpYmlsaXR5IHdpdGggb2xkIGhhc2ggdGFibGVzICopXG4gIGlmIE9iai5zaXplIChPYmoucmVwciBoKSA+PSAzXG4gIHRoZW4gKHNlZWRlZF9oYXNoX3BhcmFtIDEwIDEwMCBoLnNlZWQga2V5KSBsYW5kIChBcnJheS5sZW5ndGggaC5kYXRhIC0gMSlcbiAgZWxzZSAob2xkX2hhc2hfcGFyYW0gMTAgMTAwIGtleSkgbW9kIChBcnJheS5sZW5ndGggaC5kYXRhKVxuXG5sZXQgYWRkIGgga2V5IGluZm8gPVxuICBsZXQgaSA9IGtleV9pbmRleCBoIGtleSBpblxuICBsZXQgYnVja2V0ID0gQ29ucyhrZXksIGluZm8sIGguZGF0YS4oaSkpIGluXG4gIGguZGF0YS4oaSkgPC0gYnVja2V0O1xuICBoLnNpemUgPC0gaC5zaXplICsgMTtcbiAgaWYgaC5zaXplID4gQXJyYXkubGVuZ3RoIGguZGF0YSBsc2wgMSB0aGVuIHJlc2l6ZSBrZXlfaW5kZXggaFxuXG5sZXQgcmVtb3ZlIGgga2V5ID1cbiAgbGV0IHJlYyByZW1vdmVfYnVja2V0ID0gZnVuY3Rpb25cbiAgICB8IEVtcHR5IC0+XG4gICAgICAgIEVtcHR5XG4gICAgfCBDb25zKGssIGksIG5leHQpIC0+XG4gICAgICAgIGlmIGNvbXBhcmUgayBrZXkgPSAwXG4gICAgICAgIHRoZW4gYmVnaW4gaC5zaXplIDwtIGguc2l6ZSAtIDE7IG5leHQgZW5kXG4gICAgICAgIGVsc2UgQ29ucyhrLCBpLCByZW1vdmVfYnVja2V0IG5leHQpIGluXG4gIGxldCBpID0ga2V5X2luZGV4IGgga2V5IGluXG4gIGguZGF0YS4oaSkgPC0gcmVtb3ZlX2J1Y2tldCBoLmRhdGEuKGkpXG5cbmxldCByZWMgZmluZF9yZWMga2V5ID0gZnVuY3Rpb25cbiAgfCBFbXB0eSAtPlxuICAgICAgcmFpc2UgTm90X2ZvdW5kXG4gIHwgQ29ucyhrLCBkLCByZXN0KSAtPlxuICAgICAgaWYgY29tcGFyZSBrZXkgayA9IDAgdGhlbiBkIGVsc2UgZmluZF9yZWMga2V5IHJlc3RcblxubGV0IGZpbmQgaCBrZXkgPVxuICBtYXRjaCBoLmRhdGEuKGtleV9pbmRleCBoIGtleSkgd2l0aFxuICB8IEVtcHR5IC0+IHJhaXNlIE5vdF9mb3VuZFxuICB8IENvbnMoazEsIGQxLCByZXN0MSkgLT5cbiAgICAgIGlmIGNvbXBhcmUga2V5IGsxID0gMCB0aGVuIGQxIGVsc2VcbiAgICAgIG1hdGNoIHJlc3QxIHdpdGhcbiAgICAgIHwgRW1wdHkgLT4gcmFpc2UgTm90X2ZvdW5kXG4gICAgICB8IENvbnMoazIsIGQyLCByZXN0MikgLT5cbiAgICAgICAgICBpZiBjb21wYXJlIGtleSBrMiA9IDAgdGhlbiBkMiBlbHNlXG4gICAgICAgICAgbWF0Y2ggcmVzdDIgd2l0aFxuICAgICAgICAgIHwgRW1wdHkgLT4gcmFpc2UgTm90X2ZvdW5kXG4gICAgICAgICAgfCBDb25zKGszLCBkMywgcmVzdDMpIC0+XG4gICAgICAgICAgICAgIGlmIGNvbXBhcmUga2V5IGszID0gMCB0aGVuIGQzIGVsc2UgZmluZF9yZWMga2V5IHJlc3QzXG5cbmxldCBmaW5kX2FsbCBoIGtleSA9XG4gIGxldCByZWMgZmluZF9pbl9idWNrZXQgPSBmdW5jdGlvblxuICB8IEVtcHR5IC0+XG4gICAgICBbXVxuICB8IENvbnMoaywgZCwgcmVzdCkgLT5cbiAgICAgIGlmIGNvbXBhcmUgayBrZXkgPSAwXG4gICAgICB0aGVuIGQgOjogZmluZF9pbl9idWNrZXQgcmVzdFxuICAgICAgZWxzZSBmaW5kX2luX2J1Y2tldCByZXN0IGluXG4gIGZpbmRfaW5fYnVja2V0IGguZGF0YS4oa2V5X2luZGV4IGgga2V5KVxuXG5sZXQgcmVwbGFjZSBoIGtleSBpbmZvID1cbiAgbGV0IHJlYyByZXBsYWNlX2J1Y2tldCA9IGZ1bmN0aW9uXG4gICAgfCBFbXB0eSAtPlxuICAgICAgICByYWlzZSBOb3RfZm91bmRcbiAgICB8IENvbnMoaywgaSwgbmV4dCkgLT5cbiAgICAgICAgaWYgY29tcGFyZSBrIGtleSA9IDBcbiAgICAgICAgdGhlbiBDb25zKGtleSwgaW5mbywgbmV4dClcbiAgICAgICAgZWxzZSBDb25zKGssIGksIHJlcGxhY2VfYnVja2V0IG5leHQpIGluXG4gIGxldCBpID0ga2V5X2luZGV4IGgga2V5IGluXG4gIGxldCBsID0gaC5kYXRhLihpKSBpblxuICB0cnlcbiAgICBoLmRhdGEuKGkpIDwtIHJlcGxhY2VfYnVja2V0IGxcbiAgd2l0aCBOb3RfZm91bmQgLT5cbiAgICBoLmRhdGEuKGkpIDwtIENvbnMoa2V5LCBpbmZvLCBsKTtcbiAgICBoLnNpemUgPC0gaC5zaXplICsgMTtcbiAgICBpZiBoLnNpemUgPiBBcnJheS5sZW5ndGggaC5kYXRhIGxzbCAxIHRoZW4gcmVzaXplIGtleV9pbmRleCBoXG5cbmxldCBtZW0gaCBrZXkgPVxuICBsZXQgcmVjIG1lbV9pbl9idWNrZXQgPSBmdW5jdGlvblxuICB8IEVtcHR5IC0+XG4gICAgICBmYWxzZVxuICB8IENvbnMoaywgZCwgcmVzdCkgLT5cbiAgICAgIGNvbXBhcmUgayBrZXkgPSAwIHx8IG1lbV9pbl9idWNrZXQgcmVzdCBpblxuICBtZW1faW5fYnVja2V0IGguZGF0YS4oa2V5X2luZGV4IGgga2V5KVxuXG5sZXQgaXRlciBmIGggPVxuICBsZXQgcmVjIGRvX2J1Y2tldCA9IGZ1bmN0aW9uXG4gICAgfCBFbXB0eSAtPlxuICAgICAgICAoKVxuICAgIHwgQ29ucyhrLCBkLCByZXN0KSAtPlxuICAgICAgICBmIGsgZDsgZG9fYnVja2V0IHJlc3QgaW5cbiAgbGV0IGQgPSBoLmRhdGEgaW5cbiAgZm9yIGkgPSAwIHRvIEFycmF5Lmxlbmd0aCBkIC0gMSBkb1xuICAgIGRvX2J1Y2tldCBkLihpKVxuICBkb25lXG5cbmxldCBmb2xkIGYgaCBpbml0ID1cbiAgbGV0IHJlYyBkb19idWNrZXQgYiBhY2N1ID1cbiAgICBtYXRjaCBiIHdpdGhcbiAgICAgIEVtcHR5IC0+XG4gICAgICAgIGFjY3VcbiAgICB8IENvbnMoaywgZCwgcmVzdCkgLT5cbiAgICAgICAgZG9fYnVja2V0IHJlc3QgKGYgayBkIGFjY3UpIGluXG4gIGxldCBkID0gaC5kYXRhIGluXG4gIGxldCBhY2N1ID0gcmVmIGluaXQgaW5cbiAgZm9yIGkgPSAwIHRvIEFycmF5Lmxlbmd0aCBkIC0gMSBkb1xuICAgIGFjY3UgOj0gZG9fYnVja2V0IGQuKGkpICFhY2N1XG4gIGRvbmU7XG4gICFhY2N1XG5cbnR5cGUgc3RhdGlzdGljcyA9IHtcbiAgbnVtX2JpbmRpbmdzOiBpbnQ7XG4gIG51bV9idWNrZXRzOiBpbnQ7XG4gIG1heF9idWNrZXRfbGVuZ3RoOiBpbnQ7XG4gIGJ1Y2tldF9oaXN0b2dyYW06IGludCBhcnJheVxufVxuXG5sZXQgcmVjIGJ1Y2tldF9sZW5ndGggYWNjdSA9IGZ1bmN0aW9uXG4gIHwgRW1wdHkgLT4gYWNjdVxuICB8IENvbnMoXywgXywgcmVzdCkgLT4gYnVja2V0X2xlbmd0aCAoYWNjdSArIDEpIHJlc3RcblxubGV0IHN0YXRzIGggPVxuICBsZXQgbWJsID1cbiAgICBBcnJheS5mb2xkX2xlZnQgKGZ1biBtIGIgLT4gbWF4IG0gKGJ1Y2tldF9sZW5ndGggMCBiKSkgMCBoLmRhdGEgaW5cbiAgbGV0IGhpc3RvID0gQXJyYXkubWFrZSAobWJsICsgMSkgMCBpblxuICBBcnJheS5pdGVyXG4gICAgKGZ1biBiIC0+XG4gICAgICBsZXQgbCA9IGJ1Y2tldF9sZW5ndGggMCBiIGluXG4gICAgICBoaXN0by4obCkgPC0gaGlzdG8uKGwpICsgMSlcbiAgICBoLmRhdGE7XG4gIHsgbnVtX2JpbmRpbmdzID0gaC5zaXplO1xuICAgIG51bV9idWNrZXRzID0gQXJyYXkubGVuZ3RoIGguZGF0YTtcbiAgICBtYXhfYnVja2V0X2xlbmd0aCA9IG1ibDtcbiAgICBidWNrZXRfaGlzdG9ncmFtID0gaGlzdG8gfVxuXG4oKiBGdW5jdG9yaWFsIGludGVyZmFjZSAqKVxuXG5tb2R1bGUgdHlwZSBIYXNoZWRUeXBlID1cbiAgc2lnXG4gICAgdHlwZSB0XG4gICAgdmFsIGVxdWFsOiB0IC0+IHQgLT4gYm9vbFxuICAgIHZhbCBoYXNoOiB0IC0+IGludFxuICBlbmRcblxubW9kdWxlIHR5cGUgU2VlZGVkSGFzaGVkVHlwZSA9XG4gIHNpZ1xuICAgIHR5cGUgdFxuICAgIHZhbCBlcXVhbDogdCAtPiB0IC0+IGJvb2xcbiAgICB2YWwgaGFzaDogaW50IC0+IHQgLT4gaW50XG4gIGVuZFxuXG5tb2R1bGUgdHlwZSBTID1cbiAgc2lnXG4gICAgdHlwZSBrZXlcbiAgICB0eXBlICdhIHRcbiAgICB2YWwgY3JlYXRlOiBpbnQgLT4gJ2EgdFxuICAgIHZhbCBjbGVhciA6ICdhIHQgLT4gdW5pdFxuICAgIHZhbCByZXNldCA6ICdhIHQgLT4gdW5pdFxuICAgIHZhbCBjb3B5OiAnYSB0IC0+ICdhIHRcbiAgICB2YWwgYWRkOiAnYSB0IC0+IGtleSAtPiAnYSAtPiB1bml0XG4gICAgdmFsIHJlbW92ZTogJ2EgdCAtPiBrZXkgLT4gdW5pdFxuICAgIHZhbCBmaW5kOiAnYSB0IC0+IGtleSAtPiAnYVxuICAgIHZhbCBmaW5kX2FsbDogJ2EgdCAtPiBrZXkgLT4gJ2EgbGlzdFxuICAgIHZhbCByZXBsYWNlIDogJ2EgdCAtPiBrZXkgLT4gJ2EgLT4gdW5pdFxuICAgIHZhbCBtZW0gOiAnYSB0IC0+IGtleSAtPiBib29sXG4gICAgdmFsIGl0ZXI6IChrZXkgLT4gJ2EgLT4gdW5pdCkgLT4gJ2EgdCAtPiB1bml0XG4gICAgdmFsIGZvbGQ6IChrZXkgLT4gJ2EgLT4gJ2IgLT4gJ2IpIC0+ICdhIHQgLT4gJ2IgLT4gJ2JcbiAgICB2YWwgbGVuZ3RoOiAnYSB0IC0+IGludFxuICAgIHZhbCBzdGF0czogJ2EgdCAtPiBzdGF0aXN0aWNzXG4gIGVuZFxuXG5tb2R1bGUgdHlwZSBTZWVkZWRTID1cbiAgc2lnXG4gICAgdHlwZSBrZXlcbiAgICB0eXBlICdhIHRcbiAgICB2YWwgY3JlYXRlIDogP3JhbmRvbTpib29sIC0+IGludCAtPiAnYSB0XG4gICAgdmFsIGNsZWFyIDogJ2EgdCAtPiB1bml0XG4gICAgdmFsIHJlc2V0IDogJ2EgdCAtPiB1bml0XG4gICAgdmFsIGNvcHkgOiAnYSB0IC0+ICdhIHRcbiAgICB2YWwgYWRkIDogJ2EgdCAtPiBrZXkgLT4gJ2EgLT4gdW5pdFxuICAgIHZhbCByZW1vdmUgOiAnYSB0IC0+IGtleSAtPiB1bml0XG4gICAgdmFsIGZpbmQgOiAnYSB0IC0+IGtleSAtPiAnYVxuICAgIHZhbCBmaW5kX2FsbCA6ICdhIHQgLT4ga2V5IC0+ICdhIGxpc3RcbiAgICB2YWwgcmVwbGFjZSA6ICdhIHQgLT4ga2V5IC0+ICdhIC0+IHVuaXRcbiAgICB2YWwgbWVtIDogJ2EgdCAtPiBrZXkgLT4gYm9vbFxuICAgIHZhbCBpdGVyIDogKGtleSAtPiAnYSAtPiB1bml0KSAtPiAnYSB0IC0+IHVuaXRcbiAgICB2YWwgZm9sZCA6IChrZXkgLT4gJ2EgLT4gJ2IgLT4gJ2IpIC0+ICdhIHQgLT4gJ2IgLT4gJ2JcbiAgICB2YWwgbGVuZ3RoIDogJ2EgdCAtPiBpbnRcbiAgICB2YWwgc3RhdHM6ICdhIHQgLT4gc3RhdGlzdGljc1xuICBlbmRcblxubW9kdWxlIE1ha2VTZWVkZWQoSDogU2VlZGVkSGFzaGVkVHlwZSk6IChTZWVkZWRTIHdpdGggdHlwZSBrZXkgPSBILnQpID1cbiAgc3RydWN0XG4gICAgdHlwZSBrZXkgPSBILnRcbiAgICB0eXBlICdhIGhhc2h0YmwgPSAoa2V5LCAnYSkgdFxuICAgIHR5cGUgJ2EgdCA9ICdhIGhhc2h0YmxcbiAgICBsZXQgY3JlYXRlID0gY3JlYXRlXG4gICAgbGV0IGNsZWFyID0gY2xlYXJcbiAgICBsZXQgcmVzZXQgPSByZXNldFxuICAgIGxldCBjb3B5ID0gY29weVxuXG4gICAgbGV0IGtleV9pbmRleCBoIGtleSA9XG4gICAgICAoSC5oYXNoIGguc2VlZCBrZXkpIGxhbmQgKEFycmF5Lmxlbmd0aCBoLmRhdGEgLSAxKVxuXG4gICAgbGV0IGFkZCBoIGtleSBpbmZvID1cbiAgICAgIGxldCBpID0ga2V5X2luZGV4IGgga2V5IGluXG4gICAgICBsZXQgYnVja2V0ID0gQ29ucyhrZXksIGluZm8sIGguZGF0YS4oaSkpIGluXG4gICAgICBoLmRhdGEuKGkpIDwtIGJ1Y2tldDtcbiAgICAgIGguc2l6ZSA8LSBoLnNpemUgKyAxO1xuICAgICAgaWYgaC5zaXplID4gQXJyYXkubGVuZ3RoIGguZGF0YSBsc2wgMSB0aGVuIHJlc2l6ZSBrZXlfaW5kZXggaFxuXG4gICAgbGV0IHJlbW92ZSBoIGtleSA9XG4gICAgICBsZXQgcmVjIHJlbW92ZV9idWNrZXQgPSBmdW5jdGlvblxuICAgICAgICB8IEVtcHR5IC0+XG4gICAgICAgICAgICBFbXB0eVxuICAgICAgICB8IENvbnMoaywgaSwgbmV4dCkgLT5cbiAgICAgICAgICAgIGlmIEguZXF1YWwgayBrZXlcbiAgICAgICAgICAgIHRoZW4gYmVnaW4gaC5zaXplIDwtIGguc2l6ZSAtIDE7IG5leHQgZW5kXG4gICAgICAgICAgICBlbHNlIENvbnMoaywgaSwgcmVtb3ZlX2J1Y2tldCBuZXh0KSBpblxuICAgICAgbGV0IGkgPSBrZXlfaW5kZXggaCBrZXkgaW5cbiAgICAgIGguZGF0YS4oaSkgPC0gcmVtb3ZlX2J1Y2tldCBoLmRhdGEuKGkpXG5cbiAgICBsZXQgcmVjIGZpbmRfcmVjIGtleSA9IGZ1bmN0aW9uXG4gICAgICB8IEVtcHR5IC0+XG4gICAgICAgICAgcmFpc2UgTm90X2ZvdW5kXG4gICAgICB8IENvbnMoaywgZCwgcmVzdCkgLT5cbiAgICAgICAgICBpZiBILmVxdWFsIGtleSBrIHRoZW4gZCBlbHNlIGZpbmRfcmVjIGtleSByZXN0XG5cbiAgICBsZXQgZmluZCBoIGtleSA9XG4gICAgICBtYXRjaCBoLmRhdGEuKGtleV9pbmRleCBoIGtleSkgd2l0aFxuICAgICAgfCBFbXB0eSAtPiByYWlzZSBOb3RfZm91bmRcbiAgICAgIHwgQ29ucyhrMSwgZDEsIHJlc3QxKSAtPlxuICAgICAgICAgIGlmIEguZXF1YWwga2V5IGsxIHRoZW4gZDEgZWxzZVxuICAgICAgICAgIG1hdGNoIHJlc3QxIHdpdGhcbiAgICAgICAgICB8IEVtcHR5IC0+IHJhaXNlIE5vdF9mb3VuZFxuICAgICAgICAgIHwgQ29ucyhrMiwgZDIsIHJlc3QyKSAtPlxuICAgICAgICAgICAgICBpZiBILmVxdWFsIGtleSBrMiB0aGVuIGQyIGVsc2VcbiAgICAgICAgICAgICAgbWF0Y2ggcmVzdDIgd2l0aFxuICAgICAgICAgICAgICB8IEVtcHR5IC0+IHJhaXNlIE5vdF9mb3VuZFxuICAgICAgICAgICAgICB8IENvbnMoazMsIGQzLCByZXN0MykgLT5cbiAgICAgICAgICAgICAgICAgIGlmIEguZXF1YWwga2V5IGszIHRoZW4gZDMgZWxzZSBmaW5kX3JlYyBrZXkgcmVzdDNcblxuICAgIGxldCBmaW5kX2FsbCBoIGtleSA9XG4gICAgICBsZXQgcmVjIGZpbmRfaW5fYnVja2V0ID0gZnVuY3Rpb25cbiAgICAgIHwgRW1wdHkgLT5cbiAgICAgICAgICBbXVxuICAgICAgfCBDb25zKGssIGQsIHJlc3QpIC0+XG4gICAgICAgICAgaWYgSC5lcXVhbCBrIGtleVxuICAgICAgICAgIHRoZW4gZCA6OiBmaW5kX2luX2J1Y2tldCByZXN0XG4gICAgICAgICAgZWxzZSBmaW5kX2luX2J1Y2tldCByZXN0IGluXG4gICAgICBmaW5kX2luX2J1Y2tldCBoLmRhdGEuKGtleV9pbmRleCBoIGtleSlcblxuICAgIGxldCByZXBsYWNlIGgga2V5IGluZm8gPVxuICAgICAgbGV0IHJlYyByZXBsYWNlX2J1Y2tldCA9IGZ1bmN0aW9uXG4gICAgICAgIHwgRW1wdHkgLT5cbiAgICAgICAgICAgIHJhaXNlIE5vdF9mb3VuZFxuICAgICAgICB8IENvbnMoaywgaSwgbmV4dCkgLT5cbiAgICAgICAgICAgIGlmIEguZXF1YWwgayBrZXlcbiAgICAgICAgICAgIHRoZW4gQ29ucyhrZXksIGluZm8sIG5leHQpXG4gICAgICAgICAgICBlbHNlIENvbnMoaywgaSwgcmVwbGFjZV9idWNrZXQgbmV4dCkgaW5cbiAgICAgIGxldCBpID0ga2V5X2luZGV4IGgga2V5IGluXG4gICAgICBsZXQgbCA9IGguZGF0YS4oaSkgaW5cbiAgICAgIHRyeVxuICAgICAgICBoLmRhdGEuKGkpIDwtIHJlcGxhY2VfYnVja2V0IGxcbiAgICAgIHdpdGggTm90X2ZvdW5kIC0+XG4gICAgICAgIGguZGF0YS4oaSkgPC0gQ29ucyhrZXksIGluZm8sIGwpO1xuICAgICAgICBoLnNpemUgPC0gaC5zaXplICsgMTtcbiAgICAgICAgaWYgaC5zaXplID4gQXJyYXkubGVuZ3RoIGguZGF0YSBsc2wgMSB0aGVuIHJlc2l6ZSBrZXlfaW5kZXggaFxuXG4gICAgbGV0IG1lbSBoIGtleSA9XG4gICAgICBsZXQgcmVjIG1lbV9pbl9idWNrZXQgPSBmdW5jdGlvblxuICAgICAgfCBFbXB0eSAtPlxuICAgICAgICAgIGZhbHNlXG4gICAgICB8IENvbnMoaywgZCwgcmVzdCkgLT5cbiAgICAgICAgICBILmVxdWFsIGsga2V5IHx8IG1lbV9pbl9idWNrZXQgcmVzdCBpblxuICAgICAgbWVtX2luX2J1Y2tldCBoLmRhdGEuKGtleV9pbmRleCBoIGtleSlcblxuICAgIGxldCBpdGVyID0gaXRlclxuICAgIGxldCBmb2xkID0gZm9sZFxuICAgIGxldCBsZW5ndGggPSBsZW5ndGhcbiAgICBsZXQgc3RhdHMgPSBzdGF0c1xuICBlbmRcblxubW9kdWxlIE1ha2UoSDogSGFzaGVkVHlwZSk6IChTIHdpdGggdHlwZSBrZXkgPSBILnQpID1cbiAgc3RydWN0XG4gICAgaW5jbHVkZSBNYWtlU2VlZGVkKHN0cnVjdFxuICAgICAgICB0eXBlIHQgPSBILnRcbiAgICAgICAgbGV0IGVxdWFsID0gSC5lcXVhbFxuICAgICAgICBsZXQgaGFzaCAoc2VlZDogaW50KSB4ID0gSC5oYXNoIHhcbiAgICAgIGVuZClcbiAgICBsZXQgY3JlYXRlIHN6ID0gY3JlYXRlIH5yYW5kb206ZmFsc2Ugc3pcbiAgZW5kXG4iLCIoKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0NhbWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgICAgICAgICAgIFBpZXJyZSBXZWlzLCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiAgQ29weXJpZ2h0IDE5OTYgSW5zdGl0dXQgTmF0aW9uYWwgZGUgUmVjaGVyY2hlIGVuIEluZm9ybWF0aXF1ZSBldCAgICopXG4oKiAgZW4gQXV0b21hdGlxdWUuICBBbGwgcmlnaHRzIHJlc2VydmVkLiAgVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkICAgICopXG4oKiAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGlicmFyeSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLCB3aXRoICAgICopXG4oKiAgdGhlIHNwZWNpYWwgZXhjZXB0aW9uIG9uIGxpbmtpbmcgZGVzY3JpYmVkIGluIGZpbGUgLi4vTElDRU5TRS4gICAgICopXG4oKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIEEgcHJldHR5LXByaW50aW5nIGZhY2lsaXR5IGFuZCBkZWZpbml0aW9uIG9mIGZvcm1hdHRlcnMgZm9yICdwYXJhbGxlbCdcbiAgIChpLmUuIHVucmVsYXRlZCBvciBpbmRlcGVuZGVudCkgcHJldHR5LXByaW50aW5nIG9uIG11bHRpcGxlIG91dCBjaGFubmVscy4gKilcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgRGF0YSBzdHJ1Y3R1cmVzIGRlZmluaXRpb25zLlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbnR5cGUgc2l6ZTs7XG5cbmV4dGVybmFsIHNpemVfb2ZfaW50IDogaW50IC0+IHNpemUgPSBcIiVpZGVudGl0eVwiXG47O1xuZXh0ZXJuYWwgaW50X29mX3NpemUgOiBzaXplIC0+IGludCA9IFwiJWlkZW50aXR5XCJcbjs7XG5cbigqIFRva2VucyBhcmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgOiAqKVxuXG50eXBlIGJsb2NrX3R5cGVcbiAgICAgICA9IENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5ibG9ja190eXBlXG4gICAgICAgPSBQcF9oYm94IHwgUHBfdmJveCB8IFBwX2h2Ym94IHwgUHBfaG92Ym94IHwgUHBfYm94IHwgUHBfZml0c1xuXG50eXBlIHBwX3Rva2VuID1cbnwgUHBfdGV4dCBvZiBzdHJpbmcgICAgICAgICAgICAoKiBub3JtYWwgdGV4dCAqKVxufCBQcF9icmVhayBvZiBpbnQgKiBpbnQgICAgICAgICgqIGNvbXBsZXRlIGJyZWFrICopXG58IFBwX3RicmVhayBvZiBpbnQgKiBpbnQgICAgICAgKCogZ28gdG8gbmV4dCB0YWJ1bGF0aW9uICopXG58IFBwX3N0YWIgICAgICAgICAgICAgICAgICAgICAgKCogc2V0IGEgdGFidWxhdGlvbiAqKVxufCBQcF9iZWdpbiBvZiBpbnQgKiBibG9ja190eXBlICgqIGJlZ2lubmluZyBvZiBhIGJsb2NrICopXG58IFBwX2VuZCAgICAgICAgICAgICAgICAgICAgICAgKCogZW5kIG9mIGEgYmxvY2sgKilcbnwgUHBfdGJlZ2luIG9mIHRibG9jayAgICAgICAgICAoKiBiZWdpbm5pbmcgb2YgYSB0YWJ1bGF0aW9uIGJsb2NrICopXG58IFBwX3RlbmQgICAgICAgICAgICAgICAgICAgICAgKCogZW5kIG9mIGEgdGFidWxhdGlvbiBibG9jayAqKVxufCBQcF9uZXdsaW5lICAgICAgICAgICAgICAgICAgICgqIHRvIGZvcmNlIGEgbmV3bGluZSBpbnNpZGUgYSBibG9jayAqKVxufCBQcF9pZl9uZXdsaW5lICAgICAgICAgICAgICAgICgqIHRvIGRvIHNvbWV0aGluZyBvbmx5IGlmIHRoaXMgdmVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgaGFzIGJlZW4gYnJva2VuICopXG58IFBwX29wZW5fdGFnIG9mIHRhZyAgICAgICAgICAgKCogb3BlbmluZyBhIHRhZyBuYW1lICopXG58IFBwX2Nsb3NlX3RhZyAgICAgICAgICAgICAgICAgKCogY2xvc2luZyB0aGUgbW9zdCByZWNlbnRseSBvcGVuZWQgdGFnICopXG5cbmFuZCB0YWcgPSBzdHJpbmdcblxuYW5kIHRibG9jayA9IFBwX3Rib3ggb2YgaW50IGxpc3QgcmVmICAoKiBUYWJ1bGF0aW9uIGJveCAqKVxuXG4oKiBUaGUgUXVldWU6XG4gICBjb250YWlucyBhbGwgZm9ybWF0dGluZyBlbGVtZW50cy5cbiAgIGVsZW1lbnRzIGFyZSB0dXBsZXMgKHNpemUsIHRva2VuLCBsZW5ndGgpLCB3aGVyZVxuICAgc2l6ZSBpcyBzZXQgd2hlbiB0aGUgc2l6ZSBvZiB0aGUgYmxvY2sgaXMga25vd25cbiAgIGxlbiBpcyB0aGUgZGVjbGFyZWQgbGVuZ3RoIG9mIHRoZSB0b2tlbi4gKilcbnR5cGUgcHBfcXVldWVfZWxlbSA9IHtcbiAgbXV0YWJsZSBlbGVtX3NpemUgOiBzaXplO1xuICB0b2tlbiA6IHBwX3Rva2VuO1xuICBsZW5ndGggOiBpbnQ7XG59XG47O1xuXG4oKiBTY2FuIHN0YWNrOlxuICAgZWFjaCBlbGVtZW50IGlzIChsZWZ0X3RvdGFsLCBxdWV1ZSBlbGVtZW50KSB3aGVyZSBsZWZ0X3RvdGFsXG4gICBpcyB0aGUgdmFsdWUgb2YgcHBfbGVmdF90b3RhbCB3aGVuIHRoZSBlbGVtZW50IGhhcyBiZWVuIGVucXVldWVkLiAqKVxudHlwZSBwcF9zY2FuX2VsZW0gPSBTY2FuX2VsZW0gb2YgaW50ICogcHBfcXVldWVfZWxlbTs7XG5cbigqIEZvcm1hdHRpbmcgc3RhY2s6XG4gICB1c2VkIHRvIGJyZWFrIHRoZSBsaW5lcyB3aGlsZSBwcmludGluZyB0b2tlbnMuXG4gICBUaGUgZm9ybWF0dGluZyBzdGFjayBjb250YWlucyB0aGUgZGVzY3JpcHRpb24gb2ZcbiAgIHRoZSBjdXJyZW50bHkgYWN0aXZlIGJsb2Nrcy4gKilcbnR5cGUgcHBfZm9ybWF0X2VsZW0gPSBGb3JtYXRfZWxlbSBvZiBibG9ja190eXBlICogaW50OztcblxuKCogR2VuZXJhbCBwdXJwb3NlIHF1ZXVlcywgdXNlZCBpbiB0aGUgZm9ybWF0dGVyLiAqKVxudHlwZSAnYSBxdWV1ZV9lbGVtID1cbiAgIHwgTmlsXG4gICB8IENvbnMgb2YgJ2EgcXVldWVfY2VsbFxuXG5hbmQgJ2EgcXVldWVfY2VsbCA9IHtcbiAgbXV0YWJsZSBoZWFkIDogJ2E7XG4gIG11dGFibGUgdGFpbCA6ICdhIHF1ZXVlX2VsZW07XG59XG47O1xuXG50eXBlICdhIHF1ZXVlID0ge1xuICBtdXRhYmxlIGluc2VydCA6ICdhIHF1ZXVlX2VsZW07XG4gIG11dGFibGUgYm9keSA6ICdhIHF1ZXVlX2VsZW07XG59XG47O1xuXG4oKiBUaGUgZm9ybWF0dGVyIHNwZWNpZmljIHRhZyBoYW5kbGluZyBmdW5jdGlvbnMuICopXG50eXBlIGZvcm1hdHRlcl90YWdfZnVuY3Rpb25zID0ge1xuICBtYXJrX29wZW5fdGFnIDogdGFnIC0+IHN0cmluZztcbiAgbWFya19jbG9zZV90YWcgOiB0YWcgLT4gc3RyaW5nO1xuICBwcmludF9vcGVuX3RhZyA6IHRhZyAtPiB1bml0O1xuICBwcmludF9jbG9zZV90YWcgOiB0YWcgLT4gdW5pdDtcbn1cbjs7XG5cbigqIEEgZm9ybWF0dGVyIHdpdGggYWxsIGl0cyBtYWNoaW5lcnkuICopXG50eXBlIGZvcm1hdHRlciA9IHtcbiAgbXV0YWJsZSBwcF9zY2FuX3N0YWNrIDogcHBfc2Nhbl9lbGVtIGxpc3Q7XG4gIG11dGFibGUgcHBfZm9ybWF0X3N0YWNrIDogcHBfZm9ybWF0X2VsZW0gbGlzdDtcbiAgbXV0YWJsZSBwcF90Ym94X3N0YWNrIDogdGJsb2NrIGxpc3Q7XG4gIG11dGFibGUgcHBfdGFnX3N0YWNrIDogdGFnIGxpc3Q7XG4gIG11dGFibGUgcHBfbWFya19zdGFjayA6IHRhZyBsaXN0O1xuICAoKiBHbG9iYWwgdmFyaWFibGVzOiBkZWZhdWx0IGluaXRpYWxpemF0aW9uIGlzXG4gICAgIHNldF9tYXJnaW4gNzhcbiAgICAgc2V0X21pbl9zcGFjZV9sZWZ0IDAuICopXG4gICgqIFZhbHVlIG9mIHJpZ2h0IG1hcmdpbi4gKilcbiAgbXV0YWJsZSBwcF9tYXJnaW4gOiBpbnQ7XG4gICgqIE1pbmltYWwgc3BhY2UgbGVmdCBiZWZvcmUgbWFyZ2luLCB3aGVuIG9wZW5pbmcgYSBibG9jay4gKilcbiAgbXV0YWJsZSBwcF9taW5fc3BhY2VfbGVmdCA6IGludDtcbiAgKCogTWF4aW11bSB2YWx1ZSBvZiBpbmRlbnRhdGlvbjpcbiAgICAgbm8gYmxvY2tzIGNhbiBiZSBvcGVuZWQgZnVydGhlci4gKilcbiAgbXV0YWJsZSBwcF9tYXhfaW5kZW50IDogaW50O1xuICAoKiBTcGFjZSByZW1haW5pbmcgb24gdGhlIGN1cnJlbnQgbGluZS4gKilcbiAgbXV0YWJsZSBwcF9zcGFjZV9sZWZ0IDogaW50O1xuICAoKiBDdXJyZW50IHZhbHVlIG9mIGluZGVudGF0aW9uLiAqKVxuICBtdXRhYmxlIHBwX2N1cnJlbnRfaW5kZW50IDogaW50O1xuICAoKiBUcnVlIHdoZW4gdGhlIGxpbmUgaGFzIGJlZW4gYnJva2VuIGJ5IHRoZSBwcmV0dHktcHJpbnRlci4gKilcbiAgbXV0YWJsZSBwcF9pc19uZXdfbGluZSA6IGJvb2w7XG4gICgqIFRvdGFsIHdpZHRoIG9mIHRva2VucyBhbHJlYWR5IHByaW50ZWQuICopXG4gIG11dGFibGUgcHBfbGVmdF90b3RhbCA6IGludDtcbiAgKCogVG90YWwgd2lkdGggb2YgdG9rZW5zIGV2ZXIgcHV0IGluIHF1ZXVlLiAqKVxuICBtdXRhYmxlIHBwX3JpZ2h0X3RvdGFsIDogaW50O1xuICAoKiBDdXJyZW50IG51bWJlciBvZiBvcGVuZWQgYmxvY2tzLiAqKVxuICBtdXRhYmxlIHBwX2N1cnJfZGVwdGggOiBpbnQ7XG4gICgqIE1heGltdW0gbnVtYmVyIG9mIGJsb2NrcyB3aGljaCBjYW4gYmUgc2ltdWx0YW5lb3VzbHkgb3BlbmVkLiAqKVxuICBtdXRhYmxlIHBwX21heF9ib3hlcyA6IGludDtcbiAgKCogRWxsaXBzaXMgc3RyaW5nLiAqKVxuICBtdXRhYmxlIHBwX2VsbGlwc2lzIDogc3RyaW5nO1xuICAoKiBPdXRwdXQgZnVuY3Rpb24uICopXG4gIG11dGFibGUgcHBfb3V0X3N0cmluZyA6IHN0cmluZyAtPiBpbnQgLT4gaW50IC0+IHVuaXQ7XG4gICgqIEZsdXNoaW5nIGZ1bmN0aW9uLiAqKVxuICBtdXRhYmxlIHBwX291dF9mbHVzaCA6IHVuaXQgLT4gdW5pdDtcbiAgKCogT3V0cHV0IG9mIG5ldyBsaW5lcy4gKilcbiAgbXV0YWJsZSBwcF9vdXRfbmV3bGluZSA6IHVuaXQgLT4gdW5pdDtcbiAgKCogT3V0cHV0IG9mIGluZGVudGF0aW9uIHNwYWNlcy4gKilcbiAgbXV0YWJsZSBwcF9vdXRfc3BhY2VzIDogaW50IC0+IHVuaXQ7XG4gICgqIEFyZSB0YWdzIHByaW50ZWQgPyAqKVxuICBtdXRhYmxlIHBwX3ByaW50X3RhZ3MgOiBib29sO1xuICAoKiBBcmUgdGFncyBtYXJrZWQgPyAqKVxuICBtdXRhYmxlIHBwX21hcmtfdGFncyA6IGJvb2w7XG4gICgqIEZpbmQgb3BlbmluZyBhbmQgY2xvc2luZyBtYXJrZXJzIG9mIHRhZ3MuICopXG4gIG11dGFibGUgcHBfbWFya19vcGVuX3RhZyA6IHRhZyAtPiBzdHJpbmc7XG4gIG11dGFibGUgcHBfbWFya19jbG9zZV90YWcgOiB0YWcgLT4gc3RyaW5nO1xuICBtdXRhYmxlIHBwX3ByaW50X29wZW5fdGFnIDogdGFnIC0+IHVuaXQ7XG4gIG11dGFibGUgcHBfcHJpbnRfY2xvc2VfdGFnIDogdGFnIC0+IHVuaXQ7XG4gICgqIFRoZSBwcmV0dHktcHJpbnRlciBxdWV1ZS4gKilcbiAgbXV0YWJsZSBwcF9xdWV1ZSA6IHBwX3F1ZXVlX2VsZW0gcXVldWU7XG59XG47O1xuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICBBdXhpbGxpYXJpZXMgYW5kIGJhc2ljIGZ1bmN0aW9ucy5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5cbigqIFF1ZXVlcyBhdXhpbGxpYXJpZXMuICopXG5sZXQgbWFrZV9xdWV1ZSAoKSA9IHsgaW5zZXJ0ID0gTmlsOyBib2R5ID0gTmlsOyB9OztcblxubGV0IGNsZWFyX3F1ZXVlIHEgPSBxLmluc2VydCA8LSBOaWw7IHEuYm9keSA8LSBOaWw7O1xuXG5sZXQgYWRkX3F1ZXVlIHggcSA9XG4gIGxldCBjID0gQ29ucyB7IGhlYWQgPSB4OyB0YWlsID0gTmlsOyB9IGluXG4gIG1hdGNoIHEgd2l0aFxuICB8IHsgaW5zZXJ0ID0gQ29ucyBjZWxsOyBib2R5ID0gXzsgfSAtPlxuICAgIHEuaW5zZXJ0IDwtIGM7IGNlbGwudGFpbCA8LSBjXG4gICgqIEludmFyaWFudDogd2hlbiBpbnNlcnQgaXMgTmlsIGJvZHkgc2hvdWxkIGJlIE5pbC4gKilcbiAgfCB7IGluc2VydCA9IE5pbDsgYm9keSA9IF87IH0gLT5cbiAgICBxLmluc2VydCA8LSBjOyBxLmJvZHkgPC0gY1xuOztcblxuZXhjZXB0aW9uIEVtcHR5X3F1ZXVlOztcblxubGV0IHBlZWtfcXVldWUgPSBmdW5jdGlvblxuICB8IHsgYm9keSA9IENvbnMgeyBoZWFkID0geDsgdGFpbCA9IF87IH07IF8gfSAtPiB4XG4gIHwgeyBib2R5ID0gTmlsOyBpbnNlcnQgPSBfOyB9IC0+IHJhaXNlIEVtcHR5X3F1ZXVlXG47O1xuXG5sZXQgdGFrZV9xdWV1ZSA9IGZ1bmN0aW9uXG4gIHwgeyBib2R5ID0gQ29ucyB7IGhlYWQgPSB4OyB0YWlsID0gdGw7IH07IF8gfSBhcyBxIC0+XG4gICAgcS5ib2R5IDwtIHRsO1xuICAgIGlmIHRsID0gTmlsIHRoZW4gcS5pbnNlcnQgPC0gTmlsOyAoKiBNYWludGFpbiB0aGUgaW52YXJpYW50LiAqKVxuICAgIHhcbiAgfCB7IGJvZHkgPSBOaWw7IGluc2VydCA9IF87IH0gLT4gcmFpc2UgRW1wdHlfcXVldWVcbjs7XG5cbigqIEVudGVyIGEgdG9rZW4gaW4gdGhlIHByZXR0eS1wcmludGVyIHF1ZXVlLiAqKVxubGV0IHBwX2VucXVldWUgc3RhdGUgKHsgbGVuZ3RoID0gbGVuOyBffSBhcyB0b2tlbikgPVxuICBzdGF0ZS5wcF9yaWdodF90b3RhbCA8LSBzdGF0ZS5wcF9yaWdodF90b3RhbCArIGxlbjtcbiAgYWRkX3F1ZXVlIHRva2VuIHN0YXRlLnBwX3F1ZXVlXG47O1xuXG5sZXQgcHBfY2xlYXJfcXVldWUgc3RhdGUgPVxuICBzdGF0ZS5wcF9sZWZ0X3RvdGFsIDwtIDE7IHN0YXRlLnBwX3JpZ2h0X3RvdGFsIDwtIDE7XG4gIGNsZWFyX3F1ZXVlIHN0YXRlLnBwX3F1ZXVlXG47O1xuXG4oKiBQcF9pbmZpbml0eTogbGFyZ2UgdmFsdWUgZm9yIGRlZmF1bHQgdG9rZW5zIHNpemUuXG5cbiAgIFBwX2luZmluaXR5IGlzIGRvY3VtZW50ZWQgYXMgYmVpbmcgZ3JlYXRlciB0aGFuIDFlMTA7IHRvIGF2b2lkXG4gICBjb25mdXNpb24gYWJvdXQgdGhlIHdvcmQgJ2dyZWF0ZXInLCB3ZSBjaG9vc2UgcHBfaW5maW5pdHkgZ3JlYXRlclxuICAgdGhhbiAxZTEwICsgMTsgZm9yIGNvcnJlY3QgaGFuZGxpbmcgb2YgdGVzdHMgaW4gdGhlIGFsZ29yaXRobSxcbiAgIHBwX2luZmluaXR5IG11c3QgYmUgZXZlbiBvbmUgbW9yZSB0aGFuIDFlMTAgKyAxOyBsZXQncyBzdGFuZCBvbiB0aGVcbiAgIHNhZmUgc2lkZSBieSBjaG9vc2luZyAxLmUxMCsxMC5cblxuICAgUHBfaW5maW5pdHkgY291bGQgcHJvYmFibHkgYmUgMTA3Mzc0MTgyMyB0aGF0IGlzIDJeMzAgLSAxLCB0aGF0IGlzXG4gICB0aGUgbWluaW1hbCB1cHBlciBib3VuZCBmb3IgaW50ZWdlcnM7IG5vdyB0aGF0IG1heF9pbnQgaXMgZGVmaW5lZCxcbiAgIHRoaXMgbGltaXQgY291bGQgYWxzbyBiZSBkZWZpbmVkIGFzIG1heF9pbnQgLSAxLlxuXG4gICBIb3dldmVyLCBiZWZvcmUgc2V0dGluZyBwcF9pbmZpbml0eSB0byBzb21ldGhpbmcgYXJvdW5kIG1heF9pbnQsIHdlXG4gICBtdXN0IGNhcmVmdWxseSBkb3VibGUtY2hlY2sgYWxsIHRoZSBpbnRlZ2VyIGFyaXRobWV0aWMgb3BlcmF0aW9uc1xuICAgdGhhdCBpbnZvbHZlIHBwX2luZmluaXR5LCBzaW5jZSBhbnkgb3ZlcmZsb3cgd291bGQgd3JlY2sgaGF2b2MgdGhlXG4gICBwcmV0dHktcHJpbnRpbmcgYWxnb3JpdGhtJ3MgaW52YXJpYW50cy4gR2l2ZW4gdGhhdCB0aGlzIGFyaXRobWV0aWNcbiAgIGNvcnJlY3RuZXNzIGNoZWNrIGlzIGRpZmZpY3VsdCBhbmQgZXJyb3IgcHJvbmUgYW5kIGdpdmVuIHRoYXQgMWUxMFxuICAgKyAxIGlzIGluIHByYWN0aWNlIGxhcmdlIGVub3VnaCwgdGhlcmUgaXMgbm8gbmVlZCB0byBhdHRlbXB0IHRvIHNldFxuICAgcHBfaW5maW5pdHkgdG8gdGhlIHRoZW9yZXRpY2FsbHkgbWF4aW11bSBsaW1pdC4gSXQgaXMgbm90IHdvcnRoIHRoZVxuICAgYnVyZGVuICEgKilcblxubGV0IHBwX2luZmluaXR5ID0gMTAwMDAwMDAxMDs7XG5cbigqIE91dHB1dCBmdW5jdGlvbnMgZm9yIHRoZSBmb3JtYXR0ZXIuICopXG5sZXQgcHBfb3V0cHV0X3N0cmluZyBzdGF0ZSBzID0gc3RhdGUucHBfb3V0X3N0cmluZyBzIDAgKFN0cmluZy5sZW5ndGggcylcbmFuZCBwcF9vdXRwdXRfbmV3bGluZSBzdGF0ZSA9IHN0YXRlLnBwX291dF9uZXdsaW5lICgpXG5hbmQgcHBfb3V0cHV0X3NwYWNlcyBzdGF0ZSBuID0gc3RhdGUucHBfb3V0X3NwYWNlcyBuXG5cbigqIFRvIGZvcm1hdCBhIGJyZWFrLCBpbmRlbnRpbmcgYSBuZXcgbGluZS4gKilcbmxldCBicmVha19uZXdfbGluZSBzdGF0ZSBvZmZzZXQgd2lkdGggPVxuICBwcF9vdXRwdXRfbmV3bGluZSBzdGF0ZTtcbiAgc3RhdGUucHBfaXNfbmV3X2xpbmUgPC0gdHJ1ZTtcbiAgbGV0IGluZGVudCA9IHN0YXRlLnBwX21hcmdpbiAtIHdpZHRoICsgb2Zmc2V0IGluXG4gICgqIERvbid0IGluZGVudCBtb3JlIHRoYW4gcHBfbWF4X2luZGVudC4gKilcbiAgbGV0IHJlYWxfaW5kZW50ID0gbWluIHN0YXRlLnBwX21heF9pbmRlbnQgaW5kZW50IGluXG4gIHN0YXRlLnBwX2N1cnJlbnRfaW5kZW50IDwtIHJlYWxfaW5kZW50O1xuICBzdGF0ZS5wcF9zcGFjZV9sZWZ0IDwtIHN0YXRlLnBwX21hcmdpbiAtIHN0YXRlLnBwX2N1cnJlbnRfaW5kZW50O1xuICBwcF9vdXRwdXRfc3BhY2VzIHN0YXRlIHN0YXRlLnBwX2N1cnJlbnRfaW5kZW50XG47O1xuXG4oKiBUbyBmb3JjZSBhIGxpbmUgYnJlYWsgaW5zaWRlIGEgYmxvY2s6IG5vIG9mZnNldCBpcyBhZGRlZC4gKilcbmxldCBicmVha19saW5lIHN0YXRlIHdpZHRoID0gYnJlYWtfbmV3X2xpbmUgc3RhdGUgMCB3aWR0aDs7XG5cbigqIFRvIGZvcm1hdCBhIGJyZWFrIHRoYXQgZml0cyBvbiB0aGUgY3VycmVudCBsaW5lLiAqKVxubGV0IGJyZWFrX3NhbWVfbGluZSBzdGF0ZSB3aWR0aCA9XG4gIHN0YXRlLnBwX3NwYWNlX2xlZnQgPC0gc3RhdGUucHBfc3BhY2VfbGVmdCAtIHdpZHRoO1xuICBwcF9vdXRwdXRfc3BhY2VzIHN0YXRlIHdpZHRoXG47O1xuXG4oKiBUbyBpbmRlbnQgbm8gbW9yZSB0aGFuIHBwX21heF9pbmRlbnQsIGlmIG9uZSB0cmllcyB0byBvcGVuIGEgYmxvY2tcbiAgIGJleW9uZCBwcF9tYXhfaW5kZW50LCB0aGVuIHRoZSBibG9jayBpcyByZWplY3RlZCBvbiB0aGUgbGVmdFxuICAgYnkgc2ltdWxhdGluZyBhIGJyZWFrLiAqKVxubGV0IHBwX2ZvcmNlX2JyZWFrX2xpbmUgc3RhdGUgPVxuICBtYXRjaCBzdGF0ZS5wcF9mb3JtYXRfc3RhY2sgd2l0aFxuICB8IEZvcm1hdF9lbGVtIChibF90eSwgd2lkdGgpIDo6IF8gLT5cbiAgICBpZiB3aWR0aCA+IHN0YXRlLnBwX3NwYWNlX2xlZnQgdGhlblxuICAgICAgKG1hdGNoIGJsX3R5IHdpdGhcbiAgICAgICB8IFBwX2ZpdHMgLT4gKCkgfCBQcF9oYm94IC0+ICgpXG4gICAgICAgfCBQcF92Ym94IHwgUHBfaHZib3ggfCBQcF9ob3Zib3ggfCBQcF9ib3ggLT5cbiAgICAgICAgIGJyZWFrX2xpbmUgc3RhdGUgd2lkdGgpXG4gIHwgW10gLT4gcHBfb3V0cHV0X25ld2xpbmUgc3RhdGVcbjs7XG5cbigqIFRvIHNraXAgYSB0b2tlbiwgaWYgdGhlIHByZXZpb3VzIGxpbmUgaGFzIGJlZW4gYnJva2VuLiAqKVxubGV0IHBwX3NraXBfdG9rZW4gc3RhdGUgPVxuICAoKiBXaGVuIGNhbGxpbmcgcHBfc2tpcF90b2tlbiB0aGUgcXVldWUgY2Fubm90IGJlIGVtcHR5LiAqKVxuICBtYXRjaCB0YWtlX3F1ZXVlIHN0YXRlLnBwX3F1ZXVlIHdpdGhcbiAgfCB7IGVsZW1fc2l6ZSA9IHNpemU7IGxlbmd0aCA9IGxlbjsgdG9rZW4gPSBfOyB9IC0+XG4gICAgc3RhdGUucHBfbGVmdF90b3RhbCA8LSBzdGF0ZS5wcF9sZWZ0X3RvdGFsIC0gbGVuO1xuICAgIHN0YXRlLnBwX3NwYWNlX2xlZnQgPC0gc3RhdGUucHBfc3BhY2VfbGVmdCArIGludF9vZl9zaXplIHNpemVcbjs7XG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIFRoZSBtYWluIHByZXR0eSBwcmludGluZyBmdW5jdGlvbnMuXG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogVG8gZm9ybWF0IGEgdG9rZW4uICopXG5sZXQgZm9ybWF0X3BwX3Rva2VuIHN0YXRlIHNpemUgPSBmdW5jdGlvblxuXG4gIHwgUHBfdGV4dCBzIC0+XG4gICAgc3RhdGUucHBfc3BhY2VfbGVmdCA8LSBzdGF0ZS5wcF9zcGFjZV9sZWZ0IC0gc2l6ZTtcbiAgICBwcF9vdXRwdXRfc3RyaW5nIHN0YXRlIHM7XG4gICAgc3RhdGUucHBfaXNfbmV3X2xpbmUgPC0gZmFsc2VcblxuICB8IFBwX2JlZ2luIChvZmYsIHR5KSAtPlxuICAgIGxldCBpbnNlcnRpb25fcG9pbnQgPSBzdGF0ZS5wcF9tYXJnaW4gLSBzdGF0ZS5wcF9zcGFjZV9sZWZ0IGluXG4gICAgaWYgaW5zZXJ0aW9uX3BvaW50ID4gc3RhdGUucHBfbWF4X2luZGVudCB0aGVuXG4gICAgICAoKiBjYW4ndCBvcGVuIGEgYmxvY2sgcmlnaHQgdGhlcmUuICopXG4gICAgICBiZWdpbiBwcF9mb3JjZV9icmVha19saW5lIHN0YXRlIGVuZDtcbiAgICBsZXQgb2Zmc2V0ID0gc3RhdGUucHBfc3BhY2VfbGVmdCAtIG9mZiBpblxuICAgIGxldCBibF90eXBlID1cbiAgICAgIGJlZ2luIG1hdGNoIHR5IHdpdGhcbiAgICAgIHwgUHBfdmJveCAtPiBQcF92Ym94XG4gICAgICB8IFBwX2hib3ggfCBQcF9odmJveCB8IFBwX2hvdmJveCB8IFBwX2JveCB8IFBwX2ZpdHMgLT5cbiAgICAgICAgaWYgc2l6ZSA+IHN0YXRlLnBwX3NwYWNlX2xlZnQgdGhlbiB0eSBlbHNlIFBwX2ZpdHNcbiAgICAgIGVuZCBpblxuICAgIHN0YXRlLnBwX2Zvcm1hdF9zdGFjayA8LVxuICAgICAgRm9ybWF0X2VsZW0gKGJsX3R5cGUsIG9mZnNldCkgOjogc3RhdGUucHBfZm9ybWF0X3N0YWNrXG5cbiAgfCBQcF9lbmQgLT5cbiAgICBiZWdpbiBtYXRjaCBzdGF0ZS5wcF9mb3JtYXRfc3RhY2sgd2l0aFxuICAgIHwgXyA6OiBscyAtPiBzdGF0ZS5wcF9mb3JtYXRfc3RhY2sgPC0gbHNcbiAgICB8IFtdIC0+ICgpICgqIE5vIG1vcmUgYmxvY2sgdG8gY2xvc2UuICopXG4gICAgZW5kXG5cbiAgfCBQcF90YmVnaW4gKFBwX3Rib3ggXyBhcyB0Ym94KSAtPlxuICAgIHN0YXRlLnBwX3Rib3hfc3RhY2sgPC0gdGJveCA6OiBzdGF0ZS5wcF90Ym94X3N0YWNrXG5cbiAgfCBQcF90ZW5kIC0+XG4gICAgYmVnaW4gbWF0Y2ggc3RhdGUucHBfdGJveF9zdGFjayB3aXRoXG4gICAgfCBfIDo6IGxzIC0+IHN0YXRlLnBwX3Rib3hfc3RhY2sgPC0gbHNcbiAgICB8IFtdIC0+ICgpICgqIE5vIG1vcmUgdGFidWxhdGlvbiBibG9jayB0byBjbG9zZS4gKilcbiAgICBlbmRcblxuICB8IFBwX3N0YWIgLT5cbiAgICBiZWdpbiBtYXRjaCBzdGF0ZS5wcF90Ym94X3N0YWNrIHdpdGhcbiAgICB8IFBwX3Rib3ggdGFicyA6OiBfIC0+XG4gICAgICBsZXQgcmVjIGFkZF90YWIgbiA9IGZ1bmN0aW9uXG4gICAgICAgIHwgW10gLT4gW25dXG4gICAgICAgIHwgeCA6OiBsIGFzIGxzIC0+IGlmIG4gPCB4IHRoZW4gbiA6OiBscyBlbHNlIHggOjogYWRkX3RhYiBuIGwgaW5cbiAgICAgIHRhYnMgOj0gYWRkX3RhYiAoc3RhdGUucHBfbWFyZ2luIC0gc3RhdGUucHBfc3BhY2VfbGVmdCkgIXRhYnNcbiAgICB8IFtdIC0+ICgpICgqIE5vIG9wZW5lZCB0YWJ1bGF0aW9uIGJsb2NrLiAqKVxuICAgIGVuZFxuXG4gIHwgUHBfdGJyZWFrIChuLCBvZmYpIC0+XG4gICAgbGV0IGluc2VydGlvbl9wb2ludCA9IHN0YXRlLnBwX21hcmdpbiAtIHN0YXRlLnBwX3NwYWNlX2xlZnQgaW5cbiAgICBiZWdpbiBtYXRjaCBzdGF0ZS5wcF90Ym94X3N0YWNrIHdpdGhcbiAgICB8IFBwX3Rib3ggdGFicyA6OiBfIC0+XG4gICAgICBsZXQgcmVjIGZpbmQgbiA9IGZ1bmN0aW9uXG4gICAgICAgIHwgeCA6OiBsIC0+IGlmIHggPj0gbiB0aGVuIHggZWxzZSBmaW5kIG4gbFxuICAgICAgICB8IFtdIC0+IHJhaXNlIE5vdF9mb3VuZCBpblxuICAgICAgbGV0IHRhYiA9XG4gICAgICAgIG1hdGNoICF0YWJzIHdpdGhcbiAgICAgICAgfCB4IDo6IF8gLT5cbiAgICAgICAgICBiZWdpblxuICAgICAgICAgICAgdHJ5IGZpbmQgaW5zZXJ0aW9uX3BvaW50ICF0YWJzIHdpdGhcbiAgICAgICAgICAgIHwgTm90X2ZvdW5kIC0+IHhcbiAgICAgICAgICBlbmRcbiAgICAgICAgfCBfIC0+IGluc2VydGlvbl9wb2ludCBpblxuICAgICAgbGV0IG9mZnNldCA9IHRhYiAtIGluc2VydGlvbl9wb2ludCBpblxuICAgICAgaWYgb2Zmc2V0ID49IDBcbiAgICAgIHRoZW4gYnJlYWtfc2FtZV9saW5lIHN0YXRlIChvZmZzZXQgKyBuKVxuICAgICAgZWxzZSBicmVha19uZXdfbGluZSBzdGF0ZSAodGFiICsgb2ZmKSBzdGF0ZS5wcF9tYXJnaW5cbiAgICB8IFtdIC0+ICgpICgqIE5vIG9wZW5lZCB0YWJ1bGF0aW9uIGJsb2NrLiAqKVxuICAgIGVuZFxuXG4gIHwgUHBfbmV3bGluZSAtPlxuICAgIGJlZ2luIG1hdGNoIHN0YXRlLnBwX2Zvcm1hdF9zdGFjayB3aXRoXG4gICAgfCBGb3JtYXRfZWxlbSAoXywgd2lkdGgpIDo6IF8gLT4gYnJlYWtfbGluZSBzdGF0ZSB3aWR0aFxuICAgIHwgW10gLT4gcHBfb3V0cHV0X25ld2xpbmUgc3RhdGUgKCogTm8gb3BlbmVkIGJsb2NrLiAqKVxuICAgIGVuZFxuXG4gIHwgUHBfaWZfbmV3bGluZSAtPlxuICAgIGlmIHN0YXRlLnBwX2N1cnJlbnRfaW5kZW50ICE9IHN0YXRlLnBwX21hcmdpbiAtIHN0YXRlLnBwX3NwYWNlX2xlZnRcbiAgICB0aGVuIHBwX3NraXBfdG9rZW4gc3RhdGVcblxuICB8IFBwX2JyZWFrIChuLCBvZmYpIC0+XG4gICAgYmVnaW4gbWF0Y2ggc3RhdGUucHBfZm9ybWF0X3N0YWNrIHdpdGhcbiAgICB8IEZvcm1hdF9lbGVtICh0eSwgd2lkdGgpIDo6IF8gLT5cbiAgICAgIGJlZ2luIG1hdGNoIHR5IHdpdGhcbiAgICAgIHwgUHBfaG92Ym94IC0+XG4gICAgICAgIGlmIHNpemUgPiBzdGF0ZS5wcF9zcGFjZV9sZWZ0XG4gICAgICAgIHRoZW4gYnJlYWtfbmV3X2xpbmUgc3RhdGUgb2ZmIHdpZHRoXG4gICAgICAgIGVsc2UgYnJlYWtfc2FtZV9saW5lIHN0YXRlIG5cbiAgICAgIHwgUHBfYm94IC0+XG4gICAgICAgICgqIEhhdmUgdGhlIGxpbmUganVzdCBiZWVuIGJyb2tlbiBoZXJlID8gKilcbiAgICAgICAgaWYgc3RhdGUucHBfaXNfbmV3X2xpbmUgdGhlbiBicmVha19zYW1lX2xpbmUgc3RhdGUgbiBlbHNlXG4gICAgICAgIGlmIHNpemUgPiBzdGF0ZS5wcF9zcGFjZV9sZWZ0XG4gICAgICAgICB0aGVuIGJyZWFrX25ld19saW5lIHN0YXRlIG9mZiB3aWR0aCBlbHNlXG4gICAgICAgICgqIGJyZWFrIHRoZSBsaW5lIGhlcmUgbGVhZHMgdG8gbmV3IGluZGVudGF0aW9uID8gKilcbiAgICAgICAgaWYgc3RhdGUucHBfY3VycmVudF9pbmRlbnQgPiBzdGF0ZS5wcF9tYXJnaW4gLSB3aWR0aCArIG9mZlxuICAgICAgICB0aGVuIGJyZWFrX25ld19saW5lIHN0YXRlIG9mZiB3aWR0aFxuICAgICAgICBlbHNlIGJyZWFrX3NhbWVfbGluZSBzdGF0ZSBuXG4gICAgICB8IFBwX2h2Ym94IC0+IGJyZWFrX25ld19saW5lIHN0YXRlIG9mZiB3aWR0aFxuICAgICAgfCBQcF9maXRzIC0+IGJyZWFrX3NhbWVfbGluZSBzdGF0ZSBuXG4gICAgICB8IFBwX3Zib3ggLT4gYnJlYWtfbmV3X2xpbmUgc3RhdGUgb2ZmIHdpZHRoXG4gICAgICB8IFBwX2hib3ggLT4gYnJlYWtfc2FtZV9saW5lIHN0YXRlIG5cbiAgICAgIGVuZFxuICAgIHwgW10gLT4gKCkgKCogTm8gb3BlbmVkIGJsb2NrLiAqKVxuICAgIGVuZFxuXG4gICB8IFBwX29wZW5fdGFnIHRhZ19uYW1lIC0+XG4gICAgIGxldCBtYXJrZXIgPSBzdGF0ZS5wcF9tYXJrX29wZW5fdGFnIHRhZ19uYW1lIGluXG4gICAgIHBwX291dHB1dF9zdHJpbmcgc3RhdGUgbWFya2VyO1xuICAgICBzdGF0ZS5wcF9tYXJrX3N0YWNrIDwtIHRhZ19uYW1lIDo6IHN0YXRlLnBwX21hcmtfc3RhY2tcblxuICAgfCBQcF9jbG9zZV90YWcgLT5cbiAgICAgYmVnaW4gbWF0Y2ggc3RhdGUucHBfbWFya19zdGFjayB3aXRoXG4gICAgIHwgdGFnX25hbWUgOjogdGFncyAtPlxuICAgICAgIGxldCBtYXJrZXIgPSBzdGF0ZS5wcF9tYXJrX2Nsb3NlX3RhZyB0YWdfbmFtZSBpblxuICAgICAgIHBwX291dHB1dF9zdHJpbmcgc3RhdGUgbWFya2VyO1xuICAgICAgIHN0YXRlLnBwX21hcmtfc3RhY2sgPC0gdGFnc1xuICAgICB8IFtdIC0+ICgpICgqIE5vIG1vcmUgdGFnIHRvIGNsb3NlLiAqKVxuICAgICBlbmRcbjs7XG5cbigqIFByaW50IGlmIHRva2VuIHNpemUgaXMga25vd24gb3IgcHJpbnRpbmcgaXMgZGVsYXllZC5cbiAgIFNpemUgaXMga25vd24gd2hlbiBub3QgbmVnYXRpdmUuXG4gICBQcmludGluZyBpcyBkZWxheWVkIHdoZW4gdGhlIHRleHQgd2FpdGluZyBpbiB0aGUgcXVldWUgcmVxdWlyZXNcbiAgIG1vcmUgcm9vbSB0byBmb3JtYXQgdGhhbiBleGlzdHMgb24gdGhlIGN1cnJlbnQgbGluZS5cblxuICAgTm90ZTogW2FkdmFuY2VfbG9vcF0gbXVzdCBiZSB0YWlsIHJlY3Vyc2l2ZSB0byBwcmV2ZW50IHN0YWNrIG92ZXJmbG93cy4gKilcbmxldCByZWMgYWR2YW5jZV9sb29wIHN0YXRlID1cbiAgbWF0Y2ggcGVla19xdWV1ZSBzdGF0ZS5wcF9xdWV1ZSB3aXRoXG4gIHwge2VsZW1fc2l6ZSA9IHNpemU7IHRva2VuID0gdG9rOyBsZW5ndGggPSBsZW59IC0+XG4gICAgbGV0IHNpemUgPSBpbnRfb2Zfc2l6ZSBzaXplIGluXG4gICAgaWYgbm90XG4gICAgICAgICAoc2l6ZSA8IDAgJiZcbiAgICAgICAgICAoc3RhdGUucHBfcmlnaHRfdG90YWwgLSBzdGF0ZS5wcF9sZWZ0X3RvdGFsIDwgc3RhdGUucHBfc3BhY2VfbGVmdCkpXG4gICAgdGhlbiBiZWdpblxuICAgICAgaWdub3JlICh0YWtlX3F1ZXVlIHN0YXRlLnBwX3F1ZXVlKTtcbiAgICAgIGZvcm1hdF9wcF90b2tlbiBzdGF0ZSAoaWYgc2l6ZSA8IDAgdGhlbiBwcF9pbmZpbml0eSBlbHNlIHNpemUpIHRvaztcbiAgICAgIHN0YXRlLnBwX2xlZnRfdG90YWwgPC0gbGVuICsgc3RhdGUucHBfbGVmdF90b3RhbDtcbiAgICAgIGFkdmFuY2VfbG9vcCBzdGF0ZVxuICAgIGVuZFxuOztcblxubGV0IGFkdmFuY2VfbGVmdCBzdGF0ZSA9XG4gIHRyeSBhZHZhbmNlX2xvb3Agc3RhdGUgd2l0aFxuICB8IEVtcHR5X3F1ZXVlIC0+ICgpXG47O1xuXG5sZXQgZW5xdWV1ZV9hZHZhbmNlIHN0YXRlIHRvayA9IHBwX2VucXVldWUgc3RhdGUgdG9rOyBhZHZhbmNlX2xlZnQgc3RhdGU7O1xuXG4oKiBUbyBlbnF1ZXVlIGEgc3RyaW5nIDogdHJ5IHRvIGFkdmFuY2UuICopXG5sZXQgbWFrZV9xdWV1ZV9lbGVtIHNpemUgdG9rIGxlbiA9XG4gIHsgZWxlbV9zaXplID0gc2l6ZTsgdG9rZW4gPSB0b2s7IGxlbmd0aCA9IGxlbjsgfTs7XG5cbmxldCBlbnF1ZXVlX3N0cmluZ19hcyBzdGF0ZSBzaXplIHMgPVxuICBsZXQgbGVuID0gaW50X29mX3NpemUgc2l6ZSBpblxuICBlbnF1ZXVlX2FkdmFuY2Ugc3RhdGUgKG1ha2VfcXVldWVfZWxlbSBzaXplIChQcF90ZXh0IHMpIGxlbilcbjs7XG5cbmxldCBlbnF1ZXVlX3N0cmluZyBzdGF0ZSBzID1cbiAgbGV0IGxlbiA9IFN0cmluZy5sZW5ndGggcyBpblxuICBlbnF1ZXVlX3N0cmluZ19hcyBzdGF0ZSAoc2l6ZV9vZl9pbnQgbGVuKSBzXG47O1xuXG4oKiBSb3V0aW5lcyBmb3Igc2NhbiBzdGFja1xuICAgZGV0ZXJtaW5lIHNpemVzIG9mIGJsb2Nrcy4gKilcblxuKCogVGhlIHNjYW5fc3RhY2sgaXMgbmV2ZXIgZW1wdHkuICopXG5sZXQgc2Nhbl9zdGFja19ib3R0b20gPVxuICBsZXQgcV9lbGVtID0gbWFrZV9xdWV1ZV9lbGVtIChzaXplX29mX2ludCAoLTEpKSAoUHBfdGV4dCBcIlwiKSAwIGluXG4gIFtTY2FuX2VsZW0gKC0xLCBxX2VsZW0pXVxuOztcblxuKCogU2V0IHNpemUgb2YgYmxvY2tzIG9uIHNjYW4gc3RhY2s6XG4gICBpZiB0eSA9IHRydWUgdGhlbiBzaXplIG9mIGJyZWFrIGlzIHNldCBlbHNlIHNpemUgb2YgYmxvY2sgaXMgc2V0O1xuICAgaW4gZWFjaCBjYXNlIHBwX3NjYW5fc3RhY2sgaXMgcG9wcGVkLiAqKVxubGV0IGNsZWFyX3NjYW5fc3RhY2sgc3RhdGUgPSBzdGF0ZS5wcF9zY2FuX3N0YWNrIDwtIHNjYW5fc3RhY2tfYm90dG9tOztcblxuKCogUGF0dGVybiBtYXRjaGluZyBvbiBzY2FuIHN0YWNrIGlzIGV4aGF1c3RpdmUsXG4gICBzaW5jZSBzY2FuX3N0YWNrIGlzIG5ldmVyIGVtcHR5LlxuICAgUGF0dGVybiBtYXRjaGluZyBvbiB0b2tlbiBpbiBzY2FuIHN0YWNrIGlzIGFsc28gZXhoYXVzdGl2ZSxcbiAgIHNpbmNlIHNjYW5fcHVzaCBpcyB1c2VkIG9uIGJyZWFrcyBhbmQgb3BlbmluZyBvZiBib3hlcy4gKilcbmxldCBzZXRfc2l6ZSBzdGF0ZSB0eSA9XG4gIG1hdGNoIHN0YXRlLnBwX3NjYW5fc3RhY2sgd2l0aFxuICB8IFNjYW5fZWxlbVxuICAgICAgKGxlZnRfdG90LFxuICAgICAgICh7IGVsZW1fc2l6ZSA9IHNpemU7IHRva2VuID0gdG9rOyBsZW5ndGggPSBfOyB9IGFzIHF1ZXVlX2VsZW0pKSA6OiB0IC0+XG4gICAgbGV0IHNpemUgPSBpbnRfb2Zfc2l6ZSBzaXplIGluXG4gICAgKCogdGVzdCBpZiBzY2FuIHN0YWNrIGNvbnRhaW5zIGFueSBkYXRhIHRoYXQgaXMgbm90IG9ic29sZXRlLiAqKVxuICAgIGlmIGxlZnRfdG90IDwgc3RhdGUucHBfbGVmdF90b3RhbCB0aGVuIGNsZWFyX3NjYW5fc3RhY2sgc3RhdGUgZWxzZVxuICAgICAgYmVnaW4gbWF0Y2ggdG9rIHdpdGhcbiAgICAgIHwgUHBfYnJlYWsgKF8sIF8pIHwgUHBfdGJyZWFrIChfLCBfKSAtPlxuICAgICAgICBpZiB0eSB0aGVuXG4gICAgICAgIGJlZ2luXG4gICAgICAgICAgcXVldWVfZWxlbS5lbGVtX3NpemUgPC0gc2l6ZV9vZl9pbnQgKHN0YXRlLnBwX3JpZ2h0X3RvdGFsICsgc2l6ZSk7XG4gICAgICAgICAgc3RhdGUucHBfc2Nhbl9zdGFjayA8LSB0XG4gICAgICAgIGVuZFxuICAgICAgfCBQcF9iZWdpbiAoXywgXykgLT5cbiAgICAgICAgaWYgbm90IHR5IHRoZW5cbiAgICAgICAgYmVnaW5cbiAgICAgICAgICBxdWV1ZV9lbGVtLmVsZW1fc2l6ZSA8LSBzaXplX29mX2ludCAoc3RhdGUucHBfcmlnaHRfdG90YWwgKyBzaXplKTtcbiAgICAgICAgICBzdGF0ZS5wcF9zY2FuX3N0YWNrIDwtIHRcbiAgICAgICAgZW5kXG4gICAgICB8IFBwX3RleHQgXyB8IFBwX3N0YWIgfCBQcF90YmVnaW4gXyB8IFBwX3RlbmQgfCBQcF9lbmRcbiAgICAgIHwgUHBfbmV3bGluZSB8IFBwX2lmX25ld2xpbmVcbiAgICAgIHwgUHBfb3Blbl90YWcgXyB8IFBwX2Nsb3NlX3RhZyAtPlxuICAgICAgICAoKSAoKiBzY2FuX3B1c2ggaXMgb25seSB1c2VkIGZvciBicmVha3MgYW5kIGJveGVzLiAqKVxuICAgICAgZW5kXG4gIHwgW10gLT4gKCkgKCogc2Nhbl9zdGFjayBpcyBuZXZlciBlbXB0eS4gKilcbjs7XG5cbigqIFB1c2ggYSB0b2tlbiBvbiBzY2FuIHN0YWNrLiBJZiBiIGlzIHRydWUgc2V0X3NpemUgaXMgY2FsbGVkLiAqKVxubGV0IHNjYW5fcHVzaCBzdGF0ZSBiIHRvayA9XG4gIHBwX2VucXVldWUgc3RhdGUgdG9rO1xuICBpZiBiIHRoZW4gc2V0X3NpemUgc3RhdGUgdHJ1ZTtcbiAgc3RhdGUucHBfc2Nhbl9zdGFjayA8LVxuICAgIFNjYW5fZWxlbSAoc3RhdGUucHBfcmlnaHRfdG90YWwsIHRvaykgOjogc3RhdGUucHBfc2Nhbl9zdGFja1xuOztcblxuKCogVG8gb3BlbiBhIG5ldyBibG9jayA6XG4gICB0aGUgdXNlciBtYXkgc2V0IHRoZSBkZXB0aCBib3VuZCBwcF9tYXhfYm94ZXNcbiAgIGFueSB0ZXh0IG5lc3RlZCBkZWVwZXIgaXMgcHJpbnRlZCBhcyB0aGUgZWxsaXBzaXMgc3RyaW5nLiAqKVxubGV0IHBwX29wZW5fYm94X2dlbiBzdGF0ZSBpbmRlbnQgYnJfdHkgPVxuICBzdGF0ZS5wcF9jdXJyX2RlcHRoIDwtIHN0YXRlLnBwX2N1cnJfZGVwdGggKyAxO1xuICBpZiBzdGF0ZS5wcF9jdXJyX2RlcHRoIDwgc3RhdGUucHBfbWF4X2JveGVzIHRoZW5cbiAgICBsZXQgZWxlbSA9XG4gICAgICBtYWtlX3F1ZXVlX2VsZW1cbiAgICAgICAgKHNpemVfb2ZfaW50ICgtIHN0YXRlLnBwX3JpZ2h0X3RvdGFsKSlcbiAgICAgICAgKFBwX2JlZ2luIChpbmRlbnQsIGJyX3R5KSlcbiAgICAgICAgMCBpblxuICAgIHNjYW5fcHVzaCBzdGF0ZSBmYWxzZSBlbGVtIGVsc2VcbiAgaWYgc3RhdGUucHBfY3Vycl9kZXB0aCA9IHN0YXRlLnBwX21heF9ib3hlc1xuICB0aGVuIGVucXVldWVfc3RyaW5nIHN0YXRlIHN0YXRlLnBwX2VsbGlwc2lzXG47O1xuXG4oKiBUaGUgYm94IHdoaWNoIGlzIGFsd2F5cyBvcGVuZWQuICopXG5sZXQgcHBfb3Blbl9zeXNfYm94IHN0YXRlID0gcHBfb3Blbl9ib3hfZ2VuIHN0YXRlIDAgUHBfaG92Ym94OztcblxuKCogQ2xvc2UgYSBibG9jaywgc2V0dGluZyBzaXplcyBvZiBpdHMgc3ViIGJsb2Nrcy4gKilcbmxldCBwcF9jbG9zZV9ib3ggc3RhdGUgKCkgPVxuICBpZiBzdGF0ZS5wcF9jdXJyX2RlcHRoID4gMSB0aGVuXG4gIGJlZ2luXG4gICAgaWYgc3RhdGUucHBfY3Vycl9kZXB0aCA8IHN0YXRlLnBwX21heF9ib3hlcyB0aGVuXG4gICAgYmVnaW5cbiAgICAgIHBwX2VucXVldWUgc3RhdGVcbiAgICAgICAgeyBlbGVtX3NpemUgPSBzaXplX29mX2ludCAwOyB0b2tlbiA9IFBwX2VuZDsgbGVuZ3RoID0gMDsgfTtcbiAgICAgIHNldF9zaXplIHN0YXRlIHRydWU7IHNldF9zaXplIHN0YXRlIGZhbHNlXG4gICAgZW5kO1xuICAgIHN0YXRlLnBwX2N1cnJfZGVwdGggPC0gc3RhdGUucHBfY3Vycl9kZXB0aCAtIDE7XG4gIGVuZFxuOztcblxuKCogT3BlbiBhIHRhZywgcHVzaGluZyBpdCBvbiB0aGUgdGFnIHN0YWNrLiAqKVxubGV0IHBwX29wZW5fdGFnIHN0YXRlIHRhZ19uYW1lID1cbiAgaWYgc3RhdGUucHBfcHJpbnRfdGFncyB0aGVuXG4gIGJlZ2luXG4gICAgc3RhdGUucHBfdGFnX3N0YWNrIDwtIHRhZ19uYW1lIDo6IHN0YXRlLnBwX3RhZ19zdGFjaztcbiAgICBzdGF0ZS5wcF9wcmludF9vcGVuX3RhZyB0YWdfbmFtZVxuICBlbmQ7XG4gIGlmIHN0YXRlLnBwX21hcmtfdGFncyB0aGVuXG4gICAgcHBfZW5xdWV1ZSBzdGF0ZSB7XG4gICAgICBlbGVtX3NpemUgPSBzaXplX29mX2ludCAwO1xuICAgICAgdG9rZW4gPSBQcF9vcGVuX3RhZyB0YWdfbmFtZTtcbiAgICAgIGxlbmd0aCA9IDA7XG4gICAgfVxuOztcblxuKCogQ2xvc2UgYSB0YWcsIHBvcHBpbmcgaXQgZnJvbSB0aGUgdGFnIHN0YWNrLiAqKVxubGV0IHBwX2Nsb3NlX3RhZyBzdGF0ZSAoKSA9XG4gIGlmIHN0YXRlLnBwX21hcmtfdGFncyB0aGVuXG4gICAgcHBfZW5xdWV1ZSBzdGF0ZSB7XG4gICAgICBlbGVtX3NpemUgPSBzaXplX29mX2ludCAwO1xuICAgICAgdG9rZW4gPSBQcF9jbG9zZV90YWc7XG4gICAgICBsZW5ndGggPSAwO1xuICAgIH07XG4gIGlmIHN0YXRlLnBwX3ByaW50X3RhZ3MgdGhlblxuICBiZWdpblxuICAgIG1hdGNoIHN0YXRlLnBwX3RhZ19zdGFjayB3aXRoXG4gICAgfCB0YWdfbmFtZSA6OiB0YWdzIC0+XG4gICAgICBzdGF0ZS5wcF9wcmludF9jbG9zZV90YWcgdGFnX25hbWU7XG4gICAgICBzdGF0ZS5wcF90YWdfc3RhY2sgPC0gdGFnc1xuICAgIHwgXyAtPiAoKSAoKiBObyBtb3JlIHRhZyB0byBjbG9zZS4gKilcbiAgZW5kXG47O1xuXG5sZXQgcHBfc2V0X3ByaW50X3RhZ3Mgc3RhdGUgYiA9IHN0YXRlLnBwX3ByaW50X3RhZ3MgPC0gYjs7XG5sZXQgcHBfc2V0X21hcmtfdGFncyBzdGF0ZSBiID0gc3RhdGUucHBfbWFya190YWdzIDwtIGI7O1xubGV0IHBwX2dldF9wcmludF90YWdzIHN0YXRlICgpID0gc3RhdGUucHBfcHJpbnRfdGFnczs7XG5sZXQgcHBfZ2V0X21hcmtfdGFncyBzdGF0ZSAoKSA9IHN0YXRlLnBwX21hcmtfdGFnczs7XG5sZXQgcHBfc2V0X3RhZ3Mgc3RhdGUgYiA9IHBwX3NldF9wcmludF90YWdzIHN0YXRlIGI7IHBwX3NldF9tYXJrX3RhZ3Mgc3RhdGUgYjs7XG5cbmxldCBwcF9nZXRfZm9ybWF0dGVyX3RhZ19mdW5jdGlvbnMgc3RhdGUgKCkgPSB7XG4gIG1hcmtfb3Blbl90YWcgPSBzdGF0ZS5wcF9tYXJrX29wZW5fdGFnO1xuICBtYXJrX2Nsb3NlX3RhZyA9IHN0YXRlLnBwX21hcmtfY2xvc2VfdGFnO1xuICBwcmludF9vcGVuX3RhZyA9IHN0YXRlLnBwX3ByaW50X29wZW5fdGFnO1xuICBwcmludF9jbG9zZV90YWcgPSBzdGF0ZS5wcF9wcmludF9jbG9zZV90YWc7XG59XG47O1xuXG5sZXQgcHBfc2V0X2Zvcm1hdHRlcl90YWdfZnVuY3Rpb25zIHN0YXRlIHtcbiAgICAgbWFya19vcGVuX3RhZyA9IG1vdDtcbiAgICAgbWFya19jbG9zZV90YWcgPSBtY3Q7XG4gICAgIHByaW50X29wZW5fdGFnID0gcG90O1xuICAgICBwcmludF9jbG9zZV90YWcgPSBwY3Q7XG4gIH0gPVxuICAgc3RhdGUucHBfbWFya19vcGVuX3RhZyA8LSBtb3Q7XG4gICBzdGF0ZS5wcF9tYXJrX2Nsb3NlX3RhZyA8LSBtY3Q7XG4gICBzdGF0ZS5wcF9wcmludF9vcGVuX3RhZyA8LSBwb3Q7XG4gICBzdGF0ZS5wcF9wcmludF9jbG9zZV90YWcgPC0gcGN0XG47O1xuXG4oKiBJbml0aWFsaXplIHByZXR0eS1wcmludGVyLiAqKVxubGV0IHBwX3Jpbml0IHN0YXRlID1cbiAgcHBfY2xlYXJfcXVldWUgc3RhdGU7XG4gIGNsZWFyX3NjYW5fc3RhY2sgc3RhdGU7XG4gIHN0YXRlLnBwX2Zvcm1hdF9zdGFjayA8LSBbXTtcbiAgc3RhdGUucHBfdGJveF9zdGFjayA8LSBbXTtcbiAgc3RhdGUucHBfdGFnX3N0YWNrIDwtIFtdO1xuICBzdGF0ZS5wcF9tYXJrX3N0YWNrIDwtIFtdO1xuICBzdGF0ZS5wcF9jdXJyZW50X2luZGVudCA8LSAwO1xuICBzdGF0ZS5wcF9jdXJyX2RlcHRoIDwtIDA7XG4gIHN0YXRlLnBwX3NwYWNlX2xlZnQgPC0gc3RhdGUucHBfbWFyZ2luO1xuICBwcF9vcGVuX3N5c19ib3ggc3RhdGU7O1xuXG4oKiBGbHVzaGluZyBwcmV0dHktcHJpbnRlciBxdWV1ZS4gKilcbmxldCBwcF9mbHVzaF9xdWV1ZSBzdGF0ZSBiID1cbiAgd2hpbGUgc3RhdGUucHBfY3Vycl9kZXB0aCA+IDEgZG9cbiAgICBwcF9jbG9zZV9ib3ggc3RhdGUgKClcbiAgZG9uZTtcbiAgc3RhdGUucHBfcmlnaHRfdG90YWwgPC0gcHBfaW5maW5pdHk7XG4gIGFkdmFuY2VfbGVmdCBzdGF0ZTtcbiAgaWYgYiB0aGVuIHBwX291dHB1dF9uZXdsaW5lIHN0YXRlO1xuICBwcF9yaW5pdCBzdGF0ZVxuOztcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgUHJvY2VkdXJlcyB0byBmb3JtYXQgb2JqZWN0cywgYW5kIHVzZSBib3hlc1xuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbigqIFRvIGZvcm1hdCBhIHN0cmluZy4gKilcbmxldCBwcF9wcmludF9hc19zaXplIHN0YXRlIHNpemUgcyA9XG4gIGlmIHN0YXRlLnBwX2N1cnJfZGVwdGggPCBzdGF0ZS5wcF9tYXhfYm94ZXNcbiAgdGhlbiBlbnF1ZXVlX3N0cmluZ19hcyBzdGF0ZSBzaXplIHNcbjs7XG5cbmxldCBwcF9wcmludF9hcyBzdGF0ZSBpc2l6ZSBzID1cbiAgcHBfcHJpbnRfYXNfc2l6ZSBzdGF0ZSAoc2l6ZV9vZl9pbnQgaXNpemUpIHNcbjs7XG5cbmxldCBwcF9wcmludF9zdHJpbmcgc3RhdGUgcyA9XG4gIHBwX3ByaW50X2FzIHN0YXRlIChTdHJpbmcubGVuZ3RoIHMpIHNcbjs7XG5cbigqIFRvIGZvcm1hdCBhbiBpbnRlZ2VyLiAqKVxubGV0IHBwX3ByaW50X2ludCBzdGF0ZSBpID0gcHBfcHJpbnRfc3RyaW5nIHN0YXRlIChzdHJpbmdfb2ZfaW50IGkpOztcblxuKCogVG8gZm9ybWF0IGEgZmxvYXQuICopXG5sZXQgcHBfcHJpbnRfZmxvYXQgc3RhdGUgZiA9IHBwX3ByaW50X3N0cmluZyBzdGF0ZSAoc3RyaW5nX29mX2Zsb2F0IGYpOztcblxuKCogVG8gZm9ybWF0IGEgYm9vbGVhbi4gKilcbmxldCBwcF9wcmludF9ib29sIHN0YXRlIGIgPSBwcF9wcmludF9zdHJpbmcgc3RhdGUgKHN0cmluZ19vZl9ib29sIGIpOztcblxuKCogVG8gZm9ybWF0IGEgY2hhci4gKilcbmxldCBwcF9wcmludF9jaGFyIHN0YXRlIGMgPVxuICBwcF9wcmludF9hcyBzdGF0ZSAxIChTdHJpbmcubWFrZSAxIGMpXG47O1xuXG4oKiBPcGVuaW5nIGJveGVzLiAqKVxubGV0IHBwX29wZW5faGJveCBzdGF0ZSAoKSA9IHBwX29wZW5fYm94X2dlbiBzdGF0ZSAwIFBwX2hib3hcbmFuZCBwcF9vcGVuX3Zib3ggc3RhdGUgaW5kZW50ID0gcHBfb3Blbl9ib3hfZ2VuIHN0YXRlIGluZGVudCBQcF92Ym94XG5cbmFuZCBwcF9vcGVuX2h2Ym94IHN0YXRlIGluZGVudCA9IHBwX29wZW5fYm94X2dlbiBzdGF0ZSBpbmRlbnQgUHBfaHZib3hcbmFuZCBwcF9vcGVuX2hvdmJveCBzdGF0ZSBpbmRlbnQgPSBwcF9vcGVuX2JveF9nZW4gc3RhdGUgaW5kZW50IFBwX2hvdmJveFxuYW5kIHBwX29wZW5fYm94IHN0YXRlIGluZGVudCA9IHBwX29wZW5fYm94X2dlbiBzdGF0ZSBpbmRlbnQgUHBfYm94OztcblxuKCogUHJpbnQgYSBuZXcgbGluZSBhZnRlciBwcmludGluZyBhbGwgcXVldWVkIHRleHRcbiAgIChzYW1lIGZvciBwcmludF9mbHVzaCBidXQgd2l0aG91dCBhIG5ld2xpbmUpLiAqKVxubGV0IHBwX3ByaW50X25ld2xpbmUgc3RhdGUgKCkgPVxuICBwcF9mbHVzaF9xdWV1ZSBzdGF0ZSB0cnVlOyBzdGF0ZS5wcF9vdXRfZmx1c2ggKClcbmFuZCBwcF9wcmludF9mbHVzaCBzdGF0ZSAoKSA9XG4gIHBwX2ZsdXNoX3F1ZXVlIHN0YXRlIGZhbHNlOyBzdGF0ZS5wcF9vdXRfZmx1c2ggKCk7O1xuXG4oKiBUbyBnZXQgYSBuZXdsaW5lIHdoZW4gb25lIGRvZXMgbm90IHdhbnQgdG8gY2xvc2UgdGhlIGN1cnJlbnQgYmxvY2suICopXG5sZXQgcHBfZm9yY2VfbmV3bGluZSBzdGF0ZSAoKSA9XG4gIGlmIHN0YXRlLnBwX2N1cnJfZGVwdGggPCBzdGF0ZS5wcF9tYXhfYm94ZXMgdGhlblxuICAgIGVucXVldWVfYWR2YW5jZSBzdGF0ZSAobWFrZV9xdWV1ZV9lbGVtIChzaXplX29mX2ludCAwKSBQcF9uZXdsaW5lIDApXG47O1xuXG4oKiBUbyBmb3JtYXQgc29tZXRoaW5nIGlmIHRoZSBsaW5lIGhhcyBqdXN0IGJlZW4gYnJva2VuLiAqKVxubGV0IHBwX3ByaW50X2lmX25ld2xpbmUgc3RhdGUgKCkgPVxuICBpZiBzdGF0ZS5wcF9jdXJyX2RlcHRoIDwgc3RhdGUucHBfbWF4X2JveGVzIHRoZW5cbiAgICBlbnF1ZXVlX2FkdmFuY2Ugc3RhdGUgKG1ha2VfcXVldWVfZWxlbSAoc2l6ZV9vZl9pbnQgMCkgUHBfaWZfbmV3bGluZSAwKVxuOztcblxuKCogQnJlYWtzOiBpbmRpY2F0ZSB3aGVyZSBhIGJsb2NrIG1heSBiZSBicm9rZW4uXG4gICBJZiBsaW5lIGlzIGJyb2tlbiB0aGVuIG9mZnNldCBpcyBhZGRlZCB0byB0aGUgaW5kZW50YXRpb24gb2YgdGhlIGN1cnJlbnRcbiAgIGJsb2NrIGVsc2UgKHRoZSB2YWx1ZSBvZikgd2lkdGggYmxhbmtzIGFyZSBwcmludGVkLlxuICAgVG8gZG8gKD8pIDogYWRkIGEgbWF4aW11bSB3aWR0aCBhbmQgb2Zmc2V0IHZhbHVlLiAqKVxubGV0IHBwX3ByaW50X2JyZWFrIHN0YXRlIHdpZHRoIG9mZnNldCA9XG4gIGlmIHN0YXRlLnBwX2N1cnJfZGVwdGggPCBzdGF0ZS5wcF9tYXhfYm94ZXMgdGhlblxuICAgIGxldCBlbGVtID1cbiAgICAgIG1ha2VfcXVldWVfZWxlbVxuICAgICAgICAoc2l6ZV9vZl9pbnQgKC0gc3RhdGUucHBfcmlnaHRfdG90YWwpKVxuICAgICAgICAoUHBfYnJlYWsgKHdpZHRoLCBvZmZzZXQpKVxuICAgICAgICB3aWR0aCBpblxuICAgIHNjYW5fcHVzaCBzdGF0ZSB0cnVlIGVsZW1cbjs7XG5cbmxldCBwcF9wcmludF9zcGFjZSBzdGF0ZSAoKSA9IHBwX3ByaW50X2JyZWFrIHN0YXRlIDEgMFxuYW5kIHBwX3ByaW50X2N1dCBzdGF0ZSAoKSA9IHBwX3ByaW50X2JyZWFrIHN0YXRlIDAgMFxuOztcblxuKCogVGFidWxhdGlvbiBib3hlcy4gKilcbmxldCBwcF9vcGVuX3Rib3ggc3RhdGUgKCkgPVxuICBzdGF0ZS5wcF9jdXJyX2RlcHRoIDwtIHN0YXRlLnBwX2N1cnJfZGVwdGggKyAxO1xuICBpZiBzdGF0ZS5wcF9jdXJyX2RlcHRoIDwgc3RhdGUucHBfbWF4X2JveGVzIHRoZW5cbiAgICBsZXQgZWxlbSA9XG4gICAgICBtYWtlX3F1ZXVlX2VsZW0gKHNpemVfb2ZfaW50IDApIChQcF90YmVnaW4gKFBwX3Rib3ggKHJlZiBbXSkpKSAwIGluXG4gICAgZW5xdWV1ZV9hZHZhbmNlIHN0YXRlIGVsZW1cbjs7XG5cbigqIENsb3NlIGEgdGFidWxhdGlvbiBibG9jay4gKilcbmxldCBwcF9jbG9zZV90Ym94IHN0YXRlICgpID1cbiAgaWYgc3RhdGUucHBfY3Vycl9kZXB0aCA+IDEgdGhlblxuICBiZWdpblxuICAgaWYgc3RhdGUucHBfY3Vycl9kZXB0aCA8IHN0YXRlLnBwX21heF9ib3hlcyB0aGVuXG4gICAgIGxldCBlbGVtID0gbWFrZV9xdWV1ZV9lbGVtIChzaXplX29mX2ludCAwKSBQcF90ZW5kIDAgaW5cbiAgICAgZW5xdWV1ZV9hZHZhbmNlIHN0YXRlIGVsZW07XG4gICAgIHN0YXRlLnBwX2N1cnJfZGVwdGggPC0gc3RhdGUucHBfY3Vycl9kZXB0aCAtIDFcbiAgZW5kXG47O1xuXG4oKiBQcmludCBhIHRhYnVsYXRpb24gYnJlYWsuICopXG5sZXQgcHBfcHJpbnRfdGJyZWFrIHN0YXRlIHdpZHRoIG9mZnNldCA9XG4gIGlmIHN0YXRlLnBwX2N1cnJfZGVwdGggPCBzdGF0ZS5wcF9tYXhfYm94ZXMgdGhlblxuICAgIGxldCBlbGVtID1cbiAgICAgIG1ha2VfcXVldWVfZWxlbVxuICAgICAgICAoc2l6ZV9vZl9pbnQgKC0gc3RhdGUucHBfcmlnaHRfdG90YWwpKVxuICAgICAgICAoUHBfdGJyZWFrICh3aWR0aCwgb2Zmc2V0KSlcbiAgICAgICAgd2lkdGggaW5cbiAgICBzY2FuX3B1c2ggc3RhdGUgdHJ1ZSBlbGVtXG47O1xuXG5sZXQgcHBfcHJpbnRfdGFiIHN0YXRlICgpID0gcHBfcHJpbnRfdGJyZWFrIHN0YXRlIDAgMDs7XG5cbmxldCBwcF9zZXRfdGFiIHN0YXRlICgpID1cbiAgaWYgc3RhdGUucHBfY3Vycl9kZXB0aCA8IHN0YXRlLnBwX21heF9ib3hlcyB0aGVuXG4gICAgbGV0IGVsZW0gPVxuICAgICAgbWFrZV9xdWV1ZV9lbGVtIChzaXplX29mX2ludCAwKSBQcF9zdGFiIDAgaW5cbiAgICBlbnF1ZXVlX2FkdmFuY2Ugc3RhdGUgZWxlbVxuOztcblxuXG4oKiBDb252ZW5pZW5jZSBmdW5jdGlvbnMgKilcblxuKCogVG8gZm9ybWF0IGEgbGlzdCAqKVxubGV0IHJlYyBwcF9wcmludF9saXN0ID8ocHBfc2VwID0gcHBfcHJpbnRfY3V0KSBwcF92IHBwZiA9IGZ1bmN0aW9uXG4gIHwgW10gLT4gKClcbiAgfCBbdl0gLT4gcHBfdiBwcGYgdlxuICB8IHYgOjogdnMgLT5cbiAgICBwcF92IHBwZiB2O1xuICAgIHBwX3NlcCBwcGYgKCk7XG4gICAgcHBfcHJpbnRfbGlzdCB+cHBfc2VwIHBwX3YgcHBmIHZzXG5cbigqIFRvIGZvcm1hdCBmcmVlLWZsb3dpbmcgdGV4dCAqKVxubGV0IHBwX3ByaW50X3RleHQgcHBmIHMgPVxuICBsZXQgbGVuID0gU3RyaW5nLmxlbmd0aCBzIGluXG4gIGxldCBsZWZ0ID0gcmVmIDAgaW5cbiAgbGV0IHJpZ2h0ID0gcmVmIDAgaW5cbiAgbGV0IGZsdXNoICgpID1cbiAgICBwcF9wcmludF9zdHJpbmcgcHBmIChTdHJpbmcuc3ViIHMgIWxlZnQgKCFyaWdodCAtICFsZWZ0KSk7XG4gICAgaW5jciByaWdodDsgbGVmdCA6PSAhcmlnaHQ7XG4gIGluXG4gIHdoaWxlICghcmlnaHQgPD4gbGVuKSBkb1xuICAgIG1hdGNoIHMuWyFyaWdodF0gd2l0aFxuICAgICAgfCAnXFxuJyAtPlxuICAgICAgICBmbHVzaCAoKTtcbiAgICAgICAgcHBfZm9yY2VfbmV3bGluZSBwcGYgKClcbiAgICAgIHwgJyAnIC0+XG4gICAgICAgIGZsdXNoICgpOyBwcF9wcmludF9zcGFjZSBwcGYgKClcbiAgICAgICgqIHRoZXJlIGlzIG5vIHNwZWNpZmljIHN1cHBvcnQgZm9yICdcXHQnXG4gICAgICAgICBhcyBpdCBpcyB1bmNsZWFyIHdoYXQgYSByaWdodCBzZW1hbnRpY3Mgd291bGQgYmUgKilcbiAgICAgIHwgXyAtPiBpbmNyIHJpZ2h0XG4gIGRvbmU7XG4gIGlmICFsZWZ0IDw+IGxlbiB0aGVuIGZsdXNoICgpXG5cblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgUHJvY2VkdXJlcyB0byBjb250cm9sIHRoZSBwcmV0dHktcHJpbnRlcnNcblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG4oKiBGaXQgbWF4X2JveGVzLiAqKVxubGV0IHBwX3NldF9tYXhfYm94ZXMgc3RhdGUgbiA9IGlmIG4gPiAxIHRoZW4gc3RhdGUucHBfbWF4X2JveGVzIDwtIG47O1xuXG4oKiBUbyBrbm93IHRoZSBjdXJyZW50IG1heGltdW0gbnVtYmVyIG9mIGJveGVzIGFsbG93ZWQuICopXG5sZXQgcHBfZ2V0X21heF9ib3hlcyBzdGF0ZSAoKSA9IHN0YXRlLnBwX21heF9ib3hlczs7XG5cbmxldCBwcF9vdmVyX21heF9ib3hlcyBzdGF0ZSAoKSA9IHN0YXRlLnBwX2N1cnJfZGVwdGggPSBzdGF0ZS5wcF9tYXhfYm94ZXM7O1xuXG4oKiBFbGxpcHNpcy4gKilcbmxldCBwcF9zZXRfZWxsaXBzaXNfdGV4dCBzdGF0ZSBzID0gc3RhdGUucHBfZWxsaXBzaXMgPC0gc1xuYW5kIHBwX2dldF9lbGxpcHNpc190ZXh0IHN0YXRlICgpID0gc3RhdGUucHBfZWxsaXBzaXNcbjs7XG5cbigqIFRvIHNldCB0aGUgbWFyZ2luIG9mIHByZXR0eS1wcmludGVyLiAqKVxubGV0IHBwX2xpbWl0IG4gPVxuICBpZiBuIDwgcHBfaW5maW5pdHkgdGhlbiBuIGVsc2UgcHJlZCBwcF9pbmZpbml0eVxuOztcblxubGV0IHBwX3NldF9taW5fc3BhY2VfbGVmdCBzdGF0ZSBuID1cbiAgaWYgbiA+PSAxIHRoZW5cbiAgICBsZXQgbiA9IHBwX2xpbWl0IG4gaW5cbiAgICBzdGF0ZS5wcF9taW5fc3BhY2VfbGVmdCA8LSBuO1xuICAgIHN0YXRlLnBwX21heF9pbmRlbnQgPC0gc3RhdGUucHBfbWFyZ2luIC0gc3RhdGUucHBfbWluX3NwYWNlX2xlZnQ7XG4gICAgcHBfcmluaXQgc3RhdGVcbjs7XG5cbigqIEluaXRpYWxseSwgd2UgaGF2ZSA6XG4gIHBwX21heF9pbmRlbnQgPSBwcF9tYXJnaW4gLSBwcF9taW5fc3BhY2VfbGVmdCwgYW5kXG4gIHBwX3NwYWNlX2xlZnQgPSBwcF9tYXJnaW4uICopXG5sZXQgcHBfc2V0X21heF9pbmRlbnQgc3RhdGUgbiA9XG4gIHBwX3NldF9taW5fc3BhY2VfbGVmdCBzdGF0ZSAoc3RhdGUucHBfbWFyZ2luIC0gbilcbjs7XG5sZXQgcHBfZ2V0X21heF9pbmRlbnQgc3RhdGUgKCkgPSBzdGF0ZS5wcF9tYXhfaW5kZW50OztcblxubGV0IHBwX3NldF9tYXJnaW4gc3RhdGUgbiA9XG4gIGlmIG4gPj0gMSB0aGVuXG4gICAgbGV0IG4gPSBwcF9saW1pdCBuIGluXG4gICAgc3RhdGUucHBfbWFyZ2luIDwtIG47XG4gICAgbGV0IG5ld19tYXhfaW5kZW50ID1cbiAgICAgICgqIFRyeSB0byBtYWludGFpbiBtYXhfaW5kZW50IHRvIGl0cyBhY3R1YWwgdmFsdWUuICopXG4gICAgICBpZiBzdGF0ZS5wcF9tYXhfaW5kZW50IDw9IHN0YXRlLnBwX21hcmdpblxuICAgICAgdGhlbiBzdGF0ZS5wcF9tYXhfaW5kZW50IGVsc2VcbiAgICAgICgqIElmIHBvc3NpYmxlIG1haW50YWluIHBwX21pbl9zcGFjZV9sZWZ0IHRvIGl0cyBhY3R1YWwgdmFsdWUsXG4gICAgICAgICBpZiB0aGlzIGxlYWRzIHRvIGEgdG9vIHNtYWxsIG1heF9pbmRlbnQsIHRha2UgaGFsZiBvZiB0aGVcbiAgICAgICAgIG5ldyBtYXJnaW4sIGlmIGl0IGlzIGdyZWF0ZXIgdGhhbiAxLiAqKVxuICAgICAgIG1heCAobWF4IChzdGF0ZS5wcF9tYXJnaW4gLSBzdGF0ZS5wcF9taW5fc3BhY2VfbGVmdClcbiAgICAgICAgICAgICAgICAoc3RhdGUucHBfbWFyZ2luIC8gMikpIDEgaW5cbiAgICAoKiBSZWJ1aWxkIGludmFyaWFudHMuICopXG4gICAgcHBfc2V0X21heF9pbmRlbnQgc3RhdGUgbmV3X21heF9pbmRlbnRcbjs7XG5cbmxldCBwcF9nZXRfbWFyZ2luIHN0YXRlICgpID0gc3RhdGUucHBfbWFyZ2luOztcblxudHlwZSBmb3JtYXR0ZXJfb3V0X2Z1bmN0aW9ucyA9IHtcbiAgb3V0X3N0cmluZyA6IHN0cmluZyAtPiBpbnQgLT4gaW50IC0+IHVuaXQ7XG4gIG91dF9mbHVzaCA6IHVuaXQgLT4gdW5pdDtcbiAgb3V0X25ld2xpbmUgOiB1bml0IC0+IHVuaXQ7XG4gIG91dF9zcGFjZXMgOiBpbnQgLT4gdW5pdDtcbn1cbjs7XG5cbmxldCBwcF9zZXRfZm9ybWF0dGVyX291dF9mdW5jdGlvbnMgc3RhdGUge1xuICAgICAgb3V0X3N0cmluZyA9IGY7XG4gICAgICBvdXRfZmx1c2ggPSBnO1xuICAgICAgb3V0X25ld2xpbmUgPSBoO1xuICAgICAgb3V0X3NwYWNlcyA9IGk7XG4gICAgfSA9XG4gIHN0YXRlLnBwX291dF9zdHJpbmcgPC0gZjtcbiAgc3RhdGUucHBfb3V0X2ZsdXNoIDwtIGc7XG4gIHN0YXRlLnBwX291dF9uZXdsaW5lIDwtIGg7XG4gIHN0YXRlLnBwX291dF9zcGFjZXMgPC0gaTtcbjs7XG5cbmxldCBwcF9nZXRfZm9ybWF0dGVyX291dF9mdW5jdGlvbnMgc3RhdGUgKCkgPSB7XG4gIG91dF9zdHJpbmcgPSBzdGF0ZS5wcF9vdXRfc3RyaW5nO1xuICBvdXRfZmx1c2ggPSBzdGF0ZS5wcF9vdXRfZmx1c2g7XG4gIG91dF9uZXdsaW5lID0gc3RhdGUucHBfb3V0X25ld2xpbmU7XG4gIG91dF9zcGFjZXMgPSBzdGF0ZS5wcF9vdXRfc3BhY2VzO1xufVxuOztcblxubGV0IHBwX3NldF9mb3JtYXR0ZXJfb3V0cHV0X2Z1bmN0aW9ucyBzdGF0ZSBmIGcgPVxuICBzdGF0ZS5wcF9vdXRfc3RyaW5nIDwtIGY7IHN0YXRlLnBwX291dF9mbHVzaCA8LSBnOztcbmxldCBwcF9nZXRfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgc3RhdGUgKCkgPVxuICAoc3RhdGUucHBfb3V0X3N0cmluZywgc3RhdGUucHBfb3V0X2ZsdXNoKVxuOztcblxubGV0IHBwX3NldF9hbGxfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgc3RhdGVcbiAgICB+b3V0OmYgfmZsdXNoOmcgfm5ld2xpbmU6aCB+c3BhY2VzOmkgPVxuICBwcF9zZXRfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgc3RhdGUgZiBnO1xuICBzdGF0ZS5wcF9vdXRfbmV3bGluZSA8LSBoO1xuICBzdGF0ZS5wcF9vdXRfc3BhY2VzIDwtIGk7XG47O1xubGV0IHBwX2dldF9hbGxfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgc3RhdGUgKCkgPVxuICAoc3RhdGUucHBfb3V0X3N0cmluZywgc3RhdGUucHBfb3V0X2ZsdXNoLFxuICAgc3RhdGUucHBfb3V0X25ld2xpbmUsIHN0YXRlLnBwX291dF9zcGFjZXMpXG47O1xuXG4oKiBEZWZhdWx0IGZ1bmN0aW9uIHRvIG91dHB1dCBuZXcgbGluZXMuICopXG5sZXQgZGlzcGxheV9uZXdsaW5lIHN0YXRlICgpID0gc3RhdGUucHBfb3V0X3N0cmluZyBcIlxcblwiIDAgIDE7O1xuXG4oKiBEZWZhdWx0IGZ1bmN0aW9uIHRvIG91dHB1dCBzcGFjZXMuICopXG5sZXQgYmxhbmtfbGluZSA9IFN0cmluZy5tYWtlIDgwICcgJzs7XG5sZXQgcmVjIGRpc3BsYXlfYmxhbmtzIHN0YXRlIG4gPVxuICBpZiBuID4gMCB0aGVuXG4gIGlmIG4gPD0gODAgdGhlbiBzdGF0ZS5wcF9vdXRfc3RyaW5nIGJsYW5rX2xpbmUgMCBuIGVsc2VcbiAgYmVnaW5cbiAgICBzdGF0ZS5wcF9vdXRfc3RyaW5nIGJsYW5rX2xpbmUgMCA4MDtcbiAgICBkaXNwbGF5X2JsYW5rcyBzdGF0ZSAobiAtIDgwKVxuICBlbmRcbjs7XG5cbmxldCBwcF9zZXRfZm9ybWF0dGVyX291dF9jaGFubmVsIHN0YXRlIG9zID1cbiAgc3RhdGUucHBfb3V0X3N0cmluZyA8LSBvdXRwdXRfc3Vic3RyaW5nIG9zO1xuICBzdGF0ZS5wcF9vdXRfZmx1c2ggPC0gKGZ1biAoKSAtPiBmbHVzaCBvcyk7XG4gIHN0YXRlLnBwX291dF9uZXdsaW5lIDwtIGRpc3BsYXlfbmV3bGluZSBzdGF0ZTtcbiAgc3RhdGUucHBfb3V0X3NwYWNlcyA8LSBkaXNwbGF5X2JsYW5rcyBzdGF0ZTtcbjs7XG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIENyZWF0aW9uIG9mIHNwZWNpZmljIGZvcm1hdHRlcnNcblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5sZXQgZGVmYXVsdF9wcF9tYXJrX29wZW5fdGFnIHMgPSBcIjxcIiBeIHMgXiBcIj5cIjs7XG5sZXQgZGVmYXVsdF9wcF9tYXJrX2Nsb3NlX3RhZyBzID0gXCI8L1wiIF4gcyBeIFwiPlwiOztcblxubGV0IGRlZmF1bHRfcHBfcHJpbnRfb3Blbl90YWcgPSBpZ25vcmU7O1xubGV0IGRlZmF1bHRfcHBfcHJpbnRfY2xvc2VfdGFnID0gaWdub3JlOztcblxubGV0IHBwX21ha2VfZm9ybWF0dGVyIGYgZyBoIGkgPVxuICAoKiBUaGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgZm9ybWF0dGVyIGNvbnRhaW5zIGEgZHVtbXkgYm94LiAqKVxuICBsZXQgcHBfcSA9IG1ha2VfcXVldWUgKCkgaW5cbiAgbGV0IHN5c190b2sgPVxuICAgIG1ha2VfcXVldWVfZWxlbSAoc2l6ZV9vZl9pbnQgKC0xKSkgKFBwX2JlZ2luICgwLCBQcF9ob3Zib3gpKSAwIGluXG4gIGFkZF9xdWV1ZSBzeXNfdG9rIHBwX3E7XG4gIGxldCBzeXNfc2Nhbl9zdGFjayA9XG4gICAgICAoU2Nhbl9lbGVtICgxLCBzeXNfdG9rKSkgOjogc2Nhbl9zdGFja19ib3R0b20gaW5cbiAge1xuICAgcHBfc2Nhbl9zdGFjayA9IHN5c19zY2FuX3N0YWNrO1xuICAgcHBfZm9ybWF0X3N0YWNrID0gW107XG4gICBwcF90Ym94X3N0YWNrID0gW107XG4gICBwcF90YWdfc3RhY2sgPSBbXTtcbiAgIHBwX21hcmtfc3RhY2sgPSBbXTtcbiAgIHBwX21hcmdpbiA9IDc4O1xuICAgcHBfbWluX3NwYWNlX2xlZnQgPSAxMDtcbiAgIHBwX21heF9pbmRlbnQgPSA3OCAtIDEwO1xuICAgcHBfc3BhY2VfbGVmdCA9IDc4O1xuICAgcHBfY3VycmVudF9pbmRlbnQgPSAwO1xuICAgcHBfaXNfbmV3X2xpbmUgPSB0cnVlO1xuICAgcHBfbGVmdF90b3RhbCA9IDE7XG4gICBwcF9yaWdodF90b3RhbCA9IDE7XG4gICBwcF9jdXJyX2RlcHRoID0gMTtcbiAgIHBwX21heF9ib3hlcyA9IG1heF9pbnQ7XG4gICBwcF9lbGxpcHNpcyA9IFwiLlwiO1xuICAgcHBfb3V0X3N0cmluZyA9IGY7XG4gICBwcF9vdXRfZmx1c2ggPSBnO1xuICAgcHBfb3V0X25ld2xpbmUgPSBoO1xuICAgcHBfb3V0X3NwYWNlcyA9IGk7XG4gICBwcF9wcmludF90YWdzID0gZmFsc2U7XG4gICBwcF9tYXJrX3RhZ3MgPSBmYWxzZTtcbiAgIHBwX21hcmtfb3Blbl90YWcgPSBkZWZhdWx0X3BwX21hcmtfb3Blbl90YWc7XG4gICBwcF9tYXJrX2Nsb3NlX3RhZyA9IGRlZmF1bHRfcHBfbWFya19jbG9zZV90YWc7XG4gICBwcF9wcmludF9vcGVuX3RhZyA9IGRlZmF1bHRfcHBfcHJpbnRfb3Blbl90YWc7XG4gICBwcF9wcmludF9jbG9zZV90YWcgPSBkZWZhdWx0X3BwX3ByaW50X2Nsb3NlX3RhZztcbiAgIHBwX3F1ZXVlID0gcHBfcTtcbiAgfVxuOztcblxuKCogTWFrZSBhIGZvcm1hdHRlciB3aXRoIGRlZmF1bHQgZnVuY3Rpb25zIHRvIG91dHB1dCBzcGFjZXMgYW5kIG5ldyBsaW5lcy4gKilcbmxldCBtYWtlX2Zvcm1hdHRlciBvdXRwdXQgZmx1c2ggPVxuICBsZXQgcHBmID0gcHBfbWFrZV9mb3JtYXR0ZXIgb3V0cHV0IGZsdXNoIGlnbm9yZSBpZ25vcmUgaW5cbiAgcHBmLnBwX291dF9uZXdsaW5lIDwtIGRpc3BsYXlfbmV3bGluZSBwcGY7XG4gIHBwZi5wcF9vdXRfc3BhY2VzIDwtIGRpc3BsYXlfYmxhbmtzIHBwZjtcbiAgcHBmXG47O1xuXG5sZXQgZm9ybWF0dGVyX29mX291dF9jaGFubmVsIG9jID1cbiAgbWFrZV9mb3JtYXR0ZXIgKG91dHB1dF9zdWJzdHJpbmcgb2MpIChmdW4gKCkgLT4gZmx1c2ggb2MpXG47O1xuXG5sZXQgZm9ybWF0dGVyX29mX2J1ZmZlciBiID1cbiAgbWFrZV9mb3JtYXR0ZXIgKEJ1ZmZlci5hZGRfc3Vic3RyaW5nIGIpIGlnbm9yZVxuOztcblxubGV0IHN0ZGJ1ZiA9IEJ1ZmZlci5jcmVhdGUgNTEyOztcblxuKCogUHJlZGVmaW5lZCBmb3JtYXR0ZXJzLiAqKVxubGV0IHN0ZF9mb3JtYXR0ZXIgPSBmb3JtYXR0ZXJfb2Zfb3V0X2NoYW5uZWwgUGVydmFzaXZlcy5zdGRvdXRcbmFuZCBlcnJfZm9ybWF0dGVyID0gZm9ybWF0dGVyX29mX291dF9jaGFubmVsIFBlcnZhc2l2ZXMuc3RkZXJyXG5hbmQgc3RyX2Zvcm1hdHRlciA9IGZvcm1hdHRlcl9vZl9idWZmZXIgc3RkYnVmXG47O1xuXG5sZXQgZmx1c2hfc3RyX2Zvcm1hdHRlciAoKSA9XG4gIHBwX2ZsdXNoX3F1ZXVlIHN0cl9mb3JtYXR0ZXIgZmFsc2U7XG4gIGxldCBzID0gQnVmZmVyLmNvbnRlbnRzIHN0ZGJ1ZiBpblxuICBCdWZmZXIucmVzZXQgc3RkYnVmO1xuICBzXG47O1xuXG5sZXQgZmx1c2hfYnVmX2Zvcm1hdHRlciBidWYgcHBmID1cbiAgcHBfZmx1c2hfcXVldWUgcHBmIGZhbHNlO1xuICBsZXQgcyA9IEJ1ZmZlci5jb250ZW50cyBidWYgaW5cbiAgQnVmZmVyLnJlc2V0IGJ1ZjtcbiAgc1xuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICBCYXNpYyBmdW5jdGlvbnMgb24gdGhlIHN0YW5kYXJkIGZvcm1hdHRlclxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbmxldCBvcGVuX2hib3ggPSBwcF9vcGVuX2hib3ggc3RkX2Zvcm1hdHRlclxuYW5kIG9wZW5fdmJveCA9IHBwX29wZW5fdmJveCBzdGRfZm9ybWF0dGVyXG5hbmQgb3Blbl9odmJveCA9IHBwX29wZW5faHZib3ggc3RkX2Zvcm1hdHRlclxuYW5kIG9wZW5faG92Ym94ID0gcHBfb3Blbl9ob3Zib3ggc3RkX2Zvcm1hdHRlclxuYW5kIG9wZW5fYm94ID0gcHBfb3Blbl9ib3ggc3RkX2Zvcm1hdHRlclxuYW5kIGNsb3NlX2JveCA9IHBwX2Nsb3NlX2JveCBzdGRfZm9ybWF0dGVyXG5hbmQgb3Blbl90YWcgPSBwcF9vcGVuX3RhZyBzdGRfZm9ybWF0dGVyXG5hbmQgY2xvc2VfdGFnID0gcHBfY2xvc2VfdGFnIHN0ZF9mb3JtYXR0ZXJcbmFuZCBwcmludF9hcyA9IHBwX3ByaW50X2FzIHN0ZF9mb3JtYXR0ZXJcbmFuZCBwcmludF9zdHJpbmcgPSBwcF9wcmludF9zdHJpbmcgc3RkX2Zvcm1hdHRlclxuYW5kIHByaW50X2ludCA9IHBwX3ByaW50X2ludCBzdGRfZm9ybWF0dGVyXG5hbmQgcHJpbnRfZmxvYXQgPSBwcF9wcmludF9mbG9hdCBzdGRfZm9ybWF0dGVyXG5hbmQgcHJpbnRfY2hhciA9IHBwX3ByaW50X2NoYXIgc3RkX2Zvcm1hdHRlclxuYW5kIHByaW50X2Jvb2wgPSBwcF9wcmludF9ib29sIHN0ZF9mb3JtYXR0ZXJcbmFuZCBwcmludF9icmVhayA9IHBwX3ByaW50X2JyZWFrIHN0ZF9mb3JtYXR0ZXJcbmFuZCBwcmludF9jdXQgPSBwcF9wcmludF9jdXQgc3RkX2Zvcm1hdHRlclxuYW5kIHByaW50X3NwYWNlID0gcHBfcHJpbnRfc3BhY2Ugc3RkX2Zvcm1hdHRlclxuYW5kIGZvcmNlX25ld2xpbmUgPSBwcF9mb3JjZV9uZXdsaW5lIHN0ZF9mb3JtYXR0ZXJcbmFuZCBwcmludF9mbHVzaCA9IHBwX3ByaW50X2ZsdXNoIHN0ZF9mb3JtYXR0ZXJcbmFuZCBwcmludF9uZXdsaW5lID0gcHBfcHJpbnRfbmV3bGluZSBzdGRfZm9ybWF0dGVyXG5hbmQgcHJpbnRfaWZfbmV3bGluZSA9IHBwX3ByaW50X2lmX25ld2xpbmUgc3RkX2Zvcm1hdHRlclxuXG5hbmQgb3Blbl90Ym94ID0gcHBfb3Blbl90Ym94IHN0ZF9mb3JtYXR0ZXJcbmFuZCBjbG9zZV90Ym94ID0gcHBfY2xvc2VfdGJveCBzdGRfZm9ybWF0dGVyXG5hbmQgcHJpbnRfdGJyZWFrID0gcHBfcHJpbnRfdGJyZWFrIHN0ZF9mb3JtYXR0ZXJcblxuYW5kIHNldF90YWIgPSBwcF9zZXRfdGFiIHN0ZF9mb3JtYXR0ZXJcbmFuZCBwcmludF90YWIgPSBwcF9wcmludF90YWIgc3RkX2Zvcm1hdHRlclxuXG5hbmQgc2V0X21hcmdpbiA9IHBwX3NldF9tYXJnaW4gc3RkX2Zvcm1hdHRlclxuYW5kIGdldF9tYXJnaW4gPSBwcF9nZXRfbWFyZ2luIHN0ZF9mb3JtYXR0ZXJcblxuYW5kIHNldF9tYXhfaW5kZW50ID0gcHBfc2V0X21heF9pbmRlbnQgc3RkX2Zvcm1hdHRlclxuYW5kIGdldF9tYXhfaW5kZW50ID0gcHBfZ2V0X21heF9pbmRlbnQgc3RkX2Zvcm1hdHRlclxuXG5hbmQgc2V0X21heF9ib3hlcyA9IHBwX3NldF9tYXhfYm94ZXMgc3RkX2Zvcm1hdHRlclxuYW5kIGdldF9tYXhfYm94ZXMgPSBwcF9nZXRfbWF4X2JveGVzIHN0ZF9mb3JtYXR0ZXJcbmFuZCBvdmVyX21heF9ib3hlcyA9IHBwX292ZXJfbWF4X2JveGVzIHN0ZF9mb3JtYXR0ZXJcblxuYW5kIHNldF9lbGxpcHNpc190ZXh0ID0gcHBfc2V0X2VsbGlwc2lzX3RleHQgc3RkX2Zvcm1hdHRlclxuYW5kIGdldF9lbGxpcHNpc190ZXh0ID0gcHBfZ2V0X2VsbGlwc2lzX3RleHQgc3RkX2Zvcm1hdHRlclxuXG5hbmQgc2V0X2Zvcm1hdHRlcl9vdXRfY2hhbm5lbCA9XG4gIHBwX3NldF9mb3JtYXR0ZXJfb3V0X2NoYW5uZWwgc3RkX2Zvcm1hdHRlclxuXG5hbmQgc2V0X2Zvcm1hdHRlcl9vdXRfZnVuY3Rpb25zID1cbiAgcHBfc2V0X2Zvcm1hdHRlcl9vdXRfZnVuY3Rpb25zIHN0ZF9mb3JtYXR0ZXJcbmFuZCBnZXRfZm9ybWF0dGVyX291dF9mdW5jdGlvbnMgPVxuICBwcF9nZXRfZm9ybWF0dGVyX291dF9mdW5jdGlvbnMgc3RkX2Zvcm1hdHRlclxuXG5hbmQgc2V0X2Zvcm1hdHRlcl9vdXRwdXRfZnVuY3Rpb25zID1cbiAgcHBfc2V0X2Zvcm1hdHRlcl9vdXRwdXRfZnVuY3Rpb25zIHN0ZF9mb3JtYXR0ZXJcbmFuZCBnZXRfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgPVxuICBwcF9nZXRfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgc3RkX2Zvcm1hdHRlclxuXG5hbmQgc2V0X2FsbF9mb3JtYXR0ZXJfb3V0cHV0X2Z1bmN0aW9ucyA9XG4gIHBwX3NldF9hbGxfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgc3RkX2Zvcm1hdHRlclxuYW5kIGdldF9hbGxfZm9ybWF0dGVyX291dHB1dF9mdW5jdGlvbnMgPVxuICBwcF9nZXRfYWxsX2Zvcm1hdHRlcl9vdXRwdXRfZnVuY3Rpb25zIHN0ZF9mb3JtYXR0ZXJcblxuYW5kIHNldF9mb3JtYXR0ZXJfdGFnX2Z1bmN0aW9ucyA9XG4gIHBwX3NldF9mb3JtYXR0ZXJfdGFnX2Z1bmN0aW9ucyBzdGRfZm9ybWF0dGVyXG5hbmQgZ2V0X2Zvcm1hdHRlcl90YWdfZnVuY3Rpb25zID1cbiAgcHBfZ2V0X2Zvcm1hdHRlcl90YWdfZnVuY3Rpb25zIHN0ZF9mb3JtYXR0ZXJcbmFuZCBzZXRfcHJpbnRfdGFncyA9XG4gIHBwX3NldF9wcmludF90YWdzIHN0ZF9mb3JtYXR0ZXJcbmFuZCBnZXRfcHJpbnRfdGFncyA9XG4gIHBwX2dldF9wcmludF90YWdzIHN0ZF9mb3JtYXR0ZXJcbmFuZCBzZXRfbWFya190YWdzID1cbiAgcHBfc2V0X21hcmtfdGFncyBzdGRfZm9ybWF0dGVyXG5hbmQgZ2V0X21hcmtfdGFncyA9XG4gIHBwX2dldF9tYXJrX3RhZ3Mgc3RkX2Zvcm1hdHRlclxuYW5kIHNldF90YWdzID1cbiAgcHBfc2V0X3RhZ3Mgc3RkX2Zvcm1hdHRlclxuOztcblxuICgqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxubGV0IGNvbXB1dGVfdGFnIG91dHB1dCB0YWdfYWNjID1cbiAgbGV0IGJ1ZiA9IEJ1ZmZlci5jcmVhdGUgMTYgaW5cbiAgbGV0IHBwZiA9IGZvcm1hdHRlcl9vZl9idWZmZXIgYnVmIGluXG4gIGxldCAoKSA9IG91dHB1dCBwcGYgdGFnX2FjYyBpblxuICBsZXQgKCkgPSBwcF9wcmludF9mbHVzaCBwcGYgKCkgaW5cbiAgbGV0IGxlbiA9IEJ1ZmZlci5sZW5ndGggYnVmIGluXG4gIGlmIGxlbiA8IDIgdGhlbiBCdWZmZXIuY29udGVudHMgYnVmXG4gIGVsc2UgQnVmZmVyLnN1YiBidWYgMSAobGVuIC0gMilcblxuICgqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIERlZmluaW5nIGNvbnRpbnVhdGlvbnMgdG8gYmUgcGFzc2VkIGFzIGFyZ3VtZW50cyBvZlxuICBDYW1saW50ZXJuYWxGb3JtYXQubWFrZV9wcmludGYuXG5cbiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiopXG5cbm9wZW4gQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzXG5vcGVuIENhbWxpbnRlcm5hbEZvcm1hdFxuXG4oKiBJbnRlcnByZXQgYSBmb3JtYXR0aW5nIGVudGl0eSBvbiBhIGZvcm1hdHRlci4gKilcbmxldCBvdXRwdXRfZm9ybWF0dGluZ19saXQgcHBmIGZtdGluZ19saXQgPSBtYXRjaCBmbXRpbmdfbGl0IHdpdGhcbiAgfCBDbG9zZV9ib3ggICAgICAgICAgICAgICAgIC0+IHBwX2Nsb3NlX2JveCBwcGYgKClcbiAgfCBDbG9zZV90YWcgICAgICAgICAgICAgICAgIC0+IHBwX2Nsb3NlX3RhZyBwcGYgKClcbiAgfCBCcmVhayAoXywgd2lkdGgsIG9mZnNldCkgIC0+IHBwX3ByaW50X2JyZWFrIHBwZiB3aWR0aCBvZmZzZXRcbiAgfCBGRmx1c2ggICAgICAgICAgICAgICAgICAgIC0+IHBwX3ByaW50X2ZsdXNoIHBwZiAoKVxuICB8IEZvcmNlX25ld2xpbmUgICAgICAgICAgICAgLT4gcHBfZm9yY2VfbmV3bGluZSBwcGYgKClcbiAgfCBGbHVzaF9uZXdsaW5lICAgICAgICAgICAgIC0+IHBwX3ByaW50X25ld2xpbmUgcHBmICgpXG4gIHwgTWFnaWNfc2l6ZSAoXywgXykgICAgICAgICAtPiAoKVxuICB8IEVzY2FwZWRfYXQgICAgICAgICAgICAgICAgLT4gcHBfcHJpbnRfY2hhciBwcGYgJ0AnXG4gIHwgRXNjYXBlZF9wZXJjZW50ICAgICAgICAgICAtPiBwcF9wcmludF9jaGFyIHBwZiAnJSdcbiAgfCBTY2FuX2luZGljIGMgICAgICAgICAgICAgIC0+IHBwX3ByaW50X2NoYXIgcHBmICdAJzsgcHBfcHJpbnRfY2hhciBwcGYgY1xuXG4oKiBSZWN1cnNpdmVseSBvdXRwdXQgYW4gXCJhY2N1bXVsYXRvclwiIGNvbnRhaW5pbmcgYSByZXZlcnNlZCBsaXN0IG9mXG4gICBwcmludGluZyBlbnRpdGllcyAoc3RyaW5nLCBjaGFyLCBmbHVzLCAuLi4pIGluIGFuIG91dHB1dF9zdHJlYW0uICopXG4oKiBEaWZmZXIgZnJvbSBQcmludGYub3V0cHV0X2FjYyBieSB0aGUgaW50ZXJwcmV0YXRpb24gb2YgZm9ybWF0dGluZy4gKilcbigqIFVzZWQgYXMgYSBjb250aW51YXRpb24gb2YgQ2FtbGludGVybmFsRm9ybWF0Lm1ha2VfcHJpbnRmLiAqKVxubGV0IHJlYyBvdXRwdXRfYWNjIHBwZiBhY2MgPSBtYXRjaCBhY2Mgd2l0aFxuICB8IEFjY19zdHJpbmdfbGl0ZXJhbCAoQWNjX2Zvcm1hdHRpbmdfbGl0IChwLCBNYWdpY19zaXplIChfLCBzaXplKSksIHMpXG4gIHwgQWNjX2RhdGFfc3RyaW5nIChBY2NfZm9ybWF0dGluZ19saXQgKHAsIE1hZ2ljX3NpemUgKF8sIHNpemUpKSwgcykgLT5cbiAgICBvdXRwdXRfYWNjIHBwZiBwO1xuICAgIHBwX3ByaW50X2FzX3NpemUgcHBmIChzaXplX29mX2ludCBzaXplKSBzO1xuICB8IEFjY19jaGFyX2xpdGVyYWwgKEFjY19mb3JtYXR0aW5nX2xpdCAocCwgTWFnaWNfc2l6ZSAoXywgc2l6ZSkpLCBjKVxuICB8IEFjY19kYXRhX2NoYXIgKEFjY19mb3JtYXR0aW5nX2xpdCAocCwgTWFnaWNfc2l6ZSAoXywgc2l6ZSkpLCBjKSAtPlxuICAgIG91dHB1dF9hY2MgcHBmIHA7XG4gICAgcHBfcHJpbnRfYXNfc2l6ZSBwcGYgKHNpemVfb2ZfaW50IHNpemUpIChTdHJpbmcubWFrZSAxIGMpO1xuICB8IEFjY19mb3JtYXR0aW5nX2xpdCAocCwgZikgLT5cbiAgICBvdXRwdXRfYWNjIHBwZiBwO1xuICAgIG91dHB1dF9mb3JtYXR0aW5nX2xpdCBwcGYgZjtcbiAgfCBBY2NfZm9ybWF0dGluZ19nZW4gKHAsIEFjY19vcGVuX3RhZyBhY2MnKSAtPlxuICAgIG91dHB1dF9hY2MgcHBmIHA7XG4gICAgcHBfb3Blbl90YWcgcHBmIChjb21wdXRlX3RhZyBvdXRwdXRfYWNjIGFjYycpXG4gIHwgQWNjX2Zvcm1hdHRpbmdfZ2VuIChwLCBBY2Nfb3Blbl9ib3ggYWNjJykgLT5cbiAgICBsZXQgKCkgPSBvdXRwdXRfYWNjIHBwZiBwIGluXG4gICAgbGV0IChpbmRlbnQsIGJ0eSkgPSBvcGVuX2JveF9vZl9zdHJpbmcgKGNvbXB1dGVfdGFnIG91dHB1dF9hY2MgYWNjJykgaW5cbiAgICBwcF9vcGVuX2JveF9nZW4gcHBmIGluZGVudCBidHlcbiAgfCBBY2Nfc3RyaW5nX2xpdGVyYWwgKHAsIHMpXG4gIHwgQWNjX2RhdGFfc3RyaW5nIChwLCBzKSAgIC0+IG91dHB1dF9hY2MgcHBmIHA7IHBwX3ByaW50X3N0cmluZyBwcGYgcztcbiAgfCBBY2NfY2hhcl9saXRlcmFsIChwLCBjKVxuICB8IEFjY19kYXRhX2NoYXIgKHAsIGMpICAgICAtPiBvdXRwdXRfYWNjIHBwZiBwOyBwcF9wcmludF9jaGFyIHBwZiBjO1xuICB8IEFjY19kZWxheSAocCwgZikgICAgICAgICAtPiBvdXRwdXRfYWNjIHBwZiBwOyBmIHBwZjtcbiAgfCBBY2NfZmx1c2ggcCAgICAgICAgICAgICAgLT4gb3V0cHV0X2FjYyBwcGYgcDsgcHBfcHJpbnRfZmx1c2ggcHBmICgpO1xuICB8IEFjY19pbnZhbGlkX2FyZyAocCwgbXNnKSAtPiBvdXRwdXRfYWNjIHBwZiBwOyBpbnZhbGlkX2FyZyBtc2c7XG4gIHwgRW5kX29mX2FjYyAgICAgICAgICAgICAgIC0+ICgpXG5cbigqIFJlY3Vyc2l2ZWx5IG91dHB1dCBhbiBcImFjY3VtdWxhdG9yXCIgY29udGFpbmluZyBhIHJldmVyc2VkIGxpc3Qgb2ZcbiAgIHByaW50aW5nIGVudGl0aWVzIChzdHJpbmcsIGNoYXIsIGZsdXMsIC4uLikgaW4gYSBidWZmZXIuICopXG4oKiBEaWZmZXIgZnJvbSBQcmludGYuYnVmcHV0X2FjYyBieSB0aGUgaW50ZXJwcmV0YXRpb24gb2YgZm9ybWF0dGluZy4gKilcbigqIFVzZWQgYXMgYSBjb250aW51YXRpb24gb2YgQ2FtbGludGVybmFsRm9ybWF0Lm1ha2VfcHJpbnRmLiAqKVxubGV0IHJlYyBzdHJwdXRfYWNjIHBwZiBhY2MgPSBtYXRjaCBhY2Mgd2l0aFxuICB8IEFjY19zdHJpbmdfbGl0ZXJhbCAoQWNjX2Zvcm1hdHRpbmdfbGl0IChwLCBNYWdpY19zaXplIChfLCBzaXplKSksIHMpXG4gIHwgQWNjX2RhdGFfc3RyaW5nIChBY2NfZm9ybWF0dGluZ19saXQgKHAsIE1hZ2ljX3NpemUgKF8sIHNpemUpKSwgcykgLT5cbiAgICBzdHJwdXRfYWNjIHBwZiBwO1xuICAgIHBwX3ByaW50X2FzX3NpemUgcHBmIChzaXplX29mX2ludCBzaXplKSBzO1xuICB8IEFjY19jaGFyX2xpdGVyYWwgKEFjY19mb3JtYXR0aW5nX2xpdCAocCwgTWFnaWNfc2l6ZSAoXywgc2l6ZSkpLCBjKVxuICB8IEFjY19kYXRhX2NoYXIgKEFjY19mb3JtYXR0aW5nX2xpdCAocCwgTWFnaWNfc2l6ZSAoXywgc2l6ZSkpLCBjKSAtPlxuICAgIHN0cnB1dF9hY2MgcHBmIHA7XG4gICAgcHBfcHJpbnRfYXNfc2l6ZSBwcGYgKHNpemVfb2ZfaW50IHNpemUpIChTdHJpbmcubWFrZSAxIGMpO1xuICB8IEFjY19kZWxheSAoQWNjX2Zvcm1hdHRpbmdfbGl0IChwLCBNYWdpY19zaXplIChfLCBzaXplKSksIGYpIC0+XG4gICAgc3RycHV0X2FjYyBwcGYgcDtcbiAgICBwcF9wcmludF9hc19zaXplIHBwZiAoc2l6ZV9vZl9pbnQgc2l6ZSkgKGYgKCkpO1xuICB8IEFjY19mb3JtYXR0aW5nX2xpdCAocCwgZikgLT5cbiAgICBzdHJwdXRfYWNjIHBwZiBwO1xuICAgIG91dHB1dF9mb3JtYXR0aW5nX2xpdCBwcGYgZjtcbiAgfCBBY2NfZm9ybWF0dGluZ19nZW4gKHAsIEFjY19vcGVuX3RhZyBhY2MnKSAtPlxuICAgIHN0cnB1dF9hY2MgcHBmIHA7XG4gICAgcHBfb3Blbl90YWcgcHBmIChjb21wdXRlX3RhZyBzdHJwdXRfYWNjIGFjYycpXG4gIHwgQWNjX2Zvcm1hdHRpbmdfZ2VuIChwLCBBY2Nfb3Blbl9ib3ggYWNjJykgLT5cbiAgICBsZXQgKCkgPSBzdHJwdXRfYWNjIHBwZiBwIGluXG4gICAgbGV0IChpbmRlbnQsIGJ0eSkgPSBvcGVuX2JveF9vZl9zdHJpbmcgKGNvbXB1dGVfdGFnIHN0cnB1dF9hY2MgYWNjJykgaW5cbiAgICBwcF9vcGVuX2JveF9nZW4gcHBmIGluZGVudCBidHlcbiAgfCBBY2Nfc3RyaW5nX2xpdGVyYWwgKHAsIHMpXG4gIHwgQWNjX2RhdGFfc3RyaW5nIChwLCBzKSAgIC0+IHN0cnB1dF9hY2MgcHBmIHA7IHBwX3ByaW50X3N0cmluZyBwcGYgcztcbiAgfCBBY2NfY2hhcl9saXRlcmFsIChwLCBjKVxuICB8IEFjY19kYXRhX2NoYXIgKHAsIGMpICAgICAtPiBzdHJwdXRfYWNjIHBwZiBwOyBwcF9wcmludF9jaGFyIHBwZiBjO1xuICB8IEFjY19kZWxheSAocCwgZikgICAgICAgICAtPiBzdHJwdXRfYWNjIHBwZiBwOyBwcF9wcmludF9zdHJpbmcgcHBmIChmICgpKTtcbiAgfCBBY2NfZmx1c2ggcCAgICAgICAgICAgICAgLT4gc3RycHV0X2FjYyBwcGYgcDsgcHBfcHJpbnRfZmx1c2ggcHBmICgpO1xuICB8IEFjY19pbnZhbGlkX2FyZyAocCwgbXNnKSAtPiBzdHJwdXRfYWNjIHBwZiBwOyBpbnZhbGlkX2FyZyBtc2c7XG4gIHwgRW5kX29mX2FjYyAgICAgICAgICAgICAgIC0+ICgpXG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIERlZmluaW5nIFtmcHJpbnRmXSBhbmQgdmFyaW91cyBmbGF2b3JzIG9mIFtmcHJpbnRmXS5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5sZXQga2ZwcmludGYgayBvIChGb3JtYXQgKGZtdCwgXykpID1cbiAgbWFrZV9wcmludGYgKGZ1biBvIGFjYyAtPiBvdXRwdXRfYWNjIG8gYWNjOyBrIG8pIG8gRW5kX29mX2FjYyBmbXRcbmxldCBpa2ZwcmludGYgayB4IChGb3JtYXQgKGZtdCwgXykpID1cbiAgbWFrZV9wcmludGYgKGZ1biBfIF8gLT4gayB4KSB4IEVuZF9vZl9hY2MgZm10XG5cbmxldCBmcHJpbnRmIHBwZiBmbXQgPSBrZnByaW50ZiBpZ25vcmUgcHBmIGZtdFxubGV0IGlmcHJpbnRmIHBwZiBmbXQgPSBpa2ZwcmludGYgaWdub3JlIHBwZiBmbXRcbmxldCBwcmludGYgZm10ID0gZnByaW50ZiBzdGRfZm9ybWF0dGVyIGZtdFxubGV0IGVwcmludGYgZm10ID0gZnByaW50ZiBlcnJfZm9ybWF0dGVyIGZtdFxuXG5sZXQga3NwcmludGYgayAoRm9ybWF0IChmbXQsIF8pKSA9XG4gIGxldCBiID0gQnVmZmVyLmNyZWF0ZSA1MTIgaW5cbiAgbGV0IHBwZiA9IGZvcm1hdHRlcl9vZl9idWZmZXIgYiBpblxuICBsZXQgaycgKCkgYWNjID1cbiAgICBzdHJwdXRfYWNjIHBwZiBhY2M7XG4gICAgayAoZmx1c2hfYnVmX2Zvcm1hdHRlciBiIHBwZikgaW5cbiAgbWFrZV9wcmludGYgaycgKCkgRW5kX29mX2FjYyBmbXRcblxubGV0IHNwcmludGYgZm10ID1cbiAga3NwcmludGYgKGZ1biBzIC0+IHMpIGZtdFxuXG5sZXQgYXNwcmludGYgKEZvcm1hdCAoZm10LCBfKSkgPVxuICBsZXQgYiA9IEJ1ZmZlci5jcmVhdGUgNTEyIGluXG4gIGxldCBwcGYgPSBmb3JtYXR0ZXJfb2ZfYnVmZmVyIGIgaW5cbiAgbGV0IGsnIDogKGZvcm1hdHRlciAtPiAoZm9ybWF0dGVyLCB1bml0KSBhY2MgLT4gc3RyaW5nKVxuICAgID0gZnVuIHBwZiBhY2MgLT5cbiAgICAgIG91dHB1dF9hY2MgcHBmIGFjYztcbiAgICAgIHBwX2ZsdXNoX3F1ZXVlIHBwZiBmYWxzZTtcbiAgICAgIGZsdXNoX2J1Zl9mb3JtYXR0ZXIgYiBwcGYgaW5cbiAgbWFrZV9wcmludGYgaycgcHBmIEVuZF9vZl9hY2MgZm10XG5cbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIERlcHJlY2F0ZWQgc3R1ZmYuXG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogRGVwcmVjYXRlZCBlcnJvciBwcm9uZSBmdW5jdGlvbiBicHJpbnRmLiAqKVxubGV0IGJwcmludGYgYiAoRm9ybWF0IChmbXQsIF8pIDogKCdhLCBmb3JtYXR0ZXIsIHVuaXQpIGZvcm1hdCkgPVxuICBsZXQgayBwcGYgYWNjID0gb3V0cHV0X2FjYyBwcGYgYWNjOyBwcF9mbHVzaF9xdWV1ZSBwcGYgZmFsc2UgaW5cbiAgbWFrZV9wcmludGYgayAoZm9ybWF0dGVyX29mX2J1ZmZlciBiKSBFbmRfb2ZfYWNjIGZtdFxuXG4oKiBEZXByZWNhdGVkIGFsaWFzIGZvciBrc3ByaW50Zi4gKilcbmxldCBrcHJpbnRmID0ga3NwcmludGY7O1xuXG4oKiBPdXRwdXQgZXZlcnl0aGluZyBsZWZ0IGluIHRoZSBwcmV0dHkgcHJpbnRlciBxdWV1ZSBhdCBlbmQgb2YgZXhlY3V0aW9uLiAqKVxuYXRfZXhpdCBwcmludF9mbHVzaFxuOztcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgUGllcnJlIFdlaXMsIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMjAwMiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxub3BlbiBDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3Ncbm9wZW4gQ2FtbGludGVybmFsRm9ybWF0XG5cbigqIGFsaWFzIHRvIGF2b2lkIHdhcm5pbmcgZm9yIGFtYmlndWl0eSBiZXR3ZWVuXG4gICBQZXJ2YXNpdmVzLmZvcm1hdDZcbiAgIGFuZCBDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuZm9ybWF0NlxuXG4gICAodGhlIGZvcm1lciBpcyBpbiBmYWN0IGFuIGFsaWFzIGZvciB0aGUgbGF0dGVyLFxuICAgIGJ1dCB0aGUgYW1iaWd1aXR5IHdhcm5pbmcgZG9lc24ndCBjYXJlKVxuKilcbnR5cGUgKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZvcm1hdDYgPVxuICAoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgUGVydmFzaXZlcy5mb3JtYXQ2XG5cbigqIFRoZSBydW4tdGltZSBsaWJyYXJ5IGZvciBzY2FubmVycy4gKilcblxuKCogU2Nhbm5pbmcgYnVmZmVycy4gKilcbm1vZHVsZSB0eXBlIFNDQU5OSU5HID0gc2lnXG5cbiAgdHlwZSBpbl9jaGFubmVsOztcblxuICB0eXBlIHNjYW5idWYgPSBpbl9jaGFubmVsOztcblxuICB0eXBlIGZpbGVfbmFtZSA9IHN0cmluZzs7XG5cbiAgdmFsIHN0ZGluIDogaW5fY2hhbm5lbDs7XG4gICgqIFRoZSBzY2FubmluZyBidWZmZXIgcmVhZGluZyBmcm9tIFtQZXJ2YXNpdmVzLnN0ZGluXS5cbiAgICAgIFtzdGRpYl0gaXMgZXF1aXZhbGVudCB0byBbU2Nhbm5pbmcuZnJvbV9jaGFubmVsIFBlcnZhc2l2ZXMuc3RkaW5dLiAqKVxuXG4gIHZhbCBzdGRpYiA6IGluX2NoYW5uZWw7O1xuICAoKiBBbiBhbGlhcyBmb3IgW1NjYW5mLnN0ZGluXSwgdGhlIHNjYW5uaW5nIGJ1ZmZlciByZWFkaW5nIGZyb21cbiAgICAgW1BlcnZhc2l2ZXMuc3RkaW5dLiAqKVxuXG4gIHZhbCBuZXh0X2NoYXIgOiBzY2FuYnVmIC0+IGNoYXI7O1xuICAoKiBbU2Nhbm5pbmcubmV4dF9jaGFyIGliXSBhZHZhbmNlIHRoZSBzY2FubmluZyBidWZmZXIgZm9yXG4gICAgICBvbmUgY2hhcmFjdGVyLlxuICAgICAgSWYgbm8gbW9yZSBjaGFyYWN0ZXIgY2FuIGJlIHJlYWQsIHNldHMgYSBlbmQgb2YgZmlsZSBjb25kaXRpb24gYW5kXG4gICAgICByZXR1cm5zICdcXDAwMCcuICopXG5cbiAgdmFsIGludmFsaWRhdGVfY3VycmVudF9jaGFyIDogc2NhbmJ1ZiAtPiB1bml0OztcbiAgKCogW1NjYW5uaW5nLmludmFsaWRhdGVfY3VycmVudF9jaGFyIGliXSBtYXJrIHRoZSBjdXJyZW50X2NoYXIgYXMgYWxyZWFkeVxuICAgICAgc2Nhbm5lZC4gKilcblxuICB2YWwgcGVla19jaGFyIDogc2NhbmJ1ZiAtPiBjaGFyOztcbiAgKCogW1NjYW5uaW5nLnBlZWtfY2hhciBpYl0gcmV0dXJucyB0aGUgY3VycmVudCBjaGFyIGF2YWlsYWJsZSBpblxuICAgICAgdGhlIGJ1ZmZlciBvciByZWFkcyBvbmUgaWYgbmVjZXNzYXJ5ICh3aGVuIHRoZSBjdXJyZW50IGNoYXJhY3RlciBpc1xuICAgICAgYWxyZWFkeSBzY2FubmVkKS5cbiAgICAgIElmIG5vIGNoYXJhY3RlciBjYW4gYmUgcmVhZCwgc2V0cyBhbiBlbmQgb2YgZmlsZSBjb25kaXRpb24gYW5kXG4gICAgICByZXR1cm5zICdcXDAwMCcuICopXG5cbiAgdmFsIGNoZWNrZWRfcGVla19jaGFyIDogc2NhbmJ1ZiAtPiBjaGFyOztcbiAgKCogU2FtZSBhcyBhYm92ZSBidXQgYWx3YXlzIHJldHVybnMgYSB2YWxpZCBjaGFyIG9yIGZhaWxzOlxuICAgICAgaW5zdGVhZCBvZiByZXR1cm5pbmcgYSBudWxsIGNoYXIgd2hlbiB0aGUgcmVhZGluZyBtZXRob2Qgb2YgdGhlXG4gICAgICBpbnB1dCBidWZmZXIgaGFzIHJlYWNoZWQgYW4gZW5kIG9mIGZpbGUsIHRoZSBmdW5jdGlvbiByYWlzZXMgZXhjZXB0aW9uXG4gICAgICBbRW5kX29mX2ZpbGVdLiAqKVxuXG4gIHZhbCBzdG9yZV9jaGFyIDogaW50IC0+IHNjYW5idWYgLT4gY2hhciAtPiBpbnQ7O1xuICAoKiBbU2Nhbm5pbmcuc3RvcmVfY2hhciBsaW0gaWIgY10gYWRkcyBbY10gdG8gdGhlIHRva2VuIGJ1ZmZlclxuICAgICAgb2YgdGhlIHNjYW5uaW5nIGJ1ZmZlci4gSXQgYWxzbyBhZHZhbmNlcyB0aGUgc2Nhbm5pbmcgYnVmZmVyIGZvciBvbmVcbiAgICAgIGNoYXJhY3RlciBhbmQgcmV0dXJucyBbbGltIC0gMV0sIGluZGljYXRpbmcgdGhlIG5ldyBsaW1pdFxuICAgICAgZm9yIHRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgdG9rZW4uICopXG5cbiAgdmFsIHNraXBfY2hhciA6IGludCAtPiBzY2FuYnVmIC0+IGludDs7XG4gICgqIFtTY2FubmluZy5za2lwX2NoYXIgbGltIGliXSBpZ25vcmVzIHRoZSBjdXJyZW50IGNoYXJhY3Rlci4gKilcblxuICB2YWwgaWdub3JlX2NoYXIgOiBpbnQgLT4gc2NhbmJ1ZiAtPiBpbnQ7O1xuICAoKiBbU2Nhbm5pbmcuaWdub3JlX2NoYXIgaWIgbGltXSBpZ25vcmVzIHRoZSBjdXJyZW50IGNoYXJhY3RlciBhbmRcbiAgICAgZGVjcmVtZW50cyB0aGUgbGltaXQuICopXG5cbiAgdmFsIHRva2VuIDogc2NhbmJ1ZiAtPiBzdHJpbmc7O1xuICAoKiBbU2Nhbm5pbmcudG9rZW4gaWJdIHJldHVybnMgdGhlIHN0cmluZyBzdG9yZWQgaW50byB0aGUgdG9rZW5cbiAgICAgIGJ1ZmZlciBvZiB0aGUgc2Nhbm5pbmcgYnVmZmVyOiBpdCByZXR1cm5zIHRoZSB0b2tlbiBtYXRjaGVkIGJ5IHRoZVxuICAgICAgZm9ybWF0LiAqKVxuXG4gIHZhbCByZXNldF90b2tlbiA6IHNjYW5idWYgLT4gdW5pdDs7XG4gICgqIFtTY2FubmluZy5yZXNldF90b2tlbiBpYl0gcmVzZXRzIHRoZSB0b2tlbiBidWZmZXIgb2ZcbiAgICAgIHRoZSBnaXZlbiBzY2FubmluZyBidWZmZXIuICopXG5cbiAgdmFsIGNoYXJfY291bnQgOiBzY2FuYnVmIC0+IGludDs7XG4gICgqIFtTY2FubmluZy5jaGFyX2NvdW50IGliXSByZXR1cm5zIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVyc1xuICAgICAgcmVhZCBzbyBmYXIgZnJvbSB0aGUgZ2l2ZW4gYnVmZmVyLiAqKVxuXG4gIHZhbCBsaW5lX2NvdW50IDogc2NhbmJ1ZiAtPiBpbnQ7O1xuICAoKiBbU2Nhbm5pbmcubGluZV9jb3VudCBpYl0gcmV0dXJucyB0aGUgbnVtYmVyIG9mIG5ldyBsaW5lXG4gICAgICBjaGFyYWN0ZXJzIHJlYWQgc28gZmFyIGZyb20gdGhlIGdpdmVuIGJ1ZmZlci4gKilcblxuICB2YWwgdG9rZW5fY291bnQgOiBzY2FuYnVmIC0+IGludDs7XG4gICgqIFtTY2FubmluZy50b2tlbl9jb3VudCBpYl0gcmV0dXJucyB0aGUgbnVtYmVyIG9mIHRva2VucyByZWFkXG4gICAgICBzbyBmYXIgZnJvbSBbaWJdLiAqKVxuXG4gIHZhbCBlb2YgOiBzY2FuYnVmIC0+IGJvb2w7O1xuICAoKiBbU2Nhbm5pbmcuZW9mIGliXSByZXR1cm5zIHRoZSBlbmQgb2YgaW5wdXQgY29uZGl0aW9uXG4gICAgICBvZiB0aGUgZ2l2ZW4gYnVmZmVyLiAqKVxuXG4gIHZhbCBlbmRfb2ZfaW5wdXQgOiBzY2FuYnVmIC0+IGJvb2w7O1xuICAoKiBbU2Nhbm5pbmcuZW5kX29mX2lucHV0IGliXSB0ZXN0cyB0aGUgZW5kIG9mIGlucHV0IGNvbmRpdGlvblxuICAgICAgb2YgdGhlIGdpdmVuIGJ1ZmZlciAoaWYgbm8gY2hhciBoYXMgZXZlciBiZWVuIHJlYWQsIGFuIGF0dGVtcHQgdG9cbiAgICAgIHJlYWQgb25lIGlzIHBlcmZvcm1lZCkuICopXG5cbiAgdmFsIGJlZ2lubmluZ19vZl9pbnB1dCA6IHNjYW5idWYgLT4gYm9vbDs7XG4gICgqIFtTY2FubmluZy5iZWdpbm5pbmdfb2ZfaW5wdXQgaWJdIHRlc3RzIHRoZSBiZWdpbm5pbmcgb2YgaW5wdXRcbiAgICAgIGNvbmRpdGlvbiBvZiB0aGUgZ2l2ZW4gYnVmZmVyLiAqKVxuXG4gIHZhbCBuYW1lX29mX2lucHV0IDogc2NhbmJ1ZiAtPiBzdHJpbmc7O1xuICAoKiBbU2Nhbm5pbmcubmFtZV9vZl9pbnB1dCBpYl0gcmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgY2hhcmFjdGVyXG4gICAgICBzb3VyY2UgZm9yIGlucHV0IGJ1ZmZlciBbaWJdLiAqKVxuXG4gIHZhbCBvcGVuX2luIDogZmlsZV9uYW1lIC0+IGluX2NoYW5uZWw7O1xuICB2YWwgb3Blbl9pbl9iaW4gOiBmaWxlX25hbWUgLT4gaW5fY2hhbm5lbDs7XG4gIHZhbCBmcm9tX2ZpbGUgOiBmaWxlX25hbWUgLT4gaW5fY2hhbm5lbDs7XG4gIHZhbCBmcm9tX2ZpbGVfYmluIDogZmlsZV9uYW1lIC0+IGluX2NoYW5uZWw7O1xuICB2YWwgZnJvbV9zdHJpbmcgOiBzdHJpbmcgLT4gaW5fY2hhbm5lbDs7XG4gIHZhbCBmcm9tX2Z1bmN0aW9uIDogKHVuaXQgLT4gY2hhcikgLT4gaW5fY2hhbm5lbDs7XG4gIHZhbCBmcm9tX2NoYW5uZWwgOiBQZXJ2YXNpdmVzLmluX2NoYW5uZWwgLT4gaW5fY2hhbm5lbDs7XG5cbiAgdmFsIGNsb3NlX2luIDogaW5fY2hhbm5lbCAtPiB1bml0OztcblxuZW5kXG47O1xuXG5tb2R1bGUgU2Nhbm5pbmcgOiBTQ0FOTklORyA9IHN0cnVjdFxuXG4gICgqIFRoZSBydW4tdGltZSBsaWJyYXJ5IGZvciBzY2FuZi4gKilcbiAgdHlwZSBpbl9jaGFubmVsX25hbWUgPVxuICAgIHwgRnJvbV9maWxlIG9mIHN0cmluZyAqIFBlcnZhc2l2ZXMuaW5fY2hhbm5lbFxuICAgIHwgRnJvbV9zdHJpbmdcbiAgICB8IEZyb21fZnVuY3Rpb25cbiAgICB8IEZyb21fY2hhbm5lbCBvZiBQZXJ2YXNpdmVzLmluX2NoYW5uZWxcbiAgOztcblxuICB0eXBlIGluX2NoYW5uZWwgPSB7XG4gICAgbXV0YWJsZSBlb2YgOiBib29sO1xuICAgIG11dGFibGUgY3VycmVudF9jaGFyIDogY2hhcjtcbiAgICBtdXRhYmxlIGN1cnJlbnRfY2hhcl9pc192YWxpZCA6IGJvb2w7XG4gICAgbXV0YWJsZSBjaGFyX2NvdW50IDogaW50O1xuICAgIG11dGFibGUgbGluZV9jb3VudCA6IGludDtcbiAgICBtdXRhYmxlIHRva2VuX2NvdW50IDogaW50O1xuICAgIG11dGFibGUgZ2V0X25leHRfY2hhciA6IHVuaXQgLT4gY2hhcjtcbiAgICB0b2tidWYgOiBCdWZmZXIudDtcbiAgICBpbnB1dF9uYW1lIDogaW5fY2hhbm5lbF9uYW1lO1xuICB9XG4gIDs7XG5cbiAgdHlwZSBzY2FuYnVmID0gaW5fY2hhbm5lbDs7XG5cbiAgdHlwZSBmaWxlX25hbWUgPSBzdHJpbmc7O1xuXG4gIGxldCBudWxsX2NoYXIgPSAnXFwwMDAnOztcblxuICAoKiBSZWFkcyBhIG5ldyBjaGFyYWN0ZXIgZnJvbSBpbnB1dCBidWZmZXIuICBOZXh0X2NoYXIgbmV2ZXIgZmFpbHMsXG4gICAgIGV2ZW4gaW4gY2FzZSBvZiBlbmQgb2YgaW5wdXQ6IGl0IHRoZW4gc2ltcGx5IHNldHMgdGhlIGVuZCBvZiBmaWxlXG4gICAgIGNvbmRpdGlvbi4gKilcbiAgbGV0IG5leHRfY2hhciBpYiA9XG4gICAgdHJ5XG4gICAgICBsZXQgYyA9IGliLmdldF9uZXh0X2NoYXIgKCkgaW5cbiAgICAgIGliLmN1cnJlbnRfY2hhciA8LSBjO1xuICAgICAgaWIuY3VycmVudF9jaGFyX2lzX3ZhbGlkIDwtIHRydWU7XG4gICAgICBpYi5jaGFyX2NvdW50IDwtIHN1Y2MgaWIuY2hhcl9jb3VudDtcbiAgICAgIGlmIGMgPSAnXFxuJyB0aGVuIGliLmxpbmVfY291bnQgPC0gc3VjYyBpYi5saW5lX2NvdW50O1xuICAgICAgYyB3aXRoXG4gICAgfCBFbmRfb2ZfZmlsZSAtPlxuICAgICAgbGV0IGMgPSBudWxsX2NoYXIgaW5cbiAgICAgIGliLmN1cnJlbnRfY2hhciA8LSBjO1xuICAgICAgaWIuY3VycmVudF9jaGFyX2lzX3ZhbGlkIDwtIGZhbHNlO1xuICAgICAgaWIuZW9mIDwtIHRydWU7XG4gICAgICBjXG4gIDs7XG5cbiAgbGV0IHBlZWtfY2hhciBpYiA9XG4gICAgaWYgaWIuY3VycmVudF9jaGFyX2lzX3ZhbGlkIHRoZW4gaWIuY3VycmVudF9jaGFyIGVsc2UgbmV4dF9jaGFyIGliOztcblxuICAoKiBSZXR1cm5zIGEgdmFsaWQgY3VycmVudCBjaGFyIGZvciB0aGUgaW5wdXQgYnVmZmVyLiBJbiBwYXJ0aWN1bGFyXG4gICAgIG5vIGlycmVsZXZhbnQgbnVsbCBjaGFyYWN0ZXIgKGFzIHNldCBieSBbbmV4dF9jaGFyXSBpbiBjYXNlIG9mIGVuZFxuICAgICBvZiBpbnB1dCkgaXMgcmV0dXJuZWQsIHNpbmNlIFtFbmRfb2ZfZmlsZV0gaXMgcmFpc2VkIHdoZW5cbiAgICAgW25leHRfY2hhcl0gc2V0cyB0aGUgZW5kIG9mIGZpbGUgY29uZGl0aW9uIHdoaWxlIHRyeWluZyB0byByZWFkIGFcbiAgICAgbmV3IGNoYXJhY3Rlci4gKilcbiAgbGV0IGNoZWNrZWRfcGVla19jaGFyIGliID1cbiAgICBsZXQgYyA9IHBlZWtfY2hhciBpYiBpblxuICAgIGlmIGliLmVvZiB0aGVuIHJhaXNlIEVuZF9vZl9maWxlO1xuICAgIGNcbiAgOztcblxuICBsZXQgZW5kX29mX2lucHV0IGliID1cbiAgICBpZ25vcmUgKHBlZWtfY2hhciBpYik7XG4gICAgaWIuZW9mXG4gIDs7XG5cbiAgbGV0IGVvZiBpYiA9IGliLmVvZjs7XG5cbiAgbGV0IGJlZ2lubmluZ19vZl9pbnB1dCBpYiA9IGliLmNoYXJfY291bnQgPSAwOztcbiAgbGV0IG5hbWVfb2ZfaW5wdXQgaWIgPVxuICAgIG1hdGNoIGliLmlucHV0X25hbWUgd2l0aFxuICAgIHwgRnJvbV9maWxlIChmbmFtZSwgX2ljKSAtPiBmbmFtZVxuICAgIHwgRnJvbV9zdHJpbmcgLT4gXCJ1bm5hbWVkIGNoYXJhY3RlciBzdHJpbmdcIlxuICAgIHwgRnJvbV9mdW5jdGlvbiAtPiBcInVubmFtZWQgZnVuY3Rpb25cIlxuICAgIHwgRnJvbV9jaGFubmVsIF9pYyAtPiBcInVubmFtZWQgcGVydmFzaXZlcyBpbnB1dCBjaGFubmVsXCJcbiAgOztcblxuICBsZXQgY2hhcl9jb3VudCBpYiA9XG4gICAgaWYgaWIuY3VycmVudF9jaGFyX2lzX3ZhbGlkIHRoZW4gaWIuY2hhcl9jb3VudCAtIDEgZWxzZSBpYi5jaGFyX2NvdW50XG4gIDs7XG4gIGxldCBsaW5lX2NvdW50IGliID0gaWIubGluZV9jb3VudDs7XG4gIGxldCByZXNldF90b2tlbiBpYiA9IEJ1ZmZlci5yZXNldCBpYi50b2tidWY7O1xuICBsZXQgaW52YWxpZGF0ZV9jdXJyZW50X2NoYXIgaWIgPSBpYi5jdXJyZW50X2NoYXJfaXNfdmFsaWQgPC0gZmFsc2U7O1xuXG4gIGxldCB0b2tlbiBpYiA9XG4gICAgbGV0IHRva2J1ZiA9IGliLnRva2J1ZiBpblxuICAgIGxldCB0b2sgPSBCdWZmZXIuY29udGVudHMgdG9rYnVmIGluXG4gICAgQnVmZmVyLmNsZWFyIHRva2J1ZjtcbiAgICBpYi50b2tlbl9jb3VudCA8LSBzdWNjIGliLnRva2VuX2NvdW50O1xuICAgIHRva1xuICA7O1xuXG4gIGxldCB0b2tlbl9jb3VudCBpYiA9IGliLnRva2VuX2NvdW50OztcblxuICBsZXQgc2tpcF9jaGFyIHdpZHRoIGliID1cbiAgICBpbnZhbGlkYXRlX2N1cnJlbnRfY2hhciBpYjtcbiAgICB3aWR0aFxuICA7O1xuXG4gIGxldCBpZ25vcmVfY2hhciB3aWR0aCBpYiA9IHNraXBfY2hhciAod2lkdGggLSAxKSBpYjs7XG5cbiAgbGV0IHN0b3JlX2NoYXIgd2lkdGggaWIgYyA9XG4gICAgQnVmZmVyLmFkZF9jaGFyIGliLnRva2J1ZiBjO1xuICAgIGlnbm9yZV9jaGFyIHdpZHRoIGliXG4gIDs7XG5cbiAgbGV0IGRlZmF1bHRfdG9rZW5fYnVmZmVyX3NpemUgPSAxMDI0OztcblxuICBsZXQgY3JlYXRlIGluYW1lIG5leHQgPSB7XG4gICAgZW9mID0gZmFsc2U7XG4gICAgY3VycmVudF9jaGFyID0gbnVsbF9jaGFyO1xuICAgIGN1cnJlbnRfY2hhcl9pc192YWxpZCA9IGZhbHNlO1xuICAgIGNoYXJfY291bnQgPSAwO1xuICAgIGxpbmVfY291bnQgPSAwO1xuICAgIHRva2VuX2NvdW50ID0gMDtcbiAgICBnZXRfbmV4dF9jaGFyID0gbmV4dDtcbiAgICB0b2tidWYgPSBCdWZmZXIuY3JlYXRlIGRlZmF1bHRfdG9rZW5fYnVmZmVyX3NpemU7XG4gICAgaW5wdXRfbmFtZSA9IGluYW1lO1xuICB9XG4gIDs7XG5cbiAgbGV0IGZyb21fc3RyaW5nIHMgPVxuICAgIGxldCBpID0gcmVmIDAgaW5cbiAgICBsZXQgbGVuID0gU3RyaW5nLmxlbmd0aCBzIGluXG4gICAgbGV0IG5leHQgKCkgPVxuICAgICAgaWYgIWkgPj0gbGVuIHRoZW4gcmFpc2UgRW5kX29mX2ZpbGUgZWxzZVxuICAgICAgbGV0IGMgPSBzLlshaV0gaW5cbiAgICAgIGluY3IgaTtcbiAgICAgIGMgaW5cbiAgICBjcmVhdGUgRnJvbV9zdHJpbmcgbmV4dFxuICA7O1xuXG4gIGxldCBmcm9tX2Z1bmN0aW9uID0gY3JlYXRlIEZyb21fZnVuY3Rpb247O1xuXG4gICgqIFNjYW5uaW5nIGZyb20gYW4gaW5wdXQgY2hhbm5lbC4gKilcblxuICAoKiBQb3NpdGlvbiBvZiB0aGUgcHJvYmxlbTpcblxuICAgICBXZSBjYW5ub3QgcHJldmVudCB0aGUgc2Nhbm5pbmcgbWVjaGFuaXNtIHRvIHVzZSBvbmUgbG9va2FoZWFkIGNoYXJhY3RlcixcbiAgICAgaWYgbmVlZGVkIGJ5IHRoZSBzZW1hbnRpY3Mgb2YgdGhlIGZvcm1hdCBzdHJpbmcgc3BlY2lmaWNhdGlvbnMgKGUuZy4gYVxuICAgICB0cmFpbGluZyAnc2tpcCBzcGFjZScgc3BlY2lmaWNhdGlvbiBpbiB0aGUgZm9ybWF0IHN0cmluZyk7IGluIHRoaXMgY2FzZSxcbiAgICAgdGhlIG1hbmRhdG9yeSBsb29rYWhlYWQgY2hhcmFjdGVyIGlzIGluZGVlZCByZWFkIGZyb20gdGhlIGlucHV0IGFuZCBub3RcbiAgICAgdXNlZCB0byByZXR1cm4gdGhlIHRva2VuIHJlYWQuIEl0IGlzIHRodXMgbWFuZGF0b3J5IHRvIGJlIGFibGUgdG8gc3RvcmVcbiAgICAgYW4gdW51c2VkIGxvb2thaGVhZCBjaGFyYWN0ZXIgc29tZXdoZXJlIHRvIGdldCBpdCBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAgIG9mIHRoZSBuZXh0IHNjYW4uXG5cbiAgICAgVG8gY2lyY3VtdmVudCB0aGlzIHByb2JsZW0sIGFsbCB0aGUgc2Nhbm5pbmcgZnVuY3Rpb25zIGdldCBhIGxvdyBsZXZlbFxuICAgICBpbnB1dCBidWZmZXIgYXJndW1lbnQgd2hlcmUgdGhleSBzdG9yZSB0aGUgbG9va2FoZWFkIGNoYXJhY3RlciB3aGVuXG4gICAgIG5lZWRlZDsgYWRkaXRpb25hbGx5LCB0aGUgaW5wdXQgYnVmZmVyIGlzIHRoZSBvbmx5IHNvdXJjZSBvZiBjaGFyYWN0ZXIgb2ZcbiAgICAgYSBzY2FubmVyLiBUaGUgW3NjYW5idWZdIGlucHV0IGJ1ZmZlcnMgYXJlIGRlZmluZWQgaW4gbW9kdWxlIHshU2Nhbm5pbmd9LlxuXG4gICAgIE5vdyB3ZSB1bmRlcnN0YW5kIHRoYXQgaXQgaXMgZXh0cmVtZWx5IGltcG9ydGFudCB0aGF0IHJlbGF0ZWQgc3VjY2Vzc2l2ZVxuICAgICBjYWxscyB0byBzY2FubmVycyBpbmRlZWQgcmVhZCBmcm9tIHRoZSBzYW1lIGlucHV0IGJ1ZmZlci4gSW4gZWZmZWN0LCBpZiBhXG4gICAgIHNjYW5uZXIgW3NjYW4xXSBpcyByZWFkaW5nIGZyb20gW2liMV0gYW5kIHN0b3JlcyBhbiB1bnVzZWQgbG9va2FoZWFkXG4gICAgIGNoYXJhY3RlciBbYzFdIGludG8gaXRzIGlucHV0IGJ1ZmZlciBbaWIxXSwgdGhlbiBhbm90aGVyIHNjYW5uZXIgW3NjYW4yXVxuICAgICBub3QgcmVhZGluZyBmcm9tIHRoZSBzYW1lIGJ1ZmZlciBbaWIxXSB3aWxsIG1pc3MgdGhlIGNoYXJhY3RlciBbY10sXG4gICAgIHNlZW1pbmdseSB2YW5pc2hlZCBpbiB0aGUgYWlyIGZyb20gdGhlIHBvaW50IG9mIHZpZXcgb2YgW3NjYW4yXS5cblxuICAgICBUaGlzIG1lY2hhbmlzbSB3b3JrcyBwZXJmZWN0bHkgdG8gcmVhZCBmcm9tIHN0cmluZ3MsIGZyb20gZmlsZXMsIGFuZCBmcm9tXG4gICAgIGZ1bmN0aW9ucywgc2luY2UgaW4gdGhvc2UgY2FzZXMsIGFsbG9jYXRpbmcgdHdvIGJ1ZmZlcnMgcmVhZGluZyBmcm9tIHRoZVxuICAgICBzYW1lIHNvdXJjZSBpcyB1bm5hdHVyYWwuXG5cbiAgICAgU3RpbGwsIHRoZXJlIGlzIGEgZGlmZmljdWx0eSBpbiB0aGUgY2FzZSBvZiBzY2FubmluZyBmcm9tIGFuIGlucHV0XG4gICAgIGNoYW5uZWwuIEluIGVmZmVjdCwgd2hlbiBzY2FubmluZyBmcm9tIGFuIGlucHV0IGNoYW5uZWwgW2ljXSwgdGhpcyBjaGFubmVsXG4gICAgIG1heSBub3QgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHdpdGhpbiB0aGlzIGxpYnJhcnkuIEhlbmNlLCBpdCBtYXkgYmVcbiAgICAgc2hhcmVkICh0d28gZnVuY3Rpb25zIG9mIHRoZSB1c2VyJ3MgcHJvZ3JhbSBtYXkgc3VjY2Vzc2l2ZWx5IHJlYWQgZnJvbVxuICAgICBbaWNdKS4gVGhpcyBpcyBoaWdobHkgZXJyb3IgcHJvbmUgc2luY2UsIG9uZSBvZiB0aGUgZnVuY3Rpb24gbWF5IHNlZWsgdGhlXG4gICAgIGlucHV0IGNoYW5uZWwsIHdoaWxlIHRoZSBvdGhlciBmdW5jdGlvbiBoYXMgc3RpbGwgYW4gdW51c2VkIGxvb2thaGVhZFxuICAgICBjaGFyYWN0ZXIgaW4gaXRzIGlucHV0IGJ1ZmZlci4gSW4gY29uY2x1c2lvbiwgeW91IHNob3VsZCBuZXZlciBtaXggZGlyZWN0XG4gICAgIGxvdyBsZXZlbCByZWFkaW5nIGFuZCBoaWdoIGxldmVsIHNjYW5uaW5nIGZyb20gdGhlIHNhbWUgaW5wdXQgY2hhbm5lbC5cblxuICAgICBUaGlzIHBoZW5vbWVub24gb2YgcmVhZGluZyBtZXNzIGlzIGV2ZW4gd29yc2Ugd2hlbiBvbmUgZGVmaW5lcyBtb3JlIHRoYW5cbiAgICAgb25lIHNjYW5uaW5nIGJ1ZmZlciByZWFkaW5nIGZyb20gdGhlIHNhbWUgaW5wdXQgY2hhbm5lbFxuICAgICBbaWNdLiBVbmZvcnR1bmF0ZWx5LCB3ZSBoYXZlIG5vIHNpbXBsZSB3YXkgdG8gZ2V0IHJpZCBvZiB0aGlzIHByb2JsZW1cbiAgICAgKHVubGVzcyB0aGUgYmFzaWMgaW5wdXQgY2hhbm5lbCBBUEkgaXMgbW9kaWZpZWQgdG8gb2ZmZXIgYSAnY29uc2lkZXIgdGhpc1xuICAgICBjaGFyIGFzIHVucmVhZCcgcHJvY2VkdXJlIHRvIGtlZXAgYmFjayB0aGUgdW51c2VkIGxvb2thaGVhZCBjaGFyYWN0ZXIgYXNcbiAgICAgYXZhaWxhYmxlIGluIHRoZSBpbnB1dCBjaGFubmVsIGZvciBmdXJ0aGVyIHJlYWRpbmcpLlxuXG4gICAgIFRvIHByZXZlbnQgc29tZSBvZiB0aGUgY29uZnVzaW9uIHRoZSBzY2FubmluZyBidWZmZXIgYWxsb2NhdGlvbiBmdW5jdGlvblxuICAgICBpcyBhIG1lbW8gZnVuY3Rpb24gdGhhdCBuZXZlciBhbGxvY2F0ZXMgdHdvIGRpZmZlcmVudCBzY2FubmluZyBidWZmZXJzIGZvclxuICAgICB0aGUgc2FtZSBpbnB1dCBjaGFubmVsLiBUaGlzIHdheSwgdGhlIHVzZXIgY2FuIG5haXZlbHkgcGVyZm9ybSBzdWNjZXNzaXZlXG4gICAgIGNhbGwgdG8gW2ZzY2FuZl0gYmVsb3csIHdpdGhvdXQgYWxsb2NhdGluZyBhIG5ldyBzY2FubmluZyBidWZmZXIgYXQgZWFjaFxuICAgICBpbnZvY2F0aW9uIGFuZCBoZW5jZSBwcmVzZXJ2aW5nIHRoZSBleHBlY3RlZCBzZW1hbnRpY3MuXG5cbiAgICAgQXMgbWVudGlvbmVkIGFib3ZlLCBhIG1vcmUgYW1iaXRpb3VzIGZpeCBjb3VsZCBiZSB0byBjaGFuZ2UgdGhlIGlucHV0XG4gICAgIGNoYW5uZWwgQVBJIHRvIGFsbG93IGFyYml0cmFyeSBtaXhpbmcgb2YgZGlyZWN0IGFuZCBmb3JtYXR0ZWQgcmVhZGluZyBmcm9tXG4gICAgIGlucHV0IGNoYW5uZWxzLiAqKVxuXG4gICgqIFBlcmZvcm0gYnVmZmVyaXplZCBpbnB1dCB0byBpbXByb3ZlIGVmZmljaWVuY3kuICopXG4gIGxldCBmaWxlX2J1ZmZlcl9zaXplID0gcmVmIDEwMjQ7O1xuXG4gICgqIFRoZSBzY2FubmVyIGNsb3NlcyB0aGUgaW5wdXQgY2hhbm5lbCBhdCBlbmQgb2YgaW5wdXQuICopXG4gIGxldCBzY2FuX2Nsb3NlX2F0X2VuZCBpYyA9IGNsb3NlX2luIGljOyByYWlzZSBFbmRfb2ZfZmlsZTs7XG5cbiAgKCogVGhlIHNjYW5uZXIgZG9lcyBub3QgY2xvc2UgdGhlIGlucHV0IGNoYW5uZWwgYXQgZW5kIG9mIGlucHV0OlxuICAgICBpdCBqdXN0IHJhaXNlcyBbRW5kX29mX2ZpbGVdLiAqKVxuICBsZXQgc2Nhbl9yYWlzZV9hdF9lbmQgX2ljID0gcmFpc2UgRW5kX29mX2ZpbGU7O1xuXG4gIGxldCBmcm9tX2ljIHNjYW5fY2xvc2VfaWMgaW5hbWUgaWMgPVxuICAgIGxldCBsZW4gPSAhZmlsZV9idWZmZXJfc2l6ZSBpblxuICAgIGxldCBidWYgPSBCeXRlcy5jcmVhdGUgbGVuIGluXG4gICAgbGV0IGkgPSByZWYgMCBpblxuICAgIGxldCBsaW0gPSByZWYgMCBpblxuICAgIGxldCBlb2YgPSByZWYgZmFsc2UgaW5cbiAgICBsZXQgbmV4dCAoKSA9XG4gICAgICBpZiAhaSA8ICFsaW0gdGhlbiBiZWdpbiBsZXQgYyA9IEJ5dGVzLmdldCBidWYgIWkgaW4gaW5jciBpOyBjIGVuZCBlbHNlXG4gICAgICBpZiAhZW9mIHRoZW4gcmFpc2UgRW5kX29mX2ZpbGUgZWxzZSBiZWdpblxuICAgICAgICBsaW0gOj0gaW5wdXQgaWMgYnVmIDAgbGVuO1xuICAgICAgICBpZiAhbGltID0gMCB0aGVuIGJlZ2luIGVvZiA6PSB0cnVlOyBzY2FuX2Nsb3NlX2ljIGljIGVuZCBlbHNlIGJlZ2luXG4gICAgICAgICAgaSA6PSAxO1xuICAgICAgICAgIEJ5dGVzLmdldCBidWYgMFxuICAgICAgICBlbmRcbiAgICAgIGVuZCBpblxuICAgIGNyZWF0ZSBpbmFtZSBuZXh0XG4gIDs7XG5cbiAgbGV0IGZyb21faWNfY2xvc2VfYXRfZW5kID0gZnJvbV9pYyBzY2FuX2Nsb3NlX2F0X2VuZDs7XG5cbiAgKCogVGhlIHNjYW5uaW5nIGJ1ZmZlciByZWFkaW5nIGZyb20gW1BlcnZhc2l2ZXMuc3RkaW5dLlxuICAgICBPbmUgY291bGQgdHJ5IHRvIGRlZmluZSBbc3RkaWJdIGFzIGEgc2Nhbm5pbmcgYnVmZmVyIHJlYWRpbmcgYSBjaGFyYWN0ZXJcbiAgICAgYXQgYSB0aW1lIChubyBidWZmZXJpemF0aW9uIGF0IGFsbCksIGJ1dCB1bmZvcnR1bmF0ZWx5IHRoZSB0b3AtbGV2ZWxcbiAgICAgaW50ZXJhY3Rpb24gd291bGQgYmUgd3JvbmcuIFRoaXMgaXMgZHVlIHRvIHNvbWUga2luZCBvZlxuICAgICAncmFjZSBjb25kaXRpb24nIHdoZW4gcmVhZGluZyBmcm9tIFtQZXJ2YXNpdmVzLnN0ZGluXSxcbiAgICAgc2luY2UgdGhlIGludGVyYWN0aXZlIGNvbXBpbGVyIGFuZCBbc2NhbmZdIHdpbGwgc2ltdWx0YW5lb3VzbHkgcmVhZCB0aGVcbiAgICAgbWF0ZXJpYWwgdGhleSBuZWVkIGZyb20gW1BlcnZhc2l2ZXMuc3RkaW5dOyB0aGVuLCBjb25mdXNpb24gd2lsbCByZXN1bHRcbiAgICAgZnJvbSB3aGF0IHNob3VsZCBiZSByZWFkIGJ5IHRoZSB0b3AtbGV2ZWwgYW5kIHdoYXQgc2hvdWxkIGJlIHJlYWRcbiAgICAgYnkgW3NjYW5mXS5cbiAgICAgVGhpcyBpcyBldmVuIG1vcmUgY29tcGxpY2F0ZWQgYnkgdGhlIG9uZSBjaGFyYWN0ZXIgbG9va2FoZWFkIHRoYXQgW3NjYW5mXVxuICAgICBpcyBzb21ldGltZXMgb2JsaWdlZCB0byBtYWludGFpbjogdGhlIGxvb2thaGVhZCBjaGFyYWN0ZXIgd2lsbCBiZVxuICAgICBhdmFpbGFibGUgZm9yIHRoZSBuZXh0IChbc2NhbmZdKSBlbnRyeSwgc2VlbWluZ2x5IGNvbWluZyBmcm9tIG5vd2hlcmUuXG4gICAgIEFsc28gbm8gW0VuZF9vZl9maWxlXSBpcyByYWlzZWQgd2hlbiByZWFkaW5nIGZyb20gc3RkaW46IGlmIG5vdCBlbm91Z2hcbiAgICAgY2hhcmFjdGVycyBoYXZlIGJlZW4gcmVhZCwgd2Ugc2ltcGx5IGFzayB0byByZWFkIG1vcmUuICopXG4gIGxldCBzdGRpbiA9XG4gICAgZnJvbV9pYyBzY2FuX3JhaXNlX2F0X2VuZFxuICAgICAgKEZyb21fZmlsZSAoXCItXCIsIFBlcnZhc2l2ZXMuc3RkaW4pKSBQZXJ2YXNpdmVzLnN0ZGluXG4gIDs7XG5cbiAgbGV0IHN0ZGliID0gc3RkaW47O1xuXG4gIGxldCBvcGVuX2luIGZuYW1lID1cbiAgICBtYXRjaCBmbmFtZSB3aXRoXG4gICAgfCBcIi1cIiAtPiBzdGRpblxuICAgIHwgZm5hbWUgLT5cbiAgICAgIGxldCBpYyA9IG9wZW5faW4gZm5hbWUgaW5cbiAgICAgIGZyb21faWNfY2xvc2VfYXRfZW5kIChGcm9tX2ZpbGUgKGZuYW1lLCBpYykpIGljXG4gIDs7XG5cbiAgbGV0IG9wZW5faW5fYmluIGZuYW1lID1cbiAgICBtYXRjaCBmbmFtZSB3aXRoXG4gICAgfCBcIi1cIiAtPiBzdGRpblxuICAgIHwgZm5hbWUgLT5cbiAgICAgIGxldCBpYyA9IG9wZW5faW5fYmluIGZuYW1lIGluXG4gICAgICBmcm9tX2ljX2Nsb3NlX2F0X2VuZCAoRnJvbV9maWxlIChmbmFtZSwgaWMpKSBpY1xuICA7O1xuXG4gIGxldCBmcm9tX2ZpbGUgPSBvcGVuX2luOztcbiAgbGV0IGZyb21fZmlsZV9iaW4gPSBvcGVuX2luX2Jpbjs7XG5cbiAgbGV0IG1lbW9fZnJvbV9pYyA9XG4gICAgbGV0IG1lbW8gPSByZWYgW10gaW5cbiAgICAoZnVuIHNjYW5fY2xvc2VfaWMgaWMgLT5cbiAgICAgdHJ5IExpc3QuYXNzcSBpYyAhbWVtbyB3aXRoXG4gICAgIHwgTm90X2ZvdW5kIC0+XG4gICAgICAgbGV0IGliID0gZnJvbV9pYyBzY2FuX2Nsb3NlX2ljIChGcm9tX2NoYW5uZWwgaWMpIGljIGluXG4gICAgICAgbWVtbyA6PSAoaWMsIGliKSA6OiAhbWVtbztcbiAgICAgICBpYilcbiAgOztcblxuICBsZXQgZnJvbV9jaGFubmVsID0gbWVtb19mcm9tX2ljIHNjYW5fcmFpc2VfYXRfZW5kOztcblxuICBsZXQgY2xvc2VfaW4gaWIgPVxuICAgIG1hdGNoIGliLmlucHV0X25hbWUgd2l0aFxuICAgIHwgRnJvbV9maWxlIChfZm5hbWUsIGljKSAtPiBQZXJ2YXNpdmVzLmNsb3NlX2luIGljXG4gICAgfCBGcm9tX3N0cmluZyB8IEZyb21fZnVuY3Rpb24gLT4gKClcbiAgICB8IEZyb21fY2hhbm5lbCBpYyAtPiBQZXJ2YXNpdmVzLmNsb3NlX2luIGljXG4gIDs7XG5cbmVuZFxuOztcblxuKCogRm9ybWF0dGVkIGlucHV0IGZ1bmN0aW9ucy4gKilcblxudHlwZSAoJ2EsICdiLCAnYywgJ2QpIHNjYW5uZXIgPVxuICAgICAoJ2EsIFNjYW5uaW5nLmluX2NoYW5uZWwsICdiLCAnYywgJ2EgLT4gJ2QsICdkKSBmb3JtYXQ2IC0+ICdjXG5cbigqIFJlcG9ydGluZyBlcnJvcnMuICopXG5leGNlcHRpb24gU2Nhbl9mYWlsdXJlIG9mIHN0cmluZzs7XG5cbmxldCBiYWRfaW5wdXQgcyA9IHJhaXNlIChTY2FuX2ZhaWx1cmUgcyk7O1xuXG5sZXQgYmFkX2lucHV0X2VzY2FwZSBjID1cbiAgYmFkX2lucHV0IChQcmludGYuc3ByaW50ZiBcImlsbGVnYWwgZXNjYXBlIGNoYXJhY3RlciAlQ1wiIGMpXG47O1xuXG5sZXQgYmFkX3Rva2VuX2xlbmd0aCBtZXNzYWdlID1cbiAgYmFkX2lucHV0XG4gICAgKFByaW50Zi5zcHJpbnRmXG4gICAgICAgXCJzY2FubmluZyBvZiAlcyBmYWlsZWQ6IFxcXG4gICAgICAgIHRoZSBzcGVjaWZpZWQgbGVuZ3RoIHdhcyB0b28gc2hvcnQgZm9yIHRva2VuXCIgbWVzc2FnZSlcbjs7XG5cbmxldCBiYWRfZW5kX29mX2lucHV0IG1lc3NhZ2UgPVxuICBiYWRfaW5wdXRcbiAgICAoUHJpbnRmLnNwcmludGZcbiAgICAgICBcInNjYW5uaW5nIG9mICVzIGZhaWxlZDogXFxcbiAgICAgICAgcHJlbWF0dXJlIGVuZCBvZiBmaWxlIG9jY3VycmVkIGJlZm9yZSBlbmQgb2YgdG9rZW5cIiBtZXNzYWdlKVxuXG5sZXQgYmFkX2Zsb2F0ICgpID1cbiAgYmFkX2lucHV0IFwibm8gZG90IG9yIGV4cG9uZW50IHBhcnQgZm91bmQgaW4gZmxvYXQgdG9rZW5cIlxuOztcblxubGV0IGNoYXJhY3Rlcl9taXNtYXRjaF9lcnIgYyBjaSA9XG4gIFByaW50Zi5zcHJpbnRmIFwibG9va2luZyBmb3IgJUMsIGZvdW5kICVDXCIgYyBjaVxuOztcblxubGV0IGNoYXJhY3Rlcl9taXNtYXRjaCBjIGNpID1cbiAgYmFkX2lucHV0IChjaGFyYWN0ZXJfbWlzbWF0Y2hfZXJyIGMgY2kpXG5cbmxldCByZWMgc2tpcF93aGl0ZXMgaWIgPVxuICBsZXQgYyA9IFNjYW5uaW5nLnBlZWtfY2hhciBpYiBpblxuICBpZiBub3QgKFNjYW5uaW5nLmVvZiBpYikgdGhlbiBiZWdpblxuICAgIG1hdGNoIGMgd2l0aFxuICAgIHwgJyAnIHwgJ1xcdCcgfCAnXFxuJyB8ICdcXHInIC0+XG4gICAgICBTY2FubmluZy5pbnZhbGlkYXRlX2N1cnJlbnRfY2hhciBpYjsgc2tpcF93aGl0ZXMgaWJcbiAgICB8IF8gLT4gKClcbiAgZW5kXG5cbigqIENoZWNraW5nIHRoYXQgW2NdIGlzIGluZGVlZCBpbiB0aGUgaW5wdXQsIHRoZW4gc2tpcHMgaXQuXG4gICBJbiB0aGlzIGNhc2UsIHRoZSBjaGFyYWN0ZXIgW2NdIGhhcyBiZWVuIGV4cGxpY2l0bHkgc3BlY2lmaWVkIGluIHRoZVxuICAgZm9ybWF0IGFzIGJlaW5nIG1hbmRhdG9yeSBpbiB0aGUgaW5wdXQ7IGhlbmNlIHdlIHNob3VsZCBmYWlsIHdpdGhcbiAgIEVuZF9vZl9maWxlIGluIGNhc2Ugb2YgZW5kX29mX2lucHV0LiAoUmVtZW1iZXIgdGhhdCBTY2FuX2ZhaWx1cmUgaXMgcmFpc2VkXG4gICBvbmx5IHdoZW4gKHdlIGNhbiBwcm92ZSBieSBldmlkZW5jZSkgdGhhdCB0aGUgaW5wdXQgZG9lcyBub3QgbWF0Y2ggdGhlXG4gICBmb3JtYXQgc3RyaW5nIGdpdmVuLiBXZSBtdXN0IHRodXMgZGlmZmVyZW50aWF0ZSBFbmRfb2ZfZmlsZSBhcyBhbiBlcnJvclxuICAgZHVlIHRvIGxhY2sgb2YgaW5wdXQsIGFuZCBTY2FuX2ZhaWx1cmUgd2hpY2ggaXMgZHVlIHRvIHByb3ZhYmx5IHdyb25nXG4gICBpbnB1dC4gSSBhbSBub3Qgc3VyZSB0aGlzIGlzIHdvcnRoIHRoZSBidXJkZW46IGl0IGlzIGNvbXBsZXggYW5kIHNvbWVob3dcbiAgIHN1YmxpbWluYWw7IHNob3VsZCBiZSBjbGVhcmVyIHRvIGZhaWwgd2l0aCBTY2FuX2ZhaWx1cmUgXCJOb3QgZW5vdWdoIGlucHV0XG4gICB0byBjb21wbGV0ZSBzY2FubmluZ1wiISlcblxuICAgVGhhdCdzIHdoeSwgd2FpdGluZyBmb3IgYSBiZXR0ZXIgc29sdXRpb24sIHdlIHVzZSBjaGVja2VkX3BlZWtfY2hhciBoZXJlLlxuICAgV2UgYXJlIGFsc28gY2FyZWZ1bCB0byB0cmVhdCBcIlxcclxcblwiIGluIHRoZSBpbnB1dCBhcyBhbiBlbmQgb2YgbGluZSBtYXJrZXI6XG4gICBpdCBhbHdheXMgbWF0Y2hlcyBhICdcXG4nIHNwZWNpZmljYXRpb24gaW4gdGhlIGlucHV0IGZvcm1hdCBzdHJpbmcuICopXG5sZXQgcmVjIGNoZWNrX2NoYXIgaWIgYyA9XG4gIGlmIGMgPSAnICcgdGhlbiBza2lwX3doaXRlcyBpYiBlbHNlXG4gICAgbGV0IGNpID0gU2Nhbm5pbmcuY2hlY2tlZF9wZWVrX2NoYXIgaWIgaW5cbiAgICBpZiBjaSA9IGMgdGhlbiBTY2FubmluZy5pbnZhbGlkYXRlX2N1cnJlbnRfY2hhciBpYiBlbHNlXG4gICAgICBtYXRjaCBjaSB3aXRoXG4gICAgICB8ICdcXHInIHdoZW4gYyA9ICdcXG4nIC0+XG4gICAgICAgIFNjYW5uaW5nLmludmFsaWRhdGVfY3VycmVudF9jaGFyIGliOyBjaGVja19jaGFyIGliICdcXG4nXG4gICAgICB8IF8gLT4gY2hhcmFjdGVyX21pc21hdGNoIGMgY2lcblxuKCogRXh0cmFjdGluZyB0b2tlbnMgZnJvbSB0aGUgb3V0cHV0IHRva2VuIGJ1ZmZlci4gKilcblxubGV0IHRva2VuX2NoYXIgaWIgPSAoU2Nhbm5pbmcudG9rZW4gaWIpLlswXTs7XG5cbmxldCB0b2tlbl9zdHJpbmcgPSBTY2FubmluZy50b2tlbjs7XG5cbmxldCB0b2tlbl9ib29sIGliID1cbiAgbWF0Y2ggU2Nhbm5pbmcudG9rZW4gaWIgd2l0aFxuICB8IFwidHJ1ZVwiIC0+IHRydWVcbiAgfCBcImZhbHNlXCIgLT4gZmFsc2VcbiAgfCBzIC0+IGJhZF9pbnB1dCAoUHJpbnRmLnNwcmludGYgXCJpbnZhbGlkIGJvb2xlYW4gJVNcIiBzKVxuOztcblxuKCogRXh0cmFjdCBhbiBpbnRlZ2VyIGxpdGVyYWwgdG9rZW4uXG4gICBTaW5jZSB0aGUgZnVuY3Rpb25zIFBlcnZhc2l2ZXMuKmludCpfb2Zfc3RyaW5nIGRvIG5vdCBhY2NlcHQgYSBsZWFkaW5nICssXG4gICB3ZSBza2lwIGl0IGlmIG5lY2Vzc2FyeS4gKilcbmxldCB0b2tlbl9pbnRfbGl0ZXJhbCBjb252IGliID1cbiAgbGV0IHRvayA9XG4gICAgbWF0Y2ggY29udiB3aXRoXG4gICAgfCAnZCcgfCAnaScgfCAndScgLT4gU2Nhbm5pbmcudG9rZW4gaWJcbiAgICB8ICdvJyAtPiBcIjBvXCIgXiBTY2FubmluZy50b2tlbiBpYlxuICAgIHwgJ3gnIHwgJ1gnIC0+IFwiMHhcIiBeIFNjYW5uaW5nLnRva2VuIGliXG4gICAgfCAnYicgLT4gXCIwYlwiIF4gU2Nhbm5pbmcudG9rZW4gaWJcbiAgICB8IF8gLT4gYXNzZXJ0IGZhbHNlIGluXG4gIGxldCBsID0gU3RyaW5nLmxlbmd0aCB0b2sgaW5cbiAgaWYgbCA9IDAgfHwgdG9rLlswXSA8PiAnKycgdGhlbiB0b2sgZWxzZSBTdHJpbmcuc3ViIHRvayAxIChsIC0gMSlcbjs7XG5cbigqIEFsbCB0aGUgZnVuY3Rpb25zIHRoYXQgY29udmVydCBhIHN0cmluZyB0byBhIG51bWJlciByYWlzZSB0aGUgZXhjZXB0aW9uXG4gICBGYWlsdXJlIHdoZW4gdGhlIGNvbnZlcnNpb24gaXMgbm90IHBvc3NpYmxlLlxuICAgVGhpcyBleGNlcHRpb24gaXMgdGhlbiB0cmFwcGVkIGluIFtrc2NhbmZdLiAqKVxubGV0IHRva2VuX2ludCBjb252IGliID0gaW50X29mX3N0cmluZyAodG9rZW5faW50X2xpdGVyYWwgY29udiBpYik7O1xuXG5sZXQgdG9rZW5fZmxvYXQgaWIgPSBmbG9hdF9vZl9zdHJpbmcgKFNjYW5uaW5nLnRva2VuIGliKTs7XG5cbigqIFRvIHNjYW4gbmF0aXZlIGludHMsIGludDMyIGFuZCBpbnQ2NCBpbnRlZ2Vycy5cbiAgIFdlIGNhbm5vdCBhY2Nlc3MgdG8gY29udmVyc2lvbnMgdG8vZnJvbSBzdHJpbmdzIGZvciB0aG9zZSB0eXBlcyxcbiAgIE5hdGl2ZWludC5vZl9zdHJpbmcsIEludDMyLm9mX3N0cmluZywgYW5kIEludDY0Lm9mX3N0cmluZyxcbiAgIHNpbmNlIHRob3NlIG1vZHVsZXMgYXJlIG5vdCBhdmFpbGFibGUgdG8gW1NjYW5mXS5cbiAgIEhvd2V2ZXIsIHdlIGNhbiBiaW5kIGFuZCB1c2UgdGhlIGNvcnJlc3BvbmRpbmcgcHJpbWl0aXZlcyB0aGF0IGFyZVxuICAgYXZhaWxhYmxlIGluIHRoZSBydW50aW1lLiAqKVxuZXh0ZXJuYWwgbmF0aXZlaW50X29mX3N0cmluZyA6IHN0cmluZyAtPiBuYXRpdmVpbnRcbiAgPSBcImNhbWxfbmF0aXZlaW50X29mX3N0cmluZ1wiXG47O1xuZXh0ZXJuYWwgaW50MzJfb2Zfc3RyaW5nIDogc3RyaW5nIC0+IGludDMyXG4gID0gXCJjYW1sX2ludDMyX29mX3N0cmluZ1wiXG47O1xuZXh0ZXJuYWwgaW50NjRfb2Zfc3RyaW5nIDogc3RyaW5nIC0+IGludDY0XG4gID0gXCJjYW1sX2ludDY0X29mX3N0cmluZ1wiXG47O1xuXG5sZXQgdG9rZW5fbmF0aXZlaW50IGNvbnYgaWIgPSBuYXRpdmVpbnRfb2Zfc3RyaW5nICh0b2tlbl9pbnRfbGl0ZXJhbCBjb252IGliKTs7XG5sZXQgdG9rZW5faW50MzIgY29udiBpYiA9IGludDMyX29mX3N0cmluZyAodG9rZW5faW50X2xpdGVyYWwgY29udiBpYik7O1xubGV0IHRva2VuX2ludDY0IGNvbnYgaWIgPSBpbnQ2NF9vZl9zdHJpbmcgKHRva2VuX2ludF9saXRlcmFsIGNvbnYgaWIpOztcblxuKCogU2Nhbm5pbmcgbnVtYmVycy4gKilcblxuKCogRGlnaXRzIHNjYW5uaW5nIGZ1bmN0aW9ucyBzdXBwb3NlIHRoYXQgb25lIGNoYXJhY3RlciBoYXMgYmVlbiBjaGVja2VkIGFuZFxuICAgaXMgYXZhaWxhYmxlLCBzaW5jZSB0aGV5IHJldHVybiBhdCBlbmQgb2YgZmlsZSB3aXRoIHRoZSBjdXJyZW50bHkgZm91bmRcbiAgIHRva2VuIHNlbGVjdGVkLlxuXG4gICBQdXQgaXQgaW4gYW5vdGhlciB3YXksIHRoZSBkaWdpdHMgc2Nhbm5pbmcgZnVuY3Rpb25zIHNjYW4gZm9yIGEgcG9zc2libHlcbiAgIGVtcHR5IHNlcXVlbmNlIG9mIGRpZ2l0cywgKGhlbmNlLCBhIHN1Y2Nlc3NmdWwgc2Nhbm5pbmcgZnJvbSBvbmUgb2YgdGhvc2VcbiAgIGZ1bmN0aW9ucyBkb2VzIG5vdCBpbXBseSB0aGF0IHRoZSB0b2tlbiBpcyBhIHdlbGwtZm9ybWVkIG51bWJlcjogdG8gZ2V0IGFcbiAgIHRydWUgbnVtYmVyLCBpdCBpcyBtYW5kYXRvcnkgdG8gY2hlY2sgdGhhdCBhdCBsZWFzdCBvbmUgdmFsaWQgZGlnaXQgaXNcbiAgIGF2YWlsYWJsZSBiZWZvcmUgY2FsbGluZyBvbmUgb2YgdGhlIGRpZ2l0IHNjYW5uaW5nIGZ1bmN0aW9ucykuICopXG5cbigqIFRoZSBkZWNpbWFsIGNhc2UgaXMgdHJlYXRlZCBlc3BlY2lhbGx5IGZvciBvcHRpbWl6YXRpb24gcHVycG9zZXMuICopXG5sZXQgcmVjIHNjYW5fZGVjaW1hbF9kaWdpdHMgd2lkdGggaWIgPVxuICBpZiB3aWR0aCA9IDAgdGhlbiB3aWR0aCBlbHNlXG4gIGxldCBjID0gU2Nhbm5pbmcucGVla19jaGFyIGliIGluXG4gIGlmIFNjYW5uaW5nLmVvZiBpYiB0aGVuIHdpZHRoIGVsc2VcbiAgbWF0Y2ggYyB3aXRoXG4gIHwgJzAnIC4uICc5JyBhcyBjIC0+XG4gICAgbGV0IHdpZHRoID0gU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjIGluXG4gICAgc2Nhbl9kZWNpbWFsX2RpZ2l0cyB3aWR0aCBpYlxuICB8ICdfJyAtPlxuICAgIGxldCB3aWR0aCA9IFNjYW5uaW5nLmlnbm9yZV9jaGFyIHdpZHRoIGliIGluXG4gICAgc2Nhbl9kZWNpbWFsX2RpZ2l0cyB3aWR0aCBpYlxuICB8IF8gLT4gd2lkdGhcbjs7XG5cbmxldCBzY2FuX2RlY2ltYWxfZGlnaXRzX3BsdXMgd2lkdGggaWIgPVxuICBpZiB3aWR0aCA9IDAgdGhlbiBiYWRfdG9rZW5fbGVuZ3RoIFwiZGVjaW1hbCBkaWdpdHNcIiBlbHNlXG4gIGxldCBjID0gU2Nhbm5pbmcuY2hlY2tlZF9wZWVrX2NoYXIgaWIgaW5cbiAgbWF0Y2ggYyB3aXRoXG4gIHwgJzAnIC4uICc5JyAtPlxuICAgIGxldCB3aWR0aCA9IFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgYyBpblxuICAgIHNjYW5fZGVjaW1hbF9kaWdpdHMgd2lkdGggaWJcbiAgfCBjIC0+XG4gICAgYmFkX2lucHV0IChQcmludGYuc3ByaW50ZiBcImNoYXJhY3RlciAlQyBpcyBub3QgYSBkZWNpbWFsIGRpZ2l0XCIgYylcbjs7XG5cbmxldCBzY2FuX2RpZ2l0c19wbHVzIGJhc2lzIGRpZ2l0cCB3aWR0aCBpYiA9XG4gICgqIFRvIHNjYW4gbnVtYmVycyBmcm9tIG90aGVyIGJhc2VzLCB3ZSB1c2UgYSBwcmVkaWNhdGUgYXJndW1lbnQgdG9cbiAgICAgc2Nhbl9kaWdpdHMuICopXG4gIGxldCByZWMgc2Nhbl9kaWdpdHMgd2lkdGggPVxuICAgIGlmIHdpZHRoID0gMCB0aGVuIHdpZHRoIGVsc2VcbiAgICBsZXQgYyA9IFNjYW5uaW5nLnBlZWtfY2hhciBpYiBpblxuICAgIGlmIFNjYW5uaW5nLmVvZiBpYiB0aGVuIHdpZHRoIGVsc2VcbiAgICBtYXRjaCBjIHdpdGhcbiAgICB8IGMgd2hlbiBkaWdpdHAgYyAtPlxuICAgICAgbGV0IHdpZHRoID0gU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjIGluXG4gICAgICBzY2FuX2RpZ2l0cyB3aWR0aFxuICAgIHwgJ18nIC0+XG4gICAgICBsZXQgd2lkdGggPSBTY2FubmluZy5pZ25vcmVfY2hhciB3aWR0aCBpYiBpblxuICAgICAgc2Nhbl9kaWdpdHMgd2lkdGhcbiAgICB8IF8gLT4gd2lkdGggaW5cblxuICAoKiBFbnN1cmUgd2UgaGF2ZSBnb3QgZW5vdWdoIHdpZHRoIGxlZnQsXG4gICAgIGFuZCByZWFkIGF0IGxpc3Qgb25lIGRpZ2l0LiAqKVxuICBpZiB3aWR0aCA9IDAgdGhlbiBiYWRfdG9rZW5fbGVuZ3RoIFwiZGlnaXRzXCIgZWxzZVxuICBsZXQgYyA9IFNjYW5uaW5nLmNoZWNrZWRfcGVla19jaGFyIGliIGluXG5cbiAgaWYgZGlnaXRwIGMgdGhlblxuICAgIGxldCB3aWR0aCA9IFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgYyBpblxuICAgIHNjYW5fZGlnaXRzIHdpZHRoXG4gIGVsc2VcbiAgICBiYWRfaW5wdXQgKFByaW50Zi5zcHJpbnRmIFwiY2hhcmFjdGVyICVDIGlzIG5vdCBhIHZhbGlkICVzIGRpZ2l0XCIgYyBiYXNpcylcbjs7XG5cbmxldCBpc19iaW5hcnlfZGlnaXQgPSBmdW5jdGlvblxuICB8ICcwJyAuLiAnMScgLT4gdHJ1ZVxuICB8IF8gLT4gZmFsc2Vcbjs7XG5cbmxldCBzY2FuX2JpbmFyeV9pbnQgPSBzY2FuX2RpZ2l0c19wbHVzIFwiYmluYXJ5XCIgaXNfYmluYXJ5X2RpZ2l0OztcblxubGV0IGlzX29jdGFsX2RpZ2l0ID0gZnVuY3Rpb25cbiAgfCAnMCcgLi4gJzcnIC0+IHRydWVcbiAgfCBfIC0+IGZhbHNlXG47O1xuXG5sZXQgc2Nhbl9vY3RhbF9pbnQgPSBzY2FuX2RpZ2l0c19wbHVzIFwib2N0YWxcIiBpc19vY3RhbF9kaWdpdDs7XG5cbmxldCBpc19oZXhhX2RpZ2l0ID0gZnVuY3Rpb25cbiAgfCAnMCcgLi4gJzknIHwgJ2EnIC4uICdmJyB8ICdBJyAuLiAnRicgLT4gdHJ1ZVxuICB8IF8gLT4gZmFsc2Vcbjs7XG5cbmxldCBzY2FuX2hleGFkZWNpbWFsX2ludCA9IHNjYW5fZGlnaXRzX3BsdXMgXCJoZXhhZGVjaW1hbFwiIGlzX2hleGFfZGlnaXQ7O1xuXG4oKiBTY2FuIGEgZGVjaW1hbCBpbnRlZ2VyLiAqKVxubGV0IHNjYW5fdW5zaWduZWRfZGVjaW1hbF9pbnQgPSBzY2FuX2RlY2ltYWxfZGlnaXRzX3BsdXM7O1xuXG5sZXQgc2Nhbl9zaWduIHdpZHRoIGliID1cbiAgbGV0IGMgPSBTY2FubmluZy5jaGVja2VkX3BlZWtfY2hhciBpYiBpblxuICBtYXRjaCBjIHdpdGhcbiAgfCAnKycgLT4gU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjXG4gIHwgJy0nIC0+IFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgY1xuICB8IF8gLT4gd2lkdGhcbjs7XG5cbmxldCBzY2FuX29wdGlvbmFsbHlfc2lnbmVkX2RlY2ltYWxfaW50IHdpZHRoIGliID1cbiAgbGV0IHdpZHRoID0gc2Nhbl9zaWduIHdpZHRoIGliIGluXG4gIHNjYW5fdW5zaWduZWRfZGVjaW1hbF9pbnQgd2lkdGggaWJcbjs7XG5cbigqIFNjYW4gYW4gdW5zaWduZWQgaW50ZWdlciB0aGF0IGNvdWxkIGJlIGdpdmVuIGluIGFueSAoY29tbW9uKSBiYXNpcy5cbiAgIElmIGRpZ2l0cyBhcmUgcHJlZml4ZWQgYnkgb25lIG9mIDB4LCAwWCwgMG8sIG9yIDBiLCB0aGUgbnVtYmVyIGlzXG4gICBhc3N1bWVkIHRvIGJlIHdyaXR0ZW4gcmVzcGVjdGl2ZWx5IGluIGhleGFkZWNpbWFsLCBoZXhhZGVjaW1hbCxcbiAgIG9jdGFsLCBvciBiaW5hcnkuICopXG5sZXQgc2Nhbl91bnNpZ25lZF9pbnQgd2lkdGggaWIgPVxuICBtYXRjaCBTY2FubmluZy5jaGVja2VkX3BlZWtfY2hhciBpYiB3aXRoXG4gIHwgJzAnIGFzIGMgLT5cbiAgICBsZXQgd2lkdGggPSBTY2FubmluZy5zdG9yZV9jaGFyIHdpZHRoIGliIGMgaW5cbiAgICBpZiB3aWR0aCA9IDAgdGhlbiB3aWR0aCBlbHNlXG4gICAgbGV0IGMgPSBTY2FubmluZy5wZWVrX2NoYXIgaWIgaW5cbiAgICBpZiBTY2FubmluZy5lb2YgaWIgdGhlbiB3aWR0aCBlbHNlXG4gICAgYmVnaW4gbWF0Y2ggYyB3aXRoXG4gICAgfCAneCcgfCAnWCcgLT4gc2Nhbl9oZXhhZGVjaW1hbF9pbnQgKFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgYykgaWJcbiAgICB8ICdvJyAtPiBzY2FuX29jdGFsX2ludCAoU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjKSBpYlxuICAgIHwgJ2InIC0+IHNjYW5fYmluYXJ5X2ludCAoU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjKSBpYlxuICAgIHwgXyAtPiBzY2FuX2RlY2ltYWxfZGlnaXRzIHdpZHRoIGliIGVuZFxuICB8IF8gLT4gc2Nhbl91bnNpZ25lZF9kZWNpbWFsX2ludCB3aWR0aCBpYlxuOztcblxubGV0IHNjYW5fb3B0aW9uYWxseV9zaWduZWRfaW50IHdpZHRoIGliID1cbiAgbGV0IHdpZHRoID0gc2Nhbl9zaWduIHdpZHRoIGliIGluXG4gIHNjYW5fdW5zaWduZWRfaW50IHdpZHRoIGliXG47O1xuXG5sZXQgc2Nhbl9pbnRfY29udiBjb252IHdpZHRoIGliID1cbiAgbWF0Y2ggY29udiB3aXRoXG4gIHwgJ2InIC0+IHNjYW5fYmluYXJ5X2ludCB3aWR0aCBpYlxuICB8ICdkJyAtPiBzY2FuX29wdGlvbmFsbHlfc2lnbmVkX2RlY2ltYWxfaW50IHdpZHRoIGliXG4gIHwgJ2knIC0+IHNjYW5fb3B0aW9uYWxseV9zaWduZWRfaW50IHdpZHRoIGliXG4gIHwgJ28nIC0+IHNjYW5fb2N0YWxfaW50IHdpZHRoIGliXG4gIHwgJ3UnIC0+IHNjYW5fdW5zaWduZWRfZGVjaW1hbF9pbnQgd2lkdGggaWJcbiAgfCAneCcgfCAnWCcgLT4gc2Nhbl9oZXhhZGVjaW1hbF9pbnQgd2lkdGggaWJcbiAgfCBfIC0+IGFzc2VydCBmYWxzZVxuOztcblxuKCogU2Nhbm5pbmcgZmxvYXRpbmcgcG9pbnQgbnVtYmVycy4gKilcbigqIEZyYWN0aW9uYWwgcGFydCBpcyBvcHRpb25hbCBhbmQgY2FuIGJlIHJlZHVjZWQgdG8gMCBkaWdpdHMuICopXG5sZXQgc2Nhbl9mcmFjX3BhcnQgd2lkdGggaWIgPVxuICBpZiB3aWR0aCA9IDAgdGhlbiB3aWR0aCBlbHNlXG4gIGxldCBjID0gU2Nhbm5pbmcucGVla19jaGFyIGliIGluXG4gIGlmIFNjYW5uaW5nLmVvZiBpYiB0aGVuIHdpZHRoIGVsc2VcbiAgbWF0Y2ggYyB3aXRoXG4gIHwgJzAnIC4uICc5JyBhcyBjIC0+XG4gICAgc2Nhbl9kZWNpbWFsX2RpZ2l0cyAoU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjKSBpYlxuICB8IF8gLT4gd2lkdGhcbjs7XG5cbigqIEV4cCBwYXJ0IGlzIG9wdGlvbmFsIGFuZCBjYW4gYmUgcmVkdWNlZCB0byAwIGRpZ2l0cy4gKilcbmxldCBzY2FuX2V4cF9wYXJ0IHdpZHRoIGliID1cbiAgaWYgd2lkdGggPSAwIHRoZW4gd2lkdGggZWxzZVxuICBsZXQgYyA9IFNjYW5uaW5nLnBlZWtfY2hhciBpYiBpblxuICBpZiBTY2FubmluZy5lb2YgaWIgdGhlbiB3aWR0aCBlbHNlXG4gIG1hdGNoIGMgd2l0aFxuICB8ICdlJyB8ICdFJyBhcyBjIC0+XG4gICAgc2Nhbl9vcHRpb25hbGx5X3NpZ25lZF9kZWNpbWFsX2ludCAoU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjKSBpYlxuICB8IF8gLT4gd2lkdGhcbjs7XG5cbigqIFNjYW4gdGhlIGludGVnZXIgcGFydCBvZiBhIGZsb2F0aW5nIHBvaW50IG51bWJlciwgKG5vdCB1c2luZyB0aGVcbiAgIE9DYW1sIGxleGljYWwgY29udmVudGlvbiBzaW5jZSB0aGUgaW50ZWdlciBwYXJ0IGNhbiBiZSBlbXB0eSk6XG4gICBhbiBvcHRpb25hbCBzaWduLCBmb2xsb3dlZCBieSBhIHBvc3NpYmx5IGVtcHR5IHNlcXVlbmNlIG9mIGRlY2ltYWxcbiAgIGRpZ2l0cyAoZS5nLiAtLjEpLiAqKVxubGV0IHNjYW5faW50X3BhcnQgd2lkdGggaWIgPVxuICBsZXQgd2lkdGggPSBzY2FuX3NpZ24gd2lkdGggaWIgaW5cbiAgc2Nhbl9kZWNpbWFsX2RpZ2l0cyB3aWR0aCBpYlxuOztcblxuKCpcbiAgIEZvciB0aGUgdGltZSBiZWluZyB3ZSBoYXZlIChhcyBmb3VuZCBpbiBzY2FuZi5tbGkpOlxuICAgVGhlIGZpZWxkIHdpZHRoIGlzIGNvbXBvc2VkIG9mIGFuIG9wdGlvbmFsIGludGVnZXIgbGl0ZXJhbFxuICAgaW5kaWNhdGluZyB0aGUgbWF4aW1hbCB3aWR0aCBvZiB0aGUgdG9rZW4gdG8gcmVhZC5cbiAgIFVuZm9ydHVuYXRlbHksIHRoZSB0eXBlLWNoZWNrZXIgbGV0IHRoZSB1c2VyIHdyaXRlIGFuIG9wdGlvbmFsIHByZWNpc2lvbixcbiAgIHNpbmNlIHRoaXMgaXMgdmFsaWQgZm9yIHByaW50ZiBmb3JtYXQgc3RyaW5ncy5cblxuICAgVGh1cywgdGhlIG5leHQgc3RlcCBmb3IgU2NhbmYgaXMgdG8gc3VwcG9ydCBhIGZ1bGwgd2lkdGggYW5kIHByZWNpc2lvblxuICAgaW5kaWNhdGlvbiwgbW9yZSBvciBsZXNzIHNpbWlsYXIgdG8gdGhlIG9uZSBmb3IgcHJpbnRmLCBwb3NzaWJseSBleHRlbmRlZFxuICAgdG8gdGhlIHNwZWNpZmljYXRpb24gb2YgYSBbbWF4LCBtaW5dIHJhbmdlIGZvciB0aGUgd2lkdGggb2YgdGhlIHRva2VuIHJlYWRcbiAgIGZvciBzdHJpbmdzLiBTb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5nIHNwZWMgZm9yIHNjYW5mLm1saTpcblxuICAgVGhlIG9wdGlvbmFsIFt3aWR0aF0gaXMgYW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSBtYXhpbWFsXG4gICB3aWR0aCBvZiB0aGUgdG9rZW4gcmVhZC4gRm9yIGluc3RhbmNlLCBbJTZkXSByZWFkcyBhbiBpbnRlZ2VyLFxuICAgaGF2aW5nIGF0IG1vc3QgNiBjaGFyYWN0ZXJzLlxuXG4gICBUaGUgb3B0aW9uYWwgW3ByZWNpc2lvbl0gaXMgYSBkb3QgWy5dIGZvbGxvd2VkIGJ5IGFuIGludGVnZXI6XG5cbiAgIC0gaW4gdGhlIGZsb2F0aW5nIHBvaW50IG51bWJlciBjb252ZXJzaW9ucyAoWyVmXSwgWyVlXSwgWyVnXSwgWyVGXSwgWyVFXSxcbiAgIGFuZCBbJUZdIGNvbnZlcnNpb25zLCB0aGUgW3ByZWNpc2lvbl0gaW5kaWNhdGVzIHRoZSBtYXhpbXVtIG51bWJlciBvZlxuICAgZGlnaXRzIHRoYXQgbWF5IGZvbGxvdyB0aGUgZGVjaW1hbCBwb2ludC4gRm9yIGluc3RhbmNlLCBbJS40Zl0gcmVhZHMgYVxuICAgW2Zsb2F0XSB3aXRoIGF0IG1vc3QgNCBmcmFjdGlvbmFsIGRpZ2l0cyxcblxuICAgLSBpbiB0aGUgc3RyaW5nIGNvbnZlcnNpb25zIChbJXNdLCBbJVNdLCBbJVxcWyByYW5nZSBcXF1dKSwgYW5kIGluIHRoZVxuICAgaW50ZWdlciBudW1iZXIgY29udmVyc2lvbnMgKFslaV0sIFslZF0sIFsldV0sIFsleF0sIFslb10sIGFuZCB0aGVpclxuICAgW2ludDMyXSwgW2ludDY0XSwgYW5kIFtuYXRpdmVfaW50XSBjb3JyZXNwb25kZW50KSwgdGhlIFtwcmVjaXNpb25dXG4gICBpbmRpY2F0ZXMgdGhlIHJlcXVpcmVkIG1pbmltdW0gd2lkdGggb2YgdGhlIHRva2VuIHJlYWQsXG5cbiAgIC0gb24gYWxsIG90aGVyIGNvbnZlcnNpb25zLCB0aGUgd2lkdGggYW5kIHByZWNpc2lvbiBhcmUgbWVhbmluZ2xlc3MgYW5kXG4gICBpZ25vcmVkIChGSVhNRTogbGVhZCB0byBhIHJ1bnRpbWUgZXJyb3IgPyB0eXBlIGNoZWNraW5nIGVycm9yID8pLlxuKilcblxubGV0IHNjYW5fZmxvYXQgd2lkdGggcHJlY2lzaW9uIGliID1cbiAgbGV0IHdpZHRoID0gc2Nhbl9pbnRfcGFydCB3aWR0aCBpYiBpblxuICBpZiB3aWR0aCA9IDAgdGhlbiB3aWR0aCwgcHJlY2lzaW9uIGVsc2VcbiAgbGV0IGMgPSBTY2FubmluZy5wZWVrX2NoYXIgaWIgaW5cbiAgaWYgU2Nhbm5pbmcuZW9mIGliIHRoZW4gd2lkdGgsIHByZWNpc2lvbiBlbHNlXG4gIG1hdGNoIGMgd2l0aFxuICB8ICcuJyAtPlxuICAgIGxldCB3aWR0aCA9IFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgYyBpblxuICAgIGxldCBwcmVjaXNpb24gPSBtaW4gd2lkdGggcHJlY2lzaW9uIGluXG4gICAgbGV0IHdpZHRoID0gd2lkdGggLSAocHJlY2lzaW9uIC0gc2Nhbl9mcmFjX3BhcnQgcHJlY2lzaW9uIGliKSBpblxuICAgIHNjYW5fZXhwX3BhcnQgd2lkdGggaWIsIHByZWNpc2lvblxuICB8IF8gLT5cbiAgICBzY2FuX2V4cF9wYXJ0IHdpZHRoIGliLCBwcmVjaXNpb25cbjs7XG5cbmxldCBzY2FuX2NhbWxfZmxvYXQgd2lkdGggcHJlY2lzaW9uIGliID1cbiAgbGV0IHdpZHRoID0gc2Nhbl9vcHRpb25hbGx5X3NpZ25lZF9kZWNpbWFsX2ludCB3aWR0aCBpYiBpblxuICBpZiB3aWR0aCA9IDAgdGhlbiBiYWRfZmxvYXQgKCkgZWxzZVxuICBsZXQgYyA9IFNjYW5uaW5nLnBlZWtfY2hhciBpYiBpblxuICBpZiBTY2FubmluZy5lb2YgaWIgdGhlbiBiYWRfZmxvYXQgKCkgZWxzZVxuICBtYXRjaCBjIHdpdGhcbiAgfCAnLicgLT5cbiAgICBsZXQgd2lkdGggPSBTY2FubmluZy5zdG9yZV9jaGFyIHdpZHRoIGliIGMgaW5cbiAgICBsZXQgcHJlY2lzaW9uID0gbWluIHdpZHRoIHByZWNpc2lvbiBpblxuICAgIGxldCB3aWR0aCA9IHdpZHRoIC0gKHByZWNpc2lvbiAtIHNjYW5fZnJhY19wYXJ0IHByZWNpc2lvbiBpYikgaW5cbiAgICBzY2FuX2V4cF9wYXJ0IHdpZHRoIGliXG4gIHwgJ2UnIHwgJ0UnIC0+XG4gICAgc2Nhbl9leHBfcGFydCB3aWR0aCBpYlxuICB8IF8gLT4gYmFkX2Zsb2F0ICgpXG5cbigqIFNjYW4gYSByZWd1bGFyIHN0cmluZzpcbiAgIHN0b3BzIHdoZW4gZW5jb3VudGVyaW5nIGEgc3BhY2UsIGlmIG5vIHNjYW5uaW5nIGluZGljYXRpb24gaGFzIGJlZW4gZ2l2ZW47XG4gICBvdGhlcndpc2UsIHN0b3BzIHdoZW4gZW5jb3VudGVyaW5nIHRoZSBjaGFyYWN0ZXJzIGluIHRoZSBzY2FubmluZ1xuICAgaW5kaWNhdGlvbiBbc3RwXS5cbiAgIEl0IGFsc28gc3RvcHMgYXQgZW5kIG9mIGZpbGUgb3Igd2hlbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBoYXNcbiAgIGJlZW4gcmVhZC4qKVxubGV0IHNjYW5fc3RyaW5nIHN0cCB3aWR0aCBpYiA9XG4gIGxldCByZWMgbG9vcCB3aWR0aCA9XG4gICAgaWYgd2lkdGggPSAwIHRoZW4gd2lkdGggZWxzZVxuICAgIGxldCBjID0gU2Nhbm5pbmcucGVla19jaGFyIGliIGluXG4gICAgaWYgU2Nhbm5pbmcuZW9mIGliIHRoZW4gd2lkdGggZWxzZVxuICAgICAgbWF0Y2ggc3RwIHdpdGhcbiAgICAgIHwgU29tZSBjJyB3aGVuIGMgPSBjJyAtPiBTY2FubmluZy5za2lwX2NoYXIgd2lkdGggaWJcbiAgICAgIHwgU29tZSBfIC0+IGxvb3AgKFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgYylcbiAgICAgIHwgTm9uZSAtPlxuICAgICAgICBtYXRjaCBjIHdpdGhcbiAgICAgICAgfCAnICcgfCAnXFx0JyB8ICdcXG4nIHwgJ1xccicgLT4gd2lkdGhcbiAgICAgICAgfCBfIC0+IGxvb3AgKFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgYylcbiAgaW5cbiAgbG9vcCB3aWR0aFxuOztcblxuKCogU2NhbiBhIGNoYXI6IHBlZWsgc3RyaWN0bHkgb25lIGNoYXJhY3RlciBpbiB0aGUgaW5wdXQsIHdoYXRzb2V2ZXIuICopXG5sZXQgc2Nhbl9jaGFyIHdpZHRoIGliID1cbiAgKCogVGhlIGNhc2Ugd2lkdGggPSAwIGNvdWxkIG5vdCBoYXBwZW4gaGVyZSwgc2luY2UgaXQgaXMgdGVzdGVkIGJlZm9yZVxuICAgICBjYWxsaW5nIHNjYW5fY2hhciwgaW4gdGhlIG1haW4gc2Nhbm5pbmcgZnVuY3Rpb24uXG4gICAgaWYgd2lkdGggPSAwIHRoZW4gYmFkX3Rva2VuX2xlbmd0aCBcImEgY2hhcmFjdGVyXCIgZWxzZSAqKVxuICBTY2FubmluZy5zdG9yZV9jaGFyIHdpZHRoIGliIChTY2FubmluZy5jaGVja2VkX3BlZWtfY2hhciBpYilcbjs7XG5cbmxldCBjaGFyX2Zvcl9iYWNrc2xhc2ggPSBmdW5jdGlvblxuICB8ICduJyAtPiAnXFwwMTAnXG4gIHwgJ3InIC0+ICdcXDAxMydcbiAgfCAnYicgLT4gJ1xcMDA4J1xuICB8ICd0JyAtPiAnXFwwMDknXG4gIHwgYyAtPiBjXG47O1xuXG4oKiBUaGUgaW50ZWdlciB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBmYWNpYWwgdmFsdWUgb2YgYSB2YWxpZFxuICAgZGVjaW1hbCBkaWdpdCBjaGFyYWN0ZXIuICopXG5sZXQgZGVjaW1hbF92YWx1ZV9vZl9jaGFyIGMgPSBpbnRfb2ZfY2hhciBjIC0gaW50X29mX2NoYXIgJzAnOztcblxubGV0IGNoYXJfZm9yX2RlY2ltYWxfY29kZSBjMCBjMSBjMiA9XG4gIGxldCBjID1cbiAgICAxMDAgKiBkZWNpbWFsX3ZhbHVlX29mX2NoYXIgYzAgK1xuICAgICAxMCAqIGRlY2ltYWxfdmFsdWVfb2ZfY2hhciBjMSArXG4gICAgICAgICAgZGVjaW1hbF92YWx1ZV9vZl9jaGFyIGMyIGluXG4gIGlmIGMgPCAwIHx8IGMgPiAyNTUgdGhlblxuICAgIGJhZF9pbnB1dFxuICAgICAgKFByaW50Zi5zcHJpbnRmXG4gICAgICAgICBcImJhZCBjaGFyYWN0ZXIgZGVjaW1hbCBlbmNvZGluZyBcXFxcJWMlYyVjXCIgYzAgYzEgYzIpIGVsc2VcbiAgY2hhcl9vZl9pbnQgY1xuOztcblxuKCogVGhlIGludGVnZXIgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgZmFjaWFsIHZhbHVlIG9mIGEgdmFsaWRcbiAgIGhleGFkZWNpbWFsIGRpZ2l0IGNoYXJhY3Rlci4gKilcbmxldCBoZXhhZGVjaW1hbF92YWx1ZV9vZl9jaGFyIGMgPVxuICBsZXQgZCA9IGludF9vZl9jaGFyIGMgaW5cbiAgKCogQ291bGQgYWxzbyBiZTpcbiAgICBpZiBkIDw9IGludF9vZl9jaGFyICc5JyB0aGVuIGQgLSBpbnRfb2ZfY2hhciAnMCcgZWxzZVxuICAgIGlmIGQgPD0gaW50X29mX2NoYXIgJ0YnIHRoZW4gMTAgKyBkIC0gaW50X29mX2NoYXIgJ0EnIGVsc2VcbiAgICBpZiBkIDw9IGludF9vZl9jaGFyICdmJyB0aGVuIDEwICsgZCAtIGludF9vZl9jaGFyICdhJyBlbHNlIGFzc2VydCBmYWxzZVxuICAqKVxuICBpZiBkID49IGludF9vZl9jaGFyICdhJyB0aGVuXG4gICAgZCAtIDg3ICgqIDEwICsgaW50X29mX2NoYXIgYyAtIGludF9vZl9jaGFyICdhJyAqKSBlbHNlXG4gIGlmIGQgPj0gaW50X29mX2NoYXIgJ0EnIHRoZW5cbiAgICBkIC0gNTUgICgqIDEwICsgaW50X29mX2NoYXIgYyAtIGludF9vZl9jaGFyICdBJyAqKSBlbHNlXG4gICAgZCAtIGludF9vZl9jaGFyICcwJ1xuOztcblxubGV0IGNoYXJfZm9yX2hleGFkZWNpbWFsX2NvZGUgYzEgYzIgPVxuICBsZXQgYyA9XG4gICAgMTYgKiBoZXhhZGVjaW1hbF92YWx1ZV9vZl9jaGFyIGMxICtcbiAgICAgICAgIGhleGFkZWNpbWFsX3ZhbHVlX29mX2NoYXIgYzIgaW5cbiAgaWYgYyA8IDAgfHwgYyA+IDI1NSB0aGVuXG4gICAgYmFkX2lucHV0XG4gICAgICAoUHJpbnRmLnNwcmludGYgXCJiYWQgY2hhcmFjdGVyIGhleGFkZWNpbWFsIGVuY29kaW5nIFxcXFwlYyVjXCIgYzEgYzIpIGVsc2VcbiAgY2hhcl9vZl9pbnQgY1xuOztcblxuKCogQ2FsbGVkIGluIHBhcnRpY3VsYXIgd2hlbiBlbmNvdW50ZXJpbmcgJ1xcXFwnIGFzIHN0YXJ0ZXIgb2YgYSBjaGFyLlxuICAgU3RvcHMgYmVmb3JlIHRoZSBjb3JyZXNwb25kaW5nICdcXCcnLiAqKVxubGV0IGNoZWNrX25leHRfY2hhciBtZXNzYWdlIHdpZHRoIGliID1cbiAgaWYgd2lkdGggPSAwIHRoZW4gYmFkX3Rva2VuX2xlbmd0aCBtZXNzYWdlIGVsc2VcbiAgbGV0IGMgPSBTY2FubmluZy5wZWVrX2NoYXIgaWIgaW5cbiAgaWYgU2Nhbm5pbmcuZW9mIGliIHRoZW4gYmFkX2VuZF9vZl9pbnB1dCBtZXNzYWdlIGVsc2VcbiAgY1xuOztcblxubGV0IGNoZWNrX25leHRfY2hhcl9mb3JfY2hhciA9IGNoZWNrX25leHRfY2hhciBcImEgQ2hhclwiOztcbmxldCBjaGVja19uZXh0X2NoYXJfZm9yX3N0cmluZyA9IGNoZWNrX25leHRfY2hhciBcImEgU3RyaW5nXCI7O1xuXG5sZXQgc2Nhbl9iYWNrc2xhc2hfY2hhciB3aWR0aCBpYiA9XG4gIG1hdGNoIGNoZWNrX25leHRfY2hhcl9mb3JfY2hhciB3aWR0aCBpYiB3aXRoXG4gIHwgJ1xcXFwnIHwgJ1xcJycgfCAnXFxcIicgfCAnbicgfCAndCcgfCAnYicgfCAncicgYXMgYyAtPlxuICAgIFNjYW5uaW5nLnN0b3JlX2NoYXIgd2lkdGggaWIgKGNoYXJfZm9yX2JhY2tzbGFzaCBjKVxuICB8ICcwJyAuLiAnOScgYXMgYyAtPlxuICAgIGxldCBnZXRfZGlnaXQgKCkgPVxuICAgICAgbGV0IGMgPSBTY2FubmluZy5uZXh0X2NoYXIgaWIgaW5cbiAgICAgIG1hdGNoIGMgd2l0aFxuICAgICAgfCAnMCcgLi4gJzknIGFzIGMgLT4gY1xuICAgICAgfCBjIC0+IGJhZF9pbnB1dF9lc2NhcGUgYyBpblxuICAgIGxldCBjMCA9IGMgaW5cbiAgICBsZXQgYzEgPSBnZXRfZGlnaXQgKCkgaW5cbiAgICBsZXQgYzIgPSBnZXRfZGlnaXQgKCkgaW5cbiAgICBTY2FubmluZy5zdG9yZV9jaGFyICh3aWR0aCAtIDIpIGliIChjaGFyX2Zvcl9kZWNpbWFsX2NvZGUgYzAgYzEgYzIpXG4gIHwgJ3gnIC0+XG4gICAgbGV0IGdldF9kaWdpdCAoKSA9XG4gICAgICBsZXQgYyA9IFNjYW5uaW5nLm5leHRfY2hhciBpYiBpblxuICAgICAgbWF0Y2ggYyB3aXRoXG4gICAgICB8ICcwJyAuLiAnOScgfCAnQScgLi4gJ0YnIHwgJ2EnIC4uICdmJyBhcyBjIC0+IGNcbiAgICAgIHwgYyAtPiBiYWRfaW5wdXRfZXNjYXBlIGMgaW5cbiAgICBsZXQgYzEgPSBnZXRfZGlnaXQgKCkgaW5cbiAgICBsZXQgYzIgPSBnZXRfZGlnaXQgKCkgaW5cbiAgICBTY2FubmluZy5zdG9yZV9jaGFyICh3aWR0aCAtIDIpIGliIChjaGFyX2Zvcl9oZXhhZGVjaW1hbF9jb2RlIGMxIGMyKVxuICB8IGMgLT5cbiAgICBiYWRfaW5wdXRfZXNjYXBlIGNcbjs7XG5cbigqIFNjYW4gYSBjaGFyYWN0ZXIgKGFuIE9DYW1sIHRva2VuKS4gKilcbmxldCBzY2FuX2NhbWxfY2hhciB3aWR0aCBpYiA9XG5cbiAgbGV0IHJlYyBmaW5kX3N0YXJ0IHdpZHRoID1cbiAgICBtYXRjaCBTY2FubmluZy5jaGVja2VkX3BlZWtfY2hhciBpYiB3aXRoXG4gICAgfCAnXFwnJyAtPiBmaW5kX2NoYXIgKFNjYW5uaW5nLmlnbm9yZV9jaGFyIHdpZHRoIGliKVxuICAgIHwgYyAtPiBjaGFyYWN0ZXJfbWlzbWF0Y2ggJ1xcJycgY1xuXG4gIGFuZCBmaW5kX2NoYXIgd2lkdGggPVxuICAgIG1hdGNoIGNoZWNrX25leHRfY2hhcl9mb3JfY2hhciB3aWR0aCBpYiB3aXRoXG4gICAgfCAnXFxcXCcgLT5cbiAgICAgIGZpbmRfc3RvcCAoc2Nhbl9iYWNrc2xhc2hfY2hhciAoU2Nhbm5pbmcuaWdub3JlX2NoYXIgd2lkdGggaWIpIGliKVxuICAgIHwgYyAtPlxuICAgICAgZmluZF9zdG9wIChTY2FubmluZy5zdG9yZV9jaGFyIHdpZHRoIGliIGMpXG5cbiAgYW5kIGZpbmRfc3RvcCB3aWR0aCA9XG4gICAgbWF0Y2ggY2hlY2tfbmV4dF9jaGFyX2Zvcl9jaGFyIHdpZHRoIGliIHdpdGhcbiAgICB8ICdcXCcnIC0+IFNjYW5uaW5nLmlnbm9yZV9jaGFyIHdpZHRoIGliXG4gICAgfCBjIC0+IGNoYXJhY3Rlcl9taXNtYXRjaCAnXFwnJyBjIGluXG5cbiAgZmluZF9zdGFydCB3aWR0aFxuOztcblxuKCogU2NhbiBhIGRlbGltaXRlZCBzdHJpbmcgKGFuIE9DYW1sIHRva2VuKS4gKilcbmxldCBzY2FuX2NhbWxfc3RyaW5nIHdpZHRoIGliID1cblxuICBsZXQgcmVjIGZpbmRfc3RhcnQgd2lkdGggPVxuICAgIG1hdGNoIFNjYW5uaW5nLmNoZWNrZWRfcGVla19jaGFyIGliIHdpdGhcbiAgICB8ICdcXFwiJyAtPiBmaW5kX3N0b3AgKFNjYW5uaW5nLmlnbm9yZV9jaGFyIHdpZHRoIGliKVxuICAgIHwgYyAtPiBjaGFyYWN0ZXJfbWlzbWF0Y2ggJ1xcXCInIGNcblxuICBhbmQgZmluZF9zdG9wIHdpZHRoID1cbiAgICBtYXRjaCBjaGVja19uZXh0X2NoYXJfZm9yX3N0cmluZyB3aWR0aCBpYiB3aXRoXG4gICAgfCAnXFxcIicgLT4gU2Nhbm5pbmcuaWdub3JlX2NoYXIgd2lkdGggaWJcbiAgICB8ICdcXFxcJyAtPiBzY2FuX2JhY2tzbGFzaCAoU2Nhbm5pbmcuaWdub3JlX2NoYXIgd2lkdGggaWIpXG4gICAgfCBjIC0+IGZpbmRfc3RvcCAoU2Nhbm5pbmcuc3RvcmVfY2hhciB3aWR0aCBpYiBjKVxuXG4gIGFuZCBzY2FuX2JhY2tzbGFzaCB3aWR0aCA9XG4gICAgbWF0Y2ggY2hlY2tfbmV4dF9jaGFyX2Zvcl9zdHJpbmcgd2lkdGggaWIgd2l0aFxuICAgIHwgJ1xccicgLT4gc2tpcF9uZXdsaW5lIChTY2FubmluZy5pZ25vcmVfY2hhciB3aWR0aCBpYilcbiAgICB8ICdcXG4nIC0+IHNraXBfc3BhY2VzIChTY2FubmluZy5pZ25vcmVfY2hhciB3aWR0aCBpYilcbiAgICB8IF8gLT4gZmluZF9zdG9wIChzY2FuX2JhY2tzbGFzaF9jaGFyIHdpZHRoIGliKVxuXG4gIGFuZCBza2lwX25ld2xpbmUgd2lkdGggPVxuICAgIG1hdGNoIGNoZWNrX25leHRfY2hhcl9mb3Jfc3RyaW5nIHdpZHRoIGliIHdpdGhcbiAgICB8ICdcXG4nIC0+IHNraXBfc3BhY2VzIChTY2FubmluZy5pZ25vcmVfY2hhciB3aWR0aCBpYilcbiAgICB8IF8gLT4gZmluZF9zdG9wIChTY2FubmluZy5zdG9yZV9jaGFyIHdpZHRoIGliICdcXHInKVxuXG4gIGFuZCBza2lwX3NwYWNlcyB3aWR0aCA9XG4gICAgbWF0Y2ggY2hlY2tfbmV4dF9jaGFyX2Zvcl9zdHJpbmcgd2lkdGggaWIgd2l0aFxuICAgIHwgJyAnIC0+IHNraXBfc3BhY2VzIChTY2FubmluZy5pZ25vcmVfY2hhciB3aWR0aCBpYilcbiAgICB8IF8gLT4gZmluZF9zdG9wIHdpZHRoIGluXG5cbiAgZmluZF9zdGFydCB3aWR0aFxuOztcblxuKCogU2NhbiBhIGJvb2xlYW4gKGFuIE9DYW1sIHRva2VuKS4gKilcbmxldCBzY2FuX2Jvb2wgaWIgPVxuICBsZXQgYyA9IFNjYW5uaW5nLmNoZWNrZWRfcGVla19jaGFyIGliIGluXG4gIGxldCBtID1cbiAgICBtYXRjaCBjIHdpdGhcbiAgICB8ICd0JyAtPiA0XG4gICAgfCAnZicgLT4gNVxuICAgIHwgYyAtPlxuICAgICAgYmFkX2lucHV0XG4gICAgICAgIChQcmludGYuc3ByaW50ZiBcInRoZSBjaGFyYWN0ZXIgJUMgY2Fubm90IHN0YXJ0IGEgYm9vbGVhblwiIGMpIGluXG4gIHNjYW5fc3RyaW5nIE5vbmUgbSBpYlxuXG4oKiBTY2FuIGEgc3RyaW5nIGNvbnRhaW5pbmcgZWxlbWVudHMgaW4gY2hhcl9zZXQgYW5kIHRlcm1pbmF0ZWQgYnkgc2Nhbl9pbmRpY1xuICAgaWYgcHJvdmlkZWQuICopXG5sZXQgc2Nhbl9jaGFyc19pbl9jaGFyX3NldCBjaGFyX3NldCBzY2FuX2luZGljIHdpZHRoIGliID1cbiAgbGV0IHJlYyBzY2FuX2NoYXJzIGkgc3RwID1cbiAgICBsZXQgYyA9IFNjYW5uaW5nLnBlZWtfY2hhciBpYiBpblxuICAgIGlmIGkgPiAwICYmIG5vdCAoU2Nhbm5pbmcuZW9mIGliKSAmJiBpc19pbl9jaGFyX3NldCBjaGFyX3NldCBjICYmXG4gICAgICBpbnRfb2ZfY2hhciBjIDw+IHN0cCB0aGVuXG4gICAgICBsZXQgXyA9IFNjYW5uaW5nLnN0b3JlX2NoYXIgbWF4X2ludCBpYiBjIGluXG4gICAgICBzY2FuX2NoYXJzIChpIC0gMSkgc3RwO1xuICBpblxuICBtYXRjaCBzY2FuX2luZGljIHdpdGhcbiAgfCBOb25lIC0+IHNjYW5fY2hhcnMgd2lkdGggKC0xKTtcbiAgfCBTb21lIGMgLT5cbiAgICBzY2FuX2NoYXJzIHdpZHRoIChpbnRfb2ZfY2hhciBjKTtcbiAgICBpZiBub3QgKFNjYW5uaW5nLmVvZiBpYikgdGhlblxuICAgICAgbGV0IGNpID0gU2Nhbm5pbmcucGVla19jaGFyIGliIGluXG4gICAgICBpZiBjID0gY2kgdGhlbiBTY2FubmluZy5pbnZhbGlkYXRlX2N1cnJlbnRfY2hhciBpYlxuICAgICAgZWxzZSBjaGFyYWN0ZXJfbWlzbWF0Y2ggYyBjaVxuXG4oKiBUaGUgZ2xvYmFsIGVycm9yIHJlcG9ydCBmdW5jdGlvbiBmb3IgW1NjYW5mXS4gKilcbmxldCBzY2FuZl9iYWRfaW5wdXQgaWIgPSBmdW5jdGlvblxuICB8IFNjYW5fZmFpbHVyZSBzIHwgRmFpbHVyZSBzIC0+XG4gICAgbGV0IGkgPSBTY2FubmluZy5jaGFyX2NvdW50IGliIGluXG4gICAgYmFkX2lucHV0IChQcmludGYuc3ByaW50ZiBcInNjYW5mOiBiYWQgaW5wdXQgYXQgY2hhciBudW1iZXIgJWk6ICVTXCIgaSBzKVxuICB8IHggLT4gcmFpc2UgeFxuXG4oKiBHZXQgdGhlIGNvbnRlbnQgb2YgYSBjb3VudGVyIGZyb20gYW4gaW5wdXQgYnVmZmVyLiAqKVxubGV0IGdldF9jb3VudGVyIGliIGNvdW50ZXIgPSBtYXRjaCBjb3VudGVyIHdpdGhcbiAgfCBMaW5lX2NvdW50ZXIgLT4gU2Nhbm5pbmcubGluZV9jb3VudCBpYlxuICB8IENoYXJfY291bnRlciAtPiBTY2FubmluZy5jaGFyX2NvdW50IGliXG4gIHwgVG9rZW5fY291bnRlciAtPiBTY2FubmluZy50b2tlbl9jb3VudCBpYlxuXG4oKiBDb21wdXRlIHRoZSB3aWR0aCBvZiBhIHBhZGRpbmcgb3B0aW9uIChzZWUgXCIlNDJ7XCIgYW5kIFwiJTEyMyhcIikuICopXG5sZXQgd2lkdGhfb2ZfcGFkX29wdCBwYWRfb3B0ID0gbWF0Y2ggcGFkX29wdCB3aXRoXG4gIHwgTm9uZSAtPiBtYXhfaW50XG4gIHwgU29tZSB3aWR0aCAtPiB3aWR0aFxuXG5sZXQgc3RvcHBlcl9vZl9mb3JtYXR0aW5nX2xpdCBmbXRpbmcgPVxuICBpZiBmbXRpbmcgPSBFc2NhcGVkX3BlcmNlbnQgdGhlbiAnJScsIFwiXCIgZWxzZVxuICAgIGxldCBzdHIgPSBzdHJpbmdfb2ZfZm9ybWF0dGluZ19saXQgZm10aW5nIGluXG4gICAgbGV0IHN0cCA9IHN0ci5bMV0gaW5cbiAgICBsZXQgc3ViX3N0ciA9IFN0cmluZy5zdWIgc3RyIDIgKFN0cmluZy5sZW5ndGggc3RyIC0gMikgaW5cbiAgICBzdHAsIHN1Yl9zdHJcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICgqIFJlYWRlcnMgbWFuYWdtZW50ICopXG5cbigqIEEgY2FsbCB0byB0YWtlX2Zvcm1hdF9yZWFkZXJzIG9uIGEgZm9ybWF0IGlzIGV2YWx1YXRlZCBpbnRvIGZ1bmN0aW9uc1xuICAgdGFraW5nIHJlYWRlcnMgYXMgYXJndW1lbnRzIGFuZCBhZ2dyZWdhdGUgdGhlbSBpbnRvIGFuIGhldGVyb2dlbmVvdXMgbGlzdCAqKVxuKCogV2hlbiBhbGwgcmVhZGVycyBhcmUgdGFrZW4sIGZpbmFsbHkgcGFzcyB0aGUgbGlzdCBvZiB0aGUgcmVhZGVycyB0byB0aGVcbiAgIGNvbnRpbnVhdGlvbiBrLiAqKVxubGV0IHJlYyB0YWtlX2Zvcm1hdF9yZWFkZXJzIDogdHlwZSBhIGMgZCBlIGYgLlxuICAgICgoZCwgZSkgaGV0ZXJfbGlzdCAtPiBlKSAtPiAoYSwgU2Nhbm5pbmcuaW5fY2hhbm5lbCwgYywgZCwgZSwgZikgZm10IC0+XG4gICAgZCA9XG5mdW4gayBmbXQgLT4gbWF0Y2ggZm10IHdpdGhcbiAgfCBSZWFkZXIgZm10X3Jlc3QgLT5cbiAgICBmdW4gcmVhZGVyIC0+XG4gICAgICBsZXQgbmV3X2sgcmVhZGVyc19yZXN0ID0gayAoQ29ucyAocmVhZGVyLCByZWFkZXJzX3Jlc3QpKSBpblxuICAgICAgdGFrZV9mb3JtYXRfcmVhZGVycyBuZXdfayBmbXRfcmVzdFxuICB8IENoYXIgcmVzdCAgICAgICAgICAgICAgICAgICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG4gIHwgQ2FtbF9jaGFyIHJlc3QgICAgICAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIHJlc3RcbiAgfCBTdHJpbmcgKF8sIHJlc3QpICAgICAgICAgICAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgcmVzdFxuICB8IENhbWxfc3RyaW5nIChfLCByZXN0KSAgICAgICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG4gIHwgSW50IChfLCBfLCBfLCByZXN0KSAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIHJlc3RcbiAgfCBJbnQzMiAoXywgXywgXywgcmVzdCkgICAgICAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgcmVzdFxuICB8IE5hdGl2ZWludCAoXywgXywgXywgcmVzdCkgICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG4gIHwgSW50NjQgKF8sIF8sIF8sIHJlc3QpICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIHJlc3RcbiAgfCBGbG9hdCAoXywgXywgXywgcmVzdCkgICAgICAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgcmVzdFxuICB8IEJvb2wgcmVzdCAgICAgICAgICAgICAgICAgICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG4gIHwgQWxwaGEgcmVzdCAgICAgICAgICAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIHJlc3RcbiAgfCBUaGV0YSByZXN0ICAgICAgICAgICAgICAgICAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgcmVzdFxuICB8IEZsdXNoIHJlc3QgICAgICAgICAgICAgICAgICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG4gIHwgU3RyaW5nX2xpdGVyYWwgKF8sIHJlc3QpICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIHJlc3RcbiAgfCBDaGFyX2xpdGVyYWwgKF8sIHJlc3QpICAgICAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgcmVzdFxuICB8IEN1c3RvbSAoXywgXywgcmVzdCkgICAgICAgICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG5cbiAgfCBTY2FuX2NoYXJfc2V0IChfLCBfLCByZXN0KSAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgcmVzdFxuICB8IFNjYW5fZ2V0X2NvdW50ZXIgKF8sIHJlc3QpICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG4gIHwgU2Nhbl9uZXh0X2NoYXIgcmVzdCAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIHJlc3RcblxuICB8IEZvcm1hdHRpbmdfbGl0IChfLCByZXN0KSAgICAgICAgIC0+IHRha2VfZm9ybWF0X3JlYWRlcnMgayByZXN0XG4gIHwgRm9ybWF0dGluZ19nZW4gKE9wZW5fdGFnIChGb3JtYXQgKGZtdCwgXykpLCByZXN0KSAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgKGNvbmNhdF9mbXQgZm10IHJlc3QpXG4gIHwgRm9ybWF0dGluZ19nZW4gKE9wZW5fYm94IChGb3JtYXQgKGZtdCwgXykpLCByZXN0KSAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgKGNvbmNhdF9mbXQgZm10IHJlc3QpXG5cbiAgfCBGb3JtYXRfYXJnIChfLCBfLCByZXN0KSAgICAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgcmVzdFxuICB8IEZvcm1hdF9zdWJzdCAoXywgZm10dHksIHJlc3QpICAgIC0+XG4gICAgIHRha2VfZm10dHlfZm9ybWF0X3JlYWRlcnMgayAoZXJhc2VfcmVsIChzeW1tIGZtdHR5KSkgcmVzdFxuICB8IElnbm9yZWRfcGFyYW0gKGlnbiwgcmVzdCkgICAgICAgIC0+IHRha2VfaWdub3JlZF9mb3JtYXRfcmVhZGVycyBrIGlnbiByZXN0XG5cbiAgfCBFbmRfb2ZfZm9ybWF0ICAgICAgICAgICAgICAgICAgICAtPiBrIE5pbFxuXG4oKiBUYWtlIHJlYWRlcnMgYXNzb2NpYXRlZCB0byBhbiBmbXR0eSBjb21pbmcgZnJvbSBhIEZvcm1hdF9zdWJzdCBcIiUoLi4uJSlcIi4gKilcbmFuZCB0YWtlX2ZtdHR5X2Zvcm1hdF9yZWFkZXJzIDogdHlwZSB4IHkgYSBjIGQgZSBmIC5cbiAgICAoKGQsIGUpIGhldGVyX2xpc3QgLT4gZSkgLT4gKGEsIFNjYW5uaW5nLmluX2NoYW5uZWwsIGMsIGQsIHgsIHkpIGZtdHR5IC0+XG4gICAgICAoeSwgU2Nhbm5pbmcuaW5fY2hhbm5lbCwgYywgeCwgZSwgZikgZm10IC0+IGQgPVxuZnVuIGsgZm10dHkgZm10IC0+IG1hdGNoIGZtdHR5IHdpdGhcbiAgfCBSZWFkZXJfdHkgZm10X3Jlc3QgLT5cbiAgICBmdW4gcmVhZGVyIC0+XG4gICAgICBsZXQgbmV3X2sgcmVhZGVyc19yZXN0ID0gayAoQ29ucyAocmVhZGVyLCByZWFkZXJzX3Jlc3QpKSBpblxuICAgICAgdGFrZV9mbXR0eV9mb3JtYXRfcmVhZGVycyBuZXdfayBmbXRfcmVzdCBmbXRcbiAgfCBJZ25vcmVkX3JlYWRlcl90eSBmbXRfcmVzdCAtPlxuICAgIGZ1biByZWFkZXIgLT5cbiAgICAgIGxldCBuZXdfayByZWFkZXJzX3Jlc3QgPSBrIChDb25zIChyZWFkZXIsIHJlYWRlcnNfcmVzdCkpIGluXG4gICAgICB0YWtlX2ZtdHR5X2Zvcm1hdF9yZWFkZXJzIG5ld19rIGZtdF9yZXN0IGZtdFxuICB8IENoYXJfdHkgcmVzdCAgICAgICAgICAgICAgICAtPiB0YWtlX2ZtdHR5X2Zvcm1hdF9yZWFkZXJzIGsgcmVzdCBmbXRcbiAgfCBTdHJpbmdfdHkgcmVzdCAgICAgICAgICAgICAgLT4gdGFrZV9mbXR0eV9mb3JtYXRfcmVhZGVycyBrIHJlc3QgZm10XG4gIHwgSW50X3R5IHJlc3QgICAgICAgICAgICAgICAgIC0+IHRha2VfZm10dHlfZm9ybWF0X3JlYWRlcnMgayByZXN0IGZtdFxuICB8IEludDMyX3R5IHJlc3QgICAgICAgICAgICAgICAtPiB0YWtlX2ZtdHR5X2Zvcm1hdF9yZWFkZXJzIGsgcmVzdCBmbXRcbiAgfCBOYXRpdmVpbnRfdHkgcmVzdCAgICAgICAgICAgLT4gdGFrZV9mbXR0eV9mb3JtYXRfcmVhZGVycyBrIHJlc3QgZm10XG4gIHwgSW50NjRfdHkgcmVzdCAgICAgICAgICAgICAgIC0+IHRha2VfZm10dHlfZm9ybWF0X3JlYWRlcnMgayByZXN0IGZtdFxuICB8IEZsb2F0X3R5IHJlc3QgICAgICAgICAgICAgICAtPiB0YWtlX2ZtdHR5X2Zvcm1hdF9yZWFkZXJzIGsgcmVzdCBmbXRcbiAgfCBCb29sX3R5IHJlc3QgICAgICAgICAgICAgICAgLT4gdGFrZV9mbXR0eV9mb3JtYXRfcmVhZGVycyBrIHJlc3QgZm10XG4gIHwgQWxwaGFfdHkgcmVzdCAgICAgICAgICAgICAgIC0+IHRha2VfZm10dHlfZm9ybWF0X3JlYWRlcnMgayByZXN0IGZtdFxuICB8IFRoZXRhX3R5IHJlc3QgICAgICAgICAgICAgICAtPiB0YWtlX2ZtdHR5X2Zvcm1hdF9yZWFkZXJzIGsgcmVzdCBmbXRcbiAgfCBBbnlfdHkgcmVzdCAgICAgICAgICAgICAgICAgLT4gdGFrZV9mbXR0eV9mb3JtYXRfcmVhZGVycyBrIHJlc3QgZm10XG4gIHwgRm9ybWF0X2FyZ190eSAoXywgcmVzdCkgICAgIC0+IHRha2VfZm10dHlfZm9ybWF0X3JlYWRlcnMgayByZXN0IGZtdFxuICB8IEVuZF9vZl9mbXR0eSAgICAgICAgICAgICAgICAtPiB0YWtlX2Zvcm1hdF9yZWFkZXJzIGsgZm10XG4gIHwgRm9ybWF0X3N1YnN0X3R5ICh0eTEsIHR5MiwgcmVzdCkgLT5cbiAgICBsZXQgdHkgPSB0cmFucyAoc3ltbSB0eTEpIHR5MiBpblxuICAgIHRha2VfZm10dHlfZm9ybWF0X3JlYWRlcnMgayAoY29uY2F0X2ZtdHR5IHR5IHJlc3QpIGZtdFxuXG4oKiBUYWtlIHJlYWRlcnMgYXNzb2NpYXRlZCB0byBhbiBpZ25vcmVkIHBhcmFtZXRlci4gKilcbmFuZCB0YWtlX2lnbm9yZWRfZm9ybWF0X3JlYWRlcnMgOiB0eXBlIHggeSBhIGMgZCBlIGYgLlxuICAgICgoZCwgZSkgaGV0ZXJfbGlzdCAtPiBlKSAtPiAoYSwgU2Nhbm5pbmcuaW5fY2hhbm5lbCwgYywgZCwgeCwgeSkgaWdub3JlZCAtPlxuICAgICAgKHksIFNjYW5uaW5nLmluX2NoYW5uZWwsIGMsIHgsIGUsIGYpIGZtdCAtPiBkID1cbmZ1biBrIGlnbiBmbXQgLT4gbWF0Y2ggaWduIHdpdGhcbiAgfCBJZ25vcmVkX3JlYWRlciAtPlxuICAgIGZ1biByZWFkZXIgLT5cbiAgICAgIGxldCBuZXdfayByZWFkZXJzX3Jlc3QgPSBrIChDb25zIChyZWFkZXIsIHJlYWRlcnNfcmVzdCkpIGluXG4gICAgICB0YWtlX2Zvcm1hdF9yZWFkZXJzIG5ld19rIGZtdFxuICB8IElnbm9yZWRfY2hhciAgICAgICAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfY2FtbF9jaGFyICAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfc3RyaW5nIF8gICAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfY2FtbF9zdHJpbmcgXyAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfaW50IChfLCBfKSAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfaW50MzIgKF8sIF8pICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfbmF0aXZlaW50IChfLCBfKSAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfaW50NjQgKF8sIF8pICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfZmxvYXQgKF8sIF8pICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfYm9vbCAgICAgICAgICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfZm9ybWF0X2FyZyBfICAgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfZm9ybWF0X3N1YnN0IChfLCBmbXR0eSkgLT4gdGFrZV9mbXR0eV9mb3JtYXRfcmVhZGVycyBrIGZtdHR5IGZtdFxuICB8IElnbm9yZWRfc2Nhbl9jaGFyX3NldCBfICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfc2Nhbl9nZXRfY291bnRlciBfICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuICB8IElnbm9yZWRfc2Nhbl9uZXh0X2NoYXIgICAgICAgICAgLT4gdGFrZV9mb3JtYXRfcmVhZGVycyBrIGZtdFxuXG4oKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKiBHZW5lcmljIHNjYW5uaW5nICopXG5cbigqIE1ha2UgYSBnZW5lcmljIHNjYW5uaW5nIGZ1bmN0aW9uLiAqKVxuKCogU2NhbiBhIHN0cmVhbSBhY2NvcmRpbmcgdG8gYSBmb3JtYXQgYW5kIHJlYWRlcnMgb2J0YWluZWQgYnlcbiAgIHRha2VfZm9ybWF0X3JlYWRlcnMsIGFuZCBhZ2dlZ2F0ZSBzY2FubmVkIHZhbHVlcyBpbnRvIGFuXG4gICBoZXRlcm9nZW5lb3VzIGxpc3QuICopXG4oKiBSZXR1cm4gdGhlIGhldGVyb2dlbmVvdXMgbGlzdCBvZiBzY2FubmVkIHZhbHVlcy4gKilcbmxldCByZWMgbWFrZV9zY2FuZiA6IHR5cGUgYSBjIGQgZSBmIC5cbiAgICBTY2FubmluZy5pbl9jaGFubmVsIC0+IChhLCBTY2FubmluZy5pbl9jaGFubmVsLCBjLCBkLCBlLCBmKSBmbXQgLT5cbiAgICAgIChkLCBfKSBoZXRlcl9saXN0IC0+IChhLCBmKSBoZXRlcl9saXN0ID1cbmZ1biBpYiBmbXQgcmVhZGVycyAtPiBtYXRjaCBmbXQgd2l0aFxuICB8IENoYXIgcmVzdCAtPlxuICAgIGxldCBfID0gc2Nhbl9jaGFyIDAgaWIgaW5cbiAgICBsZXQgYyA9IHRva2VuX2NoYXIgaWIgaW5cbiAgICBDb25zIChjLCBtYWtlX3NjYW5mIGliIHJlc3QgcmVhZGVycylcbiAgfCBDYW1sX2NoYXIgcmVzdCAtPlxuICAgIGxldCBfID0gc2Nhbl9jYW1sX2NoYXIgMCBpYiBpblxuICAgIGxldCBjID0gdG9rZW5fY2hhciBpYiBpblxuICAgIENvbnMgKGMsIG1ha2Vfc2NhbmYgaWIgcmVzdCByZWFkZXJzKVxuXG4gIHwgU3RyaW5nIChwYWQsIEZvcm1hdHRpbmdfbGl0IChmbXRpbmdfbGl0LCByZXN0KSkgLT5cbiAgICBsZXQgc3RwLCBzdHIgPSBzdG9wcGVyX29mX2Zvcm1hdHRpbmdfbGl0IGZtdGluZ19saXQgaW5cbiAgICBsZXQgc2NhbiB3aWR0aCBfIGliID0gc2Nhbl9zdHJpbmcgKFNvbWUgc3RwKSB3aWR0aCBpYiBpblxuICAgIGxldCBzdHJfcmVzdCA9IFN0cmluZ19saXRlcmFsIChzdHIsIHJlc3QpIGluXG4gICAgcGFkX3ByZWNfc2NhbmYgaWIgc3RyX3Jlc3QgcmVhZGVycyBwYWQgTm9fcHJlY2lzaW9uIHNjYW4gdG9rZW5fc3RyaW5nXG4gIHwgU3RyaW5nIChwYWQsIEZvcm1hdHRpbmdfZ2VuIChPcGVuX3RhZyAoRm9ybWF0IChmbXQnLCBfKSksIHJlc3QpKSAtPlxuICAgIGxldCBzY2FuIHdpZHRoIF8gaWIgPSBzY2FuX3N0cmluZyAoU29tZSAneycpIHdpZHRoIGliIGluXG4gICAgcGFkX3ByZWNfc2NhbmYgaWIgKGNvbmNhdF9mbXQgZm10JyByZXN0KSByZWFkZXJzIHBhZCBOb19wcmVjaXNpb24gc2NhbiB0b2tlbl9zdHJpbmdcbiAgfCBTdHJpbmcgKHBhZCwgRm9ybWF0dGluZ19nZW4gKE9wZW5fYm94IChGb3JtYXQgKGZtdCcsIF8pKSwgcmVzdCkpIC0+XG4gICAgbGV0IHNjYW4gd2lkdGggXyBpYiA9IHNjYW5fc3RyaW5nIChTb21lICdbJykgd2lkdGggaWIgaW5cbiAgICBwYWRfcHJlY19zY2FuZiBpYiAoY29uY2F0X2ZtdCBmbXQnIHJlc3QpIHJlYWRlcnMgcGFkIE5vX3ByZWNpc2lvbiBzY2FuIHRva2VuX3N0cmluZ1xuICB8IFN0cmluZyAocGFkLCByZXN0KSAtPlxuICAgIGxldCBzY2FuIHdpZHRoIF8gaWIgPSBzY2FuX3N0cmluZyBOb25lIHdpZHRoIGliIGluXG4gICAgcGFkX3ByZWNfc2NhbmYgaWIgcmVzdCByZWFkZXJzIHBhZCBOb19wcmVjaXNpb24gc2NhbiB0b2tlbl9zdHJpbmdcblxuICB8IENhbWxfc3RyaW5nIChwYWQsIHJlc3QpIC0+XG4gICAgbGV0IHNjYW4gd2lkdGggXyBpYiA9IHNjYW5fY2FtbF9zdHJpbmcgd2lkdGggaWIgaW5cbiAgICBwYWRfcHJlY19zY2FuZiBpYiByZXN0IHJlYWRlcnMgcGFkIE5vX3ByZWNpc2lvbiBzY2FuIHRva2VuX3N0cmluZ1xuICB8IEludCAoaWNvbnYsIHBhZCwgcHJlYywgcmVzdCkgLT5cbiAgICBsZXQgYyA9IGNoYXJfb2ZfaWNvbnYgaWNvbnYgaW5cbiAgICBsZXQgc2NhbiB3aWR0aCBfIGliID0gc2Nhbl9pbnRfY29udiBjIHdpZHRoIGliIGluXG4gICAgcGFkX3ByZWNfc2NhbmYgaWIgcmVzdCByZWFkZXJzIHBhZCBwcmVjIHNjYW4gKHRva2VuX2ludCBjKVxuICB8IEludDMyIChpY29udiwgcGFkLCBwcmVjLCByZXN0KSAtPlxuICAgIGxldCBjID0gY2hhcl9vZl9pY29udiBpY29udiBpblxuICAgIGxldCBzY2FuIHdpZHRoIF8gaWIgPSBzY2FuX2ludF9jb252IGMgd2lkdGggaWIgaW5cbiAgICBwYWRfcHJlY19zY2FuZiBpYiByZXN0IHJlYWRlcnMgcGFkIHByZWMgc2NhbiAodG9rZW5faW50MzIgYylcbiAgfCBOYXRpdmVpbnQgKGljb252LCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgbGV0IGMgPSBjaGFyX29mX2ljb252IGljb252IGluXG4gICAgbGV0IHNjYW4gd2lkdGggXyBpYiA9IHNjYW5faW50X2NvbnYgYyB3aWR0aCBpYiBpblxuICAgIHBhZF9wcmVjX3NjYW5mIGliIHJlc3QgcmVhZGVycyBwYWQgcHJlYyBzY2FuICh0b2tlbl9uYXRpdmVpbnQgYylcbiAgfCBJbnQ2NCAoaWNvbnYsIHBhZCwgcHJlYywgcmVzdCkgLT5cbiAgICBsZXQgYyA9IGNoYXJfb2ZfaWNvbnYgaWNvbnYgaW5cbiAgICBsZXQgc2NhbiB3aWR0aCBfIGliID0gc2Nhbl9pbnRfY29udiBjIHdpZHRoIGliIGluXG4gICAgcGFkX3ByZWNfc2NhbmYgaWIgcmVzdCByZWFkZXJzIHBhZCBwcmVjIHNjYW4gKHRva2VuX2ludDY0IGMpXG4gIHwgRmxvYXQgKEZsb2F0X0YsIHBhZCwgcHJlYywgcmVzdCkgLT5cbiAgICBwYWRfcHJlY19zY2FuZiBpYiByZXN0IHJlYWRlcnMgcGFkIHByZWMgc2Nhbl9jYW1sX2Zsb2F0IHRva2VuX2Zsb2F0XG4gIHwgRmxvYXQgKChGbG9hdF9mIHwgRmxvYXRfcGYgfCBGbG9hdF9zZiB8IEZsb2F0X2UgfCBGbG9hdF9wZSB8IEZsb2F0X3NlXG4gICAgICAgICAgICAgICB8IEZsb2F0X0UgfCBGbG9hdF9wRSB8IEZsb2F0X3NFIHwgRmxvYXRfZyB8IEZsb2F0X3BnIHwgRmxvYXRfc2dcbiAgICAgICAgICAgICAgIHwgRmxvYXRfRyB8IEZsb2F0X3BHIHwgRmxvYXRfc0cpLCBwYWQsIHByZWMsIHJlc3QpIC0+XG4gICAgcGFkX3ByZWNfc2NhbmYgaWIgcmVzdCByZWFkZXJzIHBhZCBwcmVjIHNjYW5fZmxvYXQgdG9rZW5fZmxvYXRcblxuICB8IEJvb2wgcmVzdCAtPlxuICAgIGxldCBfID0gc2Nhbl9ib29sIGliIGluXG4gICAgbGV0IGIgPSB0b2tlbl9ib29sIGliIGluXG4gICAgQ29ucyAoYiwgbWFrZV9zY2FuZiBpYiByZXN0IHJlYWRlcnMpXG4gIHwgQWxwaGEgXyAtPlxuICAgIGludmFsaWRfYXJnIFwic2NhbmY6IGJhZCBjb252ZXJzaW9uIFxcXCIlYVxcXCJcIlxuICB8IFRoZXRhIF8gLT5cbiAgICBpbnZhbGlkX2FyZyBcInNjYW5mOiBiYWQgY29udmVyc2lvbiBcXFwiJXRcXFwiXCJcbiAgfCBDdXN0b20gXyAtPlxuICAgIGludmFsaWRfYXJnIFwic2NhbmY6IGJhZCBjb252ZXJzaW9uIFxcXCIlP1xcXCIgKGN1c3RvbSBjb252ZXJ0ZXIpXCJcbiAgfCBSZWFkZXIgZm10X3Jlc3QgLT5cbiAgICBsZXQgQ29ucyAocmVhZGVyLCByZWFkZXJzX3Jlc3QpID0gcmVhZGVycyBpblxuICAgIGxldCB4ID0gcmVhZGVyIGliIGluXG4gICAgQ29ucyAoeCwgbWFrZV9zY2FuZiBpYiBmbXRfcmVzdCByZWFkZXJzX3Jlc3QpXG4gIHwgRmx1c2ggcmVzdCAtPlxuICAgIGlmIFNjYW5uaW5nLmVuZF9vZl9pbnB1dCBpYiB0aGVuIG1ha2Vfc2NhbmYgaWIgcmVzdCByZWFkZXJzXG4gICAgZWxzZSBiYWRfaW5wdXQgXCJlbmQgb2YgaW5wdXQgbm90IGZvdW5kXCJcblxuICB8IFN0cmluZ19saXRlcmFsIChzdHIsIHJlc3QpIC0+XG4gICAgU3RyaW5nLml0ZXIgKGNoZWNrX2NoYXIgaWIpIHN0cjtcbiAgICBtYWtlX3NjYW5mIGliIHJlc3QgcmVhZGVyc1xuICB8IENoYXJfbGl0ZXJhbCAoY2hyLCByZXN0KSAtPlxuICAgIGNoZWNrX2NoYXIgaWIgY2hyO1xuICAgIG1ha2Vfc2NhbmYgaWIgcmVzdCByZWFkZXJzXG5cbiAgfCBGb3JtYXRfYXJnIChwYWRfb3B0LCBmbXR0eSwgcmVzdCkgLT5cbiAgICBsZXQgXyA9IHNjYW5fY2FtbF9zdHJpbmcgKHdpZHRoX29mX3BhZF9vcHQgcGFkX29wdCkgaWIgaW5cbiAgICBsZXQgcyA9IHRva2VuX3N0cmluZyBpYiBpblxuICAgIGxldCBmbXQgPVxuICAgICAgdHJ5IGZvcm1hdF9vZl9zdHJpbmdfZm10dHkgcyBmbXR0eVxuICAgICAgd2l0aCBGYWlsdXJlIG1zZyAtPiBiYWRfaW5wdXQgbXNnXG4gICAgaW5cbiAgICBDb25zIChmbXQsIG1ha2Vfc2NhbmYgaWIgcmVzdCByZWFkZXJzKVxuICB8IEZvcm1hdF9zdWJzdCAocGFkX29wdCwgZm10dHksIHJlc3QpIC0+XG4gICAgbGV0IF8gPSBzY2FuX2NhbWxfc3RyaW5nICh3aWR0aF9vZl9wYWRfb3B0IHBhZF9vcHQpIGliIGluXG4gICAgbGV0IHMgPSB0b2tlbl9zdHJpbmcgaWIgaW5cbiAgICBsZXQgZm10LCBmbXQnID1cbiAgICAgIHRyeVxuICAgICAgICBsZXQgRm10X0VCQiBmbXQgPSBmbXRfZWJiX29mX3N0cmluZyBzIGluXG4gICAgICAgIGxldCBGbXRfRUJCIGZtdCcgPSBmbXRfZWJiX29mX3N0cmluZyBzIGluXG4gICAgICAgICgqIFRPRE86IGZpbmQgYSB3YXkgdG8gYXZvaWQgcmVwYXJzaW5nIHR3aWNlICopXG5cbiAgICAgICAgKCogVE9ETzogdGhlc2UgdHlwZS1jaGVja3MgYmVsb3cgKmNhbiogZmFpbCBiZWNhdXNlIG9mIHR5cGVcbiAgICAgICAgICAgYW1iaWd1aXR5IGluIHByZXNlbmNlIG9mIGlnbm9yZWQtcmVhZGVyczogXCIlX3IlZFwiIGFuZCBcIiVkJV9yXCJcbiAgICAgICAgICAgYXJlIHR5cGVkIGluIHRoZSBzYW1lIHdheS5cblxuICAgICAgICAgICAjIFNjYW5mLnNzY2FuZiBcIlxcXCIlX3IlZFxcXCIzXCIgXCIlKCVkJV9yJSlcIiBpZ25vcmVcbiAgICAgICAgICAgICAoZnVuIGZtdCBuIC0+IHN0cmluZ19vZl9mb3JtYXQgZm10LCBuKTs7XG4gICAgICAgICAgIEV4Y2VwdGlvbjogQ2FtbGludGVybmFsRm9ybWF0LlR5cGVfbWlzbWF0Y2guXG5cbiAgICAgICAgICAgV2Ugc2hvdWxkIHByb3Blcmx5IGNhdGNoIHRoaXMgZXhjZXB0aW9uLlxuICAgICAgICAqKVxuICAgICAgICB0eXBlX2Zvcm1hdCBmbXQgKGVyYXNlX3JlbCBmbXR0eSksXG4gICAgICAgIHR5cGVfZm9ybWF0IGZtdCcgKGVyYXNlX3JlbCAoc3ltbSBmbXR0eSkpXG4gICAgICB3aXRoIEZhaWx1cmUgbXNnIC0+IGJhZF9pbnB1dCBtc2dcbiAgICBpblxuICAgIENvbnMgKEZvcm1hdCAoZm10LCBzKSxcbiAgICAgICAgICBtYWtlX3NjYW5mIGliIChjb25jYXRfZm10IGZtdCcgcmVzdCkgcmVhZGVycylcblxuICB8IFNjYW5fY2hhcl9zZXQgKHdpZHRoX29wdCwgY2hhcl9zZXQsIEZvcm1hdHRpbmdfbGl0IChmbXRpbmdfbGl0LCByZXN0KSkgLT5cbiAgICBsZXQgc3RwLCBzdHIgPSBzdG9wcGVyX29mX2Zvcm1hdHRpbmdfbGl0IGZtdGluZ19saXQgaW5cbiAgICBsZXQgd2lkdGggPSB3aWR0aF9vZl9wYWRfb3B0IHdpZHRoX29wdCBpblxuICAgIGxldCBfID0gc2Nhbl9jaGFyc19pbl9jaGFyX3NldCBjaGFyX3NldCAoU29tZSBzdHApIHdpZHRoIGliIGluXG4gICAgbGV0IHMgPSB0b2tlbl9zdHJpbmcgaWIgaW5cbiAgICBsZXQgc3RyX3Jlc3QgPSBTdHJpbmdfbGl0ZXJhbCAoc3RyLCByZXN0KSBpblxuICAgIENvbnMgKHMsIG1ha2Vfc2NhbmYgaWIgc3RyX3Jlc3QgcmVhZGVycylcbiAgfCBTY2FuX2NoYXJfc2V0ICh3aWR0aF9vcHQsIGNoYXJfc2V0LCByZXN0KSAtPlxuICAgIGxldCB3aWR0aCA9IHdpZHRoX29mX3BhZF9vcHQgd2lkdGhfb3B0IGluXG4gICAgbGV0IF8gPSBzY2FuX2NoYXJzX2luX2NoYXJfc2V0IGNoYXJfc2V0IE5vbmUgd2lkdGggaWIgaW5cbiAgICBsZXQgcyA9IHRva2VuX3N0cmluZyBpYiBpblxuICAgIENvbnMgKHMsIG1ha2Vfc2NhbmYgaWIgcmVzdCByZWFkZXJzKVxuICB8IFNjYW5fZ2V0X2NvdW50ZXIgKGNvdW50ZXIsIHJlc3QpIC0+XG4gICAgbGV0IGNvdW50ID0gZ2V0X2NvdW50ZXIgaWIgY291bnRlciBpblxuICAgIENvbnMgKGNvdW50LCBtYWtlX3NjYW5mIGliIHJlc3QgcmVhZGVycylcbiAgfCBTY2FuX25leHRfY2hhciByZXN0IC0+XG4gICAgbGV0IGMgPSBTY2FubmluZy5jaGVja2VkX3BlZWtfY2hhciBpYiBpblxuICAgIENvbnMgKGMsIG1ha2Vfc2NhbmYgaWIgcmVzdCByZWFkZXJzKVxuXG4gIHwgRm9ybWF0dGluZ19saXQgKGZvcm1hdHRpbmdfbGl0LCByZXN0KSAtPlxuICAgIFN0cmluZy5pdGVyIChjaGVja19jaGFyIGliKSAoc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0IGZvcm1hdHRpbmdfbGl0KTtcbiAgICBtYWtlX3NjYW5mIGliIHJlc3QgcmVhZGVyc1xuICB8IEZvcm1hdHRpbmdfZ2VuIChPcGVuX3RhZyAoRm9ybWF0IChmbXQnLCBfKSksIHJlc3QpIC0+XG4gICAgY2hlY2tfY2hhciBpYiAnQCc7IGNoZWNrX2NoYXIgaWIgJ3snO1xuICAgIG1ha2Vfc2NhbmYgaWIgKGNvbmNhdF9mbXQgZm10JyByZXN0KSByZWFkZXJzXG4gIHwgRm9ybWF0dGluZ19nZW4gKE9wZW5fYm94IChGb3JtYXQgKGZtdCcsIF8pKSwgcmVzdCkgLT5cbiAgICBjaGVja19jaGFyIGliICdAJzsgY2hlY2tfY2hhciBpYiAnWyc7XG4gICAgbWFrZV9zY2FuZiBpYiAoY29uY2F0X2ZtdCBmbXQnIHJlc3QpIHJlYWRlcnNcblxuICB8IElnbm9yZWRfcGFyYW0gKGlnbiwgcmVzdCkgLT5cbiAgICBsZXQgUGFyYW1fZm9ybWF0X0VCQiBmbXQnID0gcGFyYW1fZm9ybWF0X29mX2lnbm9yZWRfZm9ybWF0IGlnbiByZXN0IGluXG4gICAgYmVnaW4gbWF0Y2ggbWFrZV9zY2FuZiBpYiBmbXQnIHJlYWRlcnMgd2l0aFxuICAgIHwgQ29ucyAoXywgYXJnX3Jlc3QpIC0+IGFyZ19yZXN0XG4gICAgfCBOaWwgLT4gYXNzZXJ0IGZhbHNlXG4gICAgZW5kXG5cbiAgfCBFbmRfb2ZfZm9ybWF0IC0+XG4gICAgTmlsXG5cbigqIENhc2UgYW5hbHlzaXMgb24gcGFkZGluZyBhbmQgcHJlY2lzaW9uLiAqKVxuKCogUmVqZWN0IGZvcm1hdHMgY29udGFpbmluZyBcIiUqXCIgb3IgXCIlLipcIi4gKilcbigqIFBhc3MgcGFkZGluZyBhbmQgcHJlY2lzaW9uIHRvIHRoZSBnZW5lcmljIHNjYW5uZXIgYHNjYW4nLiAqKVxuYW5kIHBhZF9wcmVjX3NjYW5mIDogdHlwZSBhIGMgZCBlIGYgeCB5IHogdCAuXG4gICAgU2Nhbm5pbmcuaW5fY2hhbm5lbCAtPiAoYSwgU2Nhbm5pbmcuaW5fY2hhbm5lbCwgYywgZCwgZSwgZikgZm10IC0+XG4gICAgICAoZCwgXykgaGV0ZXJfbGlzdCAtPiAoeCwgeSkgcGFkZGluZyAtPiAoeSwgeiAtPiBhKSBwcmVjaXNpb24gLT5cbiAgICAgIChpbnQgLT4gaW50IC0+IFNjYW5uaW5nLmluX2NoYW5uZWwgLT4gdCkgLT5cbiAgICAgIChTY2FubmluZy5pbl9jaGFubmVsIC0+IHopIC0+XG4gICAgICAoeCwgZikgaGV0ZXJfbGlzdCA9XG5mdW4gaWIgZm10IHJlYWRlcnMgcGFkIHByZWMgc2NhbiB0b2tlbiAtPiBtYXRjaCBwYWQsIHByZWMgd2l0aFxuICB8IE5vX3BhZGRpbmcsIE5vX3ByZWNpc2lvbiAtPlxuICAgIGxldCBfID0gc2NhbiBtYXhfaW50IG1heF9pbnQgaWIgaW5cbiAgICBsZXQgeCA9IHRva2VuIGliIGluXG4gICAgQ29ucyAoeCwgbWFrZV9zY2FuZiBpYiBmbXQgcmVhZGVycylcbiAgfCBOb19wYWRkaW5nLCBMaXRfcHJlY2lzaW9uIHAgLT5cbiAgICBsZXQgXyA9IHNjYW4gbWF4X2ludCBwIGliIGluXG4gICAgbGV0IHggPSB0b2tlbiBpYiBpblxuICAgIENvbnMgKHgsIG1ha2Vfc2NhbmYgaWIgZm10IHJlYWRlcnMpXG4gIHwgTGl0X3BhZGRpbmcgKChSaWdodCB8IFplcm9zKSwgdyksIE5vX3ByZWNpc2lvbiAtPlxuICAgIGxldCBfID0gc2NhbiB3IG1heF9pbnQgaWIgaW5cbiAgICBsZXQgeCA9IHRva2VuIGliIGluXG4gICAgQ29ucyAoeCwgbWFrZV9zY2FuZiBpYiBmbXQgcmVhZGVycylcbiAgfCBMaXRfcGFkZGluZyAoKFJpZ2h0IHwgWmVyb3MpLCB3KSwgTGl0X3ByZWNpc2lvbiBwIC0+XG4gICAgbGV0IF8gPSBzY2FuIHcgcCBpYiBpblxuICAgIGxldCB4ID0gdG9rZW4gaWIgaW5cbiAgICBDb25zICh4LCBtYWtlX3NjYW5mIGliIGZtdCByZWFkZXJzKVxuICB8IExpdF9wYWRkaW5nIChMZWZ0LCBfKSwgXyAtPlxuICAgIGludmFsaWRfYXJnIFwic2NhbmY6IGJhZCBjb252ZXJzaW9uIFxcXCIlLVxcXCJcIlxuICB8IExpdF9wYWRkaW5nICgoUmlnaHQgfCBaZXJvcyksIF8pLCBBcmdfcHJlY2lzaW9uIC0+XG4gICAgaW52YWxpZF9hcmcgXCJzY2FuZjogYmFkIGNvbnZlcnNpb24gXFxcIiUqXFxcIlwiXG4gIHwgQXJnX3BhZGRpbmcgXywgXyAtPlxuICAgIGludmFsaWRfYXJnIFwic2NhbmY6IGJhZCBjb252ZXJzaW9uIFxcXCIlKlxcXCJcIlxuICB8IE5vX3BhZGRpbmcsIEFyZ19wcmVjaXNpb24gLT5cbiAgICBpbnZhbGlkX2FyZyBcInNjYW5mOiBiYWQgY29udmVyc2lvbiBcXFwiJSpcXFwiXCJcblxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbiAgICAgICAgICAgICgqIERlZmluaW5nIFtzY2FuZl0gYW5kIHZhcmlvdXMgZmxhdm9ycyBvZiBbc2NhbmZdICopXG5cbnR5cGUgJ2Ega3NjYW5mX3Jlc3VsdCA9IEFyZ3Mgb2YgJ2EgfCBFeGMgb2YgZXhuXG5cbmxldCBrc2NhbmYgaWIgZWYgKEZvcm1hdCAoZm10LCBzdHIpKSA9XG4gIGxldCByZWMgYXBwbHkgOiB0eXBlIGEgYiAuIGEgLT4gKGEsIGIpIGhldGVyX2xpc3QgLT4gYiA9XG4gICAgZnVuIGYgYXJncyAtPiBtYXRjaCBhcmdzIHdpdGhcbiAgICB8IENvbnMgKHgsIHIpIC0+IGFwcGx5IChmIHgpIHJcbiAgICB8IE5pbCAtPiBmXG4gIGluXG4gIGxldCBrIHJlYWRlcnMgZiA9XG4gICAgU2Nhbm5pbmcucmVzZXRfdG9rZW4gaWI7XG4gICAgbWF0Y2ggdHJ5IEFyZ3MgKG1ha2Vfc2NhbmYgaWIgZm10IHJlYWRlcnMpIHdpdGhcbiAgICAgIHwgKFNjYW5fZmFpbHVyZSBfIHwgRmFpbHVyZSBfIHwgRW5kX29mX2ZpbGUpIGFzIGV4YyAtPiBFeGMgZXhjXG4gICAgICB8IEludmFsaWRfYXJndW1lbnQgbXNnIC0+XG4gICAgICAgIGludmFsaWRfYXJnIChtc2cgXiBcIiBpbiBmb3JtYXQgXFxcIlwiIF4gU3RyaW5nLmVzY2FwZWQgc3RyIF4gXCJcXFwiXCIpXG4gICAgd2l0aFxuICAgICAgfCBBcmdzIGFyZ3MgLT4gYXBwbHkgZiBhcmdzXG4gICAgICB8IEV4YyBleGMgLT4gZWYgaWIgZXhjXG4gIGluXG4gIHRha2VfZm9ybWF0X3JlYWRlcnMgayBmbXRcblxubGV0IGtic2NhbmYgPSBrc2NhbmZcblxuKCoqKilcblxubGV0IGtzc2NhbmYgcyBlZiBmbXQgPSBrYnNjYW5mIChTY2FubmluZy5mcm9tX3N0cmluZyBzKSBlZiBmbXRcbmxldCBrZnNjYW5mIGljIGVmIGZtdCA9IGtic2NhbmYgKFNjYW5uaW5nLmZyb21fY2hhbm5lbCBpYykgZWYgZm10XG5sZXQgYnNjYW5mIGliIGZtdCA9IGtzY2FuZiBpYiBzY2FuZl9iYWRfaW5wdXQgZm10XG5sZXQgZnNjYW5mIGljIGZtdCA9IGtzY2FuZiAoU2Nhbm5pbmcuZnJvbV9jaGFubmVsIGljKSBzY2FuZl9iYWRfaW5wdXQgZm10XG5sZXQgc3NjYW5mIHMgZm10ID0ga3NjYW5mIChTY2FubmluZy5mcm9tX3N0cmluZyBzKSBzY2FuZl9iYWRfaW5wdXQgZm10XG5sZXQgc2NhbmYgZm10ID0ga3NjYW5mIFNjYW5uaW5nLnN0ZGliIHNjYW5mX2JhZF9pbnB1dCBmbXRcblxuKCoqKilcblxubGV0IGJzY2FuZl9mb3JtYXQgOiBTY2FubmluZy5pbl9jaGFubmVsIC0+ICgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmb3JtYXQ2IC0+XG4gICgoJ2EsICdiLCAnYywgJ2QsICdlLCAnZikgZm9ybWF0NiAtPiAnZykgLT4gJ2cgPVxuICBmdW4gaWIgZm9ybWF0IGYgLT5cbiAgICBsZXQgXyA9IHNjYW5fY2FtbF9zdHJpbmcgbWF4X2ludCBpYiBpblxuICAgIGxldCBzdHIgPSB0b2tlbl9zdHJpbmcgaWIgaW5cbiAgICBsZXQgZm10JyA9XG4gICAgICB0cnkgZm9ybWF0X29mX3N0cmluZ19mb3JtYXQgc3RyIGZvcm1hdFxuICAgICAgd2l0aCBGYWlsdXJlIG1zZyAtPiBiYWRfaW5wdXQgbXNnXG4gICAgaW5cbiAgICBmIGZtdCdcblxubGV0IHNzY2FuZl9mb3JtYXQgOiBzdHJpbmcgLT4gKCdhLCAnYiwgJ2MsICdkLCAnZSwgJ2YpIGZvcm1hdDYgLT5cbiAgKCgnYSwgJ2IsICdjLCAnZCwgJ2UsICdmKSBmb3JtYXQ2IC0+ICdnKSAtPiAnZyA9XG4gIGZ1biBzIGZvcm1hdCBmIC0+IGJzY2FuZl9mb3JtYXQgKFNjYW5uaW5nLmZyb21fc3RyaW5nIHMpIGZvcm1hdCBmXG5cbmxldCBzdHJpbmdfdG9fU3RyaW5nIHMgPVxuICBsZXQgbCA9IFN0cmluZy5sZW5ndGggcyBpblxuICBsZXQgYiA9IEJ1ZmZlci5jcmVhdGUgKGwgKyAyKSBpblxuICBCdWZmZXIuYWRkX2NoYXIgYiAnXFxcIic7XG4gIGZvciBpID0gMCB0byBsIC0gMSBkb1xuICAgIGxldCBjID0gcy5baV0gaW5cbiAgICBpZiBjID0gJ1xcXCInIHRoZW4gQnVmZmVyLmFkZF9jaGFyIGIgJ1xcXFwnO1xuICAgIEJ1ZmZlci5hZGRfY2hhciBiIGM7XG4gIGRvbmU7XG4gIEJ1ZmZlci5hZGRfY2hhciBiICdcXFwiJztcbiAgQnVmZmVyLmNvbnRlbnRzIGJcbjs7XG5cbmxldCBmb3JtYXRfZnJvbV9zdHJpbmcgcyBmbXQgPVxuICBzc2NhbmZfZm9ybWF0IChzdHJpbmdfdG9fU3RyaW5nIHMpIGZtdCAoZnVuIHggLT4geClcbjs7XG5cbmxldCB1bmVzY2FwZWQgcyA9XG4gIHNzY2FuZiAoXCJcXFwiXCIgXiBzIF4gXCJcXFwiXCIpIFwiJVMlIVwiIChmdW4geCAtPiB4KVxuOztcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgWGF2aWVyIExlcm95LCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogUmVnaXN0ZXJpbmcgT0NhbWwgdmFsdWVzIHdpdGggdGhlIEMgcnVudGltZSBmb3IgbGF0ZXIgY2FsbGJhY2tzICopXG5cbmV4dGVybmFsIHJlZ2lzdGVyX25hbWVkX3ZhbHVlIDogc3RyaW5nIC0+IE9iai50IC0+IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gXCJjYW1sX3JlZ2lzdGVyX25hbWVkX3ZhbHVlXCJcblxubGV0IHJlZ2lzdGVyIG5hbWUgdiA9XG4gIHJlZ2lzdGVyX25hbWVkX3ZhbHVlIG5hbWUgKE9iai5yZXByIHYpXG5cbmxldCByZWdpc3Rlcl9leGNlcHRpb24gbmFtZSAoZXhuIDogZXhuKSA9XG4gIGxldCBleG4gPSBPYmoucmVwciBleG4gaW5cbiAgbGV0IHNsb3QgPSBpZiBPYmoudGFnIGV4biA9IE9iai5vYmplY3RfdGFnIHRoZW4gZXhuIGVsc2UgT2JqLmZpZWxkIGV4biAwIGluXG4gIHJlZ2lzdGVyX25hbWVkX3ZhbHVlIG5hbWUgc2xvdFxuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICBKZXJvbWUgVm91aWxsb24sIHByb2pldCBDcmlzdGFsLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAyMDAyIEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG5vcGVuIE9ialxuXG4oKioqKiBPYmplY3QgcmVwcmVzZW50YXRpb24gKioqKilcblxuZXh0ZXJuYWwgc2V0X2lkOiAnYSAtPiAnYSA9IFwiY2FtbF9zZXRfb29faWRcIiBcIm5vYWxsb2NcIlxuXG4oKioqKiBPYmplY3QgY29weSAqKioqKVxuXG5sZXQgY29weSBvID1cbiAgbGV0IG8gPSAoT2JqLm9iaiAoT2JqLmR1cCAoT2JqLnJlcHIgbykpKSBpblxuICBzZXRfaWQgb1xuXG4oKioqKiBDb21wcmVzc2lvbiBvcHRpb25zICoqKiopXG4oKiBQYXJhbWV0ZXJzICopXG50eXBlIHBhcmFtcyA9IHtcbiAgICBtdXRhYmxlIGNvbXBhY3RfdGFibGUgOiBib29sO1xuICAgIG11dGFibGUgY29weV9wYXJlbnQgOiBib29sO1xuICAgIG11dGFibGUgY2xlYW5fd2hlbl9jb3B5aW5nIDogYm9vbDtcbiAgICBtdXRhYmxlIHJldHJ5X2NvdW50IDogaW50O1xuICAgIG11dGFibGUgYnVja2V0X3NtYWxsX3NpemUgOiBpbnRcbiAgfVxuXG5sZXQgcGFyYW1zID0ge1xuICBjb21wYWN0X3RhYmxlID0gdHJ1ZTtcbiAgY29weV9wYXJlbnQgPSB0cnVlO1xuICBjbGVhbl93aGVuX2NvcHlpbmcgPSB0cnVlO1xuICByZXRyeV9jb3VudCA9IDM7XG4gIGJ1Y2tldF9zbWFsbF9zaXplID0gMTZcbn1cblxuKCoqKiogUGFyYW1ldGVycyAqKioqKVxuXG5sZXQgc3RlcCA9IFN5cy53b3JkX3NpemUgLyAxNlxubGV0IGluaXRpYWxfb2JqZWN0X3NpemUgPSAyXG5cbigqKioqIEl0ZW1zICoqKiopXG5cbnR5cGUgaXRlbSA9IER1bW15QSB8IER1bW15QiB8IER1bW15QyBvZiBpbnRcbmxldCBfID0gW0R1bW15QTsgRHVtbXlCOyBEdW1teUMgMF0gKCogdG8gYXZvaWQgd2FybmluZ3MgKilcblxubGV0IGR1bW15X2l0ZW0gPSAobWFnaWMgKCkgOiBpdGVtKVxuXG4oKioqKiBUeXBlcyAqKioqKVxuXG50eXBlIHRhZ1xudHlwZSBsYWJlbCA9IGludFxudHlwZSBjbG9zdXJlID0gaXRlbVxudHlwZSB0ID0gRHVtbXlBIHwgRHVtbXlCIHwgRHVtbXlDIG9mIGludFxubGV0IF8gPSBbRHVtbXlBOyBEdW1teUI7IER1bW15QyAwXSAoKiB0byBhdm9pZCB3YXJuaW5ncyAqKVxuXG50eXBlIG9iaiA9IHQgYXJyYXlcbmV4dGVybmFsIHJldCA6IChvYmogLT4gJ2EpIC0+IGNsb3N1cmUgPSBcIiVpZGVudGl0eVwiXG5cbigqKioqIExhYmVscyAqKioqKVxuXG5sZXQgcHVibGljX21ldGhvZF9sYWJlbCBzIDogdGFnID1cbiAgbGV0IGFjY3UgPSByZWYgMCBpblxuICBmb3IgaSA9IDAgdG8gU3RyaW5nLmxlbmd0aCBzIC0gMSBkb1xuICAgIGFjY3UgOj0gMjIzICogIWFjY3UgKyBDaGFyLmNvZGUgcy5baV1cbiAgZG9uZTtcbiAgKCogcmVkdWNlIHRvIDMxIGJpdHMgKilcbiAgYWNjdSA6PSAhYWNjdSBsYW5kICgxIGxzbCAzMSAtIDEpO1xuICAoKiBtYWtlIGl0IHNpZ25lZCBmb3IgNjQgYml0cyBhcmNoaXRlY3R1cmVzICopXG4gIGxldCB0YWcgPSBpZiAhYWNjdSA+IDB4M0ZGRkZGRkYgdGhlbiAhYWNjdSAtICgxIGxzbCAzMSkgZWxzZSAhYWNjdSBpblxuICAoKiBQcmludGYuZXByaW50ZiBcIiVzID0gJWRcXG5cIiBzIHRhZzsgZmx1c2ggc3RkZXJyOyAqKVxuICBtYWdpYyB0YWdcblxuKCoqKiogU3BhcnNlIGFycmF5ICoqKiopXG5cbm1vZHVsZSBWYXJzID1cbiAgTWFwLk1ha2Uoc3RydWN0IHR5cGUgdCA9IHN0cmluZyBsZXQgY29tcGFyZSAoeDp0KSB5ID0gY29tcGFyZSB4IHkgZW5kKVxudHlwZSB2YXJzID0gaW50IFZhcnMudFxuXG5tb2R1bGUgTWV0aHMgPVxuICBNYXAuTWFrZShzdHJ1Y3QgdHlwZSB0ID0gc3RyaW5nIGxldCBjb21wYXJlICh4OnQpIHkgPSBjb21wYXJlIHggeSBlbmQpXG50eXBlIG1ldGhzID0gbGFiZWwgTWV0aHMudFxubW9kdWxlIExhYnMgPVxuICBNYXAuTWFrZShzdHJ1Y3QgdHlwZSB0ID0gbGFiZWwgbGV0IGNvbXBhcmUgKHg6dCkgeSA9IGNvbXBhcmUgeCB5IGVuZClcbnR5cGUgbGFicyA9IGJvb2wgTGFicy50XG5cbigqIFRoZSBjb21waWxlciBhc3N1bWVzIHRoYXQgdGhlIGZpcnN0IGZpZWxkIG9mIHRoaXMgc3RydWN0dXJlIGlzIFtzaXplXS4gKilcbnR5cGUgdGFibGUgPVxuIHsgbXV0YWJsZSBzaXplOiBpbnQ7XG4gICBtdXRhYmxlIG1ldGhvZHM6IGNsb3N1cmUgYXJyYXk7XG4gICBtdXRhYmxlIG1ldGhvZHNfYnlfbmFtZTogbWV0aHM7XG4gICBtdXRhYmxlIG1ldGhvZHNfYnlfbGFiZWw6IGxhYnM7XG4gICBtdXRhYmxlIHByZXZpb3VzX3N0YXRlczpcbiAgICAgKG1ldGhzICogbGFicyAqIChsYWJlbCAqIGl0ZW0pIGxpc3QgKiB2YXJzICpcbiAgICAgIGxhYmVsIGxpc3QgKiBzdHJpbmcgbGlzdCkgbGlzdDtcbiAgIG11dGFibGUgaGlkZGVuX21ldGhzOiAobGFiZWwgKiBpdGVtKSBsaXN0O1xuICAgbXV0YWJsZSB2YXJzOiB2YXJzO1xuICAgbXV0YWJsZSBpbml0aWFsaXplcnM6IChvYmogLT4gdW5pdCkgbGlzdCB9XG5cbmxldCBkdW1teV90YWJsZSA9XG4gIHsgbWV0aG9kcyA9IFt8IGR1bW15X2l0ZW0gfF07XG4gICAgbWV0aG9kc19ieV9uYW1lID0gTWV0aHMuZW1wdHk7XG4gICAgbWV0aG9kc19ieV9sYWJlbCA9IExhYnMuZW1wdHk7XG4gICAgcHJldmlvdXNfc3RhdGVzID0gW107XG4gICAgaGlkZGVuX21ldGhzID0gW107XG4gICAgdmFycyA9IFZhcnMuZW1wdHk7XG4gICAgaW5pdGlhbGl6ZXJzID0gW107XG4gICAgc2l6ZSA9IDAgfVxuXG5sZXQgdGFibGVfY291bnQgPSByZWYgMFxuXG4oKiBkdW1teV9tZXQgc2hvdWxkIGJlIGEgcG9pbnRlciwgc28gdXNlIGFuIGF0b20gKilcbmxldCBkdW1teV9tZXQgOiBpdGVtID0gb2JqIChPYmoubmV3X2Jsb2NrIDAgMClcbigqIGlmIGRlYnVnZ2luZyBpcyBuZWVkZWQsIHRoaXMgY291bGQgYmUgYSBnb29kIGlkZWE6ICopXG4oKiBsZXQgZHVtbXlfbWV0ICgpID0gZmFpbHdpdGggXCJVbmRlZmluZWQgbWV0aG9kXCIgKilcblxubGV0IHJlYyBmaXRfc2l6ZSBuID1cbiAgaWYgbiA8PSAyIHRoZW4gbiBlbHNlXG4gIGZpdF9zaXplICgobisxKS8yKSAqIDJcblxubGV0IG5ld190YWJsZSBwdWJfbGFiZWxzID1cbiAgaW5jciB0YWJsZV9jb3VudDtcbiAgbGV0IGxlbiA9IEFycmF5Lmxlbmd0aCBwdWJfbGFiZWxzIGluXG4gIGxldCBtZXRob2RzID0gQXJyYXkubWFrZSAobGVuKjIrMikgZHVtbXlfbWV0IGluXG4gIG1ldGhvZHMuKDApIDwtIG1hZ2ljIGxlbjtcbiAgbWV0aG9kcy4oMSkgPC0gbWFnaWMgKGZpdF9zaXplIGxlbiAqIFN5cy53b3JkX3NpemUgLyA4IC0gMSk7XG4gIGZvciBpID0gMCB0byBsZW4gLSAxIGRvIG1ldGhvZHMuKGkqMiszKSA8LSBtYWdpYyBwdWJfbGFiZWxzLihpKSBkb25lO1xuICB7IG1ldGhvZHMgPSBtZXRob2RzO1xuICAgIG1ldGhvZHNfYnlfbmFtZSA9IE1ldGhzLmVtcHR5O1xuICAgIG1ldGhvZHNfYnlfbGFiZWwgPSBMYWJzLmVtcHR5O1xuICAgIHByZXZpb3VzX3N0YXRlcyA9IFtdO1xuICAgIGhpZGRlbl9tZXRocyA9IFtdO1xuICAgIHZhcnMgPSBWYXJzLmVtcHR5O1xuICAgIGluaXRpYWxpemVycyA9IFtdO1xuICAgIHNpemUgPSBpbml0aWFsX29iamVjdF9zaXplIH1cblxubGV0IHJlc2l6ZSBhcnJheSBuZXdfc2l6ZSA9XG4gIGxldCBvbGRfc2l6ZSA9IEFycmF5Lmxlbmd0aCBhcnJheS5tZXRob2RzIGluXG4gIGlmIG5ld19zaXplID4gb2xkX3NpemUgdGhlbiBiZWdpblxuICAgIGxldCBuZXdfYnVjayA9IEFycmF5Lm1ha2UgbmV3X3NpemUgZHVtbXlfbWV0IGluXG4gICAgQXJyYXkuYmxpdCBhcnJheS5tZXRob2RzIDAgbmV3X2J1Y2sgMCBvbGRfc2l6ZTtcbiAgICBhcnJheS5tZXRob2RzIDwtIG5ld19idWNrXG4gZW5kXG5cbmxldCBwdXQgYXJyYXkgbGFiZWwgZWxlbWVudCA9XG4gIHJlc2l6ZSBhcnJheSAobGFiZWwgKyAxKTtcbiAgYXJyYXkubWV0aG9kcy4obGFiZWwpIDwtIGVsZW1lbnRcblxuKCoqKiogQ2xhc3NlcyAqKioqKVxuXG5sZXQgbWV0aG9kX2NvdW50ID0gcmVmIDBcbmxldCBpbnN0X3Zhcl9jb3VudCA9IHJlZiAwXG5cbigqIHR5cGUgdCAqKVxudHlwZSBtZXRoID0gaXRlbVxuXG5sZXQgbmV3X21ldGhvZCB0YWJsZSA9XG4gIGxldCBpbmRleCA9IEFycmF5Lmxlbmd0aCB0YWJsZS5tZXRob2RzIGluXG4gIHJlc2l6ZSB0YWJsZSAoaW5kZXggKyAxKTtcbiAgaW5kZXhcblxubGV0IGdldF9tZXRob2RfbGFiZWwgdGFibGUgbmFtZSA9XG4gIHRyeVxuICAgIE1ldGhzLmZpbmQgbmFtZSB0YWJsZS5tZXRob2RzX2J5X25hbWVcbiAgd2l0aCBOb3RfZm91bmQgLT5cbiAgICBsZXQgbGFiZWwgPSBuZXdfbWV0aG9kIHRhYmxlIGluXG4gICAgdGFibGUubWV0aG9kc19ieV9uYW1lIDwtIE1ldGhzLmFkZCBuYW1lIGxhYmVsIHRhYmxlLm1ldGhvZHNfYnlfbmFtZTtcbiAgICB0YWJsZS5tZXRob2RzX2J5X2xhYmVsIDwtIExhYnMuYWRkIGxhYmVsIHRydWUgdGFibGUubWV0aG9kc19ieV9sYWJlbDtcbiAgICBsYWJlbFxuXG5sZXQgZ2V0X21ldGhvZF9sYWJlbHMgdGFibGUgbmFtZXMgPVxuICBBcnJheS5tYXAgKGdldF9tZXRob2RfbGFiZWwgdGFibGUpIG5hbWVzXG5cbmxldCBzZXRfbWV0aG9kIHRhYmxlIGxhYmVsIGVsZW1lbnQgPVxuICBpbmNyIG1ldGhvZF9jb3VudDtcbiAgaWYgTGFicy5maW5kIGxhYmVsIHRhYmxlLm1ldGhvZHNfYnlfbGFiZWwgdGhlblxuICAgIHB1dCB0YWJsZSBsYWJlbCBlbGVtZW50XG4gIGVsc2VcbiAgICB0YWJsZS5oaWRkZW5fbWV0aHMgPC0gKGxhYmVsLCBlbGVtZW50KSA6OiB0YWJsZS5oaWRkZW5fbWV0aHNcblxubGV0IGdldF9tZXRob2QgdGFibGUgbGFiZWwgPVxuICB0cnkgTGlzdC5hc3NvYyBsYWJlbCB0YWJsZS5oaWRkZW5fbWV0aHNcbiAgd2l0aCBOb3RfZm91bmQgLT4gdGFibGUubWV0aG9kcy4obGFiZWwpXG5cbmxldCB0b19saXN0IGFyciA9XG4gIGlmIGFyciA9PSBtYWdpYyAwIHRoZW4gW10gZWxzZSBBcnJheS50b19saXN0IGFyclxuXG5sZXQgbmFycm93IHRhYmxlIHZhcnMgdmlydF9tZXRocyBjb25jcl9tZXRocyA9XG4gIGxldCB2YXJzID0gdG9fbGlzdCB2YXJzXG4gIGFuZCB2aXJ0X21ldGhzID0gdG9fbGlzdCB2aXJ0X21ldGhzXG4gIGFuZCBjb25jcl9tZXRocyA9IHRvX2xpc3QgY29uY3JfbWV0aHMgaW5cbiAgbGV0IHZpcnRfbWV0aF9sYWJzID0gTGlzdC5tYXAgKGdldF9tZXRob2RfbGFiZWwgdGFibGUpIHZpcnRfbWV0aHMgaW5cbiAgbGV0IGNvbmNyX21ldGhfbGFicyA9IExpc3QubWFwIChnZXRfbWV0aG9kX2xhYmVsIHRhYmxlKSBjb25jcl9tZXRocyBpblxuICB0YWJsZS5wcmV2aW91c19zdGF0ZXMgPC1cbiAgICAgKHRhYmxlLm1ldGhvZHNfYnlfbmFtZSwgdGFibGUubWV0aG9kc19ieV9sYWJlbCwgdGFibGUuaGlkZGVuX21ldGhzLFxuICAgICAgdGFibGUudmFycywgdmlydF9tZXRoX2xhYnMsIHZhcnMpXG4gICAgIDo6IHRhYmxlLnByZXZpb3VzX3N0YXRlcztcbiAgdGFibGUudmFycyA8LVxuICAgIFZhcnMuZm9sZFxuICAgICAgKGZ1biBsYWIgaW5mbyB0dmFycyAtPlxuICAgICAgICBpZiBMaXN0Lm1lbSBsYWIgdmFycyB0aGVuIFZhcnMuYWRkIGxhYiBpbmZvIHR2YXJzIGVsc2UgdHZhcnMpXG4gICAgICB0YWJsZS52YXJzIFZhcnMuZW1wdHk7XG4gIGxldCBieV9uYW1lID0gcmVmIE1ldGhzLmVtcHR5IGluXG4gIGxldCBieV9sYWJlbCA9IHJlZiBMYWJzLmVtcHR5IGluXG4gIExpc3QuaXRlcjJcbiAgICAoZnVuIG1ldCBsYWJlbCAtPlxuICAgICAgIGJ5X25hbWUgOj0gTWV0aHMuYWRkIG1ldCBsYWJlbCAhYnlfbmFtZTtcbiAgICAgICBieV9sYWJlbCA6PVxuICAgICAgICAgIExhYnMuYWRkIGxhYmVsXG4gICAgICAgICAgICAodHJ5IExhYnMuZmluZCBsYWJlbCB0YWJsZS5tZXRob2RzX2J5X2xhYmVsIHdpdGggTm90X2ZvdW5kIC0+IHRydWUpXG4gICAgICAgICAgICAhYnlfbGFiZWwpXG4gICAgY29uY3JfbWV0aHMgY29uY3JfbWV0aF9sYWJzO1xuICBMaXN0Lml0ZXIyXG4gICAgKGZ1biBtZXQgbGFiZWwgLT5cbiAgICAgICBieV9uYW1lIDo9IE1ldGhzLmFkZCBtZXQgbGFiZWwgIWJ5X25hbWU7XG4gICAgICAgYnlfbGFiZWwgOj0gTGFicy5hZGQgbGFiZWwgZmFsc2UgIWJ5X2xhYmVsKVxuICAgIHZpcnRfbWV0aHMgdmlydF9tZXRoX2xhYnM7XG4gIHRhYmxlLm1ldGhvZHNfYnlfbmFtZSA8LSAhYnlfbmFtZTtcbiAgdGFibGUubWV0aG9kc19ieV9sYWJlbCA8LSAhYnlfbGFiZWw7XG4gIHRhYmxlLmhpZGRlbl9tZXRocyA8LVxuICAgICBMaXN0LmZvbGRfcmlnaHRcbiAgICAgICAoZnVuICgobGFiLCBfKSBhcyBtZXQpIGhtIC0+XG4gICAgICAgICAgaWYgTGlzdC5tZW0gbGFiIHZpcnRfbWV0aF9sYWJzIHRoZW4gaG0gZWxzZSBtZXQ6OmhtKVxuICAgICAgIHRhYmxlLmhpZGRlbl9tZXRoc1xuICAgICAgIFtdXG5cbmxldCB3aWRlbiB0YWJsZSA9XG4gIGxldCAoYnlfbmFtZSwgYnlfbGFiZWwsIHNhdmVkX2hpZGRlbl9tZXRocywgc2F2ZWRfdmFycywgdmlydF9tZXRocywgdmFycykgPVxuICAgIExpc3QuaGQgdGFibGUucHJldmlvdXNfc3RhdGVzXG4gIGluXG4gIHRhYmxlLnByZXZpb3VzX3N0YXRlcyA8LSBMaXN0LnRsIHRhYmxlLnByZXZpb3VzX3N0YXRlcztcbiAgdGFibGUudmFycyA8LVxuICAgICBMaXN0LmZvbGRfbGVmdFxuICAgICAgIChmdW4gcyB2IC0+IFZhcnMuYWRkIHYgKFZhcnMuZmluZCB2IHRhYmxlLnZhcnMpIHMpXG4gICAgICAgc2F2ZWRfdmFycyB2YXJzO1xuICB0YWJsZS5tZXRob2RzX2J5X25hbWUgPC0gYnlfbmFtZTtcbiAgdGFibGUubWV0aG9kc19ieV9sYWJlbCA8LSBieV9sYWJlbDtcbiAgdGFibGUuaGlkZGVuX21ldGhzIDwtXG4gICAgIExpc3QuZm9sZF9yaWdodFxuICAgICAgIChmdW4gKChsYWIsIF8pIGFzIG1ldCkgaG0gLT5cbiAgICAgICAgICBpZiBMaXN0Lm1lbSBsYWIgdmlydF9tZXRocyB0aGVuIGhtIGVsc2UgbWV0OjpobSlcbiAgICAgICB0YWJsZS5oaWRkZW5fbWV0aHNcbiAgICAgICBzYXZlZF9oaWRkZW5fbWV0aHNcblxubGV0IG5ld19zbG90IHRhYmxlID1cbiAgbGV0IGluZGV4ID0gdGFibGUuc2l6ZSBpblxuICB0YWJsZS5zaXplIDwtIGluZGV4ICsgMTtcbiAgaW5kZXhcblxubGV0IG5ld192YXJpYWJsZSB0YWJsZSBuYW1lID1cbiAgdHJ5IFZhcnMuZmluZCBuYW1lIHRhYmxlLnZhcnNcbiAgd2l0aCBOb3RfZm91bmQgLT5cbiAgICBsZXQgaW5kZXggPSBuZXdfc2xvdCB0YWJsZSBpblxuICAgIGlmIG5hbWUgPD4gXCJcIiB0aGVuIHRhYmxlLnZhcnMgPC0gVmFycy5hZGQgbmFtZSBpbmRleCB0YWJsZS52YXJzO1xuICAgIGluZGV4XG5cbmxldCB0b19hcnJheSBhcnIgPVxuICBpZiBhcnIgPSBPYmoubWFnaWMgMCB0aGVuIFt8fF0gZWxzZSBhcnJcblxubGV0IG5ld19tZXRob2RzX3ZhcmlhYmxlcyB0YWJsZSBtZXRocyB2YWxzID1cbiAgbGV0IG1ldGhzID0gdG9fYXJyYXkgbWV0aHMgaW5cbiAgbGV0IG5tZXRocyA9IEFycmF5Lmxlbmd0aCBtZXRocyBhbmQgbnZhbHMgPSBBcnJheS5sZW5ndGggdmFscyBpblxuICBsZXQgcmVzID0gQXJyYXkubWFrZSAobm1ldGhzICsgbnZhbHMpIDAgaW5cbiAgZm9yIGkgPSAwIHRvIG5tZXRocyAtIDEgZG9cbiAgICByZXMuKGkpIDwtIGdldF9tZXRob2RfbGFiZWwgdGFibGUgbWV0aHMuKGkpXG4gIGRvbmU7XG4gIGZvciBpID0gMCB0byBudmFscyAtIDEgZG9cbiAgICByZXMuKGkrbm1ldGhzKSA8LSBuZXdfdmFyaWFibGUgdGFibGUgdmFscy4oaSlcbiAgZG9uZTtcbiAgcmVzXG5cbmxldCBnZXRfdmFyaWFibGUgdGFibGUgbmFtZSA9XG4gIHRyeSBWYXJzLmZpbmQgbmFtZSB0YWJsZS52YXJzIHdpdGggTm90X2ZvdW5kIC0+IGFzc2VydCBmYWxzZVxuXG5sZXQgZ2V0X3ZhcmlhYmxlcyB0YWJsZSBuYW1lcyA9XG4gIEFycmF5Lm1hcCAoZ2V0X3ZhcmlhYmxlIHRhYmxlKSBuYW1lc1xuXG5sZXQgYWRkX2luaXRpYWxpemVyIHRhYmxlIGYgPVxuICB0YWJsZS5pbml0aWFsaXplcnMgPC0gZjo6dGFibGUuaW5pdGlhbGl6ZXJzXG5cbigqXG5tb2R1bGUgS2V5cyA9XG4gIE1hcC5NYWtlKHN0cnVjdCB0eXBlIHQgPSB0YWcgYXJyYXkgbGV0IGNvbXBhcmUgKHg6dCkgeSA9IGNvbXBhcmUgeCB5IGVuZClcbmxldCBrZXlfbWFwID0gcmVmIEtleXMuZW1wdHlcbmxldCBnZXRfa2V5IHRhZ3MgOiBpdGVtID1cbiAgdHJ5IG1hZ2ljIChLZXlzLmZpbmQgdGFncyAha2V5X21hcCA6IHRhZyBhcnJheSlcbiAgd2l0aCBOb3RfZm91bmQgLT5cbiAgICBrZXlfbWFwIDo9IEtleXMuYWRkIHRhZ3MgdGFncyAha2V5X21hcDtcbiAgICBtYWdpYyB0YWdzXG4qKVxuXG5sZXQgY3JlYXRlX3RhYmxlIHB1YmxpY19tZXRob2RzID1cbiAgaWYgcHVibGljX21ldGhvZHMgPT0gbWFnaWMgMCB0aGVuIG5ld190YWJsZSBbfHxdIGVsc2VcbiAgKCogW3B1YmxpY19tZXRob2RzXSBtdXN0IGJlIGluIGFzY2VuZGluZyBvcmRlciBmb3IgYnl0ZWNvZGUgKilcbiAgbGV0IHRhZ3MgPSBBcnJheS5tYXAgcHVibGljX21ldGhvZF9sYWJlbCBwdWJsaWNfbWV0aG9kcyBpblxuICBsZXQgdGFibGUgPSBuZXdfdGFibGUgdGFncyBpblxuICBBcnJheS5pdGVyaVxuICAgIChmdW4gaSBtZXQgLT5cbiAgICAgIGxldCBsYWIgPSBpKjIrMiBpblxuICAgICAgdGFibGUubWV0aG9kc19ieV9uYW1lICA8LSBNZXRocy5hZGQgbWV0IGxhYiB0YWJsZS5tZXRob2RzX2J5X25hbWU7XG4gICAgICB0YWJsZS5tZXRob2RzX2J5X2xhYmVsIDwtIExhYnMuYWRkIGxhYiB0cnVlIHRhYmxlLm1ldGhvZHNfYnlfbGFiZWwpXG4gICAgcHVibGljX21ldGhvZHM7XG4gIHRhYmxlXG5cbmxldCBpbml0X2NsYXNzIHRhYmxlID1cbiAgaW5zdF92YXJfY291bnQgOj0gIWluc3RfdmFyX2NvdW50ICsgdGFibGUuc2l6ZSAtIDE7XG4gIHRhYmxlLmluaXRpYWxpemVycyA8LSBMaXN0LnJldiB0YWJsZS5pbml0aWFsaXplcnM7XG4gIHJlc2l6ZSB0YWJsZSAoMyArIG1hZ2ljIHRhYmxlLm1ldGhvZHMuKDEpICogMTYgLyBTeXMud29yZF9zaXplKVxuXG5sZXQgaW5oZXJpdHMgY2xhIHZhbHMgdmlydF9tZXRocyBjb25jcl9tZXRocyAoXywgc3VwZXIsIF8sIGVudikgdG9wID1cbiAgbmFycm93IGNsYSB2YWxzIHZpcnRfbWV0aHMgY29uY3JfbWV0aHM7XG4gIGxldCBpbml0ID1cbiAgICBpZiB0b3AgdGhlbiBzdXBlciBjbGEgZW52IGVsc2UgT2JqLnJlcHIgKHN1cGVyIGNsYSkgaW5cbiAgd2lkZW4gY2xhO1xuICBBcnJheS5jb25jYXRcbiAgICBbW3wgcmVwciBpbml0IHxdO1xuICAgICBtYWdpYyAoQXJyYXkubWFwIChnZXRfdmFyaWFibGUgY2xhKSAodG9fYXJyYXkgdmFscykgOiBpbnQgYXJyYXkpO1xuICAgICBBcnJheS5tYXBcbiAgICAgICAoZnVuIG5tIC0+IHJlcHIgKGdldF9tZXRob2QgY2xhIChnZXRfbWV0aG9kX2xhYmVsIGNsYSBubSkgOiBjbG9zdXJlKSlcbiAgICAgICAodG9fYXJyYXkgY29uY3JfbWV0aHMpIF1cblxubGV0IG1ha2VfY2xhc3MgcHViX21ldGhzIGNsYXNzX2luaXQgPVxuICBsZXQgdGFibGUgPSBjcmVhdGVfdGFibGUgcHViX21ldGhzIGluXG4gIGxldCBlbnZfaW5pdCA9IGNsYXNzX2luaXQgdGFibGUgaW5cbiAgaW5pdF9jbGFzcyB0YWJsZTtcbiAgKGVudl9pbml0IChPYmoucmVwciAwKSwgY2xhc3NfaW5pdCwgZW52X2luaXQsIE9iai5yZXByIDApXG5cbnR5cGUgaW5pdF90YWJsZSA9IHsgbXV0YWJsZSBlbnZfaW5pdDogdDsgbXV0YWJsZSBjbGFzc19pbml0OiB0YWJsZSAtPiB0IH1cblxubGV0IG1ha2VfY2xhc3Nfc3RvcmUgcHViX21ldGhzIGNsYXNzX2luaXQgaW5pdF90YWJsZSA9XG4gIGxldCB0YWJsZSA9IGNyZWF0ZV90YWJsZSBwdWJfbWV0aHMgaW5cbiAgbGV0IGVudl9pbml0ID0gY2xhc3NfaW5pdCB0YWJsZSBpblxuICBpbml0X2NsYXNzIHRhYmxlO1xuICBpbml0X3RhYmxlLmNsYXNzX2luaXQgPC0gY2xhc3NfaW5pdDtcbiAgaW5pdF90YWJsZS5lbnZfaW5pdCA8LSBlbnZfaW5pdFxuXG5sZXQgZHVtbXlfY2xhc3MgbG9jID1cbiAgbGV0IHVuZGVmID0gZnVuIF8gLT4gcmFpc2UgKFVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlIGxvYykgaW5cbiAgKE9iai5tYWdpYyB1bmRlZiwgdW5kZWYsIHVuZGVmLCBPYmoucmVwciAwKVxuXG4oKioqKiBPYmplY3RzICoqKiopXG5cbmxldCBjcmVhdGVfb2JqZWN0IHRhYmxlID1cbiAgKCogWFhYIEFwcGVsIGRlIFtvYmpfYmxvY2tdICopXG4gIGxldCBvYmogPSBPYmoubmV3X2Jsb2NrIE9iai5vYmplY3RfdGFnIHRhYmxlLnNpemUgaW5cbiAgKCogWFhYIEFwcGVsIGRlIFtjYW1sX21vZGlmeV0gKilcbiAgT2JqLnNldF9maWVsZCBvYmogMCAoT2JqLnJlcHIgdGFibGUubWV0aG9kcyk7XG4gIE9iai5vYmogKHNldF9pZCBvYmopXG5cbmxldCBjcmVhdGVfb2JqZWN0X29wdCBvYmpfMCB0YWJsZSA9XG4gIGlmIChPYmoubWFnaWMgb2JqXzAgOiBib29sKSB0aGVuIG9ial8wIGVsc2UgYmVnaW5cbiAgICAoKiBYWFggQXBwZWwgZGUgW29ial9ibG9ja10gKilcbiAgICBsZXQgb2JqID0gT2JqLm5ld19ibG9jayBPYmoub2JqZWN0X3RhZyB0YWJsZS5zaXplIGluXG4gICAgKCogWFhYIEFwcGVsIGRlIFtjYW1sX21vZGlmeV0gKilcbiAgICBPYmouc2V0X2ZpZWxkIG9iaiAwIChPYmoucmVwciB0YWJsZS5tZXRob2RzKTtcbiAgICBPYmoub2JqIChzZXRfaWQgb2JqKVxuICBlbmRcblxubGV0IHJlYyBpdGVyX2Ygb2JqID1cbiAgZnVuY3Rpb25cbiAgICBbXSAgIC0+ICgpXG4gIHwgZjo6bCAtPiBmIG9iajsgaXRlcl9mIG9iaiBsXG5cbmxldCBydW5faW5pdGlhbGl6ZXJzIG9iaiB0YWJsZSA9XG4gIGxldCBpbml0cyA9IHRhYmxlLmluaXRpYWxpemVycyBpblxuICBpZiBpbml0cyA8PiBbXSB0aGVuXG4gICAgaXRlcl9mIG9iaiBpbml0c1xuXG5sZXQgcnVuX2luaXRpYWxpemVyc19vcHQgb2JqXzAgb2JqIHRhYmxlID1cbiAgaWYgKE9iai5tYWdpYyBvYmpfMCA6IGJvb2wpIHRoZW4gb2JqIGVsc2UgYmVnaW5cbiAgICBsZXQgaW5pdHMgPSB0YWJsZS5pbml0aWFsaXplcnMgaW5cbiAgICBpZiBpbml0cyA8PiBbXSB0aGVuIGl0ZXJfZiBvYmogaW5pdHM7XG4gICAgb2JqXG4gIGVuZFxuXG5sZXQgY3JlYXRlX29iamVjdF9hbmRfcnVuX2luaXRpYWxpemVycyBvYmpfMCB0YWJsZSA9XG4gIGlmIChPYmoubWFnaWMgb2JqXzAgOiBib29sKSB0aGVuIG9ial8wIGVsc2UgYmVnaW5cbiAgICBsZXQgb2JqID0gY3JlYXRlX29iamVjdCB0YWJsZSBpblxuICAgIHJ1bl9pbml0aWFsaXplcnMgb2JqIHRhYmxlO1xuICAgIG9ialxuICBlbmRcblxuKCogRXF1aXZhbGVudCBwcmltaXRpdmUgYmVsb3dcbmxldCBzZW5kc2VsZiBvYmogbGFiID1cbiAgKG1hZ2ljIG9iaiA6IChvYmogLT4gdCkgYXJyYXkgYXJyYXkpLigwKS4obGFiKSBvYmpcbiopXG5leHRlcm5hbCBzZW5kIDogb2JqIC0+IHRhZyAtPiAnYSA9IFwiJXNlbmRcIlxuZXh0ZXJuYWwgc2VuZGNhY2hlIDogb2JqIC0+IHRhZyAtPiB0IC0+IGludCAtPiAnYSA9IFwiJXNlbmRjYWNoZVwiXG5leHRlcm5hbCBzZW5kc2VsZiA6IG9iaiAtPiBsYWJlbCAtPiAnYSA9IFwiJXNlbmRzZWxmXCJcbmV4dGVybmFsIGdldF9wdWJsaWNfbWV0aG9kIDogb2JqIC0+IHRhZyAtPiBjbG9zdXJlXG4gICAgPSBcImNhbWxfZ2V0X3B1YmxpY19tZXRob2RcIiBcIm5vYWxsb2NcIlxuXG4oKioqKiB0YWJsZSBjb2xsZWN0aW9uIGFjY2VzcyAqKioqKVxuXG50eXBlIHRhYmxlcyA9IEVtcHR5IHwgQ29ucyBvZiBjbG9zdXJlICogdGFibGVzICogdGFibGVzXG50eXBlIG11dF90YWJsZXMgPVxuICAgIHtrZXk6IGNsb3N1cmU7IG11dGFibGUgZGF0YTogdGFibGVzOyBtdXRhYmxlIG5leHQ6IHRhYmxlc31cbmV4dGVybmFsIG11dCA6IHRhYmxlcyAtPiBtdXRfdGFibGVzID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgZGVtdXQgOiBtdXRfdGFibGVzIC0+IHRhYmxlcyA9IFwiJWlkZW50aXR5XCJcblxubGV0IGJ1aWxkX3BhdGggbiBrZXlzIHRhYmxlcyA9XG4gICgqIEJlIGNhcmVmdWwgbm90IHRvIGNyZWF0ZSBhIHNlZW1pbmdseSBpbW11dGFibGUgYmxvY2ssIG90aGVyd2lzZSBpdCBjb3VsZFxuICAgICBiZSBzdGF0aWNhbGx5IGFsbG9jYXRlZC4gIFNlZSAjNTc3OS4gKilcbiAgbGV0IHJlcyA9IGRlbXV0IHtrZXkgPSBPYmoubWFnaWMgMDsgZGF0YSA9IEVtcHR5OyBuZXh0ID0gRW1wdHl9IGluXG4gIGxldCByID0gcmVmIHJlcyBpblxuICBmb3IgaSA9IDAgdG8gbiBkb1xuICAgIHIgOj0gQ29ucyAoa2V5cy4oaSksICFyLCBFbXB0eSlcbiAgZG9uZTtcbiAgdGFibGVzLmRhdGEgPC0gIXI7XG4gIHJlc1xuXG5sZXQgcmVjIGxvb2t1cF9rZXlzIGkga2V5cyB0YWJsZXMgPVxuICBpZiBpIDwgMCB0aGVuIHRhYmxlcyBlbHNlXG4gIGxldCBrZXkgPSBrZXlzLihpKSBpblxuICBsZXQgcmVjIGxvb2t1cF9rZXkgdGFibGVzID1cbiAgICBpZiB0YWJsZXMua2V5ID09IGtleSB0aGVuIGxvb2t1cF9rZXlzIChpLTEpIGtleXMgdGFibGVzLmRhdGEgZWxzZVxuICAgIGlmIHRhYmxlcy5uZXh0IDw+IEVtcHR5IHRoZW4gbG9va3VwX2tleSAobXV0IHRhYmxlcy5uZXh0KSBlbHNlXG4gICAgbGV0IG5leHQgPSBDb25zIChrZXksIEVtcHR5LCBFbXB0eSkgaW5cbiAgICB0YWJsZXMubmV4dCA8LSBuZXh0O1xuICAgIGJ1aWxkX3BhdGggKGktMSkga2V5cyAobXV0IG5leHQpXG4gIGluXG4gIGxvb2t1cF9rZXkgKG11dCB0YWJsZXMpXG5cbmxldCBsb29rdXBfdGFibGVzIHJvb3Qga2V5cyA9XG4gIGxldCByb290ID0gbXV0IHJvb3QgaW5cbiAgaWYgcm9vdC5kYXRhIDw+IEVtcHR5IHRoZW5cbiAgICBsb29rdXBfa2V5cyAoQXJyYXkubGVuZ3RoIGtleXMgLSAxKSBrZXlzIHJvb3QuZGF0YVxuICBlbHNlXG4gICAgYnVpbGRfcGF0aCAoQXJyYXkubGVuZ3RoIGtleXMgLSAxKSBrZXlzIHJvb3RcblxuKCoqKiogYnVpbHRpbiBtZXRob2RzICoqKiopXG5cbmxldCBnZXRfY29uc3QgeCA9IHJldCAoZnVuIG9iaiAtPiB4KVxubGV0IGdldF92YXIgbiAgID0gcmV0IChmdW4gb2JqIC0+IEFycmF5LnVuc2FmZV9nZXQgb2JqIG4pXG5sZXQgZ2V0X2VudiBlIG4gPVxuICByZXQgKGZ1biBvYmogLT5cbiAgICBBcnJheS51bnNhZmVfZ2V0IChPYmoubWFnaWMgKEFycmF5LnVuc2FmZV9nZXQgb2JqIGUpIDogb2JqKSBuKVxubGV0IGdldF9tZXRoIG4gID0gcmV0IChmdW4gb2JqIC0+IHNlbmRzZWxmIG9iaiBuKVxubGV0IHNldF92YXIgbiAgID0gcmV0IChmdW4gb2JqIHggLT4gQXJyYXkudW5zYWZlX3NldCBvYmogbiB4KVxubGV0IGFwcF9jb25zdCBmIHggPSByZXQgKGZ1biBvYmogLT4gZiB4KVxubGV0IGFwcF92YXIgZiBuICAgPSByZXQgKGZ1biBvYmogLT4gZiAoQXJyYXkudW5zYWZlX2dldCBvYmogbikpXG5sZXQgYXBwX2VudiBmIGUgbiA9XG4gIHJldCAoZnVuIG9iaiAtPlxuICAgIGYgKEFycmF5LnVuc2FmZV9nZXQgKE9iai5tYWdpYyAoQXJyYXkudW5zYWZlX2dldCBvYmogZSkgOiBvYmopIG4pKVxubGV0IGFwcF9tZXRoIGYgbiAgPSByZXQgKGZ1biBvYmogLT4gZiAoc2VuZHNlbGYgb2JqIG4pKVxubGV0IGFwcF9jb25zdF9jb25zdCBmIHggeSA9IHJldCAoZnVuIG9iaiAtPiBmIHggeSlcbmxldCBhcHBfY29uc3RfdmFyIGYgeCBuICAgPSByZXQgKGZ1biBvYmogLT4gZiB4IChBcnJheS51bnNhZmVfZ2V0IG9iaiBuKSlcbmxldCBhcHBfY29uc3RfbWV0aCBmIHggbiA9IHJldCAoZnVuIG9iaiAtPiBmIHggKHNlbmRzZWxmIG9iaiBuKSlcbmxldCBhcHBfdmFyX2NvbnN0IGYgbiB4ID0gcmV0IChmdW4gb2JqIC0+IGYgKEFycmF5LnVuc2FmZV9nZXQgb2JqIG4pIHgpXG5sZXQgYXBwX21ldGhfY29uc3QgZiBuIHggPSByZXQgKGZ1biBvYmogLT4gZiAoc2VuZHNlbGYgb2JqIG4pIHgpXG5sZXQgYXBwX2NvbnN0X2VudiBmIHggZSBuID1cbiAgcmV0IChmdW4gb2JqIC0+XG4gICAgZiB4IChBcnJheS51bnNhZmVfZ2V0IChPYmoubWFnaWMgKEFycmF5LnVuc2FmZV9nZXQgb2JqIGUpIDogb2JqKSBuKSlcbmxldCBhcHBfZW52X2NvbnN0IGYgZSBuIHggPVxuICByZXQgKGZ1biBvYmogLT5cbiAgICBmIChBcnJheS51bnNhZmVfZ2V0IChPYmoubWFnaWMgKEFycmF5LnVuc2FmZV9nZXQgb2JqIGUpIDogb2JqKSBuKSB4KVxubGV0IG1ldGhfYXBwX2NvbnN0IG4geCA9IHJldCAoZnVuIG9iaiAtPiAoc2VuZHNlbGYgb2JqIG4gOiBfIC0+IF8pIHgpXG5sZXQgbWV0aF9hcHBfdmFyIG4gbSA9XG4gIHJldCAoZnVuIG9iaiAtPiAoc2VuZHNlbGYgb2JqIG4gOiBfIC0+IF8pIChBcnJheS51bnNhZmVfZ2V0IG9iaiBtKSlcbmxldCBtZXRoX2FwcF9lbnYgbiBlIG0gPVxuICByZXQgKGZ1biBvYmogLT4gKHNlbmRzZWxmIG9iaiBuIDogXyAtPiBfKVxuICAgICAgKEFycmF5LnVuc2FmZV9nZXQgKE9iai5tYWdpYyAoQXJyYXkudW5zYWZlX2dldCBvYmogZSkgOiBvYmopIG0pKVxubGV0IG1ldGhfYXBwX21ldGggbiBtID1cbiAgcmV0IChmdW4gb2JqIC0+IChzZW5kc2VsZiBvYmogbiA6IF8gLT4gXykgKHNlbmRzZWxmIG9iaiBtKSlcbmxldCBzZW5kX2NvbnN0IG0geCBjID1cbiAgcmV0IChmdW4gb2JqIC0+IHNlbmRjYWNoZSB4IG0gKEFycmF5LnVuc2FmZV9nZXQgb2JqIDApIGMpXG5sZXQgc2VuZF92YXIgbSBuIGMgPVxuICByZXQgKGZ1biBvYmogLT5cbiAgICBzZW5kY2FjaGUgKE9iai5tYWdpYyAoQXJyYXkudW5zYWZlX2dldCBvYmogbikgOiBvYmopIG1cbiAgICAgIChBcnJheS51bnNhZmVfZ2V0IG9iaiAwKSBjKVxubGV0IHNlbmRfZW52IG0gZSBuIGMgPVxuICByZXQgKGZ1biBvYmogLT5cbiAgICBzZW5kY2FjaGVcbiAgICAgIChPYmoubWFnaWMgKEFycmF5LnVuc2FmZV9nZXRcbiAgICAgICAgICAgICAgICAgICAgKE9iai5tYWdpYyAoQXJyYXkudW5zYWZlX2dldCBvYmogZSkgOiBvYmopIG4pIDogb2JqKVxuICAgICAgbSAoQXJyYXkudW5zYWZlX2dldCBvYmogMCkgYylcbmxldCBzZW5kX21ldGggbSBuIGMgPVxuICByZXQgKGZ1biBvYmogLT5cbiAgICBzZW5kY2FjaGUgKHNlbmRzZWxmIG9iaiBuKSBtIChBcnJheS51bnNhZmVfZ2V0IG9iaiAwKSBjKVxubGV0IG5ld19jYWNoZSB0YWJsZSA9XG4gIGxldCBuID0gbmV3X21ldGhvZCB0YWJsZSBpblxuICBsZXQgbiA9XG4gICAgaWYgbiBtb2QgMiA9IDAgfHwgbiA+IDIgKyBtYWdpYyB0YWJsZS5tZXRob2RzLigxKSAqIDE2IC8gU3lzLndvcmRfc2l6ZVxuICAgIHRoZW4gbiBlbHNlIG5ld19tZXRob2QgdGFibGVcbiAgaW5cbiAgdGFibGUubWV0aG9kcy4obikgPC0gT2JqLm1hZ2ljIDA7XG4gIG5cblxudHlwZSBpbXBsID1cbiAgICBHZXRDb25zdFxuICB8IEdldFZhclxuICB8IEdldEVudlxuICB8IEdldE1ldGhcbiAgfCBTZXRWYXJcbiAgfCBBcHBDb25zdFxuICB8IEFwcFZhclxuICB8IEFwcEVudlxuICB8IEFwcE1ldGhcbiAgfCBBcHBDb25zdENvbnN0XG4gIHwgQXBwQ29uc3RWYXJcbiAgfCBBcHBDb25zdEVudlxuICB8IEFwcENvbnN0TWV0aFxuICB8IEFwcFZhckNvbnN0XG4gIHwgQXBwRW52Q29uc3RcbiAgfCBBcHBNZXRoQ29uc3RcbiAgfCBNZXRoQXBwQ29uc3RcbiAgfCBNZXRoQXBwVmFyXG4gIHwgTWV0aEFwcEVudlxuICB8IE1ldGhBcHBNZXRoXG4gIHwgU2VuZENvbnN0XG4gIHwgU2VuZFZhclxuICB8IFNlbmRFbnZcbiAgfCBTZW5kTWV0aFxuICB8IENsb3N1cmUgb2YgY2xvc3VyZVxuXG5sZXQgbWV0aG9kX2ltcGwgdGFibGUgaSBhcnIgPVxuICBsZXQgbmV4dCAoKSA9IGluY3IgaTsgbWFnaWMgYXJyLighaSkgaW5cbiAgbWF0Y2ggbmV4dCgpIHdpdGhcbiAgICBHZXRDb25zdCAtPiBsZXQgeCA6IHQgPSBuZXh0KCkgaW4gZ2V0X2NvbnN0IHhcbiAgfCBHZXRWYXIgICAtPiBsZXQgbiA9IG5leHQoKSBpbiBnZXRfdmFyIG5cbiAgfCBHZXRFbnYgICAtPiBsZXQgZSA9IG5leHQoKSBhbmQgbiA9IG5leHQoKSBpbiBnZXRfZW52IGUgblxuICB8IEdldE1ldGggIC0+IGxldCBuID0gbmV4dCgpIGluIGdldF9tZXRoIG5cbiAgfCBTZXRWYXIgICAtPiBsZXQgbiA9IG5leHQoKSBpbiBzZXRfdmFyIG5cbiAgfCBBcHBDb25zdCAtPiBsZXQgZiA9IG5leHQoKSBhbmQgeCA9IG5leHQoKSBpbiBhcHBfY29uc3QgZiB4XG4gIHwgQXBwVmFyICAgLT4gbGV0IGYgPSBuZXh0KCkgYW5kIG4gPSBuZXh0ICgpIGluIGFwcF92YXIgZiBuXG4gIHwgQXBwRW52ICAgLT5cbiAgICAgIGxldCBmID0gbmV4dCgpIGFuZCBlID0gbmV4dCgpIGFuZCBuID0gbmV4dCgpIGluIGFwcF9lbnYgZiBlIG5cbiAgfCBBcHBNZXRoICAtPiBsZXQgZiA9IG5leHQoKSBhbmQgbiA9IG5leHQgKCkgaW4gYXBwX21ldGggZiBuXG4gIHwgQXBwQ29uc3RDb25zdCAtPlxuICAgICAgbGV0IGYgPSBuZXh0KCkgYW5kIHggPSBuZXh0KCkgYW5kIHkgPSBuZXh0KCkgaW4gYXBwX2NvbnN0X2NvbnN0IGYgeCB5XG4gIHwgQXBwQ29uc3RWYXIgLT5cbiAgICAgIGxldCBmID0gbmV4dCgpIGFuZCB4ID0gbmV4dCgpIGFuZCBuID0gbmV4dCgpIGluIGFwcF9jb25zdF92YXIgZiB4IG5cbiAgfCBBcHBDb25zdEVudiAtPlxuICAgICAgbGV0IGYgPSBuZXh0KCkgYW5kIHggPSBuZXh0KCkgYW5kIGUgPSBuZXh0ICgpIGFuZCBuID0gbmV4dCgpIGluXG4gICAgICBhcHBfY29uc3RfZW52IGYgeCBlIG5cbiAgfCBBcHBDb25zdE1ldGggLT5cbiAgICAgIGxldCBmID0gbmV4dCgpIGFuZCB4ID0gbmV4dCgpIGFuZCBuID0gbmV4dCgpIGluIGFwcF9jb25zdF9tZXRoIGYgeCBuXG4gIHwgQXBwVmFyQ29uc3QgLT5cbiAgICAgIGxldCBmID0gbmV4dCgpIGFuZCBuID0gbmV4dCgpIGFuZCB4ID0gbmV4dCgpIGluIGFwcF92YXJfY29uc3QgZiBuIHhcbiAgfCBBcHBFbnZDb25zdCAtPlxuICAgICAgbGV0IGYgPSBuZXh0KCkgYW5kIGUgPSBuZXh0ICgpIGFuZCBuID0gbmV4dCgpIGFuZCB4ID0gbmV4dCgpIGluXG4gICAgICBhcHBfZW52X2NvbnN0IGYgZSBuIHhcbiAgfCBBcHBNZXRoQ29uc3QgLT5cbiAgICAgIGxldCBmID0gbmV4dCgpIGFuZCBuID0gbmV4dCgpIGFuZCB4ID0gbmV4dCgpIGluIGFwcF9tZXRoX2NvbnN0IGYgbiB4XG4gIHwgTWV0aEFwcENvbnN0IC0+XG4gICAgICBsZXQgbiA9IG5leHQoKSBhbmQgeCA9IG5leHQoKSBpbiBtZXRoX2FwcF9jb25zdCBuIHhcbiAgfCBNZXRoQXBwVmFyIC0+XG4gICAgICBsZXQgbiA9IG5leHQoKSBhbmQgbSA9IG5leHQoKSBpbiBtZXRoX2FwcF92YXIgbiBtXG4gIHwgTWV0aEFwcEVudiAtPlxuICAgICAgbGV0IG4gPSBuZXh0KCkgYW5kIGUgPSBuZXh0KCkgYW5kIG0gPSBuZXh0KCkgaW4gbWV0aF9hcHBfZW52IG4gZSBtXG4gIHwgTWV0aEFwcE1ldGggLT5cbiAgICAgIGxldCBuID0gbmV4dCgpIGFuZCBtID0gbmV4dCgpIGluIG1ldGhfYXBwX21ldGggbiBtXG4gIHwgU2VuZENvbnN0IC0+XG4gICAgICBsZXQgbSA9IG5leHQoKSBhbmQgeCA9IG5leHQoKSBpbiBzZW5kX2NvbnN0IG0geCAobmV3X2NhY2hlIHRhYmxlKVxuICB8IFNlbmRWYXIgLT5cbiAgICAgIGxldCBtID0gbmV4dCgpIGFuZCBuID0gbmV4dCAoKSBpbiBzZW5kX3ZhciBtIG4gKG5ld19jYWNoZSB0YWJsZSlcbiAgfCBTZW5kRW52IC0+XG4gICAgICBsZXQgbSA9IG5leHQoKSBhbmQgZSA9IG5leHQoKSBhbmQgbiA9IG5leHQoKSBpblxuICAgICAgc2VuZF9lbnYgbSBlIG4gKG5ld19jYWNoZSB0YWJsZSlcbiAgfCBTZW5kTWV0aCAtPlxuICAgICAgbGV0IG0gPSBuZXh0KCkgYW5kIG4gPSBuZXh0ICgpIGluIHNlbmRfbWV0aCBtIG4gKG5ld19jYWNoZSB0YWJsZSlcbiAgfCBDbG9zdXJlIF8gYXMgY2xvIC0+IG1hZ2ljIGNsb1xuXG5sZXQgc2V0X21ldGhvZHMgdGFibGUgbWV0aG9kcyA9XG4gIGxldCBsZW4gPSBBcnJheS5sZW5ndGggbWV0aG9kcyBhbmQgaSA9IHJlZiAwIGluXG4gIHdoaWxlICFpIDwgbGVuIGRvXG4gICAgbGV0IGxhYmVsID0gbWV0aG9kcy4oIWkpIGFuZCBjbG8gPSBtZXRob2RfaW1wbCB0YWJsZSBpIG1ldGhvZHMgaW5cbiAgICBzZXRfbWV0aG9kIHRhYmxlIGxhYmVsIGNsbztcbiAgICBpbmNyIGlcbiAgZG9uZVxuXG4oKioqKiBTdGF0aXN0aWNzICoqKiopXG5cbnR5cGUgc3RhdHMgPVxuICB7IGNsYXNzZXM6IGludDsgbWV0aG9kczogaW50OyBpbnN0X3ZhcnM6IGludDsgfVxuXG5sZXQgc3RhdHMgKCkgPVxuICB7IGNsYXNzZXMgPSAhdGFibGVfY291bnQ7XG4gICAgbWV0aG9kcyA9ICFtZXRob2RfY291bnQ7IGluc3RfdmFycyA9ICFpbnN0X3Zhcl9jb3VudDsgfVxuIiwiKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9DYW1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogICAgICAgICAgICAgIFhhdmllciBMZXJveSwgcHJvamV0IENyaXN0YWwsIElOUklBIFJvY3F1ZW5jb3VydCAgICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogIENvcHlyaWdodCAxOTk2IEluc3RpdHV0IE5hdGlvbmFsIGRlIFJlY2hlcmNoZSBlbiBJbmZvcm1hdGlxdWUgZXQgICAqKVxuKCogIGVuIEF1dG9tYXRpcXVlLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCAgICAqKVxuKCogIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExpYnJhcnkgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSwgd2l0aCAgICAqKVxuKCogIHRoZSBzcGVjaWFsIGV4Y2VwdGlvbiBvbiBsaW5raW5nIGRlc2NyaWJlZCBpbiBmaWxlIC4uL0xJQ0VOU0UuICAgICAqKVxuKCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKVxuXG50eXBlIHRva2VuID1cbiAgICBLd2Qgb2Ygc3RyaW5nXG4gIHwgSWRlbnQgb2Ygc3RyaW5nXG4gIHwgSW50IG9mIGludFxuICB8IEZsb2F0IG9mIGZsb2F0XG4gIHwgU3RyaW5nIG9mIHN0cmluZ1xuICB8IENoYXIgb2YgY2hhclxuXG4oKiBUaGUgc3RyaW5nIGJ1ZmZlcmluZyBtYWNoaW5lcnkgKilcblxubGV0IGluaXRpYWxfYnVmZmVyID0gQnl0ZXMuY3JlYXRlIDMyXG5cbmxldCBidWZmZXIgPSByZWYgaW5pdGlhbF9idWZmZXJcbmxldCBidWZwb3MgPSByZWYgMFxuXG5sZXQgcmVzZXRfYnVmZmVyICgpID0gYnVmZmVyIDo9IGluaXRpYWxfYnVmZmVyOyBidWZwb3MgOj0gMFxuXG5sZXQgc3RvcmUgYyA9XG4gIGlmICFidWZwb3MgPj0gQnl0ZXMubGVuZ3RoICFidWZmZXIgdGhlbiBiZWdpblxuICAgIGxldCBuZXdidWZmZXIgPSBCeXRlcy5jcmVhdGUgKDIgKiAhYnVmcG9zKSBpblxuICAgIEJ5dGVzLmJsaXQgIWJ1ZmZlciAwIG5ld2J1ZmZlciAwICFidWZwb3M7XG4gICAgYnVmZmVyIDo9IG5ld2J1ZmZlclxuICBlbmQ7XG4gIEJ5dGVzLnNldCAhYnVmZmVyICFidWZwb3MgYztcbiAgaW5jciBidWZwb3NcblxubGV0IGdldF9zdHJpbmcgKCkgPVxuICBsZXQgcyA9IEJ5dGVzLnN1Yl9zdHJpbmcgIWJ1ZmZlciAwICFidWZwb3MgaW4gYnVmZmVyIDo9IGluaXRpYWxfYnVmZmVyOyBzXG5cbigqIFRoZSBsZXhlciAqKVxuXG5sZXQgbWFrZV9sZXhlciBrZXl3b3JkcyA9XG4gIGxldCBrd2RfdGFibGUgPSBIYXNodGJsLmNyZWF0ZSAxNyBpblxuICBMaXN0Lml0ZXIgKGZ1biBzIC0+IEhhc2h0YmwuYWRkIGt3ZF90YWJsZSBzIChLd2QgcykpIGtleXdvcmRzO1xuICBsZXQgaWRlbnRfb3Jfa2V5d29yZCBpZCA9XG4gICAgdHJ5IEhhc2h0YmwuZmluZCBrd2RfdGFibGUgaWQgd2l0aFxuICAgICAgTm90X2ZvdW5kIC0+IElkZW50IGlkXG4gIGFuZCBrZXl3b3JkX29yX2Vycm9yIGMgPVxuICAgIGxldCBzID0gU3RyaW5nLm1ha2UgMSBjIGluXG4gICAgdHJ5IEhhc2h0YmwuZmluZCBrd2RfdGFibGUgcyB3aXRoXG4gICAgICBOb3RfZm91bmQgLT4gcmFpc2UgKFN0cmVhbS5FcnJvciAoXCJJbGxlZ2FsIGNoYXJhY3RlciBcIiBeIHMpKVxuICBpblxuICBsZXQgcmVjIG5leHRfdG9rZW4gKHN0cm1fXyA6IF8gU3RyZWFtLnQpID1cbiAgICBtYXRjaCBTdHJlYW0ucGVlayBzdHJtX18gd2l0aFxuICAgICAgU29tZSAoJyAnIHwgJ1xcMDEwJyB8ICdcXDAxMycgfCAnXFwwMDknIHwgJ1xcMDI2JyB8ICdcXDAxMicpIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXzsgbmV4dF90b2tlbiBzdHJtX19cbiAgICB8IFNvbWUgKCdBJy4uJ1onIHwgJ2EnLi4neicgfCAnXycgfCAnXFwxOTInLi4nXFwyNTUnIGFzIGMpIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgbGV0IHMgPSBzdHJtX18gaW4gcmVzZXRfYnVmZmVyICgpOyBzdG9yZSBjOyBpZGVudCBzXG4gICAgfCBTb21lXG4gICAgICAgICgnIScgfCAnJScgfCAnJicgfCAnJCcgfCAnIycgfCAnKycgfCAnLycgfCAnOicgfCAnPCcgfCAnPScgfCAnPicgfFxuICAgICAgICAgJz8nIHwgJ0AnIHwgJ1xcXFwnIHwgJ34nIHwgJ14nIHwgJ3wnIHwgJyonIGFzIGMpIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgbGV0IHMgPSBzdHJtX18gaW4gcmVzZXRfYnVmZmVyICgpOyBzdG9yZSBjOyBpZGVudDIgc1xuICAgIHwgU29tZSAoJzAnLi4nOScgYXMgYykgLT5cbiAgICAgICAgU3RyZWFtLmp1bmsgc3RybV9fO1xuICAgICAgICBsZXQgcyA9IHN0cm1fXyBpbiByZXNldF9idWZmZXIgKCk7IHN0b3JlIGM7IG51bWJlciBzXG4gICAgfCBTb21lICdcXCcnIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgbGV0IGMgPVxuICAgICAgICAgIHRyeSBjaGFyIHN0cm1fXyB3aXRoXG4gICAgICAgICAgICBTdHJlYW0uRmFpbHVyZSAtPiByYWlzZSAoU3RyZWFtLkVycm9yIFwiXCIpXG4gICAgICAgIGluXG4gICAgICAgIGJlZ2luIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICAgICAgU29tZSAnXFwnJyAtPiBTdHJlYW0uanVuayBzdHJtX187IFNvbWUgKENoYXIgYylcbiAgICAgICAgfCBfIC0+IHJhaXNlIChTdHJlYW0uRXJyb3IgXCJcIilcbiAgICAgICAgZW5kXG4gICAgfCBTb21lICdcXFwiJyAtPlxuICAgICAgICBTdHJlYW0uanVuayBzdHJtX187XG4gICAgICAgIGxldCBzID0gc3RybV9fIGluIHJlc2V0X2J1ZmZlciAoKTsgU29tZSAoU3RyaW5nIChzdHJpbmcgcykpXG4gICAgfCBTb21lICctJyAtPiBTdHJlYW0uanVuayBzdHJtX187IG5lZ19udW1iZXIgc3RybV9fXG4gICAgfCBTb21lICcoJyAtPiBTdHJlYW0uanVuayBzdHJtX187IG1heWJlX2NvbW1lbnQgc3RybV9fXG4gICAgfCBTb21lIGMgLT4gU3RyZWFtLmp1bmsgc3RybV9fOyBTb21lIChrZXl3b3JkX29yX2Vycm9yIGMpXG4gICAgfCBfIC0+IE5vbmVcbiAgYW5kIGlkZW50IChzdHJtX18gOiBfIFN0cmVhbS50KSA9XG4gICAgbWF0Y2ggU3RyZWFtLnBlZWsgc3RybV9fIHdpdGhcbiAgICAgIFNvbWVcbiAgICAgICAgKCdBJy4uJ1onIHwgJ2EnLi4neicgfCAnXFwxOTInLi4nXFwyNTUnIHwgJzAnLi4nOScgfCAnXycgfCAnXFwnJyBhcyBjKSAtPlxuICAgICAgICBTdHJlYW0uanVuayBzdHJtX187IGxldCBzID0gc3RybV9fIGluIHN0b3JlIGM7IGlkZW50IHNcbiAgICB8IF8gLT4gU29tZSAoaWRlbnRfb3Jfa2V5d29yZCAoZ2V0X3N0cmluZyAoKSkpXG4gIGFuZCBpZGVudDIgKHN0cm1fXyA6IF8gU3RyZWFtLnQpID1cbiAgICBtYXRjaCBTdHJlYW0ucGVlayBzdHJtX18gd2l0aFxuICAgICAgU29tZVxuICAgICAgICAoJyEnIHwgJyUnIHwgJyYnIHwgJyQnIHwgJyMnIHwgJysnIHwgJy0nIHwgJy8nIHwgJzonIHwgJzwnIHwgJz0nIHxcbiAgICAgICAgICc+JyB8ICc/JyB8ICdAJyB8ICdcXFxcJyB8ICd+JyB8ICdeJyB8ICd8JyB8ICcqJyBhcyBjKSAtPlxuICAgICAgICBTdHJlYW0uanVuayBzdHJtX187IGxldCBzID0gc3RybV9fIGluIHN0b3JlIGM7IGlkZW50MiBzXG4gICAgfCBfIC0+IFNvbWUgKGlkZW50X29yX2tleXdvcmQgKGdldF9zdHJpbmcgKCkpKVxuICBhbmQgbmVnX251bWJlciAoc3RybV9fIDogXyBTdHJlYW0udCkgPVxuICAgIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICBTb21lICgnMCcuLic5JyBhcyBjKSAtPlxuICAgICAgICBTdHJlYW0uanVuayBzdHJtX187XG4gICAgICAgIGxldCBzID0gc3RybV9fIGluIHJlc2V0X2J1ZmZlciAoKTsgc3RvcmUgJy0nOyBzdG9yZSBjOyBudW1iZXIgc1xuICAgIHwgXyAtPiBsZXQgcyA9IHN0cm1fXyBpbiByZXNldF9idWZmZXIgKCk7IHN0b3JlICctJzsgaWRlbnQyIHNcbiAgYW5kIG51bWJlciAoc3RybV9fIDogXyBTdHJlYW0udCkgPVxuICAgIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICBTb21lICgnMCcuLic5JyBhcyBjKSAtPlxuICAgICAgICBTdHJlYW0uanVuayBzdHJtX187IGxldCBzID0gc3RybV9fIGluIHN0b3JlIGM7IG51bWJlciBzXG4gICAgfCBTb21lICcuJyAtPlxuICAgICAgICBTdHJlYW0uanVuayBzdHJtX187IGxldCBzID0gc3RybV9fIGluIHN0b3JlICcuJzsgZGVjaW1hbF9wYXJ0IHNcbiAgICB8IFNvbWUgKCdlJyB8ICdFJykgLT5cbiAgICAgICAgU3RyZWFtLmp1bmsgc3RybV9fOyBsZXQgcyA9IHN0cm1fXyBpbiBzdG9yZSAnRSc7IGV4cG9uZW50X3BhcnQgc1xuICAgIHwgXyAtPiBTb21lIChJbnQgKGludF9vZl9zdHJpbmcgKGdldF9zdHJpbmcgKCkpKSlcbiAgYW5kIGRlY2ltYWxfcGFydCAoc3RybV9fIDogXyBTdHJlYW0udCkgPVxuICAgIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICBTb21lICgnMCcuLic5JyBhcyBjKSAtPlxuICAgICAgICBTdHJlYW0uanVuayBzdHJtX187IGxldCBzID0gc3RybV9fIGluIHN0b3JlIGM7IGRlY2ltYWxfcGFydCBzXG4gICAgfCBTb21lICgnZScgfCAnRScpIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXzsgbGV0IHMgPSBzdHJtX18gaW4gc3RvcmUgJ0UnOyBleHBvbmVudF9wYXJ0IHNcbiAgICB8IF8gLT4gU29tZSAoRmxvYXQgKGZsb2F0X29mX3N0cmluZyAoZ2V0X3N0cmluZyAoKSkpKVxuICBhbmQgZXhwb25lbnRfcGFydCAoc3RybV9fIDogXyBTdHJlYW0udCkgPVxuICAgIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICBTb21lICgnKycgfCAnLScgYXMgYykgLT5cbiAgICAgICAgU3RyZWFtLmp1bmsgc3RybV9fOyBsZXQgcyA9IHN0cm1fXyBpbiBzdG9yZSBjOyBlbmRfZXhwb25lbnRfcGFydCBzXG4gICAgfCBfIC0+IGVuZF9leHBvbmVudF9wYXJ0IHN0cm1fX1xuICBhbmQgZW5kX2V4cG9uZW50X3BhcnQgKHN0cm1fXyA6IF8gU3RyZWFtLnQpID1cbiAgICBtYXRjaCBTdHJlYW0ucGVlayBzdHJtX18gd2l0aFxuICAgICAgU29tZSAoJzAnLi4nOScgYXMgYykgLT5cbiAgICAgICAgU3RyZWFtLmp1bmsgc3RybV9fOyBsZXQgcyA9IHN0cm1fXyBpbiBzdG9yZSBjOyBlbmRfZXhwb25lbnRfcGFydCBzXG4gICAgfCBfIC0+IFNvbWUgKEZsb2F0IChmbG9hdF9vZl9zdHJpbmcgKGdldF9zdHJpbmcgKCkpKSlcbiAgYW5kIHN0cmluZyAoc3RybV9fIDogXyBTdHJlYW0udCkgPVxuICAgIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICBTb21lICdcXFwiJyAtPiBTdHJlYW0uanVuayBzdHJtX187IGdldF9zdHJpbmcgKClcbiAgICB8IFNvbWUgJ1xcXFwnIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgbGV0IGMgPVxuICAgICAgICAgIHRyeSBlc2NhcGUgc3RybV9fIHdpdGhcbiAgICAgICAgICAgIFN0cmVhbS5GYWlsdXJlIC0+IHJhaXNlIChTdHJlYW0uRXJyb3IgXCJcIilcbiAgICAgICAgaW5cbiAgICAgICAgbGV0IHMgPSBzdHJtX18gaW4gc3RvcmUgYzsgc3RyaW5nIHNcbiAgICB8IFNvbWUgYyAtPiBTdHJlYW0uanVuayBzdHJtX187IGxldCBzID0gc3RybV9fIGluIHN0b3JlIGM7IHN0cmluZyBzXG4gICAgfCBfIC0+IHJhaXNlIFN0cmVhbS5GYWlsdXJlXG4gIGFuZCBjaGFyIChzdHJtX18gOiBfIFN0cmVhbS50KSA9XG4gICAgbWF0Y2ggU3RyZWFtLnBlZWsgc3RybV9fIHdpdGhcbiAgICAgIFNvbWUgJ1xcXFwnIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgYmVnaW4gdHJ5IGVzY2FwZSBzdHJtX18gd2l0aFxuICAgICAgICAgIFN0cmVhbS5GYWlsdXJlIC0+IHJhaXNlIChTdHJlYW0uRXJyb3IgXCJcIilcbiAgICAgICAgZW5kXG4gICAgfCBTb21lIGMgLT4gU3RyZWFtLmp1bmsgc3RybV9fOyBjXG4gICAgfCBfIC0+IHJhaXNlIFN0cmVhbS5GYWlsdXJlXG4gIGFuZCBlc2NhcGUgKHN0cm1fXyA6IF8gU3RyZWFtLnQpID1cbiAgICBtYXRjaCBTdHJlYW0ucGVlayBzdHJtX18gd2l0aFxuICAgICAgU29tZSAnbicgLT4gU3RyZWFtLmp1bmsgc3RybV9fOyAnXFxuJ1xuICAgIHwgU29tZSAncicgLT4gU3RyZWFtLmp1bmsgc3RybV9fOyAnXFxyJ1xuICAgIHwgU29tZSAndCcgLT4gU3RyZWFtLmp1bmsgc3RybV9fOyAnXFx0J1xuICAgIHwgU29tZSAoJzAnLi4nOScgYXMgYzEpIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgYmVnaW4gbWF0Y2ggU3RyZWFtLnBlZWsgc3RybV9fIHdpdGhcbiAgICAgICAgICBTb21lICgnMCcuLic5JyBhcyBjMikgLT5cbiAgICAgICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgICAgIGJlZ2luIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICAgICAgICAgIFNvbWUgKCcwJy4uJzknIGFzIGMzKSAtPlxuICAgICAgICAgICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXztcbiAgICAgICAgICAgICAgICBDaGFyLmNoclxuICAgICAgICAgICAgICAgICAgKChDaGFyLmNvZGUgYzEgLSA0OCkgKiAxMDAgKyAoQ2hhci5jb2RlIGMyIC0gNDgpICogMTAgK1xuICAgICAgICAgICAgICAgICAgICAgKENoYXIuY29kZSBjMyAtIDQ4KSlcbiAgICAgICAgICAgIHwgXyAtPiByYWlzZSAoU3RyZWFtLkVycm9yIFwiXCIpXG4gICAgICAgICAgICBlbmRcbiAgICAgICAgfCBfIC0+IHJhaXNlIChTdHJlYW0uRXJyb3IgXCJcIilcbiAgICAgICAgZW5kXG4gICAgfCBTb21lIGMgLT4gU3RyZWFtLmp1bmsgc3RybV9fOyBjXG4gICAgfCBfIC0+IHJhaXNlIFN0cmVhbS5GYWlsdXJlXG4gIGFuZCBtYXliZV9jb21tZW50IChzdHJtX18gOiBfIFN0cmVhbS50KSA9XG4gICAgbWF0Y2ggU3RyZWFtLnBlZWsgc3RybV9fIHdpdGhcbiAgICAgIFNvbWUgJyonIC0+XG4gICAgICAgIFN0cmVhbS5qdW5rIHN0cm1fXzsgbGV0IHMgPSBzdHJtX18gaW4gY29tbWVudCBzOyBuZXh0X3Rva2VuIHNcbiAgICB8IF8gLT4gU29tZSAoa2V5d29yZF9vcl9lcnJvciAnKCcpXG4gIGFuZCBjb21tZW50IChzdHJtX18gOiBfIFN0cmVhbS50KSA9XG4gICAgbWF0Y2ggU3RyZWFtLnBlZWsgc3RybV9fIHdpdGhcbiAgICAgIFNvbWUgJygnIC0+IFN0cmVhbS5qdW5rIHN0cm1fXzsgbWF5YmVfbmVzdGVkX2NvbW1lbnQgc3RybV9fXG4gICAgfCBTb21lICcqJyAtPiBTdHJlYW0uanVuayBzdHJtX187IG1heWJlX2VuZF9jb21tZW50IHN0cm1fX1xuICAgIHwgU29tZSBjIC0+IFN0cmVhbS5qdW5rIHN0cm1fXzsgY29tbWVudCBzdHJtX19cbiAgICB8IF8gLT4gcmFpc2UgU3RyZWFtLkZhaWx1cmVcbiAgYW5kIG1heWJlX25lc3RlZF9jb21tZW50IChzdHJtX18gOiBfIFN0cmVhbS50KSA9XG4gICAgbWF0Y2ggU3RyZWFtLnBlZWsgc3RybV9fIHdpdGhcbiAgICAgIFNvbWUgJyonIC0+IFN0cmVhbS5qdW5rIHN0cm1fXzsgbGV0IHMgPSBzdHJtX18gaW4gY29tbWVudCBzOyBjb21tZW50IHNcbiAgICB8IFNvbWUgYyAtPiBTdHJlYW0uanVuayBzdHJtX187IGNvbW1lbnQgc3RybV9fXG4gICAgfCBfIC0+IHJhaXNlIFN0cmVhbS5GYWlsdXJlXG4gIGFuZCBtYXliZV9lbmRfY29tbWVudCAoc3RybV9fIDogXyBTdHJlYW0udCkgPVxuICAgIG1hdGNoIFN0cmVhbS5wZWVrIHN0cm1fXyB3aXRoXG4gICAgICBTb21lICcpJyAtPiBTdHJlYW0uanVuayBzdHJtX187ICgpXG4gICAgfCBTb21lICcqJyAtPiBTdHJlYW0uanVuayBzdHJtX187IG1heWJlX2VuZF9jb21tZW50IHN0cm1fX1xuICAgIHwgU29tZSBjIC0+IFN0cmVhbS5qdW5rIHN0cm1fXzsgY29tbWVudCBzdHJtX19cbiAgICB8IF8gLT4gcmFpc2UgU3RyZWFtLkZhaWx1cmVcbiAgaW5cbiAgZnVuIGlucHV0IC0+IFN0cmVhbS5mcm9tIChmdW4gY291bnQgLT4gbmV4dF90b2tlbiBpbnB1dClcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgRGFtaWVuIERvbGlnZXosIHByb2pldCBQYXJhLCBJTlJJQSBSb2NxdWVuY291cnQgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMTk5NyBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCoqIFdlYWsgYXJyYXkgb3BlcmF0aW9ucyAqKVxuXG50eXBlICdhIHQ7O1xuXG5leHRlcm5hbCBjcmVhdGU6IGludCAtPiAnYSB0ID0gXCJjYW1sX3dlYWtfY3JlYXRlXCI7O1xuXG5sZXQgbGVuZ3RoIHggPSBPYmouc2l6ZShPYmoucmVwciB4KSAtIDE7O1xuXG5leHRlcm5hbCBzZXQgOiAnYSB0IC0+IGludCAtPiAnYSBvcHRpb24gLT4gdW5pdCA9IFwiY2FtbF93ZWFrX3NldFwiOztcbmV4dGVybmFsIGdldDogJ2EgdCAtPiBpbnQgLT4gJ2Egb3B0aW9uID0gXCJjYW1sX3dlYWtfZ2V0XCI7O1xuZXh0ZXJuYWwgZ2V0X2NvcHk6ICdhIHQgLT4gaW50IC0+ICdhIG9wdGlvbiA9IFwiY2FtbF93ZWFrX2dldF9jb3B5XCI7O1xuZXh0ZXJuYWwgY2hlY2s6ICdhIHQgLT4gaW50IC0+IGJvb2wgPSBcImNhbWxfd2Vha19jaGVja1wiOztcbmV4dGVybmFsIGJsaXQ6ICdhIHQgLT4gaW50IC0+ICdhIHQgLT4gaW50IC0+IGludCAtPiB1bml0ID0gXCJjYW1sX3dlYWtfYmxpdFwiOztcbigqIGJsaXQ6IHNyYyBzcmNvZmYgZHN0IGRzdG9mZiBsZW4gKilcblxubGV0IGZpbGwgYXIgb2ZzIGxlbiB4ID1cbiAgaWYgb2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyArIGxlbiA+IGxlbmd0aCBhclxuICB0aGVuIHJhaXNlIChJbnZhbGlkX2FyZ3VtZW50IFwiV2Vhay5maWxsXCIpXG4gIGVsc2UgYmVnaW5cbiAgICBmb3IgaSA9IG9mcyB0byAob2ZzICsgbGVuIC0gMSkgZG9cbiAgICAgIHNldCBhciBpIHhcbiAgICBkb25lXG4gIGVuZFxuOztcblxuKCoqIFdlYWsgaGFzaCB0YWJsZXMgKilcblxubW9kdWxlIHR5cGUgUyA9IHNpZ1xuICB0eXBlIGRhdGFcbiAgdHlwZSB0XG4gIHZhbCBjcmVhdGUgOiBpbnQgLT4gdFxuICB2YWwgY2xlYXIgOiB0IC0+IHVuaXRcbiAgdmFsIG1lcmdlIDogdCAtPiBkYXRhIC0+IGRhdGFcbiAgdmFsIGFkZCA6IHQgLT4gZGF0YSAtPiB1bml0XG4gIHZhbCByZW1vdmUgOiB0IC0+IGRhdGEgLT4gdW5pdFxuICB2YWwgZmluZCA6IHQgLT4gZGF0YSAtPiBkYXRhXG4gIHZhbCBmaW5kX2FsbCA6IHQgLT4gZGF0YSAtPiBkYXRhIGxpc3RcbiAgdmFsIG1lbSA6IHQgLT4gZGF0YSAtPiBib29sXG4gIHZhbCBpdGVyIDogKGRhdGEgLT4gdW5pdCkgLT4gdCAtPiB1bml0XG4gIHZhbCBmb2xkIDogKGRhdGEgLT4gJ2EgLT4gJ2EpIC0+IHQgLT4gJ2EgLT4gJ2FcbiAgdmFsIGNvdW50IDogdCAtPiBpbnRcbiAgdmFsIHN0YXRzIDogdCAtPiBpbnQgKiBpbnQgKiBpbnQgKiBpbnQgKiBpbnQgKiBpbnRcbmVuZDs7XG5cbm1vZHVsZSBNYWtlIChIIDogSGFzaHRibC5IYXNoZWRUeXBlKSA6IChTIHdpdGggdHlwZSBkYXRhID0gSC50KSA9IHN0cnVjdFxuXG4gIHR5cGUgJ2Egd2Vha190ID0gJ2EgdDs7XG4gIGxldCB3ZWFrX2NyZWF0ZSA9IGNyZWF0ZTs7XG4gIGxldCBlbXB0eWJ1Y2tldCA9IHdlYWtfY3JlYXRlIDA7O1xuXG4gIHR5cGUgZGF0YSA9IEgudDs7XG5cbiAgdHlwZSB0ID0ge1xuICAgIG11dGFibGUgdGFibGUgOiBkYXRhIHdlYWtfdCBhcnJheTtcbiAgICBtdXRhYmxlIGhhc2hlcyA6IGludCBhcnJheSBhcnJheTtcbiAgICBtdXRhYmxlIGxpbWl0IDogaW50OyAgICAgICAgICAgICAgICgqIGJ1Y2tldCBzaXplIGxpbWl0ICopXG4gICAgbXV0YWJsZSBvdmVyc2l6ZSA6IGludDsgICAgICAgICAgICAoKiBudW1iZXIgb2Ygb3ZlcnNpemUgYnVja2V0cyAqKVxuICAgIG11dGFibGUgcm92ZXIgOiBpbnQ7ICAgICAgICAgICAgICAgKCogZm9yIGludGVybmFsIGJvb2trZWVwaW5nICopXG4gIH07O1xuXG4gIGxldCBnZXRfaW5kZXggdCBoID0gKGggbGFuZCBtYXhfaW50KSBtb2QgKEFycmF5Lmxlbmd0aCB0LnRhYmxlKTs7XG5cbiAgbGV0IGxpbWl0ID0gNzs7XG4gIGxldCBvdmVyX2xpbWl0ID0gMjs7XG5cbiAgbGV0IGNyZWF0ZSBzeiA9XG4gICAgbGV0IHN6ID0gaWYgc3ogPCA3IHRoZW4gNyBlbHNlIHN6IGluXG4gICAgbGV0IHN6ID0gaWYgc3ogPiBTeXMubWF4X2FycmF5X2xlbmd0aCB0aGVuIFN5cy5tYXhfYXJyYXlfbGVuZ3RoIGVsc2Ugc3ogaW5cbiAgICB7XG4gICAgICB0YWJsZSA9IEFycmF5Lm1ha2Ugc3ogZW1wdHlidWNrZXQ7XG4gICAgICBoYXNoZXMgPSBBcnJheS5tYWtlIHN6IFt8IHxdO1xuICAgICAgbGltaXQgPSBsaW1pdDtcbiAgICAgIG92ZXJzaXplID0gMDtcbiAgICAgIHJvdmVyID0gMDtcbiAgICB9OztcblxuICBsZXQgY2xlYXIgdCA9XG4gICAgZm9yIGkgPSAwIHRvIEFycmF5Lmxlbmd0aCB0LnRhYmxlIC0gMSBkb1xuICAgICAgdC50YWJsZS4oaSkgPC0gZW1wdHlidWNrZXQ7XG4gICAgICB0Lmhhc2hlcy4oaSkgPC0gW3wgfF07XG4gICAgZG9uZTtcbiAgICB0LmxpbWl0IDwtIGxpbWl0O1xuICAgIHQub3ZlcnNpemUgPC0gMDtcbiAgOztcblxuICBsZXQgZm9sZCBmIHQgaW5pdCA9XG4gICAgbGV0IHJlYyBmb2xkX2J1Y2tldCBpIGIgYWNjdSA9XG4gICAgICBpZiBpID49IGxlbmd0aCBiIHRoZW4gYWNjdSBlbHNlXG4gICAgICBtYXRjaCBnZXQgYiBpIHdpdGhcbiAgICAgIHwgU29tZSB2IC0+IGZvbGRfYnVja2V0IChpKzEpIGIgKGYgdiBhY2N1KVxuICAgICAgfCBOb25lIC0+IGZvbGRfYnVja2V0IChpKzEpIGIgYWNjdVxuICAgIGluXG4gICAgQXJyYXkuZm9sZF9yaWdodCAoZm9sZF9idWNrZXQgMCkgdC50YWJsZSBpbml0XG4gIDs7XG5cbiAgbGV0IGl0ZXIgZiB0ID1cbiAgICBsZXQgcmVjIGl0ZXJfYnVja2V0IGkgYiA9XG4gICAgICBpZiBpID49IGxlbmd0aCBiIHRoZW4gKCkgZWxzZVxuICAgICAgbWF0Y2ggZ2V0IGIgaSB3aXRoXG4gICAgICB8IFNvbWUgdiAtPiBmIHY7IGl0ZXJfYnVja2V0IChpKzEpIGJcbiAgICAgIHwgTm9uZSAtPiBpdGVyX2J1Y2tldCAoaSsxKSBiXG4gICAgaW5cbiAgICBBcnJheS5pdGVyIChpdGVyX2J1Y2tldCAwKSB0LnRhYmxlXG4gIDs7XG5cbiAgbGV0IGl0ZXJfd2VhayBmIHQgPVxuICAgIGxldCByZWMgaXRlcl9idWNrZXQgaSBqIGIgPVxuICAgICAgaWYgaSA+PSBsZW5ndGggYiB0aGVuICgpIGVsc2VcbiAgICAgIG1hdGNoIGNoZWNrIGIgaSB3aXRoXG4gICAgICB8IHRydWUgLT4gZiBiIHQuaGFzaGVzLihqKSBpOyBpdGVyX2J1Y2tldCAoaSsxKSBqIGJcbiAgICAgIHwgZmFsc2UgLT4gaXRlcl9idWNrZXQgKGkrMSkgaiBiXG4gICAgaW5cbiAgICBBcnJheS5pdGVyaSAoaXRlcl9idWNrZXQgMCkgdC50YWJsZVxuICA7O1xuXG4gIGxldCByZWMgY291bnRfYnVja2V0IGkgYiBhY2N1ID1cbiAgICBpZiBpID49IGxlbmd0aCBiIHRoZW4gYWNjdSBlbHNlXG4gICAgY291bnRfYnVja2V0IChpKzEpIGIgKGFjY3UgKyAoaWYgY2hlY2sgYiBpIHRoZW4gMSBlbHNlIDApKVxuICA7O1xuXG4gIGxldCBjb3VudCB0ID1cbiAgICBBcnJheS5mb2xkX3JpZ2h0IChjb3VudF9idWNrZXQgMCkgdC50YWJsZSAwXG4gIDs7XG5cbiAgbGV0IG5leHRfc3ogbiA9IG1pbiAoMyAqIG4gLyAyICsgMykgU3lzLm1heF9hcnJheV9sZW5ndGg7O1xuICBsZXQgcHJldl9zeiBuID0gKChuIC0gMykgKiAyICsgMikgLyAzOztcblxuICBsZXQgdGVzdF9zaHJpbmtfYnVja2V0IHQgPVxuICAgIGxldCBidWNrZXQgPSB0LnRhYmxlLih0LnJvdmVyKSBpblxuICAgIGxldCBoYnVja2V0ID0gdC5oYXNoZXMuKHQucm92ZXIpIGluXG4gICAgbGV0IGxlbiA9IGxlbmd0aCBidWNrZXQgaW5cbiAgICBsZXQgcHJldl9sZW4gPSBwcmV2X3N6IGxlbiBpblxuICAgIGxldCBsaXZlID0gY291bnRfYnVja2V0IDAgYnVja2V0IDAgaW5cbiAgICBpZiBsaXZlIDw9IHByZXZfbGVuIHRoZW4gYmVnaW5cbiAgICAgIGxldCByZWMgbG9vcCBpIGogPVxuICAgICAgICBpZiBqID49IHByZXZfbGVuIHRoZW4gYmVnaW5cbiAgICAgICAgICBpZiBjaGVjayBidWNrZXQgaSB0aGVuIGxvb3AgKGkgKyAxKSBqXG4gICAgICAgICAgZWxzZSBpZiBjaGVjayBidWNrZXQgaiB0aGVuIGJlZ2luXG4gICAgICAgICAgICBibGl0IGJ1Y2tldCBqIGJ1Y2tldCBpIDE7XG4gICAgICAgICAgICBoYnVja2V0LihpKSA8LSBoYnVja2V0LihqKTtcbiAgICAgICAgICAgIGxvb3AgKGkgKyAxKSAoaiAtIDEpO1xuICAgICAgICAgIGVuZCBlbHNlIGxvb3AgaSAoaiAtIDEpO1xuICAgICAgICBlbmQ7XG4gICAgICBpblxuICAgICAgbG9vcCAwIChsZW5ndGggYnVja2V0IC0gMSk7XG4gICAgICBpZiBwcmV2X2xlbiA9IDAgdGhlbiBiZWdpblxuICAgICAgICB0LnRhYmxlLih0LnJvdmVyKSA8LSBlbXB0eWJ1Y2tldDtcbiAgICAgICAgdC5oYXNoZXMuKHQucm92ZXIpIDwtIFt8IHxdO1xuICAgICAgZW5kIGVsc2UgYmVnaW5cbiAgICAgICAgT2JqLnRydW5jYXRlIChPYmoucmVwciBidWNrZXQpIChwcmV2X2xlbiArIDEpO1xuICAgICAgICBPYmoudHJ1bmNhdGUgKE9iai5yZXByIGhidWNrZXQpIHByZXZfbGVuO1xuICAgICAgZW5kO1xuICAgICAgaWYgbGVuID4gdC5saW1pdCAmJiBwcmV2X2xlbiA8PSB0LmxpbWl0IHRoZW4gdC5vdmVyc2l6ZSA8LSB0Lm92ZXJzaXplIC0gMTtcbiAgICBlbmQ7XG4gICAgdC5yb3ZlciA8LSAodC5yb3ZlciArIDEpIG1vZCAoQXJyYXkubGVuZ3RoIHQudGFibGUpO1xuICA7O1xuXG4gIGxldCByZWMgcmVzaXplIHQgPVxuICAgIGxldCBvbGRsZW4gPSBBcnJheS5sZW5ndGggdC50YWJsZSBpblxuICAgIGxldCBuZXdsZW4gPSBuZXh0X3N6IG9sZGxlbiBpblxuICAgIGlmIG5ld2xlbiA+IG9sZGxlbiB0aGVuIGJlZ2luXG4gICAgICBsZXQgbmV3dCA9IGNyZWF0ZSBuZXdsZW4gaW5cbiAgICAgIGxldCBhZGRfd2VhayBvYiBvaCBvaSA9XG4gICAgICAgIGxldCBzZXR0ZXIgbmIgbmkgXyA9IGJsaXQgb2Igb2kgbmIgbmkgMSBpblxuICAgICAgICBsZXQgaCA9IG9oLihvaSkgaW5cbiAgICAgICAgYWRkX2F1eCBuZXd0IHNldHRlciBOb25lIGggKGdldF9pbmRleCBuZXd0IGgpO1xuICAgICAgaW5cbiAgICAgIGl0ZXJfd2VhayBhZGRfd2VhayB0O1xuICAgICAgdC50YWJsZSA8LSBuZXd0LnRhYmxlO1xuICAgICAgdC5oYXNoZXMgPC0gbmV3dC5oYXNoZXM7XG4gICAgICB0LmxpbWl0IDwtIG5ld3QubGltaXQ7XG4gICAgICB0Lm92ZXJzaXplIDwtIG5ld3Qub3ZlcnNpemU7XG4gICAgICB0LnJvdmVyIDwtIHQucm92ZXIgbW9kIEFycmF5Lmxlbmd0aCBuZXd0LnRhYmxlO1xuICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICB0LmxpbWl0IDwtIG1heF9pbnQ7ICAgICAgICAgICAgICgqIG1heGltdW0gc2l6ZSBhbHJlYWR5IHJlYWNoZWQgKilcbiAgICAgIHQub3ZlcnNpemUgPC0gMDtcbiAgICBlbmRcblxuICBhbmQgYWRkX2F1eCB0IHNldHRlciBkIGggaW5kZXggPVxuICAgIGxldCBidWNrZXQgPSB0LnRhYmxlLihpbmRleCkgaW5cbiAgICBsZXQgaGFzaGVzID0gdC5oYXNoZXMuKGluZGV4KSBpblxuICAgIGxldCBzeiA9IGxlbmd0aCBidWNrZXQgaW5cbiAgICBsZXQgcmVjIGxvb3AgaSA9XG4gICAgICBpZiBpID49IHN6IHRoZW4gYmVnaW5cbiAgICAgICAgbGV0IG5ld3N6ID0gbWluICgzICogc3ogLyAyICsgMykgKFN5cy5tYXhfYXJyYXlfbGVuZ3RoIC0gMSkgaW5cbiAgICAgICAgaWYgbmV3c3ogPD0gc3ogdGhlbiBmYWlsd2l0aCBcIldlYWsuTWFrZTogaGFzaCBidWNrZXQgY2Fubm90IGdyb3cgbW9yZVwiO1xuICAgICAgICBsZXQgbmV3YnVja2V0ID0gd2Vha19jcmVhdGUgbmV3c3ogaW5cbiAgICAgICAgbGV0IG5ld2hhc2hlcyA9IEFycmF5Lm1ha2UgbmV3c3ogMCBpblxuICAgICAgICBibGl0IGJ1Y2tldCAwIG5ld2J1Y2tldCAwIHN6O1xuICAgICAgICBBcnJheS5ibGl0IGhhc2hlcyAwIG5ld2hhc2hlcyAwIHN6O1xuICAgICAgICBzZXR0ZXIgbmV3YnVja2V0IHN6IGQ7XG4gICAgICAgIG5ld2hhc2hlcy4oc3opIDwtIGg7XG4gICAgICAgIHQudGFibGUuKGluZGV4KSA8LSBuZXdidWNrZXQ7XG4gICAgICAgIHQuaGFzaGVzLihpbmRleCkgPC0gbmV3aGFzaGVzO1xuICAgICAgICBpZiBzeiA8PSB0LmxpbWl0ICYmIG5ld3N6ID4gdC5saW1pdCB0aGVuIGJlZ2luXG4gICAgICAgICAgdC5vdmVyc2l6ZSA8LSB0Lm92ZXJzaXplICsgMTtcbiAgICAgICAgICBmb3IgX2kgPSAwIHRvIG92ZXJfbGltaXQgZG8gdGVzdF9zaHJpbmtfYnVja2V0IHQgZG9uZTtcbiAgICAgICAgZW5kO1xuICAgICAgICBpZiB0Lm92ZXJzaXplID4gQXJyYXkubGVuZ3RoIHQudGFibGUgLyBvdmVyX2xpbWl0IHRoZW4gcmVzaXplIHQ7XG4gICAgICBlbmQgZWxzZSBpZiBjaGVjayBidWNrZXQgaSB0aGVuIGJlZ2luXG4gICAgICAgIGxvb3AgKGkgKyAxKVxuICAgICAgZW5kIGVsc2UgYmVnaW5cbiAgICAgICAgc2V0dGVyIGJ1Y2tldCBpIGQ7XG4gICAgICAgIGhhc2hlcy4oaSkgPC0gaDtcbiAgICAgIGVuZDtcbiAgICBpblxuICAgIGxvb3AgMDtcbiAgOztcblxuICBsZXQgYWRkIHQgZCA9XG4gICAgbGV0IGggPSBILmhhc2ggZCBpblxuICAgIGFkZF9hdXggdCBzZXQgKFNvbWUgZCkgaCAoZ2V0X2luZGV4IHQgaCk7XG4gIDs7XG5cbiAgbGV0IGZpbmRfb3IgdCBkIGlmbm90Zm91bmQgPVxuICAgIGxldCBoID0gSC5oYXNoIGQgaW5cbiAgICBsZXQgaW5kZXggPSBnZXRfaW5kZXggdCBoIGluXG4gICAgbGV0IGJ1Y2tldCA9IHQudGFibGUuKGluZGV4KSBpblxuICAgIGxldCBoYXNoZXMgPSB0Lmhhc2hlcy4oaW5kZXgpIGluXG4gICAgbGV0IHN6ID0gbGVuZ3RoIGJ1Y2tldCBpblxuICAgIGxldCByZWMgbG9vcCBpID1cbiAgICAgIGlmIGkgPj0gc3ogdGhlbiBpZm5vdGZvdW5kIGggaW5kZXhcbiAgICAgIGVsc2UgaWYgaCA9IGhhc2hlcy4oaSkgdGhlbiBiZWdpblxuICAgICAgICBtYXRjaCBnZXRfY29weSBidWNrZXQgaSB3aXRoXG4gICAgICAgIHwgU29tZSB2IHdoZW4gSC5lcXVhbCB2IGRcbiAgICAgICAgICAgLT4gYmVnaW4gbWF0Y2ggZ2V0IGJ1Y2tldCBpIHdpdGhcbiAgICAgICAgICAgICAgfCBTb21lIHYgLT4gdlxuICAgICAgICAgICAgICB8IE5vbmUgLT4gbG9vcCAoaSArIDEpXG4gICAgICAgICAgICAgIGVuZFxuICAgICAgICB8IF8gLT4gbG9vcCAoaSArIDEpXG4gICAgICBlbmQgZWxzZSBsb29wIChpICsgMSlcbiAgICBpblxuICAgIGxvb3AgMFxuICA7O1xuXG4gIGxldCBtZXJnZSB0IGQgPVxuICAgIGZpbmRfb3IgdCBkIChmdW4gaCBpbmRleCAtPiBhZGRfYXV4IHQgc2V0IChTb21lIGQpIGggaW5kZXg7IGQpXG4gIDs7XG5cbiAgbGV0IGZpbmQgdCBkID0gZmluZF9vciB0IGQgKGZ1biBoIGluZGV4IC0+IHJhaXNlIE5vdF9mb3VuZCk7O1xuXG4gIGxldCBmaW5kX3NoYWRvdyB0IGQgaWZmb3VuZCBpZm5vdGZvdW5kID1cbiAgICBsZXQgaCA9IEguaGFzaCBkIGluXG4gICAgbGV0IGluZGV4ID0gZ2V0X2luZGV4IHQgaCBpblxuICAgIGxldCBidWNrZXQgPSB0LnRhYmxlLihpbmRleCkgaW5cbiAgICBsZXQgaGFzaGVzID0gdC5oYXNoZXMuKGluZGV4KSBpblxuICAgIGxldCBzeiA9IGxlbmd0aCBidWNrZXQgaW5cbiAgICBsZXQgcmVjIGxvb3AgaSA9XG4gICAgICBpZiBpID49IHN6IHRoZW4gaWZub3Rmb3VuZFxuICAgICAgZWxzZSBpZiBoID0gaGFzaGVzLihpKSB0aGVuIGJlZ2luXG4gICAgICAgIG1hdGNoIGdldF9jb3B5IGJ1Y2tldCBpIHdpdGhcbiAgICAgICAgfCBTb21lIHYgd2hlbiBILmVxdWFsIHYgZCAtPiBpZmZvdW5kIGJ1Y2tldCBpXG4gICAgICAgIHwgXyAtPiBsb29wIChpICsgMSlcbiAgICAgIGVuZCBlbHNlIGxvb3AgKGkgKyAxKVxuICAgIGluXG4gICAgbG9vcCAwXG4gIDs7XG5cbiAgbGV0IHJlbW92ZSB0IGQgPSBmaW5kX3NoYWRvdyB0IGQgKGZ1biB3IGkgLT4gc2V0IHcgaSBOb25lKSAoKTs7XG5cbiAgbGV0IG1lbSB0IGQgPSBmaW5kX3NoYWRvdyB0IGQgKGZ1biB3IGkgLT4gdHJ1ZSkgZmFsc2U7O1xuXG4gIGxldCBmaW5kX2FsbCB0IGQgPVxuICAgIGxldCBoID0gSC5oYXNoIGQgaW5cbiAgICBsZXQgaW5kZXggPSBnZXRfaW5kZXggdCBoIGluXG4gICAgbGV0IGJ1Y2tldCA9IHQudGFibGUuKGluZGV4KSBpblxuICAgIGxldCBoYXNoZXMgPSB0Lmhhc2hlcy4oaW5kZXgpIGluXG4gICAgbGV0IHN6ID0gbGVuZ3RoIGJ1Y2tldCBpblxuICAgIGxldCByZWMgbG9vcCBpIGFjY3UgPVxuICAgICAgaWYgaSA+PSBzeiB0aGVuIGFjY3VcbiAgICAgIGVsc2UgaWYgaCA9IGhhc2hlcy4oaSkgdGhlbiBiZWdpblxuICAgICAgICBtYXRjaCBnZXRfY29weSBidWNrZXQgaSB3aXRoXG4gICAgICAgIHwgU29tZSB2IHdoZW4gSC5lcXVhbCB2IGRcbiAgICAgICAgICAgLT4gYmVnaW4gbWF0Y2ggZ2V0IGJ1Y2tldCBpIHdpdGhcbiAgICAgICAgICAgICAgfCBTb21lIHYgLT4gbG9vcCAoaSArIDEpICh2IDo6IGFjY3UpXG4gICAgICAgICAgICAgIHwgTm9uZSAtPiBsb29wIChpICsgMSkgYWNjdVxuICAgICAgICAgICAgICBlbmRcbiAgICAgICAgfCBfIC0+IGxvb3AgKGkgKyAxKSBhY2N1XG4gICAgICBlbmQgZWxzZSBsb29wIChpICsgMSkgYWNjdVxuICAgIGluXG4gICAgbG9vcCAwIFtdXG4gIDs7XG5cbiAgbGV0IHN0YXRzIHQgPVxuICAgIGxldCBsZW4gPSBBcnJheS5sZW5ndGggdC50YWJsZSBpblxuICAgIGxldCBsZW5zID0gQXJyYXkubWFwIGxlbmd0aCB0LnRhYmxlIGluXG4gICAgQXJyYXkuc29ydCBjb21wYXJlIGxlbnM7XG4gICAgbGV0IHRvdGxlbiA9IEFycmF5LmZvbGRfbGVmdCAoICsgKSAwIGxlbnMgaW5cbiAgICAobGVuLCBjb3VudCB0LCB0b3RsZW4sIGxlbnMuKDApLCBsZW5zLihsZW4vMiksIGxlbnMuKGxlbi0xKSlcbiAgOztcblxuZW5kOztcbiIsIigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQ2FtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICAgICAgICAgICAgWGF2aWVyIExlcm95LCBwcm9qZXQgQ3Jpc3RhbCwgSU5SSUEgUm9jcXVlbmNvdXJ0ICAgICAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqICBDb3B5cmlnaHQgMjAwMiBJbnN0aXR1dCBOYXRpb25hbCBkZSBSZWNoZXJjaGUgZW4gSW5mb3JtYXRpcXVlIGV0ICAgKilcbigqICBlbiBBdXRvbWF0aXF1ZS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgICAgKilcbigqICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMaWJyYXJ5IEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHdpdGggICAgKilcbigqICB0aGUgc3BlY2lhbCBleGNlcHRpb24gb24gbGlua2luZyBkZXNjcmliZWQgaW4gZmlsZSAuLi9MSUNFTlNFLiAgICAgKilcbigqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKilcblxuKCogQ29tcGxleCBudW1iZXJzICopXG5cbnR5cGUgdCA9IHsgcmU6IGZsb2F0OyBpbTogZmxvYXQgfVxuXG5sZXQgemVybyA9IHsgcmUgPSAwLjA7IGltID0gMC4wIH1cbmxldCBvbmUgPSB7IHJlID0gMS4wOyBpbSA9IDAuMCB9XG5sZXQgaSA9IHsgcmUgPSAwLjA7IGltID0gMS4wIH1cblxubGV0IGFkZCB4IHkgPSB7IHJlID0geC5yZSArLiB5LnJlOyBpbSA9IHguaW0gKy4geS5pbSB9XG5cbmxldCBzdWIgeCB5ID0geyByZSA9IHgucmUgLS4geS5yZTsgaW0gPSB4LmltIC0uIHkuaW0gfVxuXG5sZXQgbmVnIHggPSB7IHJlID0gLS4geC5yZTsgaW0gPSAtLiB4LmltIH1cblxubGV0IGNvbmogeCA9IHsgcmUgPSB4LnJlOyBpbSA9IC0uIHguaW0gfVxuXG5sZXQgbXVsIHggeSA9IHsgcmUgPSB4LnJlICouIHkucmUgLS4geC5pbSAqLiB5LmltO1xuICAgICAgICAgICAgICAgIGltID0geC5yZSAqLiB5LmltICsuIHguaW0gKi4geS5yZSB9XG5cbmxldCBkaXYgeCB5ID1cbiAgaWYgYWJzX2Zsb2F0IHkucmUgPj0gYWJzX2Zsb2F0IHkuaW0gdGhlblxuICAgIGxldCByID0geS5pbSAvLiB5LnJlIGluXG4gICAgbGV0IGQgPSB5LnJlICsuIHIgKi4geS5pbSBpblxuICAgIHsgcmUgPSAoeC5yZSArLiByICouIHguaW0pIC8uIGQ7XG4gICAgICBpbSA9ICh4LmltIC0uIHIgKi4geC5yZSkgLy4gZCB9XG4gIGVsc2VcbiAgICBsZXQgciA9IHkucmUgLy4geS5pbSBpblxuICAgIGxldCBkID0geS5pbSArLiByICouIHkucmUgaW5cbiAgICB7IHJlID0gKHIgKi4geC5yZSArLiB4LmltKSAvLiBkO1xuICAgICAgaW0gPSAociAqLiB4LmltIC0uIHgucmUpIC8uIGQgfVxuXG5sZXQgaW52IHggPSBkaXYgb25lIHhcblxubGV0IG5vcm0yIHggPSB4LnJlICouIHgucmUgKy4geC5pbSAqLiB4LmltXG5cbmxldCBub3JtIHggPVxuICAoKiBXYXRjaCBvdXQgZm9yIG92ZXJmbG93IGluIGNvbXB1dGluZyByZV4yICsgaW1eMiAqKVxuICBsZXQgciA9IGFic19mbG9hdCB4LnJlIGFuZCBpID0gYWJzX2Zsb2F0IHguaW0gaW5cbiAgaWYgciA9IDAuMCB0aGVuIGlcbiAgZWxzZSBpZiBpID0gMC4wIHRoZW4gclxuICBlbHNlIGlmIHIgPj0gaSB0aGVuXG4gICAgbGV0IHEgPSBpIC8uIHIgaW4gciAqLiBzcXJ0KDEuMCArLiBxICouIHEpXG4gIGVsc2VcbiAgICBsZXQgcSA9IHIgLy4gaSBpbiBpICouIHNxcnQoMS4wICsuIHEgKi4gcSlcblxubGV0IGFyZyB4ID0gYXRhbjIgeC5pbSB4LnJlXG5cbmxldCBwb2xhciBuIGEgPSB7IHJlID0gY29zIGEgKi4gbjsgaW0gPSBzaW4gYSAqLiBuIH1cblxubGV0IHNxcnQgeCA9XG4gIGlmIHgucmUgPSAwLjAgJiYgeC5pbSA9IDAuMCB0aGVuIHsgcmUgPSAwLjA7IGltID0gMC4wIH1cbiAgZWxzZSBiZWdpblxuICAgIGxldCByID0gYWJzX2Zsb2F0IHgucmUgYW5kIGkgPSBhYnNfZmxvYXQgeC5pbSBpblxuICAgIGxldCB3ID1cbiAgICAgIGlmIHIgPj0gaSB0aGVuIGJlZ2luXG4gICAgICAgIGxldCBxID0gaSAvLiByIGluXG4gICAgICAgIHNxcnQocikgKi4gc3FydCgwLjUgKi4gKDEuMCArLiBzcXJ0KDEuMCArLiBxICouIHEpKSlcbiAgICAgIGVuZCBlbHNlIGJlZ2luXG4gICAgICAgIGxldCBxID0gciAvLiBpIGluXG4gICAgICAgIHNxcnQoaSkgKi4gc3FydCgwLjUgKi4gKHEgKy4gc3FydCgxLjAgKy4gcSAqLiBxKSkpXG4gICAgICBlbmQgaW5cbiAgICBpZiB4LnJlID49IDAuMFxuICAgIHRoZW4geyByZSA9IHc7ICBpbSA9IDAuNSAqLiB4LmltIC8uIHcgfVxuICAgIGVsc2UgeyByZSA9IDAuNSAqLiBpIC8uIHc7ICBpbSA9IGlmIHguaW0gPj0gMC4wIHRoZW4gdyBlbHNlIC0uIHcgfVxuICBlbmRcblxubGV0IGV4cCB4ID1cbiAgbGV0IGUgPSBleHAgeC5yZSBpbiB7IHJlID0gZSAqLiBjb3MgeC5pbTsgaW0gPSBlICouIHNpbiB4LmltIH1cblxubGV0IGxvZyB4ID0geyByZSA9IGxvZyAobm9ybSB4KTsgaW0gPSBhdGFuMiB4LmltIHgucmUgfVxuXG5sZXQgcG93IHggeSA9IGV4cCAobXVsIHkgKGxvZyB4KSlcbiIsIiMgMSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4oKiBDb3B5cmlnaHQgMjAxNy0yMDE4IFZpbmNlbnQgSmFjcXVlcyA8dmluY2VudEB2aW5jZW50LWphY3F1ZXMubmV0PiAqKVxuXG5tb2R1bGUgdHlwZSBTID0gc2lnXG4jIDEgXCJzcmMvUy5pbmNsLm1saVwiXG4oKiBDb3B5cmlnaHQgMjAxNy0yMDE4IFZpbmNlbnQgSmFjcXVlcyA8dmluY2VudEB2aW5jZW50LWphY3F1ZXMubmV0PiAqKVxuXG4oKiBPcGVyYXRpb25zIG5vdCBzdXBwb3J0ZWQgYnkgSFRNTDUgY2FudmFzLlxuV2Ugd2lsbCBwcm9iYWJseSBub3QgdHJ5IHRvIGltcGxlbWVudCB0aGVzZSBmdW5jdGlvbnMuXG5cbnR5cGUgYW50aWFsaWFzID0gQU5USUFMSUFTX0RFRkFVTFQgfCBBTlRJQUxJQVNfTk9ORSB8IEFOVElBTElBU19HUkFZIHwgQU5USUFMSUFTX1NVQlBJWEVMXG52YWwgc2V0X2FudGlhbGlhczogY29udGV4dCAtPiBhbnRpYWxpYXMgLT4gdW5pdFxudmFsIGdldF9hbnRpYWxpYXM6IGNvbnRleHQgLT4gYW50aWFsaWFzXG5cbnZhbCBjbGlwX3Jlc2V0OiBjb250ZXh0IC0+IHVuaXRcblxudmFsIHNldF90b2xlcmFuY2U6IGNvbnRleHQgLT4gZmxvYXQgLT4gdW5pdFxudmFsIGdldF90b2xlcmFuY2U6IGNvbnRleHQgLT4gZmxvYXRcblxudmFsIGNvcHlfcGFnZTogY29udGV4dCAtPiB1bml0XG52YWwgc2hvd19wYWdlOiBjb250ZXh0IC0+IHVuaXRcblxudmFsIG1hc2s6IGNvbnRleHQgLT4gJ2EgUGF0dGVybi50IC0+IHVuaXRcbnZhbCBtYXNrX3N1cmZhY2U6IGNvbnRleHQgLT4gU3VyZmFjZS50IC0+IHg6ZmxvYXQgLT4geTpmbG9hdCAtPiB1bml0XG5cbnZhbCBjbGlwX2V4dGVudHM6IGNvbnRleHQgLT4gcmVjdGFuZ2xlXG52YWwgY2xpcF9yZWN0YW5nbGVfbGlzdDogY29udGV4dCAtPiByZWN0YW5nbGUgbGlzdFxuXG52YWwgZmlsbF9leHRlbnRzOiBjb250ZXh0IC0+IHJlY3RhbmdsZVxudmFsIGluX2ZpbGw6IGNvbnRleHQgLT4geDpmbG9hdCAtPiB5OmZsb2F0IC0+IGJvb2xcblxudmFsIHN0cm9rZV9leHRlbnRzOiBjb250ZXh0IC0+IHJlY3RhbmdsZVxudmFsIGluX3N0cm9rZTogY29udGV4dCAtPiB4OmZsb2F0IC0+IHk6ZmxvYXQgLT4gYm9vbFxuXG5tb2R1bGUgUGF0dGVybjogc2lnXG4gIHR5cGUgZXh0ZW5kID0gTk9ORSB8IFJFUEVBVCB8IFJFRkxFQ1QgfCBQQURcbiAgdmFsIHNldF9leHRlbmQ6ICdhIHQgLT4gZXh0ZW5kIC0+IHVuaXRcbiAgdmFsIGdldF9leHRlbmQ6ICdhIHQgLT4gZXh0ZW5kXG5cbiAgdHlwZSBmaWx0ZXIgPSBGQVNUIHwgR09PRCB8IEJFU1QgfCBORUFSRVNUIHwgQklMSU5FQVJcbiAgdmFsIHNldF9maWx0ZXI6ICdhIHQgLT4gZmlsdGVyIC0+IHVuaXRcbiAgdmFsIGdldF9maWx0ZXI6ICdhIHQgLT4gZmlsdGVyXG4gIHZhbCBzZXRfbWF0cml4OiAnYSB0IC0+IE1hdHJpeC50IC0+IHVuaXRcbiAgdmFsIGdldF9tYXRyaXg6ICdhIHQgLT4gTWF0cml4LnRcblxuICBJIHRyaWVkIGltcGxlbWVudGluZyBzdXJmYWNlIHBhdHRlcm5zIHVzaW5nIGNyZWF0ZVBhdHRlcm4gd2l0aCBhIG5ldyBjYW52YXMgZWxlbWVudCwgYnV0OlxuICAtIHRoZSByZXBlYXQgb3B0aW9ucyBkb24ndCBtYXRjaCB0eXBlIGV4dGVuZFxuICAtIHRoZXJlIGlzIG5vIHN1cHBvcnQgZm9yIHRyYW5zZm9ybWF0aW9ucyAob25seSBhbiBleHBlcmltZW50YWwgc2V0VHJhbnNmb3JtIGluIEZpcmVmb3gpXG4gIHNvIEkgY291bGRuJ3QgaW1wbGVtZW50IHNldF9tYXRyaXggYW5kIHRoZSB4IGFuZCB5IHBhcmFtZXRlcnMgb2Ygc2V0X3NvdXJjZV9zdXJmYWNlLlxuXG4gIHZhbCBjcmVhdGVfZm9yX3N1cmZhY2U6IFN1cmZhY2UudCAtPiBbYFN1cmZhY2VdIHRcbiAgdmFsIGdldF9zdXJmYWNlOiBbYFN1cmZhY2VdIHQgLT4gU3VyZmFjZS50XG5lbmRcblxudmFsIHNldF9zb3VyY2Vfc3VyZmFjZTogY29udGV4dCAtPiBTdXJmYWNlLnQgLT4geDpmbG9hdCAtPiB5OmZsb2F0IC0+IHVuaXRcblxuKilcblxuKCogT3RoZXIgdHlwZXMgYW5kIGZ1bmN0aW9ucyBjb21tZW50ZWQgb3V0IGJlbG93IGhhdmUgbm90IGJlZW4gYW5hbHl6ZWQgeWV0LlxuVGhleSBtYXkgb3IgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBsYXRlci4gKilcblxudHlwZSBzdGF0dXMgPSBJTlZBTElEX1JFU1RPUkUgfCBJTlZBTElEX1BPUF9HUk9VUCB8IE5PX0NVUlJFTlRfUE9JTlQgfCBJTlZBTElEX01BVFJJWCB8IElOVkFMSURfU1RBVFVTIHwgTlVMTF9QT0lOVEVSIHwgSU5WQUxJRF9TVFJJTkcgfCBJTlZBTElEX1BBVEhfREFUQSB8IFJFQURfRVJST1IgfCBXUklURV9FUlJPUiB8IFNVUkZBQ0VfRklOSVNIRUQgfCBTVVJGQUNFX1RZUEVfTUlTTUFUQ0ggfCBQQVRURVJOX1RZUEVfTUlTTUFUQ0ggfCBJTlZBTElEX0NPTlRFTlQgfCBJTlZBTElEX0ZPUk1BVCB8IElOVkFMSURfVklTVUFMIHwgRklMRV9OT1RfRk9VTkQgfCBJTlZBTElEX0RBU0ggfCBJTlZBTElEX0RTQ19DT01NRU5UIHwgSU5WQUxJRF9JTkRFWCB8IENMSVBfTk9UX1JFUFJFU0VOVEFCTEUgfCBURU1QX0ZJTEVfRVJST1IgfCBJTlZBTElEX1NUUklERSB8IEZPTlRfVFlQRV9NSVNNQVRDSCB8IFVTRVJfRk9OVF9JTU1VVEFCTEUgfCBVU0VSX0ZPTlRfRVJST1IgfCBORUdBVElWRV9DT1VOVCB8IElOVkFMSURfQ0xVU1RFUlMgfCBJTlZBTElEX1NMQU5UIHwgSU5WQUxJRF9XRUlHSFQgfCBJTlZBTElEX1NJWkUgfCBVU0VSX0ZPTlRfTk9UX0lNUExFTUVOVEVEIHwgREVWSUNFX1RZUEVfTUlTTUFUQ0ggfCBERVZJQ0VfRVJST1IgfCBJTlZBTElEX01FU0hfQ09OU1RSVUNUSU9OIHwgREVWSUNFX0ZJTklTSEVEIHwgSkJJRzJfR0xPQkFMX01JU1NJTkdcblxuZXhjZXB0aW9uIEVycm9yIG9mIHN0YXR1c1xuXG52YWwgc3RhdHVzX3RvX3N0cmluZzogc3RhdHVzIC0+IHN0cmluZ1xuXG5leGNlcHRpb24gVW5hdmFpbGFibGVcblxudHlwZSBjb250ZXh0XG5cbnR5cGUgbWF0cml4ID0ge1xuICBtdXRhYmxlIHh4OiBmbG9hdDtcbiAgbXV0YWJsZSB5eDogZmxvYXQ7XG4gIG11dGFibGUgeHk6IGZsb2F0O1xuICBtdXRhYmxlIHl5OiBmbG9hdDtcbiAgbXV0YWJsZSB4MDogZmxvYXQ7XG4gIG11dGFibGUgeTA6IGZsb2F0O1xufVxuXG5tb2R1bGUgTWF0cml4OiBzaWdcbiAgdHlwZSB0ID0gbWF0cml4XG5cbiAgdmFsIGluaXRfaWRlbnRpdHk6IHVuaXQgLT4gdFxuICB2YWwgaW5pdF90cmFuc2xhdGU6IGZsb2F0IC0+IGZsb2F0IC0+IHRcbiAgdmFsIGluaXRfc2NhbGU6IGZsb2F0IC0+IGZsb2F0IC0+IHRcbiAgdmFsIGluaXRfcm90YXRlOiBmbG9hdCAtPiB0XG4gIHZhbCB0cmFuc2xhdGU6IHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gdW5pdFxuICB2YWwgc2NhbGU6IHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gdW5pdFxuICB2YWwgcm90YXRlOiB0IC0+IGZsb2F0IC0+IHVuaXRcbiAgdmFsIGludmVydDogdCAtPiB1bml0XG4gIHZhbCBtdWx0aXBseTogdCAtPiB0IC0+IHRcbiAgdmFsIHRyYW5zZm9ybV9kaXN0YW5jZTogdCAtPiBkeDpmbG9hdCAtPiBkeTpmbG9hdCAtPiBmbG9hdCAqIGZsb2F0XG4gIHZhbCB0cmFuc2Zvcm1fcG9pbnQ6IHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgKiBmbG9hdFxuZW5kXG5cbnR5cGUgdGV4dF9leHRlbnRzID0ge1xuICB4X2JlYXJpbmc6IGZsb2F0O1xuICB5X2JlYXJpbmc6IGZsb2F0O1xuICB3aWR0aDogZmxvYXQ7XG4gIGhlaWdodDogZmxvYXQ7XG4gIHhfYWR2YW5jZTogZmxvYXQ7XG4gIHlfYWR2YW5jZTogZmxvYXQ7XG59XG5cbigqIG1vZHVsZSBHbHlwaDogc2lnXG4gIHR5cGUgdCA9IHtcbiAgICBpbmRleDogaW50O1xuICAgIHg6IGZsb2F0O1xuICAgIHk6IGZsb2F0O1xuICB9XG5cbiAgdHlwZSBjbHVzdGVyID0ge1xuICAgIG51bV9ieXRlczogaW50O1xuICAgIG51bV9nbHlwaHM6IGludDtcbiAgfVxuXG4gIHR5cGUgY2x1c3Rlcl9mbGFncyA9IEJBQ0tXQVJEXG5cbiAgdmFsIGV4dGVudHM6IGNvbnRleHQgLT4gdCBhcnJheSAtPiB0ZXh0X2V4dGVudHNcbiAgdmFsIHNob3c6IGNvbnRleHQgLT4gdCBhcnJheSAtPiB1bml0XG4gIHZhbCBzaG93X3RleHQ6IGNvbnRleHQgLT4gc3RyaW5nIC0+IHQgYXJyYXkgLT4gY2x1c3RlciBhcnJheSAtPiBjbHVzdGVyX2ZsYWdzIC0+IHVuaXRcbmVuZCAqKVxuXG4oKiB0eXBlIHN1YnBpeGVsX29yZGVyID0gU1VCUElYRUxfT1JERVJfREVGQVVMVCB8IFNVQlBJWEVMX09SREVSX1JHQiB8IFNVQlBJWEVMX09SREVSX0JHUiB8IFNVQlBJWEVMX09SREVSX1ZSR0IgfCBTVUJQSVhFTF9PUkRFUl9WQkdSICopXG5cbigqIHR5cGUgaGludF9zdHlsZSA9IEhJTlRfU1RZTEVfREVGQVVMVCB8IEhJTlRfU1RZTEVfTk9ORSB8IEhJTlRfU1RZTEVfU0xJR0hUIHwgSElOVF9TVFlMRV9NRURJVU0gfCBISU5UX1NUWUxFX0ZVTEwgKilcblxuKCogdHlwZSBoaW50X21ldHJpY3MgPSBISU5UX01FVFJJQ1NfREVGQVVMVCB8IEhJTlRfTUVUUklDU19PRkYgfCBISU5UX01FVFJJQ1NfT04gKilcblxuKCogbW9kdWxlIEZvbnRfb3B0aW9uczogc2lnXG4gIHR5cGUgdFxuXG4gIHZhbCBzZXQ6IGNvbnRleHQgLT4gdCAtPiB1bml0XG4gIHZhbCBnZXQ6IGNvbnRleHQgLT4gdFxuICB2YWwgY3JlYXRlOiB1bml0IC0+IHRcbiAgdmFsIG1ha2U6ID9hbnRpYWxpYXM6YW50aWFsaWFzIC0+ID9zdWJwaXhlbF9vcmRlcjpzdWJwaXhlbF9vcmRlciAtPiA/aGludF9zdHlsZTpoaW50X3N0eWxlIC0+ID9oaW50X21ldHJpY3M6aGludF9tZXRyaWNzIC0+IHVuaXQgLT4gdFxuICB2YWwgY29weTogdCAtPiB0XG4gIHZhbCBtZXJnZTogdCAtPiB0IC0+IHVuaXRcbiAgdmFsIHNldF9hbnRpYWxpYXM6IHQgLT4gYW50aWFsaWFzIC0+IHVuaXRcbiAgdmFsIGdldF9hbnRpYWxpYXM6IHQgLT4gYW50aWFsaWFzXG4gIHZhbCBzZXRfc3VicGl4ZWxfb3JkZXI6IHQgLT4gc3VicGl4ZWxfb3JkZXIgLT4gdW5pdFxuICB2YWwgZ2V0X3N1YnBpeGVsX29yZGVyOiB0IC0+IHN1YnBpeGVsX29yZGVyXG4gIHZhbCBzZXRfaGludF9zdHlsZTogdCAtPiBoaW50X3N0eWxlIC0+IHVuaXRcbiAgdmFsIGdldF9oaW50X3N0eWxlOiB0IC0+IGhpbnRfc3R5bGVcbiAgdmFsIHNldF9oaW50X21ldHJpY3M6IHQgLT4gaGludF9tZXRyaWNzIC0+IHVuaXRcbiAgdmFsIGdldF9oaW50X21ldHJpY3M6IHQgLT4gaGludF9tZXRyaWNzXG5lbmQgKilcblxudHlwZSBzbGFudCA9IFVwcmlnaHQgfCBJdGFsaWMgfCBPYmxpcXVlXG5cbnR5cGUgd2VpZ2h0ID0gTm9ybWFsIHwgQm9sZFxuXG4oKiB0eXBlIGZvbnRfdHlwZSA9IFsgYFRveSB8IGBGdCB8IGBXaW4zMiB8IGBRdWFydHogfCBgVXNlciBdICopXG5cbigqIG1vZHVsZSBGb250X2ZhY2U6IHNpZ1xuICB0eXBlICdhIHRcblxuICB2YWwgc2V0OiBjb250ZXh0IC0+IF8gdCAtPiB1bml0XG4gIHZhbCBnZXQ6IGNvbnRleHQgLT4gZm9udF90eXBlIHRcbiAgdmFsIGdldF90eXBlOiAnYSB0IC0+IGZvbnRfdHlwZVxuICB2YWwgY3JlYXRlOiA/ZmFtaWx5OnN0cmluZyAtPiBzbGFudCAtPiB3ZWlnaHQgLT4gW2BUb3ldIHRcbiAgdmFsIGdldF9mYW1pbHk6IFtgVG95XSB0IC0+IHN0cmluZ1xuICB2YWwgZ2V0X3NsYW50OiBbYFRveV0gdCAtPiBzbGFudFxuICB2YWwgZ2V0X3dlaWdodDogW2BUb3ldIHQgLT4gd2VpZ2h0XG5lbmQgKilcblxudHlwZSBmb250X2V4dGVudHMgPSB7XG4gIGFzY2VudDogZmxvYXQ7XG4gIGRlc2NlbnQ6IGZsb2F0O1xuICBiYXNlbGluZTogZmxvYXQ7XG4gIG1heF94X2FkdmFuY2U6IGZsb2F0O1xuICBtYXhfeV9hZHZhbmNlOiBmbG9hdDtcbn1cblxuKCogbW9kdWxlIFNjYWxlZF9mb250OiBzaWdcbiAgdHlwZSAnYSB0XG5cbiAgdmFsIHNldDogY29udGV4dCAtPiBfIHQgLT4gdW5pdFxuICB2YWwgZ2V0OiBjb250ZXh0IC0+ICdhIHRcbiAgdmFsIGNyZWF0ZTogJ2EgRm9udF9mYWNlLnQgLT4gTWF0cml4LnQgLT4gTWF0cml4LnQgLT4gRm9udF9vcHRpb25zLnQgLT4gJ2EgdFxuICB2YWwgZXh0ZW50czogXyB0IC0+IGZvbnRfZXh0ZW50c1xuICB2YWwgdGV4dF9leHRlbnRzOiBfIHQgLT4gc3RyaW5nIC0+IHRleHRfZXh0ZW50c1xuICB2YWwgZ2x5cGhfZXh0ZW50czogXyB0IC0+IEdseXBoLnQgYXJyYXkgLT4gdGV4dF9leHRlbnRzXG4gIHZhbCB0ZXh0X3RvX2dseXBoczogXyB0IC0+IHg6ZmxvYXQgLT4geTpmbG9hdCAtPiBzdHJpbmcgLT4gR2x5cGgudCBhcnJheSAqIEdseXBoLmNsdXN0ZXIgYXJyYXkgKiBHbHlwaC5jbHVzdGVyX2ZsYWdzXG4gIHZhbCBnZXRfZm9udF9mYWNlOiAnYSB0IC0+ICdhIEZvbnRfZmFjZS50XG4gIHZhbCBnZXRfZm9udF9vcHRpb25zOiBfIHQgLT4gRm9udF9vcHRpb25zLnRcbiAgdmFsIGdldF9mb250X21hdHJpeDogXyB0IC0+IE1hdHJpeC50XG4gIHZhbCBnZXRfY3RtOiBfIHQgLT4gTWF0cml4LnRcbiAgdmFsIGdldF9zY2FsZV9tYXRyaXg6IF8gdCAtPiBNYXRyaXgudFxuICB2YWwgZ2V0X3R5cGU6ICdhIHQgLT4gZm9udF90eXBlXG5lbmQgKilcblxudmFsIHNlbGVjdF9mb250X2ZhY2U6IGNvbnRleHQgLT4gP3NsYW50OnNsYW50IC0+ID93ZWlnaHQ6d2VpZ2h0IC0+IHN0cmluZyAtPiB1bml0XG52YWwgc2V0X2ZvbnRfc2l6ZTogY29udGV4dCAtPiBmbG9hdCAtPiB1bml0XG4oKiB2YWwgc2V0X2ZvbnRfbWF0cml4OiBjb250ZXh0IC0+IE1hdHJpeC50IC0+IHVuaXQgKilcbigqIHZhbCBnZXRfZm9udF9tYXRyaXg6IGNvbnRleHQgLT4gTWF0cml4LnQgKilcbnZhbCBzaG93X3RleHQ6IGNvbnRleHQgLT4gc3RyaW5nIC0+IHVuaXRcbnZhbCBmb250X2V4dGVudHM6IGNvbnRleHQgLT4gZm9udF9leHRlbnRzXG52YWwgdGV4dF9leHRlbnRzOiBjb250ZXh0IC0+IHN0cmluZyAtPiB0ZXh0X2V4dGVudHNcblxuKCogdHlwZSByZWN0YW5nbGUgPSB7XG4gIHg6IGZsb2F0O1xuICB5OiBmbG9hdDtcbiAgdzogZmxvYXQ7XG4gIGg6IGZsb2F0O1xufSAqKVxuXG4oKiB0eXBlIGNvbnRlbnQgPSBDT0xPUiB8IEFMUEhBIHwgQ09MT1JfQUxQSEEgKilcblxuKCogbW9kdWxlIFN1cmZhY2U6IHNpZ1xuICB0eXBlIHRcblxuICB2YWwgY3JlYXRlX3NpbWlsYXI6IHQgLT4gY29udGVudCAtPiB3aWR0aDppbnQgLT4gaGVpZ2h0OmludCAtPiB0XG4gIHZhbCBmaW5pc2g6IHQgLT4gdW5pdFxuICB2YWwgZmx1c2g6IHQgLT4gdW5pdFxuICB2YWwgZ2V0X2ZvbnRfb3B0aW9uczogdCAtPiBGb250X29wdGlvbnMudFxuICB2YWwgZ2V0X2NvbnRlbnQ6IHQgLT4gY29udGVudFxuICB2YWwgbWFya19kaXJ0eTogdCAtPiB1bml0XG4gIHZhbCBtYXJrX2RpcnR5X3JlY3RhbmdsZTogdCAtPiB4OmludCAtPiB5OmludCAtPiB3OmludCAtPiBoOmludCAtPiB1bml0XG4gIHZhbCBzZXRfZGV2aWNlX29mZnNldDogdCAtPiB4OmZsb2F0IC0+IHk6ZmxvYXQgLT4gdW5pdFxuICB2YWwgZ2V0X2RldmljZV9vZmZzZXQ6IHQgLT4gZmxvYXQgKiBmbG9hdFxuICB2YWwgc2V0X2ZhbGxiYWNrX3Jlc29sdXRpb246IHQgLT4geDpmbG9hdCAtPiB5OmZsb2F0IC0+IHVuaXRcbiAgdmFsIGdldF9mYWxsYmFja19yZXNvbHV0aW9uOiB0IC0+IGZsb2F0ICogZmxvYXRcblxuICB0eXBlIGtpbmQgPSBbIGBJbWFnZSB8IGBQREYgfCBgUFMgfCBgWExpYiB8IGBYQ0IgfCBgR0xJVFogfCBgUXVhcnR6IHwgYFdpbjMyIHwgYEJFT1MgfCBgRGlyZWN0RkIgfCBgU1ZHIHwgYE9TMiB8IGBXaW4zMl9wcmludGluZyB8IGBRdWFydHpfaW1hZ2UgfCBgUmVjb3JkaW5nIF1cblxuICB2YWwgZ2V0X3R5cGU6IHQgLT4ga2luZFxuICB2YWwgY29weV9wYWdlOiB0IC0+IHVuaXRcbiAgdmFsIHNob3dfcGFnZTogdCAtPiB1bml0XG4gIHZhbCBoYXNfc2hvd190ZXh0X2dseXBoczogdCAtPiBib29sXG5lbmQgKilcblxuKCogbW9kdWxlIEltYWdlOiBzaWdcbiAgdHlwZSBmb3JtYXQgPSB8IEFSR0IzMiB8IFJHQjI0IHwgQTggfCBBMVxuXG4gIHZhbCBjcmVhdGU6IGZvcm1hdCAtPiB3aWR0aDppbnQgLT4gaGVpZ2h0OmludCAtPiBTdXJmYWNlLnRcblxuICB0eXBlIGRhdGE4ID0gKGludCwgQmlnYXJyYXkuaW50OF91bnNpZ25lZF9lbHQsIEJpZ2FycmF5LmNfbGF5b3V0KSBCaWdhcnJheS5BcnJheTEudFxuXG4gIHR5cGUgZGF0YTMyID0gKGludDMyLCBCaWdhcnJheS5pbnQzMl9lbHQsIEJpZ2FycmF5LmNfbGF5b3V0KSBCaWdhcnJheS5BcnJheTIudFxuXG4gIHZhbCBjcmVhdGVfZm9yX2RhdGE4OiBkYXRhOCAtPiBmb3JtYXQgLT4gP3N0cmlkZTppbnQgLT4gaW50IC0+IGludCAtPiBTdXJmYWNlLnRcbiAgdmFsIGNyZWF0ZV9mb3JfZGF0YTMyOiA/d2lkdGg6aW50IC0+ID9oZWlnaHQ6aW50IC0+ID9hbHBoYTpib29sIC0+IGRhdGEzMiAtPiBTdXJmYWNlLnRcbiAgdmFsIGdldF9kYXRhODogU3VyZmFjZS50IC0+IGRhdGE4XG4gIHZhbCBnZXRfZGF0YTMyOiBTdXJmYWNlLnQgLT4gZGF0YTMyXG4gIHZhbCBnZXRfZm9ybWF0OiBTdXJmYWNlLnQgLT4gZm9ybWF0XG4gIHZhbCBnZXRfd2lkdGg6IFN1cmZhY2UudCAtPiBpbnRcbiAgdmFsIGdldF9oZWlnaHQ6IFN1cmZhY2UudCAtPiBpbnRcbiAgdmFsIGdldF9zdHJpZGU6IFN1cmZhY2UudCAtPiBpbnRcbiAgdmFsIHN0cmlkZV9mb3Jfd2lkdGg6IGZvcm1hdCAtPiB3aWR0aDppbnQgLT4gaW50XG4gIHZhbCBvdXRwdXRfcHBtOiBvdXRfY2hhbm5lbCAtPiA/d2lkdGg6aW50IC0+ID9oZWlnaHQ6aW50IC0+IGRhdGEzMiAtPiB1bml0XG5lbmQgKilcblxuKCogbW9kdWxlIFBERjogc2lnXG4gIHZhbCBjcmVhdGU6IGZuYW1lOnN0cmluZyAtPiB3aWR0aDpmbG9hdCAtPiBoZWlnaHQ6ZmxvYXQgLT4gU3VyZmFjZS50XG4gIHZhbCBjcmVhdGVfZm9yX3N0cmVhbTogb3V0cHV0OihzdHJpbmcgLT4gdW5pdCkgLT4gd2lkdGg6ZmxvYXQgLT4gaGVpZ2h0OmZsb2F0IC0+IFN1cmZhY2UudFxuICB2YWwgc2V0X3NpemU6IFN1cmZhY2UudCAtPiB3aWR0aDpmbG9hdCAtPiBoZWlnaHQ6ZmxvYXQgLT4gdW5pdFxuZW5kICopXG5cbigqIG1vZHVsZSBQTkc6IHNpZ1xuICB2YWwgY3JlYXRlOiBzdHJpbmcgLT4gU3VyZmFjZS50XG4gIHZhbCBjcmVhdGVfZnJvbV9zdHJlYW06IGlucHV0OihzdHJpbmcgLT4gaW50IC0+IHVuaXQpIC0+IFN1cmZhY2UudFxuICB2YWwgd3JpdGU6IFN1cmZhY2UudCAtPiBzdHJpbmcgLT4gdW5pdFxuICB2YWwgd3JpdGVfdG9fc3RyZWFtOiBTdXJmYWNlLnQgLT4gb3V0cHV0OihzdHJpbmcgLT4gdW5pdCkgLT4gdW5pdFxuZW5kICopXG5cbigqIG1vZHVsZSBQUzogc2lnXG4gIHZhbCBjcmVhdGU6IGZuYW1lOnN0cmluZyAtPiB3aWR0aDpmbG9hdCAtPiBoZWlnaHQ6ZmxvYXQgLT4gU3VyZmFjZS50XG4gIHZhbCBjcmVhdGVfZm9yX3N0cmVhbTogb3V0cHV0OihzdHJpbmcgLT4gdW5pdCkgLT4gd2lkdGg6ZmxvYXQgLT4gaGVpZ2h0OmZsb2F0IC0+IFN1cmZhY2UudFxuXG4gIHR5cGUgbGV2ZWwgPSBMRVZFTF8yIHwgTEVWRUxfM1xuXG4gIHZhbCByZXN0cmljdF90b19sZXZlbDogU3VyZmFjZS50IC0+IGxldmVsIC0+IHVuaXRcbiAgdmFsIGdldF9sZXZlbHM6IHVuaXQgLT4gbGV2ZWwgbGlzdFxuICB2YWwgbGV2ZWxfdG9fc3RyaW5nOiBsZXZlbCAtPiBzdHJpbmdcbiAgdmFsIHNldF9lcHM6IFN1cmZhY2UudCAtPiBlcHM6Ym9vbCAtPiB1bml0XG4gIHZhbCBnZXRfZXBzOiBTdXJmYWNlLnQgLT4gYm9vbFxuICB2YWwgc2V0X3NpemU6IFN1cmZhY2UudCAtPiB3aWR0aDpmbG9hdCAtPiBoZWlnaHQ6ZmxvYXQgLT4gdW5pdFxuXG4gIG1vZHVsZSBEc2M6IHNpZ1xuICAgIHZhbCBiZWdpbl9zZXR1cDogU3VyZmFjZS50IC0+IHVuaXRcbiAgICB2YWwgYmVnaW5fcGFnZV9zZXR1cDogU3VyZmFjZS50IC0+IHVuaXRcbiAgICB2YWwgY29tbWVudDogU3VyZmFjZS50IC0+IHN0cmluZyAtPiB1bml0XG4gIGVuZFxuZW5kICopXG5cbigqIG1vZHVsZSBTVkc6IHNpZ1xuICB2YWwgY3JlYXRlOiBmbmFtZTpzdHJpbmcgLT4gd2lkdGg6ZmxvYXQgLT4gaGVpZ2h0OmZsb2F0IC0+IFN1cmZhY2UudFxuICB2YWwgY3JlYXRlX2Zvcl9zdHJlYW06IG91dHB1dDooc3RyaW5nIC0+IHVuaXQpIC0+IHdpZHRoOmZsb2F0IC0+IGhlaWdodDpmbG9hdCAtPiBTdXJmYWNlLnRcblxuICB0eXBlIHZlcnNpb24gPSBWRVJTSU9OXzFfMSB8IFZFUlNJT05fMV8yXG5cbiAgdmFsIHJlc3RyaWN0X3RvX3ZlcnNpb246IFN1cmZhY2UudCAtPiB2ZXJzaW9uIC0+IHVuaXRcbiAgdmFsIGdldF92ZXJzaW9uczogdW5pdCAtPiB2ZXJzaW9uIGxpc3RcbiAgdmFsIHZlcnNpb25fdG9fc3RyaW5nOiB2ZXJzaW9uIC0+IHN0cmluZ1xuZW5kICopXG5cbigqIG1vZHVsZSBSZWNvcmRpbmc6IHNpZ1xuICB2YWwgY3JlYXRlOiA/ZXh0ZW50czpyZWN0YW5nbGUgLT4gY29udGVudCAtPiBTdXJmYWNlLnRcbiAgdmFsIGlua19leHRlbnRzOiBTdXJmYWNlLnQgLT4gcmVjdGFuZ2xlXG5lbmQgKilcblxubW9kdWxlIFBhdHRlcm46IHNpZ1xuICB0eXBlICdhIHQgY29uc3RyYWludCAnYSA9IFs8YFNvbGlkIHwgYFN1cmZhY2UgfCBgR3JhZGllbnQgfCBgTGluZWFyIHwgYFJhZGlhbF1cbiAgdHlwZSBhbnkgPSBbYFNvbGlkIHwgYFN1cmZhY2UgfCBgR3JhZGllbnQgfCBgTGluZWFyIHwgYFJhZGlhbF0gdFxuXG4gIHZhbCBhZGRfY29sb3Jfc3RvcF9yZ2I6IFs+IGBHcmFkaWVudF0gdCAtPiA/b2ZzOmZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXRcbiAgdmFsIGFkZF9jb2xvcl9zdG9wX3JnYmE6IFs+IGBHcmFkaWVudF0gdCAtPiA/b2ZzOmZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXRcbiAgdmFsIGdldF9jb2xvcl9zdG9wX2NvdW50OiBbPiBgR3JhZGllbnRdIHQgLT4gaW50XG4gIHZhbCBnZXRfY29sb3Jfc3RvcF9yZ2JhOiBbPiBgR3JhZGllbnRdIHQgLT4gaWR4OmludCAtPiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0XG4gIHZhbCBjcmVhdGVfcmdiOiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBbYFNvbGlkXSB0XG4gIHZhbCBjcmVhdGVfcmdiYTogZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gW2BTb2xpZF0gdFxuICB2YWwgZ2V0X3JnYmE6IFs+IGBTb2xpZF0gdCAtPiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdFxuICB2YWwgY3JlYXRlX2xpbmVhcjogeDA6ZmxvYXQgLT4geTA6ZmxvYXQgLT4geDE6ZmxvYXQgLT4geTE6ZmxvYXQgLT4gW2BMaW5lYXIgfCBgR3JhZGllbnRdIHRcbiAgdmFsIGdldF9saW5lYXJfcG9pbnRzOiBbPiBgTGluZWFyIHwgYEdyYWRpZW50XSB0IC0+IGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0XG4gIHZhbCBjcmVhdGVfcmFkaWFsOiB4MDpmbG9hdCAtPiB5MDpmbG9hdCAtPiByMDpmbG9hdCAtPiB4MTpmbG9hdCAtPiB5MTpmbG9hdCAtPiByMTpmbG9hdCAtPiBbYFJhZGlhbCB8IGBHcmFkaWVudF0gdFxuICB2YWwgZ2V0X3JhZGlhbF9jaXJjbGVzOiBbPiBgUmFkaWFsIHwgYEdyYWRpZW50XSB0IC0+IGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdFxuZW5kXG5cbigqIHZhbCBjcmVhdGU6IFN1cmZhY2UudCAtPiBjb250ZXh0ICopXG52YWwgc2F2ZTogY29udGV4dCAtPiB1bml0XG52YWwgcmVzdG9yZTogY29udGV4dCAtPiB1bml0XG4oKiB2YWwgZ2V0X3RhcmdldDogY29udGV4dCAtPiBTdXJmYWNlLnQgKilcblxuKCogbW9kdWxlIEdyb3VwOiBzaWdcbiAgdmFsIHB1c2g6ID9jb250ZW50OmNvbnRlbnQgLT4gY29udGV4dCAtPiB1bml0XG4gIHZhbCBwb3A6IGNvbnRleHQgLT4gUGF0dGVybi5hbnlcbiAgdmFsIHBvcF90b19zb3VyY2U6IGNvbnRleHQgLT4gdW5pdFxuICB2YWwgZ2V0X3RhcmdldDogY29udGV4dCAtPiBTdXJmYWNlLnRcbmVuZCAqKVxuXG52YWwgc2V0X3NvdXJjZV9yZ2I6IGNvbnRleHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gdW5pdFxudmFsIHNldF9zb3VyY2VfcmdiYTogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0XG52YWwgc2V0X3NvdXJjZTogY29udGV4dCAtPiAnYSBQYXR0ZXJuLnQgLT4gdW5pdFxudmFsIGdldF9zb3VyY2U6IGNvbnRleHQgLT4gUGF0dGVybi5hbnlcblxudHlwZSBsaW5lX2NhcCA9IEJVVFQgfCBST1VORCB8IFNRVUFSRVxudmFsIHNldF9saW5lX2NhcDogY29udGV4dCAtPiBsaW5lX2NhcCAtPiB1bml0XG52YWwgZ2V0X2xpbmVfY2FwOiBjb250ZXh0IC0+IGxpbmVfY2FwXG5cbnR5cGUgbGluZV9qb2luID0gSk9JTl9NSVRFUiB8IEpPSU5fUk9VTkQgfCBKT0lOX0JFVkVMXG52YWwgc2V0X2xpbmVfam9pbjogY29udGV4dCAtPiBsaW5lX2pvaW4gLT4gdW5pdFxudmFsIGdldF9saW5lX2pvaW46IGNvbnRleHQgLT4gbGluZV9qb2luXG5cbnZhbCBzZXRfbGluZV93aWR0aDogY29udGV4dCAtPiBmbG9hdCAtPiB1bml0XG52YWwgZ2V0X2xpbmVfd2lkdGg6IGNvbnRleHQgLT4gZmxvYXRcblxudmFsIHNldF9taXRlcl9saW1pdDogY29udGV4dCAtPiBmbG9hdCAtPiB1bml0XG52YWwgZ2V0X21pdGVyX2xpbWl0OiBjb250ZXh0IC0+IGZsb2F0XG5cbnZhbCBzZXRfZGFzaDogY29udGV4dCAtPiA/b2ZzOmZsb2F0IC0+IGZsb2F0IGFycmF5IC0+IHVuaXRcbnZhbCBnZXRfZGFzaDogY29udGV4dCAtPiBmbG9hdCBhcnJheSAqIGZsb2F0XG5cbnR5cGUgb3BlcmF0b3IgPSBDTEVBUiB8IFNPVVJDRSB8IE9WRVIgfCBJTiB8IE9VVCB8IEFUT1AgfCBERVNUIHwgREVTVF9PVkVSIHwgREVTVF9JTiB8IERFU1RfT1VUIHwgREVTVF9BVE9QIHwgWE9SIHwgQUREIHwgU0FUVVJBVEVcbnZhbCBzZXRfb3BlcmF0b3I6IGNvbnRleHQgLT4gb3BlcmF0b3IgLT4gdW5pdFxudmFsIGdldF9vcGVyYXRvcjogY29udGV4dCAtPiBvcGVyYXRvclxuXG50eXBlIGZpbGxfcnVsZSA9IFdJTkRJTkcgfCBFVkVOX09ERFxudmFsIHNldF9maWxsX3J1bGU6IGNvbnRleHQgLT4gZmlsbF9ydWxlIC0+IHVuaXRcbnZhbCBnZXRfZmlsbF9ydWxlOiBjb250ZXh0IC0+IGZpbGxfcnVsZVxuXG52YWwgY2xpcDogY29udGV4dCAtPiB1bml0XG52YWwgY2xpcF9wcmVzZXJ2ZTogY29udGV4dCAtPiB1bml0XG52YWwgZmlsbDogY29udGV4dCAtPiB1bml0XG52YWwgZmlsbF9wcmVzZXJ2ZTogY29udGV4dCAtPiB1bml0XG52YWwgcGFpbnQ6ID9hbHBoYTpmbG9hdCAtPiBjb250ZXh0IC0+IHVuaXRcbnZhbCBzdHJva2U6IGNvbnRleHQgLT4gdW5pdFxudmFsIHN0cm9rZV9wcmVzZXJ2ZTogY29udGV4dCAtPiB1bml0XG5cbigqIEFyY3MgYXJlIHRyYW5zbGF0ZWQgdG8gb25lIG9yIG1vcmUgQ1VSVkVfVE8uIE5vdCBzdXBwb3J0ZWQgYnkgSFRNTDUgYW5kIGRpZmZpY3VsdCB0byByZS1pbXBsZW1lbnQgZXhhY3RseS4gKilcbigqIHR5cGUgcGF0aF9kYXRhID1cbiAgfCBNT1ZFX1RPIG9mIGZsb2F0ICogZmxvYXRcbiAgfCBMSU5FX1RPIG9mIGZsb2F0ICogZmxvYXRcbiAgfCBDVVJWRV9UTyBvZiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXRcbiAgfCBDTE9TRV9QQVRIICopXG5cbm1vZHVsZSBQYXRoOiBzaWdcbiAgKCogdHlwZSB0ICopXG5cbiAgKCogdmFsIGNvcHk6IGNvbnRleHQgLT4gdCAqKVxuICAoKiB2YWwgY29weV9mbGF0OiBjb250ZXh0IC0+IHQgKilcbiAgKCogdmFsIGFwcGVuZDogY29udGV4dCAtPiB0IC0+IHVuaXQgKilcbiAgdmFsIGdldF9jdXJyZW50X3BvaW50OiBjb250ZXh0IC0+IGZsb2F0ICogZmxvYXRcbiAgdmFsIGNsZWFyOiBjb250ZXh0IC0+IHVuaXRcbiAgKCogdmFsIHN1YjogY29udGV4dCAtPiB1bml0ICopXG4gIHZhbCBjbG9zZTogY29udGV4dCAtPiB1bml0XG4gICgqIHZhbCBnbHlwaDogY29udGV4dCAtPiBHbHlwaC50IGFycmF5IC0+IHVuaXQgKilcbiAgKCogdmFsIHRleHQ6IGNvbnRleHQgLT4gc3RyaW5nIC0+IHVuaXQgKilcbiAgKCogdmFsIGV4dGVudHM6IGNvbnRleHQgLT4gcmVjdGFuZ2xlICopXG4gICgqIHZhbCBmb2xkOiB0IC0+ICgnYSAtPiBwYXRoX2RhdGEgLT4gJ2EpIC0+ICdhIC0+ICdhICopXG4gICgqIHZhbCB0b19hcnJheTogdCAtPiBwYXRoX2RhdGEgYXJyYXkgKilcbiAgKCogdmFsIG9mX2FycmF5OiBwYXRoX2RhdGEgYXJyYXkgLT4gdCAqKVxuZW5kXG5cbnZhbCBhcmM6IGNvbnRleHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gcjpmbG9hdCAtPiBhMTpmbG9hdCAtPiBhMjpmbG9hdCAtPiB1bml0XG52YWwgYXJjX25lZ2F0aXZlOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHI6ZmxvYXQgLT4gYTE6ZmxvYXQgLT4gYTI6ZmxvYXQgLT4gdW5pdFxudmFsIGN1cnZlX3RvOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXRcbnZhbCBsaW5lX3RvOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXRcbnZhbCBtb3ZlX3RvOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXRcbnZhbCByZWN0YW5nbGU6IGNvbnRleHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gdzpmbG9hdCAtPiBoOmZsb2F0IC0+IHVuaXRcbnZhbCByZWxfY3VydmVfdG86IGNvbnRleHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gdW5pdFxudmFsIHJlbF9saW5lX3RvOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXRcbnZhbCByZWxfbW92ZV90bzogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0XG52YWwgdHJhbnNsYXRlOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXRcbnZhbCBzY2FsZTogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0XG52YWwgcm90YXRlOiBjb250ZXh0IC0+IGZsb2F0IC0+IHVuaXRcbnZhbCB0cmFuc2Zvcm06IGNvbnRleHQgLT4gTWF0cml4LnQgLT4gdW5pdFxudmFsIHNldF9tYXRyaXg6IGNvbnRleHQgLT4gTWF0cml4LnQgLT4gdW5pdFxudmFsIGdldF9tYXRyaXg6IGNvbnRleHQgLT4gTWF0cml4LnRcbnZhbCBpZGVudGl0eV9tYXRyaXg6IGNvbnRleHQgLT4gdW5pdFxudmFsIHVzZXJfdG9fZGV2aWNlOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0ICogZmxvYXRcbnZhbCB1c2VyX3RvX2RldmljZV9kaXN0YW5jZTogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAqIGZsb2F0XG52YWwgZGV2aWNlX3RvX3VzZXI6IGNvbnRleHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgKiBmbG9hdFxudmFsIGRldmljZV90b191c2VyX2Rpc3RhbmNlOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IGZsb2F0ICogZmxvYXRcbiMgNSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG5lbmRcblxubW9kdWxlIE1vY2sgPSBzdHJ1Y3RcbiMgMSBcInNyYy9CYWNrZW5kLmluY2wubWxcIlxuKCogQ29weXJpZ2h0IDIwMTctMjAxOCBWaW5jZW50IEphY3F1ZXMgPHZpbmNlbnRAdmluY2VudC1qYWNxdWVzLm5ldD4gKilcblxub3BlbiBTdGRMYWJlbHNcblxudHlwZSBzdGF0dXMgPVxuICB8IElOVkFMSURfUkVTVE9SRVxuICB8IElOVkFMSURfUE9QX0dST1VQXG4gIHwgTk9fQ1VSUkVOVF9QT0lOVFxuICB8IElOVkFMSURfTUFUUklYXG4gIHwgSU5WQUxJRF9TVEFUVVNcbiAgfCBOVUxMX1BPSU5URVJcbiAgfCBJTlZBTElEX1NUUklOR1xuICB8IElOVkFMSURfUEFUSF9EQVRBXG4gIHwgUkVBRF9FUlJPUlxuICB8IFdSSVRFX0VSUk9SXG4gIHwgU1VSRkFDRV9GSU5JU0hFRFxuICB8IFNVUkZBQ0VfVFlQRV9NSVNNQVRDSFxuICB8IFBBVFRFUk5fVFlQRV9NSVNNQVRDSFxuICB8IElOVkFMSURfQ09OVEVOVFxuICB8IElOVkFMSURfRk9STUFUXG4gIHwgSU5WQUxJRF9WSVNVQUxcbiAgfCBGSUxFX05PVF9GT1VORFxuICB8IElOVkFMSURfREFTSFxuICB8IElOVkFMSURfRFNDX0NPTU1FTlRcbiAgfCBJTlZBTElEX0lOREVYXG4gIHwgQ0xJUF9OT1RfUkVQUkVTRU5UQUJMRVxuICB8IFRFTVBfRklMRV9FUlJPUlxuICB8IElOVkFMSURfU1RSSURFXG4gIHwgRk9OVF9UWVBFX01JU01BVENIXG4gIHwgVVNFUl9GT05UX0lNTVVUQUJMRVxuICB8IFVTRVJfRk9OVF9FUlJPUlxuICB8IE5FR0FUSVZFX0NPVU5UXG4gIHwgSU5WQUxJRF9DTFVTVEVSU1xuICB8IElOVkFMSURfU0xBTlRcbiAgfCBJTlZBTElEX1dFSUdIVFxuICB8IElOVkFMSURfU0laRVxuICB8IFVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URURcbiAgfCBERVZJQ0VfVFlQRV9NSVNNQVRDSFxuICB8IERFVklDRV9FUlJPUlxuICB8IElOVkFMSURfTUVTSF9DT05TVFJVQ1RJT05cbiAgfCBERVZJQ0VfRklOSVNIRURcbiAgfCBKQklHMl9HTE9CQUxfTUlTU0lOR1xuXG5leGNlcHRpb24gRXJyb3Igb2Ygc3RhdHVzXG5cbmxldCBzdGF0dXNfdG9fc3RyaW5nID0gZnVuY3Rpb25cbiAgfCBJTlZBTElEX1JFU1RPUkUgLT4gXCJjYWlyb19yZXN0b3JlKCkgd2l0aG91dCBtYXRjaGluZyBjYWlyb19zYXZlKClcIlxuICB8IElOVkFMSURfUE9QX0dST1VQIC0+IFwibm8gc2F2ZWQgZ3JvdXAgdG8gcG9wLCBpLmUuIGNhaXJvX3BvcF9ncm91cCgpIHdpdGhvdXQgbWF0Y2hpbmcgY2Fpcm9fcHVzaF9ncm91cCgpXCJcbiAgfCBOT19DVVJSRU5UX1BPSU5UIC0+IFwibm8gY3VycmVudCBwb2ludCBkZWZpbmVkXCJcbiAgfCBJTlZBTElEX01BVFJJWCAtPiBcImludmFsaWQgbWF0cml4IChub3QgaW52ZXJ0aWJsZSlcIlxuICB8IElOVkFMSURfU1RBVFVTIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgY2Fpcm9fc3RhdHVzX3RcIlxuICB8IE5VTExfUE9JTlRFUiAtPiBcIk5VTEwgcG9pbnRlclwiXG4gIHwgSU5WQUxJRF9TVFJJTkcgLT4gXCJpbnB1dCBzdHJpbmcgbm90IHZhbGlkIFVURi04XCJcbiAgfCBJTlZBTElEX1BBVEhfREFUQSAtPiBcImlucHV0IHBhdGggZGF0YSBub3QgdmFsaWRcIlxuICB8IFJFQURfRVJST1IgLT4gXCJlcnJvciB3aGlsZSByZWFkaW5nIGZyb20gaW5wdXQgc3RyZWFtXCJcbiAgfCBXUklURV9FUlJPUiAtPiBcImVycm9yIHdoaWxlIHdyaXRpbmcgdG8gb3V0cHV0IHN0cmVhbVwiXG4gIHwgU1VSRkFDRV9GSU5JU0hFRCAtPiBcInRoZSB0YXJnZXQgc3VyZmFjZSBoYXMgYmVlbiBmaW5pc2hlZFwiXG4gIHwgU1VSRkFDRV9UWVBFX01JU01BVENIIC0+IFwidGhlIHN1cmZhY2UgdHlwZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoZSBvcGVyYXRpb25cIlxuICB8IFBBVFRFUk5fVFlQRV9NSVNNQVRDSCAtPiBcInRoZSBwYXR0ZXJuIHR5cGUgaXMgbm90IGFwcHJvcHJpYXRlIGZvciB0aGUgb3BlcmF0aW9uXCJcbiAgfCBJTlZBTElEX0NPTlRFTlQgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhbiBpbnB1dCBjYWlyb19jb250ZW50X3RcIlxuICB8IElOVkFMSURfRk9STUFUIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgY2Fpcm9fZm9ybWF0X3RcIlxuICB8IElOVkFMSURfVklTVUFMIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgVmlzdWFsKlwiXG4gIHwgRklMRV9OT1RfRk9VTkQgLT4gXCJmaWxlIG5vdCBmb3VuZFwiXG4gIHwgSU5WQUxJRF9EQVNIIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYSBkYXNoIHNldHRpbmdcIlxuICB8IElOVkFMSURfRFNDX0NPTU1FTlQgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhIERTQyBjb21tZW50XCJcbiAgfCBJTlZBTElEX0lOREVYIC0+IFwiaW52YWxpZCBpbmRleCBwYXNzZWQgdG8gZ2V0dGVyXCJcbiAgfCBDTElQX05PVF9SRVBSRVNFTlRBQkxFIC0+IFwiY2xpcCByZWdpb24gbm90IHJlcHJlc2VudGFibGUgaW4gZGVzaXJlZCBmb3JtYXRcIlxuICB8IFRFTVBfRklMRV9FUlJPUiAtPiBcImVycm9yIGNyZWF0aW5nIG9yIHdyaXRpbmcgdG8gYSB0ZW1wb3JhcnkgZmlsZVwiXG4gIHwgSU5WQUxJRF9TVFJJREUgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBzdHJpZGVcIlxuICB8IEZPTlRfVFlQRV9NSVNNQVRDSCAtPiBcInRoZSBmb250IHR5cGUgaXMgbm90IGFwcHJvcHJpYXRlIGZvciB0aGUgb3BlcmF0aW9uXCJcbiAgfCBVU0VSX0ZPTlRfSU1NVVRBQkxFIC0+IFwidGhlIHVzZXItZm9udCBpcyBpbW11dGFibGVcIlxuICB8IFVTRVJfRk9OVF9FUlJPUiAtPiBcImVycm9yIG9jY3VycmVkIGluIGEgdXNlci1mb250IGNhbGxiYWNrIGZ1bmN0aW9uXCJcbiAgfCBORUdBVElWRV9DT1VOVCAtPiBcIm5lZ2F0aXZlIG51bWJlciB1c2VkIHdoZXJlIGl0IGlzIG5vdCBhbGxvd2VkXCJcbiAgfCBJTlZBTElEX0NMVVNURVJTIC0+IFwiaW5wdXQgY2x1c3RlcnMgZG8gbm90IHJlcHJlc2VudCB0aGUgYWNjb21wYW55aW5nIHRleHQgYW5kIGdseXBoIGFycmF5c1wiXG4gIHwgSU5WQUxJRF9TTEFOVCAtPiBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2ZvbnRfc2xhbnRfdFwiXG4gIHwgSU5WQUxJRF9XRUlHSFQgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhbiBpbnB1dCBjYWlyb19mb250X3dlaWdodF90XCJcbiAgfCBJTlZBTElEX1NJWkUgLT4gXCJpbnZhbGlkIHZhbHVlICh0eXBpY2FsbHkgdG9vIGJpZykgZm9yIHRoZSBzaXplIG9mIHRoZSBpbnB1dCAoc3VyZmFjZSwgcGF0dGVybiwgZXRjLilcIlxuICB8IFVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URUQgLT4gXCJ1c2VyLWZvbnQgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZFwiXG4gIHwgREVWSUNFX1RZUEVfTUlTTUFUQ0ggLT4gXCJ0aGUgZGV2aWNlIHR5cGUgaXMgbm90IGFwcHJvcHJpYXRlIGZvciB0aGUgb3BlcmF0aW9uXCJcbiAgfCBERVZJQ0VfRVJST1IgLT4gXCJhbiBvcGVyYXRpb24gdG8gdGhlIGRldmljZSBjYXVzZWQgYW4gdW5zcGVjaWZpZWQgZXJyb3JcIlxuICB8IElOVkFMSURfTUVTSF9DT05TVFJVQ1RJT04gLT4gXCJpbnZhbGlkIG9wZXJhdGlvbiBkdXJpbmcgbWVzaCBwYXR0ZXJuIGNvbnN0cnVjdGlvblwiXG4gIHwgREVWSUNFX0ZJTklTSEVEIC0+IFwidGhlIHRhcmdldCBkZXZpY2UgaGFzIGJlZW4gZmluaXNoZWRcIlxuICB8IEpCSUcyX0dMT0JBTF9NSVNTSU5HIC0+IFwiQ0FJUk9fTUlNRV9UWVBFX0pCSUcyX0dMT0JBTF9JRCB1c2VkIGJ1dCBubyBDQUlST19NSU1FX1RZUEVfSkJJRzJfR0xPQkFMIGRhdGEgcHJvdmlkZWRcIlxuXG5sZXQgc3RhdHVzX3JlcHIgPSBmdW5jdGlvblxuICB8IElOVkFMSURfUkVTVE9SRSAtPiBcIklOVkFMSURfUkVTVE9SRVwiXG4gIHwgTk9fQ1VSUkVOVF9QT0lOVCAtPiBcIk5PX0NVUlJFTlRfUE9JTlRcIlxuICAoKkJJU0VDVC1JR05PUkUtQkVHSU4qKSAoKiBJIGRvbid0IGtub3cgaG93IHRvIG1ha2UgQ2Fpcm8gcmFpc2UgdGhlc2UgZXhjZXB0aW9ucyAqKVxuICB8IElOVkFMSURfUE9QX0dST1VQIC0+IFwiSU5WQUxJRF9QT1BfR1JPVVBcIlxuICB8IElOVkFMSURfTUFUUklYIC0+IFwiSU5WQUxJRF9NQVRSSVhcIlxuICB8IElOVkFMSURfU1RBVFVTIC0+IFwiSU5WQUxJRF9TVEFUVVNcIlxuICB8IE5VTExfUE9JTlRFUiAtPiBcIk5VTExfUE9JTlRFUlwiXG4gIHwgSU5WQUxJRF9TVFJJTkcgLT4gXCJJTlZBTElEX1NUUklOR1wiXG4gIHwgSU5WQUxJRF9QQVRIX0RBVEEgLT4gXCJJTlZBTElEX1BBVEhfREFUQVwiXG4gIHwgUkVBRF9FUlJPUiAtPiBcIlJFQURfRVJST1JcIlxuICB8IFdSSVRFX0VSUk9SIC0+IFwiV1JJVEVfRVJST1JcIlxuICB8IFNVUkZBQ0VfRklOSVNIRUQgLT4gXCJTVVJGQUNFX0ZJTklTSEVEXCJcbiAgfCBTVVJGQUNFX1RZUEVfTUlTTUFUQ0ggLT4gXCJTVVJGQUNFX1RZUEVfTUlTTUFUQ0hcIlxuICB8IFBBVFRFUk5fVFlQRV9NSVNNQVRDSCAtPiBcIlBBVFRFUk5fVFlQRV9NSVNNQVRDSFwiXG4gIHwgSU5WQUxJRF9DT05URU5UIC0+IFwiSU5WQUxJRF9DT05URU5UXCJcbiAgfCBJTlZBTElEX0ZPUk1BVCAtPiBcIklOVkFMSURfRk9STUFUXCJcbiAgfCBJTlZBTElEX1ZJU1VBTCAtPiBcIklOVkFMSURfVklTVUFMXCJcbiAgfCBGSUxFX05PVF9GT1VORCAtPiBcIkZJTEVfTk9UX0ZPVU5EXCJcbiAgfCBJTlZBTElEX0RBU0ggLT4gXCJJTlZBTElEX0RBU0hcIlxuICB8IElOVkFMSURfRFNDX0NPTU1FTlQgLT4gXCJJTlZBTElEX0RTQ19DT01NRU5UXCJcbiAgfCBJTlZBTElEX0lOREVYIC0+IFwiSU5WQUxJRF9JTkRFWFwiXG4gIHwgQ0xJUF9OT1RfUkVQUkVTRU5UQUJMRSAtPiBcIkNMSVBfTk9UX1JFUFJFU0VOVEFCTEVcIlxuICB8IFRFTVBfRklMRV9FUlJPUiAtPiBcIlRFTVBfRklMRV9FUlJPUlwiXG4gIHwgSU5WQUxJRF9TVFJJREUgLT4gXCJJTlZBTElEX1NUUklERVwiXG4gIHwgRk9OVF9UWVBFX01JU01BVENIIC0+IFwiRk9OVF9UWVBFX01JU01BVENIXCJcbiAgfCBVU0VSX0ZPTlRfSU1NVVRBQkxFIC0+IFwiVVNFUl9GT05UX0lNTVVUQUJMRVwiXG4gIHwgVVNFUl9GT05UX0VSUk9SIC0+IFwiVVNFUl9GT05UX0VSUk9SXCJcbiAgfCBORUdBVElWRV9DT1VOVCAtPiBcIk5FR0FUSVZFX0NPVU5UXCJcbiAgfCBJTlZBTElEX0NMVVNURVJTIC0+IFwiSU5WQUxJRF9DTFVTVEVSU1wiXG4gIHwgSU5WQUxJRF9TTEFOVCAtPiBcIklOVkFMSURfU0xBTlRcIlxuICB8IElOVkFMSURfV0VJR0hUIC0+IFwiSU5WQUxJRF9XRUlHSFRcIlxuICB8IElOVkFMSURfU0laRSAtPiBcIklOVkFMSURfU0laRVwiXG4gIHwgVVNFUl9GT05UX05PVF9JTVBMRU1FTlRFRCAtPiBcIlVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URURcIlxuICB8IERFVklDRV9UWVBFX01JU01BVENIIC0+IFwiREVWSUNFX1RZUEVfTUlTTUFUQ0hcIlxuICB8IERFVklDRV9FUlJPUiAtPiBcIkRFVklDRV9FUlJPUlwiXG4gIHwgSU5WQUxJRF9NRVNIX0NPTlNUUlVDVElPTiAtPiBcIklOVkFMSURfTUVTSF9DT05TVFJVQ1RJT05cIlxuICB8IERFVklDRV9GSU5JU0hFRCAtPiBcIkRFVklDRV9GSU5JU0hFRFwiXG4gIHwgSkJJRzJfR0xPQkFMX01JU1NJTkcgLT4gXCJKQklHMl9HTE9CQUxfTUlTU0lOR1wiXG4gICgqQklTRUNULUlHTk9SRS1FTkQqKVxuXG5leGNlcHRpb24gVW5hdmFpbGFibGVcblxudHlwZSBtYXRyaXggPSB7XG4gIG11dGFibGUgeHg6IGZsb2F0O1xuICBtdXRhYmxlIHl4OiBmbG9hdDtcbiAgbXV0YWJsZSB4eTogZmxvYXQ7XG4gIG11dGFibGUgeXk6IGZsb2F0O1xuICBtdXRhYmxlIHgwOiBmbG9hdDtcbiAgbXV0YWJsZSB5MDogZmxvYXQ7XG59XG5cbm1vZHVsZSBNYXRyaXggPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gbWF0cml4XG5cbiAgKCpcbiAgICAyIGJ5IDIgbWF0cml4IHdpdGggKHgwLCB5MCkgb2Zmc2V0IGlzIGVxdWl2YWxlbnQgdG8gdGhlIGZvbGxvd2luZyAzIGJ5IDMgbWF0cml4OlxuICAgIC8geHggeHkgeDAgXFwgICAvIHggXFwgICAvIHh4KnggKyB4eSp5ICsgeDAgXFxcbiAgICB8IHl4IHl5IHkwIHwgKiB8IHkgfCA9IHwgeXgqeCArIHl5KnkgKyB5MCB8XG4gICAgXFwgIDAgIDAgIDEgLyAgIFxcIDEgLyAgIFxcICAgICAgICAgICAgICAgIDEgL1xuICAqKVxuXG4gIGxldCBpbml0X2lkZW50aXR5ICgpID1cbiAgICB7eHg9MS47IHh5PTAuOyB5eD0wLjsgeXk9MS47IHgwPTAuOyB5MD0wLn1cblxuICBsZXQgaW5pdF90cmFuc2xhdGUgeCB5ID1cbiAgICB7eHg9MS47IHh5PTAuOyB5eD0wLjsgeXk9MS47IHgwPXg7IHkwPXl9XG5cbiAgbGV0IGluaXRfc2NhbGUgeCB5ID1cbiAgICB7eHg9eDsgeHk9MC47IHl4PTAuOyB5eT15OyB4MD0wLjsgeTA9MC59XG5cbiAgbGV0IGluaXRfcm90YXRlIGFuZ2xlID1cbiAgICB7XG4gICAgICB4eCA9IGNvcyBhbmdsZTtcbiAgICAgIHh5ID0gLS5zaW4gYW5nbGU7XG4gICAgICB5eCA9IHNpbiBhbmdsZTtcbiAgICAgIHl5ID0gY29zIGFuZ2xlO1xuICAgICAgeDAgPSAwLjtcbiAgICAgIHkwID0gMC47XG4gICAgfVxuXG4gIGxldCBpbml0X2ludmVyc2Uge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9ID1cbiAgICBsZXQgZCA9IHh4ICouIHl5IC0uIHh5ICouIHl4IGluXG4gICAgaWYgZCA9IDAuIHRoZW4gcmFpc2UgKEVycm9yIElOVkFMSURfTUFUUklYKTtcbiAgICBsZXQgeHggPSB5eSAvLiBkXG4gICAgYW5kIHh5ID0gLS4geHkgLy4gZFxuICAgIGFuZCB5eCA9IC0uIHl4IC8uIGRcbiAgICBhbmQgeXkgPSB4eCAvLiBkXG4gICAgYW5kIHgwID0gKHh5ICouIHkwIC0uIHl5ICouIHgwKSAvLiBkXG4gICAgYW5kIHkwID0gKHl4ICouIHgwIC0uIHh4ICouIHkwKSAvLiBkIGluXG4gICAge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9XG5cbiAgbGV0IG11bHRpcGx5IHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfSB7eHg9eHgnOyB4eT14eSc7IHl4PXl4JzsgeXk9eXknOyB4MD14MCc7IHkwPXkwJ30gPVxuICAgIGxldCB4eCA9IHh4ICouIHh4JyArLiB4eSAqLiB5eCdcbiAgICBhbmQgeHkgPSB4eCAqLiB4eScgKy4geHkgKi4geXknXG4gICAgYW5kIHl4ID0geXggKi4geHgnICsuIHl5ICouIHl4J1xuICAgIGFuZCB5eSA9IHl4ICouIHh5JyArLiB5eSAqLiB5eSdcbiAgICBhbmQgeDAgPSB4eCAqLiB4MCcgKy4geHkgKi4geTAnICsuIHgwXG4gICAgYW5kIHkwID0geXggKi4geDAnICsuIHl5ICouIHkwJyArLiB5MCBpblxuICAgIHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfVxuXG4gIGxldCB0cmFuc2Zvcm1fcG9pbnQge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9IHggeSA9XG4gICAgKHh4ICouIHggKy4geHkgKi4geSArLiB4MCwgeXggKi4geCArLiB5eSAqLiB5ICsuIHkwKVxuXG4gIGxldCB0cmFuc2Zvcm1fZGlzdGFuY2Uge3h4OyB4eTsgeXg7IHl5OyB4MD1fOyB5MD1ffSB+ZHggfmR5ID1cbiAgICAoeHggKi4gZHggKy4geHkgKi4gZHksIHl4ICouIGR4ICsuIHl5ICouIGR5KVxuXG4gIGxldCBzZXQgbSB7eHg7IHh5OyB5eDsgeXk7IHgwOyB5MH0gPVxuICAgIG0ueHggPC0geHg7XG4gICAgbS54eSA8LSB4eTtcbiAgICBtLnl4IDwtIHl4O1xuICAgIG0ueXkgPC0geXk7XG4gICAgbS54MCA8LSB4MDtcbiAgICBtLnkwIDwtIHkwXG5cbiAgbGV0IHNjYWxlIG0geCB5ID1cbiAgICBzZXQgbSAobXVsdGlwbHkgbSAoaW5pdF9zY2FsZSB4IHkpKVxuXG4gIGxldCB0cmFuc2xhdGUgbSB4IHkgPVxuICAgIHNldCBtIChtdWx0aXBseSBtIChpbml0X3RyYW5zbGF0ZSB4IHkpKVxuXG4gIGxldCByb3RhdGUgbSBhbmdsZSA9XG4gICAgc2V0IG0gKG11bHRpcGx5IG0gKGluaXRfcm90YXRlIGFuZ2xlKSlcblxuICBsZXQgaW52ZXJ0IG0gPVxuICAgIHNldCBtIChpbml0X2ludmVyc2UgbSlcbmVuZFxuXG50eXBlIHNsYW50ID1cbiAgfCBVcHJpZ2h0XG4gIHwgSXRhbGljXG4gIHwgT2JsaXF1ZVxuXG50eXBlIHdlaWdodCA9XG4gIHwgTm9ybWFsXG4gIHwgQm9sZFxuXG50eXBlIGZvbnQgPSB7XG4gIHNsYW50OiBzbGFudDtcbiAgd2VpZ2h0OiB3ZWlnaHQ7XG4gIHNpemU6IGZsb2F0O1xuICBmYW1pbHk6IHN0cmluZztcbn1cblxubW9kdWxlIFBhdHRlcm4gPSBzdHJ1Y3RcbiAgKCogV2Ugc3RvcmUgdHVwbGVzIChpbnN0ZWFkIG9mIG1vcmUgZXhwbGljaXQgcmVjb3JkIHR5cGVzKSBiZWNhdXNlIHRoZSBwdWJsaWMgaW50ZXJmYWNlIHVzZXMgdHVwbGVzXG4gIChnZXRfY29sb3Jfc3RvcF9yZ2JhLCBnZXRfcmdiYSwgZ2V0X2xpbmVhcl9wb2ludHMsIGdldF9yYWRpYWxfY2lyY2xlcykgKilcblxuICB0eXBlIHN0b3BfcG9pbnQgPSBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICgqIChwb3NpdGlvbiwgciwgZywgYiwgYSkgKilcblxuICBtb2R1bGUgU3RvcFBvaW50TGlzdDogc2lnXG4gICAgdHlwZSB0XG4gICAgdmFsIGVtcHR5OiB0XG4gICAgdmFsIGFkZDogdCAtPiBzdG9wX3BvaW50IC0+IHRcbiAgICB2YWwgc2l6ZTogdCAtPiBpbnRcbiAgICB2YWwgZ2V0OiB0IC0+IGk6aW50IC0+IHN0b3BfcG9pbnRcbiAgICB2YWwgdG9fbGlzdDogdCAtPiBzdG9wX3BvaW50IGxpc3RcbiAgZW5kID0gc3RydWN0XG4gICAgbW9kdWxlIEVsZW1lbnQgPSBzdHJ1Y3RcbiAgICAgIHR5cGUgdCA9IHtcbiAgICAgICAgYWRkZWQ6IGludDtcbiAgICAgICAgc3RvcF9wb2ludDogc3RvcF9wb2ludDtcbiAgICAgIH1cblxuICAgICAgbGV0IGNvbXBhcmUge3N0b3BfcG9pbnQ9KHBvc2l0aW9uX2EsIF8sIF8sIF8sIF8pOyBhZGRlZD1hZGRlZF9hOyBffSB7c3RvcF9wb2ludD0ocG9zaXRpb25fYiwgXywgXywgXywgXyk7IGFkZGVkPWFkZGVkX2I7IF99ID1cbiAgICAgICAgbWF0Y2ggY29tcGFyZSBwb3NpdGlvbl9hIHBvc2l0aW9uX2Igd2l0aFxuICAgICAgICAgIHwgMCAtPiBjb21wYXJlIGFkZGVkX2EgYWRkZWRfYlxuICAgICAgICAgIHwgbiAtPiBuXG4gICAgZW5kXG5cbiAgICB0eXBlIHQgPSBFbGVtZW50LnQgbGlzdFxuXG4gICAgbGV0IGVtcHR5ID0gW11cblxuICAgIGxldCBzaXplID0gTGlzdC5sZW5ndGhcblxuICAgIGxldCBhZGQgeHMgc3RvcF9wb2ludCA9XG4gICAgICBsZXQgZWxlbWVudCA9IHtFbGVtZW50LnN0b3BfcG9pbnQ7IGFkZGVkPUxpc3QubGVuZ3RoIHhzfSBpblxuICAgICAgbGV0IHJlYyBhdXggPSBmdW5jdGlvblxuICAgICAgICB8IFtdIC0+IFtlbGVtZW50XVxuICAgICAgICB8IHg6OnhzIGFzIHh4cyAtPiBtYXRjaCBFbGVtZW50LmNvbXBhcmUgZWxlbWVudCB4IHdpdGhcbiAgICAgICAgICB8IC0xIC0+IGVsZW1lbnQ6Onh4c1xuICAgICAgICAgIHwgXyAtPiB4OjooYXV4IHhzKVxuICAgICAgaW4gYXV4IHhzXG5cbiAgICBsZXQgdG9fbGlzdCB4cyA9XG4gICAgICBMaXN0Lm1hcCB4cyB+ZjooZnVuIHtFbGVtZW50LnN0b3BfcG9pbnQ7IF99IC0+IHN0b3BfcG9pbnQpXG5cbiAgICBsZXQgZ2V0IHhzIH5pID1cbiAgICAgIGxldCB7RWxlbWVudC5zdG9wX3BvaW50OyBffSA9IExpc3QubnRoIHhzIGkgaW5cbiAgICAgIHN0b3BfcG9pbnRcbiAgZW5kXG5cbiAgKCogVGhpcyBpcyBqdXN0IHRvIGNvdmVyIFN0b3BQb2ludExpc3QudG9fbGlzdCwgd2hpY2ggaXMgdXNlZCBvbmx5IGluIEpzT2ZPQ2Fpcm8sIHdob3NlIHRlc3QgY292ZXJhZ2UgaXNuJ3QgbWVhc3VyZWQuICopXG4gIGxldCBfID0gU3RvcFBvaW50TGlzdC4oYWRkIGVtcHR5ICgwLiwgMC4sIDAuLCAwLiwgMC4pIHw+IHRvX2xpc3QpXG5cbiAgKCogV2hlbiB3ZSBkcm9wIHN1cHBvcnQgb2YgT0NhbWwgNC4wMiwgd2UgY2FuIHVzZSBbaW5saW5lIHJlY29yZHNdKGh0dHBzOi8vY2FtbC5pbnJpYS5mci9wdWIvZG9jcy9tYW51YWwtb2NhbWwtNC4wNi9leHRuLmh0bWwjcyUzQWlubGluZS1yZWNvcmRzKSAqKVxuICB0eXBlIGxpbmVhcl9ncmFkaWVudCA9IHtcbiAgICBwb2ludHM6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0OyAoKiAoeDAsIHkwLCB4MSwgeTEpICopXG4gICAgc3RvcF9wb2ludHM6IFN0b3BQb2ludExpc3QudDtcbiAgfVxuXG4gIHR5cGUgcmFkaWFsX2dyYWRpZW50ID0ge1xuICAgIGNpcmNsZXM6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdDsgKCogKHgwLCB5MCwgcjAsIHgxLCB5MSwgcjEpICopXG4gICAgc3RvcF9wb2ludHM6IFN0b3BQb2ludExpc3QudDtcbiAgfVxuXG4gIHR5cGUgc291cmNlID1cbiAgICB8IFJnYmEgb2YgKGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0KSAoKiAociwgZywgYiwgYSkgKilcbiAgICB8IExpbmVhckdyYWRpZW50IG9mIGxpbmVhcl9ncmFkaWVudFxuICAgIHwgUmFkaWFsR3JhZGllbnQgb2YgcmFkaWFsX2dyYWRpZW50XG4gICAgfCBUeXBlTWlzbWF0Y2hcblxuICB0eXBlICdhIHQgPSBzb3VyY2UgcmVmIGNvbnN0cmFpbnQgJ2EgPSBbPGBTb2xpZCB8IGBTdXJmYWNlIHwgYEdyYWRpZW50IHwgYExpbmVhciB8IGBSYWRpYWxdXG5cbiAgdHlwZSBhbnkgPSBbYFNvbGlkIHwgYFN1cmZhY2UgfCBgR3JhZGllbnQgfCBgTGluZWFyIHwgYFJhZGlhbF0gdFxuXG4gIGxldCBjcmVhdGVfcmdiYSByIGcgYiBhID1cbiAgICByZWYgKFJnYmEgKHIsIGcsIGIsIGEpKVxuXG4gIGxldCBjcmVhdGVfcmdiIHIgZyBiID1cbiAgICBjcmVhdGVfcmdiYSByIGcgYiAxLlxuXG4gIGxldCBnZXRfcmdiYSBwYXR0ZXJuID1cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IFJnYmEgY29sb3IgLT4gY29sb3JcbiAgICAgIHwgTGluZWFyR3JhZGllbnQgX1xuICAgICAgfCBSYWRpYWxHcmFkaWVudCBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuXG4gIGxldCBjcmVhdGVfbGluZWFyIH54MCB+eTAgfngxIH55MSA9XG4gICAgcmVmIChMaW5lYXJHcmFkaWVudCB7cG9pbnRzPSh4MCwgeTAsIHgxLCB5MSk7IHN0b3BfcG9pbnRzPVN0b3BQb2ludExpc3QuZW1wdHl9KVxuXG4gIGxldCBnZXRfbGluZWFyX3BvaW50cyBwYXR0ZXJuID1cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IExpbmVhckdyYWRpZW50IHtwb2ludHM7IF99IC0+IHBvaW50c1xuICAgICAgfCBSZ2JhIF9cbiAgICAgIHwgUmFkaWFsR3JhZGllbnQgX1xuICAgICAgfCBUeXBlTWlzbWF0Y2ggLT4gcmFpc2UgKEVycm9yIFBBVFRFUk5fVFlQRV9NSVNNQVRDSClcblxuICBsZXQgY3JlYXRlX3JhZGlhbCB+eDAgfnkwIH5yMCB+eDEgfnkxIH5yMSA9XG4gICAgcmVmIChSYWRpYWxHcmFkaWVudCB7Y2lyY2xlcz0oeDAsIHkwLCByMCwgeDEsIHkxLCByMSk7IHN0b3BfcG9pbnRzPVN0b3BQb2ludExpc3QuZW1wdHl9KVxuXG4gIGxldCBnZXRfcmFkaWFsX2NpcmNsZXMgcGF0dGVybiA9XG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBSYWRpYWxHcmFkaWVudCB7Y2lyY2xlczsgX30gLT4gY2lyY2xlc1xuICAgICAgfCBMaW5lYXJHcmFkaWVudCBfXG4gICAgICB8IFJnYmEgX1xuICAgICAgfCBUeXBlTWlzbWF0Y2ggLT4gcmFpc2UgKEVycm9yIFBBVFRFUk5fVFlQRV9NSVNNQVRDSClcblxuICBsZXQgYWRkX2NvbG9yX3N0b3BfcmdiYSBwYXR0ZXJuID8ob2ZzPTAuKSByIGcgYiBhID1cbiAgICBsZXQgc3RvcF9wb2ludCA9IChvZnMsIHIsIGcsIGIsIGEpIGluXG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBMaW5lYXJHcmFkaWVudCBncmFkaWVudCAtPlxuICAgICAgICBwYXR0ZXJuIDo9IExpbmVhckdyYWRpZW50IHtncmFkaWVudCB3aXRoIHN0b3BfcG9pbnRzPShTdG9wUG9pbnRMaXN0LmFkZCBncmFkaWVudC5zdG9wX3BvaW50cyBzdG9wX3BvaW50KX1cbiAgICAgIHwgUmFkaWFsR3JhZGllbnQgZ3JhZGllbnQgLT5cbiAgICAgICAgcGF0dGVybiA6PSBSYWRpYWxHcmFkaWVudCB7Z3JhZGllbnQgd2l0aCBzdG9wX3BvaW50cz0oU3RvcFBvaW50TGlzdC5hZGQgZ3JhZGllbnQuc3RvcF9wb2ludHMgc3RvcF9wb2ludCl9XG4gICAgICB8IFJnYmEgXyAtPiBwYXR0ZXJuIDo9IFR5cGVNaXNtYXRjaFxuICAgICAgfCBUeXBlTWlzbWF0Y2ggLT4gKClcblxuICBsZXQgYWRkX2NvbG9yX3N0b3BfcmdiIHBhdHRlcm4gP29mcyByIGcgYiA9XG4gICAgYWRkX2NvbG9yX3N0b3BfcmdiYSBwYXR0ZXJuID9vZnMgciBnIGIgMS5cblxuICBsZXQgZ2V0X2NvbG9yX3N0b3BfY291bnQgcGF0dGVybiA9XG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBMaW5lYXJHcmFkaWVudCB7c3RvcF9wb2ludHM7IF99IHwgUmFkaWFsR3JhZGllbnQge3N0b3BfcG9pbnRzOyBffSAtPiBTdG9wUG9pbnRMaXN0LnNpemUgc3RvcF9wb2ludHNcbiAgICAgIHwgUmdiYSBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuXG4gIGxldCBnZXRfY29sb3Jfc3RvcF9yZ2JhIHBhdHRlcm4gfmlkeCA9XG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBMaW5lYXJHcmFkaWVudCB7c3RvcF9wb2ludHM7IF99IHwgUmFkaWFsR3JhZGllbnQge3N0b3BfcG9pbnRzOyBffSAtPiBTdG9wUG9pbnRMaXN0LmdldCBzdG9wX3BvaW50cyB+aTppZHhcbiAgICAgIHwgUmdiYSBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuZW5kXG5cbnR5cGUgZmlsbF9ydWxlID1cbiAgfCBXSU5ESU5HXG4gIHwgRVZFTl9PRERcblxudHlwZSBsaW5lX2NhcCA9XG4gIHwgQlVUVFxuICB8IFJPVU5EXG4gIHwgU1FVQVJFXG5cbnR5cGUgbGluZV9qb2luID1cbiAgfCBKT0lOX01JVEVSXG4gIHwgSk9JTl9ST1VORFxuICB8IEpPSU5fQkVWRUxcblxudHlwZSBmb250X2V4dGVudHMgPSB7XG4gIGFzY2VudDogZmxvYXQ7XG4gIGRlc2NlbnQ6IGZsb2F0O1xuICBiYXNlbGluZTogZmxvYXQ7XG4gIG1heF94X2FkdmFuY2U6IGZsb2F0O1xuICBtYXhfeV9hZHZhbmNlOiBmbG9hdDtcbn1cblxudHlwZSB0ZXh0X2V4dGVudHMgPSB7XG4gIHhfYmVhcmluZzogZmxvYXQ7XG4gIHlfYmVhcmluZzogZmxvYXQ7XG4gIHdpZHRoOiBmbG9hdDtcbiAgaGVpZ2h0OiBmbG9hdDtcbiAgeF9hZHZhbmNlOiBmbG9hdDtcbiAgeV9hZHZhbmNlOiBmbG9hdDtcbn1cblxudHlwZSBvcGVyYXRvciA9XG4gIHwgQ0xFQVJcbiAgfCBTT1VSQ0VcbiAgfCBPVkVSXG4gIHwgSU5cbiAgfCBPVVRcbiAgfCBBVE9QXG4gIHwgREVTVFxuICB8IERFU1RfT1ZFUlxuICB8IERFU1RfSU5cbiAgfCBERVNUX09VVFxuICB8IERFU1RfQVRPUFxuICB8IFhPUlxuICB8IEFERFxuICB8IFNBVFVSQVRFXG5cbm1vZHVsZSBQb2ludHM6IHNpZ1xuICB0eXBlIHRcblxuICB2YWwgY3JlYXRlOiB1bml0IC0+IHRcblxuICB2YWwgc2V0X3N0YXJ0OiB0IC0+IHRyYW5zZm9ybWF0aW9uOk1hdHJpeC50IC0+IHg6ZmxvYXQgLT4geTpmbG9hdCAtPiB1bml0XG4gIHZhbCBzZXRfc3RhcnRfaWZfbm9uZTogdCAtPiB0cmFuc2Zvcm1hdGlvbjpNYXRyaXgudCAtPiB4OmZsb2F0IC0+IHk6ZmxvYXQgLT4gdW5pdFxuICB2YWwgcmVzZXRfc3RhcnQ6IHQgLT4gdW5pdFxuXG4gIHZhbCBzZXRfY3VycmVudDogdCAtPiB0cmFuc2Zvcm1hdGlvbjpNYXRyaXgudCAtPiB4OmZsb2F0IC0+IHk6ZmxvYXQgLT4gdW5pdFxuICB2YWwgc2V0X2N1cnJlbnRfZnJvbV9zdGFydDogdCAtPiB1bml0XG4gIHZhbCByZXNldF9jdXJyZW50OiB0IC0+IHVuaXRcbiAgdmFsIGN1cnJlbnQ6IHQgLT4gdHJhbnNmb3JtYXRpb246TWF0cml4LnQgLT4gKGZsb2F0ICogZmxvYXQpIG9wdGlvblxuZW5kID0gc3RydWN0XG4gIHR5cGUgdCA9IHtcbiAgICBtdXRhYmxlIHN0YXJ0OiAoZmxvYXQgKiBmbG9hdCkgb3B0aW9uO1xuICAgIG11dGFibGUgY3VycmVudDogKGZsb2F0ICogZmxvYXQpIG9wdGlvbjtcbiAgfVxuXG4gIGxldCBjcmVhdGUgKCkgPSB7XG4gICAgc3RhcnQgPSBOb25lO1xuICAgIGN1cnJlbnQgPSBOb25lO1xuICB9XG5cbiAgbGV0IHNldF9zdGFydCBwb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55ID1cbiAgICBwb2ludHMuc3RhcnQgPC0gU29tZSAoTWF0cml4LnRyYW5zZm9ybV9wb2ludCB0cmFuc2Zvcm1hdGlvbiB4IHkpXG5cbiAgbGV0IHNldF9zdGFydF9pZl9ub25lIHBvaW50cyB+dHJhbnNmb3JtYXRpb24gfnggfnkgPVxuICAgIGlmIHBvaW50cy5zdGFydCA9IE5vbmUgdGhlblxuICAgIHBvaW50cy5zdGFydCA8LSBTb21lIChNYXRyaXgudHJhbnNmb3JtX3BvaW50IHRyYW5zZm9ybWF0aW9uIHggeSlcblxuICBsZXQgcmVzZXRfc3RhcnQgcG9pbnRzID1cbiAgICBwb2ludHMuc3RhcnQgPC0gTm9uZVxuXG4gIGxldCBzZXRfY3VycmVudCBwb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55ID1cbiAgICBwb2ludHMuY3VycmVudCA8LSBTb21lIChNYXRyaXgudHJhbnNmb3JtX3BvaW50IHRyYW5zZm9ybWF0aW9uIHggeSlcblxuICBsZXQgc2V0X2N1cnJlbnRfZnJvbV9zdGFydCBwb2ludHMgPVxuICAgIHBvaW50cy5jdXJyZW50IDwtIHBvaW50cy5zdGFydFxuXG4gIGxldCByZXNldF9jdXJyZW50IHBvaW50cyA9XG4gICAgcG9pbnRzLmN1cnJlbnQgPC0gTm9uZVxuXG4gIGxldCBjdXJyZW50IHBvaW50cyB+dHJhbnNmb3JtYXRpb24gPVxuICAgIG1hdGNoIHBvaW50cy5jdXJyZW50IHdpdGhcbiAgICAgIHwgTm9uZSAtPiBOb25lXG4gICAgICB8IFNvbWUgKHgsIHkpIC0+IFNvbWUgKE1hdHJpeC50cmFuc2Zvcm1fcG9pbnQgKE1hdHJpeC5pbml0X2ludmVyc2UgdHJhbnNmb3JtYXRpb24pIHggeSlcbmVuZFxuXG4gIFxuIyAxMCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gIGxldCAoKSA9IFByaW50ZXhjLnJlZ2lzdGVyX3ByaW50ZXIgKGZ1bmN0aW9uXG4gICAgfCBFcnJvciBzdGF0dXMgLT4gU29tZSAoUHJpbnRmLnNwcmludGYgXCJDYWlyb01vY2suRXJyb3IoJXMpXCIgKHN0YXR1c19yZXByIHN0YXR1cykpXG4gICAgfCBfIC0+IE5vbmVcbiAgKVxuXG4gIG1vZHVsZSBTdGF0ZSA9IHN0cnVjdFxuICAgIHR5cGUgdCA9IHtcbiAgICAgIGRhc2hlczogZmxvYXQgYXJyYXk7XG4gICAgICBmaWxsX3J1bGU6IGZpbGxfcnVsZTtcbiAgICAgIGZvbnQ6IGZvbnQ7XG4gICAgICBsaW5lX2NhcDogbGluZV9jYXA7XG4gICAgICBsaW5lX2pvaW46IGxpbmVfam9pbjtcbiAgICAgIGxpbmVfd2lkdGg6IGZsb2F0O1xuICAgICAgbWl0ZXJfbGltaXQ6IGZsb2F0O1xuICAgICAgb2ZzOiBmbG9hdDtcbiAgICAgIG9wZXJhdG9yOiBvcGVyYXRvcjtcbiAgICAgIHNvdXJjZTogUGF0dGVybi5zb3VyY2U7XG4gICAgICB0cmFuc2Zvcm1hdGlvbjogTWF0cml4LnQ7XG4gICAgfVxuICBlbmRcblxuICB0eXBlIGNvbnRleHQgPSB7XG4gICAgbXV0YWJsZSBzdGF0ZXM6IFN0YXRlLnQgbGlzdDtcbiAgICBwb2ludHM6IFBvaW50cy50O1xuICB9XG5cbiAgbGV0IGNyZWF0ZSAoKSA9IHtcbiAgICBzdGF0ZXMgPSBbXG4gICAgICB7XG4gICAgICAgIGRhc2hlcyA9IFt8fF07XG4gICAgICAgIGZpbGxfcnVsZSA9IFdJTkRJTkc7XG4gICAgICAgIGZvbnQgPSB7XG4gICAgICAgICAgc2xhbnQgPSBVcHJpZ2h0O1xuICAgICAgICAgIHdlaWdodCA9IE5vcm1hbDtcbiAgICAgICAgICBzaXplID0gMTAuO1xuICAgICAgICAgIGZhbWlseSA9IFwic2Fucy1zZXJpZlwiO1xuICAgICAgICB9O1xuICAgICAgICBsaW5lX2NhcCA9IEJVVFQ7XG4gICAgICAgIGxpbmVfam9pbiA9IEpPSU5fTUlURVI7XG4gICAgICAgIGxpbmVfd2lkdGggPSAyLjtcbiAgICAgICAgbWl0ZXJfbGltaXQgPSAxMC47XG4gICAgICAgIG9mcyA9IDAuO1xuICAgICAgICBvcGVyYXRvciA9IE9WRVI7XG4gICAgICAgIHNvdXJjZSA9ICEoUGF0dGVybi5jcmVhdGVfcmdiIDAuIDAuIDAuKTtcbiAgICAgICAgdHJhbnNmb3JtYXRpb24gPSBNYXRyaXguaW5pdF9pZGVudGl0eSAoKTtcbiAgICAgIH07XG4gICAgXTtcbiAgICBwb2ludHMgPSBQb2ludHMuY3JlYXRlICgpO1xuICB9XG5cbiAgbGV0IHN0YXRlIHtzdGF0ZXM7IF99ID1cbiAgICBMaXN0LmhkIHN0YXRlc1xuXG4gIGxldCBtdXRhdGVfc3RhdGUgY29udGV4dCBmID1cbiAgICBsZXQgc3RhdGUgPSBmIChzdGF0ZSBjb250ZXh0KSBpblxuICAgIGNvbnRleHQuc3RhdGVzIDwtIHN0YXRlOjooTGlzdC50bCBjb250ZXh0LnN0YXRlcylcblxuXG4gIGxldCBzYXZlIGNvbnRleHQgPVxuICAgIGNvbnRleHQuc3RhdGVzIDwtIChzdGF0ZSBjb250ZXh0KTo6Y29udGV4dC5zdGF0ZXNcblxuICBsZXQgcmVzdG9yZSBjb250ZXh0ID1cbiAgICBsZXQgc3RhdGVzID1cbiAgICAgIG1hdGNoIGNvbnRleHQuc3RhdGVzIHdpdGhcbiAgICAgICAgfCBbXSAoKkJJU0VDVC1JR05PUkUqKSAoKiBUaGlzIGNhbm5vdCBoYXBwZW46IHJlc3RvcmUgaXMgdGhlIG9ubHkgZnVuY3Rpb24gcmVtb3Zpbmcgc3RhdGVzIGFuZCBpdCByZWZ1c2VzIHRvIHJlbW92ZSB0aGUgbGFzdCBvbmUuICopXG4gICAgICAgIHwgW19dIC0+IHJhaXNlIChFcnJvciBJTlZBTElEX1JFU1RPUkUpXG4gICAgICAgIHwgXzo6c3RhdGVzIC0+IHN0YXRlc1xuICAgIGluXG4gICAgY29udGV4dC5zdGF0ZXMgPC0gc3RhdGVzXG5cblxuICBsZXQgc2V0X21hdHJpeCBjb250ZXh0IHRyYW5zZm9ybWF0aW9uID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCB0cmFuc2Zvcm1hdGlvbn0pXG5cbiAgbGV0IGdldF9tYXRyaXggY29udGV4dCA9XG4gICAgKHN0YXRlIGNvbnRleHQpLnRyYW5zZm9ybWF0aW9uXG5cbiAgbGV0IHRyYW5zZm9ybV8gbSBzID1cbiAgICB7cyB3aXRoIFN0YXRlLnRyYW5zZm9ybWF0aW9uPU1hdHJpeC5tdWx0aXBseSBzLlN0YXRlLnRyYW5zZm9ybWF0aW9uIG19XG5cbiAgbGV0IHRyYW5zZm9ybSBjb250ZXh0IG0gPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0ICh0cmFuc2Zvcm1fIG0pXG5cbiAgbGV0IHNjYWxlIGNvbnRleHQgeCB5ID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAodHJhbnNmb3JtXyAoTWF0cml4LmluaXRfc2NhbGUgeCB5KSlcblxuICBsZXQgdHJhbnNsYXRlIGNvbnRleHQgeCB5ID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAodHJhbnNmb3JtXyAoTWF0cml4LmluaXRfdHJhbnNsYXRlIHggeSkpXG5cbiAgbGV0IHJvdGF0ZSBjb250ZXh0IGFuZ2xlID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAodHJhbnNmb3JtXyAoTWF0cml4LmluaXRfcm90YXRlIGFuZ2xlKSlcblxuICBsZXQgaWRlbnRpdHlfbWF0cml4IGNvbnRleHQgPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIHRyYW5zZm9ybWF0aW9uPU1hdHJpeC5pbml0X2lkZW50aXR5ICgpfSlcblxuICBsZXQgZGV2aWNlX3RvX3VzZXIgY29udGV4dCB4IHkgPVxuICAgIE1hdHJpeC50cmFuc2Zvcm1fcG9pbnQgKE1hdHJpeC5pbml0X2ludmVyc2UgKHN0YXRlIGNvbnRleHQpLnRyYW5zZm9ybWF0aW9uKSB4IHlcblxuICBsZXQgZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgY29udGV4dCBkeCBkeSA9XG4gICAgTWF0cml4LnRyYW5zZm9ybV9kaXN0YW5jZSAoTWF0cml4LmluaXRfaW52ZXJzZSAoc3RhdGUgY29udGV4dCkudHJhbnNmb3JtYXRpb24pIH5keCB+ZHlcblxuICBsZXQgdXNlcl90b19kZXZpY2UgY29udGV4dCB4IHkgPVxuICAgIE1hdHJpeC50cmFuc2Zvcm1fcG9pbnQgKHN0YXRlIGNvbnRleHQpLnRyYW5zZm9ybWF0aW9uIHggeVxuXG4gIGxldCB1c2VyX3RvX2RldmljZV9kaXN0YW5jZSBjb250ZXh0IGR4IGR5ID1cbiAgICBNYXRyaXgudHJhbnNmb3JtX2Rpc3RhbmNlIChzdGF0ZSBjb250ZXh0KS50cmFuc2Zvcm1hdGlvbiB+ZHggfmR5XG5cblxuICBsZXQgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydCB+Y3VycmVudCA9XG4gICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gKHN0YXRlIGNvbnRleHQpLnRyYW5zZm9ybWF0aW9uIGluXG4gICAgbGV0IG1ha2VfcmVsYXRpdmUgfmR4IH5keSA9XG4gICAgICBsZXQgKHgsIHkpID1cbiAgICAgICAgbWF0Y2ggUG9pbnRzLmN1cnJlbnQgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIHdpdGhcbiAgICAgICAgICB8IE5vbmUgLT4gcmFpc2UgKEVycm9yIE5PX0NVUlJFTlRfUE9JTlQpXG4gICAgICAgICAgfCBTb21lICh4LCB5KSAtPiAoeCwgeSlcbiAgICAgIGluXG4gICAgICAoeCArLiBkeCwgeSArLiBkeSlcbiAgICBpblxuICAgIGJlZ2luIG1hdGNoIHN0YXJ0IHdpdGhcbiAgICAgIHwgYE5vbmUgLT4gKClcbiAgICAgIHwgYFJlc2V0IC0+IFBvaW50cy5yZXNldF9zdGFydCBjb250ZXh0LnBvaW50c1xuICAgICAgfCBgSWZOb25lICh4LCB5KSAtPiBQb2ludHMuc2V0X3N0YXJ0X2lmX25vbmUgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55XG4gICAgICB8IGBTZXQgKHgsIHkpIC0+IFBvaW50cy5zZXRfc3RhcnQgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55XG4gICAgICB8IGBSZWxhdGl2ZSAoZHgsIGR5KSAtPlxuICAgICAgICBsZXQgKHgsIHkpID0gbWFrZV9yZWxhdGl2ZSB+ZHggfmR5IGluXG4gICAgICAgIFBvaW50cy5zZXRfc3RhcnQgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55XG4gICAgZW5kO1xuICAgIGJlZ2luIG1hdGNoIGN1cnJlbnQgd2l0aFxuICAgICAgfCBgUmVzZXQgLT4gUG9pbnRzLnJlc2V0X2N1cnJlbnQgY29udGV4dC5wb2ludHNcbiAgICAgIHwgYEZyb21TdGFydCAtPiBQb2ludHMuc2V0X2N1cnJlbnRfZnJvbV9zdGFydCBjb250ZXh0LnBvaW50c1xuICAgICAgfCBgU2V0ICh4LCB5KSAtPiBQb2ludHMuc2V0X2N1cnJlbnQgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55XG4gICAgICB8IGBSZWxhdGl2ZSAoZHgsIGR5KSAtPlxuICAgICAgICBsZXQgKHgsIHkpID0gbWFrZV9yZWxhdGl2ZSB+ZHggfmR5IGluXG4gICAgICAgIFBvaW50cy5zZXRfY3VycmVudCBjb250ZXh0LnBvaW50cyB+dHJhbnNmb3JtYXRpb24gfnggfnlcbiAgICBlbmRcblxuXG4gIGxldCBtb3ZlX3RvIGNvbnRleHQgeCB5ID1cbiAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OihgU2V0ICh4LCB5KSkgfmN1cnJlbnQ6YEZyb21TdGFydFxuXG4gIGxldCByZWxfbW92ZV90byBjb250ZXh0IHggeSA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYFJlbGF0aXZlICh4LCB5KSkgfmN1cnJlbnQ6YEZyb21TdGFydFxuXG4gIGxldCBsaW5lX3RvIGNvbnRleHQgeCB5ID1cbiAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OihgSWZOb25lICh4LCB5KSkgfmN1cnJlbnQ6KGBTZXQgKHgsIHkpKVxuXG4gIGxldCByZWxfbGluZV90byBjb250ZXh0IHggeSA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYElmTm9uZSAoeCwgeSkpIH5jdXJyZW50OihgUmVsYXRpdmUgKHgsIHkpKVxuXG4gIGxldCBjdXJ2ZV90byBjb250ZXh0IHgxIHkxIF8gXyB4MyB5MyA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYElmTm9uZSAoeDEsIHkxKSkgfmN1cnJlbnQ6KGBTZXQgKHgzLCB5MykpXG5cbiAgbGV0IHJlbF9jdXJ2ZV90byBjb250ZXh0IHgxIHkxIF8gXyB4MyB5MyA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYElmTm9uZSAoeDEsIHkxKSkgfmN1cnJlbnQ6KGBSZWxhdGl2ZSAoeDMsIHkzKSlcblxuICBsZXQgcmVjdGFuZ2xlIGNvbnRleHQgeCB5IH53Ol8gfmg6XyA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDpgTm9uZSB+Y3VycmVudDooYFNldCAoeCwgeSkpXG5cbiAgbGV0IGFyYyBjb250ZXh0IHggeSB+ciB+YTEgfmEyID1cbiAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OihgSWZOb25lICh4ICsuIHIgKi4gKGNvcyBhMSksIHkgKy4gciAqLiAoc2luIGExKSkpIH5jdXJyZW50OihgU2V0ICh4ICsuIHIgKi4gKGNvcyBhMiksIHkgKy4gciAqLiAoc2luIGEyKSkpXG5cbiAgbGV0IGFyY19uZWdhdGl2ZSBjb250ZXh0IHggeSB+ciB+YTEgfmEyID1cbiAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OihgSWZOb25lICh4ICsuIHIgKi4gKGNvcyBhMSksIHkgKy4gciAqLiAoc2luIGExKSkpIH5jdXJyZW50OihgU2V0ICh4ICsuIHIgKi4gKGNvcyBhMiksIHkgKy4gciAqLiAoc2luIGEyKSkpXG5cbiAgbW9kdWxlIFBhdGggPSBzdHJ1Y3RcbiAgICBsZXQgZ2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dCA9XG4gICAgICBsZXQgdHJhbnNmb3JtYXRpb24gPSAoc3RhdGUgY29udGV4dCkudHJhbnNmb3JtYXRpb24gaW5cbiAgICAgIG1hdGNoIFBvaW50cy5jdXJyZW50IH50cmFuc2Zvcm1hdGlvbiBjb250ZXh0LnBvaW50cyB3aXRoXG4gICAgICAgIHwgTm9uZSAtPiAoMC4sIDAuKVxuICAgICAgICB8IFNvbWUgKHgsIHkpIC0+ICh4LCB5KVxuXG4gICAgbGV0IGNsZWFyIGNvbnRleHQgPVxuICAgICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDpgUmVzZXQgfmN1cnJlbnQ6YFJlc2V0XG5cbiAgICBsZXQgY2xvc2UgY29udGV4dCA9XG4gICAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OmBOb25lIH5jdXJyZW50OmBGcm9tU3RhcnRcbiAgZW5kXG5cbiAgbGV0IHN0cm9rZV9wcmVzZXJ2ZSBfID1cbiAgICAoKVxuXG4gIGxldCBzdHJva2UgY29udGV4dCA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDpgUmVzZXQgfmN1cnJlbnQ6YFJlc2V0XG5cbiAgbGV0IGZpbGxfcHJlc2VydmUgXyA9XG4gICAgKClcblxuICBsZXQgZmlsbCBjb250ZXh0ID1cbiAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OmBSZXNldCB+Y3VycmVudDpgUmVzZXRcblxuICBsZXQgY2xpcF9wcmVzZXJ2ZSBfID1cbiAgICAoKVxuXG4gIGxldCBjbGlwIGNvbnRleHQgPVxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6YFJlc2V0IH5jdXJyZW50OmBSZXNldFxuXG4gIGxldCBwYWludCA/YWxwaGE6XyBfID1cbiAgICAoKVxuXG5cbiAgbGV0IHNldF9saW5lX3dpZHRoIGNvbnRleHQgbGluZV93aWR0aCA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggbGluZV93aWR0aH0pXG5cbiAgbGV0IGdldF9saW5lX3dpZHRoIGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5saW5lX3dpZHRoXG5cbiAgbGV0IHNldF9kYXNoIGNvbnRleHQgPyhvZnM9MC4pIGRhc2hlcyA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggZGFzaGVzOyBvZnN9KVxuXG4gIGxldCBnZXRfZGFzaCBjb250ZXh0ID1cbiAgICBsZXQgc3RhdGUgPSBzdGF0ZSBjb250ZXh0IGluXG4gICAgKHN0YXRlLmRhc2hlcywgc3RhdGUub2ZzKVxuXG4gIGxldCBzZXRfZmlsbF9ydWxlIGNvbnRleHQgZmlsbF9ydWxlID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBmaWxsX3J1bGV9KVxuXG4gIGxldCBnZXRfZmlsbF9ydWxlIGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5maWxsX3J1bGVcblxuICBsZXQgc2V0X2xpbmVfY2FwIGNvbnRleHQgbGluZV9jYXAgPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIGxpbmVfY2FwfSlcblxuICBsZXQgZ2V0X2xpbmVfY2FwIGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5saW5lX2NhcFxuXG4gIGxldCBzZXRfbGluZV9qb2luIGNvbnRleHQgbGluZV9qb2luID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBsaW5lX2pvaW59KVxuXG4gIGxldCBnZXRfbGluZV9qb2luIGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5saW5lX2pvaW5cblxuICBsZXQgc2V0X21pdGVyX2xpbWl0IGNvbnRleHQgbWl0ZXJfbGltaXQgPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIG1pdGVyX2xpbWl0fSlcblxuICBsZXQgZ2V0X21pdGVyX2xpbWl0IGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5taXRlcl9saW1pdFxuXG4gIGxldCBzZXRfb3BlcmF0b3IgY29udGV4dCBvcGVyYXRvciA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggb3BlcmF0b3J9KVxuXG4gIGxldCBnZXRfb3BlcmF0b3IgY29udGV4dCA9XG4gICAgKHN0YXRlIGNvbnRleHQpLm9wZXJhdG9yXG5cblxuICBsZXQgc2V0X3NvdXJjZSBjb250ZXh0IHBhdHRlcm4gPVxuICAgIGxldCBzb3VyY2UgPSAhcGF0dGVybiBpblxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIHNvdXJjZX0pXG5cbiAgbGV0IGdldF9zb3VyY2UgY29udGV4dCA9XG4gICAgcmVmIChzdGF0ZSBjb250ZXh0KS5zb3VyY2VcblxuICBsZXQgc2V0X3NvdXJjZV9yZ2IgY29udGV4dCByIGcgYiA9XG4gICAgbGV0IHNvdXJjZSA9ICEoUGF0dGVybi5jcmVhdGVfcmdiIHIgZyBiKSBpblxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIHNvdXJjZX0pXG5cbiAgbGV0IHNldF9zb3VyY2VfcmdiYSBjb250ZXh0IHIgZyBiIGEgPVxuICAgIGxldCBzb3VyY2UgPSAhKFBhdHRlcm4uY3JlYXRlX3JnYmEgciBnIGIgYSkgaW5cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBzb3VyY2V9KVxuXG5cbiAgbGV0IHNlbGVjdF9mb250X2ZhY2UgY29udGV4dCA/KHNsYW50PVVwcmlnaHQpID8od2VpZ2h0PU5vcm1hbCkgZmFtaWx5ID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBmb250PXtzLmZvbnQgd2l0aCBzbGFudDsgd2VpZ2h0OyBmYW1pbHl9fSlcblxuICBsZXQgc2V0X2ZvbnRfc2l6ZSBjb250ZXh0IHNpemUgPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIGZvbnQ9e3MuZm9udCB3aXRoIHNpemV9fSlcblxuICBsZXQgc2hvd190ZXh0IGNvbnRleHQgcyA9XG4gICAgbGV0ICh4LCB5KSA9XG4gICAgICBQYXRoLmdldF9jdXJyZW50X3BvaW50IGNvbnRleHRcbiAgICBhbmQgd2lkdGggPVxuICAgICAgKHN0YXRlIGNvbnRleHQpLmZvbnQuc2l6ZSAqLiAwLjggKi4gKGZsb2F0X29mX2ludCAoU3RyaW5nLmxlbmd0aCBzKSlcbiAgICBpblxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6YE5vbmUgfmN1cnJlbnQ6KGBTZXQgKHggKy4gd2lkdGgsIHkpKVxuXG4gIGxldCBmb250X2V4dGVudHMgY29udGV4dCA9XG4gICAgbGV0IGFzY2VudCA9IChzdGF0ZSBjb250ZXh0KS5mb250LnNpemUgaW5cbiAgICB7XG4gICAgICBhc2NlbnQ7XG4gICAgICBkZXNjZW50PWFzY2VudCAvLiA0LjtcbiAgICAgIGJhc2VsaW5lPTAuO1xuICAgICAgbWF4X3hfYWR2YW5jZT0yLiAqLiBhc2NlbnQ7XG4gICAgICBtYXhfeV9hZHZhbmNlPTAuO1xuICAgIH1cblxuICBsZXQgdGV4dF9leHRlbnRzIGNvbnRleHQgcyA9XG4gICAgbGV0IHdpZHRoID1cbiAgICAgIChzdGF0ZSBjb250ZXh0KS5mb250LnNpemUgKi4gMC44ICouIChmbG9hdF9vZl9pbnQgKFN0cmluZy5sZW5ndGggcykpXG4gICAgYW5kIGhlaWdodCA9XG4gICAgICAoc3RhdGUgY29udGV4dCkuZm9udC5zaXplXG4gICAgaW5cbiAgICB7eF9iZWFyaW5nPTAuOyB5X2JlYXJpbmc9MC47IHdpZHRoOyBoZWlnaHQ7IHhfYWR2YW5jZT13aWR0aDsgeV9hZHZhbmNlPTAufVxuZW5kXG5cbm1vZHVsZSBEZWNvcmF0ZShDOiBTKSA9IHN0cnVjdFxuICBvcGVuIFN0ZExhYmVsc1xuXG4gIHR5cGUgZmlsbF9ydWxlID0gQy5maWxsX3J1bGUgPVxuICAgIHwgV0lORElOR1xuICAgIHwgRVZFTl9PRERcblxuICB0eXBlIGxpbmVfY2FwID0gQy5saW5lX2NhcCA9XG4gICAgfCBCVVRUXG4gICAgfCBST1VORFxuICAgIHwgU1FVQVJFXG5cbiAgdHlwZSBsaW5lX2pvaW4gPSBDLmxpbmVfam9pbiA9XG4gICAgfCBKT0lOX01JVEVSXG4gICAgfCBKT0lOX1JPVU5EXG4gICAgfCBKT0lOX0JFVkVMXG5cbiAgdHlwZSBtYXRyaXggPSBDLm1hdHJpeD0ge1xuICAgIG11dGFibGUgeHg6IGZsb2F0O1xuICAgIG11dGFibGUgeXg6IGZsb2F0O1xuICAgIG11dGFibGUgeHk6IGZsb2F0O1xuICAgIG11dGFibGUgeXk6IGZsb2F0O1xuICAgIG11dGFibGUgeDA6IGZsb2F0O1xuICAgIG11dGFibGUgeTA6IGZsb2F0O1xuICB9XG5cbiAgdHlwZSB0ZXh0X2V4dGVudHMgPSBDLnRleHRfZXh0ZW50cyA9IHtcbiAgICB4X2JlYXJpbmcgOiBmbG9hdDtcbiAgICB5X2JlYXJpbmcgOiBmbG9hdDtcbiAgICB3aWR0aCA6IGZsb2F0O1xuICAgIGhlaWdodCA6IGZsb2F0O1xuICAgIHhfYWR2YW5jZSA6IGZsb2F0O1xuICAgIHlfYWR2YW5jZSA6IGZsb2F0O1xuICB9XG5cbiAgdHlwZSBmb250X2V4dGVudHMgPSBDLmZvbnRfZXh0ZW50cyA9IHtcbiAgICBhc2NlbnQ6IGZsb2F0O1xuICAgIGRlc2NlbnQ6IGZsb2F0O1xuICAgIGJhc2VsaW5lOiBmbG9hdDtcbiAgICBtYXhfeF9hZHZhbmNlOiBmbG9hdDtcbiAgICBtYXhfeV9hZHZhbmNlOiBmbG9hdDtcbiAgfVxuXG4gIHR5cGUgb3BlcmF0b3IgPSBDLm9wZXJhdG9yID1cbiAgICB8IENMRUFSXG4gICAgfCBTT1VSQ0VcbiAgICB8IE9WRVJcbiAgICB8IElOXG4gICAgfCBPVVRcbiAgICB8IEFUT1BcbiAgICB8IERFU1RcbiAgICB8IERFU1RfT1ZFUlxuICAgIHwgREVTVF9JTlxuICAgIHwgREVTVF9PVVRcbiAgICB8IERFU1RfQVRPUFxuICAgIHwgWE9SXG4gICAgfCBBRERcbiAgICB8IFNBVFVSQVRFXG5cbiAgdHlwZSB3ZWlnaHQgPSBDLndlaWdodCA9XG4gICAgfCBOb3JtYWxcbiAgICB8IEJvbGRcblxuICB0eXBlIHNsYW50ID0gQy5zbGFudCA9XG4gICAgfCBVcHJpZ2h0XG4gICAgfCBJdGFsaWNcbiAgICB8IE9ibGlxdWVcblxuICB0eXBlIHN0YXR1cyA9IEMuc3RhdHVzID1cbiAgICB8IElOVkFMSURfUkVTVE9SRVxuICAgIHwgSU5WQUxJRF9QT1BfR1JPVVBcbiAgICB8IE5PX0NVUlJFTlRfUE9JTlRcbiAgICB8IElOVkFMSURfTUFUUklYXG4gICAgfCBJTlZBTElEX1NUQVRVU1xuICAgIHwgTlVMTF9QT0lOVEVSXG4gICAgfCBJTlZBTElEX1NUUklOR1xuICAgIHwgSU5WQUxJRF9QQVRIX0RBVEFcbiAgICB8IFJFQURfRVJST1JcbiAgICB8IFdSSVRFX0VSUk9SXG4gICAgfCBTVVJGQUNFX0ZJTklTSEVEXG4gICAgfCBTVVJGQUNFX1RZUEVfTUlTTUFUQ0hcbiAgICB8IFBBVFRFUk5fVFlQRV9NSVNNQVRDSFxuICAgIHwgSU5WQUxJRF9DT05URU5UXG4gICAgfCBJTlZBTElEX0ZPUk1BVFxuICAgIHwgSU5WQUxJRF9WSVNVQUxcbiAgICB8IEZJTEVfTk9UX0ZPVU5EXG4gICAgfCBJTlZBTElEX0RBU0hcbiAgICB8IElOVkFMSURfRFNDX0NPTU1FTlRcbiAgICB8IElOVkFMSURfSU5ERVhcbiAgICB8IENMSVBfTk9UX1JFUFJFU0VOVEFCTEVcbiAgICB8IFRFTVBfRklMRV9FUlJPUlxuICAgIHwgSU5WQUxJRF9TVFJJREVcbiAgICB8IEZPTlRfVFlQRV9NSVNNQVRDSFxuICAgIHwgVVNFUl9GT05UX0lNTVVUQUJMRVxuICAgIHwgVVNFUl9GT05UX0VSUk9SXG4gICAgfCBORUdBVElWRV9DT1VOVFxuICAgIHwgSU5WQUxJRF9DTFVTVEVSU1xuICAgIHwgSU5WQUxJRF9TTEFOVFxuICAgIHwgSU5WQUxJRF9XRUlHSFRcbiAgICB8IElOVkFMSURfU0laRVxuICAgIHwgVVNFUl9GT05UX05PVF9JTVBMRU1FTlRFRFxuICAgIHwgREVWSUNFX1RZUEVfTUlTTUFUQ0hcbiAgICB8IERFVklDRV9FUlJPUlxuICAgIHwgSU5WQUxJRF9NRVNIX0NPTlNUUlVDVElPTlxuICAgIHwgREVWSUNFX0ZJTklTSEVEXG4gICAgfCBKQklHMl9HTE9CQUxfTUlTU0lOR1xuXG4gIG1vZHVsZSBQYXR0ZXJuID0gQy5QYXR0ZXJuXG5cbiAgbW9kdWxlIE1hdHJpeCA9IEMuTWF0cml4XG5cbiAgZXhjZXB0aW9uIEVycm9yID0gQy5FcnJvclxuXG4gIGV4Y2VwdGlvbiBVbmF2YWlsYWJsZSA9IEMuVW5hdmFpbGFibGVcblxuICBsZXQgc3RhdHVzX3RvX3N0cmluZyA9IEMuc3RhdHVzX3RvX3N0cmluZ1xuXG4gIG1vZHVsZSBQID0gc3RydWN0XG4gICAgb3BlbiBDXG5cbiAgICBsZXQgdW5pdCAoKSA9XG4gICAgICBcIlwiXG5cbiAgICBsZXQgZmxvYXQgeCA9XG4gICAgICBQcmludGYuc3ByaW50ZiBcIiUuMmZcIiB4XG5cbiAgICBsZXQgbWF0cml4IHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfSA9XG4gICAgICBQcmludGYuc3ByaW50ZiBcInt4eD0lLjJmOyB4eT0lLjJmOyB5eD0lLjJmOyB5eT0lLjJmOyB4MD0lLjJmOyB5MD0lLjJmfVwiIHh4IHh5IHl4IHl5IHgwIHkwXG5cbiAgICBsZXQgY29vcmRzICh4LCB5KSA9XG4gICAgICBQcmludGYuc3ByaW50ZiBcIiglLjJmLCAlLjJmKVwiIHggeVxuXG4gICAgbGV0IGRhc2hlcyBkYXNoZXMgPVxuICAgICAgZGFzaGVzXG4gICAgICB8PiBBcnJheS50b19saXN0XG4gICAgICB8PiBMaXN0Lm1hcCB+ZjooUHJpbnRmLnNwcmludGYgXCIlLjJmXCIpXG4gICAgICB8PiBTdHJpbmcuY29uY2F0IH5zZXA6XCI7IFwiXG4gICAgICB8PiBQcmludGYuc3ByaW50ZiBcIlt8JXN8XVwiXG5cbiAgICBsZXQgZGFzaGVzX29mcyAoZHMsIG9mcykgPVxuICAgICAgUHJpbnRmLnNwcmludGYgXCIoJXMsICUuMmYpXCIgKGRhc2hlcyBkcykgb2ZzXG5cbiAgICBsZXQgZmlsbF9ydWxlID0gZnVuY3Rpb25cbiAgICAgIHwgV0lORElORyAtPiBcIldJTkRJTkdcIlxuICAgICAgfCBFVkVOX09ERCAtPiBcIkVWRU5fT0REXCJcblxuICAgIGxldCBsaW5lX2NhcCA9IGZ1bmN0aW9uXG4gICAgICB8IEJVVFQgLT4gXCJCVVRUXCJcbiAgICAgIHwgUk9VTkQgLT4gXCJST1VORFwiXG4gICAgICB8IFNRVUFSRSAtPiBcIlNRVUFSRVwiXG5cbiAgICBsZXQgbGluZV9qb2luID0gZnVuY3Rpb25cbiAgICAgIHwgSk9JTl9NSVRFUiAtPiBcIkpPSU5fTUlURVJcIlxuICAgICAgfCBKT0lOX1JPVU5EIC0+IFwiSk9JTl9ST1VORFwiXG4gICAgICB8IEpPSU5fQkVWRUwgLT4gXCJKT0lOX0JFVkVMXCJcblxuICAgIGxldCBvcGVyYXRvciA9IGZ1bmN0aW9uXG4gICAgICB8IENMRUFSIC0+IFwiQ0xFQVJcIlxuICAgICAgfCBTT1VSQ0UgLT4gXCJTT1VSQ0VcIlxuICAgICAgfCBPVkVSIC0+IFwiT1ZFUlwiXG4gICAgICB8IElOIC0+IFwiSU5cIlxuICAgICAgfCBPVVQgLT4gXCJPVVRcIlxuICAgICAgfCBBVE9QIC0+IFwiQVRPUFwiXG4gICAgICB8IERFU1QgLT4gXCJERVNUXCJcbiAgICAgIHwgREVTVF9PVkVSIC0+IFwiREVTVF9PVkVSXCJcbiAgICAgIHwgREVTVF9JTiAtPiBcIkRFU1RfSU5cIlxuICAgICAgfCBERVNUX09VVCAtPiBcIkRFU1RfT1VUXCJcbiAgICAgIHwgREVTVF9BVE9QIC0+IFwiREVTVF9BVE9QXCJcbiAgICAgIHwgWE9SIC0+IFwiWE9SXCJcbiAgICAgIHwgQUREIC0+IFwiQUREXCJcbiAgICAgIHwgU0FUVVJBVEUgLT4gXCJTQVRVUkFURVwiXG5cbiAgICBsZXQgc291cmNlIHNvdXJjZSA9IFBhdHRlcm4uKFxuICAgICAgbGV0IGdldCBnZXQgPVxuICAgICAgICB0cnkgU29tZSAoZ2V0IHNvdXJjZSkgd2l0aCBFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0ggLT4gTm9uZVxuICAgICAgYW5kIHN0b3BfcG9pbnRzICgpID1cbiAgICAgICAgbGV0IGNvdW50ID0gZ2V0X2NvbG9yX3N0b3BfY291bnQgc291cmNlIGluXG4gICAgICAgIGxldCBzdG9wX3BvaW50cyA9IEFycmF5Lm1ha2UgY291bnQgKDAuLCAwLiwgMC4sIDAuLCAwLikgaW5cbiAgICAgICAgZm9yIGlkeCA9IDAgdG8gY291bnQgLSAxIGRvXG4gICAgICAgICAgc3RvcF9wb2ludHMuKGlkeCkgPC0gZ2V0X2NvbG9yX3N0b3BfcmdiYSBzb3VyY2UgfmlkeFxuICAgICAgICBkb25lO1xuICAgICAgICBzdG9wX3BvaW50c1xuICAgICAgICB8PiBBcnJheS50b19saXN0XG4gICAgICAgIHw+IExpc3QubWFwIH5mOihmdW4gKHBvc2l0aW9uLCByLCBnLCBiLCBhKSAtPiBQcmludGYuc3ByaW50ZiBcIntwb3NpdGlvbj0lLjJmOyByPSUuMmY7IGc9JS4yZjsgYj0lLjJmOyBhPSUuMmZ9XCIgcG9zaXRpb24gciBnIGIgYSlcbiAgICAgICAgfD4gU3RyaW5nLmNvbmNhdCB+c2VwOlwiOyBcIlxuICAgICAgICB8PiBQcmludGYuc3ByaW50ZiBcIlslc11cIlxuICAgICAgaW5cbiAgICAgIG1hdGNoIGdldCBnZXRfcmdiYSB3aXRoXG4gICAgICAgIHwgU29tZSAociwgZywgYiwgYSkgLT5cbiAgICAgICAgICBQcmludGYuc3ByaW50ZiBcIihSZ2JhIHtyPSUuMmY7IGc9JS4yZjsgYj0lLjJmOyBhPSUuMmZ9KVwiIHIgZyBiIGFcbiAgICAgICAgfCBOb25lIC0+IG1hdGNoIGdldCBnZXRfbGluZWFyX3BvaW50cyB3aXRoXG4gICAgICAgICAgfCBTb21lICh4MSwgeTEsIHgyLCB5MikgLT5cbiAgICAgICAgICAgIFByaW50Zi5zcHJpbnRmIFwiKExpbmVhckdyYWRpZW50IHt4MD0lLjJmOyB5MD0lLjJmOyB4MT0lLjJmOyB5MT0lLjJmOyBzdG9wX3BvaW50cz0lc30pXCIgeDEgeTEgeDIgeTIgKHN0b3BfcG9pbnRzICgpKVxuICAgICAgICAgIHwgTm9uZSAtPlxuICAgICAgICAgICAgbGV0ICh4MSwgeTEsIHIxLCB4MiwgeTIsIHIyKSA9IGdldF9yYWRpYWxfY2lyY2xlcyBzb3VyY2UgaW5cbiAgICAgICAgICAgIFByaW50Zi5zcHJpbnRmIFwiKFJhZGlhbEdyYWRpZW50IHt4MD0lLjJmOyB5MD0lLjJmOyByMD0lLjJmOyB4MT0lLjJmOyB5MT0lLjJmOyByMSUuMmY7IHN0b3BfcG9pbnRzPSVzfSlcIiB4MSB5MSByMSB4MiB5MiByMiAoc3RvcF9wb2ludHMgKCkpXG4gICAgKVxuXG4gICAgbGV0IGZvbnRfZXh0ZW50cyB7YXNjZW50OyBkZXNjZW50OyBiYXNlbGluZTsgbWF4X3hfYWR2YW5jZTsgbWF4X3lfYWR2YW5jZX0gPVxuICAgICAgUHJpbnRmLnNwcmludGYgXCJ7YXNjZW50PSUuMmY7IGRlc2NlbnQ9JS4yZjsgYmFzZWxpbmU9JS4yZjsgbWF4X3hfYWR2YW5jZT0lLjJmOyBtYXhfeV9hZHZhbmNlPSUuMmZ9XCIgYXNjZW50IGRlc2NlbnQgYmFzZWxpbmUgbWF4X3hfYWR2YW5jZSBtYXhfeV9hZHZhbmNlXG5cbiAgICBsZXQgdGV4dF9leHRlbnRzIHt4X2JlYXJpbmc7IHlfYmVhcmluZzsgd2lkdGg7IGhlaWdodDsgeF9hZHZhbmNlOyB5X2FkdmFuY2V9ID1cbiAgICAgIFByaW50Zi5zcHJpbnRmIFwie3hfYmVhcmluZz0lLjJmOyB5X2JlYXJpbmc9JS4yZjsgd2lkdGg9JS4yZjsgaGVpZ2h0PSUuMmY7IHhfYWR2YW5jZT0lLjJmOyB5X2FkdmFuY2U9JS4yZn1cIiB4X2JlYXJpbmcgeV9iZWFyaW5nIHdpZHRoIGhlaWdodCB4X2FkdmFuY2UgeV9hZHZhbmNlXG5cbiAgICBsZXQgc2xhbnQgPSBmdW5jdGlvblxuICAgICAgfCBVcHJpZ2h0IC0+IFwiVXByaWdodFwiXG4gICAgICB8IEl0YWxpYyAtPiBcIkl0YWxpY1wiXG4gICAgICB8IE9ibGlxdWUgLT4gXCJPYmxpcXVlXCJcblxuICAgIGxldCB3ZWlnaHQgPSBmdW5jdGlvblxuICAgICAgfCBOb3JtYWwgLT4gXCJOb3JtYWxcIlxuICAgICAgfCBCb2xkIC0+IFwiQm9sZFwiXG4gIGVuZFxuXG4gIG1vZHVsZSBBID0gc3RydWN0XG4gICAgbGV0IG1hdHJpeCAoKSA9XG4gICAgICBQLm1hdHJpeFxuXG4gICAgbGV0IG9wZXJhdG9yICgpID1cbiAgICAgIFAub3BlcmF0b3JcblxuICAgIGxldCBmaWxsX3J1bGUgKCkgPVxuICAgICAgUC5maWxsX3J1bGVcblxuICAgIGxldCBsaW5lX2NhcCAoKSA9XG4gICAgICBQLmxpbmVfY2FwXG5cbiAgICBsZXQgbGluZV9qb2luICgpID1cbiAgICAgIFAubGluZV9qb2luXG5cbiAgICBsZXQgc291cmNlICgpID1cbiAgICAgIFAuc291cmNlXG5cbiAgICBsZXQgZGFzaGVzICgpID1cbiAgICAgIFAuZGFzaGVzXG5cbiAgICBsZXQgb3B0aW9uIG5hbWUgcCAoKSA9IGZ1bmN0aW9uXG4gICAgICB8IE5vbmUgLT4gXCJcIlxuICAgICAgfCBTb21lIHggLT4gUHJpbnRmLnNwcmludGYgXCIgfiVzOiVzXCIgbmFtZSAocCB4KVxuICBlbmRcblxuICBtb2R1bGUgQ29udGV4dDogc2lnXG4gICAgdHlwZSB0XG5cbiAgICB2YWwgY3JlYXRlOiBDLmNvbnRleHQgLT4gdFxuICAgIHZhbCBjYWxsOiB0IC0+ICgnYSwgdW5pdCwgc3RyaW5nLCAoJ2IgLT4gc3RyaW5nKSAtPiAoQy5jb250ZXh0IC0+ICdiKSAtPiAnYikgZm9ybWF0NCAtPiAnYVxuICAgIHZhbCBjYWxsczogdCAtPiBzdHJpbmcgbGlzdFxuICBlbmQgPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPSB7XG4gICAgICBjOiBDLmNvbnRleHQ7XG4gICAgICBtdXRhYmxlIGNhbGxzOiBzdHJpbmcgbGlzdDtcbiAgICB9XG5cbiAgICBsZXQgY3JlYXRlIGMgPVxuICAgICAge2M7IGNhbGxzPVtdfVxuXG4gICAgbGV0IGNhbGxzIHtjYWxsczsgX30gPVxuICAgICAgTGlzdC5yZXYgY2FsbHNcblxuICAgIGxldCBjYWxsIGNvbnRleHQgZm9ybWF0ID1cbiAgICAgIFByaW50Zi5rc3ByaW50ZiAoZnVuIGNhbGwgcHJpbnRfcmV0IGYgLT5cbiAgICAgICAgdHJ5IGJlZ2luXG4gICAgICAgICAgbGV0IHJldCA9IGYgY29udGV4dC5jIGluXG4gICAgICAgICAgbGV0IHByaW50ZWRfcmV0ID0gcHJpbnRfcmV0IHJldCBpblxuICAgICAgICAgIGxldCBjYWxsID1cbiAgICAgICAgICAgIGlmIHByaW50ZWRfcmV0IDw+IFwiXCIgdGhlblxuICAgICAgICAgICAgICBQcmludGYuc3ByaW50ZiBcIiVzIC0+ICVzXCIgY2FsbCBwcmludGVkX3JldFxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBjYWxsXG4gICAgICAgICAgaW5cbiAgICAgICAgICBjb250ZXh0LmNhbGxzIDwtIGNhbGw6OmNvbnRleHQuY2FsbHM7XG4gICAgICAgICAgcmV0XG4gICAgICAgIGVuZCB3aXRoXG4gICAgICAgICAgfCBleCAtPiBiZWdpblxuICAgICAgICAgICAgbGV0IGNhbGwgPSBQcmludGYuc3ByaW50ZiBcIiVzIC0+IHJhaXNlICglcylcIiBjYWxsIChQcmludGV4Yy50b19zdHJpbmcgZXgpIGluXG4gICAgICAgICAgICBjb250ZXh0LmNhbGxzIDwtIGNhbGw6OmNvbnRleHQuY2FsbHM7XG4gICAgICAgICAgICByYWlzZSBleFxuICAgICAgICAgIGVuZFxuICAgICAgKSBmb3JtYXRcbiAgZW5kXG5cbiAgdHlwZSBjb250ZXh0ID0gQ29udGV4dC50XG5cbiAgbGV0IGNyZWF0ZSA9IENvbnRleHQuY3JlYXRlXG5cbiAgbGV0IGNhbGxzID0gQ29udGV4dC5jYWxsc1xuXG5cblxuICBcbiMgNTkzIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgbGV0IHNhdmUgY29udGV4dCA9XG4gICAgXG4jIDU5NCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNTk0IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNhdmVcIiBQLnVuaXQgQy5zYXZlXG5cbiAgbGV0IHJlc3RvcmUgY29udGV4dCA9XG4gICAgXG4jIDU5NyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNTk3IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInJlc3RvcmVcIiBQLnVuaXQgQy5yZXN0b3JlXG5cblxuICBsZXQgc2V0X21hdHJpeCBjb250ZXh0IG0gPVxuICAgIFxuIyA2MDEgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDYwMSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJzZXRfbWF0cml4ICVhXCIgQS5tYXRyaXggbSBQLnVuaXQgKGZ1biBjIC0+IEMuc2V0X21hdHJpeCBjIG0pXG5cbiAgbGV0IGdldF9tYXRyaXggY29udGV4dCA9XG4gICAgXG4jIDYwNCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjA0IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcImdldF9tYXRyaXhcIiBQLm1hdHJpeCBDLmdldF9tYXRyaXhcblxuICBsZXQgdHJhbnNmb3JtIGNvbnRleHQgbSA9XG4gICAgXG4jIDYwNyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjA3IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInRyYW5zZm9ybSAlYVwiIEEubWF0cml4IG0gUC51bml0IChmdW4gYyAtPiBDLnRyYW5zZm9ybSBjIG0pXG5cbiAgbGV0IHNjYWxlIGNvbnRleHQgeCB5ID1cbiAgICBcbiMgNjEwIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2MTAgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwic2NhbGUgJS4yZiAlLjJmXCIgeCB5IFAudW5pdCAoZnVuIGMgLT4gQy5zY2FsZSBjIHggeSlcblxuICBsZXQgdHJhbnNsYXRlIGNvbnRleHQgeCB5ID1cbiAgICBcbiMgNjEzIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2MTMgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwidHJhbnNsYXRlICUuMmYgJS4yZlwiIHggeSBQLnVuaXQgKGZ1biBjIC0+IEMudHJhbnNsYXRlIGMgeCB5KVxuXG4gIGxldCByb3RhdGUgY29udGV4dCBhbmdsZSA9XG4gICAgXG4jIDYxNiBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjE2IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInJvdGF0ZSAlLjJmXCIgYW5nbGUgUC51bml0IChmdW4gYyAtPiBDLnJvdGF0ZSBjIGFuZ2xlKVxuXG4gIGxldCBpZGVudGl0eV9tYXRyaXggY29udGV4dCA9XG4gICAgXG4jIDYxOSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjE5IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcImlkZW50aXR5X21hdHJpeFwiIFAudW5pdCBDLmlkZW50aXR5X21hdHJpeFxuXG4gIGxldCBkZXZpY2VfdG9fdXNlciBjb250ZXh0IHggeSA9XG4gICAgXG4jIDYyMiBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjIyIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcImRldmljZV90b191c2VyICUuMmYgJS4yZlwiIHggeSBQLmNvb3JkcyAoZnVuIGMgLT4gQy5kZXZpY2VfdG9fdXNlciBjIHggeSlcblxuICBsZXQgZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgY29udGV4dCB4IHkgPVxuICAgIFxuIyA2MjUgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDYyNSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJkZXZpY2VfdG9fdXNlcl9kaXN0YW5jZSAlLjJmICUuMmZcIiB4IHkgUC5jb29yZHMgKGZ1biBjIC0+IEMuZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgYyB4IHkpXG5cbiAgbGV0IHVzZXJfdG9fZGV2aWNlIGNvbnRleHQgeCB5ID1cbiAgICBcbiMgNjI4IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2MjggXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwidXNlcl90b19kZXZpY2UgJS4yZiAlLjJmXCIgeCB5IFAuY29vcmRzIChmdW4gYyAtPiBDLnVzZXJfdG9fZGV2aWNlIGMgeCB5KVxuXG4gIGxldCB1c2VyX3RvX2RldmljZV9kaXN0YW5jZSBjb250ZXh0IHggeSA9XG4gICAgXG4jIDYzMSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjMxIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInVzZXJfdG9fZGV2aWNlX2Rpc3RhbmNlICUuMmYgJS4yZlwiIHggeSBQLmNvb3JkcyAoZnVuIGMgLT4gQy51c2VyX3RvX2RldmljZV9kaXN0YW5jZSBjIHggeSlcblxuXG4gIGxldCBtb3ZlX3RvIGNvbnRleHQgeCB5ID1cbiAgICBcbiMgNjM1IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2MzUgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwibW92ZV90byAlLjJmICUuMmZcIiB4IHkgUC51bml0IChmdW4gYyAtPiBDLm1vdmVfdG8gYyB4IHkpXG5cbiAgbGV0IHJlbF9tb3ZlX3RvIGNvbnRleHQgeCB5ID1cbiAgICBcbiMgNjM4IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2MzggXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwicmVsX21vdmVfdG8gJS4yZiAlLjJmXCIgeCB5IFAudW5pdCAoZnVuIGMgLT4gQy5yZWxfbW92ZV90byBjIHggeSlcblxuICBsZXQgbGluZV90byBjb250ZXh0IHggeSA9XG4gICAgXG4jIDY0MSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjQxIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcImxpbmVfdG8gJS4yZiAlLjJmXCIgeCB5IFAudW5pdCAoZnVuIGMgLT4gQy5saW5lX3RvIGMgeCB5KVxuXG4gIGxldCByZWxfbGluZV90byBjb250ZXh0IHggeSA9XG4gICAgXG4jIDY0NCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjQ0IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInJlbF9saW5lX3RvICUuMmYgJS4yZlwiIHggeSBQLnVuaXQgKGZ1biBjIC0+IEMucmVsX2xpbmVfdG8gYyB4IHkpXG5cbiAgbGV0IGN1cnZlX3RvIGNvbnRleHQgeDEgeTEgeDIgeTIgeDMgeTMgPVxuICAgIFxuIyA2NDcgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDY0NyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJjdXJ2ZV90byAlLjJmICUuMmYgJS4yZiAlLjJmICUuMmYgJS4yZlwiIHgxIHkxIHgyIHkyIHgzIHkzIFAudW5pdCAoZnVuIGMgLT4gQy5jdXJ2ZV90byBjIHgxIHkxIHgyIHkyIHgzIHkzKVxuXG4gIGxldCByZWxfY3VydmVfdG8gY29udGV4dCB4MSB5MSB4MiB5MiB4MyB5MyA9XG4gICAgXG4jIDY1MCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjUwIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInJlbF9jdXJ2ZV90byAlLjJmICUuMmYgJS4yZiAlLjJmICUuMmYgJS4yZlwiIHgxIHkxIHgyIHkyIHgzIHkzIFAudW5pdCAoZnVuIGMgLT4gQy5yZWxfY3VydmVfdG8gYyB4MSB5MSB4MiB5MiB4MyB5MylcblxuICBsZXQgcmVjdGFuZ2xlIGNvbnRleHQgeCB5IH53IH5oID1cbiAgICBcbiMgNjUzIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2NTMgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwicmVjdGFuZ2xlICUuMmYgJS4yZiB+dzolLjJmIH5oOiUuMmZcIiB4IHkgdyBoIFAudW5pdCAoZnVuIGMgLT4gQy5yZWN0YW5nbGUgYyB4IHkgfncgfmgpXG5cbiAgbGV0IGFyYyBjb250ZXh0IHggeSB+ciB+YTEgfmEyID1cbiAgICBcbiMgNjU2IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2NTYgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiYXJjICUuMmYgJS4yZiB+cjolLjJmIH5hMTolLjJmIH5hMjolLjJmXCIgeCB5IHIgYTEgYTIgUC51bml0IChmdW4gYyAtPiBDLmFyYyBjIHggeSB+ciB+YTEgfmEyKVxuXG4gIGxldCBhcmNfbmVnYXRpdmUgY29udGV4dCB4IHkgfnIgfmExIH5hMiA9XG4gICAgXG4jIDY1OSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjU5IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcImFyY19uZWdhdGl2ZSAlLjJmICUuMmYgfnI6JS4yZiB+YTE6JS4yZiB+YTI6JS4yZlwiIHggeSByIGExIGEyIFAudW5pdCAoZnVuIGMgLT4gQy5hcmNfbmVnYXRpdmUgYyB4IHkgfnIgfmExIH5hMilcblxuICBtb2R1bGUgUGF0aCA9IHN0cnVjdFxuICAgIGxldCBnZXRfY3VycmVudF9wb2ludCBjb250ZXh0ID1cbiAgICAgIFxuIyA2NjMgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjYzIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICAgIFwiUGF0aC5nZXRfY3VycmVudF9wb2ludFwiIFAuY29vcmRzIEMuUGF0aC5nZXRfY3VycmVudF9wb2ludFxuXG4gICAgbGV0IGNsZWFyIGNvbnRleHQgPVxuICAgICAgXG4jIDY2NiBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2NjYgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgICAgXCJQYXRoLmNsZWFyXCIgUC51bml0IEMuUGF0aC5jbGVhclxuXG4gICAgbGV0IGNsb3NlIGNvbnRleHQgPVxuICAgICAgXG4jIDY2OSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2NjkgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgICAgXCJQYXRoLmNsb3NlXCIgUC51bml0IEMuUGF0aC5jbG9zZVxuICBlbmRcblxuICBsZXQgc3Ryb2tlX3ByZXNlcnZlIGNvbnRleHQgPVxuICAgIFxuIyA2NzMgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDY3MyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJzdHJva2VfcHJlc2VydmVcIiBQLnVuaXQgQy5zdHJva2VfcHJlc2VydmVcblxuICBsZXQgc3Ryb2tlIGNvbnRleHQgPVxuICAgIFxuIyA2NzYgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDY3NiBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJzdHJva2VcIiBQLnVuaXQgQy5zdHJva2VcblxuICBsZXQgZmlsbF9wcmVzZXJ2ZSBjb250ZXh0ID1cbiAgICBcbiMgNjc5IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2NzkgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiZmlsbF9wcmVzZXJ2ZVwiIFAudW5pdCBDLmZpbGxfcHJlc2VydmVcblxuICBsZXQgZmlsbCBjb250ZXh0ID1cbiAgICBcbiMgNjgyIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2ODIgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiZmlsbFwiIFAudW5pdCBDLmZpbGxcblxuICBsZXQgY2xpcF9wcmVzZXJ2ZSBjb250ZXh0ID1cbiAgICBcbiMgNjg1IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2ODUgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiY2xpcF9wcmVzZXJ2ZVwiIFAudW5pdCBDLmNsaXBfcHJlc2VydmVcblxuICBsZXQgY2xpcCBjb250ZXh0ID1cbiAgICBcbiMgNjg4IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA2ODggXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiY2xpcFwiIFAudW5pdCBDLmNsaXBcblxuICBsZXQgcGFpbnQgP2FscGhhIGNvbnRleHQgPVxuICAgIFxuIyA2OTEgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDY5MSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJwYWludCVhXCIgKEEub3B0aW9uIFwiYWxwaGFcIiBQLmZsb2F0KSBhbHBoYSBQLnVuaXQgKEMucGFpbnQgP2FscGhhKVxuXG5cbiAgbGV0IHNldF9saW5lX3dpZHRoIGNvbnRleHQgbGluZV93aWR0aCA9XG4gICAgXG4jIDY5NSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNjk1IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNldF9saW5lX3dpZHRoICUuMmZcIiBsaW5lX3dpZHRoIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfbGluZV93aWR0aCBjIGxpbmVfd2lkdGgpXG5cbiAgbGV0IGdldF9saW5lX3dpZHRoIGNvbnRleHQgPVxuICAgIFxuIyA2OTggXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDY5OCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJnZXRfbGluZV93aWR0aFwiIFAuZmxvYXQgQy5nZXRfbGluZV93aWR0aFxuXG4gIGxldCBzZXRfZGFzaCBjb250ZXh0ID9vZnMgZGFzaGVzID1cbiAgICBcbiMgNzAxIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA3MDEgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwic2V0X2Rhc2glYSAlYVwiIChBLm9wdGlvbiBcIm9mc1wiIFAuZmxvYXQpIG9mcyBBLmRhc2hlcyBkYXNoZXMgUC51bml0IChmdW4gYyAtPiBDLnNldF9kYXNoIGMgP29mcyBkYXNoZXMpXG5cbiAgbGV0IGdldF9kYXNoIGNvbnRleHQgPVxuICAgIFxuIyA3MDQgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDcwNCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJnZXRfZGFzaFwiIFAuZGFzaGVzX29mcyBDLmdldF9kYXNoXG5cbiAgbGV0IHNldF9maWxsX3J1bGUgY29udGV4dCBmaWxsX3J1bGUgPVxuICAgIFxuIyA3MDcgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDcwNyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJzZXRfZmlsbF9ydWxlICVhXCIgQS5maWxsX3J1bGUgZmlsbF9ydWxlIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfZmlsbF9ydWxlIGMgZmlsbF9ydWxlKVxuXG4gIGxldCBnZXRfZmlsbF9ydWxlIGNvbnRleHQgPVxuICAgIFxuIyA3MTAgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDcxMCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJnZXRfZmlsbF9ydWxlXCIgUC5maWxsX3J1bGUgQy5nZXRfZmlsbF9ydWxlXG5cbiAgbGV0IHNldF9saW5lX2NhcCBjb250ZXh0IGxpbmVfY2FwID1cbiAgICBcbiMgNzEzIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA3MTMgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwic2V0X2xpbmVfY2FwICVhXCIgQS5saW5lX2NhcCBsaW5lX2NhcCBQLnVuaXQgKGZ1biBjIC0+IEMuc2V0X2xpbmVfY2FwIGMgbGluZV9jYXApXG5cbiAgbGV0IGdldF9saW5lX2NhcCBjb250ZXh0ID1cbiAgICBcbiMgNzE2IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA3MTYgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiZ2V0X2xpbmVfY2FwXCIgUC5saW5lX2NhcCBDLmdldF9saW5lX2NhcFxuXG4gIGxldCBzZXRfbGluZV9qb2luIGNvbnRleHQgbGluZV9qb2luID1cbiAgICBcbiMgNzE5IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA3MTkgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwic2V0X2xpbmVfam9pbiAlYVwiIEEubGluZV9qb2luIGxpbmVfam9pbiBQLnVuaXQgKGZ1biBjIC0+IEMuc2V0X2xpbmVfam9pbiBjIGxpbmVfam9pbilcblxuICBsZXQgZ2V0X2xpbmVfam9pbiBjb250ZXh0ID1cbiAgICBcbiMgNzIyIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA3MjIgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiZ2V0X2xpbmVfam9pblwiIFAubGluZV9qb2luIEMuZ2V0X2xpbmVfam9pblxuXG4gIGxldCBzZXRfbWl0ZXJfbGltaXQgY29udGV4dCBtaXRlcl9saW1pdCA9XG4gICAgXG4jIDcyNSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzI1IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNldF9taXRlcl9saW1pdCAlLjJmXCIgbWl0ZXJfbGltaXQgUC51bml0IChmdW4gYyAtPiBDLnNldF9taXRlcl9saW1pdCBjIG1pdGVyX2xpbWl0KVxuXG4gIGxldCBnZXRfbWl0ZXJfbGltaXQgY29udGV4dCA9XG4gICAgXG4jIDcyOCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzI4IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcImdldF9taXRlcl9saW1pdFwiIFAuZmxvYXQgQy5nZXRfbWl0ZXJfbGltaXRcblxuICBsZXQgc2V0X29wZXJhdG9yIGNvbnRleHQgb3BlcmF0b3IgPVxuICAgIFxuIyA3MzEgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDczMSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJzZXRfb3BlcmF0b3IgJWFcIiBBLm9wZXJhdG9yIG9wZXJhdG9yIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfb3BlcmF0b3IgYyBvcGVyYXRvcilcblxuICBsZXQgZ2V0X29wZXJhdG9yIGNvbnRleHQgPVxuICAgIFxuIyA3MzQgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDczNCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJnZXRfb3BlcmF0b3JcIiBQLm9wZXJhdG9yIEMuZ2V0X29wZXJhdG9yXG5cblxuICBsZXQgc2V0X3NvdXJjZSBjb250ZXh0IHNvdXJjZSA9XG4gICAgXG4jIDczOCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzM4IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNldF9zb3VyY2UgJWFcIiBBLnNvdXJjZSAoT2JqLm1hZ2ljIHNvdXJjZSkgUC51bml0IChmdW4gYyAtPiBDLnNldF9zb3VyY2UgYyBzb3VyY2UpXG5cbiAgbGV0IGdldF9zb3VyY2UgY29udGV4dCA9XG4gICAgXG4jIDc0MSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzQxIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcImdldF9zb3VyY2VcIiBQLnNvdXJjZSBDLmdldF9zb3VyY2VcblxuICBsZXQgc2V0X3NvdXJjZV9yZ2IgY29udGV4dCByIGcgYiA9XG4gICAgXG4jIDc0NCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzQ0IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNldF9zb3VyY2VfcmdiICUuMmYgJS4yZiAlLjJmXCIgciBnIGIgUC51bml0IChmdW4gYyAtPiBDLnNldF9zb3VyY2VfcmdiIGMgciBnIGIpXG5cbiAgbGV0IHNldF9zb3VyY2VfcmdiYSBjb250ZXh0IHIgZyBiIGEgPVxuICAgIFxuIyA3NDcgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICBDb250ZXh0LmNhbGwgY29udGV4dCAgXG4jIDc0NyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgICAgXCJzZXRfc291cmNlX3JnYmEgJS4yZiAlLjJmICUuMmYgJS4yZlwiIHIgZyBiIGEgUC51bml0IChmdW4gYyAtPiBDLnNldF9zb3VyY2VfcmdiYSBjIHIgZyBiIGEpXG5cblxuICBsZXQgc2VsZWN0X2ZvbnRfZmFjZSBjb250ZXh0ID9zbGFudCA/d2VpZ2h0IGZhbWlseSA9XG4gICAgXG4jIDc1MSBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzUxIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNlbGVjdF9mb250X2ZhY2UlYSVhICVTXCIgKEEub3B0aW9uIFwic2xhbnRcIiBQLnNsYW50KSBzbGFudCAoQS5vcHRpb24gXCJ3ZWlnaHRcIiBQLndlaWdodCkgd2VpZ2h0IGZhbWlseSBQLnVuaXQgKGZ1biBjIC0+IEMuc2VsZWN0X2ZvbnRfZmFjZSBjID9zbGFudCA/d2VpZ2h0IGZhbWlseSlcblxuICBsZXQgc2V0X2ZvbnRfc2l6ZSBjb250ZXh0IGZvbnRfc2l6ZSA9XG4gICAgXG4jIDc1NCBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzU0IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNldF9mb250X3NpemUgJS4yZlwiIGZvbnRfc2l6ZSBQLnVuaXQgKGZ1biBjIC0+IEMuc2V0X2ZvbnRfc2l6ZSBjIGZvbnRfc2l6ZSlcblxuICBsZXQgc2hvd190ZXh0IGNvbnRleHQgcyA9XG4gICAgXG4jIDc1NyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzU3IFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInNob3dfdGV4dCAlU1wiIHMgUC51bml0IChmdW4gYyAtPiBDLnNob3dfdGV4dCBjIHMpXG5cbiAgbGV0IGZvbnRfZXh0ZW50cyBjb250ZXh0ID1cbiAgICBcbiMgNzYwIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgQ29udGV4dC5jYWxsIGNvbnRleHQgIFxuIyA3NjAgXCJzcmMvQ2Fpcm9Nb2NrLmNwcG8ubWxcIlxuICAgICAgIFwiZm9udF9leHRlbnRzXCIgUC5mb250X2V4dGVudHMgQy5mb250X2V4dGVudHNcblxuICBsZXQgdGV4dF9leHRlbnRzIGNvbnRleHQgcyA9XG4gICAgXG4jIDc2MyBcInNyYy9DYWlyb01vY2suY3Bwby5tbFwiXG4gICAgIENvbnRleHQuY2FsbCBjb250ZXh0ICBcbiMgNzYzIFwic3JjL0NhaXJvTW9jay5jcHBvLm1sXCJcbiAgICAgICBcInRleHRfZXh0ZW50cyAlU1wiIHMgUC50ZXh0X2V4dGVudHMgKGZ1biBjIC0+IEMudGV4dF9leHRlbnRzIGMgcylcbmVuZFxuXG5pbmNsdWRlIERlY29yYXRlKE1vY2spXG5cbmxldCBjcmVhdGUgKCkgPVxuICBDb250ZXh0LmNyZWF0ZSAoTW9jay5jcmVhdGUgKCkpXG4iLCIjIDEgXCJzcmMvSnNPZk9DYWlyby5jcHBvLm1sXCJcbigqIENvcHlyaWdodCAyMDE3LTIwMTggVmluY2VudCBKYWNxdWVzIDx2aW5jZW50QHZpbmNlbnQtamFjcXVlcy5uZXQ+ICopXG5cbm1vZHVsZSB0eXBlIFMgPSBDYWlyb01vY2suU1xuXG4oKlxuQ2FudmFzOlxuLSBodHRwOi8vd3d3Lnczc2Nob29scy5jb20vdGFncy9yZWZfY2FudmFzLmFzcFxuLSBodHRwczovL29jc2lnZW4ub3JnL2pzX29mX29jYW1sLzIuOC40L2FwaS9Eb21faHRtbC5jYW52YXNSZW5kZXJpbmdDb250ZXh0MkQtY1xuXG5DYWlybzpcbi0gaHR0cDovL2NhaXJvLmZvcmdlLm9jYW1sY29yZS5vcmcvdHV0b3JpYWwvQ2Fpcm8uaHRtbFxuLSBodHRwczovL2dpdGh1Yi5jb20vQ2hyaXMwMC9vY2FtbC1jYWlyb1xuLSB1dG9wIC1yZXF1aXJlIGNhaXJvMlxuKilcblxuIyAxIFwic3JjL0JhY2tlbmQuaW5jbC5tbFwiXG4oKiBDb3B5cmlnaHQgMjAxNy0yMDE4IFZpbmNlbnQgSmFjcXVlcyA8dmluY2VudEB2aW5jZW50LWphY3F1ZXMubmV0PiAqKVxuXG5vcGVuIFN0ZExhYmVsc1xuXG50eXBlIHN0YXR1cyA9XG4gIHwgSU5WQUxJRF9SRVNUT1JFXG4gIHwgSU5WQUxJRF9QT1BfR1JPVVBcbiAgfCBOT19DVVJSRU5UX1BPSU5UXG4gIHwgSU5WQUxJRF9NQVRSSVhcbiAgfCBJTlZBTElEX1NUQVRVU1xuICB8IE5VTExfUE9JTlRFUlxuICB8IElOVkFMSURfU1RSSU5HXG4gIHwgSU5WQUxJRF9QQVRIX0RBVEFcbiAgfCBSRUFEX0VSUk9SXG4gIHwgV1JJVEVfRVJST1JcbiAgfCBTVVJGQUNFX0ZJTklTSEVEXG4gIHwgU1VSRkFDRV9UWVBFX01JU01BVENIXG4gIHwgUEFUVEVSTl9UWVBFX01JU01BVENIXG4gIHwgSU5WQUxJRF9DT05URU5UXG4gIHwgSU5WQUxJRF9GT1JNQVRcbiAgfCBJTlZBTElEX1ZJU1VBTFxuICB8IEZJTEVfTk9UX0ZPVU5EXG4gIHwgSU5WQUxJRF9EQVNIXG4gIHwgSU5WQUxJRF9EU0NfQ09NTUVOVFxuICB8IElOVkFMSURfSU5ERVhcbiAgfCBDTElQX05PVF9SRVBSRVNFTlRBQkxFXG4gIHwgVEVNUF9GSUxFX0VSUk9SXG4gIHwgSU5WQUxJRF9TVFJJREVcbiAgfCBGT05UX1RZUEVfTUlTTUFUQ0hcbiAgfCBVU0VSX0ZPTlRfSU1NVVRBQkxFXG4gIHwgVVNFUl9GT05UX0VSUk9SXG4gIHwgTkVHQVRJVkVfQ09VTlRcbiAgfCBJTlZBTElEX0NMVVNURVJTXG4gIHwgSU5WQUxJRF9TTEFOVFxuICB8IElOVkFMSURfV0VJR0hUXG4gIHwgSU5WQUxJRF9TSVpFXG4gIHwgVVNFUl9GT05UX05PVF9JTVBMRU1FTlRFRFxuICB8IERFVklDRV9UWVBFX01JU01BVENIXG4gIHwgREVWSUNFX0VSUk9SXG4gIHwgSU5WQUxJRF9NRVNIX0NPTlNUUlVDVElPTlxuICB8IERFVklDRV9GSU5JU0hFRFxuICB8IEpCSUcyX0dMT0JBTF9NSVNTSU5HXG5cbmV4Y2VwdGlvbiBFcnJvciBvZiBzdGF0dXNcblxubGV0IHN0YXR1c190b19zdHJpbmcgPSBmdW5jdGlvblxuICB8IElOVkFMSURfUkVTVE9SRSAtPiBcImNhaXJvX3Jlc3RvcmUoKSB3aXRob3V0IG1hdGNoaW5nIGNhaXJvX3NhdmUoKVwiXG4gIHwgSU5WQUxJRF9QT1BfR1JPVVAgLT4gXCJubyBzYXZlZCBncm91cCB0byBwb3AsIGkuZS4gY2Fpcm9fcG9wX2dyb3VwKCkgd2l0aG91dCBtYXRjaGluZyBjYWlyb19wdXNoX2dyb3VwKClcIlxuICB8IE5PX0NVUlJFTlRfUE9JTlQgLT4gXCJubyBjdXJyZW50IHBvaW50IGRlZmluZWRcIlxuICB8IElOVkFMSURfTUFUUklYIC0+IFwiaW52YWxpZCBtYXRyaXggKG5vdCBpbnZlcnRpYmxlKVwiXG4gIHwgSU5WQUxJRF9TVEFUVVMgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhbiBpbnB1dCBjYWlyb19zdGF0dXNfdFwiXG4gIHwgTlVMTF9QT0lOVEVSIC0+IFwiTlVMTCBwb2ludGVyXCJcbiAgfCBJTlZBTElEX1NUUklORyAtPiBcImlucHV0IHN0cmluZyBub3QgdmFsaWQgVVRGLThcIlxuICB8IElOVkFMSURfUEFUSF9EQVRBIC0+IFwiaW5wdXQgcGF0aCBkYXRhIG5vdCB2YWxpZFwiXG4gIHwgUkVBRF9FUlJPUiAtPiBcImVycm9yIHdoaWxlIHJlYWRpbmcgZnJvbSBpbnB1dCBzdHJlYW1cIlxuICB8IFdSSVRFX0VSUk9SIC0+IFwiZXJyb3Igd2hpbGUgd3JpdGluZyB0byBvdXRwdXQgc3RyZWFtXCJcbiAgfCBTVVJGQUNFX0ZJTklTSEVEIC0+IFwidGhlIHRhcmdldCBzdXJmYWNlIGhhcyBiZWVuIGZpbmlzaGVkXCJcbiAgfCBTVVJGQUNFX1RZUEVfTUlTTUFUQ0ggLT4gXCJ0aGUgc3VyZmFjZSB0eXBlIGlzIG5vdCBhcHByb3ByaWF0ZSBmb3IgdGhlIG9wZXJhdGlvblwiXG4gIHwgUEFUVEVSTl9UWVBFX01JU01BVENIIC0+IFwidGhlIHBhdHRlcm4gdHlwZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoZSBvcGVyYXRpb25cIlxuICB8IElOVkFMSURfQ09OVEVOVCAtPiBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2NvbnRlbnRfdFwiXG4gIHwgSU5WQUxJRF9GT1JNQVQgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhbiBpbnB1dCBjYWlyb19mb3JtYXRfdFwiXG4gIHwgSU5WQUxJRF9WSVNVQUwgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhbiBpbnB1dCBWaXN1YWwqXCJcbiAgfCBGSUxFX05PVF9GT1VORCAtPiBcImZpbGUgbm90IGZvdW5kXCJcbiAgfCBJTlZBTElEX0RBU0ggLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhIGRhc2ggc2V0dGluZ1wiXG4gIHwgSU5WQUxJRF9EU0NfQ09NTUVOVCAtPiBcImludmFsaWQgdmFsdWUgZm9yIGEgRFNDIGNvbW1lbnRcIlxuICB8IElOVkFMSURfSU5ERVggLT4gXCJpbnZhbGlkIGluZGV4IHBhc3NlZCB0byBnZXR0ZXJcIlxuICB8IENMSVBfTk9UX1JFUFJFU0VOVEFCTEUgLT4gXCJjbGlwIHJlZ2lvbiBub3QgcmVwcmVzZW50YWJsZSBpbiBkZXNpcmVkIGZvcm1hdFwiXG4gIHwgVEVNUF9GSUxFX0VSUk9SIC0+IFwiZXJyb3IgY3JlYXRpbmcgb3Igd3JpdGluZyB0byBhIHRlbXBvcmFyeSBmaWxlXCJcbiAgfCBJTlZBTElEX1NUUklERSAtPiBcImludmFsaWQgdmFsdWUgZm9yIHN0cmlkZVwiXG4gIHwgRk9OVF9UWVBFX01JU01BVENIIC0+IFwidGhlIGZvbnQgdHlwZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoZSBvcGVyYXRpb25cIlxuICB8IFVTRVJfRk9OVF9JTU1VVEFCTEUgLT4gXCJ0aGUgdXNlci1mb250IGlzIGltbXV0YWJsZVwiXG4gIHwgVVNFUl9GT05UX0VSUk9SIC0+IFwiZXJyb3Igb2NjdXJyZWQgaW4gYSB1c2VyLWZvbnQgY2FsbGJhY2sgZnVuY3Rpb25cIlxuICB8IE5FR0FUSVZFX0NPVU5UIC0+IFwibmVnYXRpdmUgbnVtYmVyIHVzZWQgd2hlcmUgaXQgaXMgbm90IGFsbG93ZWRcIlxuICB8IElOVkFMSURfQ0xVU1RFUlMgLT4gXCJpbnB1dCBjbHVzdGVycyBkbyBub3QgcmVwcmVzZW50IHRoZSBhY2NvbXBhbnlpbmcgdGV4dCBhbmQgZ2x5cGggYXJyYXlzXCJcbiAgfCBJTlZBTElEX1NMQU5UIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgY2Fpcm9fZm9udF9zbGFudF90XCJcbiAgfCBJTlZBTElEX1dFSUdIVCAtPiBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2ZvbnRfd2VpZ2h0X3RcIlxuICB8IElOVkFMSURfU0laRSAtPiBcImludmFsaWQgdmFsdWUgKHR5cGljYWxseSB0b28gYmlnKSBmb3IgdGhlIHNpemUgb2YgdGhlIGlucHV0IChzdXJmYWNlLCBwYXR0ZXJuLCBldGMuKVwiXG4gIHwgVVNFUl9GT05UX05PVF9JTVBMRU1FTlRFRCAtPiBcInVzZXItZm9udCBtZXRob2Qgbm90IGltcGxlbWVudGVkXCJcbiAgfCBERVZJQ0VfVFlQRV9NSVNNQVRDSCAtPiBcInRoZSBkZXZpY2UgdHlwZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoZSBvcGVyYXRpb25cIlxuICB8IERFVklDRV9FUlJPUiAtPiBcImFuIG9wZXJhdGlvbiB0byB0aGUgZGV2aWNlIGNhdXNlZCBhbiB1bnNwZWNpZmllZCBlcnJvclwiXG4gIHwgSU5WQUxJRF9NRVNIX0NPTlNUUlVDVElPTiAtPiBcImludmFsaWQgb3BlcmF0aW9uIGR1cmluZyBtZXNoIHBhdHRlcm4gY29uc3RydWN0aW9uXCJcbiAgfCBERVZJQ0VfRklOSVNIRUQgLT4gXCJ0aGUgdGFyZ2V0IGRldmljZSBoYXMgYmVlbiBmaW5pc2hlZFwiXG4gIHwgSkJJRzJfR0xPQkFMX01JU1NJTkcgLT4gXCJDQUlST19NSU1FX1RZUEVfSkJJRzJfR0xPQkFMX0lEIHVzZWQgYnV0IG5vIENBSVJPX01JTUVfVFlQRV9KQklHMl9HTE9CQUwgZGF0YSBwcm92aWRlZFwiXG5cbmxldCBzdGF0dXNfcmVwciA9IGZ1bmN0aW9uXG4gIHwgSU5WQUxJRF9SRVNUT1JFIC0+IFwiSU5WQUxJRF9SRVNUT1JFXCJcbiAgfCBOT19DVVJSRU5UX1BPSU5UIC0+IFwiTk9fQ1VSUkVOVF9QT0lOVFwiXG4gICgqQklTRUNULUlHTk9SRS1CRUdJTiopICgqIEkgZG9uJ3Qga25vdyBob3cgdG8gbWFrZSBDYWlybyByYWlzZSB0aGVzZSBleGNlcHRpb25zICopXG4gIHwgSU5WQUxJRF9QT1BfR1JPVVAgLT4gXCJJTlZBTElEX1BPUF9HUk9VUFwiXG4gIHwgSU5WQUxJRF9NQVRSSVggLT4gXCJJTlZBTElEX01BVFJJWFwiXG4gIHwgSU5WQUxJRF9TVEFUVVMgLT4gXCJJTlZBTElEX1NUQVRVU1wiXG4gIHwgTlVMTF9QT0lOVEVSIC0+IFwiTlVMTF9QT0lOVEVSXCJcbiAgfCBJTlZBTElEX1NUUklORyAtPiBcIklOVkFMSURfU1RSSU5HXCJcbiAgfCBJTlZBTElEX1BBVEhfREFUQSAtPiBcIklOVkFMSURfUEFUSF9EQVRBXCJcbiAgfCBSRUFEX0VSUk9SIC0+IFwiUkVBRF9FUlJPUlwiXG4gIHwgV1JJVEVfRVJST1IgLT4gXCJXUklURV9FUlJPUlwiXG4gIHwgU1VSRkFDRV9GSU5JU0hFRCAtPiBcIlNVUkZBQ0VfRklOSVNIRURcIlxuICB8IFNVUkZBQ0VfVFlQRV9NSVNNQVRDSCAtPiBcIlNVUkZBQ0VfVFlQRV9NSVNNQVRDSFwiXG4gIHwgUEFUVEVSTl9UWVBFX01JU01BVENIIC0+IFwiUEFUVEVSTl9UWVBFX01JU01BVENIXCJcbiAgfCBJTlZBTElEX0NPTlRFTlQgLT4gXCJJTlZBTElEX0NPTlRFTlRcIlxuICB8IElOVkFMSURfRk9STUFUIC0+IFwiSU5WQUxJRF9GT1JNQVRcIlxuICB8IElOVkFMSURfVklTVUFMIC0+IFwiSU5WQUxJRF9WSVNVQUxcIlxuICB8IEZJTEVfTk9UX0ZPVU5EIC0+IFwiRklMRV9OT1RfRk9VTkRcIlxuICB8IElOVkFMSURfREFTSCAtPiBcIklOVkFMSURfREFTSFwiXG4gIHwgSU5WQUxJRF9EU0NfQ09NTUVOVCAtPiBcIklOVkFMSURfRFNDX0NPTU1FTlRcIlxuICB8IElOVkFMSURfSU5ERVggLT4gXCJJTlZBTElEX0lOREVYXCJcbiAgfCBDTElQX05PVF9SRVBSRVNFTlRBQkxFIC0+IFwiQ0xJUF9OT1RfUkVQUkVTRU5UQUJMRVwiXG4gIHwgVEVNUF9GSUxFX0VSUk9SIC0+IFwiVEVNUF9GSUxFX0VSUk9SXCJcbiAgfCBJTlZBTElEX1NUUklERSAtPiBcIklOVkFMSURfU1RSSURFXCJcbiAgfCBGT05UX1RZUEVfTUlTTUFUQ0ggLT4gXCJGT05UX1RZUEVfTUlTTUFUQ0hcIlxuICB8IFVTRVJfRk9OVF9JTU1VVEFCTEUgLT4gXCJVU0VSX0ZPTlRfSU1NVVRBQkxFXCJcbiAgfCBVU0VSX0ZPTlRfRVJST1IgLT4gXCJVU0VSX0ZPTlRfRVJST1JcIlxuICB8IE5FR0FUSVZFX0NPVU5UIC0+IFwiTkVHQVRJVkVfQ09VTlRcIlxuICB8IElOVkFMSURfQ0xVU1RFUlMgLT4gXCJJTlZBTElEX0NMVVNURVJTXCJcbiAgfCBJTlZBTElEX1NMQU5UIC0+IFwiSU5WQUxJRF9TTEFOVFwiXG4gIHwgSU5WQUxJRF9XRUlHSFQgLT4gXCJJTlZBTElEX1dFSUdIVFwiXG4gIHwgSU5WQUxJRF9TSVpFIC0+IFwiSU5WQUxJRF9TSVpFXCJcbiAgfCBVU0VSX0ZPTlRfTk9UX0lNUExFTUVOVEVEIC0+IFwiVVNFUl9GT05UX05PVF9JTVBMRU1FTlRFRFwiXG4gIHwgREVWSUNFX1RZUEVfTUlTTUFUQ0ggLT4gXCJERVZJQ0VfVFlQRV9NSVNNQVRDSFwiXG4gIHwgREVWSUNFX0VSUk9SIC0+IFwiREVWSUNFX0VSUk9SXCJcbiAgfCBJTlZBTElEX01FU0hfQ09OU1RSVUNUSU9OIC0+IFwiSU5WQUxJRF9NRVNIX0NPTlNUUlVDVElPTlwiXG4gIHwgREVWSUNFX0ZJTklTSEVEIC0+IFwiREVWSUNFX0ZJTklTSEVEXCJcbiAgfCBKQklHMl9HTE9CQUxfTUlTU0lORyAtPiBcIkpCSUcyX0dMT0JBTF9NSVNTSU5HXCJcbiAgKCpCSVNFQ1QtSUdOT1JFLUVORCopXG5cbmV4Y2VwdGlvbiBVbmF2YWlsYWJsZVxuXG50eXBlIG1hdHJpeCA9IHtcbiAgbXV0YWJsZSB4eDogZmxvYXQ7XG4gIG11dGFibGUgeXg6IGZsb2F0O1xuICBtdXRhYmxlIHh5OiBmbG9hdDtcbiAgbXV0YWJsZSB5eTogZmxvYXQ7XG4gIG11dGFibGUgeDA6IGZsb2F0O1xuICBtdXRhYmxlIHkwOiBmbG9hdDtcbn1cblxubW9kdWxlIE1hdHJpeCA9IHN0cnVjdFxuICB0eXBlIHQgPSBtYXRyaXhcblxuICAoKlxuICAgIDIgYnkgMiBtYXRyaXggd2l0aCAoeDAsIHkwKSBvZmZzZXQgaXMgZXF1aXZhbGVudCB0byB0aGUgZm9sbG93aW5nIDMgYnkgMyBtYXRyaXg6XG4gICAgLyB4eCB4eSB4MCBcXCAgIC8geCBcXCAgIC8geHgqeCArIHh5KnkgKyB4MCBcXFxuICAgIHwgeXggeXkgeTAgfCAqIHwgeSB8ID0gfCB5eCp4ICsgeXkqeSArIHkwIHxcbiAgICBcXCAgMCAgMCAgMSAvICAgXFwgMSAvICAgXFwgICAgICAgICAgICAgICAgMSAvXG4gICopXG5cbiAgbGV0IGluaXRfaWRlbnRpdHkgKCkgPVxuICAgIHt4eD0xLjsgeHk9MC47IHl4PTAuOyB5eT0xLjsgeDA9MC47IHkwPTAufVxuXG4gIGxldCBpbml0X3RyYW5zbGF0ZSB4IHkgPVxuICAgIHt4eD0xLjsgeHk9MC47IHl4PTAuOyB5eT0xLjsgeDA9eDsgeTA9eX1cblxuICBsZXQgaW5pdF9zY2FsZSB4IHkgPVxuICAgIHt4eD14OyB4eT0wLjsgeXg9MC47IHl5PXk7IHgwPTAuOyB5MD0wLn1cblxuICBsZXQgaW5pdF9yb3RhdGUgYW5nbGUgPVxuICAgIHtcbiAgICAgIHh4ID0gY29zIGFuZ2xlO1xuICAgICAgeHkgPSAtLnNpbiBhbmdsZTtcbiAgICAgIHl4ID0gc2luIGFuZ2xlO1xuICAgICAgeXkgPSBjb3MgYW5nbGU7XG4gICAgICB4MCA9IDAuO1xuICAgICAgeTAgPSAwLjtcbiAgICB9XG5cbiAgbGV0IGluaXRfaW52ZXJzZSB7eHg7IHh5OyB5eDsgeXk7IHgwOyB5MH0gPVxuICAgIGxldCBkID0geHggKi4geXkgLS4geHkgKi4geXggaW5cbiAgICBpZiBkID0gMC4gdGhlbiByYWlzZSAoRXJyb3IgSU5WQUxJRF9NQVRSSVgpO1xuICAgIGxldCB4eCA9IHl5IC8uIGRcbiAgICBhbmQgeHkgPSAtLiB4eSAvLiBkXG4gICAgYW5kIHl4ID0gLS4geXggLy4gZFxuICAgIGFuZCB5eSA9IHh4IC8uIGRcbiAgICBhbmQgeDAgPSAoeHkgKi4geTAgLS4geXkgKi4geDApIC8uIGRcbiAgICBhbmQgeTAgPSAoeXggKi4geDAgLS4geHggKi4geTApIC8uIGQgaW5cbiAgICB7eHg7IHh5OyB5eDsgeXk7IHgwOyB5MH1cblxuICBsZXQgbXVsdGlwbHkge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9IHt4eD14eCc7IHh5PXh5JzsgeXg9eXgnOyB5eT15eSc7IHgwPXgwJzsgeTA9eTAnfSA9XG4gICAgbGV0IHh4ID0geHggKi4geHgnICsuIHh5ICouIHl4J1xuICAgIGFuZCB4eSA9IHh4ICouIHh5JyArLiB4eSAqLiB5eSdcbiAgICBhbmQgeXggPSB5eCAqLiB4eCcgKy4geXkgKi4geXgnXG4gICAgYW5kIHl5ID0geXggKi4geHknICsuIHl5ICouIHl5J1xuICAgIGFuZCB4MCA9IHh4ICouIHgwJyArLiB4eSAqLiB5MCcgKy4geDBcbiAgICBhbmQgeTAgPSB5eCAqLiB4MCcgKy4geXkgKi4geTAnICsuIHkwIGluXG4gICAge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9XG5cbiAgbGV0IHRyYW5zZm9ybV9wb2ludCB7eHg7IHh5OyB5eDsgeXk7IHgwOyB5MH0geCB5ID1cbiAgICAoeHggKi4geCArLiB4eSAqLiB5ICsuIHgwLCB5eCAqLiB4ICsuIHl5ICouIHkgKy4geTApXG5cbiAgbGV0IHRyYW5zZm9ybV9kaXN0YW5jZSB7eHg7IHh5OyB5eDsgeXk7IHgwPV87IHkwPV99IH5keCB+ZHkgPVxuICAgICh4eCAqLiBkeCArLiB4eSAqLiBkeSwgeXggKi4gZHggKy4geXkgKi4gZHkpXG5cbiAgbGV0IHNldCBtIHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfSA9XG4gICAgbS54eCA8LSB4eDtcbiAgICBtLnh5IDwtIHh5O1xuICAgIG0ueXggPC0geXg7XG4gICAgbS55eSA8LSB5eTtcbiAgICBtLngwIDwtIHgwO1xuICAgIG0ueTAgPC0geTBcblxuICBsZXQgc2NhbGUgbSB4IHkgPVxuICAgIHNldCBtIChtdWx0aXBseSBtIChpbml0X3NjYWxlIHggeSkpXG5cbiAgbGV0IHRyYW5zbGF0ZSBtIHggeSA9XG4gICAgc2V0IG0gKG11bHRpcGx5IG0gKGluaXRfdHJhbnNsYXRlIHggeSkpXG5cbiAgbGV0IHJvdGF0ZSBtIGFuZ2xlID1cbiAgICBzZXQgbSAobXVsdGlwbHkgbSAoaW5pdF9yb3RhdGUgYW5nbGUpKVxuXG4gIGxldCBpbnZlcnQgbSA9XG4gICAgc2V0IG0gKGluaXRfaW52ZXJzZSBtKVxuZW5kXG5cbnR5cGUgc2xhbnQgPVxuICB8IFVwcmlnaHRcbiAgfCBJdGFsaWNcbiAgfCBPYmxpcXVlXG5cbnR5cGUgd2VpZ2h0ID1cbiAgfCBOb3JtYWxcbiAgfCBCb2xkXG5cbnR5cGUgZm9udCA9IHtcbiAgc2xhbnQ6IHNsYW50O1xuICB3ZWlnaHQ6IHdlaWdodDtcbiAgc2l6ZTogZmxvYXQ7XG4gIGZhbWlseTogc3RyaW5nO1xufVxuXG5tb2R1bGUgUGF0dGVybiA9IHN0cnVjdFxuICAoKiBXZSBzdG9yZSB0dXBsZXMgKGluc3RlYWQgb2YgbW9yZSBleHBsaWNpdCByZWNvcmQgdHlwZXMpIGJlY2F1c2UgdGhlIHB1YmxpYyBpbnRlcmZhY2UgdXNlcyB0dXBsZXNcbiAgKGdldF9jb2xvcl9zdG9wX3JnYmEsIGdldF9yZ2JhLCBnZXRfbGluZWFyX3BvaW50cywgZ2V0X3JhZGlhbF9jaXJjbGVzKSAqKVxuXG4gIHR5cGUgc3RvcF9wb2ludCA9IGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKCogKHBvc2l0aW9uLCByLCBnLCBiLCBhKSAqKVxuXG4gIG1vZHVsZSBTdG9wUG9pbnRMaXN0OiBzaWdcbiAgICB0eXBlIHRcbiAgICB2YWwgZW1wdHk6IHRcbiAgICB2YWwgYWRkOiB0IC0+IHN0b3BfcG9pbnQgLT4gdFxuICAgIHZhbCBzaXplOiB0IC0+IGludFxuICAgIHZhbCBnZXQ6IHQgLT4gaTppbnQgLT4gc3RvcF9wb2ludFxuICAgIHZhbCB0b19saXN0OiB0IC0+IHN0b3BfcG9pbnQgbGlzdFxuICBlbmQgPSBzdHJ1Y3RcbiAgICBtb2R1bGUgRWxlbWVudCA9IHN0cnVjdFxuICAgICAgdHlwZSB0ID0ge1xuICAgICAgICBhZGRlZDogaW50O1xuICAgICAgICBzdG9wX3BvaW50OiBzdG9wX3BvaW50O1xuICAgICAgfVxuXG4gICAgICBsZXQgY29tcGFyZSB7c3RvcF9wb2ludD0ocG9zaXRpb25fYSwgXywgXywgXywgXyk7IGFkZGVkPWFkZGVkX2E7IF99IHtzdG9wX3BvaW50PShwb3NpdGlvbl9iLCBfLCBfLCBfLCBfKTsgYWRkZWQ9YWRkZWRfYjsgX30gPVxuICAgICAgICBtYXRjaCBjb21wYXJlIHBvc2l0aW9uX2EgcG9zaXRpb25fYiB3aXRoXG4gICAgICAgICAgfCAwIC0+IGNvbXBhcmUgYWRkZWRfYSBhZGRlZF9iXG4gICAgICAgICAgfCBuIC0+IG5cbiAgICBlbmRcblxuICAgIHR5cGUgdCA9IEVsZW1lbnQudCBsaXN0XG5cbiAgICBsZXQgZW1wdHkgPSBbXVxuXG4gICAgbGV0IHNpemUgPSBMaXN0Lmxlbmd0aFxuXG4gICAgbGV0IGFkZCB4cyBzdG9wX3BvaW50ID1cbiAgICAgIGxldCBlbGVtZW50ID0ge0VsZW1lbnQuc3RvcF9wb2ludDsgYWRkZWQ9TGlzdC5sZW5ndGggeHN9IGluXG4gICAgICBsZXQgcmVjIGF1eCA9IGZ1bmN0aW9uXG4gICAgICAgIHwgW10gLT4gW2VsZW1lbnRdXG4gICAgICAgIHwgeDo6eHMgYXMgeHhzIC0+IG1hdGNoIEVsZW1lbnQuY29tcGFyZSBlbGVtZW50IHggd2l0aFxuICAgICAgICAgIHwgLTEgLT4gZWxlbWVudDo6eHhzXG4gICAgICAgICAgfCBfIC0+IHg6OihhdXggeHMpXG4gICAgICBpbiBhdXggeHNcblxuICAgIGxldCB0b19saXN0IHhzID1cbiAgICAgIExpc3QubWFwIHhzIH5mOihmdW4ge0VsZW1lbnQuc3RvcF9wb2ludDsgX30gLT4gc3RvcF9wb2ludClcblxuICAgIGxldCBnZXQgeHMgfmkgPVxuICAgICAgbGV0IHtFbGVtZW50LnN0b3BfcG9pbnQ7IF99ID0gTGlzdC5udGggeHMgaSBpblxuICAgICAgc3RvcF9wb2ludFxuICBlbmRcblxuICAoKiBUaGlzIGlzIGp1c3QgdG8gY292ZXIgU3RvcFBvaW50TGlzdC50b19saXN0LCB3aGljaCBpcyB1c2VkIG9ubHkgaW4gSnNPZk9DYWlybywgd2hvc2UgdGVzdCBjb3ZlcmFnZSBpc24ndCBtZWFzdXJlZC4gKilcbiAgbGV0IF8gPSBTdG9wUG9pbnRMaXN0LihhZGQgZW1wdHkgKDAuLCAwLiwgMC4sIDAuLCAwLikgfD4gdG9fbGlzdClcblxuICAoKiBXaGVuIHdlIGRyb3Agc3VwcG9ydCBvZiBPQ2FtbCA0LjAyLCB3ZSBjYW4gdXNlIFtpbmxpbmUgcmVjb3Jkc10oaHR0cHM6Ly9jYW1sLmlucmlhLmZyL3B1Yi9kb2NzL21hbnVhbC1vY2FtbC00LjA2L2V4dG4uaHRtbCNzJTNBaW5saW5lLXJlY29yZHMpICopXG4gIHR5cGUgbGluZWFyX2dyYWRpZW50ID0ge1xuICAgIHBvaW50czogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXQ7ICgqICh4MCwgeTAsIHgxLCB5MSkgKilcbiAgICBzdG9wX3BvaW50czogU3RvcFBvaW50TGlzdC50O1xuICB9XG5cbiAgdHlwZSByYWRpYWxfZ3JhZGllbnQgPSB7XG4gICAgY2lyY2xlczogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0OyAoKiAoeDAsIHkwLCByMCwgeDEsIHkxLCByMSkgKilcbiAgICBzdG9wX3BvaW50czogU3RvcFBvaW50TGlzdC50O1xuICB9XG5cbiAgdHlwZSBzb3VyY2UgPVxuICAgIHwgUmdiYSBvZiAoZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXQpICgqIChyLCBnLCBiLCBhKSAqKVxuICAgIHwgTGluZWFyR3JhZGllbnQgb2YgbGluZWFyX2dyYWRpZW50XG4gICAgfCBSYWRpYWxHcmFkaWVudCBvZiByYWRpYWxfZ3JhZGllbnRcbiAgICB8IFR5cGVNaXNtYXRjaFxuXG4gIHR5cGUgJ2EgdCA9IHNvdXJjZSByZWYgY29uc3RyYWludCAnYSA9IFs8YFNvbGlkIHwgYFN1cmZhY2UgfCBgR3JhZGllbnQgfCBgTGluZWFyIHwgYFJhZGlhbF1cblxuICB0eXBlIGFueSA9IFtgU29saWQgfCBgU3VyZmFjZSB8IGBHcmFkaWVudCB8IGBMaW5lYXIgfCBgUmFkaWFsXSB0XG5cbiAgbGV0IGNyZWF0ZV9yZ2JhIHIgZyBiIGEgPVxuICAgIHJlZiAoUmdiYSAociwgZywgYiwgYSkpXG5cbiAgbGV0IGNyZWF0ZV9yZ2IgciBnIGIgPVxuICAgIGNyZWF0ZV9yZ2JhIHIgZyBiIDEuXG5cbiAgbGV0IGdldF9yZ2JhIHBhdHRlcm4gPVxuICAgIG1hdGNoICFwYXR0ZXJuIHdpdGhcbiAgICAgIHwgUmdiYSBjb2xvciAtPiBjb2xvclxuICAgICAgfCBMaW5lYXJHcmFkaWVudCBfXG4gICAgICB8IFJhZGlhbEdyYWRpZW50IF9cbiAgICAgIHwgVHlwZU1pc21hdGNoIC0+IHJhaXNlIChFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpXG5cbiAgbGV0IGNyZWF0ZV9saW5lYXIgfngwIH55MCB+eDEgfnkxID1cbiAgICByZWYgKExpbmVhckdyYWRpZW50IHtwb2ludHM9KHgwLCB5MCwgeDEsIHkxKTsgc3RvcF9wb2ludHM9U3RvcFBvaW50TGlzdC5lbXB0eX0pXG5cbiAgbGV0IGdldF9saW5lYXJfcG9pbnRzIHBhdHRlcm4gPVxuICAgIG1hdGNoICFwYXR0ZXJuIHdpdGhcbiAgICAgIHwgTGluZWFyR3JhZGllbnQge3BvaW50czsgX30gLT4gcG9pbnRzXG4gICAgICB8IFJnYmEgX1xuICAgICAgfCBSYWRpYWxHcmFkaWVudCBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuXG4gIGxldCBjcmVhdGVfcmFkaWFsIH54MCB+eTAgfnIwIH54MSB+eTEgfnIxID1cbiAgICByZWYgKFJhZGlhbEdyYWRpZW50IHtjaXJjbGVzPSh4MCwgeTAsIHIwLCB4MSwgeTEsIHIxKTsgc3RvcF9wb2ludHM9U3RvcFBvaW50TGlzdC5lbXB0eX0pXG5cbiAgbGV0IGdldF9yYWRpYWxfY2lyY2xlcyBwYXR0ZXJuID1cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IFJhZGlhbEdyYWRpZW50IHtjaXJjbGVzOyBffSAtPiBjaXJjbGVzXG4gICAgICB8IExpbmVhckdyYWRpZW50IF9cbiAgICAgIHwgUmdiYSBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuXG4gIGxldCBhZGRfY29sb3Jfc3RvcF9yZ2JhIHBhdHRlcm4gPyhvZnM9MC4pIHIgZyBiIGEgPVxuICAgIGxldCBzdG9wX3BvaW50ID0gKG9mcywgciwgZywgYiwgYSkgaW5cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IExpbmVhckdyYWRpZW50IGdyYWRpZW50IC0+XG4gICAgICAgIHBhdHRlcm4gOj0gTGluZWFyR3JhZGllbnQge2dyYWRpZW50IHdpdGggc3RvcF9wb2ludHM9KFN0b3BQb2ludExpc3QuYWRkIGdyYWRpZW50LnN0b3BfcG9pbnRzIHN0b3BfcG9pbnQpfVxuICAgICAgfCBSYWRpYWxHcmFkaWVudCBncmFkaWVudCAtPlxuICAgICAgICBwYXR0ZXJuIDo9IFJhZGlhbEdyYWRpZW50IHtncmFkaWVudCB3aXRoIHN0b3BfcG9pbnRzPShTdG9wUG9pbnRMaXN0LmFkZCBncmFkaWVudC5zdG9wX3BvaW50cyBzdG9wX3BvaW50KX1cbiAgICAgIHwgUmdiYSBfIC0+IHBhdHRlcm4gOj0gVHlwZU1pc21hdGNoXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiAoKVxuXG4gIGxldCBhZGRfY29sb3Jfc3RvcF9yZ2IgcGF0dGVybiA/b2ZzIHIgZyBiID1cbiAgICBhZGRfY29sb3Jfc3RvcF9yZ2JhIHBhdHRlcm4gP29mcyByIGcgYiAxLlxuXG4gIGxldCBnZXRfY29sb3Jfc3RvcF9jb3VudCBwYXR0ZXJuID1cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IExpbmVhckdyYWRpZW50IHtzdG9wX3BvaW50czsgX30gfCBSYWRpYWxHcmFkaWVudCB7c3RvcF9wb2ludHM7IF99IC0+IFN0b3BQb2ludExpc3Quc2l6ZSBzdG9wX3BvaW50c1xuICAgICAgfCBSZ2JhIF9cbiAgICAgIHwgVHlwZU1pc21hdGNoIC0+IHJhaXNlIChFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpXG5cbiAgbGV0IGdldF9jb2xvcl9zdG9wX3JnYmEgcGF0dGVybiB+aWR4ID1cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IExpbmVhckdyYWRpZW50IHtzdG9wX3BvaW50czsgX30gfCBSYWRpYWxHcmFkaWVudCB7c3RvcF9wb2ludHM7IF99IC0+IFN0b3BQb2ludExpc3QuZ2V0IHN0b3BfcG9pbnRzIH5pOmlkeFxuICAgICAgfCBSZ2JhIF9cbiAgICAgIHwgVHlwZU1pc21hdGNoIC0+IHJhaXNlIChFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpXG5lbmRcblxudHlwZSBmaWxsX3J1bGUgPVxuICB8IFdJTkRJTkdcbiAgfCBFVkVOX09ERFxuXG50eXBlIGxpbmVfY2FwID1cbiAgfCBCVVRUXG4gIHwgUk9VTkRcbiAgfCBTUVVBUkVcblxudHlwZSBsaW5lX2pvaW4gPVxuICB8IEpPSU5fTUlURVJcbiAgfCBKT0lOX1JPVU5EXG4gIHwgSk9JTl9CRVZFTFxuXG50eXBlIGZvbnRfZXh0ZW50cyA9IHtcbiAgYXNjZW50OiBmbG9hdDtcbiAgZGVzY2VudDogZmxvYXQ7XG4gIGJhc2VsaW5lOiBmbG9hdDtcbiAgbWF4X3hfYWR2YW5jZTogZmxvYXQ7XG4gIG1heF95X2FkdmFuY2U6IGZsb2F0O1xufVxuXG50eXBlIHRleHRfZXh0ZW50cyA9IHtcbiAgeF9iZWFyaW5nOiBmbG9hdDtcbiAgeV9iZWFyaW5nOiBmbG9hdDtcbiAgd2lkdGg6IGZsb2F0O1xuICBoZWlnaHQ6IGZsb2F0O1xuICB4X2FkdmFuY2U6IGZsb2F0O1xuICB5X2FkdmFuY2U6IGZsb2F0O1xufVxuXG50eXBlIG9wZXJhdG9yID1cbiAgfCBDTEVBUlxuICB8IFNPVVJDRVxuICB8IE9WRVJcbiAgfCBJTlxuICB8IE9VVFxuICB8IEFUT1BcbiAgfCBERVNUXG4gIHwgREVTVF9PVkVSXG4gIHwgREVTVF9JTlxuICB8IERFU1RfT1VUXG4gIHwgREVTVF9BVE9QXG4gIHwgWE9SXG4gIHwgQUREXG4gIHwgU0FUVVJBVEVcblxubW9kdWxlIFBvaW50czogc2lnXG4gIHR5cGUgdFxuXG4gIHZhbCBjcmVhdGU6IHVuaXQgLT4gdFxuXG4gIHZhbCBzZXRfc3RhcnQ6IHQgLT4gdHJhbnNmb3JtYXRpb246TWF0cml4LnQgLT4geDpmbG9hdCAtPiB5OmZsb2F0IC0+IHVuaXRcbiAgdmFsIHNldF9zdGFydF9pZl9ub25lOiB0IC0+IHRyYW5zZm9ybWF0aW9uOk1hdHJpeC50IC0+IHg6ZmxvYXQgLT4geTpmbG9hdCAtPiB1bml0XG4gIHZhbCByZXNldF9zdGFydDogdCAtPiB1bml0XG5cbiAgdmFsIHNldF9jdXJyZW50OiB0IC0+IHRyYW5zZm9ybWF0aW9uOk1hdHJpeC50IC0+IHg6ZmxvYXQgLT4geTpmbG9hdCAtPiB1bml0XG4gIHZhbCBzZXRfY3VycmVudF9mcm9tX3N0YXJ0OiB0IC0+IHVuaXRcbiAgdmFsIHJlc2V0X2N1cnJlbnQ6IHQgLT4gdW5pdFxuICB2YWwgY3VycmVudDogdCAtPiB0cmFuc2Zvcm1hdGlvbjpNYXRyaXgudCAtPiAoZmxvYXQgKiBmbG9hdCkgb3B0aW9uXG5lbmQgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0ge1xuICAgIG11dGFibGUgc3RhcnQ6IChmbG9hdCAqIGZsb2F0KSBvcHRpb247XG4gICAgbXV0YWJsZSBjdXJyZW50OiAoZmxvYXQgKiBmbG9hdCkgb3B0aW9uO1xuICB9XG5cbiAgbGV0IGNyZWF0ZSAoKSA9IHtcbiAgICBzdGFydCA9IE5vbmU7XG4gICAgY3VycmVudCA9IE5vbmU7XG4gIH1cblxuICBsZXQgc2V0X3N0YXJ0IHBvaW50cyB+dHJhbnNmb3JtYXRpb24gfnggfnkgPVxuICAgIHBvaW50cy5zdGFydCA8LSBTb21lIChNYXRyaXgudHJhbnNmb3JtX3BvaW50IHRyYW5zZm9ybWF0aW9uIHggeSlcblxuICBsZXQgc2V0X3N0YXJ0X2lmX25vbmUgcG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB+eCB+eSA9XG4gICAgaWYgcG9pbnRzLnN0YXJ0ID0gTm9uZSB0aGVuXG4gICAgcG9pbnRzLnN0YXJ0IDwtIFNvbWUgKE1hdHJpeC50cmFuc2Zvcm1fcG9pbnQgdHJhbnNmb3JtYXRpb24geCB5KVxuXG4gIGxldCByZXNldF9zdGFydCBwb2ludHMgPVxuICAgIHBvaW50cy5zdGFydCA8LSBOb25lXG5cbiAgbGV0IHNldF9jdXJyZW50IHBvaW50cyB+dHJhbnNmb3JtYXRpb24gfnggfnkgPVxuICAgIHBvaW50cy5jdXJyZW50IDwtIFNvbWUgKE1hdHJpeC50cmFuc2Zvcm1fcG9pbnQgdHJhbnNmb3JtYXRpb24geCB5KVxuXG4gIGxldCBzZXRfY3VycmVudF9mcm9tX3N0YXJ0IHBvaW50cyA9XG4gICAgcG9pbnRzLmN1cnJlbnQgPC0gcG9pbnRzLnN0YXJ0XG5cbiAgbGV0IHJlc2V0X2N1cnJlbnQgcG9pbnRzID1cbiAgICBwb2ludHMuY3VycmVudCA8LSBOb25lXG5cbiAgbGV0IGN1cnJlbnQgcG9pbnRzIH50cmFuc2Zvcm1hdGlvbiA9XG4gICAgbWF0Y2ggcG9pbnRzLmN1cnJlbnQgd2l0aFxuICAgICAgfCBOb25lIC0+IE5vbmVcbiAgICAgIHwgU29tZSAoeCwgeSkgLT4gU29tZSAoTWF0cml4LnRyYW5zZm9ybV9wb2ludCAoTWF0cml4LmluaXRfaW52ZXJzZSB0cmFuc2Zvcm1hdGlvbikgeCB5KVxuZW5kXG5cbiMgMTggXCJzcmMvSnNPZk9DYWlyby5jcHBvLm1sXCJcbmxldCAoKSA9IFByaW50ZXhjLnJlZ2lzdGVyX3ByaW50ZXIgKGZ1bmN0aW9uXG4gIHwgRXJyb3Igc3RhdHVzIC0+IFNvbWUgKFByaW50Zi5zcHJpbnRmIFwiSnNPZk9DYWlyby5FcnJvciglcylcIiAoc3RhdHVzX3JlcHIgc3RhdHVzKSlcbiAgfCBfIC0+IE5vbmVcbilcblxubW9kdWxlIEh0bWwgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gRG9tX2h0bWwuY2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIEpzLnRcbmVuZFxuXG5tb2R1bGUgTG9jYWw6IHNpZ1xuICB0eXBlIHRcblxuICB2YWwgY3JlYXRlOiB1bml0IC0+IHRcblxuICB2YWwgc2F2ZTogdCAtPiB1bml0XG4gIHZhbCByZXN0b3JlOiB0IC0+IHVuaXRcblxuICB2YWwgdHJhbnNmb3JtYXRpb246IHQgLT4gTWF0cml4LnRcbiAgdmFsIHNldF90cmFuc2Zvcm1hdGlvbjogdCAtPiB0cmFuc2Zvcm1hdGlvbjpNYXRyaXgudCAtPiB1bml0XG5cbiAgdmFsIGZvbnQ6IHQgLT4gZm9udFxuICB2YWwgc2V0X2ZvbnQ6IHQgLT4gZm9udDpmb250IC0+IHVuaXRcblxuICB2YWwgc291cmNlOiB0IC0+IFBhdHRlcm4uc291cmNlXG4gIHZhbCBzZXRfc291cmNlOiB0IC0+IHNvdXJjZTpQYXR0ZXJuLnNvdXJjZSAtPiB1bml0XG5cbiAgdmFsIGZpbGxfcnVsZTogdCAtPiBmaWxsX3J1bGVcbiAgdmFsIHNldF9maWxsX3J1bGU6IHQgLT4gZmlsbF9ydWxlOmZpbGxfcnVsZSAtPiB1bml0XG5cbiAgdmFsIHNldF9zdGFydF9wb2ludDogdCAtPiBmbG9hdCAqIGZsb2F0IC0+IHVuaXRcbiAgdmFsIHNldF9zdGFydF9wb2ludF9pZl9ub25lOiB0IC0+IGZsb2F0ICogZmxvYXQgLT4gdW5pdFxuICB2YWwgcmVzZXRfc3RhcnRfcG9pbnQ6IHQgLT4gdW5pdFxuICB2YWwgc2V0X3N0YXJ0X3BvaW50X2FzX2N1cnJlbnRfcG9pbnQ6IHQgLT4gdW5pdFxuXG4gIHZhbCBjdXJyZW50X3BvaW50OiB0IC0+IChmbG9hdCAqIGZsb2F0KSBvcHRpb25cbiAgdmFsIHNldF9jdXJyZW50X3BvaW50OiB0IC0+IGZsb2F0ICogZmxvYXQgLT4gdW5pdFxuICB2YWwgcmVzZXRfY3VycmVudF9wb2ludDogdCAtPiB1bml0XG5lbmQgPSBzdHJ1Y3RcbiAgbW9kdWxlIFN0YXRlID0gc3RydWN0XG4gICAgdHlwZSB0ID0ge1xuICAgICAgdHJhbnNmb3JtYXRpb246IE1hdHJpeC50O1xuICAgICAgZm9udDogZm9udDtcbiAgICAgIHNvdXJjZTogUGF0dGVybi5zb3VyY2U7XG4gICAgICBmaWxsX3J1bGU6IGZpbGxfcnVsZTtcbiAgICB9XG4gIGVuZFxuXG4gIHR5cGUgdCA9IHtcbiAgICBwb2ludHM6IFBvaW50cy50O1xuICAgIG11dGFibGUgc3RhdGVzOiBTdGF0ZS50IGxpc3Q7XG4gIH1cblxuICBsZXQgY3JlYXRlICgpID0ge1xuICAgIHBvaW50cyA9IFBvaW50cy5jcmVhdGUgKCk7XG4gICAgc3RhdGVzID0gW1xuICAgICAge1xuICAgICAgICB0cmFuc2Zvcm1hdGlvbiA9IE1hdHJpeC5pbml0X2lkZW50aXR5ICgpO1xuICAgICAgICBmb250ID0ge1xuICAgICAgICAgIHNsYW50ID0gVXByaWdodDtcbiAgICAgICAgICB3ZWlnaHQgPSBOb3JtYWw7XG4gICAgICAgICAgc2l6ZSA9IDEwLjtcbiAgICAgICAgICBmYW1pbHkgPSBcInNhbnMtc2VyaWZcIjtcbiAgICAgICAgfTtcbiAgICAgICAgc291cmNlID0gIShQYXR0ZXJuLmNyZWF0ZV9yZ2IgMC4gMC4gMC4pO1xuICAgICAgICBmaWxsX3J1bGUgPSBXSU5ESU5HO1xuICAgICAgfTtcbiAgICBdO1xuICB9XG5cbiAgbGV0IHN0YXRlIGNvbnRleHQgPVxuICAgIExpc3QuaGQgY29udGV4dC5zdGF0ZXNcblxuICBsZXQgc2V0X3N0YXRlIGNvbnRleHQgc3RhdGUgPVxuICAgIGNvbnRleHQuc3RhdGVzIDwtIHN0YXRlOjooTGlzdC50bCBjb250ZXh0LnN0YXRlcylcblxuICBsZXQgc2F2ZSBjb250ZXh0ID1cbiAgICBjb250ZXh0LnN0YXRlcyA8LSAoc3RhdGUgY29udGV4dCk6OmNvbnRleHQuc3RhdGVzXG5cbiAgbGV0IHJlc3RvcmUgY29udGV4dCA9XG4gICAgbGV0IHN0YXRlcyA9XG4gICAgICBtYXRjaCBjb250ZXh0LnN0YXRlcyB3aXRoXG4gICAgICAgIHwgW10gfCBbX10gLT4gcmFpc2UgKEVycm9yIElOVkFMSURfUkVTVE9SRSlcbiAgICAgICAgfCBfOjpzdGF0ZXMgLT4gc3RhdGVzXG4gICAgaW5cbiAgICBjb250ZXh0LnN0YXRlcyA8LSBzdGF0ZXNcblxuICBsZXQgdHJhbnNmb3JtYXRpb24gY29udGV4dCA9XG4gICAgKHN0YXRlIGNvbnRleHQpLnRyYW5zZm9ybWF0aW9uXG5cbiAgbGV0IHNldF90cmFuc2Zvcm1hdGlvbiBjb250ZXh0IH50cmFuc2Zvcm1hdGlvbiA9XG4gICAgc2V0X3N0YXRlIGNvbnRleHQgKHsoc3RhdGUgY29udGV4dCkgd2l0aCB0cmFuc2Zvcm1hdGlvbn0pXG5cbiAgbGV0IGZvbnQgY29udGV4dCA9XG4gICAgKHN0YXRlIGNvbnRleHQpLmZvbnRcblxuICBsZXQgc2V0X2ZvbnQgY29udGV4dCB+Zm9udCA9XG4gICAgc2V0X3N0YXRlIGNvbnRleHQgKHsoc3RhdGUgY29udGV4dCkgd2l0aCBmb250fSlcblxuICBsZXQgc291cmNlIGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5zb3VyY2VcblxuICBsZXQgc2V0X3NvdXJjZSBjb250ZXh0IH5zb3VyY2UgPVxuICAgIHNldF9zdGF0ZSBjb250ZXh0ICh7KHN0YXRlIGNvbnRleHQpIHdpdGggc291cmNlfSlcblxuICBsZXQgZmlsbF9ydWxlIGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5maWxsX3J1bGVcblxuICBsZXQgc2V0X2ZpbGxfcnVsZSBjb250ZXh0IH5maWxsX3J1bGUgPVxuICAgIHNldF9zdGF0ZSBjb250ZXh0ICh7KHN0YXRlIGNvbnRleHQpIHdpdGggZmlsbF9ydWxlfSlcblxuICBsZXQgc2V0X3N0YXJ0X3BvaW50IGNvbnRleHQgKHgsIHkpID1cbiAgICBsZXQgdHJhbnNmb3JtYXRpb24gPSB0cmFuc2Zvcm1hdGlvbiBjb250ZXh0IGluXG4gICAgUG9pbnRzLnNldF9zdGFydCBjb250ZXh0LnBvaW50cyB+dHJhbnNmb3JtYXRpb24gfnggfnlcblxuICBsZXQgcmVzZXRfc3RhcnRfcG9pbnQgY29udGV4dCA9XG4gICAgUG9pbnRzLnJlc2V0X3N0YXJ0IGNvbnRleHQucG9pbnRzXG5cbiAgbGV0IHNldF9zdGFydF9wb2ludF9pZl9ub25lIGNvbnRleHQgKHgsIHkpID1cbiAgICBsZXQgdHJhbnNmb3JtYXRpb24gPSB0cmFuc2Zvcm1hdGlvbiBjb250ZXh0IGluXG4gICAgUG9pbnRzLnNldF9zdGFydF9pZl9ub25lIGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB+eCB+eVxuXG4gIGxldCBzZXRfc3RhcnRfcG9pbnRfYXNfY3VycmVudF9wb2ludCBjb250ZXh0ID1cbiAgICBQb2ludHMuc2V0X2N1cnJlbnRfZnJvbV9zdGFydCBjb250ZXh0LnBvaW50c1xuXG4gIGxldCBjdXJyZW50X3BvaW50IGNvbnRleHQgPVxuICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IHRyYW5zZm9ybWF0aW9uIGNvbnRleHQgaW5cbiAgICBQb2ludHMuY3VycmVudCBjb250ZXh0LnBvaW50cyB+dHJhbnNmb3JtYXRpb25cblxuICBsZXQgc2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dCAoeCwgeSkgPVxuICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IHRyYW5zZm9ybWF0aW9uIGNvbnRleHQgaW5cbiAgICBQb2ludHMuc2V0X2N1cnJlbnQgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55XG5cbiAgbGV0IHJlc2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dCA9XG4gICAgUG9pbnRzLnJlc2V0X2N1cnJlbnQgY29udGV4dC5wb2ludHNcbmVuZFxuXG50eXBlIGNvbnRleHQgPSB7XG4gIGh0bWw6IEh0bWwudDtcbiAgbG9jYWw6IExvY2FsLnQ7XG59XG5cblxubGV0IHNhdmUgY29udGV4dCA9XG4gIGNvbnRleHQuaHRtbCMjc2F2ZTtcbiAgTG9jYWwuc2F2ZSBjb250ZXh0LmxvY2FsXG5cbmxldCByZXN0b3JlIGNvbnRleHQgPVxuICBjb250ZXh0Lmh0bWwjI3Jlc3RvcmU7XG4gIExvY2FsLnJlc3RvcmUgY29udGV4dC5sb2NhbFxuXG5cbmxldCBzZXRfbWF0cml4IGNvbnRleHQgKHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfSBhcyB0cmFuc2Zvcm1hdGlvbikgPVxuICBjb250ZXh0Lmh0bWwjI3NldFRyYW5zZm9ybSB4eCB5eCB4eSB5eSB4MCB5MDtcbiAgTG9jYWwuc2V0X3RyYW5zZm9ybWF0aW9uIGNvbnRleHQubG9jYWwgfnRyYW5zZm9ybWF0aW9uXG5cbmxldCBnZXRfbWF0cml4IGNvbnRleHQgPVxuICBMb2NhbC50cmFuc2Zvcm1hdGlvbiBjb250ZXh0LmxvY2FsXG5cbmxldCB0cmFuc2Zvcm0gY29udGV4dCBtID1cbiAgc2V0X21hdHJpeCBjb250ZXh0IChNYXRyaXgubXVsdGlwbHkgKExvY2FsLnRyYW5zZm9ybWF0aW9uIGNvbnRleHQubG9jYWwpIG0pXG5cbmxldCBzY2FsZSBjb250ZXh0IHggeSA9XG4gIHRyYW5zZm9ybSBjb250ZXh0IChNYXRyaXguaW5pdF9zY2FsZSB4IHkpXG5cbmxldCB0cmFuc2xhdGUgY29udGV4dCB4IHkgPVxuICB0cmFuc2Zvcm0gY29udGV4dCAoTWF0cml4LmluaXRfdHJhbnNsYXRlIHggeSlcblxubGV0IHJvdGF0ZSBjb250ZXh0IGFuZ2xlID1cbiAgdHJhbnNmb3JtIGNvbnRleHQgKE1hdHJpeC5pbml0X3JvdGF0ZSBhbmdsZSlcblxubGV0IGlkZW50aXR5X21hdHJpeCBjb250ZXh0ID1cbiAgc2V0X21hdHJpeCBjb250ZXh0IChNYXRyaXguaW5pdF9pZGVudGl0eSAoKSlcblxubGV0IGRldmljZV90b191c2VyIGNvbnRleHQgeCB5ID1cbiAgTWF0cml4LnRyYW5zZm9ybV9wb2ludCAoTWF0cml4LmluaXRfaW52ZXJzZSAoTG9jYWwudHJhbnNmb3JtYXRpb24gY29udGV4dC5sb2NhbCkpIHggeVxuXG5sZXQgZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgY29udGV4dCBkeCBkeSA9XG4gIE1hdHJpeC50cmFuc2Zvcm1fZGlzdGFuY2UgKE1hdHJpeC5pbml0X2ludmVyc2UgKExvY2FsLnRyYW5zZm9ybWF0aW9uIGNvbnRleHQubG9jYWwpKSB+ZHggfmR5XG5cbmxldCB1c2VyX3RvX2RldmljZSBjb250ZXh0IHggeSA9XG4gIE1hdHJpeC50cmFuc2Zvcm1fcG9pbnQgKExvY2FsLnRyYW5zZm9ybWF0aW9uIGNvbnRleHQubG9jYWwpIHggeVxuXG5sZXQgdXNlcl90b19kZXZpY2VfZGlzdGFuY2UgY29udGV4dCBkeCBkeSA9XG4gIE1hdHJpeC50cmFuc2Zvcm1fZGlzdGFuY2UgKExvY2FsLnRyYW5zZm9ybWF0aW9uIGNvbnRleHQubG9jYWwpIH5keCB+ZHlcblxuXG5sZXQgbWFrZV9yZWwgY29udGV4dCB+eDpkeCB+eTpkeSA9XG4gIG1hdGNoIExvY2FsLmN1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbCB3aXRoXG4gICAgfCBOb25lIC0+IHJhaXNlIChFcnJvciBOT19DVVJSRU5UX1BPSU5UKVxuICAgIHwgU29tZSAoeCwgeSkgLT4gKHggKy4gZHgsIHkgKy4gZHkpXG5cbmxldCBtb3ZlX3RvIGNvbnRleHQgeCB5ID1cbiAgY29udGV4dC5odG1sIyNtb3ZlVG8geCB5O1xuICBMb2NhbC5zZXRfc3RhcnRfcG9pbnQgY29udGV4dC5sb2NhbCAoeCwgeSk7XG4gIExvY2FsLnNldF9zdGFydF9wb2ludF9hc19jdXJyZW50X3BvaW50IGNvbnRleHQubG9jYWxcblxubGV0IHJlbF9tb3ZlX3RvIGNvbnRleHQgeCB5ID1cbiAgbGV0ICh4LCB5KSA9IG1ha2VfcmVsIGNvbnRleHQgfnggfnkgaW5cbiAgbW92ZV90byBjb250ZXh0IHggeVxuXG5sZXQgbGluZV90byBjb250ZXh0IHggeSA9XG4gIGNvbnRleHQuaHRtbCMjbGluZVRvIHggeTtcbiAgTG9jYWwuc2V0X3N0YXJ0X3BvaW50X2lmX25vbmUgY29udGV4dC5sb2NhbCAoeCwgeSk7XG4gIExvY2FsLnNldF9jdXJyZW50X3BvaW50IGNvbnRleHQubG9jYWwgKHgsIHkpXG5cbmxldCByZWxfbGluZV90byBjb250ZXh0IHggeSA9XG4gIGxldCAoeCwgeSkgPSBtYWtlX3JlbCBjb250ZXh0IH54IH55IGluXG4gIGxpbmVfdG8gY29udGV4dCB4IHlcblxubGV0IGN1cnZlX3RvIGNvbnRleHQgeDEgeTEgeDIgeTIgeDMgeTMgPVxuICBjb250ZXh0Lmh0bWwjI2JlemllckN1cnZlVG8geDEgeTEgeDIgeTIgeDMgeTM7XG4gIExvY2FsLnNldF9zdGFydF9wb2ludF9pZl9ub25lIGNvbnRleHQubG9jYWwgKHgxLCB5MSk7XG4gIExvY2FsLnNldF9jdXJyZW50X3BvaW50IGNvbnRleHQubG9jYWwgKHgzLCB5MylcblxubGV0IHJlbF9jdXJ2ZV90byBjb250ZXh0IHgxIHkxIHgyIHkyIHgzIHkzID1cbiAgbGV0ICh4MSwgeTEpID0gbWFrZV9yZWwgY29udGV4dCB+eDp4MSB+eTp5MVxuICBhbmQgKHgyLCB5MikgPSBtYWtlX3JlbCBjb250ZXh0IH54OngyIH55OnkyXG4gIGFuZCAoeDMsIHkzKSA9IG1ha2VfcmVsIGNvbnRleHQgfng6eDMgfnk6eTMgaW5cbiAgY3VydmVfdG8gY29udGV4dCB4MSB5MSB4MiB5MiB4MyB5M1xuXG5sZXQgcmVjdGFuZ2xlIGNvbnRleHQgeCB5IH53IH5oID1cbiAgTG9jYWwuc2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbCAoeCwgeSk7XG4gIGNvbnRleHQuaHRtbCMjcmVjdCB4IHkgdyBoXG5cbmxldCBhcmNfIH5kaXIgY29udGV4dCB4IHkgfnIgfmExIH5hMiA9XG4gIGNvbnRleHQuaHRtbCMjYXJjIHggeSByIGExIGEyIGRpcjtcbiAgTG9jYWwuc2V0X3N0YXJ0X3BvaW50X2lmX25vbmUgY29udGV4dC5sb2NhbCAoeCArLiByICouIChjb3MgYTEpLCB5ICsuIHIgKi4gKHNpbiBhMSkpO1xuICBMb2NhbC5zZXRfY3VycmVudF9wb2ludCBjb250ZXh0LmxvY2FsICh4ICsuIHIgKi4gKGNvcyBhMiksIHkgKy4gciAqLiAoc2luIGEyKSlcblxubGV0IGFyYyA9IGFyY18gfmRpcjpKcy5fZmFsc2VcblxubGV0IGFyY19uZWdhdGl2ZSA9IGFyY18gfmRpcjpKcy5fdHJ1ZVxuXG5tb2R1bGUgUGF0aCA9IHN0cnVjdFxuICBsZXQgZ2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dCA9XG4gICAgbWF0Y2ggTG9jYWwuY3VycmVudF9wb2ludCBjb250ZXh0LmxvY2FsIHdpdGhcbiAgICAgIHwgTm9uZSAtPiAoMC4sIDAuKVxuICAgICAgfCBTb21lICh4LCB5KSAtPiAoeCwgeSlcblxuICBsZXQgY2xlYXIgY29udGV4dCA9XG4gICAgY29udGV4dC5odG1sIyNiZWdpblBhdGg7XG4gICAgTG9jYWwucmVzZXRfc3RhcnRfcG9pbnQgY29udGV4dC5sb2NhbDtcbiAgICBMb2NhbC5yZXNldF9jdXJyZW50X3BvaW50IGNvbnRleHQubG9jYWxcblxuICBsZXQgY2xvc2UgY29udGV4dCA9XG4gICAgY29udGV4dC5odG1sIyNjbG9zZVBhdGg7XG4gICAgTG9jYWwuc2V0X3N0YXJ0X3BvaW50X2FzX2N1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbFxuZW5kXG5cbmxldCBzdHJva2VfcHJlc2VydmUgY29udGV4dCA9XG4gIGNvbnRleHQuaHRtbCMjc3Ryb2tlXG5cbmxldCBzdHJva2UgY29udGV4dCA9XG4gIHN0cm9rZV9wcmVzZXJ2ZSBjb250ZXh0O1xuICBQYXRoLmNsZWFyIGNvbnRleHRcblxubGV0IGZpbGxfcHJlc2VydmUgY29udGV4dCA9XG4gIG1hdGNoIExvY2FsLmZpbGxfcnVsZSBjb250ZXh0LmxvY2FsIHdpdGhcbiAgICB8IFdJTkRJTkcgLT4gY29udGV4dC5odG1sIyNmaWxsXG4gICAgfCBFVkVOX09ERCAtPiAoSnMuVW5zYWZlLmNvZXJjZSBjb250ZXh0Lmh0bWwpIyNmaWxsIChKcy5zdHJpbmcgXCJldmVub2RkXCIpXG5cbmxldCBmaWxsIGNvbnRleHQgPVxuICBmaWxsX3ByZXNlcnZlIGNvbnRleHQ7XG4gIFBhdGguY2xlYXIgY29udGV4dFxuXG5sZXQgY2xpcF9wcmVzZXJ2ZSBjb250ZXh0ID1cbiAgY29udGV4dC5odG1sIyNjbGlwXG5cbmxldCBjbGlwIGNvbnRleHQgPVxuICBjbGlwX3ByZXNlcnZlIGNvbnRleHQ7XG4gIFBhdGguY2xlYXIgY29udGV4dFxuXG5sZXQgcGFpbnQgPyhhbHBoYT0xLikgY29udGV4dCA9XG4gIHNhdmUgY29udGV4dDtcbiAgY29udGV4dC5odG1sIyMuZ2xvYmFsQWxwaGEgOj0gYWxwaGE7XG4gIGlkZW50aXR5X21hdHJpeCBjb250ZXh0O1xuICBsZXQgd2lkdGggPSAoZmxvYXRfb2ZfaW50IGNvbnRleHQuaHRtbCMjLmNhbnZhcyMjLndpZHRoKVxuICBhbmQgaGVpZ2h0ID0gKGZsb2F0X29mX2ludCBjb250ZXh0Lmh0bWwjIy5jYW52YXMjIy5oZWlnaHQpIGluXG4gIGNvbnRleHQuaHRtbCMjZmlsbFJlY3QgMC4gMC4gd2lkdGggaGVpZ2h0O1xuICByZXN0b3JlIGNvbnRleHRcblxuXG5sZXQgc2V0X2xpbmVfd2lkdGggY29udGV4dCB3aWR0aCA9XG4gIGNvbnRleHQuaHRtbCMjLmxpbmVXaWR0aCA6PSB3aWR0aFxuXG5sZXQgZ2V0X2xpbmVfd2lkdGggY29udGV4dCA9XG4gIGNvbnRleHQuaHRtbCMjLmxpbmVXaWR0aFxuXG5sZXQgc2V0X2Rhc2ggY29udGV4dCA/KG9mcz0wLikgZGFzaGVzID1cbiAgbGV0IGh0bWwgPSBKcy5VbnNhZmUuY29lcmNlIGNvbnRleHQuaHRtbCBpblxuICBodG1sIyMubGluZURhc2hPZmZzZXQgOj0gb2ZzO1xuICBodG1sIyNzZXRMaW5lRGFzaCAoSnMuYXJyYXkgZGFzaGVzKVxuXG5sZXQgZ2V0X2Rhc2ggY29udGV4dCA9XG4gIGxldCBodG1sID0gSnMuVW5zYWZlLmNvZXJjZSBjb250ZXh0Lmh0bWwgaW5cbiAgKEpzLnRvX2FycmF5IChodG1sIyNnZXRMaW5lRGFzaCksIGh0bWwjIy5saW5lRGFzaE9mZnNldClcblxubGV0IHNldF9maWxsX3J1bGUgY29udGV4dCBmaWxsX3J1bGUgPVxuICBMb2NhbC5zZXRfZmlsbF9ydWxlIGNvbnRleHQubG9jYWwgfmZpbGxfcnVsZVxuXG5sZXQgZ2V0X2ZpbGxfcnVsZSBjb250ZXh0ID1cbiAgTG9jYWwuZmlsbF9ydWxlIGNvbnRleHQubG9jYWxcblxubGV0IHNldF9saW5lX2NhcCBjb250ZXh0IGNhcCA9XG4gIGxldCBjYXAgPSBtYXRjaCBjYXAgd2l0aFxuICAgIHwgQlVUVCAtPiBcImJ1dHRcIlxuICAgIHwgUk9VTkQgLT4gXCJyb3VuZFwiXG4gICAgfCBTUVVBUkUgLT4gXCJzcXVhcmVcIlxuICBpblxuICBjb250ZXh0Lmh0bWwjIy5saW5lQ2FwIDo9IEpzLnN0cmluZyBjYXBcblxubGV0IGdldF9saW5lX2NhcCBjb250ZXh0ID1cbiAgbWF0Y2ggSnMudG9fc3RyaW5nIGNvbnRleHQuaHRtbCMjLmxpbmVDYXAgd2l0aFxuICAgIHwgXCJyb3VuZFwiIC0+IFJPVU5EXG4gICAgfCBcInNxdWFyZVwiIC0+IFNRVUFSRVxuICAgIHwgXyAtPiBCVVRUXG5cbmxldCBzZXRfbGluZV9qb2luIGNvbnRleHQgam9pbiA9XG4gIGxldCBqb2luID0gbWF0Y2ggam9pbiB3aXRoXG4gICAgfCBKT0lOX01JVEVSIC0+ICBcIm1pdGVyXCJcbiAgICB8IEpPSU5fUk9VTkQgLT4gXCJyb3VuZFwiXG4gICAgfCBKT0lOX0JFVkVMIC0+IFwiYmV2ZWxcIlxuICBpblxuICBjb250ZXh0Lmh0bWwjIy5saW5lSm9pbiA6PSBKcy5zdHJpbmcgam9pblxuXG5sZXQgZ2V0X2xpbmVfam9pbiBjb250ZXh0ID1cbiAgbWF0Y2ggSnMudG9fc3RyaW5nIGNvbnRleHQuaHRtbCMjLmxpbmVKb2luIHdpdGhcbiAgICB8IFwicm91bmRcIiAtPiBKT0lOX1JPVU5EXG4gICAgfCBcImJldmVsXCIgLT4gSk9JTl9CRVZFTFxuICAgIHwgXyAtPiBKT0lOX01JVEVSXG5cbmxldCBzZXRfbWl0ZXJfbGltaXQgY29udGV4dCBsID1cbiAgY29udGV4dC5odG1sIyMubWl0ZXJMaW1pdCA6PSBsXG5cbmxldCBnZXRfbWl0ZXJfbGltaXQgY29udGV4dCA9XG4gIGNvbnRleHQuaHRtbCMjLm1pdGVyTGltaXRcblxubGV0IHNldF9vcGVyYXRvciBjb250ZXh0IG9wZXJhdG9yID1cbiAgbGV0IG9wZXJhdG9yID0gbWF0Y2ggb3BlcmF0b3Igd2l0aFxuICAgIHwgQ0xFQVIgLT4gZmFpbHdpdGggXCJVbnN1cHBvcnRlZCBvcGVyYXRvciBDTEVBUlwiXG4gICAgfCBTT1VSQ0UgLT4gZmFpbHdpdGggXCJVbnN1cHBvcnRlZCBvcGVyYXRvciBTT1VSQ0VcIlxuICAgIHwgT1ZFUiAtPiBcInNvdXJjZS1vdmVyXCJcbiAgICB8IEFUT1AgLT4gXCJzb3VyY2UtYXRvcFwiXG4gICAgfCBJTiAtPiBcInNvdXJjZS1pblwiXG4gICAgfCBPVVQgLT4gXCJzb3VyY2Utb3V0XCJcbiAgICB8IERFU1RfT1ZFUiAtPiBcImRlc3RpbmF0aW9uLW92ZXJcIlxuICAgIHwgREVTVF9BVE9QIC0+IFwiZGVzdGluYXRpb24tYXRvcFwiXG4gICAgfCBERVNUX0lOIC0+IFwiZGVzdGluYXRpb24taW5cIlxuICAgIHwgREVTVF9PVVQgLT4gXCJkZXN0aW5hdGlvbi1vdXRcIlxuICAgIHwgQUREIC0+IFwibGlnaHRlclwiXG4gICAgfCBYT1IgLT4gXCJ4b3JcIlxuICAgIHwgREVTVCAtPiBmYWlsd2l0aCBcIlVuc3VwcG9ydGVkIG9wZXJhdG9yIERFU1RcIlxuICAgIHwgU0FUVVJBVEUgLT4gZmFpbHdpdGggXCJVbnN1cHBvcnRlZCBvcGVyYXRvciBTQVRVUkFURVwiXG4gIGluXG4gIGNvbnRleHQuaHRtbCMjLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA6PSBKcy5zdHJpbmcgb3BlcmF0b3JcblxubGV0IGdldF9vcGVyYXRvciBjb250ZXh0ID1cbiAgbWF0Y2ggSnMudG9fc3RyaW5nIGNvbnRleHQuaHRtbCMjLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiB3aXRoXG4gICAgfCBcIm92ZXJcIiAtPiBPVkVSICgqIFNwZWNpYWwgY2FzZSBmb3Igbm9kZS1jYW52YXMgd2hpY2ggc2VlbXMgdG8gaGF2ZSBhIHdyb25nIGRlZmF1bHQgdmFsdWUgKilcbiAgICB8IFwiYWRkXCIgLT4gQUREICgqIFNwZWNpYWwgY2FzZSBmb3Igbm9kZS1jYW52YXMgKilcbiAgICB8IFwic291cmNlLW92ZXJcIiAtPiBPVkVSXG4gICAgfCBcInNvdXJjZS1hdG9wXCIgLT4gQVRPUFxuICAgIHwgXCJzb3VyY2UtaW5cIiAtPiBJTlxuICAgIHwgXCJzb3VyY2Utb3V0XCIgLT4gT1VUXG4gICAgfCBcImRlc3RpbmF0aW9uLW92ZXJcIiAtPiBERVNUX09WRVJcbiAgICB8IFwiZGVzdGluYXRpb24tYXRvcFwiIC0+IERFU1RfQVRPUFxuICAgIHwgXCJkZXN0aW5hdGlvbi1pblwiIC0+IERFU1RfSU5cbiAgICB8IFwiZGVzdGluYXRpb24tb3V0XCIgLT4gREVTVF9PVVRcbiAgICB8IFwibGlnaHRlclwiIC0+IEFERFxuICAgIHwgXCJ4b3JcIiAtPiBYT1JcbiAgICB8IG9wIC0+IGZhaWx3aXRoIChQcmludGYuc3ByaW50ZiBcIlVuZXhwZWN0ZWQgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uICVTXCIgb3ApXG5cblxubGV0IHNldF9zb3VyY2UgY29udGV4dCBwYXR0ZXJuID1cbiAgbGV0IGNvbnZlcnQgeCA9IHN0cmluZ19vZl9pbnQgKGludF9vZl9mbG9hdCAoMjU1LjAgKi4geCkpIGluXG4gIGxldCBjb252ZXJ0X3JnYmEgciBnIGIgYSA9IEpzLnN0cmluZyAoUHJpbnRmLnNwcmludGYgXCJyZ2JhKCVzLCAlcywgJXMsICVmKVwiIChjb252ZXJ0IHIpIChjb252ZXJ0IGcpIChjb252ZXJ0IGIpIGEpIGluXG4gIGxldCBzb3VyY2UgPSAhcGF0dGVybiBpblxuICBMb2NhbC5zZXRfc291cmNlIGNvbnRleHQubG9jYWwgfnNvdXJjZTtcbiAgbWF0Y2ggc291cmNlIHdpdGhcbiAgICB8IFBhdHRlcm4uUmdiYSAociwgZywgYiwgYSkgLT5cbiAgICAgIGxldCBjb2xvciA9IGNvbnZlcnRfcmdiYSByIGcgYiBhIGluXG4gICAgICBjb250ZXh0Lmh0bWwjIy5maWxsU3R5bGUgOj0gY29sb3I7XG4gICAgICBjb250ZXh0Lmh0bWwjIy5zdHJva2VTdHlsZSA6PSBjb2xvclxuICAgIHwgUGF0dGVybi5MaW5lYXJHcmFkaWVudCB7cG9pbnRzPSh4MCwgeTAsIHgxLCB5MSk7IHN0b3BfcG9pbnRzfSAtPlxuICAgICAgbGV0IGdyYWRpZW50ID0gY29udGV4dC5odG1sIyNjcmVhdGVMaW5lYXJHcmFkaWVudCB4MCB5MCB4MSB5MSBpblxuICAgICAgc3RvcF9wb2ludHNcbiAgICAgIHw+IFBhdHRlcm4uU3RvcFBvaW50TGlzdC50b19saXN0XG4gICAgICB8PiBMaXN0Lml0ZXIgfmY6KGZ1biAocG9zaXRpb24sIHIsIGcsIGIsIGEpIC0+XG4gICAgICAgIGdyYWRpZW50IyNhZGRDb2xvclN0b3AgcG9zaXRpb24gKGNvbnZlcnRfcmdiYSByIGcgYiBhKVxuICAgICAgKTtcbiAgICAgIGNvbnRleHQuaHRtbCMjLmZpbGxTdHlsZV9ncmFkaWVudCA6PSBncmFkaWVudDtcbiAgICAgIGNvbnRleHQuaHRtbCMjLnN0cm9rZVN0eWxlX2dyYWRpZW50IDo9IGdyYWRpZW50XG4gICAgfCBQYXR0ZXJuLlJhZGlhbEdyYWRpZW50IHtjaXJjbGVzPSh4MCwgeTAsIHIwLCB4MSwgeTEsIHIxKTsgc3RvcF9wb2ludHN9IC0+XG4gICAgICBsZXQgZ3JhZGllbnQgPSBjb250ZXh0Lmh0bWwjI2NyZWF0ZVJhZGlhbEdyYWRpZW50IHgwIHkwIHIwIHgxIHkxIHIxIGluXG4gICAgICBzdG9wX3BvaW50c1xuICAgICAgfD4gUGF0dGVybi5TdG9wUG9pbnRMaXN0LnRvX2xpc3RcbiAgICAgIHw+IExpc3QuaXRlciB+ZjooZnVuIChwb3NpdGlvbiwgciwgZywgYiwgYSkgLT5cbiAgICAgICAgZ3JhZGllbnQjI2FkZENvbG9yU3RvcCBwb3NpdGlvbiAoY29udmVydF9yZ2JhIHIgZyBiIGEpXG4gICAgICApO1xuICAgICAgY29udGV4dC5odG1sIyMuZmlsbFN0eWxlX2dyYWRpZW50IDo9IGdyYWRpZW50O1xuICAgICAgY29udGV4dC5odG1sIyMuc3Ryb2tlU3R5bGVfZ3JhZGllbnQgOj0gZ3JhZGllbnRcbiAgICB8IFBhdHRlcm4uVHlwZU1pc21hdGNoIC0+XG4gICAgICAoKVxuXG5sZXQgZ2V0X3NvdXJjZSBjb250ZXh0ID1cbiAgcmVmIChMb2NhbC5zb3VyY2UgY29udGV4dC5sb2NhbClcblxubGV0IHNldF9zb3VyY2VfcmdiIGNvbnRleHQgciBnIGIgPVxuICBzZXRfc291cmNlIGNvbnRleHQgKFBhdHRlcm4uY3JlYXRlX3JnYiByIGcgYilcblxubGV0IHNldF9zb3VyY2VfcmdiYSBjb250ZXh0IHIgZyBiIGEgPVxuICBzZXRfc291cmNlIGNvbnRleHQgKFBhdHRlcm4uY3JlYXRlX3JnYmEgciBnIGIgYSlcblxuXG5sZXQgX3NldF9mb250IGNvbnRleHQgKHtzbGFudDsgd2VpZ2h0OyBzaXplOyBmYW1pbHl9IGFzIGZvbnQpID1cbiAgTG9jYWwuc2V0X2ZvbnQgY29udGV4dC5sb2NhbCB+Zm9udDtcbiAgbGV0IGZvbnRfc3R5bGUgPSBtYXRjaCBzbGFudCB3aXRoXG4gICAgfCBVcHJpZ2h0IC0+IFwibm9ybWFsXCJcbiAgICB8IEl0YWxpYyAtPiBcIml0YWxpY1wiXG4gICAgfCBPYmxpcXVlIC0+IFwib2JsaXF1ZVwiXG4gIGFuZCBmb250X3dlaWdodCA9IG1hdGNoIHdlaWdodCB3aXRoXG4gICAgfCBOb3JtYWwgLT4gXCJub3JtYWxcIlxuICAgIHwgQm9sZCAtPiBcImJvbGRcIlxuICBpblxuICBsZXQgZm9udCA9IFByaW50Zi5zcHJpbnRmIFwiJXMgJXMgJW5weCAlc1wiIGZvbnRfc3R5bGUgZm9udF93ZWlnaHQgKGludF9vZl9mbG9hdCBzaXplKSBmYW1pbHkgaW5cbiAgY29udGV4dC5odG1sIyMuZm9udCA6PSBKcy5zdHJpbmcgZm9udFxuXG5sZXQgc2VsZWN0X2ZvbnRfZmFjZSBjb250ZXh0ID8oc2xhbnQ9VXByaWdodCkgPyh3ZWlnaHQ9Tm9ybWFsKSBmYW1pbHkgPVxuICBfc2V0X2ZvbnQgY29udGV4dCB7KExvY2FsLmZvbnQgY29udGV4dC5sb2NhbCkgd2l0aCBzbGFudDsgd2VpZ2h0OyBmYW1pbHl9XG5cbmxldCBzZXRfZm9udF9zaXplIGNvbnRleHQgc2l6ZSA9XG4gIF9zZXRfZm9udCBjb250ZXh0IHsoTG9jYWwuZm9udCBjb250ZXh0LmxvY2FsKSB3aXRoIHNpemV9XG5cbmxldCBzaG93X3RleHQgY29udGV4dCBzID1cbiAgbGV0ICh4LCB5KSA9IFBhdGguZ2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dFxuICBhbmQgdyA9IChjb250ZXh0Lmh0bWwjI21lYXN1cmVUZXh0IChKcy5zdHJpbmcgcykpIyMud2lkdGggaW5cbiAgTG9jYWwuc2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbCAoeCArLiB3LCB5KTtcbiAgY29udGV4dC5odG1sIyNmaWxsVGV4dCAoSnMuc3RyaW5nIHMpIHggeVxuXG5sZXQgZm9udF9leHRlbnRzIGNvbnRleHQgPVxuICBsZXQge3NpemU7IF99ID0gKExvY2FsLmZvbnQgY29udGV4dC5sb2NhbCkgaW5cbiAge1xuICAgIGFzY2VudCA9IHNpemU7XG4gICAgZGVzY2VudCA9IHNpemUgLy4gNC47XG4gICAgYmFzZWxpbmUgPSAwLjtcbiAgICBtYXhfeF9hZHZhbmNlID0gMi4gKi4gc2l6ZTtcbiAgICBtYXhfeV9hZHZhbmNlID0gMC47XG4gIH1cblxubGV0IHRleHRfZXh0ZW50cyBjb250ZXh0IHMgPVxuICBsZXQge3NpemU7IF99ID0gKExvY2FsLmZvbnQgY29udGV4dC5sb2NhbClcbiAgYW5kIHcgPSAoY29udGV4dC5odG1sIyNtZWFzdXJlVGV4dCAoSnMuc3RyaW5nIHMpKSMjLndpZHRoIGluXG4gIHtcbiAgICB4X2JlYXJpbmcgPSAwLjtcbiAgICB5X2JlYXJpbmcgPSAwLjtcbiAgICB3aWR0aCA9IHc7XG4gICAgaGVpZ2h0ID0gc2l6ZTtcbiAgICB4X2FkdmFuY2UgPSB3O1xuICAgIHlfYWR2YW5jZSA9IDAuO1xuICB9XG5cbmxldCBjcmVhdGUgY2FudmFzID1cbiAgbGV0IGh0bWwgPSBjYW52YXMjI2dldENvbnRleHQgRG9tX2h0bWwuXzJkX1xuICBhbmQgbG9jYWwgPSBMb2NhbC5jcmVhdGUgKCkgaW5cbiAgbGV0IGNvbnRleHQgPSB7XG4gICAgaHRtbDtcbiAgICBsb2NhbDtcbiAgfSBpblxuICBzZXRfbGluZV93aWR0aCBjb250ZXh0IDIuMDtcbiAgY29udGV4dFxuIiwiKCogQ29weXJpZ2h0IDIwMTctMjAxOCBWaW5jZW50IEphY3F1ZXMgPHZpbmNlbnRAdmluY2VudC1qYWNxdWVzLm5ldD4gKilcblxub3BlbiBTdGRMYWJlbHNcblxudHlwZSBzdGF0dXMgPVxuICB8IElOVkFMSURfUkVTVE9SRVxuICB8IElOVkFMSURfUE9QX0dST1VQXG4gIHwgTk9fQ1VSUkVOVF9QT0lOVFxuICB8IElOVkFMSURfTUFUUklYXG4gIHwgSU5WQUxJRF9TVEFUVVNcbiAgfCBOVUxMX1BPSU5URVJcbiAgfCBJTlZBTElEX1NUUklOR1xuICB8IElOVkFMSURfUEFUSF9EQVRBXG4gIHwgUkVBRF9FUlJPUlxuICB8IFdSSVRFX0VSUk9SXG4gIHwgU1VSRkFDRV9GSU5JU0hFRFxuICB8IFNVUkZBQ0VfVFlQRV9NSVNNQVRDSFxuICB8IFBBVFRFUk5fVFlQRV9NSVNNQVRDSFxuICB8IElOVkFMSURfQ09OVEVOVFxuICB8IElOVkFMSURfRk9STUFUXG4gIHwgSU5WQUxJRF9WSVNVQUxcbiAgfCBGSUxFX05PVF9GT1VORFxuICB8IElOVkFMSURfREFTSFxuICB8IElOVkFMSURfRFNDX0NPTU1FTlRcbiAgfCBJTlZBTElEX0lOREVYXG4gIHwgQ0xJUF9OT1RfUkVQUkVTRU5UQUJMRVxuICB8IFRFTVBfRklMRV9FUlJPUlxuICB8IElOVkFMSURfU1RSSURFXG4gIHwgRk9OVF9UWVBFX01JU01BVENIXG4gIHwgVVNFUl9GT05UX0lNTVVUQUJMRVxuICB8IFVTRVJfRk9OVF9FUlJPUlxuICB8IE5FR0FUSVZFX0NPVU5UXG4gIHwgSU5WQUxJRF9DTFVTVEVSU1xuICB8IElOVkFMSURfU0xBTlRcbiAgfCBJTlZBTElEX1dFSUdIVFxuICB8IElOVkFMSURfU0laRVxuICB8IFVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URURcbiAgfCBERVZJQ0VfVFlQRV9NSVNNQVRDSFxuICB8IERFVklDRV9FUlJPUlxuICB8IElOVkFMSURfTUVTSF9DT05TVFJVQ1RJT05cbiAgfCBERVZJQ0VfRklOSVNIRURcbiAgfCBKQklHMl9HTE9CQUxfTUlTU0lOR1xuXG5leGNlcHRpb24gRXJyb3Igb2Ygc3RhdHVzXG5cbmxldCBzdGF0dXNfdG9fc3RyaW5nID0gZnVuY3Rpb25cbiAgfCBJTlZBTElEX1JFU1RPUkUgLT4gXCJjYWlyb19yZXN0b3JlKCkgd2l0aG91dCBtYXRjaGluZyBjYWlyb19zYXZlKClcIlxuICB8IElOVkFMSURfUE9QX0dST1VQIC0+IFwibm8gc2F2ZWQgZ3JvdXAgdG8gcG9wLCBpLmUuIGNhaXJvX3BvcF9ncm91cCgpIHdpdGhvdXQgbWF0Y2hpbmcgY2Fpcm9fcHVzaF9ncm91cCgpXCJcbiAgfCBOT19DVVJSRU5UX1BPSU5UIC0+IFwibm8gY3VycmVudCBwb2ludCBkZWZpbmVkXCJcbiAgfCBJTlZBTElEX01BVFJJWCAtPiBcImludmFsaWQgbWF0cml4IChub3QgaW52ZXJ0aWJsZSlcIlxuICB8IElOVkFMSURfU1RBVFVTIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgY2Fpcm9fc3RhdHVzX3RcIlxuICB8IE5VTExfUE9JTlRFUiAtPiBcIk5VTEwgcG9pbnRlclwiXG4gIHwgSU5WQUxJRF9TVFJJTkcgLT4gXCJpbnB1dCBzdHJpbmcgbm90IHZhbGlkIFVURi04XCJcbiAgfCBJTlZBTElEX1BBVEhfREFUQSAtPiBcImlucHV0IHBhdGggZGF0YSBub3QgdmFsaWRcIlxuICB8IFJFQURfRVJST1IgLT4gXCJlcnJvciB3aGlsZSByZWFkaW5nIGZyb20gaW5wdXQgc3RyZWFtXCJcbiAgfCBXUklURV9FUlJPUiAtPiBcImVycm9yIHdoaWxlIHdyaXRpbmcgdG8gb3V0cHV0IHN0cmVhbVwiXG4gIHwgU1VSRkFDRV9GSU5JU0hFRCAtPiBcInRoZSB0YXJnZXQgc3VyZmFjZSBoYXMgYmVlbiBmaW5pc2hlZFwiXG4gIHwgU1VSRkFDRV9UWVBFX01JU01BVENIIC0+IFwidGhlIHN1cmZhY2UgdHlwZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoZSBvcGVyYXRpb25cIlxuICB8IFBBVFRFUk5fVFlQRV9NSVNNQVRDSCAtPiBcInRoZSBwYXR0ZXJuIHR5cGUgaXMgbm90IGFwcHJvcHJpYXRlIGZvciB0aGUgb3BlcmF0aW9uXCJcbiAgfCBJTlZBTElEX0NPTlRFTlQgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhbiBpbnB1dCBjYWlyb19jb250ZW50X3RcIlxuICB8IElOVkFMSURfRk9STUFUIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgY2Fpcm9fZm9ybWF0X3RcIlxuICB8IElOVkFMSURfVklTVUFMIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgVmlzdWFsKlwiXG4gIHwgRklMRV9OT1RfRk9VTkQgLT4gXCJmaWxlIG5vdCBmb3VuZFwiXG4gIHwgSU5WQUxJRF9EQVNIIC0+IFwiaW52YWxpZCB2YWx1ZSBmb3IgYSBkYXNoIHNldHRpbmdcIlxuICB8IElOVkFMSURfRFNDX0NPTU1FTlQgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhIERTQyBjb21tZW50XCJcbiAgfCBJTlZBTElEX0lOREVYIC0+IFwiaW52YWxpZCBpbmRleCBwYXNzZWQgdG8gZ2V0dGVyXCJcbiAgfCBDTElQX05PVF9SRVBSRVNFTlRBQkxFIC0+IFwiY2xpcCByZWdpb24gbm90IHJlcHJlc2VudGFibGUgaW4gZGVzaXJlZCBmb3JtYXRcIlxuICB8IFRFTVBfRklMRV9FUlJPUiAtPiBcImVycm9yIGNyZWF0aW5nIG9yIHdyaXRpbmcgdG8gYSB0ZW1wb3JhcnkgZmlsZVwiXG4gIHwgSU5WQUxJRF9TVFJJREUgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBzdHJpZGVcIlxuICB8IEZPTlRfVFlQRV9NSVNNQVRDSCAtPiBcInRoZSBmb250IHR5cGUgaXMgbm90IGFwcHJvcHJpYXRlIGZvciB0aGUgb3BlcmF0aW9uXCJcbiAgfCBVU0VSX0ZPTlRfSU1NVVRBQkxFIC0+IFwidGhlIHVzZXItZm9udCBpcyBpbW11dGFibGVcIlxuICB8IFVTRVJfRk9OVF9FUlJPUiAtPiBcImVycm9yIG9jY3VycmVkIGluIGEgdXNlci1mb250IGNhbGxiYWNrIGZ1bmN0aW9uXCJcbiAgfCBORUdBVElWRV9DT1VOVCAtPiBcIm5lZ2F0aXZlIG51bWJlciB1c2VkIHdoZXJlIGl0IGlzIG5vdCBhbGxvd2VkXCJcbiAgfCBJTlZBTElEX0NMVVNURVJTIC0+IFwiaW5wdXQgY2x1c3RlcnMgZG8gbm90IHJlcHJlc2VudCB0aGUgYWNjb21wYW55aW5nIHRleHQgYW5kIGdseXBoIGFycmF5c1wiXG4gIHwgSU5WQUxJRF9TTEFOVCAtPiBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2ZvbnRfc2xhbnRfdFwiXG4gIHwgSU5WQUxJRF9XRUlHSFQgLT4gXCJpbnZhbGlkIHZhbHVlIGZvciBhbiBpbnB1dCBjYWlyb19mb250X3dlaWdodF90XCJcbiAgfCBJTlZBTElEX1NJWkUgLT4gXCJpbnZhbGlkIHZhbHVlICh0eXBpY2FsbHkgdG9vIGJpZykgZm9yIHRoZSBzaXplIG9mIHRoZSBpbnB1dCAoc3VyZmFjZSwgcGF0dGVybiwgZXRjLilcIlxuICB8IFVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URUQgLT4gXCJ1c2VyLWZvbnQgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZFwiXG4gIHwgREVWSUNFX1RZUEVfTUlTTUFUQ0ggLT4gXCJ0aGUgZGV2aWNlIHR5cGUgaXMgbm90IGFwcHJvcHJpYXRlIGZvciB0aGUgb3BlcmF0aW9uXCJcbiAgfCBERVZJQ0VfRVJST1IgLT4gXCJhbiBvcGVyYXRpb24gdG8gdGhlIGRldmljZSBjYXVzZWQgYW4gdW5zcGVjaWZpZWQgZXJyb3JcIlxuICB8IElOVkFMSURfTUVTSF9DT05TVFJVQ1RJT04gLT4gXCJpbnZhbGlkIG9wZXJhdGlvbiBkdXJpbmcgbWVzaCBwYXR0ZXJuIGNvbnN0cnVjdGlvblwiXG4gIHwgREVWSUNFX0ZJTklTSEVEIC0+IFwidGhlIHRhcmdldCBkZXZpY2UgaGFzIGJlZW4gZmluaXNoZWRcIlxuICB8IEpCSUcyX0dMT0JBTF9NSVNTSU5HIC0+IFwiQ0FJUk9fTUlNRV9UWVBFX0pCSUcyX0dMT0JBTF9JRCB1c2VkIGJ1dCBubyBDQUlST19NSU1FX1RZUEVfSkJJRzJfR0xPQkFMIGRhdGEgcHJvdmlkZWRcIlxuXG5sZXQgc3RhdHVzX3JlcHIgPSBmdW5jdGlvblxuICB8IElOVkFMSURfUkVTVE9SRSAtPiBcIklOVkFMSURfUkVTVE9SRVwiXG4gIHwgTk9fQ1VSUkVOVF9QT0lOVCAtPiBcIk5PX0NVUlJFTlRfUE9JTlRcIlxuICAoKkJJU0VDVC1JR05PUkUtQkVHSU4qKSAoKiBJIGRvbid0IGtub3cgaG93IHRvIG1ha2UgQ2Fpcm8gcmFpc2UgdGhlc2UgZXhjZXB0aW9ucyAqKVxuICB8IElOVkFMSURfUE9QX0dST1VQIC0+IFwiSU5WQUxJRF9QT1BfR1JPVVBcIlxuICB8IElOVkFMSURfTUFUUklYIC0+IFwiSU5WQUxJRF9NQVRSSVhcIlxuICB8IElOVkFMSURfU1RBVFVTIC0+IFwiSU5WQUxJRF9TVEFUVVNcIlxuICB8IE5VTExfUE9JTlRFUiAtPiBcIk5VTExfUE9JTlRFUlwiXG4gIHwgSU5WQUxJRF9TVFJJTkcgLT4gXCJJTlZBTElEX1NUUklOR1wiXG4gIHwgSU5WQUxJRF9QQVRIX0RBVEEgLT4gXCJJTlZBTElEX1BBVEhfREFUQVwiXG4gIHwgUkVBRF9FUlJPUiAtPiBcIlJFQURfRVJST1JcIlxuICB8IFdSSVRFX0VSUk9SIC0+IFwiV1JJVEVfRVJST1JcIlxuICB8IFNVUkZBQ0VfRklOSVNIRUQgLT4gXCJTVVJGQUNFX0ZJTklTSEVEXCJcbiAgfCBTVVJGQUNFX1RZUEVfTUlTTUFUQ0ggLT4gXCJTVVJGQUNFX1RZUEVfTUlTTUFUQ0hcIlxuICB8IFBBVFRFUk5fVFlQRV9NSVNNQVRDSCAtPiBcIlBBVFRFUk5fVFlQRV9NSVNNQVRDSFwiXG4gIHwgSU5WQUxJRF9DT05URU5UIC0+IFwiSU5WQUxJRF9DT05URU5UXCJcbiAgfCBJTlZBTElEX0ZPUk1BVCAtPiBcIklOVkFMSURfRk9STUFUXCJcbiAgfCBJTlZBTElEX1ZJU1VBTCAtPiBcIklOVkFMSURfVklTVUFMXCJcbiAgfCBGSUxFX05PVF9GT1VORCAtPiBcIkZJTEVfTk9UX0ZPVU5EXCJcbiAgfCBJTlZBTElEX0RBU0ggLT4gXCJJTlZBTElEX0RBU0hcIlxuICB8IElOVkFMSURfRFNDX0NPTU1FTlQgLT4gXCJJTlZBTElEX0RTQ19DT01NRU5UXCJcbiAgfCBJTlZBTElEX0lOREVYIC0+IFwiSU5WQUxJRF9JTkRFWFwiXG4gIHwgQ0xJUF9OT1RfUkVQUkVTRU5UQUJMRSAtPiBcIkNMSVBfTk9UX1JFUFJFU0VOVEFCTEVcIlxuICB8IFRFTVBfRklMRV9FUlJPUiAtPiBcIlRFTVBfRklMRV9FUlJPUlwiXG4gIHwgSU5WQUxJRF9TVFJJREUgLT4gXCJJTlZBTElEX1NUUklERVwiXG4gIHwgRk9OVF9UWVBFX01JU01BVENIIC0+IFwiRk9OVF9UWVBFX01JU01BVENIXCJcbiAgfCBVU0VSX0ZPTlRfSU1NVVRBQkxFIC0+IFwiVVNFUl9GT05UX0lNTVVUQUJMRVwiXG4gIHwgVVNFUl9GT05UX0VSUk9SIC0+IFwiVVNFUl9GT05UX0VSUk9SXCJcbiAgfCBORUdBVElWRV9DT1VOVCAtPiBcIk5FR0FUSVZFX0NPVU5UXCJcbiAgfCBJTlZBTElEX0NMVVNURVJTIC0+IFwiSU5WQUxJRF9DTFVTVEVSU1wiXG4gIHwgSU5WQUxJRF9TTEFOVCAtPiBcIklOVkFMSURfU0xBTlRcIlxuICB8IElOVkFMSURfV0VJR0hUIC0+IFwiSU5WQUxJRF9XRUlHSFRcIlxuICB8IElOVkFMSURfU0laRSAtPiBcIklOVkFMSURfU0laRVwiXG4gIHwgVVNFUl9GT05UX05PVF9JTVBMRU1FTlRFRCAtPiBcIlVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URURcIlxuICB8IERFVklDRV9UWVBFX01JU01BVENIIC0+IFwiREVWSUNFX1RZUEVfTUlTTUFUQ0hcIlxuICB8IERFVklDRV9FUlJPUiAtPiBcIkRFVklDRV9FUlJPUlwiXG4gIHwgSU5WQUxJRF9NRVNIX0NPTlNUUlVDVElPTiAtPiBcIklOVkFMSURfTUVTSF9DT05TVFJVQ1RJT05cIlxuICB8IERFVklDRV9GSU5JU0hFRCAtPiBcIkRFVklDRV9GSU5JU0hFRFwiXG4gIHwgSkJJRzJfR0xPQkFMX01JU1NJTkcgLT4gXCJKQklHMl9HTE9CQUxfTUlTU0lOR1wiXG4gICgqQklTRUNULUlHTk9SRS1FTkQqKVxuXG5leGNlcHRpb24gVW5hdmFpbGFibGVcblxudHlwZSBtYXRyaXggPSB7XG4gIG11dGFibGUgeHg6IGZsb2F0O1xuICBtdXRhYmxlIHl4OiBmbG9hdDtcbiAgbXV0YWJsZSB4eTogZmxvYXQ7XG4gIG11dGFibGUgeXk6IGZsb2F0O1xuICBtdXRhYmxlIHgwOiBmbG9hdDtcbiAgbXV0YWJsZSB5MDogZmxvYXQ7XG59XG5cbm1vZHVsZSBNYXRyaXggPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gbWF0cml4XG5cbiAgKCpcbiAgICAyIGJ5IDIgbWF0cml4IHdpdGggKHgwLCB5MCkgb2Zmc2V0IGlzIGVxdWl2YWxlbnQgdG8gdGhlIGZvbGxvd2luZyAzIGJ5IDMgbWF0cml4OlxuICAgIC8geHggeHkgeDAgXFwgICAvIHggXFwgICAvIHh4KnggKyB4eSp5ICsgeDAgXFxcbiAgICB8IHl4IHl5IHkwIHwgKiB8IHkgfCA9IHwgeXgqeCArIHl5KnkgKyB5MCB8XG4gICAgXFwgIDAgIDAgIDEgLyAgIFxcIDEgLyAgIFxcICAgICAgICAgICAgICAgIDEgL1xuICAqKVxuXG4gIGxldCBpbml0X2lkZW50aXR5ICgpID1cbiAgICB7eHg9MS47IHh5PTAuOyB5eD0wLjsgeXk9MS47IHgwPTAuOyB5MD0wLn1cblxuICBsZXQgaW5pdF90cmFuc2xhdGUgeCB5ID1cbiAgICB7eHg9MS47IHh5PTAuOyB5eD0wLjsgeXk9MS47IHgwPXg7IHkwPXl9XG5cbiAgbGV0IGluaXRfc2NhbGUgeCB5ID1cbiAgICB7eHg9eDsgeHk9MC47IHl4PTAuOyB5eT15OyB4MD0wLjsgeTA9MC59XG5cbiAgbGV0IGluaXRfcm90YXRlIGFuZ2xlID1cbiAgICB7XG4gICAgICB4eCA9IGNvcyBhbmdsZTtcbiAgICAgIHh5ID0gLS5zaW4gYW5nbGU7XG4gICAgICB5eCA9IHNpbiBhbmdsZTtcbiAgICAgIHl5ID0gY29zIGFuZ2xlO1xuICAgICAgeDAgPSAwLjtcbiAgICAgIHkwID0gMC47XG4gICAgfVxuXG4gIGxldCBpbml0X2ludmVyc2Uge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9ID1cbiAgICBsZXQgZCA9IHh4ICouIHl5IC0uIHh5ICouIHl4IGluXG4gICAgaWYgZCA9IDAuIHRoZW4gcmFpc2UgKEVycm9yIElOVkFMSURfTUFUUklYKTtcbiAgICBsZXQgeHggPSB5eSAvLiBkXG4gICAgYW5kIHh5ID0gLS4geHkgLy4gZFxuICAgIGFuZCB5eCA9IC0uIHl4IC8uIGRcbiAgICBhbmQgeXkgPSB4eCAvLiBkXG4gICAgYW5kIHgwID0gKHh5ICouIHkwIC0uIHl5ICouIHgwKSAvLiBkXG4gICAgYW5kIHkwID0gKHl4ICouIHgwIC0uIHh4ICouIHkwKSAvLiBkIGluXG4gICAge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9XG5cbiAgbGV0IG11bHRpcGx5IHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfSB7eHg9eHgnOyB4eT14eSc7IHl4PXl4JzsgeXk9eXknOyB4MD14MCc7IHkwPXkwJ30gPVxuICAgIGxldCB4eCA9IHh4ICouIHh4JyArLiB4eSAqLiB5eCdcbiAgICBhbmQgeHkgPSB4eCAqLiB4eScgKy4geHkgKi4geXknXG4gICAgYW5kIHl4ID0geXggKi4geHgnICsuIHl5ICouIHl4J1xuICAgIGFuZCB5eSA9IHl4ICouIHh5JyArLiB5eSAqLiB5eSdcbiAgICBhbmQgeDAgPSB4eCAqLiB4MCcgKy4geHkgKi4geTAnICsuIHgwXG4gICAgYW5kIHkwID0geXggKi4geDAnICsuIHl5ICouIHkwJyArLiB5MCBpblxuICAgIHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfVxuXG4gIGxldCB0cmFuc2Zvcm1fcG9pbnQge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9IHggeSA9XG4gICAgKHh4ICouIHggKy4geHkgKi4geSArLiB4MCwgeXggKi4geCArLiB5eSAqLiB5ICsuIHkwKVxuXG4gIGxldCB0cmFuc2Zvcm1fZGlzdGFuY2Uge3h4OyB4eTsgeXg7IHl5OyB4MD1fOyB5MD1ffSB+ZHggfmR5ID1cbiAgICAoeHggKi4gZHggKy4geHkgKi4gZHksIHl4ICouIGR4ICsuIHl5ICouIGR5KVxuXG4gIGxldCBzZXQgbSB7eHg7IHh5OyB5eDsgeXk7IHgwOyB5MH0gPVxuICAgIG0ueHggPC0geHg7XG4gICAgbS54eSA8LSB4eTtcbiAgICBtLnl4IDwtIHl4O1xuICAgIG0ueXkgPC0geXk7XG4gICAgbS54MCA8LSB4MDtcbiAgICBtLnkwIDwtIHkwXG5cbiAgbGV0IHNjYWxlIG0geCB5ID1cbiAgICBzZXQgbSAobXVsdGlwbHkgbSAoaW5pdF9zY2FsZSB4IHkpKVxuXG4gIGxldCB0cmFuc2xhdGUgbSB4IHkgPVxuICAgIHNldCBtIChtdWx0aXBseSBtIChpbml0X3RyYW5zbGF0ZSB4IHkpKVxuXG4gIGxldCByb3RhdGUgbSBhbmdsZSA9XG4gICAgc2V0IG0gKG11bHRpcGx5IG0gKGluaXRfcm90YXRlIGFuZ2xlKSlcblxuICBsZXQgaW52ZXJ0IG0gPVxuICAgIHNldCBtIChpbml0X2ludmVyc2UgbSlcbmVuZFxuXG50eXBlIHNsYW50ID1cbiAgfCBVcHJpZ2h0XG4gIHwgSXRhbGljXG4gIHwgT2JsaXF1ZVxuXG50eXBlIHdlaWdodCA9XG4gIHwgTm9ybWFsXG4gIHwgQm9sZFxuXG50eXBlIGZvbnQgPSB7XG4gIHNsYW50OiBzbGFudDtcbiAgd2VpZ2h0OiB3ZWlnaHQ7XG4gIHNpemU6IGZsb2F0O1xuICBmYW1pbHk6IHN0cmluZztcbn1cblxubW9kdWxlIFBhdHRlcm4gPSBzdHJ1Y3RcbiAgKCogV2Ugc3RvcmUgdHVwbGVzIChpbnN0ZWFkIG9mIG1vcmUgZXhwbGljaXQgcmVjb3JkIHR5cGVzKSBiZWNhdXNlIHRoZSBwdWJsaWMgaW50ZXJmYWNlIHVzZXMgdHVwbGVzXG4gIChnZXRfY29sb3Jfc3RvcF9yZ2JhLCBnZXRfcmdiYSwgZ2V0X2xpbmVhcl9wb2ludHMsIGdldF9yYWRpYWxfY2lyY2xlcykgKilcblxuICB0eXBlIHN0b3BfcG9pbnQgPSBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICgqIChwb3NpdGlvbiwgciwgZywgYiwgYSkgKilcblxuICBtb2R1bGUgU3RvcFBvaW50TGlzdDogc2lnXG4gICAgdHlwZSB0XG4gICAgdmFsIGVtcHR5OiB0XG4gICAgdmFsIGFkZDogdCAtPiBzdG9wX3BvaW50IC0+IHRcbiAgICB2YWwgc2l6ZTogdCAtPiBpbnRcbiAgICB2YWwgZ2V0OiB0IC0+IGk6aW50IC0+IHN0b3BfcG9pbnRcbiAgICB2YWwgdG9fbGlzdDogdCAtPiBzdG9wX3BvaW50IGxpc3RcbiAgZW5kID0gc3RydWN0XG4gICAgbW9kdWxlIEVsZW1lbnQgPSBzdHJ1Y3RcbiAgICAgIHR5cGUgdCA9IHtcbiAgICAgICAgYWRkZWQ6IGludDtcbiAgICAgICAgc3RvcF9wb2ludDogc3RvcF9wb2ludDtcbiAgICAgIH1cblxuICAgICAgbGV0IGNvbXBhcmUge3N0b3BfcG9pbnQ9KHBvc2l0aW9uX2EsIF8sIF8sIF8sIF8pOyBhZGRlZD1hZGRlZF9hOyBffSB7c3RvcF9wb2ludD0ocG9zaXRpb25fYiwgXywgXywgXywgXyk7IGFkZGVkPWFkZGVkX2I7IF99ID1cbiAgICAgICAgbWF0Y2ggY29tcGFyZSBwb3NpdGlvbl9hIHBvc2l0aW9uX2Igd2l0aFxuICAgICAgICAgIHwgMCAtPiBjb21wYXJlIGFkZGVkX2EgYWRkZWRfYlxuICAgICAgICAgIHwgbiAtPiBuXG4gICAgZW5kXG5cbiAgICB0eXBlIHQgPSBFbGVtZW50LnQgbGlzdFxuXG4gICAgbGV0IGVtcHR5ID0gW11cblxuICAgIGxldCBzaXplID0gTGlzdC5sZW5ndGhcblxuICAgIGxldCBhZGQgeHMgc3RvcF9wb2ludCA9XG4gICAgICBsZXQgZWxlbWVudCA9IHtFbGVtZW50LnN0b3BfcG9pbnQ7IGFkZGVkPUxpc3QubGVuZ3RoIHhzfSBpblxuICAgICAgbGV0IHJlYyBhdXggPSBmdW5jdGlvblxuICAgICAgICB8IFtdIC0+IFtlbGVtZW50XVxuICAgICAgICB8IHg6OnhzIGFzIHh4cyAtPiBtYXRjaCBFbGVtZW50LmNvbXBhcmUgZWxlbWVudCB4IHdpdGhcbiAgICAgICAgICB8IC0xIC0+IGVsZW1lbnQ6Onh4c1xuICAgICAgICAgIHwgXyAtPiB4OjooYXV4IHhzKVxuICAgICAgaW4gYXV4IHhzXG5cbiAgICBsZXQgdG9fbGlzdCB4cyA9XG4gICAgICBMaXN0Lm1hcCB4cyB+ZjooZnVuIHtFbGVtZW50LnN0b3BfcG9pbnQ7IF99IC0+IHN0b3BfcG9pbnQpXG5cbiAgICBsZXQgZ2V0IHhzIH5pID1cbiAgICAgIGxldCB7RWxlbWVudC5zdG9wX3BvaW50OyBffSA9IExpc3QubnRoIHhzIGkgaW5cbiAgICAgIHN0b3BfcG9pbnRcbiAgZW5kXG5cbiAgKCogVGhpcyBpcyBqdXN0IHRvIGNvdmVyIFN0b3BQb2ludExpc3QudG9fbGlzdCwgd2hpY2ggaXMgdXNlZCBvbmx5IGluIEpzT2ZPQ2Fpcm8sIHdob3NlIHRlc3QgY292ZXJhZ2UgaXNuJ3QgbWVhc3VyZWQuICopXG4gIGxldCBfID0gU3RvcFBvaW50TGlzdC4oYWRkIGVtcHR5ICgwLiwgMC4sIDAuLCAwLiwgMC4pIHw+IHRvX2xpc3QpXG5cbiAgKCogV2hlbiB3ZSBkcm9wIHN1cHBvcnQgb2YgT0NhbWwgNC4wMiwgd2UgY2FuIHVzZSBbaW5saW5lIHJlY29yZHNdKGh0dHBzOi8vY2FtbC5pbnJpYS5mci9wdWIvZG9jcy9tYW51YWwtb2NhbWwtNC4wNi9leHRuLmh0bWwjcyUzQWlubGluZS1yZWNvcmRzKSAqKVxuICB0eXBlIGxpbmVhcl9ncmFkaWVudCA9IHtcbiAgICBwb2ludHM6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0OyAoKiAoeDAsIHkwLCB4MSwgeTEpICopXG4gICAgc3RvcF9wb2ludHM6IFN0b3BQb2ludExpc3QudDtcbiAgfVxuXG4gIHR5cGUgcmFkaWFsX2dyYWRpZW50ID0ge1xuICAgIGNpcmNsZXM6IGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0ICogZmxvYXQgKiBmbG9hdDsgKCogKHgwLCB5MCwgcjAsIHgxLCB5MSwgcjEpICopXG4gICAgc3RvcF9wb2ludHM6IFN0b3BQb2ludExpc3QudDtcbiAgfVxuXG4gIHR5cGUgc291cmNlID1cbiAgICB8IFJnYmEgb2YgKGZsb2F0ICogZmxvYXQgKiBmbG9hdCAqIGZsb2F0KSAoKiAociwgZywgYiwgYSkgKilcbiAgICB8IExpbmVhckdyYWRpZW50IG9mIGxpbmVhcl9ncmFkaWVudFxuICAgIHwgUmFkaWFsR3JhZGllbnQgb2YgcmFkaWFsX2dyYWRpZW50XG4gICAgfCBUeXBlTWlzbWF0Y2hcblxuICB0eXBlICdhIHQgPSBzb3VyY2UgcmVmIGNvbnN0cmFpbnQgJ2EgPSBbPGBTb2xpZCB8IGBTdXJmYWNlIHwgYEdyYWRpZW50IHwgYExpbmVhciB8IGBSYWRpYWxdXG5cbiAgdHlwZSBhbnkgPSBbYFNvbGlkIHwgYFN1cmZhY2UgfCBgR3JhZGllbnQgfCBgTGluZWFyIHwgYFJhZGlhbF0gdFxuXG4gIGxldCBjcmVhdGVfcmdiYSByIGcgYiBhID1cbiAgICByZWYgKFJnYmEgKHIsIGcsIGIsIGEpKVxuXG4gIGxldCBjcmVhdGVfcmdiIHIgZyBiID1cbiAgICBjcmVhdGVfcmdiYSByIGcgYiAxLlxuXG4gIGxldCBnZXRfcmdiYSBwYXR0ZXJuID1cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IFJnYmEgY29sb3IgLT4gY29sb3JcbiAgICAgIHwgTGluZWFyR3JhZGllbnQgX1xuICAgICAgfCBSYWRpYWxHcmFkaWVudCBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuXG4gIGxldCBjcmVhdGVfbGluZWFyIH54MCB+eTAgfngxIH55MSA9XG4gICAgcmVmIChMaW5lYXJHcmFkaWVudCB7cG9pbnRzPSh4MCwgeTAsIHgxLCB5MSk7IHN0b3BfcG9pbnRzPVN0b3BQb2ludExpc3QuZW1wdHl9KVxuXG4gIGxldCBnZXRfbGluZWFyX3BvaW50cyBwYXR0ZXJuID1cbiAgICBtYXRjaCAhcGF0dGVybiB3aXRoXG4gICAgICB8IExpbmVhckdyYWRpZW50IHtwb2ludHM7IF99IC0+IHBvaW50c1xuICAgICAgfCBSZ2JhIF9cbiAgICAgIHwgUmFkaWFsR3JhZGllbnQgX1xuICAgICAgfCBUeXBlTWlzbWF0Y2ggLT4gcmFpc2UgKEVycm9yIFBBVFRFUk5fVFlQRV9NSVNNQVRDSClcblxuICBsZXQgY3JlYXRlX3JhZGlhbCB+eDAgfnkwIH5yMCB+eDEgfnkxIH5yMSA9XG4gICAgcmVmIChSYWRpYWxHcmFkaWVudCB7Y2lyY2xlcz0oeDAsIHkwLCByMCwgeDEsIHkxLCByMSk7IHN0b3BfcG9pbnRzPVN0b3BQb2ludExpc3QuZW1wdHl9KVxuXG4gIGxldCBnZXRfcmFkaWFsX2NpcmNsZXMgcGF0dGVybiA9XG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBSYWRpYWxHcmFkaWVudCB7Y2lyY2xlczsgX30gLT4gY2lyY2xlc1xuICAgICAgfCBMaW5lYXJHcmFkaWVudCBfXG4gICAgICB8IFJnYmEgX1xuICAgICAgfCBUeXBlTWlzbWF0Y2ggLT4gcmFpc2UgKEVycm9yIFBBVFRFUk5fVFlQRV9NSVNNQVRDSClcblxuICBsZXQgYWRkX2NvbG9yX3N0b3BfcmdiYSBwYXR0ZXJuID8ob2ZzPTAuKSByIGcgYiBhID1cbiAgICBsZXQgc3RvcF9wb2ludCA9IChvZnMsIHIsIGcsIGIsIGEpIGluXG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBMaW5lYXJHcmFkaWVudCBncmFkaWVudCAtPlxuICAgICAgICBwYXR0ZXJuIDo9IExpbmVhckdyYWRpZW50IHtncmFkaWVudCB3aXRoIHN0b3BfcG9pbnRzPShTdG9wUG9pbnRMaXN0LmFkZCBncmFkaWVudC5zdG9wX3BvaW50cyBzdG9wX3BvaW50KX1cbiAgICAgIHwgUmFkaWFsR3JhZGllbnQgZ3JhZGllbnQgLT5cbiAgICAgICAgcGF0dGVybiA6PSBSYWRpYWxHcmFkaWVudCB7Z3JhZGllbnQgd2l0aCBzdG9wX3BvaW50cz0oU3RvcFBvaW50TGlzdC5hZGQgZ3JhZGllbnQuc3RvcF9wb2ludHMgc3RvcF9wb2ludCl9XG4gICAgICB8IFJnYmEgXyAtPiBwYXR0ZXJuIDo9IFR5cGVNaXNtYXRjaFxuICAgICAgfCBUeXBlTWlzbWF0Y2ggLT4gKClcblxuICBsZXQgYWRkX2NvbG9yX3N0b3BfcmdiIHBhdHRlcm4gP29mcyByIGcgYiA9XG4gICAgYWRkX2NvbG9yX3N0b3BfcmdiYSBwYXR0ZXJuID9vZnMgciBnIGIgMS5cblxuICBsZXQgZ2V0X2NvbG9yX3N0b3BfY291bnQgcGF0dGVybiA9XG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBMaW5lYXJHcmFkaWVudCB7c3RvcF9wb2ludHM7IF99IHwgUmFkaWFsR3JhZGllbnQge3N0b3BfcG9pbnRzOyBffSAtPiBTdG9wUG9pbnRMaXN0LnNpemUgc3RvcF9wb2ludHNcbiAgICAgIHwgUmdiYSBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuXG4gIGxldCBnZXRfY29sb3Jfc3RvcF9yZ2JhIHBhdHRlcm4gfmlkeCA9XG4gICAgbWF0Y2ggIXBhdHRlcm4gd2l0aFxuICAgICAgfCBMaW5lYXJHcmFkaWVudCB7c3RvcF9wb2ludHM7IF99IHwgUmFkaWFsR3JhZGllbnQge3N0b3BfcG9pbnRzOyBffSAtPiBTdG9wUG9pbnRMaXN0LmdldCBzdG9wX3BvaW50cyB+aTppZHhcbiAgICAgIHwgUmdiYSBfXG4gICAgICB8IFR5cGVNaXNtYXRjaCAtPiByYWlzZSAoRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKVxuZW5kXG5cbnR5cGUgZmlsbF9ydWxlID1cbiAgfCBXSU5ESU5HXG4gIHwgRVZFTl9PRERcblxudHlwZSBsaW5lX2NhcCA9XG4gIHwgQlVUVFxuICB8IFJPVU5EXG4gIHwgU1FVQVJFXG5cbnR5cGUgbGluZV9qb2luID1cbiAgfCBKT0lOX01JVEVSXG4gIHwgSk9JTl9ST1VORFxuICB8IEpPSU5fQkVWRUxcblxudHlwZSBmb250X2V4dGVudHMgPSB7XG4gIGFzY2VudDogZmxvYXQ7XG4gIGRlc2NlbnQ6IGZsb2F0O1xuICBiYXNlbGluZTogZmxvYXQ7XG4gIG1heF94X2FkdmFuY2U6IGZsb2F0O1xuICBtYXhfeV9hZHZhbmNlOiBmbG9hdDtcbn1cblxudHlwZSB0ZXh0X2V4dGVudHMgPSB7XG4gIHhfYmVhcmluZzogZmxvYXQ7XG4gIHlfYmVhcmluZzogZmxvYXQ7XG4gIHdpZHRoOiBmbG9hdDtcbiAgaGVpZ2h0OiBmbG9hdDtcbiAgeF9hZHZhbmNlOiBmbG9hdDtcbiAgeV9hZHZhbmNlOiBmbG9hdDtcbn1cblxudHlwZSBvcGVyYXRvciA9XG4gIHwgQ0xFQVJcbiAgfCBTT1VSQ0VcbiAgfCBPVkVSXG4gIHwgSU5cbiAgfCBPVVRcbiAgfCBBVE9QXG4gIHwgREVTVFxuICB8IERFU1RfT1ZFUlxuICB8IERFU1RfSU5cbiAgfCBERVNUX09VVFxuICB8IERFU1RfQVRPUFxuICB8IFhPUlxuICB8IEFERFxuICB8IFNBVFVSQVRFXG5cbm1vZHVsZSBQb2ludHM6IHNpZ1xuICB0eXBlIHRcblxuICB2YWwgY3JlYXRlOiB1bml0IC0+IHRcblxuICB2YWwgc2V0X3N0YXJ0OiB0IC0+IHRyYW5zZm9ybWF0aW9uOk1hdHJpeC50IC0+IHg6ZmxvYXQgLT4geTpmbG9hdCAtPiB1bml0XG4gIHZhbCBzZXRfc3RhcnRfaWZfbm9uZTogdCAtPiB0cmFuc2Zvcm1hdGlvbjpNYXRyaXgudCAtPiB4OmZsb2F0IC0+IHk6ZmxvYXQgLT4gdW5pdFxuICB2YWwgcmVzZXRfc3RhcnQ6IHQgLT4gdW5pdFxuXG4gIHZhbCBzZXRfY3VycmVudDogdCAtPiB0cmFuc2Zvcm1hdGlvbjpNYXRyaXgudCAtPiB4OmZsb2F0IC0+IHk6ZmxvYXQgLT4gdW5pdFxuICB2YWwgc2V0X2N1cnJlbnRfZnJvbV9zdGFydDogdCAtPiB1bml0XG4gIHZhbCByZXNldF9jdXJyZW50OiB0IC0+IHVuaXRcbiAgdmFsIGN1cnJlbnQ6IHQgLT4gdHJhbnNmb3JtYXRpb246TWF0cml4LnQgLT4gKGZsb2F0ICogZmxvYXQpIG9wdGlvblxuZW5kID0gc3RydWN0XG4gIHR5cGUgdCA9IHtcbiAgICBtdXRhYmxlIHN0YXJ0OiAoZmxvYXQgKiBmbG9hdCkgb3B0aW9uO1xuICAgIG11dGFibGUgY3VycmVudDogKGZsb2F0ICogZmxvYXQpIG9wdGlvbjtcbiAgfVxuXG4gIGxldCBjcmVhdGUgKCkgPSB7XG4gICAgc3RhcnQgPSBOb25lO1xuICAgIGN1cnJlbnQgPSBOb25lO1xuICB9XG5cbiAgbGV0IHNldF9zdGFydCBwb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55ID1cbiAgICBwb2ludHMuc3RhcnQgPC0gU29tZSAoTWF0cml4LnRyYW5zZm9ybV9wb2ludCB0cmFuc2Zvcm1hdGlvbiB4IHkpXG5cbiAgbGV0IHNldF9zdGFydF9pZl9ub25lIHBvaW50cyB+dHJhbnNmb3JtYXRpb24gfnggfnkgPVxuICAgIGlmIHBvaW50cy5zdGFydCA9IE5vbmUgdGhlblxuICAgIHBvaW50cy5zdGFydCA8LSBTb21lIChNYXRyaXgudHJhbnNmb3JtX3BvaW50IHRyYW5zZm9ybWF0aW9uIHggeSlcblxuICBsZXQgcmVzZXRfc3RhcnQgcG9pbnRzID1cbiAgICBwb2ludHMuc3RhcnQgPC0gTm9uZVxuXG4gIGxldCBzZXRfY3VycmVudCBwb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55ID1cbiAgICBwb2ludHMuY3VycmVudCA8LSBTb21lIChNYXRyaXgudHJhbnNmb3JtX3BvaW50IHRyYW5zZm9ybWF0aW9uIHggeSlcblxuICBsZXQgc2V0X2N1cnJlbnRfZnJvbV9zdGFydCBwb2ludHMgPVxuICAgIHBvaW50cy5jdXJyZW50IDwtIHBvaW50cy5zdGFydFxuXG4gIGxldCByZXNldF9jdXJyZW50IHBvaW50cyA9XG4gICAgcG9pbnRzLmN1cnJlbnQgPC0gTm9uZVxuXG4gIGxldCBjdXJyZW50IHBvaW50cyB+dHJhbnNmb3JtYXRpb24gPVxuICAgIG1hdGNoIHBvaW50cy5jdXJyZW50IHdpdGhcbiAgICAgIHwgTm9uZSAtPiBOb25lXG4gICAgICB8IFNvbWUgKHgsIHkpIC0+IFNvbWUgKE1hdHJpeC50cmFuc2Zvcm1fcG9pbnQgKE1hdHJpeC5pbml0X2ludmVyc2UgdHJhbnNmb3JtYXRpb24pIHggeSlcbmVuZFxuIiwiKCogQ29weXJpZ2h0IDIwMTctMjAxOCBWaW5jZW50IEphY3F1ZXMgPHZpbmNlbnRAdmluY2VudC1qYWNxdWVzLm5ldD4gKilcblxubW9kdWxlIHR5cGUgUyA9IHNpZ1xuICAjaW5jbHVkZSBcIlMuaW5jbC5tbGlcIlxuZW5kXG5cbm1vZHVsZSBNb2NrID0gc3RydWN0XG4gICNpbmNsdWRlIFwiQmFja2VuZC5pbmNsLm1sXCJcblxuICBsZXQgKCkgPSBQcmludGV4Yy5yZWdpc3Rlcl9wcmludGVyIChmdW5jdGlvblxuICAgIHwgRXJyb3Igc3RhdHVzIC0+IFNvbWUgKFByaW50Zi5zcHJpbnRmIFwiQ2Fpcm9Nb2NrLkVycm9yKCVzKVwiIChzdGF0dXNfcmVwciBzdGF0dXMpKVxuICAgIHwgXyAtPiBOb25lXG4gIClcblxuICBtb2R1bGUgU3RhdGUgPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPSB7XG4gICAgICBkYXNoZXM6IGZsb2F0IGFycmF5O1xuICAgICAgZmlsbF9ydWxlOiBmaWxsX3J1bGU7XG4gICAgICBmb250OiBmb250O1xuICAgICAgbGluZV9jYXA6IGxpbmVfY2FwO1xuICAgICAgbGluZV9qb2luOiBsaW5lX2pvaW47XG4gICAgICBsaW5lX3dpZHRoOiBmbG9hdDtcbiAgICAgIG1pdGVyX2xpbWl0OiBmbG9hdDtcbiAgICAgIG9mczogZmxvYXQ7XG4gICAgICBvcGVyYXRvcjogb3BlcmF0b3I7XG4gICAgICBzb3VyY2U6IFBhdHRlcm4uc291cmNlO1xuICAgICAgdHJhbnNmb3JtYXRpb246IE1hdHJpeC50O1xuICAgIH1cbiAgZW5kXG5cbiAgdHlwZSBjb250ZXh0ID0ge1xuICAgIG11dGFibGUgc3RhdGVzOiBTdGF0ZS50IGxpc3Q7XG4gICAgcG9pbnRzOiBQb2ludHMudDtcbiAgfVxuXG4gIGxldCBjcmVhdGUgKCkgPSB7XG4gICAgc3RhdGVzID0gW1xuICAgICAge1xuICAgICAgICBkYXNoZXMgPSBbfHxdO1xuICAgICAgICBmaWxsX3J1bGUgPSBXSU5ESU5HO1xuICAgICAgICBmb250ID0ge1xuICAgICAgICAgIHNsYW50ID0gVXByaWdodDtcbiAgICAgICAgICB3ZWlnaHQgPSBOb3JtYWw7XG4gICAgICAgICAgc2l6ZSA9IDEwLjtcbiAgICAgICAgICBmYW1pbHkgPSBcInNhbnMtc2VyaWZcIjtcbiAgICAgICAgfTtcbiAgICAgICAgbGluZV9jYXAgPSBCVVRUO1xuICAgICAgICBsaW5lX2pvaW4gPSBKT0lOX01JVEVSO1xuICAgICAgICBsaW5lX3dpZHRoID0gMi47XG4gICAgICAgIG1pdGVyX2xpbWl0ID0gMTAuO1xuICAgICAgICBvZnMgPSAwLjtcbiAgICAgICAgb3BlcmF0b3IgPSBPVkVSO1xuICAgICAgICBzb3VyY2UgPSAhKFBhdHRlcm4uY3JlYXRlX3JnYiAwLiAwLiAwLik7XG4gICAgICAgIHRyYW5zZm9ybWF0aW9uID0gTWF0cml4LmluaXRfaWRlbnRpdHkgKCk7XG4gICAgICB9O1xuICAgIF07XG4gICAgcG9pbnRzID0gUG9pbnRzLmNyZWF0ZSAoKTtcbiAgfVxuXG4gIGxldCBzdGF0ZSB7c3RhdGVzOyBffSA9XG4gICAgTGlzdC5oZCBzdGF0ZXNcblxuICBsZXQgbXV0YXRlX3N0YXRlIGNvbnRleHQgZiA9XG4gICAgbGV0IHN0YXRlID0gZiAoc3RhdGUgY29udGV4dCkgaW5cbiAgICBjb250ZXh0LnN0YXRlcyA8LSBzdGF0ZTo6KExpc3QudGwgY29udGV4dC5zdGF0ZXMpXG5cblxuICBsZXQgc2F2ZSBjb250ZXh0ID1cbiAgICBjb250ZXh0LnN0YXRlcyA8LSAoc3RhdGUgY29udGV4dCk6OmNvbnRleHQuc3RhdGVzXG5cbiAgbGV0IHJlc3RvcmUgY29udGV4dCA9XG4gICAgbGV0IHN0YXRlcyA9XG4gICAgICBtYXRjaCBjb250ZXh0LnN0YXRlcyB3aXRoXG4gICAgICAgIHwgW10gKCpCSVNFQ1QtSUdOT1JFKikgKCogVGhpcyBjYW5ub3QgaGFwcGVuOiByZXN0b3JlIGlzIHRoZSBvbmx5IGZ1bmN0aW9uIHJlbW92aW5nIHN0YXRlcyBhbmQgaXQgcmVmdXNlcyB0byByZW1vdmUgdGhlIGxhc3Qgb25lLiAqKVxuICAgICAgICB8IFtfXSAtPiByYWlzZSAoRXJyb3IgSU5WQUxJRF9SRVNUT1JFKVxuICAgICAgICB8IF86OnN0YXRlcyAtPiBzdGF0ZXNcbiAgICBpblxuICAgIGNvbnRleHQuc3RhdGVzIDwtIHN0YXRlc1xuXG5cbiAgbGV0IHNldF9tYXRyaXggY29udGV4dCB0cmFuc2Zvcm1hdGlvbiA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggdHJhbnNmb3JtYXRpb259KVxuXG4gIGxldCBnZXRfbWF0cml4IGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS50cmFuc2Zvcm1hdGlvblxuXG4gIGxldCB0cmFuc2Zvcm1fIG0gcyA9XG4gICAge3Mgd2l0aCBTdGF0ZS50cmFuc2Zvcm1hdGlvbj1NYXRyaXgubXVsdGlwbHkgcy5TdGF0ZS50cmFuc2Zvcm1hdGlvbiBtfVxuXG4gIGxldCB0cmFuc2Zvcm0gY29udGV4dCBtID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAodHJhbnNmb3JtXyBtKVxuXG4gIGxldCBzY2FsZSBjb250ZXh0IHggeSA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKHRyYW5zZm9ybV8gKE1hdHJpeC5pbml0X3NjYWxlIHggeSkpXG5cbiAgbGV0IHRyYW5zbGF0ZSBjb250ZXh0IHggeSA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKHRyYW5zZm9ybV8gKE1hdHJpeC5pbml0X3RyYW5zbGF0ZSB4IHkpKVxuXG4gIGxldCByb3RhdGUgY29udGV4dCBhbmdsZSA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKHRyYW5zZm9ybV8gKE1hdHJpeC5pbml0X3JvdGF0ZSBhbmdsZSkpXG5cbiAgbGV0IGlkZW50aXR5X21hdHJpeCBjb250ZXh0ID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCB0cmFuc2Zvcm1hdGlvbj1NYXRyaXguaW5pdF9pZGVudGl0eSAoKX0pXG5cbiAgbGV0IGRldmljZV90b191c2VyIGNvbnRleHQgeCB5ID1cbiAgICBNYXRyaXgudHJhbnNmb3JtX3BvaW50IChNYXRyaXguaW5pdF9pbnZlcnNlIChzdGF0ZSBjb250ZXh0KS50cmFuc2Zvcm1hdGlvbikgeCB5XG5cbiAgbGV0IGRldmljZV90b191c2VyX2Rpc3RhbmNlIGNvbnRleHQgZHggZHkgPVxuICAgIE1hdHJpeC50cmFuc2Zvcm1fZGlzdGFuY2UgKE1hdHJpeC5pbml0X2ludmVyc2UgKHN0YXRlIGNvbnRleHQpLnRyYW5zZm9ybWF0aW9uKSB+ZHggfmR5XG5cbiAgbGV0IHVzZXJfdG9fZGV2aWNlIGNvbnRleHQgeCB5ID1cbiAgICBNYXRyaXgudHJhbnNmb3JtX3BvaW50IChzdGF0ZSBjb250ZXh0KS50cmFuc2Zvcm1hdGlvbiB4IHlcblxuICBsZXQgdXNlcl90b19kZXZpY2VfZGlzdGFuY2UgY29udGV4dCBkeCBkeSA9XG4gICAgTWF0cml4LnRyYW5zZm9ybV9kaXN0YW5jZSAoc3RhdGUgY29udGV4dCkudHJhbnNmb3JtYXRpb24gfmR4IH5keVxuXG5cbiAgbGV0IG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQgfmN1cnJlbnQgPVxuICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IChzdGF0ZSBjb250ZXh0KS50cmFuc2Zvcm1hdGlvbiBpblxuICAgIGxldCBtYWtlX3JlbGF0aXZlIH5keCB+ZHkgPVxuICAgICAgbGV0ICh4LCB5KSA9XG4gICAgICAgIG1hdGNoIFBvaW50cy5jdXJyZW50IGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB3aXRoXG4gICAgICAgICAgfCBOb25lIC0+IHJhaXNlIChFcnJvciBOT19DVVJSRU5UX1BPSU5UKVxuICAgICAgICAgIHwgU29tZSAoeCwgeSkgLT4gKHgsIHkpXG4gICAgICBpblxuICAgICAgKHggKy4gZHgsIHkgKy4gZHkpXG4gICAgaW5cbiAgICBiZWdpbiBtYXRjaCBzdGFydCB3aXRoXG4gICAgICB8IGBOb25lIC0+ICgpXG4gICAgICB8IGBSZXNldCAtPiBQb2ludHMucmVzZXRfc3RhcnQgY29udGV4dC5wb2ludHNcbiAgICAgIHwgYElmTm9uZSAoeCwgeSkgLT4gUG9pbnRzLnNldF9zdGFydF9pZl9ub25lIGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB+eCB+eVxuICAgICAgfCBgU2V0ICh4LCB5KSAtPiBQb2ludHMuc2V0X3N0YXJ0IGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB+eCB+eVxuICAgICAgfCBgUmVsYXRpdmUgKGR4LCBkeSkgLT5cbiAgICAgICAgbGV0ICh4LCB5KSA9IG1ha2VfcmVsYXRpdmUgfmR4IH5keSBpblxuICAgICAgICBQb2ludHMuc2V0X3N0YXJ0IGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB+eCB+eVxuICAgIGVuZDtcbiAgICBiZWdpbiBtYXRjaCBjdXJyZW50IHdpdGhcbiAgICAgIHwgYFJlc2V0IC0+IFBvaW50cy5yZXNldF9jdXJyZW50IGNvbnRleHQucG9pbnRzXG4gICAgICB8IGBGcm9tU3RhcnQgLT4gUG9pbnRzLnNldF9jdXJyZW50X2Zyb21fc3RhcnQgY29udGV4dC5wb2ludHNcbiAgICAgIHwgYFNldCAoeCwgeSkgLT4gUG9pbnRzLnNldF9jdXJyZW50IGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB+eCB+eVxuICAgICAgfCBgUmVsYXRpdmUgKGR4LCBkeSkgLT5cbiAgICAgICAgbGV0ICh4LCB5KSA9IG1ha2VfcmVsYXRpdmUgfmR4IH5keSBpblxuICAgICAgICBQb2ludHMuc2V0X2N1cnJlbnQgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55XG4gICAgZW5kXG5cblxuICBsZXQgbW92ZV90byBjb250ZXh0IHggeSA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYFNldCAoeCwgeSkpIH5jdXJyZW50OmBGcm9tU3RhcnRcblxuICBsZXQgcmVsX21vdmVfdG8gY29udGV4dCB4IHkgPVxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6KGBSZWxhdGl2ZSAoeCwgeSkpIH5jdXJyZW50OmBGcm9tU3RhcnRcblxuICBsZXQgbGluZV90byBjb250ZXh0IHggeSA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYElmTm9uZSAoeCwgeSkpIH5jdXJyZW50OihgU2V0ICh4LCB5KSlcblxuICBsZXQgcmVsX2xpbmVfdG8gY29udGV4dCB4IHkgPVxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6KGBJZk5vbmUgKHgsIHkpKSB+Y3VycmVudDooYFJlbGF0aXZlICh4LCB5KSlcblxuICBsZXQgY3VydmVfdG8gY29udGV4dCB4MSB5MSBfIF8geDMgeTMgPVxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6KGBJZk5vbmUgKHgxLCB5MSkpIH5jdXJyZW50OihgU2V0ICh4MywgeTMpKVxuXG4gIGxldCByZWxfY3VydmVfdG8gY29udGV4dCB4MSB5MSBfIF8geDMgeTMgPVxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6KGBJZk5vbmUgKHgxLCB5MSkpIH5jdXJyZW50OihgUmVsYXRpdmUgKHgzLCB5MykpXG5cbiAgbGV0IHJlY3RhbmdsZSBjb250ZXh0IHggeSB+dzpfIH5oOl8gPVxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6YE5vbmUgfmN1cnJlbnQ6KGBTZXQgKHgsIHkpKVxuXG4gIGxldCBhcmMgY29udGV4dCB4IHkgfnIgfmExIH5hMiA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYElmTm9uZSAoeCArLiByICouIChjb3MgYTEpLCB5ICsuIHIgKi4gKHNpbiBhMSkpKSB+Y3VycmVudDooYFNldCAoeCArLiByICouIChjb3MgYTIpLCB5ICsuIHIgKi4gKHNpbiBhMikpKVxuXG4gIGxldCBhcmNfbmVnYXRpdmUgY29udGV4dCB4IHkgfnIgfmExIH5hMiA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDooYElmTm9uZSAoeCArLiByICouIChjb3MgYTEpLCB5ICsuIHIgKi4gKHNpbiBhMSkpKSB+Y3VycmVudDooYFNldCAoeCArLiByICouIChjb3MgYTIpLCB5ICsuIHIgKi4gKHNpbiBhMikpKVxuXG4gIG1vZHVsZSBQYXRoID0gc3RydWN0XG4gICAgbGV0IGdldF9jdXJyZW50X3BvaW50IGNvbnRleHQgPVxuICAgICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gKHN0YXRlIGNvbnRleHQpLnRyYW5zZm9ybWF0aW9uIGluXG4gICAgICBtYXRjaCBQb2ludHMuY3VycmVudCB+dHJhbnNmb3JtYXRpb24gY29udGV4dC5wb2ludHMgd2l0aFxuICAgICAgICB8IE5vbmUgLT4gKDAuLCAwLilcbiAgICAgICAgfCBTb21lICh4LCB5KSAtPiAoeCwgeSlcblxuICAgIGxldCBjbGVhciBjb250ZXh0ID1cbiAgICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6YFJlc2V0IH5jdXJyZW50OmBSZXNldFxuXG4gICAgbGV0IGNsb3NlIGNvbnRleHQgPVxuICAgICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDpgTm9uZSB+Y3VycmVudDpgRnJvbVN0YXJ0XG4gIGVuZFxuXG4gIGxldCBzdHJva2VfcHJlc2VydmUgXyA9XG4gICAgKClcblxuICBsZXQgc3Ryb2tlIGNvbnRleHQgPVxuICAgIG11dGF0ZV9wb2ludHMgY29udGV4dCB+c3RhcnQ6YFJlc2V0IH5jdXJyZW50OmBSZXNldFxuXG4gIGxldCBmaWxsX3ByZXNlcnZlIF8gPVxuICAgICgpXG5cbiAgbGV0IGZpbGwgY29udGV4dCA9XG4gICAgbXV0YXRlX3BvaW50cyBjb250ZXh0IH5zdGFydDpgUmVzZXQgfmN1cnJlbnQ6YFJlc2V0XG5cbiAgbGV0IGNsaXBfcHJlc2VydmUgXyA9XG4gICAgKClcblxuICBsZXQgY2xpcCBjb250ZXh0ID1cbiAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OmBSZXNldCB+Y3VycmVudDpgUmVzZXRcblxuICBsZXQgcGFpbnQgP2FscGhhOl8gXyA9XG4gICAgKClcblxuXG4gIGxldCBzZXRfbGluZV93aWR0aCBjb250ZXh0IGxpbmVfd2lkdGggPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIGxpbmVfd2lkdGh9KVxuXG4gIGxldCBnZXRfbGluZV93aWR0aCBjb250ZXh0ID1cbiAgICAoc3RhdGUgY29udGV4dCkubGluZV93aWR0aFxuXG4gIGxldCBzZXRfZGFzaCBjb250ZXh0ID8ob2ZzPTAuKSBkYXNoZXMgPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIGRhc2hlczsgb2ZzfSlcblxuICBsZXQgZ2V0X2Rhc2ggY29udGV4dCA9XG4gICAgbGV0IHN0YXRlID0gc3RhdGUgY29udGV4dCBpblxuICAgIChzdGF0ZS5kYXNoZXMsIHN0YXRlLm9mcylcblxuICBsZXQgc2V0X2ZpbGxfcnVsZSBjb250ZXh0IGZpbGxfcnVsZSA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggZmlsbF9ydWxlfSlcblxuICBsZXQgZ2V0X2ZpbGxfcnVsZSBjb250ZXh0ID1cbiAgICAoc3RhdGUgY29udGV4dCkuZmlsbF9ydWxlXG5cbiAgbGV0IHNldF9saW5lX2NhcCBjb250ZXh0IGxpbmVfY2FwID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBsaW5lX2NhcH0pXG5cbiAgbGV0IGdldF9saW5lX2NhcCBjb250ZXh0ID1cbiAgICAoc3RhdGUgY29udGV4dCkubGluZV9jYXBcblxuICBsZXQgc2V0X2xpbmVfam9pbiBjb250ZXh0IGxpbmVfam9pbiA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggbGluZV9qb2lufSlcblxuICBsZXQgZ2V0X2xpbmVfam9pbiBjb250ZXh0ID1cbiAgICAoc3RhdGUgY29udGV4dCkubGluZV9qb2luXG5cbiAgbGV0IHNldF9taXRlcl9saW1pdCBjb250ZXh0IG1pdGVyX2xpbWl0ID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBtaXRlcl9saW1pdH0pXG5cbiAgbGV0IGdldF9taXRlcl9saW1pdCBjb250ZXh0ID1cbiAgICAoc3RhdGUgY29udGV4dCkubWl0ZXJfbGltaXRcblxuICBsZXQgc2V0X29wZXJhdG9yIGNvbnRleHQgb3BlcmF0b3IgPVxuICAgIG11dGF0ZV9zdGF0ZSBjb250ZXh0IChmdW4gcyAtPiB7cyB3aXRoIG9wZXJhdG9yfSlcblxuICBsZXQgZ2V0X29wZXJhdG9yIGNvbnRleHQgPVxuICAgIChzdGF0ZSBjb250ZXh0KS5vcGVyYXRvclxuXG5cbiAgbGV0IHNldF9zb3VyY2UgY29udGV4dCBwYXR0ZXJuID1cbiAgICBsZXQgc291cmNlID0gIXBhdHRlcm4gaW5cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBzb3VyY2V9KVxuXG4gIGxldCBnZXRfc291cmNlIGNvbnRleHQgPVxuICAgIHJlZiAoc3RhdGUgY29udGV4dCkuc291cmNlXG5cbiAgbGV0IHNldF9zb3VyY2VfcmdiIGNvbnRleHQgciBnIGIgPVxuICAgIGxldCBzb3VyY2UgPSAhKFBhdHRlcm4uY3JlYXRlX3JnYiByIGcgYikgaW5cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBzb3VyY2V9KVxuXG4gIGxldCBzZXRfc291cmNlX3JnYmEgY29udGV4dCByIGcgYiBhID1cbiAgICBsZXQgc291cmNlID0gIShQYXR0ZXJuLmNyZWF0ZV9yZ2JhIHIgZyBiIGEpIGluXG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggc291cmNlfSlcblxuXG4gIGxldCBzZWxlY3RfZm9udF9mYWNlIGNvbnRleHQgPyhzbGFudD1VcHJpZ2h0KSA/KHdlaWdodD1Ob3JtYWwpIGZhbWlseSA9XG4gICAgbXV0YXRlX3N0YXRlIGNvbnRleHQgKGZ1biBzIC0+IHtzIHdpdGggZm9udD17cy5mb250IHdpdGggc2xhbnQ7IHdlaWdodDsgZmFtaWx5fX0pXG5cbiAgbGV0IHNldF9mb250X3NpemUgY29udGV4dCBzaXplID1cbiAgICBtdXRhdGVfc3RhdGUgY29udGV4dCAoZnVuIHMgLT4ge3Mgd2l0aCBmb250PXtzLmZvbnQgd2l0aCBzaXplfX0pXG5cbiAgbGV0IHNob3dfdGV4dCBjb250ZXh0IHMgPVxuICAgIGxldCAoeCwgeSkgPVxuICAgICAgUGF0aC5nZXRfY3VycmVudF9wb2ludCBjb250ZXh0XG4gICAgYW5kIHdpZHRoID1cbiAgICAgIChzdGF0ZSBjb250ZXh0KS5mb250LnNpemUgKi4gMC44ICouIChmbG9hdF9vZl9pbnQgKFN0cmluZy5sZW5ndGggcykpXG4gICAgaW5cbiAgICBtdXRhdGVfcG9pbnRzIGNvbnRleHQgfnN0YXJ0OmBOb25lIH5jdXJyZW50OihgU2V0ICh4ICsuIHdpZHRoLCB5KSlcblxuICBsZXQgZm9udF9leHRlbnRzIGNvbnRleHQgPVxuICAgIGxldCBhc2NlbnQgPSAoc3RhdGUgY29udGV4dCkuZm9udC5zaXplIGluXG4gICAge1xuICAgICAgYXNjZW50O1xuICAgICAgZGVzY2VudD1hc2NlbnQgLy4gNC47XG4gICAgICBiYXNlbGluZT0wLjtcbiAgICAgIG1heF94X2FkdmFuY2U9Mi4gKi4gYXNjZW50O1xuICAgICAgbWF4X3lfYWR2YW5jZT0wLjtcbiAgICB9XG5cbiAgbGV0IHRleHRfZXh0ZW50cyBjb250ZXh0IHMgPVxuICAgIGxldCB3aWR0aCA9XG4gICAgICAoc3RhdGUgY29udGV4dCkuZm9udC5zaXplICouIDAuOCAqLiAoZmxvYXRfb2ZfaW50IChTdHJpbmcubGVuZ3RoIHMpKVxuICAgIGFuZCBoZWlnaHQgPVxuICAgICAgKHN0YXRlIGNvbnRleHQpLmZvbnQuc2l6ZVxuICAgIGluXG4gICAge3hfYmVhcmluZz0wLjsgeV9iZWFyaW5nPTAuOyB3aWR0aDsgaGVpZ2h0OyB4X2FkdmFuY2U9d2lkdGg7IHlfYWR2YW5jZT0wLn1cbmVuZFxuXG5tb2R1bGUgRGVjb3JhdGUoQzogUykgPSBzdHJ1Y3RcbiAgb3BlbiBTdGRMYWJlbHNcblxuICB0eXBlIGZpbGxfcnVsZSA9IEMuZmlsbF9ydWxlID1cbiAgICB8IFdJTkRJTkdcbiAgICB8IEVWRU5fT0REXG5cbiAgdHlwZSBsaW5lX2NhcCA9IEMubGluZV9jYXAgPVxuICAgIHwgQlVUVFxuICAgIHwgUk9VTkRcbiAgICB8IFNRVUFSRVxuXG4gIHR5cGUgbGluZV9qb2luID0gQy5saW5lX2pvaW4gPVxuICAgIHwgSk9JTl9NSVRFUlxuICAgIHwgSk9JTl9ST1VORFxuICAgIHwgSk9JTl9CRVZFTFxuXG4gIHR5cGUgbWF0cml4ID0gQy5tYXRyaXg9IHtcbiAgICBtdXRhYmxlIHh4OiBmbG9hdDtcbiAgICBtdXRhYmxlIHl4OiBmbG9hdDtcbiAgICBtdXRhYmxlIHh5OiBmbG9hdDtcbiAgICBtdXRhYmxlIHl5OiBmbG9hdDtcbiAgICBtdXRhYmxlIHgwOiBmbG9hdDtcbiAgICBtdXRhYmxlIHkwOiBmbG9hdDtcbiAgfVxuXG4gIHR5cGUgdGV4dF9leHRlbnRzID0gQy50ZXh0X2V4dGVudHMgPSB7XG4gICAgeF9iZWFyaW5nIDogZmxvYXQ7XG4gICAgeV9iZWFyaW5nIDogZmxvYXQ7XG4gICAgd2lkdGggOiBmbG9hdDtcbiAgICBoZWlnaHQgOiBmbG9hdDtcbiAgICB4X2FkdmFuY2UgOiBmbG9hdDtcbiAgICB5X2FkdmFuY2UgOiBmbG9hdDtcbiAgfVxuXG4gIHR5cGUgZm9udF9leHRlbnRzID0gQy5mb250X2V4dGVudHMgPSB7XG4gICAgYXNjZW50OiBmbG9hdDtcbiAgICBkZXNjZW50OiBmbG9hdDtcbiAgICBiYXNlbGluZTogZmxvYXQ7XG4gICAgbWF4X3hfYWR2YW5jZTogZmxvYXQ7XG4gICAgbWF4X3lfYWR2YW5jZTogZmxvYXQ7XG4gIH1cblxuICB0eXBlIG9wZXJhdG9yID0gQy5vcGVyYXRvciA9XG4gICAgfCBDTEVBUlxuICAgIHwgU09VUkNFXG4gICAgfCBPVkVSXG4gICAgfCBJTlxuICAgIHwgT1VUXG4gICAgfCBBVE9QXG4gICAgfCBERVNUXG4gICAgfCBERVNUX09WRVJcbiAgICB8IERFU1RfSU5cbiAgICB8IERFU1RfT1VUXG4gICAgfCBERVNUX0FUT1BcbiAgICB8IFhPUlxuICAgIHwgQUREXG4gICAgfCBTQVRVUkFURVxuXG4gIHR5cGUgd2VpZ2h0ID0gQy53ZWlnaHQgPVxuICAgIHwgTm9ybWFsXG4gICAgfCBCb2xkXG5cbiAgdHlwZSBzbGFudCA9IEMuc2xhbnQgPVxuICAgIHwgVXByaWdodFxuICAgIHwgSXRhbGljXG4gICAgfCBPYmxpcXVlXG5cbiAgdHlwZSBzdGF0dXMgPSBDLnN0YXR1cyA9XG4gICAgfCBJTlZBTElEX1JFU1RPUkVcbiAgICB8IElOVkFMSURfUE9QX0dST1VQXG4gICAgfCBOT19DVVJSRU5UX1BPSU5UXG4gICAgfCBJTlZBTElEX01BVFJJWFxuICAgIHwgSU5WQUxJRF9TVEFUVVNcbiAgICB8IE5VTExfUE9JTlRFUlxuICAgIHwgSU5WQUxJRF9TVFJJTkdcbiAgICB8IElOVkFMSURfUEFUSF9EQVRBXG4gICAgfCBSRUFEX0VSUk9SXG4gICAgfCBXUklURV9FUlJPUlxuICAgIHwgU1VSRkFDRV9GSU5JU0hFRFxuICAgIHwgU1VSRkFDRV9UWVBFX01JU01BVENIXG4gICAgfCBQQVRURVJOX1RZUEVfTUlTTUFUQ0hcbiAgICB8IElOVkFMSURfQ09OVEVOVFxuICAgIHwgSU5WQUxJRF9GT1JNQVRcbiAgICB8IElOVkFMSURfVklTVUFMXG4gICAgfCBGSUxFX05PVF9GT1VORFxuICAgIHwgSU5WQUxJRF9EQVNIXG4gICAgfCBJTlZBTElEX0RTQ19DT01NRU5UXG4gICAgfCBJTlZBTElEX0lOREVYXG4gICAgfCBDTElQX05PVF9SRVBSRVNFTlRBQkxFXG4gICAgfCBURU1QX0ZJTEVfRVJST1JcbiAgICB8IElOVkFMSURfU1RSSURFXG4gICAgfCBGT05UX1RZUEVfTUlTTUFUQ0hcbiAgICB8IFVTRVJfRk9OVF9JTU1VVEFCTEVcbiAgICB8IFVTRVJfRk9OVF9FUlJPUlxuICAgIHwgTkVHQVRJVkVfQ09VTlRcbiAgICB8IElOVkFMSURfQ0xVU1RFUlNcbiAgICB8IElOVkFMSURfU0xBTlRcbiAgICB8IElOVkFMSURfV0VJR0hUXG4gICAgfCBJTlZBTElEX1NJWkVcbiAgICB8IFVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URURcbiAgICB8IERFVklDRV9UWVBFX01JU01BVENIXG4gICAgfCBERVZJQ0VfRVJST1JcbiAgICB8IElOVkFMSURfTUVTSF9DT05TVFJVQ1RJT05cbiAgICB8IERFVklDRV9GSU5JU0hFRFxuICAgIHwgSkJJRzJfR0xPQkFMX01JU1NJTkdcblxuICBtb2R1bGUgUGF0dGVybiA9IEMuUGF0dGVyblxuXG4gIG1vZHVsZSBNYXRyaXggPSBDLk1hdHJpeFxuXG4gIGV4Y2VwdGlvbiBFcnJvciA9IEMuRXJyb3JcblxuICBleGNlcHRpb24gVW5hdmFpbGFibGUgPSBDLlVuYXZhaWxhYmxlXG5cbiAgbGV0IHN0YXR1c190b19zdHJpbmcgPSBDLnN0YXR1c190b19zdHJpbmdcblxuICBtb2R1bGUgUCA9IHN0cnVjdFxuICAgIG9wZW4gQ1xuXG4gICAgbGV0IHVuaXQgKCkgPVxuICAgICAgXCJcIlxuXG4gICAgbGV0IGZsb2F0IHggPVxuICAgICAgUHJpbnRmLnNwcmludGYgXCIlLjJmXCIgeFxuXG4gICAgbGV0IG1hdHJpeCB7eHg7IHh5OyB5eDsgeXk7IHgwOyB5MH0gPVxuICAgICAgUHJpbnRmLnNwcmludGYgXCJ7eHg9JS4yZjsgeHk9JS4yZjsgeXg9JS4yZjsgeXk9JS4yZjsgeDA9JS4yZjsgeTA9JS4yZn1cIiB4eCB4eSB5eCB5eSB4MCB5MFxuXG4gICAgbGV0IGNvb3JkcyAoeCwgeSkgPVxuICAgICAgUHJpbnRmLnNwcmludGYgXCIoJS4yZiwgJS4yZilcIiB4IHlcblxuICAgIGxldCBkYXNoZXMgZGFzaGVzID1cbiAgICAgIGRhc2hlc1xuICAgICAgfD4gQXJyYXkudG9fbGlzdFxuICAgICAgfD4gTGlzdC5tYXAgfmY6KFByaW50Zi5zcHJpbnRmIFwiJS4yZlwiKVxuICAgICAgfD4gU3RyaW5nLmNvbmNhdCB+c2VwOlwiOyBcIlxuICAgICAgfD4gUHJpbnRmLnNwcmludGYgXCJbfCVzfF1cIlxuXG4gICAgbGV0IGRhc2hlc19vZnMgKGRzLCBvZnMpID1cbiAgICAgIFByaW50Zi5zcHJpbnRmIFwiKCVzLCAlLjJmKVwiIChkYXNoZXMgZHMpIG9mc1xuXG4gICAgbGV0IGZpbGxfcnVsZSA9IGZ1bmN0aW9uXG4gICAgICB8IFdJTkRJTkcgLT4gXCJXSU5ESU5HXCJcbiAgICAgIHwgRVZFTl9PREQgLT4gXCJFVkVOX09ERFwiXG5cbiAgICBsZXQgbGluZV9jYXAgPSBmdW5jdGlvblxuICAgICAgfCBCVVRUIC0+IFwiQlVUVFwiXG4gICAgICB8IFJPVU5EIC0+IFwiUk9VTkRcIlxuICAgICAgfCBTUVVBUkUgLT4gXCJTUVVBUkVcIlxuXG4gICAgbGV0IGxpbmVfam9pbiA9IGZ1bmN0aW9uXG4gICAgICB8IEpPSU5fTUlURVIgLT4gXCJKT0lOX01JVEVSXCJcbiAgICAgIHwgSk9JTl9ST1VORCAtPiBcIkpPSU5fUk9VTkRcIlxuICAgICAgfCBKT0lOX0JFVkVMIC0+IFwiSk9JTl9CRVZFTFwiXG5cbiAgICBsZXQgb3BlcmF0b3IgPSBmdW5jdGlvblxuICAgICAgfCBDTEVBUiAtPiBcIkNMRUFSXCJcbiAgICAgIHwgU09VUkNFIC0+IFwiU09VUkNFXCJcbiAgICAgIHwgT1ZFUiAtPiBcIk9WRVJcIlxuICAgICAgfCBJTiAtPiBcIklOXCJcbiAgICAgIHwgT1VUIC0+IFwiT1VUXCJcbiAgICAgIHwgQVRPUCAtPiBcIkFUT1BcIlxuICAgICAgfCBERVNUIC0+IFwiREVTVFwiXG4gICAgICB8IERFU1RfT1ZFUiAtPiBcIkRFU1RfT1ZFUlwiXG4gICAgICB8IERFU1RfSU4gLT4gXCJERVNUX0lOXCJcbiAgICAgIHwgREVTVF9PVVQgLT4gXCJERVNUX09VVFwiXG4gICAgICB8IERFU1RfQVRPUCAtPiBcIkRFU1RfQVRPUFwiXG4gICAgICB8IFhPUiAtPiBcIlhPUlwiXG4gICAgICB8IEFERCAtPiBcIkFERFwiXG4gICAgICB8IFNBVFVSQVRFIC0+IFwiU0FUVVJBVEVcIlxuXG4gICAgbGV0IHNvdXJjZSBzb3VyY2UgPSBQYXR0ZXJuLihcbiAgICAgIGxldCBnZXQgZ2V0ID1cbiAgICAgICAgdHJ5IFNvbWUgKGdldCBzb3VyY2UpIHdpdGggRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIIC0+IE5vbmVcbiAgICAgIGFuZCBzdG9wX3BvaW50cyAoKSA9XG4gICAgICAgIGxldCBjb3VudCA9IGdldF9jb2xvcl9zdG9wX2NvdW50IHNvdXJjZSBpblxuICAgICAgICBsZXQgc3RvcF9wb2ludHMgPSBBcnJheS5tYWtlIGNvdW50ICgwLiwgMC4sIDAuLCAwLiwgMC4pIGluXG4gICAgICAgIGZvciBpZHggPSAwIHRvIGNvdW50IC0gMSBkb1xuICAgICAgICAgIHN0b3BfcG9pbnRzLihpZHgpIDwtIGdldF9jb2xvcl9zdG9wX3JnYmEgc291cmNlIH5pZHhcbiAgICAgICAgZG9uZTtcbiAgICAgICAgc3RvcF9wb2ludHNcbiAgICAgICAgfD4gQXJyYXkudG9fbGlzdFxuICAgICAgICB8PiBMaXN0Lm1hcCB+ZjooZnVuIChwb3NpdGlvbiwgciwgZywgYiwgYSkgLT4gUHJpbnRmLnNwcmludGYgXCJ7cG9zaXRpb249JS4yZjsgcj0lLjJmOyBnPSUuMmY7IGI9JS4yZjsgYT0lLjJmfVwiIHBvc2l0aW9uIHIgZyBiIGEpXG4gICAgICAgIHw+IFN0cmluZy5jb25jYXQgfnNlcDpcIjsgXCJcbiAgICAgICAgfD4gUHJpbnRmLnNwcmludGYgXCJbJXNdXCJcbiAgICAgIGluXG4gICAgICBtYXRjaCBnZXQgZ2V0X3JnYmEgd2l0aFxuICAgICAgICB8IFNvbWUgKHIsIGcsIGIsIGEpIC0+XG4gICAgICAgICAgUHJpbnRmLnNwcmludGYgXCIoUmdiYSB7cj0lLjJmOyBnPSUuMmY7IGI9JS4yZjsgYT0lLjJmfSlcIiByIGcgYiBhXG4gICAgICAgIHwgTm9uZSAtPiBtYXRjaCBnZXQgZ2V0X2xpbmVhcl9wb2ludHMgd2l0aFxuICAgICAgICAgIHwgU29tZSAoeDEsIHkxLCB4MiwgeTIpIC0+XG4gICAgICAgICAgICBQcmludGYuc3ByaW50ZiBcIihMaW5lYXJHcmFkaWVudCB7eDA9JS4yZjsgeTA9JS4yZjsgeDE9JS4yZjsgeTE9JS4yZjsgc3RvcF9wb2ludHM9JXN9KVwiIHgxIHkxIHgyIHkyIChzdG9wX3BvaW50cyAoKSlcbiAgICAgICAgICB8IE5vbmUgLT5cbiAgICAgICAgICAgIGxldCAoeDEsIHkxLCByMSwgeDIsIHkyLCByMikgPSBnZXRfcmFkaWFsX2NpcmNsZXMgc291cmNlIGluXG4gICAgICAgICAgICBQcmludGYuc3ByaW50ZiBcIihSYWRpYWxHcmFkaWVudCB7eDA9JS4yZjsgeTA9JS4yZjsgcjA9JS4yZjsgeDE9JS4yZjsgeTE9JS4yZjsgcjElLjJmOyBzdG9wX3BvaW50cz0lc30pXCIgeDEgeTEgcjEgeDIgeTIgcjIgKHN0b3BfcG9pbnRzICgpKVxuICAgIClcblxuICAgIGxldCBmb250X2V4dGVudHMge2FzY2VudDsgZGVzY2VudDsgYmFzZWxpbmU7IG1heF94X2FkdmFuY2U7IG1heF95X2FkdmFuY2V9ID1cbiAgICAgIFByaW50Zi5zcHJpbnRmIFwie2FzY2VudD0lLjJmOyBkZXNjZW50PSUuMmY7IGJhc2VsaW5lPSUuMmY7IG1heF94X2FkdmFuY2U9JS4yZjsgbWF4X3lfYWR2YW5jZT0lLjJmfVwiIGFzY2VudCBkZXNjZW50IGJhc2VsaW5lIG1heF94X2FkdmFuY2UgbWF4X3lfYWR2YW5jZVxuXG4gICAgbGV0IHRleHRfZXh0ZW50cyB7eF9iZWFyaW5nOyB5X2JlYXJpbmc7IHdpZHRoOyBoZWlnaHQ7IHhfYWR2YW5jZTsgeV9hZHZhbmNlfSA9XG4gICAgICBQcmludGYuc3ByaW50ZiBcInt4X2JlYXJpbmc9JS4yZjsgeV9iZWFyaW5nPSUuMmY7IHdpZHRoPSUuMmY7IGhlaWdodD0lLjJmOyB4X2FkdmFuY2U9JS4yZjsgeV9hZHZhbmNlPSUuMmZ9XCIgeF9iZWFyaW5nIHlfYmVhcmluZyB3aWR0aCBoZWlnaHQgeF9hZHZhbmNlIHlfYWR2YW5jZVxuXG4gICAgbGV0IHNsYW50ID0gZnVuY3Rpb25cbiAgICAgIHwgVXByaWdodCAtPiBcIlVwcmlnaHRcIlxuICAgICAgfCBJdGFsaWMgLT4gXCJJdGFsaWNcIlxuICAgICAgfCBPYmxpcXVlIC0+IFwiT2JsaXF1ZVwiXG5cbiAgICBsZXQgd2VpZ2h0ID0gZnVuY3Rpb25cbiAgICAgIHwgTm9ybWFsIC0+IFwiTm9ybWFsXCJcbiAgICAgIHwgQm9sZCAtPiBcIkJvbGRcIlxuICBlbmRcblxuICBtb2R1bGUgQSA9IHN0cnVjdFxuICAgIGxldCBtYXRyaXggKCkgPVxuICAgICAgUC5tYXRyaXhcblxuICAgIGxldCBvcGVyYXRvciAoKSA9XG4gICAgICBQLm9wZXJhdG9yXG5cbiAgICBsZXQgZmlsbF9ydWxlICgpID1cbiAgICAgIFAuZmlsbF9ydWxlXG5cbiAgICBsZXQgbGluZV9jYXAgKCkgPVxuICAgICAgUC5saW5lX2NhcFxuXG4gICAgbGV0IGxpbmVfam9pbiAoKSA9XG4gICAgICBQLmxpbmVfam9pblxuXG4gICAgbGV0IHNvdXJjZSAoKSA9XG4gICAgICBQLnNvdXJjZVxuXG4gICAgbGV0IGRhc2hlcyAoKSA9XG4gICAgICBQLmRhc2hlc1xuXG4gICAgbGV0IG9wdGlvbiBuYW1lIHAgKCkgPSBmdW5jdGlvblxuICAgICAgfCBOb25lIC0+IFwiXCJcbiAgICAgIHwgU29tZSB4IC0+IFByaW50Zi5zcHJpbnRmIFwiIH4lczolc1wiIG5hbWUgKHAgeClcbiAgZW5kXG5cbiAgbW9kdWxlIENvbnRleHQ6IHNpZ1xuICAgIHR5cGUgdFxuXG4gICAgdmFsIGNyZWF0ZTogQy5jb250ZXh0IC0+IHRcbiAgICB2YWwgY2FsbDogdCAtPiAoJ2EsIHVuaXQsIHN0cmluZywgKCdiIC0+IHN0cmluZykgLT4gKEMuY29udGV4dCAtPiAnYikgLT4gJ2IpIGZvcm1hdDQgLT4gJ2FcbiAgICB2YWwgY2FsbHM6IHQgLT4gc3RyaW5nIGxpc3RcbiAgZW5kID0gc3RydWN0XG4gICAgdHlwZSB0ID0ge1xuICAgICAgYzogQy5jb250ZXh0O1xuICAgICAgbXV0YWJsZSBjYWxsczogc3RyaW5nIGxpc3Q7XG4gICAgfVxuXG4gICAgbGV0IGNyZWF0ZSBjID1cbiAgICAgIHtjOyBjYWxscz1bXX1cblxuICAgIGxldCBjYWxscyB7Y2FsbHM7IF99ID1cbiAgICAgIExpc3QucmV2IGNhbGxzXG5cbiAgICBsZXQgY2FsbCBjb250ZXh0IGZvcm1hdCA9XG4gICAgICBQcmludGYua3NwcmludGYgKGZ1biBjYWxsIHByaW50X3JldCBmIC0+XG4gICAgICAgIHRyeSBiZWdpblxuICAgICAgICAgIGxldCByZXQgPSBmIGNvbnRleHQuYyBpblxuICAgICAgICAgIGxldCBwcmludGVkX3JldCA9IHByaW50X3JldCByZXQgaW5cbiAgICAgICAgICBsZXQgY2FsbCA9XG4gICAgICAgICAgICBpZiBwcmludGVkX3JldCA8PiBcIlwiIHRoZW5cbiAgICAgICAgICAgICAgUHJpbnRmLnNwcmludGYgXCIlcyAtPiAlc1wiIGNhbGwgcHJpbnRlZF9yZXRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgY2FsbFxuICAgICAgICAgIGluXG4gICAgICAgICAgY29udGV4dC5jYWxscyA8LSBjYWxsOjpjb250ZXh0LmNhbGxzO1xuICAgICAgICAgIHJldFxuICAgICAgICBlbmQgd2l0aFxuICAgICAgICAgIHwgZXggLT4gYmVnaW5cbiAgICAgICAgICAgIGxldCBjYWxsID0gUHJpbnRmLnNwcmludGYgXCIlcyAtPiByYWlzZSAoJXMpXCIgY2FsbCAoUHJpbnRleGMudG9fc3RyaW5nIGV4KSBpblxuICAgICAgICAgICAgY29udGV4dC5jYWxscyA8LSBjYWxsOjpjb250ZXh0LmNhbGxzO1xuICAgICAgICAgICAgcmFpc2UgZXhcbiAgICAgICAgICBlbmRcbiAgICAgICkgZm9ybWF0XG4gIGVuZFxuXG4gIHR5cGUgY29udGV4dCA9IENvbnRleHQudFxuXG4gIGxldCBjcmVhdGUgPSBDb250ZXh0LmNyZWF0ZVxuXG4gIGxldCBjYWxscyA9IENvbnRleHQuY2FsbHNcblxuICAjZGVmaW5lIENDIENvbnRleHQuY2FsbCBjb250ZXh0XG5cblxuICBsZXQgc2F2ZSBjb250ZXh0ID1cbiAgICBDQyBcInNhdmVcIiBQLnVuaXQgQy5zYXZlXG5cbiAgbGV0IHJlc3RvcmUgY29udGV4dCA9XG4gICAgQ0MgXCJyZXN0b3JlXCIgUC51bml0IEMucmVzdG9yZVxuXG5cbiAgbGV0IHNldF9tYXRyaXggY29udGV4dCBtID1cbiAgICBDQyBcInNldF9tYXRyaXggJWFcIiBBLm1hdHJpeCBtIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfbWF0cml4IGMgbSlcblxuICBsZXQgZ2V0X21hdHJpeCBjb250ZXh0ID1cbiAgICBDQyBcImdldF9tYXRyaXhcIiBQLm1hdHJpeCBDLmdldF9tYXRyaXhcblxuICBsZXQgdHJhbnNmb3JtIGNvbnRleHQgbSA9XG4gICAgQ0MgXCJ0cmFuc2Zvcm0gJWFcIiBBLm1hdHJpeCBtIFAudW5pdCAoZnVuIGMgLT4gQy50cmFuc2Zvcm0gYyBtKVxuXG4gIGxldCBzY2FsZSBjb250ZXh0IHggeSA9XG4gICAgQ0MgXCJzY2FsZSAlLjJmICUuMmZcIiB4IHkgUC51bml0IChmdW4gYyAtPiBDLnNjYWxlIGMgeCB5KVxuXG4gIGxldCB0cmFuc2xhdGUgY29udGV4dCB4IHkgPVxuICAgIENDIFwidHJhbnNsYXRlICUuMmYgJS4yZlwiIHggeSBQLnVuaXQgKGZ1biBjIC0+IEMudHJhbnNsYXRlIGMgeCB5KVxuXG4gIGxldCByb3RhdGUgY29udGV4dCBhbmdsZSA9XG4gICAgQ0MgXCJyb3RhdGUgJS4yZlwiIGFuZ2xlIFAudW5pdCAoZnVuIGMgLT4gQy5yb3RhdGUgYyBhbmdsZSlcblxuICBsZXQgaWRlbnRpdHlfbWF0cml4IGNvbnRleHQgPVxuICAgIENDIFwiaWRlbnRpdHlfbWF0cml4XCIgUC51bml0IEMuaWRlbnRpdHlfbWF0cml4XG5cbiAgbGV0IGRldmljZV90b191c2VyIGNvbnRleHQgeCB5ID1cbiAgICBDQyBcImRldmljZV90b191c2VyICUuMmYgJS4yZlwiIHggeSBQLmNvb3JkcyAoZnVuIGMgLT4gQy5kZXZpY2VfdG9fdXNlciBjIHggeSlcblxuICBsZXQgZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgY29udGV4dCB4IHkgPVxuICAgIENDIFwiZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgJS4yZiAlLjJmXCIgeCB5IFAuY29vcmRzIChmdW4gYyAtPiBDLmRldmljZV90b191c2VyX2Rpc3RhbmNlIGMgeCB5KVxuXG4gIGxldCB1c2VyX3RvX2RldmljZSBjb250ZXh0IHggeSA9XG4gICAgQ0MgXCJ1c2VyX3RvX2RldmljZSAlLjJmICUuMmZcIiB4IHkgUC5jb29yZHMgKGZ1biBjIC0+IEMudXNlcl90b19kZXZpY2UgYyB4IHkpXG5cbiAgbGV0IHVzZXJfdG9fZGV2aWNlX2Rpc3RhbmNlIGNvbnRleHQgeCB5ID1cbiAgICBDQyBcInVzZXJfdG9fZGV2aWNlX2Rpc3RhbmNlICUuMmYgJS4yZlwiIHggeSBQLmNvb3JkcyAoZnVuIGMgLT4gQy51c2VyX3RvX2RldmljZV9kaXN0YW5jZSBjIHggeSlcblxuXG4gIGxldCBtb3ZlX3RvIGNvbnRleHQgeCB5ID1cbiAgICBDQyBcIm1vdmVfdG8gJS4yZiAlLjJmXCIgeCB5IFAudW5pdCAoZnVuIGMgLT4gQy5tb3ZlX3RvIGMgeCB5KVxuXG4gIGxldCByZWxfbW92ZV90byBjb250ZXh0IHggeSA9XG4gICAgQ0MgXCJyZWxfbW92ZV90byAlLjJmICUuMmZcIiB4IHkgUC51bml0IChmdW4gYyAtPiBDLnJlbF9tb3ZlX3RvIGMgeCB5KVxuXG4gIGxldCBsaW5lX3RvIGNvbnRleHQgeCB5ID1cbiAgICBDQyBcImxpbmVfdG8gJS4yZiAlLjJmXCIgeCB5IFAudW5pdCAoZnVuIGMgLT4gQy5saW5lX3RvIGMgeCB5KVxuXG4gIGxldCByZWxfbGluZV90byBjb250ZXh0IHggeSA9XG4gICAgQ0MgXCJyZWxfbGluZV90byAlLjJmICUuMmZcIiB4IHkgUC51bml0IChmdW4gYyAtPiBDLnJlbF9saW5lX3RvIGMgeCB5KVxuXG4gIGxldCBjdXJ2ZV90byBjb250ZXh0IHgxIHkxIHgyIHkyIHgzIHkzID1cbiAgICBDQyBcImN1cnZlX3RvICUuMmYgJS4yZiAlLjJmICUuMmYgJS4yZiAlLjJmXCIgeDEgeTEgeDIgeTIgeDMgeTMgUC51bml0IChmdW4gYyAtPiBDLmN1cnZlX3RvIGMgeDEgeTEgeDIgeTIgeDMgeTMpXG5cbiAgbGV0IHJlbF9jdXJ2ZV90byBjb250ZXh0IHgxIHkxIHgyIHkyIHgzIHkzID1cbiAgICBDQyBcInJlbF9jdXJ2ZV90byAlLjJmICUuMmYgJS4yZiAlLjJmICUuMmYgJS4yZlwiIHgxIHkxIHgyIHkyIHgzIHkzIFAudW5pdCAoZnVuIGMgLT4gQy5yZWxfY3VydmVfdG8gYyB4MSB5MSB4MiB5MiB4MyB5MylcblxuICBsZXQgcmVjdGFuZ2xlIGNvbnRleHQgeCB5IH53IH5oID1cbiAgICBDQyBcInJlY3RhbmdsZSAlLjJmICUuMmYgfnc6JS4yZiB+aDolLjJmXCIgeCB5IHcgaCBQLnVuaXQgKGZ1biBjIC0+IEMucmVjdGFuZ2xlIGMgeCB5IH53IH5oKVxuXG4gIGxldCBhcmMgY29udGV4dCB4IHkgfnIgfmExIH5hMiA9XG4gICAgQ0MgXCJhcmMgJS4yZiAlLjJmIH5yOiUuMmYgfmExOiUuMmYgfmEyOiUuMmZcIiB4IHkgciBhMSBhMiBQLnVuaXQgKGZ1biBjIC0+IEMuYXJjIGMgeCB5IH5yIH5hMSB+YTIpXG5cbiAgbGV0IGFyY19uZWdhdGl2ZSBjb250ZXh0IHggeSB+ciB+YTEgfmEyID1cbiAgICBDQyBcImFyY19uZWdhdGl2ZSAlLjJmICUuMmYgfnI6JS4yZiB+YTE6JS4yZiB+YTI6JS4yZlwiIHggeSByIGExIGEyIFAudW5pdCAoZnVuIGMgLT4gQy5hcmNfbmVnYXRpdmUgYyB4IHkgfnIgfmExIH5hMilcblxuICBtb2R1bGUgUGF0aCA9IHN0cnVjdFxuICAgIGxldCBnZXRfY3VycmVudF9wb2ludCBjb250ZXh0ID1cbiAgICAgIENDIFwiUGF0aC5nZXRfY3VycmVudF9wb2ludFwiIFAuY29vcmRzIEMuUGF0aC5nZXRfY3VycmVudF9wb2ludFxuXG4gICAgbGV0IGNsZWFyIGNvbnRleHQgPVxuICAgICAgQ0MgXCJQYXRoLmNsZWFyXCIgUC51bml0IEMuUGF0aC5jbGVhclxuXG4gICAgbGV0IGNsb3NlIGNvbnRleHQgPVxuICAgICAgQ0MgXCJQYXRoLmNsb3NlXCIgUC51bml0IEMuUGF0aC5jbG9zZVxuICBlbmRcblxuICBsZXQgc3Ryb2tlX3ByZXNlcnZlIGNvbnRleHQgPVxuICAgIENDIFwic3Ryb2tlX3ByZXNlcnZlXCIgUC51bml0IEMuc3Ryb2tlX3ByZXNlcnZlXG5cbiAgbGV0IHN0cm9rZSBjb250ZXh0ID1cbiAgICBDQyBcInN0cm9rZVwiIFAudW5pdCBDLnN0cm9rZVxuXG4gIGxldCBmaWxsX3ByZXNlcnZlIGNvbnRleHQgPVxuICAgIENDIFwiZmlsbF9wcmVzZXJ2ZVwiIFAudW5pdCBDLmZpbGxfcHJlc2VydmVcblxuICBsZXQgZmlsbCBjb250ZXh0ID1cbiAgICBDQyBcImZpbGxcIiBQLnVuaXQgQy5maWxsXG5cbiAgbGV0IGNsaXBfcHJlc2VydmUgY29udGV4dCA9XG4gICAgQ0MgXCJjbGlwX3ByZXNlcnZlXCIgUC51bml0IEMuY2xpcF9wcmVzZXJ2ZVxuXG4gIGxldCBjbGlwIGNvbnRleHQgPVxuICAgIENDIFwiY2xpcFwiIFAudW5pdCBDLmNsaXBcblxuICBsZXQgcGFpbnQgP2FscGhhIGNvbnRleHQgPVxuICAgIENDIFwicGFpbnQlYVwiIChBLm9wdGlvbiBcImFscGhhXCIgUC5mbG9hdCkgYWxwaGEgUC51bml0IChDLnBhaW50ID9hbHBoYSlcblxuXG4gIGxldCBzZXRfbGluZV93aWR0aCBjb250ZXh0IGxpbmVfd2lkdGggPVxuICAgIENDIFwic2V0X2xpbmVfd2lkdGggJS4yZlwiIGxpbmVfd2lkdGggUC51bml0IChmdW4gYyAtPiBDLnNldF9saW5lX3dpZHRoIGMgbGluZV93aWR0aClcblxuICBsZXQgZ2V0X2xpbmVfd2lkdGggY29udGV4dCA9XG4gICAgQ0MgXCJnZXRfbGluZV93aWR0aFwiIFAuZmxvYXQgQy5nZXRfbGluZV93aWR0aFxuXG4gIGxldCBzZXRfZGFzaCBjb250ZXh0ID9vZnMgZGFzaGVzID1cbiAgICBDQyBcInNldF9kYXNoJWEgJWFcIiAoQS5vcHRpb24gXCJvZnNcIiBQLmZsb2F0KSBvZnMgQS5kYXNoZXMgZGFzaGVzIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfZGFzaCBjID9vZnMgZGFzaGVzKVxuXG4gIGxldCBnZXRfZGFzaCBjb250ZXh0ID1cbiAgICBDQyBcImdldF9kYXNoXCIgUC5kYXNoZXNfb2ZzIEMuZ2V0X2Rhc2hcblxuICBsZXQgc2V0X2ZpbGxfcnVsZSBjb250ZXh0IGZpbGxfcnVsZSA9XG4gICAgQ0MgXCJzZXRfZmlsbF9ydWxlICVhXCIgQS5maWxsX3J1bGUgZmlsbF9ydWxlIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfZmlsbF9ydWxlIGMgZmlsbF9ydWxlKVxuXG4gIGxldCBnZXRfZmlsbF9ydWxlIGNvbnRleHQgPVxuICAgIENDIFwiZ2V0X2ZpbGxfcnVsZVwiIFAuZmlsbF9ydWxlIEMuZ2V0X2ZpbGxfcnVsZVxuXG4gIGxldCBzZXRfbGluZV9jYXAgY29udGV4dCBsaW5lX2NhcCA9XG4gICAgQ0MgXCJzZXRfbGluZV9jYXAgJWFcIiBBLmxpbmVfY2FwIGxpbmVfY2FwIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfbGluZV9jYXAgYyBsaW5lX2NhcClcblxuICBsZXQgZ2V0X2xpbmVfY2FwIGNvbnRleHQgPVxuICAgIENDIFwiZ2V0X2xpbmVfY2FwXCIgUC5saW5lX2NhcCBDLmdldF9saW5lX2NhcFxuXG4gIGxldCBzZXRfbGluZV9qb2luIGNvbnRleHQgbGluZV9qb2luID1cbiAgICBDQyBcInNldF9saW5lX2pvaW4gJWFcIiBBLmxpbmVfam9pbiBsaW5lX2pvaW4gUC51bml0IChmdW4gYyAtPiBDLnNldF9saW5lX2pvaW4gYyBsaW5lX2pvaW4pXG5cbiAgbGV0IGdldF9saW5lX2pvaW4gY29udGV4dCA9XG4gICAgQ0MgXCJnZXRfbGluZV9qb2luXCIgUC5saW5lX2pvaW4gQy5nZXRfbGluZV9qb2luXG5cbiAgbGV0IHNldF9taXRlcl9saW1pdCBjb250ZXh0IG1pdGVyX2xpbWl0ID1cbiAgICBDQyBcInNldF9taXRlcl9saW1pdCAlLjJmXCIgbWl0ZXJfbGltaXQgUC51bml0IChmdW4gYyAtPiBDLnNldF9taXRlcl9saW1pdCBjIG1pdGVyX2xpbWl0KVxuXG4gIGxldCBnZXRfbWl0ZXJfbGltaXQgY29udGV4dCA9XG4gICAgQ0MgXCJnZXRfbWl0ZXJfbGltaXRcIiBQLmZsb2F0IEMuZ2V0X21pdGVyX2xpbWl0XG5cbiAgbGV0IHNldF9vcGVyYXRvciBjb250ZXh0IG9wZXJhdG9yID1cbiAgICBDQyBcInNldF9vcGVyYXRvciAlYVwiIEEub3BlcmF0b3Igb3BlcmF0b3IgUC51bml0IChmdW4gYyAtPiBDLnNldF9vcGVyYXRvciBjIG9wZXJhdG9yKVxuXG4gIGxldCBnZXRfb3BlcmF0b3IgY29udGV4dCA9XG4gICAgQ0MgXCJnZXRfb3BlcmF0b3JcIiBQLm9wZXJhdG9yIEMuZ2V0X29wZXJhdG9yXG5cblxuICBsZXQgc2V0X3NvdXJjZSBjb250ZXh0IHNvdXJjZSA9XG4gICAgQ0MgXCJzZXRfc291cmNlICVhXCIgQS5zb3VyY2UgKE9iai5tYWdpYyBzb3VyY2UpIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfc291cmNlIGMgc291cmNlKVxuXG4gIGxldCBnZXRfc291cmNlIGNvbnRleHQgPVxuICAgIENDIFwiZ2V0X3NvdXJjZVwiIFAuc291cmNlIEMuZ2V0X3NvdXJjZVxuXG4gIGxldCBzZXRfc291cmNlX3JnYiBjb250ZXh0IHIgZyBiID1cbiAgICBDQyBcInNldF9zb3VyY2VfcmdiICUuMmYgJS4yZiAlLjJmXCIgciBnIGIgUC51bml0IChmdW4gYyAtPiBDLnNldF9zb3VyY2VfcmdiIGMgciBnIGIpXG5cbiAgbGV0IHNldF9zb3VyY2VfcmdiYSBjb250ZXh0IHIgZyBiIGEgPVxuICAgIENDIFwic2V0X3NvdXJjZV9yZ2JhICUuMmYgJS4yZiAlLjJmICUuMmZcIiByIGcgYiBhIFAudW5pdCAoZnVuIGMgLT4gQy5zZXRfc291cmNlX3JnYmEgYyByIGcgYiBhKVxuXG5cbiAgbGV0IHNlbGVjdF9mb250X2ZhY2UgY29udGV4dCA/c2xhbnQgP3dlaWdodCBmYW1pbHkgPVxuICAgIENDIFwic2VsZWN0X2ZvbnRfZmFjZSVhJWEgJVNcIiAoQS5vcHRpb24gXCJzbGFudFwiIFAuc2xhbnQpIHNsYW50IChBLm9wdGlvbiBcIndlaWdodFwiIFAud2VpZ2h0KSB3ZWlnaHQgZmFtaWx5IFAudW5pdCAoZnVuIGMgLT4gQy5zZWxlY3RfZm9udF9mYWNlIGMgP3NsYW50ID93ZWlnaHQgZmFtaWx5KVxuXG4gIGxldCBzZXRfZm9udF9zaXplIGNvbnRleHQgZm9udF9zaXplID1cbiAgICBDQyBcInNldF9mb250X3NpemUgJS4yZlwiIGZvbnRfc2l6ZSBQLnVuaXQgKGZ1biBjIC0+IEMuc2V0X2ZvbnRfc2l6ZSBjIGZvbnRfc2l6ZSlcblxuICBsZXQgc2hvd190ZXh0IGNvbnRleHQgcyA9XG4gICAgQ0MgXCJzaG93X3RleHQgJVNcIiBzIFAudW5pdCAoZnVuIGMgLT4gQy5zaG93X3RleHQgYyBzKVxuXG4gIGxldCBmb250X2V4dGVudHMgY29udGV4dCA9XG4gICAgQ0MgXCJmb250X2V4dGVudHNcIiBQLmZvbnRfZXh0ZW50cyBDLmZvbnRfZXh0ZW50c1xuXG4gIGxldCB0ZXh0X2V4dGVudHMgY29udGV4dCBzID1cbiAgICBDQyBcInRleHRfZXh0ZW50cyAlU1wiIHMgUC50ZXh0X2V4dGVudHMgKGZ1biBjIC0+IEMudGV4dF9leHRlbnRzIGMgcylcbmVuZFxuXG5pbmNsdWRlIERlY29yYXRlKE1vY2spXG5cbmxldCBjcmVhdGUgKCkgPVxuICBDb250ZXh0LmNyZWF0ZSAoTW9jay5jcmVhdGUgKCkpXG4iLCIoKiBDb3B5cmlnaHQgMjAxNy0yMDE4IFZpbmNlbnQgSmFjcXVlcyA8dmluY2VudEB2aW5jZW50LWphY3F1ZXMubmV0PiAqKVxuXG5tb2R1bGUgdHlwZSBTID0gQ2Fpcm9Nb2NrLlNcblxuKCpcbkNhbnZhczpcbi0gaHR0cDovL3d3dy53M3NjaG9vbHMuY29tL3RhZ3MvcmVmX2NhbnZhcy5hc3Bcbi0gaHR0cHM6Ly9vY3NpZ2VuLm9yZy9qc19vZl9vY2FtbC8yLjguNC9hcGkvRG9tX2h0bWwuY2FudmFzUmVuZGVyaW5nQ29udGV4dDJELWNcblxuQ2Fpcm86XG4tIGh0dHA6Ly9jYWlyby5mb3JnZS5vY2FtbGNvcmUub3JnL3R1dG9yaWFsL0NhaXJvLmh0bWxcbi0gaHR0cHM6Ly9naXRodWIuY29tL0NocmlzMDAvb2NhbWwtY2Fpcm9cbi0gdXRvcCAtcmVxdWlyZSBjYWlybzJcbiopXG5cbiNpbmNsdWRlIFwiQmFja2VuZC5pbmNsLm1sXCJcblxubGV0ICgpID0gUHJpbnRleGMucmVnaXN0ZXJfcHJpbnRlciAoZnVuY3Rpb25cbiAgfCBFcnJvciBzdGF0dXMgLT4gU29tZSAoUHJpbnRmLnNwcmludGYgXCJKc09mT0NhaXJvLkVycm9yKCVzKVwiIChzdGF0dXNfcmVwciBzdGF0dXMpKVxuICB8IF8gLT4gTm9uZVxuKVxuXG5tb2R1bGUgSHRtbCA9IHN0cnVjdFxuICB0eXBlIHQgPSBEb21faHRtbC5jYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgSnMudFxuZW5kXG5cbm1vZHVsZSBMb2NhbDogc2lnXG4gIHR5cGUgdFxuXG4gIHZhbCBjcmVhdGU6IHVuaXQgLT4gdFxuXG4gIHZhbCBzYXZlOiB0IC0+IHVuaXRcbiAgdmFsIHJlc3RvcmU6IHQgLT4gdW5pdFxuXG4gIHZhbCB0cmFuc2Zvcm1hdGlvbjogdCAtPiBNYXRyaXgudFxuICB2YWwgc2V0X3RyYW5zZm9ybWF0aW9uOiB0IC0+IHRyYW5zZm9ybWF0aW9uOk1hdHJpeC50IC0+IHVuaXRcblxuICB2YWwgZm9udDogdCAtPiBmb250XG4gIHZhbCBzZXRfZm9udDogdCAtPiBmb250OmZvbnQgLT4gdW5pdFxuXG4gIHZhbCBzb3VyY2U6IHQgLT4gUGF0dGVybi5zb3VyY2VcbiAgdmFsIHNldF9zb3VyY2U6IHQgLT4gc291cmNlOlBhdHRlcm4uc291cmNlIC0+IHVuaXRcblxuICB2YWwgZmlsbF9ydWxlOiB0IC0+IGZpbGxfcnVsZVxuICB2YWwgc2V0X2ZpbGxfcnVsZTogdCAtPiBmaWxsX3J1bGU6ZmlsbF9ydWxlIC0+IHVuaXRcblxuICB2YWwgc2V0X3N0YXJ0X3BvaW50OiB0IC0+IGZsb2F0ICogZmxvYXQgLT4gdW5pdFxuICB2YWwgc2V0X3N0YXJ0X3BvaW50X2lmX25vbmU6IHQgLT4gZmxvYXQgKiBmbG9hdCAtPiB1bml0XG4gIHZhbCByZXNldF9zdGFydF9wb2ludDogdCAtPiB1bml0XG4gIHZhbCBzZXRfc3RhcnRfcG9pbnRfYXNfY3VycmVudF9wb2ludDogdCAtPiB1bml0XG5cbiAgdmFsIGN1cnJlbnRfcG9pbnQ6IHQgLT4gKGZsb2F0ICogZmxvYXQpIG9wdGlvblxuICB2YWwgc2V0X2N1cnJlbnRfcG9pbnQ6IHQgLT4gZmxvYXQgKiBmbG9hdCAtPiB1bml0XG4gIHZhbCByZXNldF9jdXJyZW50X3BvaW50OiB0IC0+IHVuaXRcbmVuZCA9IHN0cnVjdFxuICBtb2R1bGUgU3RhdGUgPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPSB7XG4gICAgICB0cmFuc2Zvcm1hdGlvbjogTWF0cml4LnQ7XG4gICAgICBmb250OiBmb250O1xuICAgICAgc291cmNlOiBQYXR0ZXJuLnNvdXJjZTtcbiAgICAgIGZpbGxfcnVsZTogZmlsbF9ydWxlO1xuICAgIH1cbiAgZW5kXG5cbiAgdHlwZSB0ID0ge1xuICAgIHBvaW50czogUG9pbnRzLnQ7XG4gICAgbXV0YWJsZSBzdGF0ZXM6IFN0YXRlLnQgbGlzdDtcbiAgfVxuXG4gIGxldCBjcmVhdGUgKCkgPSB7XG4gICAgcG9pbnRzID0gUG9pbnRzLmNyZWF0ZSAoKTtcbiAgICBzdGF0ZXMgPSBbXG4gICAgICB7XG4gICAgICAgIHRyYW5zZm9ybWF0aW9uID0gTWF0cml4LmluaXRfaWRlbnRpdHkgKCk7XG4gICAgICAgIGZvbnQgPSB7XG4gICAgICAgICAgc2xhbnQgPSBVcHJpZ2h0O1xuICAgICAgICAgIHdlaWdodCA9IE5vcm1hbDtcbiAgICAgICAgICBzaXplID0gMTAuO1xuICAgICAgICAgIGZhbWlseSA9IFwic2Fucy1zZXJpZlwiO1xuICAgICAgICB9O1xuICAgICAgICBzb3VyY2UgPSAhKFBhdHRlcm4uY3JlYXRlX3JnYiAwLiAwLiAwLik7XG4gICAgICAgIGZpbGxfcnVsZSA9IFdJTkRJTkc7XG4gICAgICB9O1xuICAgIF07XG4gIH1cblxuICBsZXQgc3RhdGUgY29udGV4dCA9XG4gICAgTGlzdC5oZCBjb250ZXh0LnN0YXRlc1xuXG4gIGxldCBzZXRfc3RhdGUgY29udGV4dCBzdGF0ZSA9XG4gICAgY29udGV4dC5zdGF0ZXMgPC0gc3RhdGU6OihMaXN0LnRsIGNvbnRleHQuc3RhdGVzKVxuXG4gIGxldCBzYXZlIGNvbnRleHQgPVxuICAgIGNvbnRleHQuc3RhdGVzIDwtIChzdGF0ZSBjb250ZXh0KTo6Y29udGV4dC5zdGF0ZXNcblxuICBsZXQgcmVzdG9yZSBjb250ZXh0ID1cbiAgICBsZXQgc3RhdGVzID1cbiAgICAgIG1hdGNoIGNvbnRleHQuc3RhdGVzIHdpdGhcbiAgICAgICAgfCBbXSB8IFtfXSAtPiByYWlzZSAoRXJyb3IgSU5WQUxJRF9SRVNUT1JFKVxuICAgICAgICB8IF86OnN0YXRlcyAtPiBzdGF0ZXNcbiAgICBpblxuICAgIGNvbnRleHQuc3RhdGVzIDwtIHN0YXRlc1xuXG4gIGxldCB0cmFuc2Zvcm1hdGlvbiBjb250ZXh0ID1cbiAgICAoc3RhdGUgY29udGV4dCkudHJhbnNmb3JtYXRpb25cblxuICBsZXQgc2V0X3RyYW5zZm9ybWF0aW9uIGNvbnRleHQgfnRyYW5zZm9ybWF0aW9uID1cbiAgICBzZXRfc3RhdGUgY29udGV4dCAoeyhzdGF0ZSBjb250ZXh0KSB3aXRoIHRyYW5zZm9ybWF0aW9ufSlcblxuICBsZXQgZm9udCBjb250ZXh0ID1cbiAgICAoc3RhdGUgY29udGV4dCkuZm9udFxuXG4gIGxldCBzZXRfZm9udCBjb250ZXh0IH5mb250ID1cbiAgICBzZXRfc3RhdGUgY29udGV4dCAoeyhzdGF0ZSBjb250ZXh0KSB3aXRoIGZvbnR9KVxuXG4gIGxldCBzb3VyY2UgY29udGV4dCA9XG4gICAgKHN0YXRlIGNvbnRleHQpLnNvdXJjZVxuXG4gIGxldCBzZXRfc291cmNlIGNvbnRleHQgfnNvdXJjZSA9XG4gICAgc2V0X3N0YXRlIGNvbnRleHQgKHsoc3RhdGUgY29udGV4dCkgd2l0aCBzb3VyY2V9KVxuXG4gIGxldCBmaWxsX3J1bGUgY29udGV4dCA9XG4gICAgKHN0YXRlIGNvbnRleHQpLmZpbGxfcnVsZVxuXG4gIGxldCBzZXRfZmlsbF9ydWxlIGNvbnRleHQgfmZpbGxfcnVsZSA9XG4gICAgc2V0X3N0YXRlIGNvbnRleHQgKHsoc3RhdGUgY29udGV4dCkgd2l0aCBmaWxsX3J1bGV9KVxuXG4gIGxldCBzZXRfc3RhcnRfcG9pbnQgY29udGV4dCAoeCwgeSkgPVxuICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IHRyYW5zZm9ybWF0aW9uIGNvbnRleHQgaW5cbiAgICBQb2ludHMuc2V0X3N0YXJ0IGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvbiB+eCB+eVxuXG4gIGxldCByZXNldF9zdGFydF9wb2ludCBjb250ZXh0ID1cbiAgICBQb2ludHMucmVzZXRfc3RhcnQgY29udGV4dC5wb2ludHNcblxuICBsZXQgc2V0X3N0YXJ0X3BvaW50X2lmX25vbmUgY29udGV4dCAoeCwgeSkgPVxuICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IHRyYW5zZm9ybWF0aW9uIGNvbnRleHQgaW5cbiAgICBQb2ludHMuc2V0X3N0YXJ0X2lmX25vbmUgY29udGV4dC5wb2ludHMgfnRyYW5zZm9ybWF0aW9uIH54IH55XG5cbiAgbGV0IHNldF9zdGFydF9wb2ludF9hc19jdXJyZW50X3BvaW50IGNvbnRleHQgPVxuICAgIFBvaW50cy5zZXRfY3VycmVudF9mcm9tX3N0YXJ0IGNvbnRleHQucG9pbnRzXG5cbiAgbGV0IGN1cnJlbnRfcG9pbnQgY29udGV4dCA9XG4gICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gdHJhbnNmb3JtYXRpb24gY29udGV4dCBpblxuICAgIFBvaW50cy5jdXJyZW50IGNvbnRleHQucG9pbnRzIH50cmFuc2Zvcm1hdGlvblxuXG4gIGxldCBzZXRfY3VycmVudF9wb2ludCBjb250ZXh0ICh4LCB5KSA9XG4gICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gdHJhbnNmb3JtYXRpb24gY29udGV4dCBpblxuICAgIFBvaW50cy5zZXRfY3VycmVudCBjb250ZXh0LnBvaW50cyB+dHJhbnNmb3JtYXRpb24gfnggfnlcblxuICBsZXQgcmVzZXRfY3VycmVudF9wb2ludCBjb250ZXh0ID1cbiAgICBQb2ludHMucmVzZXRfY3VycmVudCBjb250ZXh0LnBvaW50c1xuZW5kXG5cbnR5cGUgY29udGV4dCA9IHtcbiAgaHRtbDogSHRtbC50O1xuICBsb2NhbDogTG9jYWwudDtcbn1cblxuXG5sZXQgc2F2ZSBjb250ZXh0ID1cbiAgY29udGV4dC5odG1sIyNzYXZlO1xuICBMb2NhbC5zYXZlIGNvbnRleHQubG9jYWxcblxubGV0IHJlc3RvcmUgY29udGV4dCA9XG4gIGNvbnRleHQuaHRtbCMjcmVzdG9yZTtcbiAgTG9jYWwucmVzdG9yZSBjb250ZXh0LmxvY2FsXG5cblxubGV0IHNldF9tYXRyaXggY29udGV4dCAoe3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9IGFzIHRyYW5zZm9ybWF0aW9uKSA9XG4gIGNvbnRleHQuaHRtbCMjc2V0VHJhbnNmb3JtIHh4IHl4IHh5IHl5IHgwIHkwO1xuICBMb2NhbC5zZXRfdHJhbnNmb3JtYXRpb24gY29udGV4dC5sb2NhbCB+dHJhbnNmb3JtYXRpb25cblxubGV0IGdldF9tYXRyaXggY29udGV4dCA9XG4gIExvY2FsLnRyYW5zZm9ybWF0aW9uIGNvbnRleHQubG9jYWxcblxubGV0IHRyYW5zZm9ybSBjb250ZXh0IG0gPVxuICBzZXRfbWF0cml4IGNvbnRleHQgKE1hdHJpeC5tdWx0aXBseSAoTG9jYWwudHJhbnNmb3JtYXRpb24gY29udGV4dC5sb2NhbCkgbSlcblxubGV0IHNjYWxlIGNvbnRleHQgeCB5ID1cbiAgdHJhbnNmb3JtIGNvbnRleHQgKE1hdHJpeC5pbml0X3NjYWxlIHggeSlcblxubGV0IHRyYW5zbGF0ZSBjb250ZXh0IHggeSA9XG4gIHRyYW5zZm9ybSBjb250ZXh0IChNYXRyaXguaW5pdF90cmFuc2xhdGUgeCB5KVxuXG5sZXQgcm90YXRlIGNvbnRleHQgYW5nbGUgPVxuICB0cmFuc2Zvcm0gY29udGV4dCAoTWF0cml4LmluaXRfcm90YXRlIGFuZ2xlKVxuXG5sZXQgaWRlbnRpdHlfbWF0cml4IGNvbnRleHQgPVxuICBzZXRfbWF0cml4IGNvbnRleHQgKE1hdHJpeC5pbml0X2lkZW50aXR5ICgpKVxuXG5sZXQgZGV2aWNlX3RvX3VzZXIgY29udGV4dCB4IHkgPVxuICBNYXRyaXgudHJhbnNmb3JtX3BvaW50IChNYXRyaXguaW5pdF9pbnZlcnNlIChMb2NhbC50cmFuc2Zvcm1hdGlvbiBjb250ZXh0LmxvY2FsKSkgeCB5XG5cbmxldCBkZXZpY2VfdG9fdXNlcl9kaXN0YW5jZSBjb250ZXh0IGR4IGR5ID1cbiAgTWF0cml4LnRyYW5zZm9ybV9kaXN0YW5jZSAoTWF0cml4LmluaXRfaW52ZXJzZSAoTG9jYWwudHJhbnNmb3JtYXRpb24gY29udGV4dC5sb2NhbCkpIH5keCB+ZHlcblxubGV0IHVzZXJfdG9fZGV2aWNlIGNvbnRleHQgeCB5ID1cbiAgTWF0cml4LnRyYW5zZm9ybV9wb2ludCAoTG9jYWwudHJhbnNmb3JtYXRpb24gY29udGV4dC5sb2NhbCkgeCB5XG5cbmxldCB1c2VyX3RvX2RldmljZV9kaXN0YW5jZSBjb250ZXh0IGR4IGR5ID1cbiAgTWF0cml4LnRyYW5zZm9ybV9kaXN0YW5jZSAoTG9jYWwudHJhbnNmb3JtYXRpb24gY29udGV4dC5sb2NhbCkgfmR4IH5keVxuXG5cbmxldCBtYWtlX3JlbCBjb250ZXh0IH54OmR4IH55OmR5ID1cbiAgbWF0Y2ggTG9jYWwuY3VycmVudF9wb2ludCBjb250ZXh0LmxvY2FsIHdpdGhcbiAgICB8IE5vbmUgLT4gcmFpc2UgKEVycm9yIE5PX0NVUlJFTlRfUE9JTlQpXG4gICAgfCBTb21lICh4LCB5KSAtPiAoeCArLiBkeCwgeSArLiBkeSlcblxubGV0IG1vdmVfdG8gY29udGV4dCB4IHkgPVxuICBjb250ZXh0Lmh0bWwjI21vdmVUbyB4IHk7XG4gIExvY2FsLnNldF9zdGFydF9wb2ludCBjb250ZXh0LmxvY2FsICh4LCB5KTtcbiAgTG9jYWwuc2V0X3N0YXJ0X3BvaW50X2FzX2N1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbFxuXG5sZXQgcmVsX21vdmVfdG8gY29udGV4dCB4IHkgPVxuICBsZXQgKHgsIHkpID0gbWFrZV9yZWwgY29udGV4dCB+eCB+eSBpblxuICBtb3ZlX3RvIGNvbnRleHQgeCB5XG5cbmxldCBsaW5lX3RvIGNvbnRleHQgeCB5ID1cbiAgY29udGV4dC5odG1sIyNsaW5lVG8geCB5O1xuICBMb2NhbC5zZXRfc3RhcnRfcG9pbnRfaWZfbm9uZSBjb250ZXh0LmxvY2FsICh4LCB5KTtcbiAgTG9jYWwuc2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbCAoeCwgeSlcblxubGV0IHJlbF9saW5lX3RvIGNvbnRleHQgeCB5ID1cbiAgbGV0ICh4LCB5KSA9IG1ha2VfcmVsIGNvbnRleHQgfnggfnkgaW5cbiAgbGluZV90byBjb250ZXh0IHggeVxuXG5sZXQgY3VydmVfdG8gY29udGV4dCB4MSB5MSB4MiB5MiB4MyB5MyA9XG4gIGNvbnRleHQuaHRtbCMjYmV6aWVyQ3VydmVUbyB4MSB5MSB4MiB5MiB4MyB5MztcbiAgTG9jYWwuc2V0X3N0YXJ0X3BvaW50X2lmX25vbmUgY29udGV4dC5sb2NhbCAoeDEsIHkxKTtcbiAgTG9jYWwuc2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbCAoeDMsIHkzKVxuXG5sZXQgcmVsX2N1cnZlX3RvIGNvbnRleHQgeDEgeTEgeDIgeTIgeDMgeTMgPVxuICBsZXQgKHgxLCB5MSkgPSBtYWtlX3JlbCBjb250ZXh0IH54OngxIH55OnkxXG4gIGFuZCAoeDIsIHkyKSA9IG1ha2VfcmVsIGNvbnRleHQgfng6eDIgfnk6eTJcbiAgYW5kICh4MywgeTMpID0gbWFrZV9yZWwgY29udGV4dCB+eDp4MyB+eTp5MyBpblxuICBjdXJ2ZV90byBjb250ZXh0IHgxIHkxIHgyIHkyIHgzIHkzXG5cbmxldCByZWN0YW5nbGUgY29udGV4dCB4IHkgfncgfmggPVxuICBMb2NhbC5zZXRfY3VycmVudF9wb2ludCBjb250ZXh0LmxvY2FsICh4LCB5KTtcbiAgY29udGV4dC5odG1sIyNyZWN0IHggeSB3IGhcblxubGV0IGFyY18gfmRpciBjb250ZXh0IHggeSB+ciB+YTEgfmEyID1cbiAgY29udGV4dC5odG1sIyNhcmMgeCB5IHIgYTEgYTIgZGlyO1xuICBMb2NhbC5zZXRfc3RhcnRfcG9pbnRfaWZfbm9uZSBjb250ZXh0LmxvY2FsICh4ICsuIHIgKi4gKGNvcyBhMSksIHkgKy4gciAqLiAoc2luIGExKSk7XG4gIExvY2FsLnNldF9jdXJyZW50X3BvaW50IGNvbnRleHQubG9jYWwgKHggKy4gciAqLiAoY29zIGEyKSwgeSArLiByICouIChzaW4gYTIpKVxuXG5sZXQgYXJjID0gYXJjXyB+ZGlyOkpzLl9mYWxzZVxuXG5sZXQgYXJjX25lZ2F0aXZlID0gYXJjXyB+ZGlyOkpzLl90cnVlXG5cbm1vZHVsZSBQYXRoID0gc3RydWN0XG4gIGxldCBnZXRfY3VycmVudF9wb2ludCBjb250ZXh0ID1cbiAgICBtYXRjaCBMb2NhbC5jdXJyZW50X3BvaW50IGNvbnRleHQubG9jYWwgd2l0aFxuICAgICAgfCBOb25lIC0+ICgwLiwgMC4pXG4gICAgICB8IFNvbWUgKHgsIHkpIC0+ICh4LCB5KVxuXG4gIGxldCBjbGVhciBjb250ZXh0ID1cbiAgICBjb250ZXh0Lmh0bWwjI2JlZ2luUGF0aDtcbiAgICBMb2NhbC5yZXNldF9zdGFydF9wb2ludCBjb250ZXh0LmxvY2FsO1xuICAgIExvY2FsLnJlc2V0X2N1cnJlbnRfcG9pbnQgY29udGV4dC5sb2NhbFxuXG4gIGxldCBjbG9zZSBjb250ZXh0ID1cbiAgICBjb250ZXh0Lmh0bWwjI2Nsb3NlUGF0aDtcbiAgICBMb2NhbC5zZXRfc3RhcnRfcG9pbnRfYXNfY3VycmVudF9wb2ludCBjb250ZXh0LmxvY2FsXG5lbmRcblxubGV0IHN0cm9rZV9wcmVzZXJ2ZSBjb250ZXh0ID1cbiAgY29udGV4dC5odG1sIyNzdHJva2VcblxubGV0IHN0cm9rZSBjb250ZXh0ID1cbiAgc3Ryb2tlX3ByZXNlcnZlIGNvbnRleHQ7XG4gIFBhdGguY2xlYXIgY29udGV4dFxuXG5sZXQgZmlsbF9wcmVzZXJ2ZSBjb250ZXh0ID1cbiAgbWF0Y2ggTG9jYWwuZmlsbF9ydWxlIGNvbnRleHQubG9jYWwgd2l0aFxuICAgIHwgV0lORElORyAtPiBjb250ZXh0Lmh0bWwjI2ZpbGxcbiAgICB8IEVWRU5fT0REIC0+IChKcy5VbnNhZmUuY29lcmNlIGNvbnRleHQuaHRtbCkjI2ZpbGwgKEpzLnN0cmluZyBcImV2ZW5vZGRcIilcblxubGV0IGZpbGwgY29udGV4dCA9XG4gIGZpbGxfcHJlc2VydmUgY29udGV4dDtcbiAgUGF0aC5jbGVhciBjb250ZXh0XG5cbmxldCBjbGlwX3ByZXNlcnZlIGNvbnRleHQgPVxuICBjb250ZXh0Lmh0bWwjI2NsaXBcblxubGV0IGNsaXAgY29udGV4dCA9XG4gIGNsaXBfcHJlc2VydmUgY29udGV4dDtcbiAgUGF0aC5jbGVhciBjb250ZXh0XG5cbmxldCBwYWludCA/KGFscGhhPTEuKSBjb250ZXh0ID1cbiAgc2F2ZSBjb250ZXh0O1xuICBjb250ZXh0Lmh0bWwjIy5nbG9iYWxBbHBoYSA6PSBhbHBoYTtcbiAgaWRlbnRpdHlfbWF0cml4IGNvbnRleHQ7XG4gIGxldCB3aWR0aCA9IChmbG9hdF9vZl9pbnQgY29udGV4dC5odG1sIyMuY2FudmFzIyMud2lkdGgpXG4gIGFuZCBoZWlnaHQgPSAoZmxvYXRfb2ZfaW50IGNvbnRleHQuaHRtbCMjLmNhbnZhcyMjLmhlaWdodCkgaW5cbiAgY29udGV4dC5odG1sIyNmaWxsUmVjdCAwLiAwLiB3aWR0aCBoZWlnaHQ7XG4gIHJlc3RvcmUgY29udGV4dFxuXG5cbmxldCBzZXRfbGluZV93aWR0aCBjb250ZXh0IHdpZHRoID1cbiAgY29udGV4dC5odG1sIyMubGluZVdpZHRoIDo9IHdpZHRoXG5cbmxldCBnZXRfbGluZV93aWR0aCBjb250ZXh0ID1cbiAgY29udGV4dC5odG1sIyMubGluZVdpZHRoXG5cbmxldCBzZXRfZGFzaCBjb250ZXh0ID8ob2ZzPTAuKSBkYXNoZXMgPVxuICBsZXQgaHRtbCA9IEpzLlVuc2FmZS5jb2VyY2UgY29udGV4dC5odG1sIGluXG4gIGh0bWwjIy5saW5lRGFzaE9mZnNldCA6PSBvZnM7XG4gIGh0bWwjI3NldExpbmVEYXNoIChKcy5hcnJheSBkYXNoZXMpXG5cbmxldCBnZXRfZGFzaCBjb250ZXh0ID1cbiAgbGV0IGh0bWwgPSBKcy5VbnNhZmUuY29lcmNlIGNvbnRleHQuaHRtbCBpblxuICAoSnMudG9fYXJyYXkgKGh0bWwjI2dldExpbmVEYXNoKSwgaHRtbCMjLmxpbmVEYXNoT2Zmc2V0KVxuXG5sZXQgc2V0X2ZpbGxfcnVsZSBjb250ZXh0IGZpbGxfcnVsZSA9XG4gIExvY2FsLnNldF9maWxsX3J1bGUgY29udGV4dC5sb2NhbCB+ZmlsbF9ydWxlXG5cbmxldCBnZXRfZmlsbF9ydWxlIGNvbnRleHQgPVxuICBMb2NhbC5maWxsX3J1bGUgY29udGV4dC5sb2NhbFxuXG5sZXQgc2V0X2xpbmVfY2FwIGNvbnRleHQgY2FwID1cbiAgbGV0IGNhcCA9IG1hdGNoIGNhcCB3aXRoXG4gICAgfCBCVVRUIC0+IFwiYnV0dFwiXG4gICAgfCBST1VORCAtPiBcInJvdW5kXCJcbiAgICB8IFNRVUFSRSAtPiBcInNxdWFyZVwiXG4gIGluXG4gIGNvbnRleHQuaHRtbCMjLmxpbmVDYXAgOj0gSnMuc3RyaW5nIGNhcFxuXG5sZXQgZ2V0X2xpbmVfY2FwIGNvbnRleHQgPVxuICBtYXRjaCBKcy50b19zdHJpbmcgY29udGV4dC5odG1sIyMubGluZUNhcCB3aXRoXG4gICAgfCBcInJvdW5kXCIgLT4gUk9VTkRcbiAgICB8IFwic3F1YXJlXCIgLT4gU1FVQVJFXG4gICAgfCBfIC0+IEJVVFRcblxubGV0IHNldF9saW5lX2pvaW4gY29udGV4dCBqb2luID1cbiAgbGV0IGpvaW4gPSBtYXRjaCBqb2luIHdpdGhcbiAgICB8IEpPSU5fTUlURVIgLT4gIFwibWl0ZXJcIlxuICAgIHwgSk9JTl9ST1VORCAtPiBcInJvdW5kXCJcbiAgICB8IEpPSU5fQkVWRUwgLT4gXCJiZXZlbFwiXG4gIGluXG4gIGNvbnRleHQuaHRtbCMjLmxpbmVKb2luIDo9IEpzLnN0cmluZyBqb2luXG5cbmxldCBnZXRfbGluZV9qb2luIGNvbnRleHQgPVxuICBtYXRjaCBKcy50b19zdHJpbmcgY29udGV4dC5odG1sIyMubGluZUpvaW4gd2l0aFxuICAgIHwgXCJyb3VuZFwiIC0+IEpPSU5fUk9VTkRcbiAgICB8IFwiYmV2ZWxcIiAtPiBKT0lOX0JFVkVMXG4gICAgfCBfIC0+IEpPSU5fTUlURVJcblxubGV0IHNldF9taXRlcl9saW1pdCBjb250ZXh0IGwgPVxuICBjb250ZXh0Lmh0bWwjIy5taXRlckxpbWl0IDo9IGxcblxubGV0IGdldF9taXRlcl9saW1pdCBjb250ZXh0ID1cbiAgY29udGV4dC5odG1sIyMubWl0ZXJMaW1pdFxuXG5sZXQgc2V0X29wZXJhdG9yIGNvbnRleHQgb3BlcmF0b3IgPVxuICBsZXQgb3BlcmF0b3IgPSBtYXRjaCBvcGVyYXRvciB3aXRoXG4gICAgfCBDTEVBUiAtPiBmYWlsd2l0aCBcIlVuc3VwcG9ydGVkIG9wZXJhdG9yIENMRUFSXCJcbiAgICB8IFNPVVJDRSAtPiBmYWlsd2l0aCBcIlVuc3VwcG9ydGVkIG9wZXJhdG9yIFNPVVJDRVwiXG4gICAgfCBPVkVSIC0+IFwic291cmNlLW92ZXJcIlxuICAgIHwgQVRPUCAtPiBcInNvdXJjZS1hdG9wXCJcbiAgICB8IElOIC0+IFwic291cmNlLWluXCJcbiAgICB8IE9VVCAtPiBcInNvdXJjZS1vdXRcIlxuICAgIHwgREVTVF9PVkVSIC0+IFwiZGVzdGluYXRpb24tb3ZlclwiXG4gICAgfCBERVNUX0FUT1AgLT4gXCJkZXN0aW5hdGlvbi1hdG9wXCJcbiAgICB8IERFU1RfSU4gLT4gXCJkZXN0aW5hdGlvbi1pblwiXG4gICAgfCBERVNUX09VVCAtPiBcImRlc3RpbmF0aW9uLW91dFwiXG4gICAgfCBBREQgLT4gXCJsaWdodGVyXCJcbiAgICB8IFhPUiAtPiBcInhvclwiXG4gICAgfCBERVNUIC0+IGZhaWx3aXRoIFwiVW5zdXBwb3J0ZWQgb3BlcmF0b3IgREVTVFwiXG4gICAgfCBTQVRVUkFURSAtPiBmYWlsd2l0aCBcIlVuc3VwcG9ydGVkIG9wZXJhdG9yIFNBVFVSQVRFXCJcbiAgaW5cbiAgY29udGV4dC5odG1sIyMuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIDo9IEpzLnN0cmluZyBvcGVyYXRvclxuXG5sZXQgZ2V0X29wZXJhdG9yIGNvbnRleHQgPVxuICBtYXRjaCBKcy50b19zdHJpbmcgY29udGV4dC5odG1sIyMuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIHdpdGhcbiAgICB8IFwib3ZlclwiIC0+IE9WRVIgKCogU3BlY2lhbCBjYXNlIGZvciBub2RlLWNhbnZhcyB3aGljaCBzZWVtcyB0byBoYXZlIGEgd3JvbmcgZGVmYXVsdCB2YWx1ZSAqKVxuICAgIHwgXCJhZGRcIiAtPiBBREQgKCogU3BlY2lhbCBjYXNlIGZvciBub2RlLWNhbnZhcyAqKVxuICAgIHwgXCJzb3VyY2Utb3ZlclwiIC0+IE9WRVJcbiAgICB8IFwic291cmNlLWF0b3BcIiAtPiBBVE9QXG4gICAgfCBcInNvdXJjZS1pblwiIC0+IElOXG4gICAgfCBcInNvdXJjZS1vdXRcIiAtPiBPVVRcbiAgICB8IFwiZGVzdGluYXRpb24tb3ZlclwiIC0+IERFU1RfT1ZFUlxuICAgIHwgXCJkZXN0aW5hdGlvbi1hdG9wXCIgLT4gREVTVF9BVE9QXG4gICAgfCBcImRlc3RpbmF0aW9uLWluXCIgLT4gREVTVF9JTlxuICAgIHwgXCJkZXN0aW5hdGlvbi1vdXRcIiAtPiBERVNUX09VVFxuICAgIHwgXCJsaWdodGVyXCIgLT4gQUREXG4gICAgfCBcInhvclwiIC0+IFhPUlxuICAgIHwgb3AgLT4gZmFpbHdpdGggKFByaW50Zi5zcHJpbnRmIFwiVW5leHBlY3RlZCBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gJVNcIiBvcClcblxuXG5sZXQgc2V0X3NvdXJjZSBjb250ZXh0IHBhdHRlcm4gPVxuICBsZXQgY29udmVydCB4ID0gc3RyaW5nX29mX2ludCAoaW50X29mX2Zsb2F0ICgyNTUuMCAqLiB4KSkgaW5cbiAgbGV0IGNvbnZlcnRfcmdiYSByIGcgYiBhID0gSnMuc3RyaW5nIChQcmludGYuc3ByaW50ZiBcInJnYmEoJXMsICVzLCAlcywgJWYpXCIgKGNvbnZlcnQgcikgKGNvbnZlcnQgZykgKGNvbnZlcnQgYikgYSkgaW5cbiAgbGV0IHNvdXJjZSA9ICFwYXR0ZXJuIGluXG4gIExvY2FsLnNldF9zb3VyY2UgY29udGV4dC5sb2NhbCB+c291cmNlO1xuICBtYXRjaCBzb3VyY2Ugd2l0aFxuICAgIHwgUGF0dGVybi5SZ2JhIChyLCBnLCBiLCBhKSAtPlxuICAgICAgbGV0IGNvbG9yID0gY29udmVydF9yZ2JhIHIgZyBiIGEgaW5cbiAgICAgIGNvbnRleHQuaHRtbCMjLmZpbGxTdHlsZSA6PSBjb2xvcjtcbiAgICAgIGNvbnRleHQuaHRtbCMjLnN0cm9rZVN0eWxlIDo9IGNvbG9yXG4gICAgfCBQYXR0ZXJuLkxpbmVhckdyYWRpZW50IHtwb2ludHM9KHgwLCB5MCwgeDEsIHkxKTsgc3RvcF9wb2ludHN9IC0+XG4gICAgICBsZXQgZ3JhZGllbnQgPSBjb250ZXh0Lmh0bWwjI2NyZWF0ZUxpbmVhckdyYWRpZW50IHgwIHkwIHgxIHkxIGluXG4gICAgICBzdG9wX3BvaW50c1xuICAgICAgfD4gUGF0dGVybi5TdG9wUG9pbnRMaXN0LnRvX2xpc3RcbiAgICAgIHw+IExpc3QuaXRlciB+ZjooZnVuIChwb3NpdGlvbiwgciwgZywgYiwgYSkgLT5cbiAgICAgICAgZ3JhZGllbnQjI2FkZENvbG9yU3RvcCBwb3NpdGlvbiAoY29udmVydF9yZ2JhIHIgZyBiIGEpXG4gICAgICApO1xuICAgICAgY29udGV4dC5odG1sIyMuZmlsbFN0eWxlX2dyYWRpZW50IDo9IGdyYWRpZW50O1xuICAgICAgY29udGV4dC5odG1sIyMuc3Ryb2tlU3R5bGVfZ3JhZGllbnQgOj0gZ3JhZGllbnRcbiAgICB8IFBhdHRlcm4uUmFkaWFsR3JhZGllbnQge2NpcmNsZXM9KHgwLCB5MCwgcjAsIHgxLCB5MSwgcjEpOyBzdG9wX3BvaW50c30gLT5cbiAgICAgIGxldCBncmFkaWVudCA9IGNvbnRleHQuaHRtbCMjY3JlYXRlUmFkaWFsR3JhZGllbnQgeDAgeTAgcjAgeDEgeTEgcjEgaW5cbiAgICAgIHN0b3BfcG9pbnRzXG4gICAgICB8PiBQYXR0ZXJuLlN0b3BQb2ludExpc3QudG9fbGlzdFxuICAgICAgfD4gTGlzdC5pdGVyIH5mOihmdW4gKHBvc2l0aW9uLCByLCBnLCBiLCBhKSAtPlxuICAgICAgICBncmFkaWVudCMjYWRkQ29sb3JTdG9wIHBvc2l0aW9uIChjb252ZXJ0X3JnYmEgciBnIGIgYSlcbiAgICAgICk7XG4gICAgICBjb250ZXh0Lmh0bWwjIy5maWxsU3R5bGVfZ3JhZGllbnQgOj0gZ3JhZGllbnQ7XG4gICAgICBjb250ZXh0Lmh0bWwjIy5zdHJva2VTdHlsZV9ncmFkaWVudCA6PSBncmFkaWVudFxuICAgIHwgUGF0dGVybi5UeXBlTWlzbWF0Y2ggLT5cbiAgICAgICgpXG5cbmxldCBnZXRfc291cmNlIGNvbnRleHQgPVxuICByZWYgKExvY2FsLnNvdXJjZSBjb250ZXh0LmxvY2FsKVxuXG5sZXQgc2V0X3NvdXJjZV9yZ2IgY29udGV4dCByIGcgYiA9XG4gIHNldF9zb3VyY2UgY29udGV4dCAoUGF0dGVybi5jcmVhdGVfcmdiIHIgZyBiKVxuXG5sZXQgc2V0X3NvdXJjZV9yZ2JhIGNvbnRleHQgciBnIGIgYSA9XG4gIHNldF9zb3VyY2UgY29udGV4dCAoUGF0dGVybi5jcmVhdGVfcmdiYSByIGcgYiBhKVxuXG5cbmxldCBfc2V0X2ZvbnQgY29udGV4dCAoe3NsYW50OyB3ZWlnaHQ7IHNpemU7IGZhbWlseX0gYXMgZm9udCkgPVxuICBMb2NhbC5zZXRfZm9udCBjb250ZXh0LmxvY2FsIH5mb250O1xuICBsZXQgZm9udF9zdHlsZSA9IG1hdGNoIHNsYW50IHdpdGhcbiAgICB8IFVwcmlnaHQgLT4gXCJub3JtYWxcIlxuICAgIHwgSXRhbGljIC0+IFwiaXRhbGljXCJcbiAgICB8IE9ibGlxdWUgLT4gXCJvYmxpcXVlXCJcbiAgYW5kIGZvbnRfd2VpZ2h0ID0gbWF0Y2ggd2VpZ2h0IHdpdGhcbiAgICB8IE5vcm1hbCAtPiBcIm5vcm1hbFwiXG4gICAgfCBCb2xkIC0+IFwiYm9sZFwiXG4gIGluXG4gIGxldCBmb250ID0gUHJpbnRmLnNwcmludGYgXCIlcyAlcyAlbnB4ICVzXCIgZm9udF9zdHlsZSBmb250X3dlaWdodCAoaW50X29mX2Zsb2F0IHNpemUpIGZhbWlseSBpblxuICBjb250ZXh0Lmh0bWwjIy5mb250IDo9IEpzLnN0cmluZyBmb250XG5cbmxldCBzZWxlY3RfZm9udF9mYWNlIGNvbnRleHQgPyhzbGFudD1VcHJpZ2h0KSA/KHdlaWdodD1Ob3JtYWwpIGZhbWlseSA9XG4gIF9zZXRfZm9udCBjb250ZXh0IHsoTG9jYWwuZm9udCBjb250ZXh0LmxvY2FsKSB3aXRoIHNsYW50OyB3ZWlnaHQ7IGZhbWlseX1cblxubGV0IHNldF9mb250X3NpemUgY29udGV4dCBzaXplID1cbiAgX3NldF9mb250IGNvbnRleHQgeyhMb2NhbC5mb250IGNvbnRleHQubG9jYWwpIHdpdGggc2l6ZX1cblxubGV0IHNob3dfdGV4dCBjb250ZXh0IHMgPVxuICBsZXQgKHgsIHkpID0gUGF0aC5nZXRfY3VycmVudF9wb2ludCBjb250ZXh0XG4gIGFuZCB3ID0gKGNvbnRleHQuaHRtbCMjbWVhc3VyZVRleHQgKEpzLnN0cmluZyBzKSkjIy53aWR0aCBpblxuICBMb2NhbC5zZXRfY3VycmVudF9wb2ludCBjb250ZXh0LmxvY2FsICh4ICsuIHcsIHkpO1xuICBjb250ZXh0Lmh0bWwjI2ZpbGxUZXh0IChKcy5zdHJpbmcgcykgeCB5XG5cbmxldCBmb250X2V4dGVudHMgY29udGV4dCA9XG4gIGxldCB7c2l6ZTsgX30gPSAoTG9jYWwuZm9udCBjb250ZXh0LmxvY2FsKSBpblxuICB7XG4gICAgYXNjZW50ID0gc2l6ZTtcbiAgICBkZXNjZW50ID0gc2l6ZSAvLiA0LjtcbiAgICBiYXNlbGluZSA9IDAuO1xuICAgIG1heF94X2FkdmFuY2UgPSAyLiAqLiBzaXplO1xuICAgIG1heF95X2FkdmFuY2UgPSAwLjtcbiAgfVxuXG5sZXQgdGV4dF9leHRlbnRzIGNvbnRleHQgcyA9XG4gIGxldCB7c2l6ZTsgX30gPSAoTG9jYWwuZm9udCBjb250ZXh0LmxvY2FsKVxuICBhbmQgdyA9IChjb250ZXh0Lmh0bWwjI21lYXN1cmVUZXh0IChKcy5zdHJpbmcgcykpIyMud2lkdGggaW5cbiAge1xuICAgIHhfYmVhcmluZyA9IDAuO1xuICAgIHlfYmVhcmluZyA9IDAuO1xuICAgIHdpZHRoID0gdztcbiAgICBoZWlnaHQgPSBzaXplO1xuICAgIHhfYWR2YW5jZSA9IHc7XG4gICAgeV9hZHZhbmNlID0gMC47XG4gIH1cblxubGV0IGNyZWF0ZSBjYW52YXMgPVxuICBsZXQgaHRtbCA9IGNhbnZhcyMjZ2V0Q29udGV4dCBEb21faHRtbC5fMmRfXG4gIGFuZCBsb2NhbCA9IExvY2FsLmNyZWF0ZSAoKSBpblxuICBsZXQgY29udGV4dCA9IHtcbiAgICBodG1sO1xuICAgIGxvY2FsO1xuICB9IGluXG4gIHNldF9saW5lX3dpZHRoIGNvbnRleHQgMi4wO1xuICBjb250ZXh0XG4iLCIoKiBDb3B5cmlnaHQgMjAxNy0yMDE4IFZpbmNlbnQgSmFjcXVlcyA8dmluY2VudEB2aW5jZW50LWphY3F1ZXMubmV0PiAqKVxuXG5vcGVuIEdlbmVyYWwuQWJiclxub3BlbiBUc3RcblxubW9kdWxlIE1ha2UoQzogQ2Fpcm9Nb2NrLlMpKE46IHNpZ1xuICB2YWwgbmFtZTogc3RyaW5nXG4gIHZhbCBjcmVhdGU6IHVuaXQgLT4gQy5jb250ZXh0XG4gIHZhbCBiYWNrZW5kOiBbYENhaXJvIHwgYE5vZGUgfCBgQnJvd3NlciB8IGBDYWlyb01vY2sgXVxuZW5kKSA9IHN0cnVjdFxuICBvcGVuIENcblxuICBsZXQgYmFja2VuZF9uYW1lID0gbWF0Y2ggTi5iYWNrZW5kIHdpdGhcbiAgICB8IGBDYWlybyAtPiBcIkNhaXJvXCJcbiAgICB8IGBOb2RlIHwgYEJyb3dzZXIgLT4gXCJKc09mT0NhaXJvXCIgKCpCSVNFQ1QtSUdOT1JFKikgKCogVGVzdCBjb2RlICopXG4gICAgfCBgQ2Fpcm9Nb2NrIC0+IFwiQ2Fpcm9Nb2NrXCJcblxuICBsZXQgY2hlY2tfbWF0cml4ID1cbiAgICBsZXQgZXF1YWwge3h4OyB4eTsgeXg7IHl5OyB4MDsgeTB9IG0gPVxuICAgICAgKFxuICAgICAgICBGbC5hcHByb3hfZXF1YWwgbS54eCB4eFxuICAgICAgICAmJiBGbC5hcHByb3hfZXF1YWwgbS54eSB4eVxuICAgICAgICAmJiBGbC5hcHByb3hfZXF1YWwgbS55eCB5eFxuICAgICAgICAmJiBGbC5hcHByb3hfZXF1YWwgbS55eSB5eVxuICAgICAgICAmJiBGbC5hcHByb3hfZXF1YWwgbS54MCB4MFxuICAgICAgICAmJiBGbC5hcHByb3hfZXF1YWwgbS55MCB5MFxuICAgICAgKVxuICAgIGFuZCByZXByIHt4eDsgeHk7IHl4OyB5eTsgeDA7IHkwfSA9XG4gICAgICBGcm10LmFwcGx5IFwie3h4PSVmOyB4eT0lZjsgeXg9JWY7IHl5PSVmOyB4MD0lZjsgeTA9JWZ9XCIgeHggeHkgeXggeXkgeDAgeTAgKCpCSVNFQ1QtSUdOT1JFKikgKCogVGVzdCBjb2RlICopXG4gICAgaW5cbiAgICBjaGVjayB+ZXF1YWwgfnJlcHJcblxuICBsZXQgY2hlY2tfY29vcmRzID9wcmVjaXNpb24gPVxuICAgIGxldCBlcXVhbCAoeDAsIHkwKSAoeDEsIHkxKSA9XG4gICAgICAoRmwuYXBwcm94X2VxdWFsID9wcmVjaXNpb24geDAgeDEgJiYgRmwuYXBwcm94X2VxdWFsID9wcmVjaXNpb24geTAgeTEpXG4gICAgYW5kIHJlcHIgKHgsIHkpID1cbiAgICAgIEZybXQuYXBwbHkgXCIoJWYsICVmKVwiIHggeSAoKkJJU0VDVC1JR05PUkUqKSAoKiBUZXN0IGNvZGUgKilcbiAgICBpblxuICAgIGNoZWNrIH5lcXVhbCB+cmVwclxuXG4gIGxldCBjaGVja19mbG9hdF90dXBsZV80ID1cbiAgICBsZXQgcmVwciAoYSwgYiwgYywgZCkgPVxuICAgICAgRnJtdC5hcHBseSBcIiglZiwgJWYsICVmLCAlZilcIiBhIGIgYyBkICgqQklTRUNULUlHTk9SRSopICgqIFRlc3QgY29kZSAqKVxuICAgIGluXG4gICAgY2hlY2tfcG9seSB+cmVwclxuXG4gIGxldCBjaGVja19mbG9hdF90dXBsZV81ID1cbiAgICBsZXQgcmVwciAoYSwgYiwgYywgZCwgZSkgPVxuICAgICAgRnJtdC5hcHBseSBcIiglZiwgJWYsICVmLCAlZiwgJWYpXCIgYSBiIGMgZCBlICgqQklTRUNULUlHTk9SRSopICgqIFRlc3QgY29kZSAqKVxuICAgIGluXG4gICAgY2hlY2tfcG9seSB+cmVwclxuXG4gIGxldCBjaGVja19mbG9hdF90dXBsZV82ID1cbiAgICBsZXQgcmVwciAoYSwgYiwgYywgZCwgZSwgZikgPVxuICAgICAgRnJtdC5hcHBseSBcIiglZiwgJWYsICVmLCAlZiwgJWYsICVmKVwiIGEgYiBjIGQgZSBmICgqQklTRUNULUlHTk9SRSopICgqIFRlc3QgY29kZSAqKVxuICAgIGluXG4gICAgY2hlY2tfcG9seSB+cmVwclxuXG4gIGxldCB0ZXN0ID0gfjo6IFwiVW5pdmVyc2FsIHRlc3RzIG9uICVzXCIgTi5uYW1lIFtcbiAgICBcInNhdmVkLWFuZC1yZXN0b3JlZCBzZXR0aW5nc1wiID46OiAoXG4gICAgICBsZXQgbWFrZSBuYW1lIHNldHRlciBnZXR0ZXIgY2hlY2sgaW5pdGlhbF92YWx1ZSBvdGhlcl92YWx1ZSBvdGhlcl92YWx1ZXMgPVxuICAgICAgICBuYW1lID46IChsYXp5IChcbiAgICAgICAgICBsZXQgY3R4ID0gTi5jcmVhdGUgKCkgaW5cbiAgICAgICAgICBjaGVjayB+ZXhwZWN0ZWQ6aW5pdGlhbF92YWx1ZSAoZ2V0dGVyIGN0eCk7XG4gICAgICAgICAgKGluaXRpYWxfdmFsdWU6Om90aGVyX3ZhbHVlOjpvdGhlcl92YWx1ZXMpXG4gICAgICAgICAgfD4gTGkuaXRlciB+ZjooZnVuIHZhbHVlIC0+XG4gICAgICAgICAgICBzZXR0ZXIgY3R4IHZhbHVlO1xuICAgICAgICAgICAgY2hlY2sgfmV4cGVjdGVkOnZhbHVlIChnZXR0ZXIgY3R4KTtcbiAgICAgICAgICAgIHNhdmUgY3R4O1xuICAgICAgICAgICAgY2hlY2sgfmV4cGVjdGVkOnZhbHVlIChnZXR0ZXIgY3R4KTtcbiAgICAgICAgICAgIHNldHRlciBjdHggb3RoZXJfdmFsdWU7XG4gICAgICAgICAgICBjaGVjayB+ZXhwZWN0ZWQ6b3RoZXJfdmFsdWUgKGdldHRlciBjdHgpO1xuICAgICAgICAgICAgcmVzdG9yZSBjdHg7XG4gICAgICAgICAgICBjaGVjayB+ZXhwZWN0ZWQ6dmFsdWUgKGdldHRlciBjdHgpO1xuICAgICAgICAgIClcbiAgICAgICAgKSlcbiAgICAgIGluXG4gICAgICBbXG4gICAgICAgIG1ha2UgXCJsaW5lX3dpZHRoXCIgc2V0X2xpbmVfd2lkdGggZ2V0X2xpbmVfd2lkdGggY2hlY2tfZmxvYXRfZXhhY3QgMi4gMS4gWzQuXTtcbiAgICAgICAgbWFrZSBcIm1pdGVyX2xpbWl0XCIgc2V0X21pdGVyX2xpbWl0IGdldF9taXRlcl9saW1pdCBjaGVja19mbG9hdF9leGFjdCAxMC4gNS4gWzIwLl07XG4gICAgICAgIChsZXQgcmVwciA9IGZ1bmN0aW9uXG4gICAgICAgICAgKCpCSVNFQ1QtSUdOT1JFLUJFR0lOKilcbiAgICAgICAgICB8IFdJTkRJTkcgLT4gXCJXSU5ESU5HXCJcbiAgICAgICAgICB8IEVWRU5fT0REIC0+IFwiRVZFTl9PRERcIlxuICAgICAgICAgICgqQklTRUNULUlHTk9SRS1FTkQqKVxuICAgICAgICBpblxuICAgICAgICBtYWtlIFwiZmlsbF9ydWxlXCIgc2V0X2ZpbGxfcnVsZSBnZXRfZmlsbF9ydWxlIChjaGVja19wb2x5IH5yZXByKSBXSU5ESU5HIEVWRU5fT0REIFtdKTtcbiAgICAgICAgKGxldCByZXByID0gZnVuY3Rpb25cbiAgICAgICAgICAoKkJJU0VDVC1JR05PUkUtQkVHSU4qKVxuICAgICAgICAgIHwgQlVUVCAtPiBcIkJVVFRcIlxuICAgICAgICAgIHwgUk9VTkQgLT4gXCJST1VORFwiXG4gICAgICAgICAgfCBTUVVBUkUgLT4gXCJTUVVBUkVcIlxuICAgICAgICAgICgqQklTRUNULUlHTk9SRS1FTkQqKVxuICAgICAgICBpblxuICAgICAgICBtYWtlIFwibGluZV9jYXBcIiBzZXRfbGluZV9jYXAgZ2V0X2xpbmVfY2FwIChjaGVja19wb2x5IH5yZXByKSBCVVRUIFJPVU5EIFtTUVVBUkVdKTtcbiAgICAgICAgKGxldCByZXByID0gZnVuY3Rpb25cbiAgICAgICAgICAoKkJJU0VDVC1JR05PUkUtQkVHSU4qKVxuICAgICAgICAgIHwgSk9JTl9NSVRFUiAtPiBcIkpPSU5fTUlURVJcIlxuICAgICAgICAgIHwgSk9JTl9ST1VORCAtPiBcIkpPSU5fUk9VTkRcIlxuICAgICAgICAgIHwgSk9JTl9CRVZFTCAtPiBcIkpPSU5fQkVWRUxcIlxuICAgICAgICAgICgqQklTRUNULUlHTk9SRS1FTkQqKVxuICAgICAgICBpblxuICAgICAgICBtYWtlIFwibGluZV9qb2luXCIgc2V0X2xpbmVfam9pbiBnZXRfbGluZV9qb2luIChjaGVja19wb2x5IH5yZXByKSBKT0lOX01JVEVSIEpPSU5fUk9VTkQgW0pPSU5fQkVWRUxdKTtcbiAgICAgICAgKGxldCByZXByID0gZnVuY3Rpb25cbiAgICAgICAgICAoKkJJU0VDVC1JR05PUkUtQkVHSU4qKVxuICAgICAgICAgIHwgQ0xFQVIgLT4gXCJDTEVBUlwiXG4gICAgICAgICAgfCBTT1VSQ0UgLT4gXCJTT1VSQ0VcIlxuICAgICAgICAgIHwgT1ZFUiAtPiBcIk9WRVJcIlxuICAgICAgICAgIHwgSU4gLT4gXCJJTlwiXG4gICAgICAgICAgfCBPVVQgLT4gXCJPVVRcIlxuICAgICAgICAgIHwgQVRPUCAtPiBcIkFUT1BcIlxuICAgICAgICAgIHwgREVTVCAtPiBcIkRFU1RcIlxuICAgICAgICAgIHwgREVTVF9PVkVSIC0+IFwiREVTVF9PVkVSXCJcbiAgICAgICAgICB8IERFU1RfSU4gLT4gXCJERVNUX0lOXCJcbiAgICAgICAgICB8IERFU1RfT1VUIC0+IFwiREVTVF9PVVRcIlxuICAgICAgICAgIHwgREVTVF9BVE9QIC0+IFwiREVTVF9BVE9QXCJcbiAgICAgICAgICB8IFhPUiAtPiBcIlhPUlwiXG4gICAgICAgICAgfCBBREQgLT4gXCJBRERcIlxuICAgICAgICAgIHwgU0FUVVJBVEUgLT4gXCJTQVRVUkFURVwiXG4gICAgICAgICAgKCpCSVNFQ1QtSUdOT1JFLUVORCopXG4gICAgICAgIGluXG4gICAgICAgIG1ha2UgXCJvcGVyYXRvclwiIHNldF9vcGVyYXRvciBnZXRfb3BlcmF0b3IgKGNoZWNrX3BvbHkgfnJlcHIpIE9WRVIgSU4gKFtPVVQ7IEFUT1A7IERFU1RfT1ZFUjsgREVTVF9JTjsgREVTVF9PVVQ7IERFU1RfQVRPUDsgWE9SOyBBRERdIEAgKGlmIE4uYmFja2VuZCA9IGBOb2RlIHx8IE4uYmFja2VuZCA9IGBCcm93c2VyIHRoZW4gW10gZWxzZSBbQ0xFQVI7IFNPVVJDRTsgREVTVDsgU0FUVVJBVEVdKSkpOyAoKkJJU0VDVC1JR05PUkUqKSAoKiBUZXN0IGNvZGUgKilcbiAgICAgICAgXCJkYXNoXCIgPjo6IFtcbiAgICAgICAgICAobGV0IHJlcHIgZGFzaGVzID1cbiAgICAgICAgICAgICgqQklTRUNULUlHTk9SRS1CRUdJTiopXG4gICAgICAgICAgICBkYXNoZXNcbiAgICAgICAgICAgIHw+IExpLm9mX2FycmF5XG4gICAgICAgICAgICB8PiBMaS5tYXAgfmY6RmwucmVwclxuICAgICAgICAgICAgfD4gU3RyTGkuam9pbiB+c2VwOlwiOyBcIlxuICAgICAgICAgICAgfD4gRnJtdC5hcHBseSBcIlt8JXN8XVwiXG4gICAgICAgICAgICAoKkJJU0VDVC1JR05PUkUtRU5EKilcbiAgICAgICAgICBpblxuICAgICAgICAgIG1ha2UgXCJkYXNoZXNcIiAoZnVuIGMgZGFzaGVzIC0+IHNldF9kYXNoIGMgZGFzaGVzKSAoZnVuIGMgLT4gZ2V0X2Rhc2ggYyB8PiBUdTIuZ2V0XzApIChjaGVja19wb2x5IH5yZXByKSBbfHxdIFt8MS47IDIufF0gKFtbfDMuOyA0LjsgNS47IDYufF07IFt8Ny47IDguOyA5LjsgMTAuOyAxMS47IDEyLnxdXSBAIChpZiBOLmJhY2tlbmQgPSBgTm9kZSB8fCBOLmJhY2tlbmQgPSBgQnJvd3NlciB0aGVuIFtdIGVsc2UgW1t8My58XTsgW3w0LjsgNS47IDYufF1dKSkpOyAoKkJJU0VDVC1JR05PUkUqKSAoKiBUZXN0IGNvZGUgKilcbiAgICAgICAgICBtYWtlIFwib2Zmc2V0XCIgKGZ1biBjIG9mcyAtPiBzZXRfZGFzaCBjIH5vZnMgW3wxMC47IDEwLnxdKSAoZnVuIGMgLT4gZ2V0X2Rhc2ggYyB8PiBUdTIuZ2V0XzEpIGNoZWNrX2Zsb2F0X2V4YWN0IDAuIDIuIFszLl07XG4gICAgICAgIF07XG4gICAgICAgIG1ha2VcbiAgICAgICAgICBcInNvdXJjZVwiXG4gICAgICAgICAgKGZ1biBjIChyLCBnLCBiLCBhKSAtPiBzZXRfc291cmNlX3JnYmEgYyByIGcgYiBhKVxuICAgICAgICAgIChmdW4gYyAtPiBnZXRfc291cmNlIGMgfD4gUGF0dGVybi5nZXRfcmdiYSlcbiAgICAgICAgICAoY2hlY2tfZmxvYXRfdHVwbGVfNClcbiAgICAgICAgICAoMC4sIDAuLCAwLiwgMS4pXG4gICAgICAgICAgKDEuLCAwLiwgMC4sIDAuNSlcbiAgICAgICAgICBbKDAuLCAwLiwgMS4sIDAuNyldXG4gICAgICAgIDtcbiAgICAgIF1cbiAgICApO1xuICAgIFwic3RhdHVzX3RvX3N0cmluZ1wiID46OiAoXG4gICAgICBsZXQgbWFrZSBuYW1lIHN0YXR1cyBleHBlY3RlZCA9XG4gICAgICAgIG5hbWUgPjogKGxhenkgKFxuICAgICAgICAgIGNoZWNrX3N0cmluZyB+ZXhwZWN0ZWQgKHN0YXR1c190b19zdHJpbmcgc3RhdHVzKVxuICAgICAgICApKVxuICAgICAgaW5cbiAgICAgIFtcbiAgICAgICAgbWFrZSBcIklOVkFMSURfUkVTVE9SRVwiIElOVkFMSURfUkVTVE9SRSBcImNhaXJvX3Jlc3RvcmUoKSB3aXRob3V0IG1hdGNoaW5nIGNhaXJvX3NhdmUoKVwiO1xuICAgICAgICBtYWtlIFwiSU5WQUxJRF9QT1BfR1JPVVBcIiBJTlZBTElEX1BPUF9HUk9VUCBcIm5vIHNhdmVkIGdyb3VwIHRvIHBvcCwgaS5lLiBjYWlyb19wb3BfZ3JvdXAoKSB3aXRob3V0IG1hdGNoaW5nIGNhaXJvX3B1c2hfZ3JvdXAoKVwiO1xuICAgICAgICBtYWtlIFwiTk9fQ1VSUkVOVF9QT0lOVFwiIE5PX0NVUlJFTlRfUE9JTlQgXCJubyBjdXJyZW50IHBvaW50IGRlZmluZWRcIjtcbiAgICAgICAgbWFrZSBcIklOVkFMSURfTUFUUklYXCIgSU5WQUxJRF9NQVRSSVggXCJpbnZhbGlkIG1hdHJpeCAobm90IGludmVydGlibGUpXCI7XG4gICAgICAgIG1ha2UgXCJJTlZBTElEX1NUQVRVU1wiIElOVkFMSURfU1RBVFVTIFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgY2Fpcm9fc3RhdHVzX3RcIjtcbiAgICAgICAgbWFrZSBcIk5VTExfUE9JTlRFUlwiIE5VTExfUE9JTlRFUiBcIk5VTEwgcG9pbnRlclwiO1xuICAgICAgICBtYWtlIFwiSU5WQUxJRF9TVFJJTkdcIiBJTlZBTElEX1NUUklORyBcImlucHV0IHN0cmluZyBub3QgdmFsaWQgVVRGLThcIjtcbiAgICAgICAgbWFrZSBcIklOVkFMSURfUEFUSF9EQVRBXCIgSU5WQUxJRF9QQVRIX0RBVEEgXCJpbnB1dCBwYXRoIGRhdGEgbm90IHZhbGlkXCI7XG4gICAgICAgIG1ha2UgXCJSRUFEX0VSUk9SXCIgUkVBRF9FUlJPUiBcImVycm9yIHdoaWxlIHJlYWRpbmcgZnJvbSBpbnB1dCBzdHJlYW1cIjtcbiAgICAgICAgbWFrZSBcIldSSVRFX0VSUk9SXCIgV1JJVEVfRVJST1IgXCJlcnJvciB3aGlsZSB3cml0aW5nIHRvIG91dHB1dCBzdHJlYW1cIjtcbiAgICAgICAgbWFrZSBcIlNVUkZBQ0VfRklOSVNIRURcIiBTVVJGQUNFX0ZJTklTSEVEIFwidGhlIHRhcmdldCBzdXJmYWNlIGhhcyBiZWVuIGZpbmlzaGVkXCI7XG4gICAgICAgIG1ha2UgXCJTVVJGQUNFX1RZUEVfTUlTTUFUQ0hcIiBTVVJGQUNFX1RZUEVfTUlTTUFUQ0ggXCJ0aGUgc3VyZmFjZSB0eXBlIGlzIG5vdCBhcHByb3ByaWF0ZSBmb3IgdGhlIG9wZXJhdGlvblwiO1xuICAgICAgICBtYWtlIFwiUEFUVEVSTl9UWVBFX01JU01BVENIXCIgUEFUVEVSTl9UWVBFX01JU01BVENIIFwidGhlIHBhdHRlcm4gdHlwZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoZSBvcGVyYXRpb25cIjtcbiAgICAgICAgbWFrZSBcIklOVkFMSURfQ09OVEVOVFwiIElOVkFMSURfQ09OVEVOVCBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2NvbnRlbnRfdFwiO1xuICAgICAgICBtYWtlIFwiSU5WQUxJRF9GT1JNQVRcIiBJTlZBTElEX0ZPUk1BVCBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2Zvcm1hdF90XCI7XG4gICAgICAgIG1ha2UgXCJJTlZBTElEX1ZJU1VBTFwiIElOVkFMSURfVklTVUFMIFwiaW52YWxpZCB2YWx1ZSBmb3IgYW4gaW5wdXQgVmlzdWFsKlwiO1xuICAgICAgICBtYWtlIFwiRklMRV9OT1RfRk9VTkRcIiBGSUxFX05PVF9GT1VORCBcImZpbGUgbm90IGZvdW5kXCI7XG4gICAgICAgIG1ha2UgXCJJTlZBTElEX0RBU0hcIiBJTlZBTElEX0RBU0ggXCJpbnZhbGlkIHZhbHVlIGZvciBhIGRhc2ggc2V0dGluZ1wiO1xuICAgICAgICBtYWtlIFwiSU5WQUxJRF9EU0NfQ09NTUVOVFwiIElOVkFMSURfRFNDX0NPTU1FTlQgXCJpbnZhbGlkIHZhbHVlIGZvciBhIERTQyBjb21tZW50XCI7XG4gICAgICAgIG1ha2UgXCJJTlZBTElEX0lOREVYXCIgSU5WQUxJRF9JTkRFWCBcImludmFsaWQgaW5kZXggcGFzc2VkIHRvIGdldHRlclwiO1xuICAgICAgICBtYWtlIFwiQ0xJUF9OT1RfUkVQUkVTRU5UQUJMRVwiIENMSVBfTk9UX1JFUFJFU0VOVEFCTEUgXCJjbGlwIHJlZ2lvbiBub3QgcmVwcmVzZW50YWJsZSBpbiBkZXNpcmVkIGZvcm1hdFwiO1xuICAgICAgICBtYWtlIFwiVEVNUF9GSUxFX0VSUk9SXCIgVEVNUF9GSUxFX0VSUk9SIFwiZXJyb3IgY3JlYXRpbmcgb3Igd3JpdGluZyB0byBhIHRlbXBvcmFyeSBmaWxlXCI7XG4gICAgICAgIG1ha2UgXCJJTlZBTElEX1NUUklERVwiIElOVkFMSURfU1RSSURFIFwiaW52YWxpZCB2YWx1ZSBmb3Igc3RyaWRlXCI7XG4gICAgICAgIG1ha2UgXCJGT05UX1RZUEVfTUlTTUFUQ0hcIiBGT05UX1RZUEVfTUlTTUFUQ0ggXCJ0aGUgZm9udCB0eXBlIGlzIG5vdCBhcHByb3ByaWF0ZSBmb3IgdGhlIG9wZXJhdGlvblwiO1xuICAgICAgICBtYWtlIFwiVVNFUl9GT05UX0lNTVVUQUJMRVwiIFVTRVJfRk9OVF9JTU1VVEFCTEUgXCJ0aGUgdXNlci1mb250IGlzIGltbXV0YWJsZVwiO1xuICAgICAgICBtYWtlIFwiVVNFUl9GT05UX0VSUk9SXCIgVVNFUl9GT05UX0VSUk9SIFwiZXJyb3Igb2NjdXJyZWQgaW4gYSB1c2VyLWZvbnQgY2FsbGJhY2sgZnVuY3Rpb25cIjtcbiAgICAgICAgbWFrZSBcIk5FR0FUSVZFX0NPVU5UXCIgTkVHQVRJVkVfQ09VTlQgXCJuZWdhdGl2ZSBudW1iZXIgdXNlZCB3aGVyZSBpdCBpcyBub3QgYWxsb3dlZFwiO1xuICAgICAgICBtYWtlIFwiSU5WQUxJRF9DTFVTVEVSU1wiIElOVkFMSURfQ0xVU1RFUlMgXCJpbnB1dCBjbHVzdGVycyBkbyBub3QgcmVwcmVzZW50IHRoZSBhY2NvbXBhbnlpbmcgdGV4dCBhbmQgZ2x5cGggYXJyYXlzXCI7XG4gICAgICAgIG1ha2UgXCJJTlZBTElEX1NMQU5UXCIgSU5WQUxJRF9TTEFOVCBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2ZvbnRfc2xhbnRfdFwiO1xuICAgICAgICBtYWtlIFwiSU5WQUxJRF9XRUlHSFRcIiBJTlZBTElEX1dFSUdIVCBcImludmFsaWQgdmFsdWUgZm9yIGFuIGlucHV0IGNhaXJvX2ZvbnRfd2VpZ2h0X3RcIjtcbiAgICAgICAgbWFrZSBcIklOVkFMSURfU0laRVwiIElOVkFMSURfU0laRSBcImludmFsaWQgdmFsdWUgKHR5cGljYWxseSB0b28gYmlnKSBmb3IgdGhlIHNpemUgb2YgdGhlIGlucHV0IChzdXJmYWNlLCBwYXR0ZXJuLCBldGMuKVwiO1xuICAgICAgICBtYWtlIFwiVVNFUl9GT05UX05PVF9JTVBMRU1FTlRFRFwiIFVTRVJfRk9OVF9OT1RfSU1QTEVNRU5URUQgXCJ1c2VyLWZvbnQgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZFwiO1xuICAgICAgICBtYWtlIFwiREVWSUNFX1RZUEVfTUlTTUFUQ0hcIiBERVZJQ0VfVFlQRV9NSVNNQVRDSCBcInRoZSBkZXZpY2UgdHlwZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoZSBvcGVyYXRpb25cIjtcbiAgICAgICAgbWFrZSBcIkRFVklDRV9FUlJPUlwiIERFVklDRV9FUlJPUiBcImFuIG9wZXJhdGlvbiB0byB0aGUgZGV2aWNlIGNhdXNlZCBhbiB1bnNwZWNpZmllZCBlcnJvclwiO1xuICAgICAgICBtYWtlIFwiSU5WQUxJRF9NRVNIX0NPTlNUUlVDVElPTlwiIElOVkFMSURfTUVTSF9DT05TVFJVQ1RJT04gXCJpbnZhbGlkIG9wZXJhdGlvbiBkdXJpbmcgbWVzaCBwYXR0ZXJuIGNvbnN0cnVjdGlvblwiO1xuICAgICAgICBtYWtlIFwiREVWSUNFX0ZJTklTSEVEXCIgREVWSUNFX0ZJTklTSEVEIFwidGhlIHRhcmdldCBkZXZpY2UgaGFzIGJlZW4gZmluaXNoZWRcIjtcbiAgICAgICAgbWFrZSBcIkpCSUcyX0dMT0JBTF9NSVNTSU5HXCIgSkJJRzJfR0xPQkFMX01JU1NJTkcgXCJDQUlST19NSU1FX1RZUEVfSkJJRzJfR0xPQkFMX0lEIHVzZWQgYnV0IG5vIENBSVJPX01JTUVfVFlQRV9KQklHMl9HTE9CQUwgZGF0YSBwcm92aWRlZFwiO1xuICAgICAgXVxuICAgICk7XG4gICAgXCJleGNlcHRpb25zXCIgPjo6IFtcbiAgICAgIFwiQ2Fpcm8gRXJyb3JcIiA+OiAobGF6eSAoXG4gICAgICAgIGNoZWNrX3N0cmluZyB+ZXhwZWN0ZWQ6KEZybXQuYXBwbHkgXCIlcy5FcnJvcihJTlZBTElEX1JFU1RPUkUpXCIgYmFja2VuZF9uYW1lKSAoRXhuLnRvX3N0cmluZyAoRXJyb3IgSU5WQUxJRF9SRVNUT1JFKSk7XG4gICAgICApKTtcbiAgICAgIFwiTm90IENhaXJvXCIgPjogKGxhenkgKFxuICAgICAgICAoKiBUaGlzIHRlc3QgY292ZXJzIHRoZSBOb25lIGNhc2UgaW4gdGhlIHJlZ2lzdGVyZWQgcHJpbnRlciAqKVxuICAgICAgICBjaGVja19zdHJpbmcgfmV4cGVjdGVkOlwiTm90X2ZvdW5kXCIgKEV4bi50b19zdHJpbmcgTm90X2ZvdW5kKTtcbiAgICAgICkpXG4gICAgXTtcbiAgICBcInRyYW5zZm9ybWF0aW9uc1wiID46OiAoXG4gICAgICBsZXQgaWRlbnRpdHkgPSB7eHg9MS47IHh5PTAuOyB5eD0wLjsgeXk9MS47IHgwPTAuOyB5MD0wLn0gaW5cbiAgICAgIGxldCBtYWtlIG5hbWUgZiBleHBlY3RlZCA9XG4gICAgICAgIG5hbWUgPjogKGxhenkgKFxuICAgICAgICAgIGxldCBjdHggPSBOLmNyZWF0ZSAoKSBpblxuICAgICAgICAgIGNoZWNrX21hdHJpeCB+ZXhwZWN0ZWQ6aWRlbnRpdHkgKGdldF9tYXRyaXggY3R4KTtcbiAgICAgICAgICBmIGN0eDtcbiAgICAgICAgICBjaGVja19tYXRyaXggfmV4cGVjdGVkIChnZXRfbWF0cml4IGN0eCk7XG4gICAgICAgICAgc2F2ZSBjdHg7XG4gICAgICAgICAgY2hlY2tfbWF0cml4IH5leHBlY3RlZCAoZ2V0X21hdHJpeCBjdHgpO1xuICAgICAgICAgIGlkZW50aXR5X21hdHJpeCBjdHg7XG4gICAgICAgICAgY2hlY2tfbWF0cml4IH5leHBlY3RlZDppZGVudGl0eSAoZ2V0X21hdHJpeCBjdHgpO1xuICAgICAgICAgIHJlc3RvcmUgY3R4O1xuICAgICAgICAgIGNoZWNrX21hdHJpeCB+ZXhwZWN0ZWQgKGdldF9tYXRyaXggY3R4KTtcbiAgICAgICAgKSlcbiAgICAgIGluXG4gICAgICBbXG4gICAgICAgIG1ha2UgXCJ0cmFuc2xhdGVcIiAoZnVuIGMgLT4gdHJhbnNsYXRlIGMgMi4gMy4pIHt4eD0xLjsgeHk9MC47IHl4PTAuOyB5eT0xLjsgeDA9Mi47IHkwPTMufTtcbiAgICAgICAgbWFrZSBcInNjYWxlXCIgKGZ1biBjIC0+IHNjYWxlIGMgMi4gMy4pIHt4eD0yLjsgeHk9MC47IHl4PTAuOyB5eT0zLjsgeDA9MC47IHkwPTAufTtcbiAgICAgICAgbWFrZSBcInJvdGF0ZVwiIChmdW4gYyAtPiByb3RhdGUgYyAoRmwucGkgLy4gNC4pKSAobGV0IHMgPSBGbC5zcXJ0KDIuKSAvLiAyLiBpbiB7eHg9czsgeHk9KC0ucyk7IHl4PXM7IHl5PXM7IHgwPTAuOyB5MD0wLn0pO1xuICAgICAgICBtYWtlIFwic2V0X21hdHJpeFwiIChmdW4gYyAtPiBzZXRfbWF0cml4IGMge3h4PTEuOyB4eT0yLjsgeXg9My47IHl5PTQuOyB4MD01LjsgeTA9Ni59KSB7eHg9MS47IHh5PTIuOyB5eD0zLjsgeXk9NC47IHgwPTUuOyB5MD02Ln07XG4gICAgICAgIG1ha2UgXCJ0cmFuc2Zvcm1cIiAoZnVuIGMgLT4gc2NhbGUgYyAyLiAzLjsgdHJhbnNmb3JtIGMge3h4PTEuOyB4eT0yLjsgeXg9My47IHl5PTQuOyB4MD01LjsgeTA9Ni59KSB7eHg9Mi47IHh5PTQuOyB5eD05LjsgeXk9MTIuOyB4MD0xMC47IHkwPTE4Ln07XG4gICAgICBdXG4gICAgKTtcbiAgICBcIm1hdHJpeFwiID46OiBbXG4gICAgICBcImluaXRfaWRlbnRpdHlcIiA+OiAobGF6eSAoXG4gICAgICAgIGNoZWNrX21hdHJpeCB+ZXhwZWN0ZWQ6e3h4PTEuOyB4eT0wLjsgeXg9MC47IHl5PTEuOyB4MD0wLjsgeTA9MC59IChNYXRyaXguaW5pdF9pZGVudGl0eSAoKSlcbiAgICAgICkpO1xuICAgICAgXCJpbml0X3RyYW5zbGF0ZVwiID46IChsYXp5IChcbiAgICAgICAgY2hlY2tfbWF0cml4IH5leHBlY3RlZDp7eHg9MS47IHh5PTAuOyB5eD0wLjsgeXk9MS47IHgwPTIuOyB5MD0zLn0gKE1hdHJpeC5pbml0X3RyYW5zbGF0ZSAyLiAzLilcbiAgICAgICkpO1xuICAgICAgXCJpbml0X3NjYWxlXCIgPjogKGxhenkgKFxuICAgICAgICBjaGVja19tYXRyaXggfmV4cGVjdGVkOnt4eD0yLjsgeHk9MC47IHl4PTAuOyB5eT0zLjsgeDA9MC47IHkwPTAufSAoTWF0cml4LmluaXRfc2NhbGUgMi4gMy4pXG4gICAgICApKTtcbiAgICAgIFwiaW5pdF9yb3RhdGVcIiA+OiAobGF6eSAoXG4gICAgICAgIGNoZWNrX21hdHJpeCB+ZXhwZWN0ZWQ6e3h4PShGbC5zcXJ0IDMuIC8uIDIuKTsgeHk9KC0wLjUpOyB5eD0wLjU7IHl5PShGbC5zcXJ0IDMuIC8uIDIuKTsgeDA9MC47IHkwPTAufSAoTWF0cml4LmluaXRfcm90YXRlIChGbC5waSAvLiA2LikpXG4gICAgICApKTtcbiAgICAgIFwiaW52ZXJ0XCIgPjo6IFtcbiAgICAgICAgXCJub24gaW52ZXJ0aWJsZVwiID46IChsYXp5IChcbiAgICAgICAgICBleHBlY3RfZXhjZXB0aW9uIH5leHBlY3RlZDooRXJyb3IgSU5WQUxJRF9NQVRSSVgpIChsYXp5IChcbiAgICAgICAgICAgIGxldCBtID0ge3h4PTEuOyB4eT0yLjsgeXg9MS47IHl5PTIuOyB4MD0zLjsgeTA9NC59IGluXG4gICAgICAgICAgICBNYXRyaXguaW52ZXJ0IG1cbiAgICAgICAgICApKVxuICAgICAgICApKTtcbiAgICAgICAgXCJpbnZlcnRpYmxlXCIgPjogKGxhenkgKFxuICAgICAgICAgIGxldCBtID0ge3h4PTEuOyB4eT0yLjsgeXg9My47IHl5PTQuOyB4MD01LjsgeTA9Ni59IGluXG4gICAgICAgICAgTWF0cml4LmludmVydCBtO1xuICAgICAgICAgIGNoZWNrX21hdHJpeCB+ZXhwZWN0ZWQ6e3h4PSgtMi4pOyB4eT0xLjsgeXg9MS41OyB5eT0oLTAuNSk7IHgwPTQuOyB5MD0oLTQuNSl9IG1cbiAgICAgICAgKSk7XG4gICAgICBdO1xuICAgICAgXCJzY2FsZVwiID46IChsYXp5IChcbiAgICAgICAgbGV0IG0gPSB7eHg9MS47IHh5PTIuOyB5eD0zLjsgeXk9NC47IHgwPTUuOyB5MD02Ln0gaW5cbiAgICAgICAgTWF0cml4LnNjYWxlIG0gNy4gOC47XG4gICAgICAgIGNoZWNrX21hdHJpeCB+ZXhwZWN0ZWQ6e3h4PTcuOyB4eT0xNi47IHl4PTIxLjsgeXk9MzIuOyB4MD01LjsgeTA9Ni59IG1cbiAgICAgICkpO1xuICAgICAgXCJ0cmFuc2xhdGVcIiA+OiAobGF6eSAoXG4gICAgICAgIGxldCBtID0ge3h4PTEuOyB4eT0yLjsgeXg9My47IHl5PTQuOyB4MD01LjsgeTA9Ni59IGluXG4gICAgICAgIE1hdHJpeC50cmFuc2xhdGUgbSA3LiA4LjtcbiAgICAgICAgY2hlY2tfbWF0cml4IH5leHBlY3RlZDp7eHg9MS47IHh5PTIuOyB5eD0zLjsgeXk9NC47IHgwPTI4LjsgeTA9NTkufSBtXG4gICAgICApKTtcbiAgICAgIFwicm90YXRlXCIgPjogKGxhenkgKFxuICAgICAgICBsZXQgbSA9IHt4eD0xLjsgeHk9Mi47IHl4PTMuOyB5eT00LjsgeDA9NS47IHkwPTYufSBpblxuICAgICAgICBNYXRyaXgucm90YXRlIG0gKEZsLnBpIC8uIDYuKTtcbiAgICAgICAgbGV0IHMgPSBGbC5zcXJ0IDMuIC8uIDIuIGluXG4gICAgICAgIGNoZWNrX21hdHJpeCB+ZXhwZWN0ZWQ6e3h4PShzICsuIDEuKTsgeHk9KDIuICouIHMgLS4gMC41KTsgeXg9KDMuICouIHMgKy4gMi4pOyB5eT0oNC4gKi4gcyAtLiAxLjUpOyB4MD01LjsgeTA9Ni59IG1cbiAgICAgICkpO1xuICAgIF07XG4gICAgXCJjb29yZGluYXRlcyB0cmFuc2Zvcm1hdGlvblwiID46IChsYXp5IChcbiAgICAgIGxldCBjdHggPSBOLmNyZWF0ZSAoKVxuICAgICAgYW5kIG0gPSB7eHg9MS47IHh5PTIuOyB5eD0zLjsgeXk9NC47IHgwPTUuOyB5MD02Ln0gaW5cbiAgICAgIHNldF9tYXRyaXggY3R4IG07XG4gICAgICBjaGVja19jb29yZHMgfmV4cGVjdGVkOigtMi4sIDIuKSAoZGV2aWNlX3RvX3VzZXIgY3R4IDcuIDguKTtcbiAgICAgIGNoZWNrX2Nvb3JkcyB+ZXhwZWN0ZWQ6KC02LiwgNi41KSAoZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgY3R4IDcuIDguKTtcbiAgICAgIGNoZWNrX2Nvb3JkcyB+ZXhwZWN0ZWQ6KDI4LiwgNTkuKSAodXNlcl90b19kZXZpY2UgY3R4IDcuIDguKTtcbiAgICAgIGNoZWNrX2Nvb3JkcyB+ZXhwZWN0ZWQ6KDIzLiwgNTMuKSAodXNlcl90b19kZXZpY2VfZGlzdGFuY2UgY3R4IDcuIDguKTtcbiAgICAgIGNoZWNrX2Nvb3JkcyB+ZXhwZWN0ZWQ6KDI4LiwgNTkuKSAoTWF0cml4LnRyYW5zZm9ybV9wb2ludCBtIDcuIDguKTtcbiAgICAgIGNoZWNrX2Nvb3JkcyB+ZXhwZWN0ZWQ6KDIzLiwgNTMuKSAoTWF0cml4LnRyYW5zZm9ybV9kaXN0YW5jZSBtIH5keDo3LiB+ZHk6OC4pO1xuICAgICkpO1xuICAgIFwiaW52YWxpZCByZXN0b3JlXCIgPjogKGxhenkgKFxuICAgICAgbGV0IGN0eCA9IE4uY3JlYXRlICgpIGluXG4gICAgICBleHBlY3RfZXhjZXB0aW9uIH5leHBlY3RlZDooRXJyb3IgSU5WQUxJRF9SRVNUT1JFKSAobGF6eSAocmVzdG9yZSBjdHgpKVxuICAgICkpO1xuICAgIFwibm8gY3VycmVudCBwb2ludFwiID46OiAoXG4gICAgICBsZXQgbWFrZSBuYW1lIGYgPVxuICAgICAgICBuYW1lID46IChsYXp5IChcbiAgICAgICAgICBsZXQgY3R4ID0gTi5jcmVhdGUgKCkgaW5cbiAgICAgICAgICBleHBlY3RfZXhjZXB0aW9uIH5leHBlY3RlZDooRXJyb3IgTk9fQ1VSUkVOVF9QT0lOVCkgKGxhenkgKGYgY3R4KSlcbiAgICAgICAgKSlcbiAgICAgIGluXG4gICAgICBbXG4gICAgICAgIG1ha2UgXCJyZWxfbW92ZV90b1wiIChmdW4gYyAtPiByZWxfbW92ZV90byBjIDEuIDIuKTtcbiAgICAgICAgbWFrZSBcInJlbF9saW5lX3RvXCIgKGZ1biBjIC0+IHJlbF9saW5lX3RvIGMgMS4gMi4pO1xuICAgICAgICBtYWtlIFwicmVsX2N1cnZlX3RvXCIgKGZ1biBjIC0+IHJlbF9jdXJ2ZV90byBjIDEuIDIuIDMuIDQuIDUuIDYuKTtcbiAgICAgICAgbWFrZSBcIlBhdGguY2xlYXJcIiAoZnVuIGMgLT4gbW92ZV90byBjIDEuIDIuOyBQYXRoLmNsZWFyIGM7IHJlbF9tb3ZlX3RvIGMgMy4gNC4pO1xuICAgICAgICBtYWtlIFwic3Ryb2tlXCIgKGZ1biBjIC0+IG1vdmVfdG8gYyAxLiAyLjsgbGluZV90byBjIDMuIDQuOyBzdHJva2UgYzsgcmVsX21vdmVfdG8gYyAzLiA0Lik7XG4gICAgICAgIG1ha2UgXCJmaWxsXCIgKGZ1biBjIC0+IG1vdmVfdG8gYyAxLiAyLjsgbGluZV90byBjIDMuIDQuOyBmaWxsIGM7IHJlbF9tb3ZlX3RvIGMgMy4gNC4pO1xuICAgICAgICBtYWtlIFwiY2xpcFwiIChmdW4gYyAtPiBtb3ZlX3RvIGMgMS4gMi47IGxpbmVfdG8gYyAzLiA0LjsgY2xpcCBjOyByZWxfbW92ZV90byBjIDMuIDQuKTtcbiAgICAgIF1cbiAgICApO1xuICAgIFwiY3VycmVudCBwb2ludFwiID46OiAoXG4gICAgICBsZXQgbWFrZScgbmFtZSBmIGNoZWNrID1cbiAgICAgICAgbmFtZSA+OiAobGF6eSAoXG4gICAgICAgICAgbGV0IGN0eCA9IE4uY3JlYXRlICgpIGluXG4gICAgICAgICAgZiBjdHg7XG4gICAgICAgICAgY2hlY2sgKFBhdGguZ2V0X2N1cnJlbnRfcG9pbnQgY3R4KVxuICAgICAgICApKVxuICAgICAgaW5cbiAgICAgIGxldCBtYWtlIG5hbWUgZiBleHBlY3RlZCA9XG4gICAgICAgICgqIExvdyBwcmVjaXNpb24gYmVjYXVzZSBDYWlybyBtYWtlcyBhcHByb3hpbWF0aW9ucyBvbiBhcmNzICopXG4gICAgICAgIG1ha2UnIG5hbWUgZiAoY2hlY2tfY29vcmRzIH5wcmVjaXNpb246MWUtMyB+ZXhwZWN0ZWQpXG4gICAgICBpblxuICAgICAgW1xuICAgICAgICBtYWtlIFwibm8tb3BcIiAoZnVuIF8gLT4gKCkpICgwLiwgMC4pO1xuICAgICAgICBtYWtlIFwibW92ZV90b1wiIChmdW4gYyAtPiBtb3ZlX3RvIGMgMS4gMi4pICgxLiwgMi4pO1xuICAgICAgICBtYWtlIFwicGFpbnRcIiBwYWludCAoMC4sIDAuKTtcbiAgICAgICAgbWFrZSBcIm1vdmVfdG8sIHBhaW50XCIgKGZ1biBjIC0+IG1vdmVfdG8gYyAxLiAyLjsgcGFpbnQgYykgKDEuLCAyLik7XG4gICAgICAgIG1ha2UgXCJzYXZlLCBtb3ZlX3RvLCByZXN0b3JlXCJcbiAgICAgICAgICAoZnVuIGMgLT5cbiAgICAgICAgICAgIHNhdmUgYztcbiAgICAgICAgICAgIG1vdmVfdG8gYyAxLiAyLjtcbiAgICAgICAgICAgIHJlc3RvcmUgYztcbiAgICAgICAgICApXG4gICAgICAgICAgKDEuLCAyLik7XG4gICAgICAgIG1ha2UgXCJzYXZlLCBzY2FsZSwgbW92ZV90bywgcmVzdG9yZVwiXG4gICAgICAgICAgKGZ1biBjIC0+XG4gICAgICAgICAgICBzYXZlIGM7XG4gICAgICAgICAgICBzY2FsZSBjIDMuIDQuO1xuICAgICAgICAgICAgbW92ZV90byBjIDEuIDIuO1xuICAgICAgICAgICAgcmVzdG9yZSBjO1xuICAgICAgICAgIClcbiAgICAgICAgICAoMy4sIDguKTtcbiAgICAgICAgbWFrZSBcInJlbF9tb3ZlX3RvXCIgKGZ1biBjIC0+IG1vdmVfdG8gYyAxLiAyLjsgcmVsX21vdmVfdG8gYyAzLiA0LikgKDQuLCA2Lik7XG4gICAgICAgIG1ha2UgXCJsaW5lX3RvXCIgKGZ1biBjIC0+IGxpbmVfdG8gYyAxLiAyLikgKDEuLCAyLik7XG4gICAgICAgIG1ha2UgXCJyZWxfbGluZV90b1wiIChmdW4gYyAtPiBtb3ZlX3RvIGMgMS4gMi47IHJlbF9saW5lX3RvIGMgMy4gNC4pICg0LiwgNi4pO1xuICAgICAgICBtYWtlIFwicmVjdGFuZ2xlXCIgKGZ1biBjIC0+IHJlY3RhbmdsZSBjIDEuIDIuIH53OjMuIH5oOjQuKSAoMS4sIDIuKTtcbiAgICAgICAgXCJhcmNcIiA+OjogW1xuICAgICAgICAgIG1ha2UgXCIwXCIgKGZ1biBjIC0+IGFyYyBjIDEuIDIuIH5yOjMuIH5hMTooLTEuKSB+YTI6MC4pICg0LiwgMi4pO1xuICAgICAgICAgIG1ha2UgXCJwaSAvIDZcIiAoZnVuIGMgLT4gYXJjIGMgMS4gMi4gfnI6My4gfmExOigtMS4pIH5hMjooRmwucGkgLy4gNi4pKSAoMS4gKy4gMy4gKi4gRmwuc3FydCgzLikgLy4gMi4sIDIuICsuIDMuICouIDAuNSk7XG4gICAgICAgICAgbWFrZSBcInBpIC8gNFwiIChmdW4gYyAtPiBhcmMgYyAxLiAyLiB+cjozLiB+YTE6MC4gfmEyOihGbC5waSAvLiA0LikpICgxLiArLiAzLiAqLiBGbC5zcXJ0KDIuKSAvLiAyLiwgMi4gKy4gMy4gKi4gRmwuc3FydCgyLikgLy4gMi4pO1xuICAgICAgICAgIG1ha2UgXCJwaSAvIDJcIiAoZnVuIGMgLT4gYXJjIGMgMS4gMi4gfnI6My4gfmExOigtMS4pIH5hMjooRmwucGkgLy4gMi4pKSAoMS4sIDUuKTtcbiAgICAgICAgICBtYWtlIFwiMyBwaVwiIChmdW4gYyAtPiBhcmMgYyAxLiAyLiB+cjozLiB+YTE6KEZsLnBpIC8uIDIuKSB+YTI6KDMuICouIEZsLnBpKSkgKC0yLiwgMi4pO1xuICAgICAgICBdO1xuICAgICAgICBcImFyY19uZWdhdGl2ZVwiID46OiBbXG4gICAgICAgICAgbWFrZSBcIjBcIiAoZnVuIGMgLT4gYXJjX25lZ2F0aXZlIGMgMS4gMi4gfnI6My4gfmExOigtMS4pIH5hMjowLikgKDQuLCAyLik7XG4gICAgICAgICAgbWFrZSBcInBpIC8gNlwiIChmdW4gYyAtPiBhcmNfbmVnYXRpdmUgYyAxLiAyLiB+cjozLiB+YTE6KC0xLikgfmEyOihGbC5waSAvLiA2LikpICgxLiArLiAzLiAqLiBGbC5zcXJ0KDMuKSAvLiAyLiwgMi4gKy4gMy4gKi4gMC41KTtcbiAgICAgICAgICBtYWtlIFwicGkgLyA0XCIgKGZ1biBjIC0+IGFyY19uZWdhdGl2ZSBjIDEuIDIuIH5yOjMuIH5hMTowLiB+YTI6KEZsLnBpIC8uIDQuKSkgKDEuICsuIDMuICouIEZsLnNxcnQoMi4pIC8uIDIuLCAyLiArLiAzLiAqLiBGbC5zcXJ0KDIuKSAvLiAyLik7XG4gICAgICAgICAgbWFrZSBcInBpIC8gMlwiIChmdW4gYyAtPiBhcmNfbmVnYXRpdmUgYyAxLiAyLiB+cjozLiB+YTE6KC0xLikgfmEyOihGbC5waSAvLiAyLikpICgxLiwgNS4pO1xuICAgICAgICBdO1xuICAgICAgICBtYWtlIFwiY3VydmVfdG9cIiAoZnVuIGMgLT4gY3VydmVfdG8gYyAxLiAyLiAzLiA0LiA1LiA2LikgKDUuLCA2Lik7XG4gICAgICAgIG1ha2UgXCJyZWxfbGluZV90b1wiIChmdW4gYyAtPiBtb3ZlX3RvIGMgMS4gMi47IHJlbF9jdXJ2ZV90byBjIDEuIDIuIDMuIDQuIDUuIDYuKSAoNi4sIDguKTtcbiAgICAgICAgbWFrZSBcIlBhdGguY2xvc2VcIiAoZnVuIGMgLT4gbW92ZV90byBjIDEuIDIuOyBsaW5lX3RvIGMgMy4gNC47IGxpbmVfdG8gYyA1LiA2LjsgUGF0aC5jbG9zZSBjKSAoMS4sIDIuKTtcbiAgICAgICAgbWFrZSBcInN0cm9rZV9wcmVzZXJ2ZVwiIChmdW4gYyAtPiBtb3ZlX3RvIGMgMS4gMi47IGxpbmVfdG8gYyAzLiA0Ljsgc3Ryb2tlX3ByZXNlcnZlIGMpICgzLiwgNC4pO1xuICAgICAgICBtYWtlIFwiZmlsbF9wcmVzZXJ2ZVwiIChmdW4gYyAtPiBtb3ZlX3RvIGMgMS4gMi47IGxpbmVfdG8gYyAzLiA0LjsgZmlsbF9wcmVzZXJ2ZSBjKSAoMy4sIDQuKTtcbiAgICAgICAgbWFrZSBcImNsaXBfcHJlc2VydmVcIiAoZnVuIGMgLT4gbW92ZV90byBjIDEuIDIuOyBsaW5lX3RvIGMgMy4gNC47IGNsaXBfcHJlc2VydmUgYykgKDMuLCA0Lik7XG4gICAgICAgIG1ha2UnIFwic2hvd190ZXh0XCIgKGZ1biBjIC0+IG1vdmVfdG8gYyAxLiAyLjsgc2hvd190ZXh0IGMgXCJIZWxsb1wiKSAoZnVuICh4LCB5KSAtPlxuICAgICAgICAgIGNoZWNrX2Zsb2F0X2luIH5sb3c6MTAuIH5oaWdoOjUwLiB4O1xuICAgICAgICAgIGNoZWNrX2Zsb2F0IH5leHBlY3RlZDoyLiB5XG4gICAgICAgICk7XG4gICAgICBdXG4gICAgKTtcbiAgICBcInBhdHRlcm5zXCIgPjo6IFBhdHRlcm4uW1xuICAgICAgXCJjcmVhdGVfcmdiLCBnZXRfcmdiYVwiID46IChsYXp5IChcbiAgICAgICAgbGV0IHAgPSBjcmVhdGVfcmdiIDAuMSAwLjIgMC4zIGluXG4gICAgICAgIGNoZWNrX2Zsb2F0X3R1cGxlXzQgfmV4cGVjdGVkOigwLjEsIDAuMiwgMC4zLCAxLikgKGdldF9yZ2JhIHApXG4gICAgICApKTtcbiAgICAgIFwic2V0X3NvdXJjZV9yZ2IsIGdldF9yZ2JhXCIgPjogKGxhenkgKFxuICAgICAgICBsZXQgY3R4ID0gTi5jcmVhdGUgKCkgaW5cbiAgICAgICAgc2V0X3NvdXJjZV9yZ2IgY3R4IDAuMSAwLjIgMC4zO1xuICAgICAgICBsZXQgcCA9IGdldF9zb3VyY2UgY3R4IGluXG4gICAgICAgIGNoZWNrX2Zsb2F0X3R1cGxlXzQgfmV4cGVjdGVkOigwLjEsIDAuMiwgMC4zLCAxLikgKGdldF9yZ2JhIHApXG4gICAgICApKTtcbiAgICAgIFwiY3JlYXRlX3JnYmEsIGdldF9yZ2JhXCIgPjogKGxhenkgKFxuICAgICAgICBsZXQgcCA9IGNyZWF0ZV9yZ2JhIDAuMSAwLjIgMC4zIDAuNCBpblxuICAgICAgICBjaGVja19mbG9hdF90dXBsZV80IH5leHBlY3RlZDooMC4xLCAwLjIsIDAuMywgMC40KSAoZ2V0X3JnYmEgcClcbiAgICAgICkpO1xuICAgICAgXCJzZXRfc291cmNlX3JnYmEsIGdldF9yZ2JhXCIgPjogKGxhenkgKFxuICAgICAgICBsZXQgY3R4ID0gTi5jcmVhdGUgKCkgaW5cbiAgICAgICAgc2V0X3NvdXJjZV9yZ2JhIGN0eCAwLjEgMC4yIDAuMyAwLjQ7XG4gICAgICAgIGxldCBwID0gZ2V0X3NvdXJjZSBjdHggaW5cbiAgICAgICAgY2hlY2tfZmxvYXRfdHVwbGVfNCB+ZXhwZWN0ZWQ6KDAuMSwgMC4yLCAwLjMsIDAuNCkgKGdldF9yZ2JhIHApXG4gICAgICApKTtcbiAgICAgIFwiY3JlYXRlX2xpbmVhciwgZ2V0X2xpbmVhcl9wb2ludHNcIiA+OiAobGF6eSAoXG4gICAgICAgIGxldCBwID0gY3JlYXRlX2xpbmVhciB+eDA6MS4gfnkwOjIuIH54MTozLiB+eTE6NC4gaW5cbiAgICAgICAgY2hlY2tfZmxvYXRfdHVwbGVfNCB+ZXhwZWN0ZWQ6KDEuLCAyLiwgMy4sIDQuKSAoZ2V0X2xpbmVhcl9wb2ludHMgcClcbiAgICAgICkpO1xuICAgICAgXCJjcmVhdGVfcmFkaWFsLCBnZXRfcmFkaWFsX2NpcmNsZXNcIiA+OiAobGF6eSAoXG4gICAgICAgIGxldCBwID0gY3JlYXRlX3JhZGlhbCB+eDA6MS4gfnkwOjIuIH5yMDozLiB+eDE6NC4gfnkxOjUuIH5yMTo2LiBpblxuICAgICAgICBjaGVja19mbG9hdF90dXBsZV82IH5leHBlY3RlZDooMS4sIDIuLCAzLiwgNC4sIDUuLCA2LikgKGdldF9yYWRpYWxfY2lyY2xlcyBwKVxuICAgICAgKSk7XG4gICAgICBcImNyZWF0ZV9saW5lYXIsIGFkZF9jb2xvcl9zdG9wX3JnYmEsIGdldF9jb2xvcl9zdG9wX2NvdW50LCBnZXRfY29sb3Jfc3RvcF9yZ2JhXCIgPjogKGxhenkgKFxuICAgICAgICBsZXQgcCA9IGNyZWF0ZV9saW5lYXIgfngwOjEuIH55MDoyLiB+eDE6My4gfnkxOjQuIGluXG4gICAgICAgIGFkZF9jb2xvcl9zdG9wX3JnYmEgcCB+b2ZzOjAuMSAwLjIgMC4zIDAuNCAwLjU7XG4gICAgICAgIGNoZWNrX2ludCB+ZXhwZWN0ZWQ6MSAoZ2V0X2NvbG9yX3N0b3BfY291bnQgcCk7XG4gICAgICAgIGNoZWNrX2Zsb2F0X3R1cGxlXzUgfmV4cGVjdGVkOigwLjEsIDAuMiwgMC4zLCAwLjQsIDAuNSkgKGdldF9jb2xvcl9zdG9wX3JnYmEgcCB+aWR4OjApXG4gICAgICApKTtcbiAgICAgIFwiY3JlYXRlX3JhZGlhbCwgYWRkX2NvbG9yX3N0b3BfcmdiLCBnZXRfY29sb3Jfc3RvcF9jb3VudCwgZ2V0X2NvbG9yX3N0b3BfcmdiYVwiID46IChsYXp5IChcbiAgICAgICAgbGV0IHAgPSBjcmVhdGVfcmFkaWFsIH54MDoxLiB+eTA6Mi4gfnIwOjMuIH54MTo0LiB+eTE6NS4gfnIxOjYuIGluXG4gICAgICAgIGFkZF9jb2xvcl9zdG9wX3JnYiBwIDAuMiAwLjMgMC40O1xuICAgICAgICBjaGVja19pbnQgfmV4cGVjdGVkOjEgKGdldF9jb2xvcl9zdG9wX2NvdW50IHApO1xuICAgICAgICBjaGVja19mbG9hdF90dXBsZV81IH5leHBlY3RlZDooMC4sIDAuMiwgMC4zLCAwLjQsIDEuKSAoZ2V0X2NvbG9yX3N0b3BfcmdiYSBwIH5pZHg6MClcbiAgICAgICkpO1xuICAgICAgXCJtdWx0aXBsZSBjb2xvciBzdG9wc1wiID46IChsYXp5IChcbiAgICAgICAgbGV0IHAgPSBjcmVhdGVfbGluZWFyIH54MDoxLiB+eTA6Mi4gfngxOjMuIH55MTo0LiBpblxuICAgICAgICBhZGRfY29sb3Jfc3RvcF9yZ2IgcCB+b2ZzOjAuMiAwLjIgMC4yIDAuMjtcbiAgICAgICAgYWRkX2NvbG9yX3N0b3BfcmdiIHAgfm9mczowLjEgMC4xIDAuMSAwLjE7XG4gICAgICAgIGFkZF9jb2xvcl9zdG9wX3JnYiBwIH5vZnM6MC4yIDAuMjEgMC4yMSAwLjIxO1xuICAgICAgICBhZGRfY29sb3Jfc3RvcF9yZ2IgcCB+b2ZzOjAuMyAwLjMgMC4zIDAuMztcbiAgICAgICAgY2hlY2tfaW50IH5leHBlY3RlZDo0IChnZXRfY29sb3Jfc3RvcF9jb3VudCBwKTtcbiAgICAgICAgY2hlY2tfZmxvYXRfdHVwbGVfNSB+ZXhwZWN0ZWQ6KDAuMSwgMC4xLCAwLjEsIDAuMSwgMS4pIChnZXRfY29sb3Jfc3RvcF9yZ2JhIHAgfmlkeDowKTtcbiAgICAgICAgY2hlY2tfZmxvYXRfdHVwbGVfNSB+ZXhwZWN0ZWQ6KDAuMiwgMC4yLCAwLjIsIDAuMiwgMS4pIChnZXRfY29sb3Jfc3RvcF9yZ2JhIHAgfmlkeDoxKTtcbiAgICAgICAgY2hlY2tfZmxvYXRfdHVwbGVfNSB+ZXhwZWN0ZWQ6KDAuMiwgMC4yMSwgMC4yMSwgMC4yMSwgMS4pIChnZXRfY29sb3Jfc3RvcF9yZ2JhIHAgfmlkeDoyKTtcbiAgICAgICAgY2hlY2tfZmxvYXRfdHVwbGVfNSB+ZXhwZWN0ZWQ6KDAuMywgMC4zLCAwLjMsIDAuMywgMS4pIChnZXRfY29sb3Jfc3RvcF9yZ2JhIHAgfmlkeDozKVxuICAgICAgKSk7XG4gICAgICBcImNyZWF0ZV9yZ2IsIGFkZF9jb2xvcl9zdG9wX3JnYlwiID46IChsYXp5IChcbiAgICAgICAgbGV0IGN0eCA9IE4uY3JlYXRlICgpIGluXG4gICAgICAgIHNldF9zb3VyY2UgY3R4IChjcmVhdGVfcmdiIDAuMSAwLjIgMC4zKTtcbiAgICAgICAgbGV0IHAgPSBnZXRfc291cmNlIGN0eCBpblxuICAgICAgICAoKiBUaGlzIGlzIGEgYml0IHdlaXJkOiBhZGRfY29sb3Jfc3RvcF9yZ2IgcmV0dXJucyBzaWxlbnRseSwgYnV0IHB1dHMgdGhlIHBhdHRlcm4gaW4gYSBzdGF0ZSB3aGVyZSBhbGwgZ2V0dGVycyBmYWlsLiAqKVxuICAgICAgICBhZGRfY29sb3Jfc3RvcF9yZ2IgcCB+b2ZzOjAuMSAwLjEgMC4xIDAuMTtcbiAgICAgICAgYWRkX2NvbG9yX3N0b3BfcmdiIHAgfm9mczowLjIgMC4yIDAuMiAwLjI7XG4gICAgICAgIGV4cGVjdF9leGNlcHRpb24gfmV4cGVjdGVkOihFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpIChsYXp5IChnZXRfcmdiYSBwKSk7XG4gICAgICAgIGV4cGVjdF9leGNlcHRpb24gfmV4cGVjdGVkOihFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpIChsYXp5IChnZXRfY29sb3Jfc3RvcF9jb3VudCBwKSk7XG4gICAgICAgIGV4cGVjdF9leGNlcHRpb24gfmV4cGVjdGVkOihFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpIChsYXp5IChnZXRfbGluZWFyX3BvaW50cyBwKSk7XG4gICAgICAgIGV4cGVjdF9leGNlcHRpb24gfmV4cGVjdGVkOihFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpIChsYXp5IChnZXRfcmFkaWFsX2NpcmNsZXMgcCkpO1xuICAgICAgICBleHBlY3RfZXhjZXB0aW9uIH5leHBlY3RlZDooRXJyb3IgUEFUVEVSTl9UWVBFX01JU01BVENIKSAobGF6eSAoZ2V0X2NvbG9yX3N0b3BfcmdiYSB+aWR4OjAgcCkpO1xuICAgICAgKSk7XG4gICAgICBcIm1pc21hdGNoXCIgPjo6IChcbiAgICAgICAgbGV0IG1ha2UgbmFtZSBwIGYgPVxuICAgICAgICAgIG5hbWUgPjogKGxhenkgKFxuICAgICAgICAgICAgbGV0IGN0eCA9IE4uY3JlYXRlICgpIGluXG4gICAgICAgICAgICAoKiBGb3JnZXQgdHlwZSAqKVxuICAgICAgICAgICAgc2V0X3NvdXJjZSBjdHggcDtcbiAgICAgICAgICAgIGxldCBwID0gZ2V0X3NvdXJjZSBjdHggaW5cbiAgICAgICAgICAgIGV4cGVjdF9leGNlcHRpb24gfmV4cGVjdGVkOihFcnJvciBQQVRURVJOX1RZUEVfTUlTTUFUQ0gpIChsYXp5IChmIHApKVxuICAgICAgICAgICkpXG4gICAgICAgIGluXG4gICAgICAgIFtcbiAgICAgICAgICBtYWtlIFwiY3JlYXRlX3JnYiwgZ2V0X2xpbmVhcl9wb2ludHNcIiAoY3JlYXRlX3JnYiAwLjEgMC4yIDAuMykgZ2V0X2xpbmVhcl9wb2ludHM7XG4gICAgICAgICAgbWFrZSBcImNyZWF0ZV9yZ2IsIGdldF9yYWRpYWxfY2lyY2xlc1wiIChjcmVhdGVfcmdiIDAuMSAwLjIgMC4zKSBnZXRfcmFkaWFsX2NpcmNsZXM7XG4gICAgICAgICAgbWFrZSBcImNyZWF0ZV9yZ2IsIGdldF9jb2xvcl9zdG9wX2NvdW50XCIgKGNyZWF0ZV9yZ2IgMC4xIDAuMiAwLjMpIGdldF9jb2xvcl9zdG9wX2NvdW50O1xuICAgICAgICAgIG1ha2UgXCJjcmVhdGVfcmdiLCBnZXRfY29sb3Jfc3RvcF9yZ2JhXCIgKGNyZWF0ZV9yZ2IgMC4xIDAuMiAwLjMpIChnZXRfY29sb3Jfc3RvcF9yZ2JhIH5pZHg6MCk7XG4gICAgICAgICAgbWFrZSBcImNyZWF0ZV9saW5lYXIsIGdldF9yZ2JhXCIgKGNyZWF0ZV9saW5lYXIgfngwOjEuIH55MDoyLiB+eDE6My4gfnkxOjQuKSBnZXRfcmdiYTtcbiAgICAgICAgICBtYWtlIFwiY3JlYXRlX2xpbmVhciwgZ2V0X3JhZGlhbF9jaXJjbGVzXCIgKGNyZWF0ZV9saW5lYXIgfngwOjEuIH55MDoyLiB+eDE6My4gfnkxOjQuKSBnZXRfcmFkaWFsX2NpcmNsZXM7XG4gICAgICAgICAgbWFrZSBcImNyZWF0ZV9yYWRpYWwsIGdldF9yZ2JhXCIgKGNyZWF0ZV9yYWRpYWwgfngwOjEuIH55MDoyLiB+cjA6My4gfngxOjQuIH55MTo1LiB+cjE6Ni4pIGdldF9yZ2JhO1xuICAgICAgICAgIG1ha2UgXCJjcmVhdGVfcmFkaWFsLCBnZXRfbGluZWFyX3BvaW50c1wiIChjcmVhdGVfcmFkaWFsIH54MDoxLiB+eTA6Mi4gfnIwOjMuIH54MTo0LiB+eTE6NS4gfnIxOjYuKSBnZXRfbGluZWFyX3BvaW50cztcbiAgICAgICAgXVxuICAgICAgKTtcbiAgICBdO1xuICAgICgqIEZ1bmN0aW9ucyBhYm91dCB0ZXh0IGFuZCBmb250cyBhcmUgbm90IGNvdmVyZWQgYnkgdGhlc2UgdGVzdHMgYmVjYXVzZSB0aGV5IGRvbid0IGJlaGF2ZSB0aGUgc2FtZSBhY2Nyb3NzIGFsbCBpbXBsZW1lbnRhdGlvbnMuICopXG4gIF1cbmVuZFxuIiwiKCogQ29weXJpZ2h0IDIwMTctMjAxOCBWaW5jZW50IEphY3F1ZXMgPHZpbmNlbnRAdmluY2VudC1qYWNxdWVzLm5ldD4gKilcblxub3BlbiBHZW5lcmFsLkFiYnJcbm9wZW4gVHN0XG5cbm1vZHVsZSBNYWtlKEM6IENhaXJvTW9jay5TKShOOiBzaWdcbiAgdmFsIG5hbWU6IHN0cmluZ1xuICB2YWwgY3JlYXRlOiB1bml0IC0+IEMuY29udGV4dFxuICB2YWwgYmFja2VuZDogW2BDYWlybyB8IGBOb2RlIHwgYEJyb3dzZXIgfCBgQ2Fpcm9Nb2NrIF1cbmVuZCkgPSBzdHJ1Y3RcbiAgbW9kdWxlIERlY29yYXRlZEMgPSBDYWlyb01vY2suRGVjb3JhdGUoQylcbiAgb3BlbiBEZWNvcmF0ZWRDXG5cbiAgbGV0IGJhY2tlbmRfbmFtZSA9IG1hdGNoIE4uYmFja2VuZCB3aXRoXG4gICAgfCBgQ2Fpcm8gLT4gXCJDYWlyb1wiXG4gICAgfCBgTm9kZSB8IGBCcm93c2VyIC0+IFwiSnNPZk9DYWlyb1wiICgqQklTRUNULUlHTk9SRSopICgqIFRlc3QgY29kZSAqKVxuICAgIHwgYENhaXJvTW9jayAtPiBcIkNhaXJvTW9ja1wiXG5cbiAgbGV0IG1ha2VfbicgbmFtZSBmcyBjaGVja3MgPVxuICAgIG5hbWUgPjogKGxhenkgKFxuICAgICAgbGV0IGMgPSBjcmVhdGUgKE4uY3JlYXRlICgpKSBpblxuICAgICAgTGkuaXRlciB+ZjooZnVuIGYgLT4gaWdub3JlIChmIGMpKSBmcztcbiAgICAgIExpLlR3by50b19wYWlyX2xpc3QgY2hlY2tzIChjYWxscyBjKVxuICAgICAgfD4gTGkuaXRlciB+ZjooZnVuIChjaGVjaywgYWN0dWFsKSAtPlxuICAgICAgICBjaGVjayBhY3R1YWxcbiAgICAgIClcbiAgICApKVxuXG4gIGxldCBtYWtlJyBuYW1lIGYgY2hlY2sgPVxuICAgIG1ha2VfbicgbmFtZSBbZl0gW2NoZWNrXVxuXG4gIGxldCBtYWtlX24gbmFtZSBmcyBleHBlY3RlZCA9XG4gICAgbWFrZV9uJyBuYW1lIGZzIChMaS5tYXAgfmY6KGZ1biBleHBlY3RlZCAtPiBjaGVja19zdHJpbmcgfmV4cGVjdGVkKSBleHBlY3RlZClcblxuICBsZXQgbWFrZSBuYW1lIGYgZXhwZWN0ZWQgPVxuICAgIEZybXQud2l0aF9yZXN1bHQgfmY6KGZ1biBleHBlY3RlZCAtPlxuICAgICAgbWFrZV9uIG5hbWUgW2ZdIFtleHBlY3RlZF1cbiAgICApIGV4cGVjdGVkXG5cbiAgbGV0IGNhdGNoIGVycm9yIGYgY3R4ID1cbiAgICBleHBlY3RfZXhjZXB0aW9uIH5leHBlY3RlZDooRXJyb3IgZXJyb3IpIChsYXp5IChmIGN0eCkpXG5cbiAgbGV0IHRlc3QgPSB+OjogXCJEZWNvcmF0aW9uIHRlc3RzIG9uIENhaXJvTW9jay5EZWNvcmF0ZSglcylcIiBOLm5hbWUgKFtcbiAgICBtYWtlX24gXCJzYXZlLCByZXN0b3JlXCIgW3NhdmU7IHJlc3RvcmVdIFtcInNhdmVcIjsgXCJyZXN0b3JlXCJdO1xuICAgIG1ha2UgXCJpbnZhbGlkIHJlc3RvcmVcIiAoY2F0Y2ggSU5WQUxJRF9SRVNUT1JFIHJlc3RvcmUpIFwicmVzdG9yZSAtPiByYWlzZSAoJXMuRXJyb3IoSU5WQUxJRF9SRVNUT1JFKSlcIiBiYWNrZW5kX25hbWU7XG5cbiAgICBtYWtlIFwic2NhbGVcIiAoZnVuIGMgLT4gc2NhbGUgYyAzLiAyLikgXCJzY2FsZSAzLjAwIDIuMDBcIjtcbiAgICBtYWtlIFwidHJhbnNsYXRlXCIgKGZ1biBjIC0+IHRyYW5zbGF0ZSBjIDMuIDIuKSBcInRyYW5zbGF0ZSAzLjAwIDIuMDBcIjtcbiAgICBtYWtlIFwicm90YXRlXCIgKGZ1biBjIC0+IHJvdGF0ZSBjIDMuKSBcInJvdGF0ZSAzLjAwXCI7XG4gICAgbWFrZSBcInRyYW5zZm9ybVwiIChmdW4gYyAtPiB0cmFuc2Zvcm0gYyB7eHg9MS47IHh5PTIuOyB5eD0zLjsgeXk9NC47IHgwPTUuOyB5MD02Ln0pIFwidHJhbnNmb3JtIHt4eD0xLjAwOyB4eT0yLjAwOyB5eD0zLjAwOyB5eT00LjAwOyB4MD01LjAwOyB5MD02LjAwfVwiO1xuICAgIG1ha2UgXCJzZXRfbWF0cml4XCIgKGZ1biBjIC0+IHNldF9tYXRyaXggYyB7eHg9MS47IHh5PTIuOyB5eD0zLjsgeXk9NC47IHgwPTUuOyB5MD02Ln0pIFwic2V0X21hdHJpeCB7eHg9MS4wMDsgeHk9Mi4wMDsgeXg9My4wMDsgeXk9NC4wMDsgeDA9NS4wMDsgeTA9Ni4wMH1cIjtcbiAgICBtYWtlIFwiaWRlbnRpdHlfbWF0cml4XCIgaWRlbnRpdHlfbWF0cml4IFwiaWRlbnRpdHlfbWF0cml4XCI7XG4gICAgbWFrZSBcImdldF9tYXRyaXhcIiBnZXRfbWF0cml4IFwiZ2V0X21hdHJpeCAtPiB7eHg9MS4wMDsgeHk9MC4wMDsgeXg9MC4wMDsgeXk9MS4wMDsgeDA9MC4wMDsgeTA9MC4wMH1cIjtcbiAgICBtYWtlIFwidXNlcl90b19kZXZpY2VcIiAoZnVuIGMgLT4gdXNlcl90b19kZXZpY2UgYyAyLiAzLikgXCJ1c2VyX3RvX2RldmljZSAyLjAwIDMuMDAgLT4gKDIuMDAsIDMuMDApXCI7XG4gICAgbWFrZSBcInVzZXJfdG9fZGV2aWNlX2Rpc3RhbmNlXCIgKGZ1biBjIC0+IHVzZXJfdG9fZGV2aWNlX2Rpc3RhbmNlIGMgMi4gMy4pIFwidXNlcl90b19kZXZpY2VfZGlzdGFuY2UgMi4wMCAzLjAwIC0+ICgyLjAwLCAzLjAwKVwiO1xuICAgIG1ha2UgXCJkZXZpY2VfdG9fdXNlclwiIChmdW4gYyAtPiBkZXZpY2VfdG9fdXNlciBjIDIuIDMuKSBcImRldmljZV90b191c2VyIDIuMDAgMy4wMCAtPiAoMi4wMCwgMy4wMClcIjtcbiAgICBtYWtlIFwiZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2VcIiAoZnVuIGMgLT4gZGV2aWNlX3RvX3VzZXJfZGlzdGFuY2UgYyAyLiAzLikgXCJkZXZpY2VfdG9fdXNlcl9kaXN0YW5jZSAyLjAwIDMuMDAgLT4gKDIuMDAsIDMuMDApXCI7XG5cbiAgICBtYWtlIFwibW92ZV90b1wiIChmdW4gYyAtPiBtb3ZlX3RvIGMgNC4wNSAyLjk1NykgXCJtb3ZlX3RvIDQuMDUgMi45NlwiO1xuICAgIG1ha2UgXCJpbnZhbGlkIHJlbF9tb3ZlX3RvXCIgKGNhdGNoIE5PX0NVUlJFTlRfUE9JTlQgKGZ1biBjIC0+IHJlbF9tb3ZlX3RvIGMgNC4wNSAyLjk1NykpIFwicmVsX21vdmVfdG8gNC4wNSAyLjk2IC0+IHJhaXNlICglcy5FcnJvcihOT19DVVJSRU5UX1BPSU5UKSlcIiBiYWNrZW5kX25hbWU7XG4gICAgbWFrZV9uIFwicmVsX21vdmVfdG9cIiBbKGZ1biBjIC0+IG1vdmVfdG8gYyAxLiAyLik7IGZ1biBjIC0+IHJlbF9tb3ZlX3RvIGMgMy4gNC5dIFtcIm1vdmVfdG8gMS4wMCAyLjAwXCI7IFwicmVsX21vdmVfdG8gMy4wMCA0LjAwXCJdO1xuICAgIG1ha2UgXCJsaW5lX3RvXCIgKGZ1biBjIC0+IGxpbmVfdG8gYyA0LjA1IDIuOTU3KSBcImxpbmVfdG8gNC4wNSAyLjk2XCI7XG4gICAgbWFrZSBcImludmFsaWQgcmVsX2xpbmVfdG9cIiAoY2F0Y2ggTk9fQ1VSUkVOVF9QT0lOVCAoZnVuIGMgLT4gcmVsX2xpbmVfdG8gYyA0LjA1IDIuOTU3KSkgXCJyZWxfbGluZV90byA0LjA1IDIuOTYgLT4gcmFpc2UgKCVzLkVycm9yKE5PX0NVUlJFTlRfUE9JTlQpKVwiIGJhY2tlbmRfbmFtZTtcbiAgICBtYWtlX24gXCJyZWxfbGluZV90b1wiIFsoZnVuIGMgLT4gbW92ZV90byBjIDEuIDIuKTsgZnVuIGMgLT4gcmVsX2xpbmVfdG8gYyAzLiA0Ll0gW1wibW92ZV90byAxLjAwIDIuMDBcIjsgXCJyZWxfbGluZV90byAzLjAwIDQuMDBcIl07XG4gICAgbWFrZSBcImN1cnZlX3RvXCIgKGZ1biBjIC0+IGN1cnZlX3RvIGMgMS4gMi4gMy4gNC4gNS4gNi4pIFwiY3VydmVfdG8gMS4wMCAyLjAwIDMuMDAgNC4wMCA1LjAwIDYuMDBcIjtcbiAgICBtYWtlIFwiaW52YWxpZCByZWxfY3VydmVfdG9cIiAoY2F0Y2ggTk9fQ1VSUkVOVF9QT0lOVCAoZnVuIGMgLT4gcmVsX2N1cnZlX3RvIGMgMS4gMi4gMy4gNC4gNS4gNi4pKSBcInJlbF9jdXJ2ZV90byAxLjAwIDIuMDAgMy4wMCA0LjAwIDUuMDAgNi4wMCAtPiByYWlzZSAoJXMuRXJyb3IoTk9fQ1VSUkVOVF9QT0lOVCkpXCIgYmFja2VuZF9uYW1lO1xuICAgIG1ha2VfbiBcInJlbF9jdXJ2ZV90b1wiIFsoZnVuIGMgLT4gbW92ZV90byBjIDEuIDIuKTsgZnVuIGMgLT4gcmVsX2N1cnZlX3RvIGMgMS4gMi4gMy4gNC4gNS4gNi5dIFtcIm1vdmVfdG8gMS4wMCAyLjAwXCI7IFwicmVsX2N1cnZlX3RvIDEuMDAgMi4wMCAzLjAwIDQuMDAgNS4wMCA2LjAwXCJdO1xuICAgIG1ha2UgXCJyZWN0YW5nbGVcIiAoZnVuIGMgLT4gcmVjdGFuZ2xlIGMgMi4gMy4gfnc6NC4gfmg6NS4pIFwicmVjdGFuZ2xlIDIuMDAgMy4wMCB+dzo0LjAwIH5oOjUuMDBcIjtcbiAgICBtYWtlIFwiYXJjXCIgKGZ1biBjIC0+IGFyYyBjIDEuIDIuIH5yOjMuIH5hMTo0LiB+YTI6NS4pIFwiYXJjIDEuMDAgMi4wMCB+cjozLjAwIH5hMTo0LjAwIH5hMjo1LjAwXCI7XG4gICAgbWFrZSBcImFyY19uZWdhdGl2ZVwiIChmdW4gYyAtPiBhcmNfbmVnYXRpdmUgYyAxLiAyLiB+cjozLiB+YTE6NC4gfmEyOjUuKSBcImFyY19uZWdhdGl2ZSAxLjAwIDIuMDAgfnI6My4wMCB+YTE6NC4wMCB+YTI6NS4wMFwiO1xuICAgIG1ha2UgXCJQYXRoLmNsb3NlXCIgUGF0aC5jbG9zZSBcIlBhdGguY2xvc2VcIjtcbiAgICBtYWtlIFwiUGF0aC5jbGVhclwiIFBhdGguY2xlYXIgXCJQYXRoLmNsZWFyXCI7XG4gICAgbWFrZSBcIlBhdGguZ2V0X2N1cnJlbnRfcG9pbnRcIiBQYXRoLmdldF9jdXJyZW50X3BvaW50IFwiUGF0aC5nZXRfY3VycmVudF9wb2ludCAtPiAoMC4wMCwgMC4wMClcIjtcbiAgICBtYWtlX24gXCJtb3ZlX3RvLCBQYXRoLmdldF9jdXJyZW50X3BvaW50XCIgWyhmdW4gYyAtPiBtb3ZlX3RvIGMgMS4gMi4pOyBpZ25vcmUgJSBQYXRoLmdldF9jdXJyZW50X3BvaW50XSBbXCJtb3ZlX3RvIDEuMDAgMi4wMFwiOyBcIlBhdGguZ2V0X2N1cnJlbnRfcG9pbnQgLT4gKDEuMDAsIDIuMDApXCJdO1xuXG4gICAgbWFrZSBcInN0cm9rZVwiIHN0cm9rZSBcInN0cm9rZVwiO1xuICAgIG1ha2UgXCJzdHJva2VfcHJlc2VydmVcIiBzdHJva2VfcHJlc2VydmUgXCJzdHJva2VfcHJlc2VydmVcIjtcbiAgICBtYWtlIFwiZmlsbFwiIGZpbGwgXCJmaWxsXCI7XG4gICAgbWFrZSBcImZpbGxfcHJlc2VydmVcIiBmaWxsX3ByZXNlcnZlIFwiZmlsbF9wcmVzZXJ2ZVwiO1xuICAgIG1ha2UgXCJjbGlwXCIgY2xpcCBcImNsaXBcIjtcbiAgICBtYWtlIFwiY2xpcF9wcmVzZXJ2ZVwiIGNsaXBfcHJlc2VydmUgXCJjbGlwX3ByZXNlcnZlXCI7XG4gICAgbWFrZSBcInBhaW50XCIgcGFpbnQgXCJwYWludFwiO1xuICAgIG1ha2UgXCJwYWludCB3aXRoIGFscGhhXCIgKHBhaW50IH5hbHBoYTowLjUpIFwicGFpbnQgfmFscGhhOjAuNTBcIjtcblxuICAgIG1ha2UgXCJzZXRfbGluZV93aWR0aFwiIChmdW4gYyAtPiBzZXRfbGluZV93aWR0aCBjIDMuKSBcInNldF9saW5lX3dpZHRoIDMuMDBcIjtcbiAgICBtYWtlIFwiZ2V0X2xpbmVfd2lkdGhcIiBnZXRfbGluZV93aWR0aCBcImdldF9saW5lX3dpZHRoIC0+IDIuMDBcIjtcbiAgICBtYWtlIFwic2V0X2Rhc2hcIiAoZnVuIGMgLT4gc2V0X2Rhc2ggYyBbfDIuOyAzLnxdKSBcInNldF9kYXNoIFt8Mi4wMDsgMy4wMHxdXCI7XG4gICAgbWFrZSBcInNldF9kYXNoIHdpdGggb2ZzXCIgKGZ1biBjIC0+IHNldF9kYXNoIGMgfm9mczoyLiBbfDMuOyA0LnxdKSBcInNldF9kYXNoIH5vZnM6Mi4wMCBbfDMuMDA7IDQuMDB8XVwiO1xuICAgIG1ha2UgXCJnZXRfZGFzaFwiIGdldF9kYXNoIFwiZ2V0X2Rhc2ggLT4gKFt8fF0sIDAuMDApXCI7XG4gICAgbWFrZSBcInNldF9maWxsX3J1bGVcIiAoZnVuIGMgLT4gc2V0X2ZpbGxfcnVsZSBjIEVWRU5fT0REKSBcInNldF9maWxsX3J1bGUgRVZFTl9PRERcIjtcbiAgICBtYWtlIFwiZ2V0X2ZpbGxfcnVsZVwiIGdldF9maWxsX3J1bGUgXCJnZXRfZmlsbF9ydWxlIC0+IFdJTkRJTkdcIjtcbiAgICBtYWtlIFwic2V0X2xpbmVfY2FwIFJPVU5EXCIgKGZ1biBjIC0+IHNldF9saW5lX2NhcCBjIFJPVU5EKSBcInNldF9saW5lX2NhcCBST1VORFwiO1xuICAgIG1ha2UgXCJzZXRfbGluZV9jYXAgU1FVQVJFXCIgKGZ1biBjIC0+IHNldF9saW5lX2NhcCBjIFNRVUFSRSkgXCJzZXRfbGluZV9jYXAgU1FVQVJFXCI7XG4gICAgbWFrZSBcImdldF9saW5lX2NhcFwiIGdldF9saW5lX2NhcCBcImdldF9saW5lX2NhcCAtPiBCVVRUXCI7XG4gICAgbWFrZSBcInNldF9saW5lX2pvaW4gSk9JTl9ST1VORFwiIChmdW4gYyAtPiBzZXRfbGluZV9qb2luIGMgSk9JTl9ST1VORCkgXCJzZXRfbGluZV9qb2luIEpPSU5fUk9VTkRcIjtcbiAgICBtYWtlIFwic2V0X2xpbmVfam9pbiBKT0lOX0JFVkVMXCIgKGZ1biBjIC0+IHNldF9saW5lX2pvaW4gYyBKT0lOX0JFVkVMKSBcInNldF9saW5lX2pvaW4gSk9JTl9CRVZFTFwiO1xuICAgIG1ha2UgXCJnZXRfbGluZV9qb2luXCIgZ2V0X2xpbmVfam9pbiBcImdldF9saW5lX2pvaW4gLT4gSk9JTl9NSVRFUlwiO1xuICAgIG1ha2UgXCJzZXRfbWl0ZXJfbGltaXRcIiAoZnVuIGMgLT4gc2V0X21pdGVyX2xpbWl0IGMgMy4pIFwic2V0X21pdGVyX2xpbWl0IDMuMDBcIjtcbiAgICBtYWtlIFwiZ2V0X21pdGVyX2xpbWl0XCIgZ2V0X21pdGVyX2xpbWl0IFwiZ2V0X21pdGVyX2xpbWl0IC0+IDEwLjAwXCI7XG4gICAgbWFrZSBcInNldF9vcGVyYXRvciBJTlwiIChmdW4gYyAtPiBzZXRfb3BlcmF0b3IgYyBJTikgXCJzZXRfb3BlcmF0b3IgSU5cIjtcbiAgICBtYWtlIFwic2V0X29wZXJhdG9yIE9VVFwiIChmdW4gYyAtPiBzZXRfb3BlcmF0b3IgYyBPVVQpIFwic2V0X29wZXJhdG9yIE9VVFwiO1xuICAgIG1ha2UgXCJzZXRfb3BlcmF0b3IgQVRPUFwiIChmdW4gYyAtPiBzZXRfb3BlcmF0b3IgYyBBVE9QKSBcInNldF9vcGVyYXRvciBBVE9QXCI7XG4gICAgbWFrZSBcInNldF9vcGVyYXRvciBERVNUX09WRVJcIiAoZnVuIGMgLT4gc2V0X29wZXJhdG9yIGMgREVTVF9PVkVSKSBcInNldF9vcGVyYXRvciBERVNUX09WRVJcIjtcbiAgICBtYWtlIFwic2V0X29wZXJhdG9yIERFU1RfSU5cIiAoZnVuIGMgLT4gc2V0X29wZXJhdG9yIGMgREVTVF9JTikgXCJzZXRfb3BlcmF0b3IgREVTVF9JTlwiO1xuICAgIG1ha2UgXCJzZXRfb3BlcmF0b3IgREVTVF9PVVRcIiAoZnVuIGMgLT4gc2V0X29wZXJhdG9yIGMgREVTVF9PVVQpIFwic2V0X29wZXJhdG9yIERFU1RfT1VUXCI7XG4gICAgbWFrZSBcInNldF9vcGVyYXRvciBERVNUX0FUT1BcIiAoZnVuIGMgLT4gc2V0X29wZXJhdG9yIGMgREVTVF9BVE9QKSBcInNldF9vcGVyYXRvciBERVNUX0FUT1BcIjtcbiAgICBtYWtlIFwic2V0X29wZXJhdG9yIFhPUlwiIChmdW4gYyAtPiBzZXRfb3BlcmF0b3IgYyBYT1IpIFwic2V0X29wZXJhdG9yIFhPUlwiO1xuICAgIG1ha2UgXCJzZXRfb3BlcmF0b3IgQUREXCIgKGZ1biBjIC0+IHNldF9vcGVyYXRvciBjIEFERCkgXCJzZXRfb3BlcmF0b3IgQUREXCI7XG4gIF0gQCAoaWYgTi5iYWNrZW5kID0gYE5vZGUgfHwgTi5iYWNrZW5kID0gYEJyb3dzZXIgdGhlbiBbXSBlbHNlIFsgKCpCSVNFQ1QtSUdOT1JFKikgKCogVGVzdCBjb2RlICopXG4gICAgbWFrZSBcInNldF9vcGVyYXRvciBERVNUXCIgKGZ1biBjIC0+IHNldF9vcGVyYXRvciBjIERFU1QpIFwic2V0X29wZXJhdG9yIERFU1RcIjtcbiAgICBtYWtlIFwic2V0X29wZXJhdG9yIENMRUFSXCIgKGZ1biBjIC0+IHNldF9vcGVyYXRvciBjIENMRUFSKSBcInNldF9vcGVyYXRvciBDTEVBUlwiO1xuICAgIG1ha2UgXCJzZXRfb3BlcmF0b3IgU09VUkNFXCIgKGZ1biBjIC0+IHNldF9vcGVyYXRvciBjIFNPVVJDRSkgXCJzZXRfb3BlcmF0b3IgU09VUkNFXCI7XG4gICAgbWFrZSBcInNldF9vcGVyYXRvciBTQVRVUkFURVwiIChmdW4gYyAtPiBzZXRfb3BlcmF0b3IgYyBTQVRVUkFURSkgXCJzZXRfb3BlcmF0b3IgU0FUVVJBVEVcIjtcbiAgXSkgQCBbXG4gICAgbWFrZSBcImdldF9vcGVyYXRvclwiIGdldF9vcGVyYXRvciBcImdldF9vcGVyYXRvciAtPiBPVkVSXCI7XG5cbiAgICBtYWtlIFwic2V0X3NvdXJjZV9yZ2JcIiAoZnVuIGMgLT4gc2V0X3NvdXJjZV9yZ2IgYyAwLjUgMC42IDAuNykgXCJzZXRfc291cmNlX3JnYiAwLjUwIDAuNjAgMC43MFwiO1xuICAgIG1ha2UgXCJzZXRfc291cmNlX3JnYmFcIiAoZnVuIGMgLT4gc2V0X3NvdXJjZV9yZ2JhIGMgMC41IDAuNiAwLjcgMC44KSBcInNldF9zb3VyY2VfcmdiYSAwLjUwIDAuNjAgMC43MCAwLjgwXCI7XG4gICAgbWFrZSBcInNldF9zb3VyY2UgUmdiYVwiIChmdW4gYyAtPiBzZXRfc291cmNlIGMgKFBhdHRlcm4uY3JlYXRlX3JnYiAwLjUgMC42IDAuNykpIFwic2V0X3NvdXJjZSAoUmdiYSB7cj0wLjUwOyBnPTAuNjA7IGI9MC43MDsgYT0xLjAwfSlcIjtcbiAgICBtYWtlXG4gICAgICBcInNldF9zb3VyY2UgTGluZWFyR3JhZGllbnRcIlxuICAgICAgKGZ1biBjIC0+XG4gICAgICAgIGxldCBwID0gUGF0dGVybi5jcmVhdGVfbGluZWFyIH54MDoxLiB+eTA6Mi4gfngxOjMuIH55MTo0LiBpblxuICAgICAgICBQYXR0ZXJuLmFkZF9jb2xvcl9zdG9wX3JnYiBwIDAuMSAwLjIgMC4zO1xuICAgICAgICBzZXRfc291cmNlIGMgcFxuICAgICAgKVxuICAgICAgXCJzZXRfc291cmNlIChMaW5lYXJHcmFkaWVudCB7eDA9MS4wMDsgeTA9Mi4wMDsgeDE9My4wMDsgeTE9NC4wMDsgc3RvcF9wb2ludHM9W3twb3NpdGlvbj0wLjAwOyByPTAuMTA7IGc9MC4yMDsgYj0wLjMwOyBhPTEuMDB9XX0pXCJcbiAgICA7XG4gICAgbWFrZSBcInNldF9zb3VyY2UgUmFkaWFsR3JhZGllbnRcIiAoZnVuIGMgLT4gc2V0X3NvdXJjZSBjIChQYXR0ZXJuLmNyZWF0ZV9yYWRpYWwgfngwOjEuIH55MDoyLiB+cjA6NS4gfngxOjMuIH55MTo0LiB+cjE6Ni4pKSBcInNldF9zb3VyY2UgKFJhZGlhbEdyYWRpZW50IHt4MD0xLjAwOyB5MD0yLjAwOyByMD01LjAwOyB4MT0zLjAwOyB5MT00LjAwOyByMTYuMDA7IHN0b3BfcG9pbnRzPVtdfSlcIjtcbiAgICBtYWtlIFwiZ2V0X3NvdXJjZVwiIGdldF9zb3VyY2UgXCJnZXRfc291cmNlIC0+IChSZ2JhIHtyPTAuMDA7IGc9MC4wMDsgYj0wLjAwOyBhPTEuMDB9KVwiO1xuXG4gICAgbWFrZSBcInNldF9mb250X3NpemVcIiAoZnVuIGMgLT4gc2V0X2ZvbnRfc2l6ZSBjIDMuKSBcInNldF9mb250X3NpemUgMy4wMFwiO1xuICAgIG1ha2UgXCJzZWxlY3RfZm9udF9mYWNlXCIgKGZ1biBjIC0+IHNlbGVjdF9mb250X2ZhY2UgYyBcImZvby1iYXJcIikgXCJzZWxlY3RfZm9udF9mYWNlIFxcXCJmb28tYmFyXFxcIlwiO1xuICAgIG1ha2UgXCJzZWxlY3RfZm9udF9mYWNlIFVwcmlnaHRcIiAoZnVuIGMgLT4gc2VsZWN0X2ZvbnRfZmFjZSBjIH5zbGFudDpVcHJpZ2h0IFwiZm9vLWJhclwiKSBcInNlbGVjdF9mb250X2ZhY2UgfnNsYW50OlVwcmlnaHQgXFxcImZvby1iYXJcXFwiXCI7XG4gICAgbWFrZSBcInNlbGVjdF9mb250X2ZhY2UgT2JsaXF1ZVwiIChmdW4gYyAtPiBzZWxlY3RfZm9udF9mYWNlIGMgfnNsYW50Ok9ibGlxdWUgXCJmb28tYmFyXCIpIFwic2VsZWN0X2ZvbnRfZmFjZSB+c2xhbnQ6T2JsaXF1ZSBcXFwiZm9vLWJhclxcXCJcIjtcbiAgICBtYWtlIFwic2VsZWN0X2ZvbnRfZmFjZSBOb3JtYWxcIiAoZnVuIGMgLT4gc2VsZWN0X2ZvbnRfZmFjZSBjIH53ZWlnaHQ6Tm9ybWFsIFwiZm9vLWJhclwiKSBcInNlbGVjdF9mb250X2ZhY2UgfndlaWdodDpOb3JtYWwgXFxcImZvby1iYXJcXFwiXCI7XG4gICAgbWFrZSBcInNlbGVjdF9mb250X2ZhY2UgSXRhbGljIEJvbGRcIiAoZnVuIGMgLT4gc2VsZWN0X2ZvbnRfZmFjZSBjIH5zbGFudDpJdGFsaWMgfndlaWdodDpCb2xkIFwiZm9vLWJhclwiKSBcInNlbGVjdF9mb250X2ZhY2UgfnNsYW50Okl0YWxpYyB+d2VpZ2h0OkJvbGQgXFxcImZvby1iYXJcXFwiXCI7XG4gICAgbWFrZSBcInNob3dfdGV4dFwiIChmdW4gYyAtPiBzaG93X3RleHQgYyBcImZsaWJpZGlib29cIikgXCJzaG93X3RleHQgXFxcImZsaWJpZGlib29cXFwiXCI7XG4gICAgbWFrZScgXCJ0ZXh0X2V4dGVudHNcIlxuICAgICAgKGZ1biBjIC0+IHRleHRfZXh0ZW50cyBjIFwiYWJjZFwiKVxuICAgICAgKEZybXQud2l0aF9zY2FuX3Jlc3VsdFxuICAgICAgICBcInRleHRfZXh0ZW50cyBcXFwiYWJjZFxcXCIgLT4ge3hfYmVhcmluZz0lZjsgeV9iZWFyaW5nPSVmOyB3aWR0aD0lZjsgaGVpZ2h0PSVmOyB4X2FkdmFuY2U9JWY7IHlfYWR2YW5jZT0lZn1cIlxuICAgICAgICB+ZjooZnVuIF8gXyB3aWR0aCBfIF8gXyAtPiBjaGVja19mbG9hdF9pbiB+bG93OjEwLiB+aGlnaDo1MC4gd2lkdGgpXG4gICAgICApXG4gICAgO1xuICAgIG1ha2UnIFwiZm9udF9leHRlbnRzXCJcbiAgICAgIGZvbnRfZXh0ZW50c1xuICAgICAgKEZybXQud2l0aF9zY2FuX3Jlc3VsdFxuICAgICAgICBcImZvbnRfZXh0ZW50cyAtPiB7YXNjZW50PSVmOyBkZXNjZW50PSVmOyBiYXNlbGluZT0lZjsgbWF4X3hfYWR2YW5jZT0lZjsgbWF4X3lfYWR2YW5jZT0lZn1cIlxuICAgICAgICB+ZjooZnVuIGFzY2VudCBkZXNjZW50IF8gXyBfIC0+XG4gICAgICAgICAgY2hlY2tfZmxvYXRfaW4gfmxvdzo1LiB+aGlnaDoxNS4gYXNjZW50O1xuICAgICAgICAgIGNoZWNrX2Zsb2F0X2luIH5sb3c6MS4gfmhpZ2g6Ny4gZGVzY2VudFxuICAgICAgICApXG4gICAgICApXG4gICAgO1xuICBdKVxuZW5kXG4iLCIoKiBDb3B5cmlnaHQgMjAxNy0yMDE4IFZpbmNlbnQgSmFjcXVlcyA8dmluY2VudEB2aW5jZW50LWphY3F1ZXMubmV0PiAqKVxuXG5vcGVuIEdlbmVyYWwuQWJiclxuXG5tb2R1bGUgTWFrZShDOiBDYWlyb01vY2suUykgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0ge25hbWU6IHN0cmluZzsgd2lkdGg6IGludDsgaGVpZ2h0OiBpbnQ7IGRyYXc6IEMuY29udGV4dCAtPiB1bml0fVxuXG4gIGxldCBtYWtlX3NpbXBsZSBuYW1lIHdpZHRoIGhlaWdodCBkcmF3ID1cbiAgICB7bmFtZTsgd2lkdGg7IGhlaWdodDsgZHJhd31cblxuICBsZXQgbWFrZV9saXN0IG5hbWUgd2lkdGggaGVpZ2h0IHZhbHVlcyBkcmF3ID1cbiAgICBtYWtlX3NpbXBsZSBuYW1lIHdpZHRoIChoZWlnaHQgKiBMaS5zaXplIHZhbHVlcykgKGZ1biBjdHggLT5cbiAgICAgIHZhbHVlc1xuICAgICAgfD4gTGkuaXRlciB+ZjooZnVuIHZhbHVlIC0+XG4gICAgICAgIEMuc2F2ZSBjdHg7XG4gICAgICAgIEMucmVjdGFuZ2xlIGN0eCAwLiAwLiB+dzooRmwub2ZfaW50IHdpZHRoKSB+aDooRmwub2ZfaW50IGhlaWdodCk7XG4gICAgICAgIEMuY2xpcCBjdHg7XG5cbiAgICAgICAgZHJhdyB2YWx1ZSBjdHg7XG5cbiAgICAgICAgQy5yZXN0b3JlIGN0eDtcblxuICAgICAgICBDLnRyYW5zbGF0ZSBjdHggMC4gKEZsLm9mX2ludCBoZWlnaHQpO1xuICAgICAgKVxuICAgIClcblxuICBsZXQgdGVzdHMgPSAoW1xuICAgIG1ha2VfbGlzdCBcInNldF9saW5lX3dpZHRoXCIgNTAgMjAgWzUuOyAxMC5dIChmdW4gbGluZV93aWR0aCBjdHggLT5cbiAgICAgIEMuc2V0X2xpbmVfd2lkdGggY3R4IGxpbmVfd2lkdGg7XG4gICAgICBDLm1vdmVfdG8gY3R4IDEwLiAxMC47XG4gICAgICBDLmxpbmVfdG8gY3R4IDQwLiAxMC47XG4gICAgICBDLnN0cm9rZSBjdHg7XG4gICAgKTtcbiAgICBtYWtlX2xpc3QgXCJzZXRfbWl0ZXJfbGltaXRcIiAxMjAgNTAgWzguOyA5LjsgMTAuXSAoZnVuIG1pdGVyX2xpbWl0IGN0eCAtPlxuICAgICAgQy5zZXRfbWl0ZXJfbGltaXQgY3R4IG1pdGVyX2xpbWl0O1xuICAgICAgQy5zZXRfbGluZV9qb2luIGN0eCBDLkpPSU5fTUlURVI7XG4gICAgICBDLnNldF9saW5lX3dpZHRoIGN0eCA1LjtcbiAgICAgIEMubW92ZV90byBjdHggMTAuIDEwLjtcbiAgICAgIEMubGluZV90byBjdHggNTAuIDEwLjtcbiAgICAgIEMubGluZV90byBjdHggMTAuIDIwLjtcbiAgICAgIEMubW92ZV90byBjdHggMTAuIDMwLjtcbiAgICAgIEMubGluZV90byBjdHggNTAuIDMwLjtcbiAgICAgIEMubGluZV90byBjdHggMTAuIDM5LjtcbiAgICAgIEMuc3Ryb2tlIGN0eDtcbiAgICApO1xuICAgIG1ha2VfbGlzdCBcInNldF9maWxsX3J1bGVcIiA2MCA2MCBDLltFVkVOX09ERDsgV0lORElOR10gKGZ1biBmaWxsX3J1bGUgY3R4IC0+XG4gICAgICBDLnNldF9maWxsX3J1bGUgY3R4IGZpbGxfcnVsZTtcbiAgICAgIEMubW92ZV90byBjdHggMTAuIDEwLjtcbiAgICAgIEMubGluZV90byBjdHggNDAuIDEwLjtcbiAgICAgIEMubGluZV90byBjdHggNDAuIDUwLjtcbiAgICAgIEMubGluZV90byBjdHggMzAuIDUwLjtcbiAgICAgIEMubGluZV90byBjdHggMzAuIDIwLjtcbiAgICAgIEMubGluZV90byBjdHggMjAuIDIwLjtcbiAgICAgIEMubGluZV90byBjdHggMjAuIDMwLjtcbiAgICAgIEMubGluZV90byBjdHggNTAuIDMwLjtcbiAgICAgIEMubGluZV90byBjdHggNTAuIDQwLjtcbiAgICAgIEMubGluZV90byBjdHggMTAuIDQwLjtcbiAgICAgIEMuZmlsbCBjdHg7XG4gICAgKTtcbiAgICBtYWtlX2xpc3QgXCJzZXRfbGluZV9jYXBcIiA1MCAyMCBDLltST1VORDsgU1FVQVJFOyBCVVRUXSAoZnVuIGxpbmVfY2FwIGN0eCAtPlxuICAgICAgQy5zZXRfbGluZV9jYXAgY3R4IGxpbmVfY2FwO1xuICAgICAgQy5zZXRfbGluZV93aWR0aCBjdHggMTAuO1xuICAgICAgQy5tb3ZlX3RvIGN0eCAxMC4gMTAuO1xuICAgICAgQy5saW5lX3RvIGN0eCA0MC4gMTAuO1xuICAgICAgQy5zdHJva2UgY3R4O1xuICAgICk7XG4gICAgbWFrZV9saXN0IFwic2V0X2xpbmVfam9pblwiIDUwIDUwIEMuW0pPSU5fUk9VTkQ7IEpPSU5fQkVWRUw7IEpPSU5fTUlURVJdIChmdW4gbGluZV9qb2luIGN0eCAtPlxuICAgICAgQy5zZXRfbGluZV9qb2luIGN0eCBsaW5lX2pvaW47XG4gICAgICBDLnNldF9saW5lX3dpZHRoIGN0eCAxMC47XG4gICAgICBDLm1vdmVfdG8gY3R4IDEwLiAxMC47XG4gICAgICBDLmxpbmVfdG8gY3R4IDQwLiAxMC47XG4gICAgICBDLmxpbmVfdG8gY3R4IDQwLiA0MC47XG4gICAgICBDLnN0cm9rZSBjdHg7XG4gICAgKTtcbiAgICBtYWtlX2xpc3QgXCJzZXRfb3BlcmF0b3JcIiA5MCA5MCBDLltPVkVSOyBJTjsgT1VUOyBBVE9QOyBERVNUX09WRVI7IERFU1RfSU47IERFU1RfT1VUOyBERVNUX0FUT1A7IFhPUjsgQUREXSAoZnVuIG9wZXJhdG9yIGN0eCAtPlxuICAgICAgQy5zZXRfc291cmNlX3JnYmEgY3R4IDAuIDAuIDAuOCAwLjg7XG4gICAgICBDLnJlY3RhbmdsZSBjdHggMTAuIDEwLiB+dzo1MC4gfmg6NTAuO1xuICAgICAgQy5maWxsIGN0eDtcblxuICAgICAgQy5zZXRfb3BlcmF0b3IgY3R4IG9wZXJhdG9yO1xuICAgICAgQy5zZXRfc291cmNlX3JnYmEgY3R4IDAuOCAwLiAwLiAwLjg7XG4gICAgICBDLmFyYyBjdHggNTAuIDUwLiB+cjozMC4gfmExOjAuIH5hMjooRmwucGkgKi4gMi4pO1xuICAgICAgQy5maWxsIGN0eDtcbiAgICApO1xuICAgIG1ha2VfbGlzdCBcInNldF9kYXNoXCIgMTAwIDIwIFsoMC4sIFt8NS47IDcuOyA5LjsgMTEufF0pOyAoMC4sIFt8MTAuOyAyLnxdKTsgKDMuLCBbfDEwLjsgMi58XSldIChmdW4gKG9mcywgZGFzaGVzKSBjdHggLT5cbiAgICAgIEMuc2V0X2Rhc2ggY3R4IH5vZnMgZGFzaGVzO1xuICAgICAgQy5zZXRfbGluZV93aWR0aCBjdHggMTAuO1xuICAgICAgQy5tb3ZlX3RvIGN0eCAxMC4gMTAuO1xuICAgICAgQy5saW5lX3RvIGN0eCA5MC4gMTAuO1xuICAgICAgQy5zdHJva2UgY3R4O1xuICAgICk7XG4gICAgbWFrZV9zaW1wbGUgXCJzY2FsZSByb3RhdGUgdHJhbnNsYXRlIHNhdmUgcmVzdG9yZVwiIDQwMCAyMDAgKGZ1biBjdHggLT5cbiAgICAgIGxldCByZWMgYXV4ID0gZnVuY3Rpb25cbiAgICAgICAgfCAwIC0+XG4gICAgICAgICAgQy5saW5lX3RvIGN0eCAxLiAwLjtcbiAgICAgICAgICBDLnRyYW5zbGF0ZSBjdHggMS4gMC47XG4gICAgICAgIHwgbiAtPlxuICAgICAgICAgIEMuc2F2ZSBjdHg7XG4gICAgICAgICAgQy5zY2FsZSBjdHggKDEuIC8uIDMuKSAoMS4gLy4gMy4pO1xuICAgICAgICAgIGF1eCAobiAtIDEpO1xuICAgICAgICAgIEMucm90YXRlIGN0eCAoLS5GbC5waSAvLiAzLik7XG4gICAgICAgICAgYXV4IChuIC0gMSk7XG4gICAgICAgICAgQy5yb3RhdGUgY3R4ICgyLiAqLiBGbC5waSAvLiAzLik7XG4gICAgICAgICAgYXV4IChuIC0gMSk7XG4gICAgICAgICAgQy5yb3RhdGUgY3R4ICgtLkZsLnBpIC8uIDMuKTtcbiAgICAgICAgICBhdXggKG4gLSAxKTtcbiAgICAgICAgICBDLnJlc3RvcmUgY3R4O1xuICAgICAgICAgIEMudHJhbnNsYXRlIGN0eCAxLiAwLjtcbiAgICAgIGluXG4gICAgICBDLnRyYW5zbGF0ZSBjdHggMC4gMTUwLjtcbiAgICAgIEMuc2NhbGUgY3R4IDQwMC4gNDAwLjtcbiAgICAgIEMubW92ZV90byBjdHggMC4gMC47XG4gICAgICBhdXggMztcbiAgICAgIEMuaWRlbnRpdHlfbWF0cml4IGN0eDtcbiAgICAgIEMuc3Ryb2tlIGN0eDtcbiAgICApO1xuICAgIG1ha2Vfc2ltcGxlIFwic2NhbGUgaWRlbnRpdHlfbWF0cml4XCIgMTAwIDEwMCAoZnVuIGN0eCAtPlxuICAgICAgQy5tb3ZlX3RvIGN0eCAxMC4gMTAuO1xuICAgICAgQy5saW5lX3RvIGN0eCA1MC4gMzAuO1xuICAgICAgQy5zY2FsZSBjdHggMy4gMC41O1xuICAgICAgQy5saW5lX3RvIGN0eCAzMC4gMTgwLjtcbiAgICAgIEMuaWRlbnRpdHlfbWF0cml4IGN0eDtcbiAgICAgIEMuc3Ryb2tlIGN0eDtcbiAgICApO1xuICAgIG1ha2VfbGlzdCBcImRyYXdpbmcgZnVuY3Rpb25zXCIgMTAwIDEwMCBDLltcbiAgICAgIChmaWxsX3ByZXNlcnZlLCBzdHJva2UpO1xuICAgICAgKHN0cm9rZV9wcmVzZXJ2ZSwgZmlsbCk7XG4gICAgICAoY2xpcF9wcmVzZXJ2ZSwgZmlsbCk7XG4gICAgICAoY2xpcF9wcmVzZXJ2ZSwgc3Ryb2tlKTtcbiAgICBdIChmdW4gKGYxLCBmMikgY3R4IC0+XG4gICAgICBDLm1vdmVfdG8gY3R4IDEwLiAxMC47XG4gICAgICBDLmxpbmVfdG8gY3R4IDUwLiAyMC47XG4gICAgICBDLmFyYyBjdHggNTAuIDEwLiB+cjo0MC4gfmExOjAuIH5hMjoxLjtcbiAgICAgIEMucmVsX2xpbmVfdG8gY3R4IDEwLiAzMC47XG4gICAgICBDLmFyY19uZWdhdGl2ZSBjdHggMzAuIDkwLiB+cjo0MC4gfmExOjAuIH5hMjooLTEuKTtcbiAgICAgIEMubGluZV90byBjdHggNTAuIDkwLjtcbiAgICAgIEMuY3VydmVfdG8gY3R4IDMwLiA5MC4gMTAuIDgwLiAyMC4gMzAuO1xuICAgICAgQy5QYXRoLmNsb3NlIGN0eDtcbiAgICAgIEMucmVjdGFuZ2xlIGN0eCA0MC4gNTAuIH53OjMwLiB+aDoyMC47XG4gICAgICBDLnJlbF9tb3ZlX3RvIGN0eCAxMC4gKC0xMC4pO1xuICAgICAgQy5yZWxfY3VydmVfdG8gY3R4ICgtMTAuKSAwLiAyMC4gMC4gMjAuICgtMjAuKTtcbiAgICAgIEMuc2V0X2xpbmVfd2lkdGggY3R4IDQuO1xuICAgICAgQy5zZXRfc291cmNlX3JnYiBjdHggMC4yIDEuIDAuMjtcbiAgICAgIGYxIGN0eDtcbiAgICAgIEMuc2V0X3NvdXJjZV9yZ2IgY3R4IDAuMiAwLjIgMS47XG4gICAgICBmMiBjdHg7XG4gICAgKTtcbiAgICBtYWtlX3NpbXBsZSBcImNsaXAgcGFpbnRcIiA1MCA1MCAoZnVuIGN0eCAtPlxuICAgICAgQy5hcmMgY3R4IDI1LiAyNS4gfnI6MjAuIH5hMToxLiB+YTI6KC0xLik7XG4gICAgICBDLmNsaXAgY3R4O1xuICAgICAgQy5wYWludCBjdHg7XG4gICAgKTtcbiAgICBtYWtlX2xpc3RcbiAgICAgIFwic2V0X3NvdXJjZV9yZ2JcIlxuICAgICAgNTAgNTBcbiAgICAgIFtcbiAgICAgICAgKDAuLCAwLiwgMC4pOyAoMC41LCAwLjUsIDAuNSk7ICgxLiwgMS4sIDEuKTtcbiAgICAgICAgKDAuNSwgMC4sIDAuKTsgKDAuLCAwLjUsIDAuKTsgKDAuLCAwLiwgMC41KTtcbiAgICAgICAgKDEuLCAwLiwgMC4pOyAoMC4sIDEuLCAwLik7ICgwLiwgMC4sIDEuKTtcbiAgICAgICAgKDAuNSwgMC41LCAwLik7ICgwLiwgMC41LCAwLjUpOyAoMC41LCAwLiwgMC41KTtcbiAgICAgICAgKDEuLCAxLiwgMC4pOyAoMC4sIDEuLCAxLik7ICgxLiwgMC4sIDEuKTtcbiAgICAgIF1cbiAgICAgIChmdW4gKHIsIGcsIGIpIGN0eCAtPlxuICAgICAgICBDLnNldF9zb3VyY2VfcmdiIGN0eCByIGcgYjtcbiAgICAgICAgQy5yZWN0YW5nbGUgY3R4IDUuIDUuIH53OjQwLiB+aDo0MC47XG4gICAgICAgIEMuZmlsbCBjdHg7XG4gICAgICApXG4gICAgO1xuICAgIG1ha2VfbGlzdFxuICAgICAgXCJzZXRfc291cmNlX3JnYmFcIlxuICAgICAgNTAgNTBcbiAgICAgIFtcbiAgICAgICAgKDAuLCAwLiwgMC4sIDAuNyk7ICgwLjUsIDAuNSwgMC41LCAwLjcpOyAoMS4sIDEuLCAxLiwgMC43KTtcbiAgICAgICAgKDAuNSwgMC4sIDAuLCAwLjcpOyAoMC4sIDAuNSwgMC4sIDAuNyk7ICgwLiwgMC4sIDAuNSwgMC43KTtcbiAgICAgICAgKDEuLCAwLiwgMC4sIDAuNyk7ICgwLiwgMS4sIDAuLCAwLjcpOyAoMC4sIDAuLCAxLiwgMC43KTtcbiAgICAgICAgKDAuNSwgMC41LCAwLiwgMC43KTsgKDAuLCAwLjUsIDAuNSwgMC43KTsgKDAuNSwgMC4sIDAuNSwgMC43KTtcbiAgICAgICAgKDEuLCAxLiwgMC4sIDAuNyk7ICgwLiwgMS4sIDEuLCAwLjcpOyAoMS4sIDAuLCAxLiwgMC43KTtcbiAgICAgICAgKDAuLCAwLiwgMC4sIDAuMyk7ICgwLjUsIDAuNSwgMC41LCAwLjMpOyAoMS4sIDEuLCAxLiwgMC4zKTtcbiAgICAgICAgKDAuNSwgMC4sIDAuLCAwLjMpOyAoMC4sIDAuNSwgMC4sIDAuMyk7ICgwLiwgMC4sIDAuNSwgMC4zKTtcbiAgICAgICAgKDEuLCAwLiwgMC4sIDAuMyk7ICgwLiwgMS4sIDAuLCAwLjMpOyAoMC4sIDAuLCAxLiwgMC4zKTtcbiAgICAgICAgKDAuNSwgMC41LCAwLiwgMC4zKTsgKDAuLCAwLjUsIDAuNSwgMC4zKTsgKDAuNSwgMC4sIDAuNSwgMC4zKTtcbiAgICAgICAgKDEuLCAxLiwgMC4sIDAuMyk7ICgwLiwgMS4sIDEuLCAwLjMpOyAoMS4sIDAuLCAxLiwgMC4zKTtcbiAgICAgIF1cbiAgICAgIChmdW4gKHIsIGcsIGIsIGEpIGN0eCAtPlxuICAgICAgICBDLnNldF9zb3VyY2VfcmdiIGN0eCAwLjYgMC42IDAuOTtcbiAgICAgICAgQy5wYWludCBjdHg7XG4gICAgICAgIEMuc2V0X3NvdXJjZV9yZ2JhIGN0eCByIGcgYiBhO1xuICAgICAgICBDLnJlY3RhbmdsZSBjdHggNS4gNS4gfnc6NDAuIH5oOjQwLjtcbiAgICAgICAgQy5maWxsIGN0eDtcbiAgICAgIClcbiAgICA7XG4gICAgbWFrZV9zaW1wbGUgXCJzZXRfc291cmNlIGxpbmVhciBncmFkaWVudFwiIDEwMCA0MCAoZnVuIGN0eCAtPlxuICAgICAgQy5zZXRfc291cmNlX3JnYiBjdHggMS4gMC4gMC47XG4gICAgICBDLnBhaW50IGN0eDtcbiAgICAgIGxldCBwID0gQy5QYXR0ZXJuLmNyZWF0ZV9saW5lYXIgfngwOjEwLiB+eTA6MjAuIH54MTo5MC4gfnkxOjMwLiBpblxuICAgICAgQy5QYXR0ZXJuLmFkZF9jb2xvcl9zdG9wX3JnYiBwIH5vZnM6MC4gMS4gMC4gMC47XG4gICAgICBDLlBhdHRlcm4uYWRkX2NvbG9yX3N0b3BfcmdiYSBwIH5vZnM6MS4gMC4gMC4gMS4gMC4yO1xuICAgICAgQy5QYXR0ZXJuLmFkZF9jb2xvcl9zdG9wX3JnYiBwIH5vZnM6MC40IDAuIDEuIDAuO1xuICAgICAgQy5zZXRfc291cmNlIGN0eCBwO1xuICAgICAgQy5yZWN0YW5nbGUgY3R4IDUuIDUuIH53OjkwLiB+aDozMC47XG4gICAgICBDLmZpbGwgY3R4O1xuICAgICk7XG4gICAgbWFrZV9zaW1wbGUgXCJzZXRfc291cmNlIHJhZGlhbCBncmFkaWVudFwiIDIwMCAyMDAgKGZ1biBjdHggLT5cbiAgICAgIGxldCAoeDAsIHkwLCByMCwgeDEsIHkxLCByMSkgPSAoNTAuLCA0MC4sIDMwLiwgMTEwLiwgMTQwLiwgNTAuKSBpblxuICAgICAgbGV0IHAgPSBDLlBhdHRlcm4uY3JlYXRlX3JhZGlhbCB+eDAgfnkwIH5yMCB+eDEgfnkxIH5yMSBpblxuICAgICAgQy5QYXR0ZXJuLmFkZF9jb2xvcl9zdG9wX3JnYiBwIH5vZnM6MC4gMS4gMC4gMC47XG4gICAgICBDLlBhdHRlcm4uYWRkX2NvbG9yX3N0b3BfcmdiIHAgfm9mczoxLiAwLiAwLiAxLjtcbiAgICAgIEMuc2V0X3NvdXJjZSBjdHggcDtcbiAgICAgIEMucGFpbnQgY3R4O1xuICAgICAgQy5zZXRfc291cmNlX3JnYiBjdHggMC4gMC4gMC47XG4gICAgICBDLmFyYyBjdHggeDAgeTAgfnI6cjAgfmExOjAuIH5hMjo2LjI4O1xuICAgICAgQy5zdHJva2UgY3R4O1xuICAgICAgQy5hcmMgY3R4IHgxIHkxIH5yOnIxIH5hMTowLiB+YTI6Ni4yODtcbiAgICAgIEMuc3Ryb2tlIGN0eDtcbiAgICApO1xuICAgIG1ha2Vfc2ltcGxlIFwicGFpbnQgd2l0aCBhbHBoYSAxXCIgMTAwIDEwMCAoZnVuIGN0eCAtPlxuICAgICAgQy5hcmMgY3R4IDUwLiA1MC4gfnI6NDAuIH5hMTowLiB+YTI6Ni4yODtcbiAgICAgIEMuZmlsbCBjdHg7XG4gICAgICBDLnNldF9zb3VyY2VfcmdiIGN0eCAwLiAxLiAxLjtcbiAgICAgIEMucGFpbnQgY3R4IH5hbHBoYTowLjU7XG4gICAgKTtcbiAgICBtYWtlX3NpbXBsZSBcInBhaW50IHdpdGggYWxwaGEgMlwiIDEwMCAxMDAgKGZ1biBjdHggLT5cbiAgICAgIEMuYXJjIGN0eCA1MC4gNTAuIH5yOjQwLiB+YTE6MC4gfmEyOjYuMjg7XG4gICAgICBDLmZpbGwgY3R4O1xuICAgICAgQy5zZXRfc291cmNlX3JnYmEgY3R4IDAuIDEuIDEuIDAuNTtcbiAgICAgIEMucGFpbnQgY3R4IH5hbHBoYTowLjU7XG4gICAgKTtcbiAgICBtYWtlX3NpbXBsZSBcInBhaW50IHdpdGggYWxwaGEgM1wiIDEwMCAxMDAgKGZ1biBjdHggLT5cbiAgICAgIEMuYXJjIGN0eCA1MC4gNTAuIH5yOjQwLiB+YTE6MC4gfmEyOjYuMjg7XG4gICAgICBDLmZpbGwgY3R4O1xuICAgICAgbGV0IHAgPSBDLlBhdHRlcm4uY3JlYXRlX2xpbmVhciB+eDA6MC4gfnkwOjAuIH54MToxMDAuIH55MToxMDAuIGluXG4gICAgICBDLlBhdHRlcm4uYWRkX2NvbG9yX3N0b3BfcmdiIHAgfm9mczowLiAwLiAxLiAwLjtcbiAgICAgIEMuUGF0dGVybi5hZGRfY29sb3Jfc3RvcF9yZ2IgcCB+b2ZzOjEuIDAuIDAuIDEuO1xuICAgICAgQy5zZXRfc291cmNlIGN0eCBwO1xuICAgICAgQy5wYWludCBjdHggfmFscGhhOjAuNTtcbiAgICApO1xuICAgIG1ha2Vfc2ltcGxlIFwicGFpbnQgd2l0aCBhbHBoYSA0XCIgMTAwIDEwMCAoZnVuIGN0eCAtPlxuICAgICAgQy5hcmMgY3R4IDUwLiA1MC4gfnI6NDAuIH5hMTowLiB+YTI6Ni4yODtcbiAgICAgIEMuZmlsbCBjdHg7XG4gICAgICBsZXQgcCA9IEMuUGF0dGVybi5jcmVhdGVfbGluZWFyIH54MDowLiB+eTA6MC4gfngxOjEwMC4gfnkxOjEwMC4gaW5cbiAgICAgIEMuUGF0dGVybi5hZGRfY29sb3Jfc3RvcF9yZ2JhIHAgfm9mczowLiAwLiAxLiAwLiAwLjU7XG4gICAgICBDLlBhdHRlcm4uYWRkX2NvbG9yX3N0b3BfcmdiYSBwIH5vZnM6MS4gMC4gMC4gMS4gMC41O1xuICAgICAgQy5zZXRfc291cmNlIGN0eCBwO1xuICAgICAgQy5wYWludCBjdHggfmFscGhhOjAuNTtcbiAgICApO1xuICBdKVxuZW5kXG4iLCIoKiBDb3B5cmlnaHQgMjAxNy0yMDE4IFZpbmNlbnQgSmFjcXVlcyA8dmluY2VudEB2aW5jZW50LWphY3F1ZXMubmV0PiAqKVxuXG5vcGVuIEdlbmVyYWwuQWJiclxuXG5tb2R1bGUgTWFrZShDOiBDYWlyb01vY2suUykgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0ge25hbWU6IHN0cmluZzsgd2lkdGg6IGludDsgaGVpZ2h0OiBpbnQ7IGRyYXdzOiAoQy5jb250ZXh0IC0+IHN0cmluZyBsaXN0KSBsaXN0fVxuXG4gIG1vZHVsZSBEZWNvcmF0ZWRDID0gQ2Fpcm9Nb2NrLkRlY29yYXRlKEMpXG5cbiAgbGV0IG1ha2UgbmFtZSB3aWR0aCBoZWlnaHQgZHJhd3MgPVxuICAgIGxldCBkcmF3cyA9XG4gICAgICBkcmF3c1xuICAgICAgfD4gTGkubWFwIH5mOihmdW4gZHJhdyAtPlxuICAgICAgICBmdW4gY3R4IC0+XG4gICAgICAgICAgbGV0IGN0eCA9IERlY29yYXRlZEMuY3JlYXRlIGN0eCBpblxuICAgICAgICAgIGRyYXcgY3R4O1xuICAgICAgICAgIERlY29yYXRlZEMuY2FsbHMgY3R4XG4gICAgICApXG4gICAgaW5cbiAgICB7bmFtZTsgd2lkdGg7IGhlaWdodDsgZHJhd3N9XG5cbiAgbGV0IGxpbWl0YXRpb25zID0gRGVjb3JhdGVkQy4oW1xuICAgIG1ha2UgXCJhcmNfbW9yZV90aGFuXzJwaVwiIDEwMCAxMDAgW2Z1biBjdHggLT5cbiAgICAgIGFyYyBjdHggNTAuIDUwLiB+cjo0MC4gfmExOjAuIH5hMjo3LjtcbiAgICAgIGlnbm9yZSAoUGF0aC5nZXRfY3VycmVudF9wb2ludCBjdHgpO1xuICAgICAgbGluZV90byBjdHggNTAuIDUwLjtcbiAgICAgIHN0cm9rZSBjdHhcbiAgICBdO1xuICAgIG1ha2UgXCJmb250X2V4dGVudHNcIiAxMDAgMTAgW2Z1biBjdHggLT5cbiAgICAgIGlnbm9yZSAoZm9udF9leHRlbnRzIGN0eClcbiAgICBdO1xuICAgIG1ha2UgXCJ0ZXh0X2V4dGVudHNcIiAxMDAgMTAgW2Z1biBjdHggLT5cbiAgICAgIGlnbm9yZSAodGV4dF9leHRlbnRzIGN0eCBcIkhlbGxvXCIpXG4gICAgXTtcbiAgICBtYWtlIFwic2hvd190ZXh0XCIgMTAwIDI0MCBbZnVuIGN0eCAtPlxuICAgICAgc2V0X2ZvbnRfc2l6ZSBjdHggMjAuO1xuICAgICAgW1xuICAgICAgICAoVXByaWdodCwgTm9ybWFsLCBcInNhbnMtc2VyaWZcIik7XG4gICAgICAgIChJdGFsaWMsIE5vcm1hbCwgXCJzYW5zLXNlcmlmXCIpO1xuICAgICAgICAoT2JsaXF1ZSwgTm9ybWFsLCBcInNhbnMtc2VyaWZcIik7XG4gICAgICAgIChVcHJpZ2h0LCBCb2xkLCBcInNhbnMtc2VyaWZcIik7XG4gICAgICAgIChJdGFsaWMsIEJvbGQsIFwic2Fucy1zZXJpZlwiKTtcbiAgICAgICAgKE9ibGlxdWUsIEJvbGQsIFwic2Fucy1zZXJpZlwiKTtcbiAgICAgICAgKFVwcmlnaHQsIE5vcm1hbCwgXCJzZXJpZlwiKTtcbiAgICAgICAgKFVwcmlnaHQsIE5vcm1hbCwgXCJtb25vc3BhY2VcIik7XG4gICAgICBdXG4gICAgICB8PiBMaS5pdGVyIH5mOihmdW4gKHNsYW50LCB3ZWlnaHQsIGZhbWlseSkgLT5cbiAgICAgICAgbW92ZV90byBjdHggMTAuIDIwLjtcbiAgICAgICAgc2VsZWN0X2ZvbnRfZmFjZSBjdHggfnNsYW50IH53ZWlnaHQgZmFtaWx5O1xuICAgICAgICBzaG93X3RleHQgY3R4IFwiSGVcIjtcbiAgICAgICAgc2hvd190ZXh0IGN0eCBcImxsb1wiO1xuICAgICAgICB0cmFuc2xhdGUgY3R4IDAuIDMwLjtcbiAgICAgIClcbiAgICBdO1xuICAgIG1ha2UgXCJyZXVzZV9jYW52YXNfdHJhbnNmb3JtYXRpb25cIiAxMDAgNjAgW1xuICAgICAgKGZ1biBjdHggLT4gc2NhbGUgY3R4IDIuIDMuKTtcbiAgICAgIChmdW4gY3R4IC0+XG4gICAgICAgIG1vdmVfdG8gY3R4IDEwLiAxMC47XG4gICAgICAgIGxpbmVfdG8gY3R4IDQwLiAxMC47XG4gICAgICAgIHN0cm9rZSBjdHgpO1xuICAgIF07XG4gICAgbWFrZSBcInJldXNlX2NhbnZhc19saW5lX2NhcFwiIDEwMCA2MCBbXG4gICAgICAoZnVuIGN0eCAtPiBzZXRfbGluZV9jYXAgY3R4IFJPVU5EKTtcbiAgICAgIChmdW4gY3R4IC0+XG4gICAgICAgIHNldF9saW5lX3dpZHRoIGN0eCAyMC47XG4gICAgICAgIG1vdmVfdG8gY3R4IDMwLiAzMC47XG4gICAgICAgIGxpbmVfdG8gY3R4IDcwLiAzMC47XG4gICAgICAgIHN0cm9rZSBjdHgpO1xuICAgIF07XG4gIF0pXG5lbmRcbiIsIigqIENvcHlyaWdodCAyMDE3LTIwMTggVmluY2VudCBKYWNxdWVzIDx2aW5jZW50QHZpbmNlbnQtamFjcXVlcy5uZXQ+ICopXG5cbm9wZW4gR2VuZXJhbC5BYmJyXG5vcGVuIFRzdFxuXG5sZXQgZHJhd2luZ190ZXN0cyA9XG4gIGxldCBtb2R1bGUgVCA9IERyYXdpbmcuTWFrZShDYWlyb01vY2spIGluXG4gIExpLm1hcCB+ZjooZnVuIHtULm5hbWU7IF99IC0+IG5hbWUpIFQudGVzdHNcblxubW9kdWxlIE1ha2UoWDogc2lnXG4gIHZhbCB0aXRsZTogc3RyaW5nXG5cbiAgbW9kdWxlIEM6IENhaXJvTW9jay5TXG5cbiAgbW9kdWxlIE46IHNpZ1xuICAgIHZhbCBuYW1lOiBzdHJpbmdcbiAgICB2YWwgY3JlYXRlOiB1bml0IC0+IEMuY29udGV4dFxuICAgIHZhbCBiYWNrZW5kOiBbYENhaXJvIHwgYE5vZGUgfCBgQnJvd3NlciB8IGBDYWlyb01vY2sgXVxuICBlbmRcblxuICBtb2R1bGUgRHJhd2luZ1Rlc3QoVDogc2lnXG4gICAgdHlwZSB0ID0ge25hbWU6IHN0cmluZzsgd2lkdGg6IGludDsgaGVpZ2h0OiBpbnQ7IGRyYXc6IEMuY29udGV4dCAtPiB1bml0fVxuICBlbmQpOiBzaWdcbiAgICB2YWwgcnVuOiBULnQgLT4gdW5pdFxuICBlbmRcblxuICBtb2R1bGUgTGltaXRhdGlvbihMOiBzaWdcbiAgICB0eXBlIHQgPSB7bmFtZTogc3RyaW5nOyB3aWR0aDogaW50OyBoZWlnaHQ6IGludDsgZHJhd3M6IChDLmNvbnRleHQgLT4gc3RyaW5nIGxpc3QpIGxpc3R9XG4gIGVuZCk6IHNpZ1xuICAgIHZhbCBydW46IEwudCAtPiB1bml0XG4gIGVuZFxuZW5kKSA9IHN0cnVjdFxuICBvcGVuIFhcblxuICBtb2R1bGUgTGltaXRhdGlvbnMgPSBMaW1pdGF0aW9ucy5NYWtlKEMpXG4gIG1vZHVsZSBMaW1pdGF0aW9uID0gTGltaXRhdGlvbihMaW1pdGF0aW9ucylcblxuICBsZXQgKCkgPSBMaS5pdGVyIH5mOkxpbWl0YXRpb24ucnVuIExpbWl0YXRpb25zLmxpbWl0YXRpb25zXG5cbiAgbGV0IHRlc3QgPSB0aXRsZSA+OjogW1xuICAgIChcbiAgICAgIGxldCBtb2R1bGUgVCA9IERlY29yYXRpb24uTWFrZShDYWlyb01vY2suTW9jaykoc3RydWN0XG4gICAgICAgIGxldCBuYW1lID0gXCJDYWlyb01vY2suTW9ja1wiXG4gICAgICAgIGxldCBjcmVhdGUgPSBDYWlyb01vY2suTW9jay5jcmVhdGVcbiAgICAgICAgbGV0IGJhY2tlbmQgPSBgQ2Fpcm9Nb2NrXG4gICAgICBlbmQpIGluXG4gICAgICBULnRlc3RcbiAgICApO1xuICAgIChcbiAgICAgIGxldCBtb2R1bGUgVCA9IERlY29yYXRpb24uTWFrZShDKShOKSBpblxuICAgICAgVC50ZXN0XG4gICAgKTtcbiAgICAoXG4gICAgICBsZXQgbW9kdWxlIFQgPSBVbml2ZXJzYWwuTWFrZShDYWlyb01vY2suTW9jaykoc3RydWN0XG4gICAgICAgIGxldCBuYW1lID0gXCJDYWlyb01vY2suTW9ja1wiXG4gICAgICAgIGxldCBjcmVhdGUgPSBDYWlyb01vY2suTW9jay5jcmVhdGVcbiAgICAgICAgbGV0IGJhY2tlbmQgPSBgQ2Fpcm9Nb2NrXG4gICAgICBlbmQpIGluXG4gICAgICBULnRlc3RcbiAgICApO1xuICAgIChcbiAgICAgIGxldCBtb2R1bGUgVCA9IFVuaXZlcnNhbC5NYWtlKENhaXJvTW9jaykoc3RydWN0XG4gICAgICAgIGxldCBuYW1lID0gXCJDYWlyb01vY2tcIlxuICAgICAgICBsZXQgY3JlYXRlID0gQ2Fpcm9Nb2NrLmNyZWF0ZVxuICAgICAgICBsZXQgYmFja2VuZCA9IGBDYWlyb01vY2tcbiAgICAgIGVuZCkgaW5cbiAgICAgIFQudGVzdFxuICAgICk7XG4gICAgKFxuICAgICAgbGV0IG1vZHVsZSBUID0gVW5pdmVyc2FsLk1ha2UoQykoTikgaW5cbiAgICAgIFQudGVzdFxuICAgICk7XG4gICAgKFxuICAgICAgbGV0IG1vZHVsZSBEZWNvcmF0ZWRDID0gQ2Fpcm9Nb2NrLkRlY29yYXRlKEMpIGluXG4gICAgICBsZXQgbW9kdWxlIFQgPSBVbml2ZXJzYWwuTWFrZShEZWNvcmF0ZWRDKShzdHJ1Y3RcbiAgICAgICAgbGV0IG5hbWUgPSBGcm10LmFwcGx5IFwiQ2Fpcm9Nb2NrLkRlY29yYXRlKCVzKVwiIE4ubmFtZVxuICAgICAgICBsZXQgY3JlYXRlICgpID0gRGVjb3JhdGVkQy5jcmVhdGUgKE4uY3JlYXRlICgpKVxuICAgICAgICBsZXQgYmFja2VuZCA9IE4uYmFja2VuZFxuICAgICAgZW5kKSBpblxuICAgICAgVC50ZXN0XG4gICAgKTtcbiAgICB+OjogXCJEcmF3aW5nIHRlc3RzIG9uICVzXCIgTi5uYW1lIChcbiAgICAgIGxldCBtb2R1bGUgVCA9IERyYXdpbmcuTWFrZShDKSBpblxuICAgICAgbGV0IG1vZHVsZSBEVCA9IERyYXdpbmdUZXN0KFQpIGluXG4gICAgICBULnRlc3RzXG4gICAgICB8PiBMaS5tYXAgfmY6KGZ1biB0ZXN0IC0+XG4gICAgICAgIHRlc3QuVC5uYW1lID46IChsYXp5IChEVC5ydW4gdGVzdCkpXG4gICAgICApXG4gICAgKTtcbiAgXVxuZW5kXG4iXX0=