; Copyright 2017-2018 Vincent Jacques <vincent@vincent-jacques.net>

(jbuild_version 1)

; Files produced by cppo have file-line directives like:
;     # 1 "CairoMock.cppo.ml"
; They generate errors when jbuilder calls bisect_ppx:
;     (cd _build/default && ./.ppx/bisect_ppx/ppx.exe --dump-ast --cookie 'library-name="CairoMock"' -o src/CairoMock.pp.ml --impl src/CairoMock.ml)
;     File "src/CairoMock.ml", line 1:
;     Error: I/O error: CairoMock.cppo.ml: No such file or directory
; So we use sed to prepend the directory name to the file name, look like:
;     # 1 "src/CairoMock.cppo.ml"

(rule (
  (targets (CairoMock.mli))
  (deps (CairoMock.cppo.mli CairoMock.S.incl.mli))
  (action (run ${bin:cppo} -V OCAML:${ocaml_version} ${<} -o ${@}))
))

(rule (
  (targets (CairoMock.intermediate.1.ml))
  (deps (CairoMock.cppo.ml Backend.incl.ml CairoMock.S.incl.mli))
  (action (run ${bin:cppo} -V OCAML:${ocaml_version} ${<} -o ${@}))
))
(rule (
  (targets (CairoMock.intermediate.2.ml))
  (deps (CairoMock.intermediate.1.ml))
  (action (with-stdout-to ${@} (run ${bin:sed} "s|\"CairoMock|\"src/CairoMock|" ${<})))
))
(rule (
  (targets (CairoMock.ml))
  (deps (CairoMock.intermediate.2.ml))
  (action (with-stdout-to ${@} (run ${bin:sed} "s|\"Backend|\"src/Backend|" ${<})))
))

(rule (
  (targets (JsOfOCairo.intermediate.1.ml))
  (deps (JsOfOCairo.cppo.ml Backend.incl.ml))
  (action (run ${bin:cppo} -V OCAML:${ocaml_version} ${<} -o ${@}))
))
(rule (
  (targets (JsOfOCairo.intermediate.2.ml))
  (deps (JsOfOCairo.intermediate.1.ml))
  (action (with-stdout-to ${@} (run ${bin:sed} "s|\"JsOfOCairo|\"src/JsOfOCairo|" ${<})))
))
(rule (
  (targets (JsOfOCairo.ml))
  (deps (JsOfOCairo.intermediate.2.ml))
  (action (with-stdout-to ${@} (run ${bin:sed} "s|\"Backend|\"src/Backend|" ${<})))
))

; Programs that link to js_of_ocaml cannot run as native or bytecode,
; because js_of_ocaml provides C stubs of pure JavaScript functions that raise exceptions when called,
; and one of them is called during initialization of js_of_ocaml.
; We want CairoMock to be usable in native/bytecode applications.
; So we use (wrapped false) to distribute the CairoMock module as a top-level by-product of JsOfOCairo.
; We take care manually to not pollute the global namespace, as described in
; http://jbuilder.readthedocs.io/en/latest/jbuild.html#library
(library (
  (name JsOfOCairo)
  (public_name JsOfOCairo)
  (preprocess (pps (js_of_ocaml-ppx)))
;  (preprocess (pps (js_of_ocaml-ppx bisect_ppx)))
  (libraries (js_of_ocaml))
  (wrapped false)
))
